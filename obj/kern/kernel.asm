
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 18 00 	lgdtl  0x18c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 18 f0       	mov    $0xf018bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ac be 2b f0 01 	movl   $0x1,0xf02bbeac
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 2c e6 2d f0       	mov    $0xf02de62c,%edx
f010006a:	b8 d2 2f 25 f0       	mov    $0xf0252fd2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 d2 2f 25 f0       	push   $0xf0252fd2
f010007e:	e8 ad eb 02 00       	call   f012ec30 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 d4 be 2b f0 ff 	movl   $0xffffffff,0xf02bbed4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 0a 67 00 00       	call   f01067a9 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 e3 62 00 00       	call   f0106387 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 5e 6a 00 00       	call   f0106b07 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 4b 96 00 00       	call   f01096f9 <env_init>
	idt_init();
f01000ae:	e8 84 ab 00 00       	call   f010ac37 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 84 d2 00 00       	call   f010d33c <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 0d 76 00 00       	call   f01076d9 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 4d d4 00 00       	call   f010d526 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 53 d3 00 00       	call   f010d439 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 2e d3 00 00       	call   f010d421 <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 4e d3 00 00       	call   f010d451 <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 f6 60 00 00       	call   f0106201 <pic_init>
	sched_init() ;
f010010b:	e8 f3 5c 00 00       	call   f0105e03 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 00 f9 12 f0       	push   $0xf012f900
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 2c f9 12 f0       	push   $0xf012f92c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 51 f9 12 f0       	push   $0xf012f951
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 58 f9 12 f0       	push   $0xf012f958
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 a0 f9 12 f0       	push   $0xf012f9a0
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 e8 f9 12 f0       	push   $0xf012f9e8
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 a0 f9 12 f0       	push   $0xf012f9a0
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 58 f9 12 f0       	push   $0xf012f958
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 2d fa 12 f0       	push   $0xf012fa2d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 32 fa 12 f0       	push   $0xf012fa32
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 4b fa 12 f0       	push   $0xf012fa4b
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 c9 93 00 00       	call   f01095e3 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 4d fa 12 f0       	push   $0xf012fa4d
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 0e 5c 00 00       	call   f0105e4d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 32 fa 12 f0       	push   $0xf012fa32
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 4b fa 12 f0       	push   $0xf012fa4b
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 00 59 00 00       	call   f0105bc4 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 27 4d 00 00       	call   f0105005 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 67 5b 00 00       	call   f0105e4d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 32 fa 12 f0       	push   $0xf012fa32
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 4b fa 12 f0       	push   $0xf012fa4b
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 ff 4a 00 00       	call   f0104e7f <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 62 fa 12 f0       	push   $0xf012fa62
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 4b fa 12 f0       	push   $0xf012fa4b
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 04 30 25 f0       	mov    %eax,0xf0253004
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 08 30 25 f0 b4 	movl   $0x3b4,0xf0253008
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 08 30 25 f0 d4 	movl   $0x3d4,0xf0253008
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 0c 30 25 f0       	mov    %eax,0xf025300c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f0100732:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		text_length = 0;
f010075e:	c7 05 00 30 25 f0 00 	movl   $0x0,0xf0253000
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 10 30 25 f0 	mov    0xf0253010,%cx
f010076f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 0c 30 25 f0    	mov    0xf025300c,%ecx
f010082a:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 10 30 25 f0 	mov    %dx,0xf0253010
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 00 30 25 f0    	mov    0xf0253000,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 00 30 25 f0       	mov    %eax,0xf0253000
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 bd e3 02 00       	call   f012ec60 <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 08 30 25 f0    	mov    0xf0253008,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 08 30 25 f0    	mov    0xf0253008,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 28 32 25 f0       	mov    %eax,0xf0253228
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 28 32 25 f0       	mov    %eax,0xf0253228
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 28 32 25 f0       	mov    %eax,0xf0253228
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 28 32 25 f0       	mov    %eax,0xf0253228
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 c1 18 f0    	mov    -0xfe73ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 28 32 25 f0       	mov    %eax,0xf0253228

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 c5 18 f0 	mov    -0xfe73ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 00 30 25 f0    	mov    0xf0253000,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 00 30 25 f0       	mov    %eax,0xf0253000
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 7d fa 12 f0       	push   $0xf012fa7d
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 20 32 25 f0    	mov    0xf0253220,%edx
f0100c22:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 20 32 25 f0    	mov    %edx,0xf0253220
f0100c39:	8a 80 20 30 25 f0    	mov    -0xfdacfe0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 20 32 25 f0 00 	movl   $0x0,0xf0253220
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 20 32 25 f0    	mov    0xf0253220,%edx
f0100d12:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 20 32 25 f0    	mov    %edx,0xf0253220
f0100d29:	8a 80 20 30 25 f0    	mov    -0xfdacfe0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 20 32 25 f0 00 	movl   $0x0,0xf0253220
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 89 fa 12 f0       	push   $0xf012fa89
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 6b d5 02 00       	call   f012e394 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 ae db 02 00       	call   f012ea42 <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 40 9f 2d f0       	push   $0xf02d9f40
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 b1 dd 02 00       	call   f012ec60 <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 ec da 02 00       	call   f012ea42 <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 40 9f 2d f0       	push   $0xf02d9f40
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 ef dc 02 00       	call   f012ec60 <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 2c dc 02 00       	call   f012ec30 <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 a8 fa 12 f0       	push   $0xf012faa8
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 ab fa 12 f0       	push   $0xf012faab
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 40 bf 2b f0       	push   $0xf02bbf40
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 d1 d8 02 00       	call   f012ea42 <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 e6 d8 02 00       	call   f012ea91 <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 89 d8 02 00       	call   f012ea42 <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 bb fa 12 f0       	push   $0xf012fabb
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 83 de 02 00       	call   f012f076 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 c0 fa 12 f0       	push   $0xf012fac0
f010121a:	50                   	push   %eax
f010121b:	e8 2e d9 02 00       	call   f012eb4e <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 c4 fa 12 f0       	push   $0xf012fac4
f0101235:	50                   	push   %eax
f0101236:	e8 13 d9 02 00       	call   f012eb4e <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 c9 fa 12 f0       	push   $0xf012fac9
f0101250:	50                   	push   %eax
f0101251:	e8 f8 d8 02 00       	call   f012eb4e <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 c9 fa 12 f0       	push   $0xf012fac9
f0101271:	50                   	push   %eax
f0101272:	e8 d7 d8 02 00       	call   f012eb4e <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 7f d7 02 00       	call   f012ea42 <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 81 d7 02 00       	call   f012ea91 <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 60 d7 02 00       	call   f012ea91 <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 dd d6 02 00       	call   f012ea42 <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 f8 d7 02 00       	call   f012eb86 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 2d d6 02 00       	call   f012ea42 <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 f8 d7 02 00       	call   f012ec30 <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 63 d6 02 00       	call   f012eabf <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 a3 d5 02 00       	call   f012ea42 <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 bb d6 02 00       	call   f012eb86 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 06 d5 02 00       	call   f012ea42 <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 a6 d4 02 00       	call   f012ea42 <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 71 d6 02 00       	call   f012ec30 <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 dc d4 02 00       	call   f012eabf <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 1e d4 02 00       	call   f012ea42 <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 39 d5 02 00       	call   f012eb86 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 84 d3 02 00       	call   f012ea42 <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 2a d3 02 00       	call   f012ea42 <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 f5 d4 02 00       	call   f012ec30 <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 60 d3 02 00       	call   f012eabf <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 40 bf 2b f0       	push   $0xf02bbf40
f01017c5:	e8 78 d2 02 00       	call   f012ea42 <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 1f d2 02 00       	call   f012ea42 <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 0c d2 02 00       	call   f012ea42 <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 40 bf 2b f0    	lea    -0xfd440c0(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 b1 d1 02 00       	call   f012ea42 <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 40 4f 2d f0    	lea    -0xfd2b0c0(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 a6 d1 02 00       	call   f012ec60 <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 40 9b 2d f0       	push   $0xf02d9b40
f0101ad6:	e8 85 d1 02 00       	call   f012ec60 <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 55 d0 02 00       	call   f012eb4e <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 c5 18 f0       	mov    %eax,0xf018c530
f0101b0b:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 37 d1 02 00       	call   f012ec60 <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 00 bf 2b f0 00 	movl   $0x0,0xf02bbf00
f0101b60:	00 00 00 
f0101b63:	c7 05 04 bf 2b f0 00 	movl   $0x0,0xf02bbf04
f0101b6a:	00 00 00 
f0101b6d:	c7 05 0c bf 2b f0 00 	movl   $0x0,0xf02bbf0c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 a3 d0 02 00       	call   f012ec30 <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 cd fa 12 f0       	push   $0xf012facd
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 bb fa 12 f0       	push   $0xf012fabb
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 98 d4 02 00       	call   f012f076 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 96 02 00 00       	call   f0101e98 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 d3 fa 12 f0       	push   $0xf012fad3
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 ec fa 12 f0       	push   $0xf012faec
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 58 fb 12 f0       	push   $0xf012fb58
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 88 fb 12 f0       	push   $0xf012fb88
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 b2 fb 12 f0       	push   $0xf012fbb2
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 08 bf 2b f0       	mov    %eax,0xf02bbf08
f0101d03:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 bc fb 12 f0       	push   $0xf012fbbc
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 1f fc 12 f0       	push   $0xf012fc1f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 28 fc 12 f0       	push   $0xf012fc28
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 08 bf 2b f0       	mov    %eax,0xf02bbf08
f0101e53:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 c5 18 f0       	add    $0xf018c548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <process_command>:


int process_command(int number_of_arguments, char** arguments)
{
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	panic("process_command is not implemented yet");
f0101e9e:	83 ec 04             	sub    $0x4,%esp
f0101ea1:	68 30 fc 12 f0       	push   $0xf012fc30
f0101ea6:	68 7e 01 00 00       	push   $0x17e
f0101eab:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101eb0:	e8 fb e2 ff ff       	call   f01001b0 <_panic>

f0101eb5 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0101eb5:	55                   	push   %ebp
f0101eb6:	89 e5                	mov    %esp,%ebp
f0101eb8:	c7 05 d8 be 2b f0 00 	movl   $0x0,0xf02bbed8
f0101ebf:	00 00 00 
f0101ec2:	90                   	nop
f0101ec3:	5d                   	pop    %ebp
f0101ec4:	c3                   	ret    

f0101ec5 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0101ec5:	55                   	push   %ebp
f0101ec6:	89 e5                	mov    %esp,%ebp
f0101ec8:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f0101ecf:	00 00 00 
f0101ed2:	90                   	nop
f0101ed3:	5d                   	pop    %ebp
f0101ed4:	c3                   	ret    

f0101ed5 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0101ed5:	55                   	push   %ebp
f0101ed6:	89 e5                	mov    %esp,%ebp
f0101ed8:	c7 05 d8 be 2b f0 02 	movl   $0x2,0xf02bbed8
f0101edf:	00 00 00 
f0101ee2:	90                   	nop
f0101ee3:	5d                   	pop    %ebp
f0101ee4:	c3                   	ret    

f0101ee5 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0101ee5:	55                   	push   %ebp
f0101ee6:	89 e5                	mov    %esp,%ebp
f0101ee8:	c7 05 d8 be 2b f0 03 	movl   $0x3,0xf02bbed8
f0101eef:	00 00 00 
f0101ef2:	90                   	nop
f0101ef3:	5d                   	pop    %ebp
f0101ef4:	c3                   	ret    

f0101ef5 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0101ef5:	55                   	push   %ebp
f0101ef6:	89 e5                	mov    %esp,%ebp
f0101ef8:	c7 05 d8 be 2b f0 04 	movl   $0x4,0xf02bbed8
f0101eff:	00 00 00 
f0101f02:	90                   	nop
f0101f03:	5d                   	pop    %ebp
f0101f04:	c3                   	ret    

f0101f05 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0101f05:	55                   	push   %ebp
f0101f06:	89 e5                	mov    %esp,%ebp
f0101f08:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f0d:	85 c0                	test   %eax,%eax
f0101f0f:	75 04                	jne    f0101f15 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0101f11:	b0 01                	mov    $0x1,%al
f0101f13:	eb 02                	jmp    f0101f17 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0101f15:	b0 00                	mov    $0x0,%al
f0101f17:	5d                   	pop    %ebp
f0101f18:	c3                   	ret    

f0101f19 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0101f19:	55                   	push   %ebp
f0101f1a:	89 e5                	mov    %esp,%ebp
f0101f1c:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f21:	83 f8 01             	cmp    $0x1,%eax
f0101f24:	75 04                	jne    f0101f2a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0101f26:	b0 01                	mov    $0x1,%al
f0101f28:	eb 02                	jmp    f0101f2c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0101f2a:	b0 00                	mov    $0x0,%al
f0101f2c:	5d                   	pop    %ebp
f0101f2d:	c3                   	ret    

f0101f2e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0101f2e:	55                   	push   %ebp
f0101f2f:	89 e5                	mov    %esp,%ebp
f0101f31:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f36:	83 f8 02             	cmp    $0x2,%eax
f0101f39:	75 04                	jne    f0101f3f <isKHeapPlacementStrategyBESTFIT+0x11>
f0101f3b:	b0 01                	mov    $0x1,%al
f0101f3d:	eb 02                	jmp    f0101f41 <isKHeapPlacementStrategyBESTFIT+0x13>
f0101f3f:	b0 00                	mov    $0x0,%al
f0101f41:	5d                   	pop    %ebp
f0101f42:	c3                   	ret    

f0101f43 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0101f43:	55                   	push   %ebp
f0101f44:	89 e5                	mov    %esp,%ebp
f0101f46:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f4b:	83 f8 03             	cmp    $0x3,%eax
f0101f4e:	75 04                	jne    f0101f54 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0101f50:	b0 01                	mov    $0x1,%al
f0101f52:	eb 02                	jmp    f0101f56 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0101f54:	b0 00                	mov    $0x0,%al
f0101f56:	5d                   	pop    %ebp
f0101f57:	c3                   	ret    

f0101f58 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0101f58:	55                   	push   %ebp
f0101f59:	89 e5                	mov    %esp,%ebp
f0101f5b:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f60:	83 f8 04             	cmp    $0x4,%eax
f0101f63:	75 04                	jne    f0101f69 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0101f65:	b0 01                	mov    $0x1,%al
f0101f67:	eb 02                	jmp    f0101f6b <isKHeapPlacementStrategyWORSTFIT+0x13>
f0101f69:	b0 00                	mov    $0x0,%al
f0101f6b:	5d                   	pop    %ebp
f0101f6c:	c3                   	ret    

f0101f6d <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0101f6d:	55                   	push   %ebp
f0101f6e:	89 e5                	mov    %esp,%ebp
f0101f70:	c7 05 ac be 2b f0 01 	movl   $0x1,0xf02bbeac
f0101f77:	00 00 00 
f0101f7a:	90                   	nop
f0101f7b:	5d                   	pop    %ebp
f0101f7c:	c3                   	ret    

f0101f7d <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	c7 05 ac be 2b f0 02 	movl   $0x2,0xf02bbeac
f0101f87:	00 00 00 
f0101f8a:	90                   	nop
f0101f8b:	5d                   	pop    %ebp
f0101f8c:	c3                   	ret    

f0101f8d <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0101f8d:	55                   	push   %ebp
f0101f8e:	89 e5                	mov    %esp,%ebp
f0101f90:	c7 05 ac be 2b f0 03 	movl   $0x3,0xf02bbeac
f0101f97:	00 00 00 
f0101f9a:	90                   	nop
f0101f9b:	5d                   	pop    %ebp
f0101f9c:	c3                   	ret    

f0101f9d <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0101f9d:	55                   	push   %ebp
f0101f9e:	89 e5                	mov    %esp,%ebp
f0101fa0:	c7 05 ac be 2b f0 04 	movl   $0x4,0xf02bbeac
f0101fa7:	00 00 00 
f0101faa:	90                   	nop
f0101fab:	5d                   	pop    %ebp
f0101fac:	c3                   	ret    

f0101fad <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0101fad:	55                   	push   %ebp
f0101fae:	89 e5                	mov    %esp,%ebp
f0101fb0:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fb5:	83 f8 01             	cmp    $0x1,%eax
f0101fb8:	75 04                	jne    f0101fbe <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0101fba:	b0 01                	mov    $0x1,%al
f0101fbc:	eb 02                	jmp    f0101fc0 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0101fbe:	b0 00                	mov    $0x0,%al
f0101fc0:	5d                   	pop    %ebp
f0101fc1:	c3                   	ret    

f0101fc2 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0101fc2:	55                   	push   %ebp
f0101fc3:	89 e5                	mov    %esp,%ebp
f0101fc5:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fca:	83 f8 02             	cmp    $0x2,%eax
f0101fcd:	75 04                	jne    f0101fd3 <isUHeapPlacementStrategyBESTFIT+0x11>
f0101fcf:	b0 01                	mov    $0x1,%al
f0101fd1:	eb 02                	jmp    f0101fd5 <isUHeapPlacementStrategyBESTFIT+0x13>
f0101fd3:	b0 00                	mov    $0x0,%al
f0101fd5:	5d                   	pop    %ebp
f0101fd6:	c3                   	ret    

f0101fd7 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0101fd7:	55                   	push   %ebp
f0101fd8:	89 e5                	mov    %esp,%ebp
f0101fda:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fdf:	83 f8 03             	cmp    $0x3,%eax
f0101fe2:	75 04                	jne    f0101fe8 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0101fe4:	b0 01                	mov    $0x1,%al
f0101fe6:	eb 02                	jmp    f0101fea <isUHeapPlacementStrategyNEXTFIT+0x13>
f0101fe8:	b0 00                	mov    $0x0,%al
f0101fea:	5d                   	pop    %ebp
f0101feb:	c3                   	ret    

f0101fec <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101fec:	55                   	push   %ebp
f0101fed:	89 e5                	mov    %esp,%ebp
f0101fef:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101ff4:	83 f8 04             	cmp    $0x4,%eax
f0101ff7:	75 04                	jne    f0101ffd <isUHeapPlacementStrategyWORSTFIT+0x11>
f0101ff9:	b0 01                	mov    $0x1,%al
f0101ffb:	eb 02                	jmp    f0101fff <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101ffd:	b0 00                	mov    $0x0,%al
f0101fff:	5d                   	pop    %ebp
f0102000:	c3                   	ret    

f0102001 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102001:	55                   	push   %ebp
f0102002:	89 e5                	mov    %esp,%ebp
f0102004:	53                   	push   %ebx
f0102005:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102008:	8b 45 08             	mov    0x8(%ebp),%eax
f010200b:	c1 e8 0c             	shr    $0xc,%eax
f010200e:	89 c2                	mov    %eax,%edx
f0102010:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0102015:	39 c2                	cmp    %eax,%edx
f0102017:	72 14                	jb     f010202d <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0102019:	83 ec 04             	sub    $0x4,%esp
f010201c:	68 58 fc 12 f0       	push   $0xf012fc58
f0102021:	6a 55                	push   $0x55
f0102023:	68 80 fc 12 f0       	push   $0xf012fc80
f0102028:	e8 83 e1 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010202d:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0102033:	8b 45 08             	mov    0x8(%ebp),%eax
f0102036:	c1 e8 0c             	shr    $0xc,%eax
f0102039:	89 c2                	mov    %eax,%edx
f010203b:	89 d0                	mov    %edx,%eax
f010203d:	01 c0                	add    %eax,%eax
f010203f:	01 d0                	add    %edx,%eax
f0102041:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0102048:	01 d8                	add    %ebx,%eax
f010204a:	01 d0                	add    %edx,%eax
f010204c:	01 c8                	add    %ecx,%eax
}
f010204e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102051:	c9                   	leave  
f0102052:	c3                   	ret    

f0102053 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102053:	55                   	push   %ebp
f0102054:	89 e5                	mov    %esp,%ebp
f0102056:	53                   	push   %ebx
f0102057:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010205a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102061:	eb 3b                	jmp    f010209e <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0102063:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102066:	89 d0                	mov    %edx,%eax
f0102068:	01 c0                	add    %eax,%eax
f010206a:	01 d0                	add    %edx,%eax
f010206c:	c1 e0 03             	shl    $0x3,%eax
f010206f:	05 44 c5 18 f0       	add    $0xf018c544,%eax
f0102074:	8b 10                	mov    (%eax),%edx
f0102076:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102079:	89 c8                	mov    %ecx,%eax
f010207b:	01 c0                	add    %eax,%eax
f010207d:	01 c8                	add    %ecx,%eax
f010207f:	c1 e0 03             	shl    $0x3,%eax
f0102082:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102087:	8b 00                	mov    (%eax),%eax
f0102089:	83 ec 04             	sub    $0x4,%esp
f010208c:	52                   	push   %edx
f010208d:	50                   	push   %eax
f010208e:	68 03 05 13 f0       	push   $0xf0130503
f0102093:	e8 99 ed ff ff       	call   f0100e31 <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010209b:	ff 45 f4             	incl   -0xc(%ebp)
f010209e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01020a1:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f01020a6:	39 c2                	cmp    %eax,%edx
f01020a8:	72 b9                	jb     f0102063 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01020aa:	83 ec 0c             	sub    $0xc,%esp
f01020ad:	68 0c 05 13 f0       	push   $0xf013050c
f01020b2:	e8 7a ed ff ff       	call   f0100e31 <cprintf>
f01020b7:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01020ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020c1:	eb 42                	jmp    f0102105 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01020c3:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f01020c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01020cc:	89 d0                	mov    %edx,%eax
f01020ce:	01 c0                	add    %eax,%eax
f01020d0:	01 d0                	add    %edx,%eax
f01020d2:	c1 e0 02             	shl    $0x2,%eax
f01020d5:	01 c8                	add    %ecx,%eax
f01020d7:	8b 50 04             	mov    0x4(%eax),%edx
f01020da:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f01020e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01020e3:	89 c8                	mov    %ecx,%eax
f01020e5:	01 c0                	add    %eax,%eax
f01020e7:	01 c8                	add    %ecx,%eax
f01020e9:	c1 e0 02             	shl    $0x2,%eax
f01020ec:	01 d8                	add    %ebx,%eax
f01020ee:	8b 00                	mov    (%eax),%eax
f01020f0:	83 ec 04             	sub    $0x4,%esp
f01020f3:	52                   	push   %edx
f01020f4:	50                   	push   %eax
f01020f5:	68 21 05 13 f0       	push   $0xf0130521
f01020fa:	e8 32 ed ff ff       	call   f0100e31 <cprintf>
f01020ff:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102102:	ff 45 f4             	incl   -0xc(%ebp)
f0102105:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010210a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010210d:	7c b4                	jl     f01020c3 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010210f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102114:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102117:	c9                   	leave  
f0102118:	c3                   	ret    

f0102119 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0102119:	55                   	push   %ebp
f010211a:	89 e5                	mov    %esp,%ebp
f010211c:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f010211f:	83 ec 0c             	sub    $0xc,%esp
f0102122:	68 3d 05 13 f0       	push   $0xf013053d
f0102127:	e8 05 ed ff ff       	call   f0100e31 <cprintf>
f010212c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f010212f:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102134:	83 ec 04             	sub    $0x4,%esp
f0102137:	50                   	push   %eax
f0102138:	68 0c 00 10 f0       	push   $0xf010000c
f010213d:	68 58 05 13 f0       	push   $0xf0130558
f0102142:	e8 ea ec ff ff       	call   f0100e31 <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010214a:	b8 fd f8 12 00       	mov    $0x12f8fd,%eax
f010214f:	83 ec 04             	sub    $0x4,%esp
f0102152:	50                   	push   %eax
f0102153:	68 fd f8 12 f0       	push   $0xf012f8fd
f0102158:	68 94 05 13 f0       	push   $0xf0130594
f010215d:	e8 cf ec ff ff       	call   f0100e31 <cprintf>
f0102162:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102165:	b8 d2 2f 25 00       	mov    $0x252fd2,%eax
f010216a:	83 ec 04             	sub    $0x4,%esp
f010216d:	50                   	push   %eax
f010216e:	68 d2 2f 25 f0       	push   $0xf0252fd2
f0102173:	68 d0 05 13 f0       	push   $0xf01305d0
f0102178:	e8 b4 ec ff ff       	call   f0100e31 <cprintf>
f010217d:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0102180:	b8 2c e6 2d 00       	mov    $0x2de62c,%eax
f0102185:	83 ec 04             	sub    $0x4,%esp
f0102188:	50                   	push   %eax
f0102189:	68 2c e6 2d f0       	push   $0xf02de62c
f010218e:	68 18 06 13 f0       	push   $0xf0130618
f0102193:	e8 99 ec ff ff       	call   f0100e31 <cprintf>
f0102198:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f010219b:	b8 2c e6 2d f0       	mov    $0xf02de62c,%eax
f01021a0:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01021a6:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01021ab:	29 c2                	sub    %eax,%edx
f01021ad:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01021af:	85 c0                	test   %eax,%eax
f01021b1:	79 05                	jns    f01021b8 <command_kernel_info+0x9f>
f01021b3:	05 ff 03 00 00       	add    $0x3ff,%eax
f01021b8:	c1 f8 0a             	sar    $0xa,%eax
f01021bb:	83 ec 08             	sub    $0x8,%esp
f01021be:	50                   	push   %eax
f01021bf:	68 54 06 13 f0       	push   $0xf0130654
f01021c4:	e8 68 ec ff ff       	call   f0100e31 <cprintf>
f01021c9:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01021cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021d1:	c9                   	leave  
f01021d2:	c3                   	ret    

f01021d3 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01021d3:	55                   	push   %ebp
f01021d4:	89 e5                	mov    %esp,%ebp
f01021d6:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01021d9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01021dd:	75 37                	jne    f0102216 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01021df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021e2:	83 c0 04             	add    $0x4,%eax
f01021e5:	8b 00                	mov    (%eax),%eax
f01021e7:	83 ec 04             	sub    $0x4,%esp
f01021ea:	6a 10                	push   $0x10
f01021ec:	6a 00                	push   $0x0
f01021ee:	50                   	push   %eax
f01021ef:	e8 ae cb 02 00       	call   f012eda2 <strtol>
f01021f4:	83 c4 10             	add    $0x10,%esp
f01021f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01021fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01021fd:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102200:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102203:	83 c0 08             	add    $0x8,%eax
f0102206:	8b 00                	mov    (%eax),%eax
f0102208:	8a 00                	mov    (%eax),%al
f010220a:	88 c2                	mov    %al,%dl
f010220c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010220f:	88 10                	mov    %dl,(%eax)
f0102211:	e9 bc 00 00 00       	jmp    f01022d2 <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102216:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010221a:	0f 85 a2 00 00 00    	jne    f01022c2 <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102220:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102223:	83 c0 04             	add    $0x4,%eax
f0102226:	8b 00                	mov    (%eax),%eax
f0102228:	83 ec 04             	sub    $0x4,%esp
f010222b:	6a 0a                	push   $0xa
f010222d:	6a 00                	push   $0x0
f010222f:	50                   	push   %eax
f0102230:	e8 6d cb 02 00       	call   f012eda2 <strtol>
f0102235:	83 c4 10             	add    $0x10,%esp
f0102238:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010223b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102242:	83 ec 04             	sub    $0x4,%esp
f0102245:	6a 00                	push   $0x0
f0102247:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010224a:	50                   	push   %eax
f010224b:	ff 75 f4             	pushl  -0xc(%ebp)
f010224e:	e8 af 73 00 00       	call   f0109602 <envid2env>
f0102253:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102256:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102259:	83 c0 08             	add    $0x8,%eax
f010225c:	8b 00                	mov    (%eax),%eax
f010225e:	83 ec 04             	sub    $0x4,%esp
f0102261:	6a 10                	push   $0x10
f0102263:	6a 00                	push   $0x0
f0102265:	50                   	push   %eax
f0102266:	e8 37 cb 02 00       	call   f012eda2 <strtol>
f010226b:	83 c4 10             	add    $0x10,%esp
f010226e:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102271:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102274:	85 c0                	test   %eax,%eax
f0102276:	75 07                	jne    f010227f <command_writeusermem+0xac>
f0102278:	b8 00 00 00 00       	mov    $0x0,%eax
f010227d:	eb 58                	jmp    f01022d7 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010227f:	0f 20 d8             	mov    %cr3,%eax
f0102282:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102285:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102288:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f010228b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010228e:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102294:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102297:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010229a:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010229d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01022a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01022a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022a6:	83 c0 0c             	add    $0xc,%eax
f01022a9:	8b 00                	mov    (%eax),%eax
f01022ab:	8a 00                	mov    (%eax),%al
f01022ad:	88 c2                	mov    %al,%dl
f01022af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01022b2:	88 10                	mov    %dl,(%eax)
f01022b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01022b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01022ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01022bd:	0f 22 d8             	mov    %eax,%cr3
f01022c0:	eb 10                	jmp    f01022d2 <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01022c2:	83 ec 0c             	sub    $0xc,%esp
f01022c5:	68 80 06 13 f0       	push   $0xf0130680
f01022ca:	e8 62 eb ff ff       	call   f0100e31 <cprintf>
f01022cf:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d7:	c9                   	leave  
f01022d8:	c3                   	ret    

f01022d9 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01022d9:	55                   	push   %ebp
f01022da:	89 e5                	mov    %esp,%ebp
f01022dc:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01022df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022e2:	83 c0 04             	add    $0x4,%eax
f01022e5:	8b 00                	mov    (%eax),%eax
f01022e7:	83 ec 04             	sub    $0x4,%esp
f01022ea:	6a 10                	push   $0x10
f01022ec:	6a 00                	push   $0x0
f01022ee:	50                   	push   %eax
f01022ef:	e8 ae ca 02 00       	call   f012eda2 <strtol>
f01022f4:	83 c4 10             	add    $0x10,%esp
f01022f7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01022fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01022ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102306:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102309:	83 c0 08             	add    $0x8,%eax
f010230c:	8b 00                	mov    (%eax),%eax
f010230e:	83 ec 0c             	sub    $0xc,%esp
f0102311:	50                   	push   %eax
f0102312:	e8 2b c7 02 00       	call   f012ea42 <strlen>
f0102317:	83 c4 10             	add    $0x10,%esp
f010231a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010231d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102324:	eb 1c                	jmp    f0102342 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102326:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102329:	83 c0 08             	add    $0x8,%eax
f010232c:	8b 10                	mov    (%eax),%edx
f010232e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102331:	01 d0                	add    %edx,%eax
f0102333:	8a 00                	mov    (%eax),%al
f0102335:	88 c2                	mov    %al,%dl
f0102337:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010233a:	88 10                	mov    %dl,(%eax)
		address++;
f010233c:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010233f:	ff 45 f0             	incl   -0x10(%ebp)
f0102342:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102345:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102348:	7c dc                	jl     f0102326 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f010234a:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010234f:	c9                   	leave  
f0102350:	c3                   	ret    

f0102351 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102351:	55                   	push   %ebp
f0102352:	89 e5                	mov    %esp,%ebp
f0102354:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102357:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010235b:	75 42                	jne    f010239f <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010235d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102360:	83 c0 04             	add    $0x4,%eax
f0102363:	8b 00                	mov    (%eax),%eax
f0102365:	83 ec 04             	sub    $0x4,%esp
f0102368:	6a 10                	push   $0x10
f010236a:	6a 00                	push   $0x0
f010236c:	50                   	push   %eax
f010236d:	e8 30 ca 02 00       	call   f012eda2 <strtol>
f0102372:	83 c4 10             	add    $0x10,%esp
f0102375:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102378:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010237b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010237e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102381:	8a 00                	mov    (%eax),%al
f0102383:	0f b6 c0             	movzbl %al,%eax
f0102386:	83 ec 04             	sub    $0x4,%esp
f0102389:	50                   	push   %eax
f010238a:	ff 75 d8             	pushl  -0x28(%ebp)
f010238d:	68 aa 06 13 f0       	push   $0xf01306aa
f0102392:	e8 9a ea ff ff       	call   f0100e31 <cprintf>
f0102397:	83 c4 10             	add    $0x10,%esp
f010239a:	e9 c7 00 00 00       	jmp    f0102466 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010239f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01023a3:	0f 85 ad 00 00 00    	jne    f0102456 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01023a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023ac:	83 c0 04             	add    $0x4,%eax
f01023af:	8b 00                	mov    (%eax),%eax
f01023b1:	83 ec 04             	sub    $0x4,%esp
f01023b4:	6a 0a                	push   $0xa
f01023b6:	6a 00                	push   $0x0
f01023b8:	50                   	push   %eax
f01023b9:	e8 e4 c9 02 00       	call   f012eda2 <strtol>
f01023be:	83 c4 10             	add    $0x10,%esp
f01023c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01023c4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01023cb:	83 ec 04             	sub    $0x4,%esp
f01023ce:	6a 00                	push   $0x0
f01023d0:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01023d3:	50                   	push   %eax
f01023d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01023d7:	e8 26 72 00 00       	call   f0109602 <envid2env>
f01023dc:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01023df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023e2:	83 c0 08             	add    $0x8,%eax
f01023e5:	8b 00                	mov    (%eax),%eax
f01023e7:	83 ec 04             	sub    $0x4,%esp
f01023ea:	6a 10                	push   $0x10
f01023ec:	6a 00                	push   $0x0
f01023ee:	50                   	push   %eax
f01023ef:	e8 ae c9 02 00       	call   f012eda2 <strtol>
f01023f4:	83 c4 10             	add    $0x10,%esp
f01023f7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01023fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01023fd:	85 c0                	test   %eax,%eax
f01023ff:	75 07                	jne    f0102408 <command_readusermem+0xb7>
f0102401:	b8 00 00 00 00       	mov    $0x0,%eax
f0102406:	eb 63                	jmp    f010246b <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102408:	0f 20 d8             	mov    %cr3,%eax
f010240b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010240e:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102411:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102414:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102417:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010241d:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102420:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102423:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102426:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102429:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010242c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010242f:	8a 00                	mov    (%eax),%al
f0102431:	0f b6 c0             	movzbl %al,%eax
f0102434:	83 ec 04             	sub    $0x4,%esp
f0102437:	50                   	push   %eax
f0102438:	ff 75 f0             	pushl  -0x10(%ebp)
f010243b:	68 aa 06 13 f0       	push   $0xf01306aa
f0102440:	e8 ec e9 ff ff       	call   f0100e31 <cprintf>
f0102445:	83 c4 10             	add    $0x10,%esp
f0102448:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010244b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010244e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102451:	0f 22 d8             	mov    %eax,%cr3
f0102454:	eb 10                	jmp    f0102466 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102456:	83 ec 0c             	sub    $0xc,%esp
f0102459:	68 c4 06 13 f0       	push   $0xf01306c4
f010245e:	e8 ce e9 ff ff       	call   f0100e31 <cprintf>
f0102463:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102466:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010246b:	c9                   	leave  
f010246c:	c3                   	ret    

f010246d <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010246d:	55                   	push   %ebp
f010246e:	89 e5                	mov    %esp,%ebp
f0102470:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102473:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102476:	83 c0 04             	add    $0x4,%eax
f0102479:	8b 00                	mov    (%eax),%eax
f010247b:	83 ec 04             	sub    $0x4,%esp
f010247e:	6a 10                	push   $0x10
f0102480:	6a 00                	push   $0x0
f0102482:	50                   	push   %eax
f0102483:	e8 1a c9 02 00       	call   f012eda2 <strtol>
f0102488:	83 c4 10             	add    $0x10,%esp
f010248b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102490:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102493:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f010249a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010249d:	8a 00                	mov    (%eax),%al
f010249f:	0f b6 c0             	movzbl %al,%eax
f01024a2:	83 ec 08             	sub    $0x8,%esp
f01024a5:	50                   	push   %eax
f01024a6:	68 ee 06 13 f0       	push   $0xf01306ee
f01024ab:	e8 81 e9 ff ff       	call   f0100e31 <cprintf>
f01024b0:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01024b3:	83 ec 0c             	sub    $0xc,%esp
f01024b6:	68 f1 06 13 f0       	push   $0xf01306f1
f01024bb:	e8 71 e9 ff ff       	call   f0100e31 <cprintf>
f01024c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024c8:	c9                   	leave  
f01024c9:	c3                   	ret    

f01024ca <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01024ca:	55                   	push   %ebp
f01024cb:	89 e5                	mov    %esp,%ebp
f01024cd:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01024d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024d3:	83 c0 04             	add    $0x4,%eax
f01024d6:	8b 00                	mov    (%eax),%eax
f01024d8:	83 ec 04             	sub    $0x4,%esp
f01024db:	6a 0a                	push   $0xa
f01024dd:	6a 00                	push   $0x0
f01024df:	50                   	push   %eax
f01024e0:	e8 bd c8 02 00       	call   f012eda2 <strtol>
f01024e5:	83 c4 10             	add    $0x10,%esp
f01024e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01024eb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01024f2:	83 ec 04             	sub    $0x4,%esp
f01024f5:	6a 00                	push   $0x0
f01024f7:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01024fa:	50                   	push   %eax
f01024fb:	ff 75 ec             	pushl  -0x14(%ebp)
f01024fe:	e8 ff 70 00 00       	call   f0109602 <envid2env>
f0102503:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102509:	83 c0 08             	add    $0x8,%eax
f010250c:	8b 00                	mov    (%eax),%eax
f010250e:	83 ec 04             	sub    $0x4,%esp
f0102511:	6a 10                	push   $0x10
f0102513:	6a 00                	push   $0x0
f0102515:	50                   	push   %eax
f0102516:	e8 87 c8 02 00       	call   f012eda2 <strtol>
f010251b:	83 c4 10             	add    $0x10,%esp
f010251e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102521:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102524:	83 c0 0c             	add    $0xc,%eax
f0102527:	8b 00                	mov    (%eax),%eax
f0102529:	83 ec 04             	sub    $0x4,%esp
f010252c:	6a 0a                	push   $0xa
f010252e:	6a 00                	push   $0x0
f0102530:	50                   	push   %eax
f0102531:	e8 6c c8 02 00       	call   f012eda2 <strtol>
f0102536:	83 c4 10             	add    $0x10,%esp
f0102539:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f010253c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010253f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102542:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102545:	85 c0                	test   %eax,%eax
f0102547:	75 07                	jne    f0102550 <command_readuserblock+0x86>
f0102549:	b8 00 00 00 00       	mov    $0x0,%eax
f010254e:	eb 68                	jmp    f01025b8 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102550:	0f 20 d8             	mov    %cr3,%eax
f0102553:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102556:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102559:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f010255c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010255f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102565:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102568:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010256b:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010256e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102575:	eb 28                	jmp    f010259f <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010257a:	8a 00                	mov    (%eax),%al
f010257c:	0f b6 d0             	movzbl %al,%edx
f010257f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102582:	8a 00                	mov    (%eax),%al
f0102584:	0f b6 c0             	movzbl %al,%eax
f0102587:	52                   	push   %edx
f0102588:	50                   	push   %eax
f0102589:	ff 75 f4             	pushl  -0xc(%ebp)
f010258c:	68 f3 06 13 f0       	push   $0xf01306f3
f0102591:	e8 9b e8 ff ff       	call   f0100e31 <cprintf>
f0102596:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102599:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010259c:	ff 45 f0             	incl   -0x10(%ebp)
f010259f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01025a2:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01025a5:	7c d0                	jl     f0102577 <command_readuserblock+0xad>
f01025a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01025ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01025b0:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01025b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025b8:	c9                   	leave  
f01025b9:	c3                   	ret    

f01025ba <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01025ba:	55                   	push   %ebp
f01025bb:	89 e5                	mov    %esp,%ebp
f01025bd:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01025c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025c3:	83 c0 04             	add    $0x4,%eax
f01025c6:	8b 00                	mov    (%eax),%eax
f01025c8:	83 ec 04             	sub    $0x4,%esp
f01025cb:	6a 0a                	push   $0xa
f01025cd:	6a 00                	push   $0x0
f01025cf:	50                   	push   %eax
f01025d0:	e8 cd c7 02 00       	call   f012eda2 <strtol>
f01025d5:	83 c4 10             	add    $0x10,%esp
f01025d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01025db:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01025e2:	83 ec 04             	sub    $0x4,%esp
f01025e5:	6a 00                	push   $0x0
f01025e7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01025ea:	50                   	push   %eax
f01025eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01025ee:	e8 0f 70 00 00       	call   f0109602 <envid2env>
f01025f3:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01025f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025f9:	85 c0                	test   %eax,%eax
f01025fb:	75 0a                	jne    f0102607 <command_remove_table+0x4d>
f01025fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0102602:	e9 aa 00 00 00       	jmp    f01026b1 <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102607:	8b 45 0c             	mov    0xc(%ebp),%eax
f010260a:	83 c0 08             	add    $0x8,%eax
f010260d:	8b 00                	mov    (%eax),%eax
f010260f:	83 ec 04             	sub    $0x4,%esp
f0102612:	6a 10                	push   $0x10
f0102614:	6a 00                	push   $0x0
f0102616:	50                   	push   %eax
f0102617:	e8 86 c7 02 00       	call   f012eda2 <strtol>
f010261c:	83 c4 10             	add    $0x10,%esp
f010261f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102622:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102625:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102628:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010262b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102631:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102634:	c1 ea 16             	shr    $0x16,%edx
f0102637:	c1 e2 02             	shl    $0x2,%edx
f010263a:	01 d0                	add    %edx,%eax
f010263c:	8b 00                	mov    (%eax),%eax
f010263e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102643:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102646:	83 ec 0c             	sub    $0xc,%esp
f0102649:	ff 75 e8             	pushl  -0x18(%ebp)
f010264c:	e8 b0 f9 ff ff       	call   f0102001 <to_frame_info>
f0102651:	83 c4 10             	add    $0x10,%esp
f0102654:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102657:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010265a:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102660:	83 ec 0c             	sub    $0xc,%esp
f0102663:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102666:	e8 06 4a 00 00       	call   f0107071 <free_frame>
f010266b:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010266e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102671:	c1 e8 16             	shr    $0x16,%eax
f0102674:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102677:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010267a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102680:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102683:	c1 e2 02             	shl    $0x2,%edx
f0102686:	01 c2                	add    %eax,%edx
f0102688:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010268b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102691:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102694:	c1 e1 02             	shl    $0x2,%ecx
f0102697:	01 c8                	add    %ecx,%eax
f0102699:	8b 00                	mov    (%eax),%eax
f010269b:	83 e0 fe             	and    $0xfffffffe,%eax
f010269e:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01026a0:	0f 20 d8             	mov    %cr3,%eax
f01026a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01026a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01026a9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01026ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026b1:	c9                   	leave  
f01026b2:	c3                   	ret    

f01026b3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01026b3:	55                   	push   %ebp
f01026b4:	89 e5                	mov    %esp,%ebp
f01026b6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01026b9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01026bd:	7e 06                	jle    f01026c5 <command_allocuserpage+0x12>
f01026bf:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01026c3:	7e 1a                	jle    f01026df <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01026c5:	83 ec 0c             	sub    $0xc,%esp
f01026c8:	68 04 07 13 f0       	push   $0xf0130704
f01026cd:	e8 5f e7 ff ff       	call   f0100e31 <cprintf>
f01026d2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01026d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01026da:	e9 4c 01 00 00       	jmp    f010282b <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01026df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026e2:	83 c0 04             	add    $0x4,%eax
f01026e5:	8b 00                	mov    (%eax),%eax
f01026e7:	83 ec 04             	sub    $0x4,%esp
f01026ea:	6a 0a                	push   $0xa
f01026ec:	6a 00                	push   $0x0
f01026ee:	50                   	push   %eax
f01026ef:	e8 ae c6 02 00       	call   f012eda2 <strtol>
f01026f4:	83 c4 10             	add    $0x10,%esp
f01026f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f01026fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102701:	83 ec 04             	sub    $0x4,%esp
f0102704:	6a 00                	push   $0x0
f0102706:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102709:	50                   	push   %eax
f010270a:	ff 75 f0             	pushl  -0x10(%ebp)
f010270d:	e8 f0 6e 00 00       	call   f0109602 <envid2env>
f0102712:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102715:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102718:	85 c0                	test   %eax,%eax
f010271a:	75 0a                	jne    f0102726 <command_allocuserpage+0x73>
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	e9 05 01 00 00       	jmp    f010282b <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102726:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102729:	83 c0 08             	add    $0x8,%eax
f010272c:	8b 00                	mov    (%eax),%eax
f010272e:	83 ec 04             	sub    $0x4,%esp
f0102731:	6a 10                	push   $0x10
f0102733:	6a 00                	push   $0x0
f0102735:	50                   	push   %eax
f0102736:	e8 67 c6 02 00       	call   f012eda2 <strtol>
f010273b:	83 c4 10             	add    $0x10,%esp
f010273e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102741:	83 ec 0c             	sub    $0xc,%esp
f0102744:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102747:	50                   	push   %eax
f0102748:	e8 0c 48 00 00       	call   f0106f59 <allocate_frame>
f010274d:	83 c4 10             	add    $0x10,%esp
f0102750:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102753:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102757:	75 1a                	jne    f0102773 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 2e 07 13 f0       	push   $0xf013072e
f0102761:	e8 cb e6 ff ff       	call   f0100e31 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	e9 b8 00 00 00       	jmp    f010282b <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102773:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102777:	75 20                	jne    f0102799 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102779:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010277c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010277f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102785:	6a 06                	push   $0x6
f0102787:	ff 75 ec             	pushl  -0x14(%ebp)
f010278a:	52                   	push   %edx
f010278b:	50                   	push   %eax
f010278c:	e8 63 4b 00 00       	call   f01072f4 <map_frame>
f0102791:	83 c4 10             	add    $0x10,%esp
f0102794:	e9 8d 00 00 00       	jmp    f0102826 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102799:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010279d:	0f 85 83 00 00 00    	jne    f0102826 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01027a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a6:	83 c0 0c             	add    $0xc,%eax
f01027a9:	8b 00                	mov    (%eax),%eax
f01027ab:	8a 00                	mov    (%eax),%al
f01027ad:	3c 72                	cmp    $0x72,%al
f01027af:	74 0e                	je     f01027bf <command_allocuserpage+0x10c>
f01027b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027b4:	83 c0 0c             	add    $0xc,%eax
f01027b7:	8b 00                	mov    (%eax),%eax
f01027b9:	8a 00                	mov    (%eax),%al
f01027bb:	3c 52                	cmp    $0x52,%al
f01027bd:	75 09                	jne    f01027c8 <command_allocuserpage+0x115>
			rw = 0 ;
f01027bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01027c6:	eb 3c                	jmp    f0102804 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01027c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027cb:	83 c0 0c             	add    $0xc,%eax
f01027ce:	8b 00                	mov    (%eax),%eax
f01027d0:	8a 00                	mov    (%eax),%al
f01027d2:	3c 77                	cmp    $0x77,%al
f01027d4:	74 0e                	je     f01027e4 <command_allocuserpage+0x131>
f01027d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027d9:	83 c0 0c             	add    $0xc,%eax
f01027dc:	8b 00                	mov    (%eax),%eax
f01027de:	8a 00                	mov    (%eax),%al
f01027e0:	3c 57                	cmp    $0x57,%al
f01027e2:	75 09                	jne    f01027ed <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f01027e4:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01027eb:	eb 17                	jmp    f0102804 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f01027ed:	83 ec 0c             	sub    $0xc,%esp
f01027f0:	68 48 07 13 f0       	push   $0xf0130748
f01027f5:	e8 37 e6 ff ff       	call   f0100e31 <cprintf>
f01027fa:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f01027fd:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102807:	83 c8 04             	or     $0x4,%eax
f010280a:	89 c1                	mov    %eax,%ecx
f010280c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010280f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102812:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102818:	51                   	push   %ecx
f0102819:	ff 75 ec             	pushl  -0x14(%ebp)
f010281c:	52                   	push   %edx
f010281d:	50                   	push   %eax
f010281e:	e8 d1 4a 00 00       	call   f01072f4 <map_frame>
f0102823:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102826:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010282b:	c9                   	leave  
f010282c:	c3                   	ret    

f010282d <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f010282d:	55                   	push   %ebp
f010282e:	89 e5                	mov    %esp,%ebp
f0102830:	56                   	push   %esi
f0102831:	53                   	push   %ebx
f0102832:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102835:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102838:	83 ec 0c             	sub    $0xc,%esp
f010283b:	50                   	push   %eax
f010283c:	e8 23 4d 00 00       	call   f0107564 <calculate_available_frames>
f0102841:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102844:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102847:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010284a:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f010284d:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102850:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102853:	01 de                	add    %ebx,%esi
f0102855:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102858:	01 f3                	add    %esi,%ebx
f010285a:	83 ec 0c             	sub    $0xc,%esp
f010285d:	51                   	push   %ecx
f010285e:	52                   	push   %edx
f010285f:	50                   	push   %eax
f0102860:	53                   	push   %ebx
f0102861:	68 8c 07 13 f0       	push   $0xf013078c
f0102866:	e8 c6 e5 ff ff       	call   f0100e31 <cprintf>
f010286b:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f010286e:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0102873:	83 ec 08             	sub    $0x8,%esp
f0102876:	50                   	push   %eax
f0102877:	68 e4 07 13 f0       	push   $0xf01307e4
f010287c:	e8 b0 e5 ff ff       	call   f0100e31 <cprintf>
f0102881:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102884:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102889:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010288c:	5b                   	pop    %ebx
f010288d:	5e                   	pop    %esi
f010288e:	5d                   	pop    %ebp
f010288f:	c3                   	ret    

f0102890 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102890:	55                   	push   %ebp
f0102891:	89 e5                	mov    %esp,%ebp
f0102893:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102896:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f010289d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01028a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01028ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01028ae:	83 f8 02             	cmp    $0x2,%eax
f01028b1:	74 39                	je     f01028ec <CreateEnv+0x5c>
f01028b3:	83 f8 03             	cmp    $0x3,%eax
f01028b6:	75 1d                	jne    f01028d5 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01028b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bb:	83 c0 08             	add    $0x8,%eax
f01028be:	8b 00                	mov    (%eax),%eax
f01028c0:	83 ec 04             	sub    $0x4,%esp
f01028c3:	6a 0a                	push   $0xa
f01028c5:	6a 00                	push   $0x0
f01028c7:	50                   	push   %eax
f01028c8:	e8 d5 c4 02 00       	call   f012eda2 <strtol>
f01028cd:	83 c4 10             	add    $0x10,%esp
f01028d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f01028d3:	eb 18                	jmp    f01028ed <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01028d5:	83 ec 0c             	sub    $0xc,%esp
f01028d8:	68 20 08 13 f0       	push   $0xf0130820
f01028dd:	e8 4f e5 ff ff       	call   f0100e31 <cprintf>
f01028e2:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01028e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01028ea:	eb 58                	jmp    f0102944 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f01028ec:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01028ed:	83 ec 0c             	sub    $0xc,%esp
f01028f0:	6a 02                	push   $0x2
f01028f2:	e8 8d aa 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f01028f7:	83 c4 10             	add    $0x10,%esp
f01028fa:	85 c0                	test   %eax,%eax
f01028fc:	74 07                	je     f0102905 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f01028fe:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102905:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102909:	76 19                	jbe    f0102924 <CreateEnv+0x94>
f010290b:	68 90 08 13 f0       	push   $0xf0130890
f0102910:	68 d5 08 13 f0       	push   $0xf01308d5
f0102915:	68 b6 01 00 00       	push   $0x1b6
f010291a:	68 ea 08 13 f0       	push   $0xf01308ea
f010291f:	e8 8c d8 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102924:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102927:	83 c0 04             	add    $0x4,%eax
f010292a:	8b 00                	mov    (%eax),%eax
f010292c:	ff 75 f0             	pushl  -0x10(%ebp)
f010292f:	ff 75 f4             	pushl  -0xc(%ebp)
f0102932:	ff 75 ec             	pushl  -0x14(%ebp)
f0102935:	50                   	push   %eax
f0102936:	e8 c4 5f 00 00       	call   f01088ff <env_create>
f010293b:	83 c4 10             	add    $0x10,%esp
f010293e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102941:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102944:	c9                   	leave  
f0102945:	c3                   	ret    

f0102946 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102946:	55                   	push   %ebp
f0102947:	89 e5                	mov    %esp,%ebp
f0102949:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f010294c:	83 ec 08             	sub    $0x8,%esp
f010294f:	ff 75 0c             	pushl  0xc(%ebp)
f0102952:	ff 75 08             	pushl  0x8(%ebp)
f0102955:	e8 36 ff ff ff       	call   f0102890 <CreateEnv>
f010295a:	83 c4 10             	add    $0x10,%esp
f010295d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102960:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102964:	75 07                	jne    f010296d <command_run_program+0x27>
f0102966:	b8 00 00 00 00       	mov    $0x0,%eax
f010296b:	eb 46                	jmp    f01029b3 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f010296d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102970:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102973:	83 ec 08             	sub    $0x8,%esp
f0102976:	50                   	push   %eax
f0102977:	68 fe 08 13 f0       	push   $0xf01308fe
f010297c:	e8 b0 e4 ff ff       	call   f0100e31 <cprintf>
f0102981:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102984:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f010298b:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f010298e:	83 ec 0c             	sub    $0xc,%esp
f0102991:	ff 75 f4             	pushl  -0xc(%ebp)
f0102994:	e8 ce 25 00 00       	call   f0104f67 <sched_new_env>
f0102999:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f010299c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010299f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01029a2:	83 ec 0c             	sub    $0xc,%esp
f01029a5:	50                   	push   %eax
f01029a6:	e8 d9 25 00 00       	call   f0104f84 <sched_run_env>
f01029ab:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029b3:	c9                   	leave  
f01029b4:	c3                   	ret    

f01029b5 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f01029b5:	55                   	push   %ebp
f01029b6:	89 e5                	mov    %esp,%ebp
f01029b8:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 04             	sub    $0x4,%esp
f01029c6:	6a 0a                	push   $0xa
f01029c8:	6a 00                	push   $0x0
f01029ca:	50                   	push   %eax
f01029cb:	e8 d2 c3 02 00       	call   f012eda2 <strtol>
f01029d0:	83 c4 10             	add    $0x10,%esp
f01029d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f01029d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029d9:	83 ec 0c             	sub    $0xc,%esp
f01029dc:	50                   	push   %eax
f01029dd:	e8 63 28 00 00       	call   f0105245 <sched_kill_env>
f01029e2:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029ea:	c9                   	leave  
f01029eb:	c3                   	ret    

f01029ec <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f01029ec:	55                   	push   %ebp
f01029ed:	89 e5                	mov    %esp,%ebp
f01029ef:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f01029f2:	83 ec 08             	sub    $0x8,%esp
f01029f5:	ff 75 0c             	pushl  0xc(%ebp)
f01029f8:	ff 75 08             	pushl  0x8(%ebp)
f01029fb:	e8 90 fe ff ff       	call   f0102890 <CreateEnv>
f0102a00:	83 c4 10             	add    $0x10,%esp
f0102a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a0a:	75 07                	jne    f0102a13 <commnad_load_env+0x27>
		return 0 ;
f0102a0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a11:	eb 2a                	jmp    f0102a3d <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102a13:	83 ec 0c             	sub    $0xc,%esp
f0102a16:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a19:	e8 49 25 00 00       	call   f0104f67 <sched_new_env>
f0102a1e:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102a24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	50                   	push   %eax
f0102a2b:	68 fe 08 13 f0       	push   $0xf01308fe
f0102a30:	e8 fc e3 ff ff       	call   f0100e31 <cprintf>
f0102a35:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a38:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a3d:	c9                   	leave  
f0102a3e:	c3                   	ret    

f0102a3f <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102a3f:	55                   	push   %ebp
f0102a40:	89 e5                	mov    %esp,%ebp
f0102a42:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102a45:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f0102a4c:	00 00 00 
	sched_run_all();
f0102a4f:	e8 ba 2d 00 00       	call   f010580e <sched_run_all>

	return 0 ;
f0102a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a59:	c9                   	leave  
f0102a5a:	c3                   	ret    

f0102a5b <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102a5b:	55                   	push   %ebp
f0102a5c:	89 e5                	mov    %esp,%ebp
f0102a5e:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102a61:	e8 a6 2b 00 00       	call   f010560c <sched_print_all>

	return 0 ;
f0102a66:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a6b:	c9                   	leave  
f0102a6c:	c3                   	ret    

f0102a6d <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102a6d:	55                   	push   %ebp
f0102a6e:	89 e5                	mov    %esp,%ebp
f0102a70:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102a73:	e8 09 2e 00 00       	call   f0105881 <sched_kill_all>

	return 0 ;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102a85:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102a89:	7f 1a                	jg     f0102aa5 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102a8b:	83 ec 0c             	sub    $0xc,%esp
f0102a8e:	68 14 09 13 f0       	push   $0xf0130914
f0102a93:	e8 99 e3 ff ff       	call   f0100e31 <cprintf>
f0102a98:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa0:	e9 83 00 00 00       	jmp    f0102b28 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa8:	83 c0 04             	add    $0x4,%eax
f0102aab:	8b 00                	mov    (%eax),%eax
f0102aad:	83 ec 04             	sub    $0x4,%esp
f0102ab0:	6a 0a                	push   $0xa
f0102ab2:	6a 00                	push   $0x0
f0102ab4:	50                   	push   %eax
f0102ab5:	e8 e8 c2 02 00       	call   f012eda2 <strtol>
f0102aba:	83 c4 10             	add    $0x10,%esp
f0102abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102ac0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ac4:	75 20                	jne    f0102ae6 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102ac6:	83 ec 0c             	sub    $0xc,%esp
f0102ac9:	ff 75 f4             	pushl  -0xc(%ebp)
f0102acc:	e8 28 a8 00 00       	call   f010d2f9 <setPageReplacmentAlgorithmLRU>
f0102ad1:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ad4:	83 ec 0c             	sub    $0xc,%esp
f0102ad7:	68 74 09 13 f0       	push   $0xf0130974
f0102adc:	e8 50 e3 ff ff       	call   f0100e31 <cprintf>
f0102ae1:	83 c4 10             	add    $0x10,%esp
f0102ae4:	eb 3d                	jmp    f0102b23 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102ae6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102aea:	75 20                	jne    f0102b0c <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102aec:	83 ec 0c             	sub    $0xc,%esp
f0102aef:	ff 75 f4             	pushl  -0xc(%ebp)
f0102af2:	e8 02 a8 00 00       	call   f010d2f9 <setPageReplacmentAlgorithmLRU>
f0102af7:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102afa:	83 ec 0c             	sub    $0xc,%esp
f0102afd:	68 b8 09 13 f0       	push   $0xf01309b8
f0102b02:	e8 2a e3 ff ff       	call   f0100e31 <cprintf>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	eb 17                	jmp    f0102b23 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102b0c:	83 ec 0c             	sub    $0xc,%esp
f0102b0f:	68 f8 09 13 f0       	push   $0xf01309f8
f0102b14:	e8 18 e3 ff ff       	call   f0100e31 <cprintf>
f0102b19:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b21:	eb 05                	jmp    f0102b28 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102b23:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b28:	c9                   	leave  
f0102b29:	c3                   	ret    

f0102b2a <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102b2a:	55                   	push   %ebp
f0102b2b:	89 e5                	mov    %esp,%ebp
f0102b2d:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102b30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b33:	83 c0 04             	add    $0x4,%eax
f0102b36:	8b 00                	mov    (%eax),%eax
f0102b38:	83 ec 04             	sub    $0x4,%esp
f0102b3b:	6a 0a                	push   $0xa
f0102b3d:	6a 00                	push   $0x0
f0102b3f:	50                   	push   %eax
f0102b40:	e8 5d c2 02 00       	call   f012eda2 <strtol>
f0102b45:	83 c4 10             	add    $0x10,%esp
f0102b48:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102b4b:	83 ec 0c             	sub    $0xc,%esp
f0102b4e:	ff 75 f4             	pushl  -0xc(%ebp)
f0102b51:	e8 16 a8 00 00       	call   f010d36c <setPageReplacmentAlgorithmNchanceCLOCK>
f0102b56:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102b59:	83 ec 0c             	sub    $0xc,%esp
f0102b5c:	68 4c 0a 13 f0       	push   $0xf0130a4c
f0102b61:	e8 cb e2 ff ff       	call   f0100e31 <cprintf>
f0102b66:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b69:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b6e:	c9                   	leave  
f0102b6f:	c3                   	ret    

f0102b70 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102b70:	55                   	push   %ebp
f0102b71:	89 e5                	mov    %esp,%ebp
f0102b73:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102b76:	e8 b1 a7 00 00       	call   f010d32c <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102b7b:	83 ec 0c             	sub    $0xc,%esp
f0102b7e:	68 80 0a 13 f0       	push   $0xf0130a80
f0102b83:	e8 a9 e2 ff ff       	call   f0100e31 <cprintf>
f0102b88:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b90:	c9                   	leave  
f0102b91:	c3                   	ret    

f0102b92 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102b92:	55                   	push   %ebp
f0102b93:	89 e5                	mov    %esp,%ebp
f0102b95:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102b98:	e8 9f a7 00 00       	call   f010d33c <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102b9d:	83 ec 0c             	sub    $0xc,%esp
f0102ba0:	68 ac 0a 13 f0       	push   $0xf0130aac
f0102ba5:	e8 87 e2 ff ff       	call   f0100e31 <cprintf>
f0102baa:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb2:	c9                   	leave  
f0102bb3:	c3                   	ret    

f0102bb4 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102bb4:	55                   	push   %ebp
f0102bb5:	89 e5                	mov    %esp,%ebp
f0102bb7:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102bba:	e8 8d a7 00 00       	call   f010d34c <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102bbf:	83 ec 0c             	sub    $0xc,%esp
f0102bc2:	68 d4 0a 13 f0       	push   $0xf0130ad4
f0102bc7:	e8 65 e2 ff ff       	call   f0100e31 <cprintf>
f0102bcc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bd4:	c9                   	leave  
f0102bd5:	c3                   	ret    

f0102bd6 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102bd6:	55                   	push   %ebp
f0102bd7:	89 e5                	mov    %esp,%ebp
f0102bd9:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bdf:	83 c0 04             	add    $0x4,%eax
f0102be2:	8b 00                	mov    (%eax),%eax
f0102be4:	83 ec 04             	sub    $0x4,%esp
f0102be7:	6a 0a                	push   $0xa
f0102be9:	6a 00                	push   $0x0
f0102beb:	50                   	push   %eax
f0102bec:	e8 b1 c1 02 00       	call   f012eda2 <strtol>
f0102bf1:	83 c4 10             	add    $0x10,%esp
f0102bf4:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102bf7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102bfb:	83 ec 0c             	sub    $0xc,%esp
f0102bfe:	50                   	push   %eax
f0102bff:	e8 44 33 00 00       	call   f0105f48 <sched_init_RR>
f0102c04:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102c07:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102c0c:	0f b6 c0             	movzbl %al,%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	50                   	push   %eax
f0102c13:	68 08 0b 13 f0       	push   $0xf0130b08
f0102c18:	e8 14 e2 ff ff       	call   f0100e31 <cprintf>
f0102c1d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102c20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c25:	c9                   	leave  
f0102c26:	c3                   	ret    

f0102c27 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102c27:	55                   	push   %ebp
f0102c28:	89 e5                	mov    %esp,%ebp
f0102c2a:	53                   	push   %ebx
f0102c2b:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 04             	sub    $0x4,%esp
f0102c39:	6a 0a                	push   $0xa
f0102c3b:	6a 00                	push   $0x0
f0102c3d:	50                   	push   %eax
f0102c3e:	e8 5f c1 02 00       	call   f012eda2 <strtol>
f0102c43:	83 c4 10             	add    $0x10,%esp
f0102c46:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102c49:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102c50:	eb 2e                	jmp    f0102c80 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c55:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c65:	01 d0                	add    %edx,%eax
f0102c67:	8b 00                	mov    (%eax),%eax
f0102c69:	83 ec 04             	sub    $0x4,%esp
f0102c6c:	6a 0a                	push   $0xa
f0102c6e:	6a 00                	push   $0x0
f0102c70:	50                   	push   %eax
f0102c71:	e8 2c c1 02 00       	call   f012eda2 <strtol>
f0102c76:	83 c4 10             	add    $0x10,%esp
f0102c79:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102c7d:	ff 45 f4             	incl   -0xc(%ebp)
f0102c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c83:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102c86:	7c ca                	jl     f0102c52 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102c88:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102c92:	52                   	push   %edx
f0102c93:	50                   	push   %eax
f0102c94:	e8 05 33 00 00       	call   f0105f9e <sched_init_MLFQ>
f0102c99:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102c9c:	83 ec 0c             	sub    $0xc,%esp
f0102c9f:	68 40 0b 13 f0       	push   $0xf0130b40
f0102ca4:	e8 88 e1 ff ff       	call   f0100e31 <cprintf>
f0102ca9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102cb3:	eb 21                	jmp    f0102cd6 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0102cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102cb8:	05 a8 be 2b f0       	add    $0xf02bbea8,%eax
f0102cbd:	8a 00                	mov    (%eax),%al
f0102cbf:	0f b6 c0             	movzbl %al,%eax
f0102cc2:	83 ec 08             	sub    $0x8,%esp
f0102cc5:	50                   	push   %eax
f0102cc6:	68 6d 0b 13 f0       	push   $0xf0130b6d
f0102ccb:	e8 61 e1 ff ff       	call   f0100e31 <cprintf>
f0102cd0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102cd3:	ff 45 f0             	incl   -0x10(%ebp)
f0102cd6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102cdb:	0f b6 c0             	movzbl %al,%eax
f0102cde:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102ce1:	7f d2                	jg     f0102cb5 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102ce3:	83 ec 0c             	sub    $0xc,%esp
f0102ce6:	68 f1 06 13 f0       	push   $0xf01306f1
f0102ceb:	e8 41 e1 ff ff       	call   f0100e31 <cprintf>
f0102cf0:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102cf3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cf8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102cfb:	c9                   	leave  
f0102cfc:	c3                   	ret    

f0102cfd <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0102cfd:	55                   	push   %ebp
f0102cfe:	89 e5                	mov    %esp,%ebp
f0102d00:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102d03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d06:	83 c0 04             	add    $0x4,%eax
f0102d09:	8b 00                	mov    (%eax),%eax
f0102d0b:	83 ec 04             	sub    $0x4,%esp
f0102d0e:	6a 0a                	push   $0xa
f0102d10:	6a 00                	push   $0x0
f0102d12:	50                   	push   %eax
f0102d13:	e8 8a c0 02 00       	call   f012eda2 <strtol>
f0102d18:	83 c4 10             	add    $0x10,%esp
f0102d1b:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f0102d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d21:	83 c0 08             	add    $0x8,%eax
f0102d24:	8b 00                	mov    (%eax),%eax
f0102d26:	83 ec 04             	sub    $0x4,%esp
f0102d29:	6a 0a                	push   $0xa
f0102d2b:	6a 00                	push   $0x0
f0102d2d:	50                   	push   %eax
f0102d2e:	e8 6f c0 02 00       	call   f012eda2 <strtol>
f0102d33:	83 c4 10             	add    $0x10,%esp
f0102d36:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0102d39:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0102d3d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102d41:	83 ec 08             	sub    $0x8,%esp
f0102d44:	52                   	push   %edx
f0102d45:	50                   	push   %eax
f0102d46:	e8 62 32 00 00       	call   f0105fad <sched_init_BSD>
f0102d4b:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f0102d4e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0102d52:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102d56:	83 ec 04             	sub    $0x4,%esp
f0102d59:	52                   	push   %edx
f0102d5a:	50                   	push   %eax
f0102d5b:	68 74 0b 13 f0       	push   $0xf0130b74
f0102d60:	e8 cc e0 ff ff       	call   f0100e31 <cprintf>
f0102d65:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102d68:	83 ec 0c             	sub    $0xc,%esp
f0102d6b:	68 f1 06 13 f0       	push   $0xf01306f1
f0102d70:	e8 bc e0 ff ff       	call   f0100e31 <cprintf>
f0102d75:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102d78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7d:	c9                   	leave  
f0102d7e:	c3                   	ret    

f0102d7f <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102d7f:	55                   	push   %ebp
f0102d80:	89 e5                	mov    %esp,%ebp
f0102d82:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102d85:	e8 43 30 00 00       	call   f0105dcd <isSchedMethodMLFQ>
f0102d8a:	85 c0                	test   %eax,%eax
f0102d8c:	74 59                	je     f0102de7 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0102d8e:	83 ec 0c             	sub    $0xc,%esp
f0102d91:	68 b0 0b 13 f0       	push   $0xf0130bb0
f0102d96:	e8 96 e0 ff ff       	call   f0100e31 <cprintf>
f0102d9b:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102d9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102da5:	eb 21                	jmp    f0102dc8 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0102da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102daa:	05 a8 be 2b f0       	add    $0xf02bbea8,%eax
f0102daf:	8a 00                	mov    (%eax),%al
f0102db1:	0f b6 c0             	movzbl %al,%eax
f0102db4:	83 ec 08             	sub    $0x8,%esp
f0102db7:	50                   	push   %eax
f0102db8:	68 6d 0b 13 f0       	push   $0xf0130b6d
f0102dbd:	e8 6f e0 ff ff       	call   f0100e31 <cprintf>
f0102dc2:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102dc5:	ff 45 f4             	incl   -0xc(%ebp)
f0102dc8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102dcd:	0f b6 c0             	movzbl %al,%eax
f0102dd0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102dd3:	7f d2                	jg     f0102da7 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102dd5:	83 ec 0c             	sub    $0xc,%esp
f0102dd8:	68 f1 06 13 f0       	push   $0xf01306f1
f0102ddd:	e8 4f e0 ff ff       	call   f0100e31 <cprintf>
f0102de2:	83 c4 10             	add    $0x10,%esp
f0102de5:	eb 61                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f0102de7:	e8 c7 2f 00 00       	call   f0105db3 <isSchedMethodRR>
f0102dec:	85 c0                	test   %eax,%eax
f0102dee:	74 1b                	je     f0102e0b <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102df0:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102df5:	0f b6 c0             	movzbl %al,%eax
f0102df8:	83 ec 08             	sub    $0x8,%esp
f0102dfb:	50                   	push   %eax
f0102dfc:	68 e4 0b 13 f0       	push   $0xf0130be4
f0102e01:	e8 2b e0 ff ff       	call   f0100e31 <cprintf>
f0102e06:	83 c4 10             	add    $0x10,%esp
f0102e09:	eb 3d                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f0102e0b:	e8 d8 2f 00 00       	call   f0105de8 <isSchedMethodBSD>
f0102e10:	85 c0                	test   %eax,%eax
f0102e12:	74 24                	je     f0102e38 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0102e14:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102e19:	0f b6 d0             	movzbl %al,%edx
f0102e1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102e21:	0f b6 c0             	movzbl %al,%eax
f0102e24:	83 ec 04             	sub    $0x4,%esp
f0102e27:	52                   	push   %edx
f0102e28:	50                   	push   %eax
f0102e29:	68 74 0b 13 f0       	push   $0xf0130b74
f0102e2e:	e8 fe df ff ff       	call   f0100e31 <cprintf>
f0102e33:	83 c4 10             	add    $0x10,%esp
f0102e36:	eb 10                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102e38:	83 ec 0c             	sub    $0xc,%esp
f0102e3b:	68 20 0c 13 f0       	push   $0xf0130c20
f0102e40:	e8 ec df ff ff       	call   f0100e31 <cprintf>
f0102e45:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e4d:	c9                   	leave  
f0102e4e:	c3                   	ret    

f0102e4f <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102e4f:	55                   	push   %ebp
f0102e50:	89 e5                	mov    %esp,%ebp
f0102e52:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102e55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e58:	83 c0 04             	add    $0x4,%eax
f0102e5b:	8b 00                	mov    (%eax),%eax
f0102e5d:	83 ec 04             	sub    $0x4,%esp
f0102e60:	6a 0a                	push   $0xa
f0102e62:	6a 00                	push   $0x0
f0102e64:	50                   	push   %eax
f0102e65:	e8 38 bf 02 00       	call   f012eda2 <strtol>
f0102e6a:	83 c4 10             	add    $0x10,%esp
f0102e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e73:	0f b6 c0             	movzbl %al,%eax
f0102e76:	83 ec 0c             	sub    $0xc,%esp
f0102e79:	50                   	push   %eax
f0102e7a:	e8 60 ae 02 00       	call   f012dcdf <chksch>
f0102e7f:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102e82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102e86:	75 12                	jne    f0102e9a <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0102e88:	83 ec 0c             	sub    $0xc,%esp
f0102e8b:	68 48 0c 13 f0       	push   $0xf0130c48
f0102e90:	e8 9c df ff ff       	call   f0100e31 <cprintf>
f0102e95:	83 c4 10             	add    $0x10,%esp
f0102e98:	eb 16                	jmp    f0102eb0 <command_sch_test+0x61>
	else if (status == 1)
f0102e9a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e9e:	75 10                	jne    f0102eb0 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 70 0c 13 f0       	push   $0xf0130c70
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102eb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb5:	c9                   	leave  
f0102eb6:	c3                   	ret    

f0102eb7 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0102eb7:	55                   	push   %ebp
f0102eb8:	89 e5                	mov    %esp,%ebp
f0102eba:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102ebd:	e8 d8 a4 00 00       	call   f010d39a <isPageReplacmentAlgorithmCLOCK>
f0102ec2:	85 c0                	test   %eax,%eax
f0102ec4:	74 15                	je     f0102edb <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 94 0c 13 f0       	push   $0xf0130c94
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	e9 8c 00 00 00       	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102edb:	83 ec 0c             	sub    $0xc,%esp
f0102ede:	6a 01                	push   $0x1
f0102ee0:	e8 9f a4 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f0102ee5:	83 c4 10             	add    $0x10,%esp
f0102ee8:	85 c0                	test   %eax,%eax
f0102eea:	74 12                	je     f0102efe <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102eec:	83 ec 0c             	sub    $0xc,%esp
f0102eef:	68 bc 0c 13 f0       	push   $0xf0130cbc
f0102ef4:	e8 38 df ff ff       	call   f0100e31 <cprintf>
f0102ef9:	83 c4 10             	add    $0x10,%esp
f0102efc:	eb 69                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102efe:	83 ec 0c             	sub    $0xc,%esp
f0102f01:	6a 02                	push   $0x2
f0102f03:	e8 7c a4 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f0102f08:	83 c4 10             	add    $0x10,%esp
f0102f0b:	85 c0                	test   %eax,%eax
f0102f0d:	74 12                	je     f0102f21 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102f0f:	83 ec 0c             	sub    $0xc,%esp
f0102f12:	68 fc 0c 13 f0       	push   $0xf0130cfc
f0102f17:	e8 15 df ff ff       	call   f0100e31 <cprintf>
f0102f1c:	83 c4 10             	add    $0x10,%esp
f0102f1f:	eb 46                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102f21:	e8 8f a4 00 00       	call   f010d3b5 <isPageReplacmentAlgorithmFIFO>
f0102f26:	85 c0                	test   %eax,%eax
f0102f28:	74 12                	je     f0102f3c <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0102f2a:	83 ec 0c             	sub    $0xc,%esp
f0102f2d:	68 38 0d 13 f0       	push   $0xf0130d38
f0102f32:	e8 fa de ff ff       	call   f0100e31 <cprintf>
f0102f37:	83 c4 10             	add    $0x10,%esp
f0102f3a:	eb 2b                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102f3c:	e8 8f a4 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102f41:	85 c0                	test   %eax,%eax
f0102f43:	74 12                	je     f0102f57 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102f45:	83 ec 0c             	sub    $0xc,%esp
f0102f48:	68 5c 0d 13 f0       	push   $0xf0130d5c
f0102f4d:	e8 df de ff ff       	call   f0100e31 <cprintf>
f0102f52:	83 c4 10             	add    $0x10,%esp
f0102f55:	eb 10                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102f57:	83 ec 0c             	sub    $0xc,%esp
f0102f5a:	68 8c 0d 13 f0       	push   $0xf0130d8c
f0102f5f:	e8 cd de ff ff       	call   f0100e31 <cprintf>
f0102f64:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102f67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f6c:	c9                   	leave  
f0102f6d:	c3                   	ret    

f0102f6e <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102f6e:	55                   	push   %ebp
f0102f6f:	89 e5                	mov    %esp,%ebp
f0102f71:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102f74:	e8 f4 ef ff ff       	call   f0101f6d <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102f79:	83 ec 0c             	sub    $0xc,%esp
f0102f7c:	68 b8 0d 13 f0       	push   $0xf0130db8
f0102f81:	e8 ab de ff ff       	call   f0100e31 <cprintf>
f0102f86:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f89:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f8e:	c9                   	leave  
f0102f8f:	c3                   	ret    

f0102f90 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102f90:	55                   	push   %ebp
f0102f91:	89 e5                	mov    %esp,%ebp
f0102f93:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102f96:	e8 e2 ef ff ff       	call   f0101f7d <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102f9b:	83 ec 0c             	sub    $0xc,%esp
f0102f9e:	68 e8 0d 13 f0       	push   $0xf0130de8
f0102fa3:	e8 89 de ff ff       	call   f0100e31 <cprintf>
f0102fa8:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fb0:	c9                   	leave  
f0102fb1:	c3                   	ret    

f0102fb2 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102fb2:	55                   	push   %ebp
f0102fb3:	89 e5                	mov    %esp,%ebp
f0102fb5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102fb8:	e8 d0 ef ff ff       	call   f0101f8d <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102fbd:	83 ec 0c             	sub    $0xc,%esp
f0102fc0:	68 18 0e 13 f0       	push   $0xf0130e18
f0102fc5:	e8 67 de ff ff       	call   f0100e31 <cprintf>
f0102fca:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fd2:	c9                   	leave  
f0102fd3:	c3                   	ret    

f0102fd4 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102fd4:	55                   	push   %ebp
f0102fd5:	89 e5                	mov    %esp,%ebp
f0102fd7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102fda:	e8 be ef ff ff       	call   f0101f9d <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102fdf:	83 ec 0c             	sub    $0xc,%esp
f0102fe2:	68 48 0e 13 f0       	push   $0xf0130e48
f0102fe7:	e8 45 de ff ff       	call   f0100e31 <cprintf>
f0102fec:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff4:	c9                   	leave  
f0102ff5:	c3                   	ret    

f0102ff6 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102ff6:	55                   	push   %ebp
f0102ff7:	89 e5                	mov    %esp,%ebp
f0102ff9:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102ffc:	e8 ac ef ff ff       	call   f0101fad <isUHeapPlacementStrategyFIRSTFIT>
f0103001:	84 c0                	test   %al,%al
f0103003:	74 12                	je     f0103017 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103005:	83 ec 0c             	sub    $0xc,%esp
f0103008:	68 78 0e 13 f0       	push   $0xf0130e78
f010300d:	e8 1f de ff ff       	call   f0100e31 <cprintf>
f0103012:	83 c4 10             	add    $0x10,%esp
f0103015:	eb 61                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0103017:	e8 a6 ef ff ff       	call   f0101fc2 <isUHeapPlacementStrategyBESTFIT>
f010301c:	84 c0                	test   %al,%al
f010301e:	74 12                	je     f0103032 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0103020:	83 ec 0c             	sub    $0xc,%esp
f0103023:	68 a4 0e 13 f0       	push   $0xf0130ea4
f0103028:	e8 04 de ff ff       	call   f0100e31 <cprintf>
f010302d:	83 c4 10             	add    $0x10,%esp
f0103030:	eb 46                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0103032:	e8 a0 ef ff ff       	call   f0101fd7 <isUHeapPlacementStrategyNEXTFIT>
f0103037:	84 c0                	test   %al,%al
f0103039:	74 12                	je     f010304d <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010303b:	83 ec 0c             	sub    $0xc,%esp
f010303e:	68 d0 0e 13 f0       	push   $0xf0130ed0
f0103043:	e8 e9 dd ff ff       	call   f0100e31 <cprintf>
f0103048:	83 c4 10             	add    $0x10,%esp
f010304b:	eb 2b                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010304d:	e8 9a ef ff ff       	call   f0101fec <isUHeapPlacementStrategyWORSTFIT>
f0103052:	84 c0                	test   %al,%al
f0103054:	74 12                	je     f0103068 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103056:	83 ec 0c             	sub    $0xc,%esp
f0103059:	68 fc 0e 13 f0       	push   $0xf0130efc
f010305e:	e8 ce dd ff ff       	call   f0100e31 <cprintf>
f0103063:	83 c4 10             	add    $0x10,%esp
f0103066:	eb 10                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 28 0f 13 f0       	push   $0xf0130f28
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010307d:	c9                   	leave  
f010307e:	c3                   	ret    

f010307f <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010307f:	55                   	push   %ebp
f0103080:	89 e5                	mov    %esp,%ebp
f0103082:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103085:	e8 2b ee ff ff       	call   f0101eb5 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010308a:	83 ec 0c             	sub    $0xc,%esp
f010308d:	68 54 0f 13 f0       	push   $0xf0130f54
f0103092:	e8 9a dd ff ff       	call   f0100e31 <cprintf>
f0103097:	83 c4 10             	add    $0x10,%esp
	return 0;
f010309a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010309f:	c9                   	leave  
f01030a0:	c3                   	ret    

f01030a1 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01030a1:	55                   	push   %ebp
f01030a2:	89 e5                	mov    %esp,%ebp
f01030a4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01030a7:	e8 19 ee ff ff       	call   f0101ec5 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01030ac:	83 ec 0c             	sub    $0xc,%esp
f01030af:	68 54 0f 13 f0       	push   $0xf0130f54
f01030b4:	e8 78 dd ff ff       	call   f0100e31 <cprintf>
f01030b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c1:	c9                   	leave  
f01030c2:	c3                   	ret    

f01030c3 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01030c3:	55                   	push   %ebp
f01030c4:	89 e5                	mov    %esp,%ebp
f01030c6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01030c9:	e8 07 ee ff ff       	call   f0101ed5 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01030ce:	83 ec 0c             	sub    $0xc,%esp
f01030d1:	68 88 0f 13 f0       	push   $0xf0130f88
f01030d6:	e8 56 dd ff ff       	call   f0100e31 <cprintf>
f01030db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030e3:	c9                   	leave  
f01030e4:	c3                   	ret    

f01030e5 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01030e5:	55                   	push   %ebp
f01030e6:	89 e5                	mov    %esp,%ebp
f01030e8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01030eb:	e8 f5 ed ff ff       	call   f0101ee5 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01030f0:	83 ec 0c             	sub    $0xc,%esp
f01030f3:	68 b8 0f 13 f0       	push   $0xf0130fb8
f01030f8:	e8 34 dd ff ff       	call   f0100e31 <cprintf>
f01030fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103100:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103105:	c9                   	leave  
f0103106:	c3                   	ret    

f0103107 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103107:	55                   	push   %ebp
f0103108:	89 e5                	mov    %esp,%ebp
f010310a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010310d:	e8 e3 ed ff ff       	call   f0101ef5 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103112:	83 ec 0c             	sub    $0xc,%esp
f0103115:	68 e8 0f 13 f0       	push   $0xf0130fe8
f010311a:	e8 12 dd ff ff       	call   f0100e31 <cprintf>
f010311f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103122:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103127:	c9                   	leave  
f0103128:	c3                   	ret    

f0103129 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0103129:	55                   	push   %ebp
f010312a:	89 e5                	mov    %esp,%ebp
f010312c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010312f:	e8 d1 ed ff ff       	call   f0101f05 <isKHeapPlacementStrategyCONTALLOC>
f0103134:	84 c0                	test   %al,%al
f0103136:	74 12                	je     f010314a <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103138:	83 ec 0c             	sub    $0xc,%esp
f010313b:	68 1c 10 13 f0       	push   $0xf013101c
f0103140:	e8 ec dc ff ff       	call   f0100e31 <cprintf>
f0103145:	83 c4 10             	add    $0x10,%esp
f0103148:	eb 7c                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010314a:	e8 ca ed ff ff       	call   f0101f19 <isKHeapPlacementStrategyFIRSTFIT>
f010314f:	84 c0                	test   %al,%al
f0103151:	74 12                	je     f0103165 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0103153:	83 ec 0c             	sub    $0xc,%esp
f0103156:	68 58 10 13 f0       	push   $0xf0131058
f010315b:	e8 d1 dc ff ff       	call   f0100e31 <cprintf>
f0103160:	83 c4 10             	add    $0x10,%esp
f0103163:	eb 61                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103165:	e8 c4 ed ff ff       	call   f0101f2e <isKHeapPlacementStrategyBESTFIT>
f010316a:	84 c0                	test   %al,%al
f010316c:	74 12                	je     f0103180 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010316e:	83 ec 0c             	sub    $0xc,%esp
f0103171:	68 88 10 13 f0       	push   $0xf0131088
f0103176:	e8 b6 dc ff ff       	call   f0100e31 <cprintf>
f010317b:	83 c4 10             	add    $0x10,%esp
f010317e:	eb 46                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103180:	e8 be ed ff ff       	call   f0101f43 <isKHeapPlacementStrategyNEXTFIT>
f0103185:	84 c0                	test   %al,%al
f0103187:	74 12                	je     f010319b <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103189:	83 ec 0c             	sub    $0xc,%esp
f010318c:	68 b4 10 13 f0       	push   $0xf01310b4
f0103191:	e8 9b dc ff ff       	call   f0100e31 <cprintf>
f0103196:	83 c4 10             	add    $0x10,%esp
f0103199:	eb 2b                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010319b:	e8 b8 ed ff ff       	call   f0101f58 <isKHeapPlacementStrategyWORSTFIT>
f01031a0:	84 c0                	test   %al,%al
f01031a2:	74 12                	je     f01031b6 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01031a4:	83 ec 0c             	sub    $0xc,%esp
f01031a7:	68 e0 10 13 f0       	push   $0xf01310e0
f01031ac:	e8 80 dc ff ff       	call   f0100e31 <cprintf>
f01031b1:	83 c4 10             	add    $0x10,%esp
f01031b4:	eb 10                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01031b6:	83 ec 0c             	sub    $0xc,%esp
f01031b9:	68 10 11 13 f0       	push   $0xf0131110
f01031be:	e8 6e dc ff ff       	call   f0100e31 <cprintf>
f01031c3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01031c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031cb:	c9                   	leave  
f01031cc:	c3                   	ret    

f01031cd <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01031cd:	55                   	push   %ebp
f01031ce:	89 e5                	mov    %esp,%ebp
f01031d0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01031d3:	e8 6f a2 00 00       	call   f010d447 <isBufferingEnabled>
f01031d8:	84 c0                	test   %al,%al
f01031da:	75 12                	jne    f01031ee <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 40 11 13 f0       	push   $0xf0131140
f01031e4:	e8 48 dc ff ff       	call   f0100e31 <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
f01031ec:	eb 1d                	jmp    f010320b <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01031ee:	83 ec 0c             	sub    $0xc,%esp
f01031f1:	6a 00                	push   $0x0
f01031f3:	e8 29 a2 00 00       	call   f010d421 <enableModifiedBuffer>
f01031f8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01031fb:	83 ec 0c             	sub    $0xc,%esp
f01031fe:	68 7c 11 13 f0       	push   $0xf013117c
f0103203:	e8 29 dc ff ff       	call   f0100e31 <cprintf>
f0103208:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010320b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103210:	c9                   	leave  
f0103211:	c3                   	ret    

f0103212 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103212:	55                   	push   %ebp
f0103213:	89 e5                	mov    %esp,%ebp
f0103215:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103218:	e8 2a a2 00 00       	call   f010d447 <isBufferingEnabled>
f010321d:	84 c0                	test   %al,%al
f010321f:	75 12                	jne    f0103233 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0103221:	83 ec 0c             	sub    $0xc,%esp
f0103224:	68 40 11 13 f0       	push   $0xf0131140
f0103229:	e8 03 dc ff ff       	call   f0100e31 <cprintf>
f010322e:	83 c4 10             	add    $0x10,%esp
f0103231:	eb 1d                	jmp    f0103250 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0103233:	83 ec 0c             	sub    $0xc,%esp
f0103236:	6a 01                	push   $0x1
f0103238:	e8 e4 a1 00 00       	call   f010d421 <enableModifiedBuffer>
f010323d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0103240:	83 ec 0c             	sub    $0xc,%esp
f0103243:	68 a0 11 13 f0       	push   $0xf01311a0
f0103248:	e8 e4 db ff ff       	call   f0100e31 <cprintf>
f010324d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0103250:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103255:	c9                   	leave  
f0103256:	c3                   	ret    

f0103257 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103257:	55                   	push   %ebp
f0103258:	89 e5                	mov    %esp,%ebp
f010325a:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010325d:	83 ec 0c             	sub    $0xc,%esp
f0103260:	6a 00                	push   $0x0
f0103262:	e8 d2 a1 00 00       	call   f010d439 <enableBuffering>
f0103267:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010326a:	83 ec 0c             	sub    $0xc,%esp
f010326d:	6a 00                	push   $0x0
f010326f:	e8 ad a1 00 00       	call   f010d421 <enableModifiedBuffer>
f0103274:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103277:	83 ec 0c             	sub    $0xc,%esp
f010327a:	68 c0 11 13 f0       	push   $0xf01311c0
f010327f:	e8 ad db ff ff       	call   f0100e31 <cprintf>
f0103284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010328c:	c9                   	leave  
f010328d:	c3                   	ret    

f010328e <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010328e:	55                   	push   %ebp
f010328f:	89 e5                	mov    %esp,%ebp
f0103291:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103294:	83 ec 0c             	sub    $0xc,%esp
f0103297:	6a 01                	push   $0x1
f0103299:	e8 9b a1 00 00       	call   f010d439 <enableBuffering>
f010329e:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01032a1:	83 ec 0c             	sub    $0xc,%esp
f01032a4:	6a 01                	push   $0x1
f01032a6:	e8 76 a1 00 00       	call   f010d421 <enableModifiedBuffer>
f01032ab:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01032ae:	e8 ac a1 00 00       	call   f010d45f <getModifiedBufferLength>
f01032b3:	85 c0                	test   %eax,%eax
f01032b5:	75 59                	jne    f0103310 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01032b7:	83 ec 0c             	sub    $0xc,%esp
f01032ba:	68 dc 11 13 f0       	push   $0xf01311dc
f01032bf:	e8 6d db ff ff       	call   f0100e31 <cprintf>
f01032c4:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01032c7:	83 ec 08             	sub    $0x8,%esp
f01032ca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01032cd:	50                   	push   %eax
f01032ce:	68 0c 12 13 f0       	push   $0xf013120c
f01032d3:	e8 64 b5 02 00       	call   f012e83c <readline>
f01032d8:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01032db:	83 ec 04             	sub    $0x4,%esp
f01032de:	6a 0a                	push   $0xa
f01032e0:	6a 00                	push   $0x0
f01032e2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01032e5:	50                   	push   %eax
f01032e6:	e8 b7 ba 02 00       	call   f012eda2 <strtol>
f01032eb:	83 c4 10             	add    $0x10,%esp
f01032ee:	83 ec 0c             	sub    $0xc,%esp
f01032f1:	50                   	push   %eax
f01032f2:	e8 5a a1 00 00       	call   f010d451 <setModifiedBufferLength>
f01032f7:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01032fa:	e8 60 a1 00 00       	call   f010d45f <getModifiedBufferLength>
f01032ff:	83 ec 08             	sub    $0x8,%esp
f0103302:	50                   	push   %eax
f0103303:	68 38 12 13 f0       	push   $0xf0131238
f0103308:	e8 24 db ff ff       	call   f0100e31 <cprintf>
f010330d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103310:	83 ec 0c             	sub    $0xc,%esp
f0103313:	68 5d 12 13 f0       	push   $0xf013125d
f0103318:	e8 14 db ff ff       	call   f0100e31 <cprintf>
f010331d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103320:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103325:	c9                   	leave  
f0103326:	c3                   	ret    

f0103327 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103327:	55                   	push   %ebp
f0103328:	89 e5                	mov    %esp,%ebp
f010332a:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010332d:	e8 15 a1 00 00       	call   f010d447 <isBufferingEnabled>
f0103332:	84 c0                	test   %al,%al
f0103334:	75 12                	jne    f0103348 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103336:	83 ec 0c             	sub    $0xc,%esp
f0103339:	68 78 12 13 f0       	push   $0xf0131278
f010333e:	e8 ee da ff ff       	call   f0100e31 <cprintf>
f0103343:	83 c4 10             	add    $0x10,%esp
f0103346:	eb 19                	jmp    f0103361 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103348:	e8 e2 a0 00 00       	call   f010d42f <isModifiedBufferEnabled>
f010334d:	84 c0                	test   %al,%al
f010334f:	75 10                	jne    f0103361 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103351:	83 ec 0c             	sub    $0xc,%esp
f0103354:	68 c8 12 13 f0       	push   $0xf01312c8
f0103359:	e8 d3 da ff ff       	call   f0100e31 <cprintf>
f010335e:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0103361:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103364:	83 c0 04             	add    $0x4,%eax
f0103367:	8b 00                	mov    (%eax),%eax
f0103369:	83 ec 04             	sub    $0x4,%esp
f010336c:	6a 0a                	push   $0xa
f010336e:	6a 00                	push   $0x0
f0103370:	50                   	push   %eax
f0103371:	e8 2c ba 02 00       	call   f012eda2 <strtol>
f0103376:	83 c4 10             	add    $0x10,%esp
f0103379:	83 ec 0c             	sub    $0xc,%esp
f010337c:	50                   	push   %eax
f010337d:	e8 cf a0 00 00       	call   f010d451 <setModifiedBufferLength>
f0103382:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103385:	e8 d5 a0 00 00       	call   f010d45f <getModifiedBufferLength>
f010338a:	83 ec 08             	sub    $0x8,%esp
f010338d:	50                   	push   %eax
f010338e:	68 38 12 13 f0       	push   $0xf0131238
f0103393:	e8 99 da ff ff       	call   f0100e31 <cprintf>
f0103398:	83 c4 10             	add    $0x10,%esp
	return 0;
f010339b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033a0:	c9                   	leave  
f01033a1:	c3                   	ret    

f01033a2 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01033a2:	55                   	push   %ebp
f01033a3:	89 e5                	mov    %esp,%ebp
f01033a5:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01033a8:	e8 9a a0 00 00       	call   f010d447 <isBufferingEnabled>
f01033ad:	84 c0                	test   %al,%al
f01033af:	75 12                	jne    f01033c3 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01033b1:	83 ec 0c             	sub    $0xc,%esp
f01033b4:	68 78 12 13 f0       	push   $0xf0131278
f01033b9:	e8 73 da ff ff       	call   f0100e31 <cprintf>
f01033be:	83 c4 10             	add    $0x10,%esp
f01033c1:	eb 19                	jmp    f01033dc <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01033c3:	e8 67 a0 00 00       	call   f010d42f <isModifiedBufferEnabled>
f01033c8:	84 c0                	test   %al,%al
f01033ca:	75 10                	jne    f01033dc <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01033cc:	83 ec 0c             	sub    $0xc,%esp
f01033cf:	68 c8 12 13 f0       	push   $0xf01312c8
f01033d4:	e8 58 da ff ff       	call   f0100e31 <cprintf>
f01033d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01033dc:	e8 7e a0 00 00       	call   f010d45f <getModifiedBufferLength>
f01033e1:	83 ec 08             	sub    $0x8,%esp
f01033e4:	50                   	push   %eax
f01033e5:	68 0e 13 13 f0       	push   $0xf013130e
f01033ea:	e8 42 da ff ff       	call   f0100e31 <cprintf>
f01033ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033f7:	c9                   	leave  
f01033f8:	c3                   	ret    

f01033f9 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01033f9:	55                   	push   %ebp
f01033fa:	89 e5                	mov    %esp,%ebp
f01033fc:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01033ff:	83 ec 08             	sub    $0x8,%esp
f0103402:	ff 75 0c             	pushl  0xc(%ebp)
f0103405:	ff 75 08             	pushl  0x8(%ebp)
f0103408:	e8 98 a4 00 00       	call   f010d8a5 <tst_handler>
f010340d:	83 c4 10             	add    $0x10,%esp
}
f0103410:	c9                   	leave  
f0103411:	c3                   	ret    

f0103412 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103412:	55                   	push   %ebp
f0103413:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103415:	8b 45 08             	mov    0x8(%ebp),%eax
f0103418:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f010341e:	29 d0                	sub    %edx,%eax
f0103420:	c1 f8 02             	sar    $0x2,%eax
f0103423:	89 c2                	mov    %eax,%edx
f0103425:	89 d0                	mov    %edx,%eax
f0103427:	c1 e0 03             	shl    $0x3,%eax
f010342a:	01 d0                	add    %edx,%eax
f010342c:	c1 e0 03             	shl    $0x3,%eax
f010342f:	01 d0                	add    %edx,%eax
f0103431:	c1 e0 03             	shl    $0x3,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 d0                	add    %edx,%eax
f010343b:	89 c1                	mov    %eax,%ecx
f010343d:	c1 e1 0f             	shl    $0xf,%ecx
f0103440:	01 c8                	add    %ecx,%eax
f0103442:	c1 e0 03             	shl    $0x3,%eax
f0103445:	01 d0                	add    %edx,%eax
f0103447:	f7 d8                	neg    %eax
}
f0103449:	5d                   	pop    %ebp
f010344a:	c3                   	ret    

f010344b <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010344e:	ff 75 08             	pushl  0x8(%ebp)
f0103451:	e8 bc ff ff ff       	call   f0103412 <to_frame_number>
f0103456:	83 c4 04             	add    $0x4,%esp
f0103459:	c1 e0 0c             	shl    $0xc,%eax
}
f010345c:	c9                   	leave  
f010345d:	c3                   	ret    

f010345e <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010345e:	55                   	push   %ebp
f010345f:	89 e5                	mov    %esp,%ebp
f0103461:	53                   	push   %ebx
f0103462:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103465:	8b 45 08             	mov    0x8(%ebp),%eax
f0103468:	c1 e8 0c             	shr    $0xc,%eax
f010346b:	89 c2                	mov    %eax,%edx
f010346d:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103472:	39 c2                	cmp    %eax,%edx
f0103474:	72 14                	jb     f010348a <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103476:	83 ec 04             	sub    $0x4,%esp
f0103479:	68 2c 13 13 f0       	push   $0xf013132c
f010347e:	6a 55                	push   $0x55
f0103480:	68 54 13 13 f0       	push   $0xf0131354
f0103485:	e8 26 cd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010348a:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0103490:	8b 45 08             	mov    0x8(%ebp),%eax
f0103493:	c1 e8 0c             	shr    $0xc,%eax
f0103496:	89 c2                	mov    %eax,%edx
f0103498:	89 d0                	mov    %edx,%eax
f010349a:	01 c0                	add    %eax,%eax
f010349c:	01 d0                	add    %edx,%eax
f010349e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01034a5:	01 d8                	add    %ebx,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	01 c8                	add    %ecx,%eax
}
f01034ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034ae:	c9                   	leave  
f01034af:	c3                   	ret    

f01034b0 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01034b0:	55                   	push   %ebp
f01034b1:	89 e5                	mov    %esp,%ebp
f01034b3:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01034b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b9:	05 00 14 00 00       	add    $0x1400,%eax
f01034be:	c1 e0 03             	shl    $0x3,%eax
f01034c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01034c4:	83 ec 04             	sub    $0x4,%esp
f01034c7:	6a 08                	push   $0x8
f01034c9:	ff 75 0c             	pushl  0xc(%ebp)
f01034cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01034cf:	e8 12 bd 02 00       	call   f012f1e6 <ide_read>
f01034d4:	83 c4 10             	add    $0x10,%esp
f01034d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01034da:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01034dd:	c9                   	leave  
f01034de:	c3                   	ret    

f01034df <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01034df:	55                   	push   %ebp
f01034e0:	89 e5                	mov    %esp,%ebp
f01034e2:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01034e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01034e8:	05 00 14 00 00       	add    $0x1400,%eax
f01034ed:	c1 e0 03             	shl    $0x3,%eax
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01034f3:	83 ec 04             	sub    $0x4,%esp
f01034f6:	6a 08                	push   $0x8
f01034f8:	ff 75 0c             	pushl  0xc(%ebp)
f01034fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01034fe:	e8 23 be 02 00       	call   f012f326 <ide_write>
f0103503:	83 c4 10             	add    $0x10,%esp
f0103506:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103509:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010350d:	74 14                	je     f0103523 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010350f:	83 ec 04             	sub    $0x4,%esp
f0103512:	68 76 13 13 f0       	push   $0xf0131376
f0103517:	6a 2e                	push   $0x2e
f0103519:	68 8d 13 13 f0       	push   $0xf013138d
f010351e:	e8 8d cc ff ff       	call   f01001b0 <_panic>
	return success;
f0103523:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103526:	c9                   	leave  
f0103527:	c3                   	ret    

f0103528 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103528:	55                   	push   %ebp
f0103529:	89 e5                	mov    %esp,%ebp
f010352b:	56                   	push   %esi
f010352c:	53                   	push   %ebx
f010352d:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103530:	c7 05 44 a3 2d f0 00 	movl   $0x0,0xf02da344
f0103537:	00 00 00 
f010353a:	c7 05 48 a3 2d f0 00 	movl   $0x0,0xf02da348
f0103541:	00 00 00 
f0103544:	c7 05 50 a3 2d f0 00 	movl   $0x0,0xf02da350
f010354b:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010354e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103555:	e9 20 01 00 00       	jmp    f010367a <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010355a:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f0103560:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103563:	89 d0                	mov    %edx,%eax
f0103565:	01 c0                	add    %eax,%eax
f0103567:	01 d0                	add    %edx,%eax
f0103569:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103570:	01 d8                	add    %ebx,%eax
f0103572:	01 d0                	add    %edx,%eax
f0103574:	01 c8                	add    %ecx,%eax
f0103576:	83 ec 0c             	sub    $0xc,%esp
f0103579:	50                   	push   %eax
f010357a:	e8 bf 39 00 00       	call   f0106f3e <initialize_frame_info>
f010357f:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103582:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f0103588:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010358b:	89 d0                	mov    %edx,%eax
f010358d:	01 c0                	add    %eax,%eax
f010358f:	01 d0                	add    %edx,%eax
f0103591:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103598:	01 d8                	add    %ebx,%eax
f010359a:	01 d0                	add    %edx,%eax
f010359c:	01 c8                	add    %ecx,%eax
f010359e:	85 c0                	test   %eax,%eax
f01035a0:	75 14                	jne    f01035b6 <initialize_disk_page_file+0x8e>
f01035a2:	83 ec 04             	sub    $0x4,%esp
f01035a5:	68 ac 13 13 f0       	push   $0xf01313ac
f01035aa:	6a 59                	push   $0x59
f01035ac:	68 8d 13 13 f0       	push   $0xf013138d
f01035b1:	e8 fa cb ff ff       	call   f01001b0 <_panic>
f01035b6:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01035bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01035bf:	89 d0                	mov    %edx,%eax
f01035c1:	01 c0                	add    %eax,%eax
f01035c3:	01 d0                	add    %edx,%eax
f01035c5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01035cc:	01 d8                	add    %ebx,%eax
f01035ce:	01 d0                	add    %edx,%eax
f01035d0:	01 c8                	add    %ecx,%eax
f01035d2:	8b 15 44 a3 2d f0    	mov    0xf02da344,%edx
f01035d8:	89 10                	mov    %edx,(%eax)
f01035da:	8b 00                	mov    (%eax),%eax
f01035dc:	85 c0                	test   %eax,%eax
f01035de:	74 27                	je     f0103607 <initialize_disk_page_file+0xdf>
f01035e0:	8b 0d 44 a3 2d f0    	mov    0xf02da344,%ecx
f01035e6:	8b 1d 10 3b 25 f0    	mov    0xf0253b10,%ebx
f01035ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01035ef:	89 d0                	mov    %edx,%eax
f01035f1:	01 c0                	add    %eax,%eax
f01035f3:	01 d0                	add    %edx,%eax
f01035f5:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01035fc:	01 f0                	add    %esi,%eax
f01035fe:	01 d0                	add    %edx,%eax
f0103600:	01 d8                	add    %ebx,%eax
f0103602:	89 41 04             	mov    %eax,0x4(%ecx)
f0103605:	eb 21                	jmp    f0103628 <initialize_disk_page_file+0x100>
f0103607:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010360d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103610:	89 d0                	mov    %edx,%eax
f0103612:	01 c0                	add    %eax,%eax
f0103614:	01 d0                	add    %edx,%eax
f0103616:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010361d:	01 d8                	add    %ebx,%eax
f010361f:	01 d0                	add    %edx,%eax
f0103621:	01 c8                	add    %ecx,%eax
f0103623:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103628:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010362e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103631:	89 d0                	mov    %edx,%eax
f0103633:	01 c0                	add    %eax,%eax
f0103635:	01 d0                	add    %edx,%eax
f0103637:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010363e:	01 d8                	add    %ebx,%eax
f0103640:	01 d0                	add    %edx,%eax
f0103642:	01 c8                	add    %ecx,%eax
f0103644:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103649:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010364f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103652:	89 d0                	mov    %edx,%eax
f0103654:	01 c0                	add    %eax,%eax
f0103656:	01 d0                	add    %edx,%eax
f0103658:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010365f:	01 d8                	add    %ebx,%eax
f0103661:	01 d0                	add    %edx,%eax
f0103663:	01 c8                	add    %ecx,%eax
f0103665:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010366c:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f0103671:	40                   	inc    %eax
f0103672:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103677:	ff 45 f4             	incl   -0xc(%ebp)
f010367a:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103681:	0f 8e d3 fe ff ff    	jle    f010355a <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103687:	90                   	nop
f0103688:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010368b:	5b                   	pop    %ebx
f010368c:	5e                   	pop    %esi
f010368d:	5d                   	pop    %ebp
f010368e:	c3                   	ret    

f010368f <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010368f:	55                   	push   %ebp
f0103690:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103692:	8b 45 08             	mov    0x8(%ebp),%eax
f0103695:	8b 15 10 3b 25 f0    	mov    0xf0253b10,%edx
f010369b:	29 d0                	sub    %edx,%eax
f010369d:	c1 f8 02             	sar    $0x2,%eax
f01036a0:	89 c2                	mov    %eax,%edx
f01036a2:	89 d0                	mov    %edx,%eax
f01036a4:	c1 e0 03             	shl    $0x3,%eax
f01036a7:	01 d0                	add    %edx,%eax
f01036a9:	c1 e0 03             	shl    $0x3,%eax
f01036ac:	01 d0                	add    %edx,%eax
f01036ae:	c1 e0 03             	shl    $0x3,%eax
f01036b1:	01 d0                	add    %edx,%eax
f01036b3:	c1 e0 03             	shl    $0x3,%eax
f01036b6:	01 d0                	add    %edx,%eax
f01036b8:	89 c1                	mov    %eax,%ecx
f01036ba:	c1 e1 0f             	shl    $0xf,%ecx
f01036bd:	01 c8                	add    %ecx,%eax
f01036bf:	c1 e0 03             	shl    $0x3,%eax
f01036c2:	01 d0                	add    %edx,%eax
f01036c4:	f7 d8                	neg    %eax
}
f01036c6:	5d                   	pop    %ebp
f01036c7:	c3                   	ret    

f01036c8 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f01036c8:	55                   	push   %ebp
f01036c9:	89 e5                	mov    %esp,%ebp
f01036cb:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f01036ce:	a1 44 a3 2d f0       	mov    0xf02da344,%eax
f01036d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01036d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01036da:	75 0a                	jne    f01036e6 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01036dc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036e1:	e9 a7 00 00 00       	jmp    f010378d <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01036e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01036ea:	75 14                	jne    f0103700 <allocate_disk_frame+0x38>
f01036ec:	83 ec 04             	sub    $0x4,%esp
f01036ef:	68 cf 13 13 f0       	push   $0xf01313cf
f01036f4:	6a 78                	push   $0x78
f01036f6:	68 8d 13 13 f0       	push   $0xf013138d
f01036fb:	e8 b0 ca ff ff       	call   f01001b0 <_panic>
f0103700:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103703:	8b 00                	mov    (%eax),%eax
f0103705:	85 c0                	test   %eax,%eax
f0103707:	74 10                	je     f0103719 <allocate_disk_frame+0x51>
f0103709:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010370c:	8b 00                	mov    (%eax),%eax
f010370e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103711:	8b 52 04             	mov    0x4(%edx),%edx
f0103714:	89 50 04             	mov    %edx,0x4(%eax)
f0103717:	eb 0b                	jmp    f0103724 <allocate_disk_frame+0x5c>
f0103719:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010371c:	8b 40 04             	mov    0x4(%eax),%eax
f010371f:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103724:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103727:	8b 40 04             	mov    0x4(%eax),%eax
f010372a:	85 c0                	test   %eax,%eax
f010372c:	74 0f                	je     f010373d <allocate_disk_frame+0x75>
f010372e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103731:	8b 40 04             	mov    0x4(%eax),%eax
f0103734:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103737:	8b 12                	mov    (%edx),%edx
f0103739:	89 10                	mov    %edx,(%eax)
f010373b:	eb 0a                	jmp    f0103747 <allocate_disk_frame+0x7f>
f010373d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103740:	8b 00                	mov    (%eax),%eax
f0103742:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010374a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103753:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010375a:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f010375f:	48                   	dec    %eax
f0103760:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
	initialize_frame_info(ptr_frame_info);
f0103765:	83 ec 0c             	sub    $0xc,%esp
f0103768:	ff 75 f4             	pushl  -0xc(%ebp)
f010376b:	e8 ce 37 00 00       	call   f0106f3e <initialize_frame_info>
f0103770:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	ff 75 f4             	pushl  -0xc(%ebp)
f0103779:	e8 11 ff ff ff       	call   f010368f <to_disk_frame_number>
f010377e:	83 c4 10             	add    $0x10,%esp
f0103781:	89 c2                	mov    %eax,%edx
f0103783:	8b 45 08             	mov    0x8(%ebp),%eax
f0103786:	89 10                	mov    %edx,(%eax)
	return 0;
f0103788:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010378d:	c9                   	leave  
f010378e:	c3                   	ret    

f010378f <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010378f:	55                   	push   %ebp
f0103790:	89 e5                	mov    %esp,%ebp
f0103792:	56                   	push   %esi
f0103793:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103794:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103798:	0f 84 fa 00 00 00    	je     f0103898 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010379e:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01037a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01037a7:	89 d0                	mov    %edx,%eax
f01037a9:	01 c0                	add    %eax,%eax
f01037ab:	01 d0                	add    %edx,%eax
f01037ad:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01037b4:	01 d8                	add    %ebx,%eax
f01037b6:	01 d0                	add    %edx,%eax
f01037b8:	01 c8                	add    %ecx,%eax
f01037ba:	85 c0                	test   %eax,%eax
f01037bc:	75 17                	jne    f01037d5 <free_disk_frame+0x46>
f01037be:	83 ec 04             	sub    $0x4,%esp
f01037c1:	68 ac 13 13 f0       	push   $0xf01313ac
f01037c6:	68 85 00 00 00       	push   $0x85
f01037cb:	68 8d 13 13 f0       	push   $0xf013138d
f01037d0:	e8 db c9 ff ff       	call   f01001b0 <_panic>
f01037d5:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01037db:	8b 55 08             	mov    0x8(%ebp),%edx
f01037de:	89 d0                	mov    %edx,%eax
f01037e0:	01 c0                	add    %eax,%eax
f01037e2:	01 d0                	add    %edx,%eax
f01037e4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01037eb:	01 d8                	add    %ebx,%eax
f01037ed:	01 d0                	add    %edx,%eax
f01037ef:	01 c8                	add    %ecx,%eax
f01037f1:	8b 15 44 a3 2d f0    	mov    0xf02da344,%edx
f01037f7:	89 10                	mov    %edx,(%eax)
f01037f9:	8b 00                	mov    (%eax),%eax
f01037fb:	85 c0                	test   %eax,%eax
f01037fd:	74 27                	je     f0103826 <free_disk_frame+0x97>
f01037ff:	8b 0d 44 a3 2d f0    	mov    0xf02da344,%ecx
f0103805:	8b 1d 10 3b 25 f0    	mov    0xf0253b10,%ebx
f010380b:	8b 55 08             	mov    0x8(%ebp),%edx
f010380e:	89 d0                	mov    %edx,%eax
f0103810:	01 c0                	add    %eax,%eax
f0103812:	01 d0                	add    %edx,%eax
f0103814:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010381b:	01 f0                	add    %esi,%eax
f010381d:	01 d0                	add    %edx,%eax
f010381f:	01 d8                	add    %ebx,%eax
f0103821:	89 41 04             	mov    %eax,0x4(%ecx)
f0103824:	eb 21                	jmp    f0103847 <free_disk_frame+0xb8>
f0103826:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010382c:	8b 55 08             	mov    0x8(%ebp),%edx
f010382f:	89 d0                	mov    %edx,%eax
f0103831:	01 c0                	add    %eax,%eax
f0103833:	01 d0                	add    %edx,%eax
f0103835:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010383c:	01 d8                	add    %ebx,%eax
f010383e:	01 d0                	add    %edx,%eax
f0103840:	01 c8                	add    %ecx,%eax
f0103842:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103847:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010384d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103850:	89 d0                	mov    %edx,%eax
f0103852:	01 c0                	add    %eax,%eax
f0103854:	01 d0                	add    %edx,%eax
f0103856:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010385d:	01 d8                	add    %ebx,%eax
f010385f:	01 d0                	add    %edx,%eax
f0103861:	01 c8                	add    %ecx,%eax
f0103863:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103868:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010386e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103871:	89 d0                	mov    %edx,%eax
f0103873:	01 c0                	add    %eax,%eax
f0103875:	01 d0                	add    %edx,%eax
f0103877:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010387e:	01 d8                	add    %ebx,%eax
f0103880:	01 d0                	add    %edx,%eax
f0103882:	01 c8                	add    %ecx,%eax
f0103884:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010388b:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f0103890:	40                   	inc    %eax
f0103891:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
f0103896:	eb 01                	jmp    f0103899 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103898:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103899:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010389c:	5b                   	pop    %ebx
f010389d:	5e                   	pop    %esi
f010389e:	5d                   	pop    %ebp
f010389f:	c3                   	ret    

f01038a0 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01038a0:	55                   	push   %ebp
f01038a1:	89 e5                	mov    %esp,%ebp
f01038a3:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01038a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038a9:	c1 e8 16             	shr    $0x16,%eax
f01038ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01038b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b6:	01 d0                	add    %edx,%eax
f01038b8:	8b 00                	mov    (%eax),%eax
f01038ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01038bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01038c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01038c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01038c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038cb:	c1 e8 0c             	shr    $0xc,%eax
f01038ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01038d1:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01038d6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01038d9:	72 17                	jb     f01038f2 <get_disk_page_table+0x52>
f01038db:	ff 75 f0             	pushl  -0x10(%ebp)
f01038de:	68 f0 13 13 f0       	push   $0xf01313f0
f01038e3:	68 92 00 00 00       	push   $0x92
f01038e8:	68 8d 13 13 f0       	push   $0xf013138d
f01038ed:	e8 be c8 ff ff       	call   f01001b0 <_panic>
f01038f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038f5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01038fa:	89 c2                	mov    %eax,%edx
f01038fc:	8b 45 14             	mov    0x14(%ebp),%eax
f01038ff:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103901:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103905:	0f 85 b7 00 00 00    	jne    f01039c2 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010390b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010390f:	0f 84 9d 00 00 00    	je     f01039b2 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103915:	83 ec 0c             	sub    $0xc,%esp
f0103918:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010391b:	50                   	push   %eax
f010391c:	e8 38 36 00 00       	call   f0106f59 <allocate_frame>
f0103921:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103924:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103927:	83 ec 0c             	sub    $0xc,%esp
f010392a:	50                   	push   %eax
f010392b:	e8 1b fb ff ff       	call   f010344b <to_physical_address>
f0103930:	83 c4 10             	add    $0x10,%esp
f0103933:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103936:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103939:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010393c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010393f:	c1 e8 0c             	shr    $0xc,%eax
f0103942:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103945:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010394a:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010394d:	72 17                	jb     f0103966 <get_disk_page_table+0xc6>
f010394f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103952:	68 f0 13 13 f0       	push   $0xf01313f0
f0103957:	68 ae 00 00 00       	push   $0xae
f010395c:	68 8d 13 13 f0       	push   $0xf013138d
f0103961:	e8 4a c8 ff ff       	call   f01001b0 <_panic>
f0103966:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103969:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010396e:	89 c2                	mov    %eax,%edx
f0103970:	8b 45 14             	mov    0x14(%ebp),%eax
f0103973:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103975:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103978:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f010397e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103981:	c1 e8 16             	shr    $0x16,%eax
f0103984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	01 d0                	add    %edx,%eax
f0103990:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103993:	83 ca 01             	or     $0x1,%edx
f0103996:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103998:	8b 45 14             	mov    0x14(%ebp),%eax
f010399b:	8b 00                	mov    (%eax),%eax
f010399d:	83 ec 04             	sub    $0x4,%esp
f01039a0:	68 00 10 00 00       	push   $0x1000
f01039a5:	6a 00                	push   $0x0
f01039a7:	50                   	push   %eax
f01039a8:	e8 83 b2 02 00       	call   f012ec30 <memset>
f01039ad:	83 c4 10             	add    $0x10,%esp
f01039b0:	eb 10                	jmp    f01039c2 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01039b2:	8b 45 14             	mov    0x14(%ebp),%eax
f01039b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01039bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01039c0:	eb 05                	jmp    f01039c7 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01039c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039c7:	c9                   	leave  
f01039c8:	c3                   	ret    

f01039c9 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01039c9:	55                   	push   %ebp
f01039ca:	89 e5                	mov    %esp,%ebp
f01039cc:	83 ec 28             	sub    $0x28,%esp
f01039cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01039d2:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01039d5:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01039d9:	74 75                	je     f0103a50 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01039db:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01039e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039e5:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01039ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01039ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01039f5:	f7 75 f4             	divl   -0xc(%ebp)
f01039f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fb:	29 d0                	sub    %edx,%eax
f01039fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103a00:	73 32                	jae    f0103a34 <pf_add_empty_env_page+0x6b>
f0103a02:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a05:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103a0b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103a10:	29 d0                	sub    %edx,%eax
f0103a12:	c1 e0 0c             	shl    $0xc,%eax
f0103a15:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103a1a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103a1d:	76 15                	jbe    f0103a34 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103a1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a22:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103a28:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2e:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103a34:	a1 dc be 2b f0       	mov    0xf02bbedc,%eax
f0103a39:	83 ec 04             	sub    $0x4,%esp
f0103a3c:	50                   	push   %eax
f0103a3d:	ff 75 0c             	pushl  0xc(%ebp)
f0103a40:	ff 75 08             	pushl  0x8(%ebp)
f0103a43:	e8 b7 00 00 00       	call   f0103aff <pf_add_env_page>
f0103a48:	83 c4 10             	add    $0x10,%esp
f0103a4b:	e9 ad 00 00 00       	jmp    f0103afd <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103a50:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103a57:	76 19                	jbe    f0103a72 <pf_add_empty_env_page+0xa9>
f0103a59:	68 20 14 13 f0       	push   $0xf0131420
f0103a5e:	68 46 14 13 f0       	push   $0xf0131446
f0103a63:	68 d1 00 00 00       	push   $0xd1
f0103a68:	68 8d 13 13 f0       	push   $0xf013138d
f0103a6d:	e8 3e c7 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103a72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a75:	05 a8 00 00 00       	add    $0xa8,%eax
f0103a7a:	83 ec 08             	sub    $0x8,%esp
f0103a7d:	50                   	push   %eax
f0103a7e:	ff 75 08             	pushl  0x8(%ebp)
f0103a81:	e8 86 06 00 00       	call   f010410c <get_disk_page_directory>
f0103a86:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103a92:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103a95:	52                   	push   %edx
f0103a96:	6a 01                	push   $0x1
f0103a98:	ff 75 0c             	pushl  0xc(%ebp)
f0103a9b:	50                   	push   %eax
f0103a9c:	e8 ff fd ff ff       	call   f01038a0 <get_disk_page_table>
f0103aa1:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103aa7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aaa:	c1 ea 0c             	shr    $0xc,%edx
f0103aad:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ab3:	c1 e2 02             	shl    $0x2,%edx
f0103ab6:	01 d0                	add    %edx,%eax
f0103ab8:	8b 00                	mov    (%eax),%eax
f0103aba:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103abd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ac0:	85 c0                	test   %eax,%eax
f0103ac2:	75 34                	jne    f0103af8 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ac4:	83 ec 0c             	sub    $0xc,%esp
f0103ac7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103aca:	50                   	push   %eax
f0103acb:	e8 f8 fb ff ff       	call   f01036c8 <allocate_disk_frame>
f0103ad0:	83 c4 10             	add    $0x10,%esp
f0103ad3:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ad6:	75 07                	jne    f0103adf <pf_add_empty_env_page+0x116>
f0103ad8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103add:	eb 1e                	jmp    f0103afd <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103adf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ae2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ae5:	c1 ea 0c             	shr    $0xc,%edx
f0103ae8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aee:	c1 e2 02             	shl    $0x2,%edx
f0103af1:	01 c2                	add    %eax,%edx
f0103af3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103af6:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103af8:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103afd:	c9                   	leave  
f0103afe:	c3                   	ret    

f0103aff <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103aff:	55                   	push   %ebp
f0103b00:	89 e5                	mov    %esp,%ebp
f0103b02:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103b05:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103b0c:	76 19                	jbe    f0103b27 <pf_add_env_page+0x28>
f0103b0e:	68 20 14 13 f0       	push   $0xf0131420
f0103b13:	68 46 14 13 f0       	push   $0xf0131446
f0103b18:	68 e6 00 00 00       	push   $0xe6
f0103b1d:	68 8d 13 13 f0       	push   $0xf013138d
f0103b22:	e8 89 c6 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103b27:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2a:	05 a8 00 00 00       	add    $0xa8,%eax
f0103b2f:	83 ec 08             	sub    $0x8,%esp
f0103b32:	50                   	push   %eax
f0103b33:	ff 75 08             	pushl  0x8(%ebp)
f0103b36:	e8 d1 05 00 00       	call   f010410c <get_disk_page_directory>
f0103b3b:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b41:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103b47:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b4a:	52                   	push   %edx
f0103b4b:	6a 01                	push   $0x1
f0103b4d:	ff 75 0c             	pushl  0xc(%ebp)
f0103b50:	50                   	push   %eax
f0103b51:	e8 4a fd ff ff       	call   f01038a0 <get_disk_page_table>
f0103b56:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b5f:	c1 ea 0c             	shr    $0xc,%edx
f0103b62:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b68:	c1 e2 02             	shl    $0x2,%edx
f0103b6b:	01 d0                	add    %edx,%eax
f0103b6d:	8b 00                	mov    (%eax),%eax
f0103b6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103b72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103b75:	85 c0                	test   %eax,%eax
f0103b77:	75 34                	jne    f0103bad <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103b79:	83 ec 0c             	sub    $0xc,%esp
f0103b7c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103b7f:	50                   	push   %eax
f0103b80:	e8 43 fb ff ff       	call   f01036c8 <allocate_disk_frame>
f0103b85:	83 c4 10             	add    $0x10,%esp
f0103b88:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103b8b:	75 07                	jne    f0103b94 <pf_add_env_page+0x95>
f0103b8d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103b92:	eb 31                	jmp    f0103bc5 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103b94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b9a:	c1 ea 0c             	shr    $0xc,%edx
f0103b9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ba3:	c1 e2 02             	shl    $0x2,%edx
f0103ba6:	01 c2                	add    %eax,%edx
f0103ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103bab:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103bad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103bb0:	83 ec 08             	sub    $0x8,%esp
f0103bb3:	ff 75 10             	pushl  0x10(%ebp)
f0103bb6:	50                   	push   %eax
f0103bb7:	e8 23 f9 ff ff       	call   f01034df <write_disk_page>
f0103bbc:	83 c4 10             	add    $0x10,%esp
f0103bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103bc5:	c9                   	leave  
f0103bc6:	c3                   	ret    

f0103bc7 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103bc7:	55                   	push   %ebp
f0103bc8:	89 e5                	mov    %esp,%ebp
f0103bca:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103bcd:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103bd4:	76 19                	jbe    f0103bef <pf_update_env_page+0x28>
f0103bd6:	68 20 14 13 f0       	push   $0xf0131420
f0103bdb:	68 46 14 13 f0       	push   $0xf0131446
f0103be0:	68 08 01 00 00       	push   $0x108
f0103be5:	68 8d 13 13 f0       	push   $0xf013138d
f0103bea:	e8 c1 c5 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	05 a8 00 00 00       	add    $0xa8,%eax
f0103bf7:	83 ec 08             	sub    $0x8,%esp
f0103bfa:	50                   	push   %eax
f0103bfb:	ff 75 08             	pushl  0x8(%ebp)
f0103bfe:	e8 09 05 00 00       	call   f010410c <get_disk_page_directory>
f0103c03:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103c06:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c09:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103c0f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103c12:	52                   	push   %edx
f0103c13:	6a 00                	push   $0x0
f0103c15:	ff 75 0c             	pushl  0xc(%ebp)
f0103c18:	50                   	push   %eax
f0103c19:	e8 82 fc ff ff       	call   f01038a0 <get_disk_page_table>
f0103c1e:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103c21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c24:	85 c0                	test   %eax,%eax
f0103c26:	74 29                	je     f0103c51 <pf_update_env_page+0x8a>
f0103c28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c2b:	85 c0                	test   %eax,%eax
f0103c2d:	0f 84 46 01 00 00    	je     f0103d79 <pf_update_env_page+0x1b2>
f0103c33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c36:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103c39:	c1 ea 0c             	shr    $0xc,%edx
f0103c3c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103c42:	c1 e2 02             	shl    $0x2,%edx
f0103c45:	01 d0                	add    %edx,%eax
f0103c47:	8b 00                	mov    (%eax),%eax
f0103c49:	85 c0                	test   %eax,%eax
f0103c4b:	0f 85 28 01 00 00    	jne    f0103d79 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f0103c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c5a:	85 c0                	test   %eax,%eax
f0103c5c:	79 09                	jns    f0103c67 <pf_update_env_page+0xa0>
f0103c5e:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103c65:	76 38                	jbe    f0103c9f <pf_update_env_page+0xd8>
f0103c67:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103c6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c71:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0103c81:	f7 75 f0             	divl   -0x10(%ebp)
f0103c84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c87:	29 d0                	sub    %edx,%eax
f0103c89:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103c8c:	0f 87 d0 00 00 00    	ja     f0103d62 <pf_update_env_page+0x19b>
f0103c92:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103c99:	0f 87 c3 00 00 00    	ja     f0103d62 <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f0103c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0103ca8:	83 ec 04             	sub    $0x4,%esp
f0103cab:	8d 55 d0             	lea    -0x30(%ebp),%edx
f0103cae:	52                   	push   %edx
f0103caf:	ff 75 0c             	pushl  0xc(%ebp)
f0103cb2:	50                   	push   %eax
f0103cb3:	e8 fb 36 00 00       	call   f01073b3 <get_frame_info>
f0103cb8:	83 c4 10             	add    $0x10,%esp
f0103cbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f0103cbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103cc1:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103cc4:	75 52                	jne    f0103d18 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc9:	83 ec 04             	sub    $0x4,%esp
f0103ccc:	50                   	push   %eax
f0103ccd:	ff 75 f4             	pushl  -0xc(%ebp)
f0103cd0:	ff 75 08             	pushl  0x8(%ebp)
f0103cd3:	e8 27 fe ff ff       	call   f0103aff <pf_add_env_page>
f0103cd8:	83 c4 10             	add    $0x10,%esp
f0103cdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103cde:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103ce2:	75 17                	jne    f0103cfb <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103ce4:	83 ec 04             	sub    $0x4,%esp
f0103ce7:	68 5c 14 13 f0       	push   $0xf013145c
f0103cec:	68 1d 01 00 00       	push   $0x11d
f0103cf1:	68 8d 13 13 f0       	push   $0xf013138d
f0103cf6:	e8 b5 c4 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103cfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cfe:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103d04:	8d 50 01             	lea    0x1(%eax),%edx
f0103d07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d0a:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f0103d10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d13:	e9 02 01 00 00       	jmp    f0103e1a <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103d18:	83 ec 04             	sub    $0x4,%esp
f0103d1b:	6a 00                	push   $0x0
f0103d1d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103d20:	ff 75 08             	pushl  0x8(%ebp)
f0103d23:	e8 a1 fc ff ff       	call   f01039c9 <pf_add_empty_env_page>
f0103d28:	83 c4 10             	add    $0x10,%esp
f0103d2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103d2e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103d32:	75 17                	jne    f0103d4b <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103d34:	83 ec 04             	sub    $0x4,%esp
f0103d37:	68 88 14 13 f0       	push   $0xf0131488
f0103d3c:	68 28 01 00 00       	push   $0x128
f0103d41:	68 8d 13 13 f0       	push   $0xf013138d
f0103d46:	e8 65 c4 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d4e:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103d54:	8d 50 01             	lea    0x1(%eax),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103d60:	eb 17                	jmp    f0103d79 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103d62:	83 ec 04             	sub    $0x4,%esp
f0103d65:	68 d4 14 13 f0       	push   $0xf01314d4
f0103d6a:	68 2f 01 00 00       	push   $0x12f
f0103d6f:	68 8d 13 13 f0       	push   $0xf013138d
f0103d74:	e8 37 c4 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103d79:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103d82:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103d85:	52                   	push   %edx
f0103d86:	6a 00                	push   $0x0
f0103d88:	ff 75 0c             	pushl  0xc(%ebp)
f0103d8b:	50                   	push   %eax
f0103d8c:	e8 0f fb ff ff       	call   f01038a0 <get_disk_page_table>
f0103d91:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103d94:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103d97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d9a:	c1 ea 0c             	shr    $0xc,%edx
f0103d9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103da3:	c1 e2 02             	shl    $0x2,%edx
f0103da6:	01 d0                	add    %edx,%eax
f0103da8:	8b 00                	mov    (%eax),%eax
f0103daa:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0103dad:	83 ec 0c             	sub    $0xc,%esp
f0103db0:	ff 75 10             	pushl  0x10(%ebp)
f0103db3:	e8 93 f6 ff ff       	call   f010344b <to_physical_address>
f0103db8:	83 c4 10             	add    $0x10,%esp
f0103dbb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103dbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103dc1:	c1 e8 0c             	shr    $0xc,%eax
f0103dc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0103dc7:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103dcc:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f0103dcf:	72 17                	jb     f0103de8 <pf_update_env_page+0x221>
f0103dd1:	ff 75 dc             	pushl  -0x24(%ebp)
f0103dd4:	68 f0 13 13 f0       	push   $0xf01313f0
f0103dd9:	68 47 01 00 00       	push   $0x147
f0103dde:	68 8d 13 13 f0       	push   $0xf013138d
f0103de3:	e8 c8 c3 ff ff       	call   f01001b0 <_panic>
f0103de8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103deb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103df0:	83 ec 08             	sub    $0x8,%esp
f0103df3:	50                   	push   %eax
f0103df4:	ff 75 e0             	pushl  -0x20(%ebp)
f0103df7:	e8 e3 f6 ff ff       	call   f01034df <write_disk_page>
f0103dfc:	83 c4 10             	add    $0x10,%esp
f0103dff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e05:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f0103e0b:	8d 50 01             	lea    0x1(%eax),%edx
f0103e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e11:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f0103e17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103e1a:	c9                   	leave  
f0103e1b:	c3                   	ret    

f0103e1c <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103e1c:	55                   	push   %ebp
f0103e1d:	89 e5                	mov    %esp,%ebp
f0103e1f:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e30:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e33:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e36:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e3c:	85 c0                	test   %eax,%eax
f0103e3e:	75 0a                	jne    f0103e4a <pf_read_env_page+0x2e>
f0103e40:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e45:	e9 96 00 00 00       	jmp    f0103ee0 <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103e4a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e50:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e56:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103e59:	51                   	push   %ecx
f0103e5a:	6a 00                	push   $0x0
f0103e5c:	52                   	push   %edx
f0103e5d:	50                   	push   %eax
f0103e5e:	e8 3d fa ff ff       	call   f01038a0 <get_disk_page_table>
f0103e63:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e69:	85 c0                	test   %eax,%eax
f0103e6b:	75 07                	jne    f0103e74 <pf_read_env_page+0x58>
f0103e6d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e72:	eb 6c                	jmp    f0103ee0 <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e77:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e7a:	c1 ea 0c             	shr    $0xc,%edx
f0103e7d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 d0                	add    %edx,%eax
f0103e88:	8b 00                	mov    (%eax),%eax
f0103e8a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103e91:	75 07                	jne    f0103e9a <pf_read_env_page+0x7e>
f0103e93:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e98:	eb 46                	jmp    f0103ee0 <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103e9a:	83 ec 08             	sub    $0x8,%esp
f0103e9d:	ff 75 0c             	pushl  0xc(%ebp)
f0103ea0:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ea3:	e8 08 f6 ff ff       	call   f01034b0 <read_disk_page>
f0103ea8:	83 c4 10             	add    $0x10,%esp
f0103eab:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0103eba:	6a 40                	push   $0x40
f0103ebc:	6a 00                	push   $0x0
f0103ebe:	52                   	push   %edx
f0103ebf:	50                   	push   %eax
f0103ec0:	e8 8e 3d 00 00       	call   f0107c53 <pt_set_page_permissions>
f0103ec5:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103ec8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecb:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f0103ed1:	8d 50 01             	lea    0x1(%eax),%edx
f0103ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ed7:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f0103edd:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103ee0:	c9                   	leave  
f0103ee1:	c3                   	ret    

f0103ee2 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103ee2:	55                   	push   %ebp
f0103ee3:	89 e5                	mov    %esp,%ebp
f0103ee5:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103ee8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eeb:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103ef1:	85 c0                	test   %eax,%eax
f0103ef3:	74 65                	je     f0103f5a <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef8:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103efe:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f01:	52                   	push   %edx
f0103f02:	6a 00                	push   $0x0
f0103f04:	ff 75 0c             	pushl  0xc(%ebp)
f0103f07:	50                   	push   %eax
f0103f08:	e8 93 f9 ff ff       	call   f01038a0 <get_disk_page_table>
f0103f0d:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103f10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f13:	85 c0                	test   %eax,%eax
f0103f15:	74 46                	je     f0103f5d <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f1d:	c1 ea 0c             	shr    $0xc,%edx
f0103f20:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f26:	c1 e2 02             	shl    $0x2,%edx
f0103f29:	01 d0                	add    %edx,%eax
f0103f2b:	8b 00                	mov    (%eax),%eax
f0103f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f36:	c1 ea 0c             	shr    $0xc,%edx
f0103f39:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f3f:	c1 e2 02             	shl    $0x2,%edx
f0103f42:	01 d0                	add    %edx,%eax
f0103f44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f4a:	83 ec 0c             	sub    $0xc,%esp
f0103f4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f50:	e8 3a f8 ff ff       	call   f010378f <free_disk_frame>
f0103f55:	83 c4 10             	add    $0x10,%esp
f0103f58:	eb 04                	jmp    f0103f5e <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103f5a:	90                   	nop
f0103f5b:	eb 01                	jmp    f0103f5e <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103f5d:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f5e:	c9                   	leave  
f0103f5f:	c3                   	ret    

f0103f60 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103f60:	55                   	push   %ebp
f0103f61:	89 e5                	mov    %esp,%ebp
f0103f63:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f6d:	e9 f7 00 00 00       	jmp    f0104069 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f75:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f7e:	c1 e2 02             	shl    $0x2,%edx
f0103f81:	01 d0                	add    %edx,%eax
f0103f83:	8b 00                	mov    (%eax),%eax
f0103f85:	83 e0 01             	and    $0x1,%eax
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	0f 84 d5 00 00 00    	je     f0104065 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f93:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f9c:	c1 e2 02             	shl    $0x2,%edx
f0103f9f:	01 d0                	add    %edx,%eax
f0103fa1:	8b 00                	mov    (%eax),%eax
f0103fa3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103fa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103fab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fae:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103fb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103fb4:	c1 e8 0c             	shr    $0xc,%eax
f0103fb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103fba:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103fbf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103fc2:	72 17                	jb     f0103fdb <pf_free_env+0x7b>
f0103fc4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103fc7:	68 f0 13 13 f0       	push   $0xf01313f0
f0103fcc:	68 a7 01 00 00       	push   $0x1a7
f0103fd1:	68 8d 13 13 f0       	push   $0xf013138d
f0103fd6:	e8 d5 c1 ff ff       	call   f01001b0 <_panic>
f0103fdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103fde:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fe3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103fe6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103fed:	eb 3a                	jmp    f0104029 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103fef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ff2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ff9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103ffc:	01 d0                	add    %edx,%eax
f0103ffe:	8b 00                	mov    (%eax),%eax
f0104000:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f0104003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104006:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010400d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104010:	01 d0                	add    %edx,%eax
f0104012:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0104018:	83 ec 0c             	sub    $0xc,%esp
f010401b:	ff 75 dc             	pushl  -0x24(%ebp)
f010401e:	e8 6c f7 ff ff       	call   f010378f <free_disk_frame>
f0104023:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104026:	ff 45 f0             	incl   -0x10(%ebp)
f0104029:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0104030:	76 bd                	jbe    f0103fef <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0104032:	8b 45 08             	mov    0x8(%ebp),%eax
f0104035:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010403b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010403e:	c1 e2 02             	shl    $0x2,%edx
f0104041:	01 d0                	add    %edx,%eax
f0104043:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104049:	83 ec 0c             	sub    $0xc,%esp
f010404c:	ff 75 ec             	pushl  -0x14(%ebp)
f010404f:	e8 0a f4 ff ff       	call   f010345e <to_frame_info>
f0104054:	83 c4 10             	add    $0x10,%esp
f0104057:	83 ec 0c             	sub    $0xc,%esp
f010405a:	50                   	push   %eax
f010405b:	e8 8b 30 00 00       	call   f01070eb <decrement_references>
f0104060:	83 c4 10             	add    $0x10,%esp
f0104063:	eb 01                	jmp    f0104066 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104065:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104066:	ff 45 f4             	incl   -0xc(%ebp)
f0104069:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104070:	0f 86 fc fe ff ff    	jbe    f0103f72 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104076:	8b 45 08             	mov    0x8(%ebp),%eax
f0104079:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010407f:	83 ec 0c             	sub    $0xc,%esp
f0104082:	50                   	push   %eax
f0104083:	e8 d6 f3 ff ff       	call   f010345e <to_frame_info>
f0104088:	83 c4 10             	add    $0x10,%esp
f010408b:	83 ec 0c             	sub    $0xc,%esp
f010408e:	50                   	push   %eax
f010408f:	e8 57 30 00 00       	call   f01070eb <decrement_references>
f0104094:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104097:	8b 45 08             	mov    0x8(%ebp),%eax
f010409a:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f01040a1:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f01040a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01040a7:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f01040ae:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f01040b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01040b4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01040ba:	85 c0                	test   %eax,%eax
f01040bc:	74 4b                	je     f0104109 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f01040be:	83 ec 0c             	sub    $0xc,%esp
f01040c1:	ff 75 08             	pushl  0x8(%ebp)
f01040c4:	e8 17 04 00 00       	call   f01044e0 <__pf_remove_env_all_tables>
f01040c9:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f01040cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01040cf:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01040d5:	83 ec 0c             	sub    $0xc,%esp
f01040d8:	50                   	push   %eax
f01040d9:	e8 80 f3 ff ff       	call   f010345e <to_frame_info>
f01040de:	83 c4 10             	add    $0x10,%esp
f01040e1:	83 ec 0c             	sub    $0xc,%esp
f01040e4:	50                   	push   %eax
f01040e5:	e8 01 30 00 00       	call   f01070eb <decrement_references>
f01040ea:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01040ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01040f0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01040f7:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01040fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fd:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0104104:	00 00 00 
f0104107:	eb 01                	jmp    f010410a <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0104109:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010410a:	c9                   	leave  
f010410b:	c3                   	ret    

f010410c <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010410c:	55                   	push   %ebp
f010410d:	89 e5                	mov    %esp,%ebp
f010410f:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0104112:	8b 45 08             	mov    0x8(%ebp),%eax
f0104115:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f010411b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010411e:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0104120:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104123:	8b 00                	mov    (%eax),%eax
f0104125:	85 c0                	test   %eax,%eax
f0104127:	0f 85 ad 00 00 00    	jne    f01041da <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f010412d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104134:	83 ec 0c             	sub    $0xc,%esp
f0104137:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010413a:	50                   	push   %eax
f010413b:	e8 19 2e 00 00       	call   f0106f59 <allocate_frame>
f0104140:	83 c4 10             	add    $0x10,%esp
f0104143:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010414a:	79 08                	jns    f0104154 <get_disk_page_directory+0x48>
				return r;
f010414c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010414f:	e9 8b 00 00 00       	jmp    f01041df <get_disk_page_directory+0xd3>
			p->references = 1;
f0104154:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104157:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010415d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104160:	83 ec 0c             	sub    $0xc,%esp
f0104163:	50                   	push   %eax
f0104164:	e8 e2 f2 ff ff       	call   f010344b <to_physical_address>
f0104169:	83 c4 10             	add    $0x10,%esp
f010416c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010416f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104172:	c1 e8 0c             	shr    $0xc,%eax
f0104175:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104178:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010417d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104180:	72 17                	jb     f0104199 <get_disk_page_directory+0x8d>
f0104182:	ff 75 f0             	pushl  -0x10(%ebp)
f0104185:	68 f0 13 13 f0       	push   $0xf01313f0
f010418a:	68 ff 01 00 00       	push   $0x1ff
f010418f:	68 8d 13 13 f0       	push   $0xf013138d
f0104194:	e8 17 c0 ff ff       	call   f01001b0 <_panic>
f0104199:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010419c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041a1:	89 c2                	mov    %eax,%edx
f01041a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041a6:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f01041a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01041ab:	83 ec 0c             	sub    $0xc,%esp
f01041ae:	50                   	push   %eax
f01041af:	e8 97 f2 ff ff       	call   f010344b <to_physical_address>
f01041b4:	83 c4 10             	add    $0x10,%esp
f01041b7:	89 c2                	mov    %eax,%edx
f01041b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041bc:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f01041c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041c5:	8b 00                	mov    (%eax),%eax
f01041c7:	83 ec 04             	sub    $0x4,%esp
f01041ca:	68 00 10 00 00       	push   $0x1000
f01041cf:	6a 00                	push   $0x0
f01041d1:	50                   	push   %eax
f01041d2:	e8 59 aa 02 00       	call   f012ec30 <memset>
f01041d7:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01041da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01041df:	c9                   	leave  
f01041e0:	c3                   	ret    

f01041e1 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01041e1:	55                   	push   %ebp
f01041e2:	89 e5                	mov    %esp,%ebp
f01041e4:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01041e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01041ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01041f5:	e9 ac 00 00 00       	jmp    f01042a6 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01041fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01041fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104203:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104206:	c1 e2 02             	shl    $0x2,%edx
f0104209:	01 d0                	add    %edx,%eax
f010420b:	8b 00                	mov    (%eax),%eax
f010420d:	83 e0 01             	and    $0x1,%eax
f0104210:	85 c0                	test   %eax,%eax
f0104212:	0f 84 8a 00 00 00    	je     f01042a2 <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0104218:	8b 45 08             	mov    0x8(%ebp),%eax
f010421b:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104224:	c1 e2 02             	shl    $0x2,%edx
f0104227:	01 d0                	add    %edx,%eax
f0104229:	8b 00                	mov    (%eax),%eax
f010422b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104230:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104236:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104239:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010423c:	c1 e8 0c             	shr    $0xc,%eax
f010423f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104242:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0104247:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010424a:	72 17                	jb     f0104263 <pf_calculate_allocated_pages+0x82>
f010424c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010424f:	68 f0 13 13 f0       	push   $0xf01313f0
f0104254:	68 1f 02 00 00       	push   $0x21f
f0104259:	68 8d 13 13 f0       	push   $0xf013138d
f010425e:	e8 4d bf ff ff       	call   f01001b0 <_panic>
f0104263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104266:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010426b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010426e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104275:	eb 20                	jmp    f0104297 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104277:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010427a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104281:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f010428b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010428f:	74 03                	je     f0104294 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f0104291:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104294:	ff 45 ec             	incl   -0x14(%ebp)
f0104297:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010429e:	76 d7                	jbe    f0104277 <pf_calculate_allocated_pages+0x96>
f01042a0:	eb 01                	jmp    f01042a3 <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f01042a2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01042a3:	ff 45 f4             	incl   -0xc(%ebp)
f01042a6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01042ad:	0f 86 47 ff ff ff    	jbe    f01041fa <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f01042b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01042b6:	c9                   	leave  
f01042b7:	c3                   	ret    

f01042b8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f01042b8:	55                   	push   %ebp
f01042b9:	89 e5                	mov    %esp,%ebp
f01042bb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f01042be:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01042c5:	a1 44 a3 2d f0       	mov    0xf02da344,%eax
f01042ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01042cd:	eb 0b                	jmp    f01042da <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f01042cf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01042d2:	a1 4c a3 2d f0       	mov    0xf02da34c,%eax
f01042d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01042da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01042de:	74 07                	je     f01042e7 <pf_calculate_free_frames+0x2f>
f01042e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01042e3:	8b 00                	mov    (%eax),%eax
f01042e5:	eb 05                	jmp    f01042ec <pf_calculate_free_frames+0x34>
f01042e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01042ec:	a3 4c a3 2d f0       	mov    %eax,0xf02da34c
f01042f1:	a1 4c a3 2d f0       	mov    0xf02da34c,%eax
f01042f6:	85 c0                	test   %eax,%eax
f01042f8:	75 d5                	jne    f01042cf <pf_calculate_free_frames+0x17>
f01042fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01042fe:	75 cf                	jne    f01042cf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0104300:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104303:	c9                   	leave  
f0104304:	c3                   	ret    

f0104305 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104305:	55                   	push   %ebp
f0104306:	89 e5                	mov    %esp,%ebp
f0104308:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010430b:	8b 45 08             	mov    0x8(%ebp),%eax
f010430e:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f0104314:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104317:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104319:	8b 45 0c             	mov    0xc(%ebp),%eax
f010431c:	8b 00                	mov    (%eax),%eax
f010431e:	85 c0                	test   %eax,%eax
f0104320:	0f 85 ad 00 00 00    	jne    f01043d3 <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104326:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010432d:	83 ec 0c             	sub    $0xc,%esp
f0104330:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104333:	50                   	push   %eax
f0104334:	e8 20 2c 00 00       	call   f0106f59 <allocate_frame>
f0104339:	83 c4 10             	add    $0x10,%esp
f010433c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010433f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104343:	79 08                	jns    f010434d <get_disk_table_directory+0x48>
				return r;
f0104345:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104348:	e9 8b 00 00 00       	jmp    f01043d8 <get_disk_table_directory+0xd3>
			p->references = 1;
f010434d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104350:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104356:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104359:	83 ec 0c             	sub    $0xc,%esp
f010435c:	50                   	push   %eax
f010435d:	e8 e9 f0 ff ff       	call   f010344b <to_physical_address>
f0104362:	83 c4 10             	add    $0x10,%esp
f0104365:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010436b:	c1 e8 0c             	shr    $0xc,%eax
f010436e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104371:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0104376:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104379:	72 17                	jb     f0104392 <get_disk_table_directory+0x8d>
f010437b:	ff 75 f0             	pushl  -0x10(%ebp)
f010437e:	68 f0 13 13 f0       	push   $0xf01313f0
f0104383:	68 5d 02 00 00       	push   $0x25d
f0104388:	68 8d 13 13 f0       	push   $0xf013138d
f010438d:	e8 1e be ff ff       	call   f01001b0 <_panic>
f0104392:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104395:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010439a:	89 c2                	mov    %eax,%edx
f010439c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010439f:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f01043a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043a4:	83 ec 0c             	sub    $0xc,%esp
f01043a7:	50                   	push   %eax
f01043a8:	e8 9e f0 ff ff       	call   f010344b <to_physical_address>
f01043ad:	83 c4 10             	add    $0x10,%esp
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043b5:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f01043bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043be:	8b 00                	mov    (%eax),%eax
f01043c0:	83 ec 04             	sub    $0x4,%esp
f01043c3:	68 00 10 00 00       	push   $0x1000
f01043c8:	6a 00                	push   $0x0
f01043ca:	50                   	push   %eax
f01043cb:	e8 60 a8 02 00       	call   f012ec30 <memset>
f01043d0:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01043d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01043d8:	c9                   	leave  
f01043d9:	c3                   	ret    

f01043da <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01043da:	55                   	push   %ebp
f01043db:	89 e5                	mov    %esp,%ebp
f01043dd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01043e0:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01043e7:	76 19                	jbe    f0104402 <__pf_write_env_table+0x28>
f01043e9:	68 20 14 13 f0       	push   $0xf0131420
f01043ee:	68 46 14 13 f0       	push   $0xf0131446
f01043f3:	68 6b 02 00 00       	push   $0x26b
f01043f8:	68 8d 13 13 f0       	push   $0xf013138d
f01043fd:	e8 ae bd ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	05 b0 00 00 00       	add    $0xb0,%eax
f010440a:	83 ec 08             	sub    $0x8,%esp
f010440d:	50                   	push   %eax
f010440e:	ff 75 08             	pushl  0x8(%ebp)
f0104411:	e8 ef fe ff ff       	call   f0104305 <get_disk_table_directory>
f0104416:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104419:	8b 45 08             	mov    0x8(%ebp),%eax
f010441c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104422:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104425:	c1 ea 16             	shr    $0x16,%edx
f0104428:	c1 e2 02             	shl    $0x2,%edx
f010442b:	01 d0                	add    %edx,%eax
f010442d:	8b 00                	mov    (%eax),%eax
f010442f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104432:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104435:	85 c0                	test   %eax,%eax
f0104437:	75 34                	jne    f010446d <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104439:	83 ec 0c             	sub    $0xc,%esp
f010443c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010443f:	50                   	push   %eax
f0104440:	e8 83 f2 ff ff       	call   f01036c8 <allocate_disk_frame>
f0104445:	83 c4 10             	add    $0x10,%esp
f0104448:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010444b:	75 07                	jne    f0104454 <__pf_write_env_table+0x7a>
f010444d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104452:	eb 31                	jmp    f0104485 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104454:	8b 45 08             	mov    0x8(%ebp),%eax
f0104457:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010445d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104460:	c1 ea 16             	shr    $0x16,%edx
f0104463:	c1 e2 02             	shl    $0x2,%edx
f0104466:	01 c2                	add    %eax,%edx
f0104468:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010446b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010446d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104470:	83 ec 08             	sub    $0x8,%esp
f0104473:	ff 75 10             	pushl  0x10(%ebp)
f0104476:	50                   	push   %eax
f0104477:	e8 63 f0 ff ff       	call   f01034df <write_disk_page>
f010447c:	83 c4 10             	add    $0x10,%esp
f010447f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0104482:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104485:	c9                   	leave  
f0104486:	c3                   	ret    

f0104487 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104487:	55                   	push   %ebp
f0104488:	89 e5                	mov    %esp,%ebp
f010448a:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010448d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104490:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104496:	85 c0                	test   %eax,%eax
f0104498:	75 07                	jne    f01044a1 <__pf_read_env_table+0x1a>
f010449a:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010449f:	eb 3d                	jmp    f01044de <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01044a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01044aa:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ad:	c1 ea 16             	shr    $0x16,%edx
f01044b0:	c1 e2 02             	shl    $0x2,%edx
f01044b3:	01 d0                	add    %edx,%eax
f01044b5:	8b 00                	mov    (%eax),%eax
f01044b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01044ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044be:	75 07                	jne    f01044c7 <__pf_read_env_table+0x40>
f01044c0:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01044c5:	eb 17                	jmp    f01044de <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f01044c7:	83 ec 08             	sub    $0x8,%esp
f01044ca:	ff 75 10             	pushl  0x10(%ebp)
f01044cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01044d0:	e8 db ef ff ff       	call   f01034b0 <read_disk_page>
f01044d5:	83 c4 10             	add    $0x10,%esp
f01044d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01044db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01044de:	c9                   	leave  
f01044df:	c3                   	ret    

f01044e0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01044e0:	55                   	push   %ebp
f01044e1:	89 e5                	mov    %esp,%ebp
f01044e3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01044e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e9:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01044ef:	85 c0                	test   %eax,%eax
f01044f1:	74 52                	je     f0104545 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01044f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01044fa:	eb 3e                	jmp    f010453a <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01044fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01044ff:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104505:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104508:	c1 e2 02             	shl    $0x2,%edx
f010450b:	01 d0                	add    %edx,%eax
f010450d:	8b 00                	mov    (%eax),%eax
f010450f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104512:	8b 45 08             	mov    0x8(%ebp),%eax
f0104515:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010451b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010451e:	c1 e2 02             	shl    $0x2,%edx
f0104521:	01 d0                	add    %edx,%eax
f0104523:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104529:	83 ec 0c             	sub    $0xc,%esp
f010452c:	ff 75 f0             	pushl  -0x10(%ebp)
f010452f:	e8 5b f2 ff ff       	call   f010378f <free_disk_frame>
f0104534:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104537:	ff 45 f4             	incl   -0xc(%ebp)
f010453a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104541:	76 b9                	jbe    f01044fc <__pf_remove_env_all_tables+0x1c>
f0104543:	eb 01                	jmp    f0104546 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104545:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104546:	c9                   	leave  
f0104547:	c3                   	ret    

f0104548 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104548:	55                   	push   %ebp
f0104549:	89 e5                	mov    %esp,%ebp
f010454b:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010454e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104552:	75 10                	jne    f0104564 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104554:	83 ec 0c             	sub    $0xc,%esp
f0104557:	68 50 15 13 f0       	push   $0xf0131550
f010455c:	e8 d0 c8 ff ff       	call   f0100e31 <cprintf>
f0104561:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104564:	8b 45 08             	mov    0x8(%ebp),%eax
f0104567:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010456d:	85 c0                	test   %eax,%eax
f010456f:	74 43                	je     f01045b4 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104571:	8b 45 08             	mov    0x8(%ebp),%eax
f0104574:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010457a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010457d:	c1 ea 16             	shr    $0x16,%edx
f0104580:	c1 e2 02             	shl    $0x2,%edx
f0104583:	01 d0                	add    %edx,%eax
f0104585:	8b 00                	mov    (%eax),%eax
f0104587:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010458a:	8b 45 08             	mov    0x8(%ebp),%eax
f010458d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104596:	c1 ea 16             	shr    $0x16,%edx
f0104599:	c1 e2 02             	shl    $0x2,%edx
f010459c:	01 d0                	add    %edx,%eax
f010459e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01045a4:	83 ec 0c             	sub    $0xc,%esp
f01045a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01045aa:	e8 e0 f1 ff ff       	call   f010378f <free_disk_frame>
f01045af:	83 c4 10             	add    $0x10,%esp
f01045b2:	eb 01                	jmp    f01045b5 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f01045b4:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f01045b5:	c9                   	leave  
f01045b6:	c3                   	ret    

f01045b7 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f01045b7:	55                   	push   %ebp
f01045b8:	89 e5                	mov    %esp,%ebp
f01045ba:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f01045bd:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f01045c4:	eb 1f                	jmp    f01045e5 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f01045c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c9:	83 ec 04             	sub    $0x4,%esp
f01045cc:	6a 08                	push   $0x8
f01045ce:	ff 75 08             	pushl  0x8(%ebp)
f01045d1:	50                   	push   %eax
f01045d2:	e8 4f ad 02 00       	call   f012f326 <ide_write>
f01045d7:	83 c4 10             	add    $0x10,%esp
f01045da:	85 c0                	test   %eax,%eax
f01045dc:	75 12                	jne    f01045f0 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01045de:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01045e5:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01045ec:	7e d8                	jle    f01045c6 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01045ee:	eb 01                	jmp    f01045f1 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01045f0:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01045f1:	90                   	nop
f01045f2:	c9                   	leave  
f01045f3:	c3                   	ret    

f01045f4 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01045f4:	55                   	push   %ebp
f01045f5:	89 e5                	mov    %esp,%ebp
f01045f7:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01045fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01045fd:	0f b6 c0             	movzbl %al,%eax
f0104600:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104607:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010460a:	8a 45 f6             	mov    -0xa(%ebp),%al
f010460d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104610:	ee                   	out    %al,(%dx)
f0104611:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104618:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010461b:	89 c2                	mov    %eax,%edx
f010461d:	ec                   	in     (%dx),%al
f010461e:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104621:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104624:	0f b6 c0             	movzbl %al,%eax
}
f0104627:	c9                   	leave  
f0104628:	c3                   	ret    

f0104629 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104629:	55                   	push   %ebp
f010462a:	89 e5                	mov    %esp,%ebp
f010462c:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010462f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104632:	0f b6 c0             	movzbl %al,%eax
f0104635:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010463c:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010463f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104642:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104645:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104646:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104649:	0f b6 c0             	movzbl %al,%eax
f010464c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104653:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104656:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104659:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010465c:	ee                   	out    %al,(%dx)
}
f010465d:	90                   	nop
f010465e:	c9                   	leave  
f010465f:	c3                   	ret    

f0104660 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104660:	55                   	push   %ebp
f0104661:	89 e5                	mov    %esp,%ebp
f0104663:	53                   	push   %ebx
f0104664:	83 ec 24             	sub    $0x24,%esp
f0104667:	8b 45 08             	mov    0x8(%ebp),%eax
f010466a:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010466d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104674:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104678:	8a 45 ef             	mov    -0x11(%ebp),%al
f010467b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010467e:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010467f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104683:	77 48                	ja     f01046cd <kclock_start+0x6d>
f0104685:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010468c:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104690:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104693:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104696:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104697:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010469b:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01046a0:	99                   	cltd   
f01046a1:	f7 fb                	idiv   %ebx
f01046a3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01046a9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01046ad:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01046b2:	99                   	cltd   
f01046b3:	f7 fb                	idiv   %ebx
f01046b5:	89 c3                	mov    %eax,%ebx
f01046b7:	89 c8                	mov    %ecx,%eax
f01046b9:	99                   	cltd   
f01046ba:	f7 fb                	idiv   %ebx
f01046bc:	0f b7 c0             	movzwl %ax,%eax
f01046bf:	83 ec 0c             	sub    $0xc,%esp
f01046c2:	50                   	push   %eax
f01046c3:	e8 dd 01 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f01046c8:	83 c4 10             	add    $0x10,%esp
f01046cb:	eb 13                	jmp    f01046e0 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01046cd:	6a 35                	push   $0x35
f01046cf:	68 74 15 13 f0       	push   $0xf0131574
f01046d4:	6a 33                	push   $0x33
f01046d6:	68 d0 15 13 f0       	push   $0xf01315d0
f01046db:	e8 d0 ba ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01046e0:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f01046e6:	0f b7 c0             	movzwl %ax,%eax
f01046e9:	25 fe ff 00 00       	and    $0xfffe,%eax
f01046ee:	83 ec 0c             	sub    $0xc,%esp
f01046f1:	50                   	push   %eax
f01046f2:	e8 3a 1c 00 00       	call   f0106331 <irq_setmask_8259A>
f01046f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01046fa:	90                   	nop
f01046fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01046fe:	c9                   	leave  
f01046ff:	c3                   	ret    

f0104700 <kclock_stop>:

void
kclock_stop(void)
{
f0104700:	55                   	push   %ebp
f0104701:	89 e5                	mov    %esp,%ebp
f0104703:	83 ec 18             	sub    $0x18,%esp
f0104706:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010470d:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104711:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104714:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104717:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104718:	83 ec 0c             	sub    $0xc,%esp
f010471b:	68 ff ff 00 00       	push   $0xffff
f0104720:	e8 0c 1c 00 00       	call   f0106331 <irq_setmask_8259A>
f0104725:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104728:	90                   	nop
f0104729:	c9                   	leave  
f010472a:	c3                   	ret    

f010472b <kclock_resume>:

void
kclock_resume(void)
{
f010472b:	55                   	push   %ebp
f010472c:	89 e5                	mov    %esp,%ebp
f010472e:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104731:	e8 b1 01 00 00       	call   f01048e7 <kclock_read_cnt0>
f0104736:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f010473a:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f010473f:	77 06                	ja     f0104747 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104741:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104747:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010474b:	83 e0 01             	and    $0x1,%eax
f010474e:	66 85 c0             	test   %ax,%ax
f0104751:	74 09                	je     f010475c <kclock_resume+0x31>
		cnt0++;
f0104753:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104757:	40                   	inc    %eax
f0104758:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010475c:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104763:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104767:	8a 45 ef             	mov    -0x11(%ebp),%al
f010476a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010476d:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010476e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104772:	83 ec 0c             	sub    $0xc,%esp
f0104775:	50                   	push   %eax
f0104776:	e8 2a 01 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f010477b:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010477e:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0104784:	0f b7 c0             	movzwl %ax,%eax
f0104787:	25 fe ff 00 00       	and    $0xfffe,%eax
f010478c:	83 ec 0c             	sub    $0xc,%esp
f010478f:	50                   	push   %eax
f0104790:	e8 9c 1b 00 00       	call   f0106331 <irq_setmask_8259A>
f0104795:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104798:	90                   	nop
f0104799:	c9                   	leave  
f010479a:	c3                   	ret    

f010479b <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010479b:	55                   	push   %ebp
f010479c:	89 e5                	mov    %esp,%ebp
f010479e:	83 ec 28             	sub    $0x28,%esp
f01047a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a4:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01047a7:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01047ae:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01047b2:	8a 45 f3             	mov    -0xd(%ebp),%al
f01047b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047b8:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01047b9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01047bd:	83 ec 0c             	sub    $0xc,%esp
f01047c0:	50                   	push   %eax
f01047c1:	e8 df 00 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f01047c6:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01047c9:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f01047cf:	0f b7 c0             	movzwl %ax,%eax
f01047d2:	25 fe ff 00 00       	and    $0xfffe,%eax
f01047d7:	83 ec 0c             	sub    $0xc,%esp
f01047da:	50                   	push   %eax
f01047db:	e8 51 1b 00 00       	call   f0106331 <irq_setmask_8259A>
f01047e0:	83 c4 10             	add    $0x10,%esp

}
f01047e3:	90                   	nop
f01047e4:	c9                   	leave  
f01047e5:	c3                   	ret    

f01047e6 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01047e6:	55                   	push   %ebp
f01047e7:	89 e5                	mov    %esp,%ebp
f01047e9:	56                   	push   %esi
f01047ea:	53                   	push   %ebx
f01047eb:	83 ec 20             	sub    $0x20,%esp
f01047ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01047f1:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01047f4:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01047f8:	0f 87 8a 00 00 00    	ja     f0104888 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f01047fe:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104802:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104807:	99                   	cltd   
f0104808:	f7 fe                	idiv   %esi
f010480a:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104810:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104814:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104819:	99                   	cltd   
f010481a:	f7 fb                	idiv   %ebx
f010481c:	89 c6                	mov    %eax,%esi
f010481e:	89 c8                	mov    %ecx,%eax
f0104820:	99                   	cltd   
f0104821:	f7 fe                	idiv   %esi
f0104823:	89 c3                	mov    %eax,%ebx
f0104825:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104829:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010482e:	99                   	cltd   
f010482f:	f7 f9                	idiv   %ecx
f0104831:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104837:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f010483b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104840:	99                   	cltd   
f0104841:	f7 fe                	idiv   %esi
f0104843:	89 c6                	mov    %eax,%esi
f0104845:	89 c8                	mov    %ecx,%eax
f0104847:	99                   	cltd   
f0104848:	f7 fe                	idiv   %esi
f010484a:	25 01 00 00 80       	and    $0x80000001,%eax
f010484f:	85 c0                	test   %eax,%eax
f0104851:	79 05                	jns    f0104858 <kclock_set_quantum+0x72>
f0104853:	48                   	dec    %eax
f0104854:	83 c8 fe             	or     $0xfffffffe,%eax
f0104857:	40                   	inc    %eax
f0104858:	01 d8                	add    %ebx,%eax
f010485a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010485d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104864:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104868:	8a 45 ef             	mov    -0x11(%ebp),%al
f010486b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010486e:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f010486f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104872:	0f b7 c0             	movzwl %ax,%eax
f0104875:	83 ec 0c             	sub    $0xc,%esp
f0104878:	50                   	push   %eax
f0104879:	e8 27 00 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f010487e:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104881:	e8 7a fe ff ff       	call   f0104700 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104886:	eb 16                	jmp    f010489e <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104888:	6a 35                	push   $0x35
f010488a:	68 74 15 13 f0       	push   $0xf0131574
f010488f:	68 cc 00 00 00       	push   $0xcc
f0104894:	68 d0 15 13 f0       	push   $0xf01315d0
f0104899:	e8 12 b9 ff ff       	call   f01001b0 <_panic>
	}
}
f010489e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01048a1:	5b                   	pop    %ebx
f01048a2:	5e                   	pop    %esi
f01048a3:	5d                   	pop    %ebp
f01048a4:	c3                   	ret    

f01048a5 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f01048a5:	55                   	push   %ebp
f01048a6:	89 e5                	mov    %esp,%ebp
f01048a8:	83 ec 14             	sub    $0x14,%esp
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f01048b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048b5:	0f b6 c0             	movzbl %al,%eax
f01048b8:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01048bf:	88 45 f6             	mov    %al,-0xa(%ebp)
f01048c2:	8a 45 f6             	mov    -0xa(%ebp),%al
f01048c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01048c8:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01048c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048cc:	66 c1 e8 08          	shr    $0x8,%ax
f01048d0:	0f b6 c0             	movzbl %al,%eax
f01048d3:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01048da:	88 45 f7             	mov    %al,-0x9(%ebp)
f01048dd:	8a 45 f7             	mov    -0x9(%ebp),%al
f01048e0:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01048e3:	ee                   	out    %al,(%dx)
}
f01048e4:	90                   	nop
f01048e5:	c9                   	leave  
f01048e6:	c3                   	ret    

f01048e7 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01048e7:	55                   	push   %ebp
f01048e8:	89 e5                	mov    %esp,%ebp
f01048ea:	83 ec 20             	sub    $0x20,%esp
f01048ed:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01048f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01048f7:	89 c2                	mov    %eax,%edx
f01048f9:	ec                   	in     (%dx),%al
f01048fa:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01048fd:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104900:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104903:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010490a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010490d:	89 c2                	mov    %eax,%edx
f010490f:	ec                   	in     (%dx),%al
f0104910:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104913:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104916:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104919:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010491d:	c1 e0 08             	shl    $0x8,%eax
f0104920:	89 c2                	mov    %eax,%edx
f0104922:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104926:	09 d0                	or     %edx,%eax
f0104928:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010492c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010492f:	c9                   	leave  
f0104930:	c3                   	ret    

f0104931 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104931:	55                   	push   %ebp
f0104932:	89 e5                	mov    %esp,%ebp
f0104934:	83 ec 30             	sub    $0x30,%esp
f0104937:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010493e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104941:	89 c2                	mov    %eax,%edx
f0104943:	ec                   	in     (%dx),%al
f0104944:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104947:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010494a:	88 45 ff             	mov    %al,-0x1(%ebp)
f010494d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104954:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104958:	8a 45 dc             	mov    -0x24(%ebp),%al
f010495b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495e:	ee                   	out    %al,(%dx)
f010495f:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104966:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104969:	89 c2                	mov    %eax,%edx
f010496b:	ec                   	in     (%dx),%al
f010496c:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010496f:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104972:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104975:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010497c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010497f:	89 c2                	mov    %eax,%edx
f0104981:	ec                   	in     (%dx),%al
f0104982:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104985:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104988:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010498b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010498f:	c1 e0 08             	shl    $0x8,%eax
f0104992:	89 c2                	mov    %eax,%edx
f0104994:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104998:	09 d0                	or     %edx,%eax
f010499a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010499e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01049a2:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f01049a9:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049ac:	8a 45 df             	mov    -0x21(%ebp),%al
f01049af:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01049b2:	ee                   	out    %al,(%dx)

	return cnt0 ;
f01049b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01049b6:	c9                   	leave  
f01049b7:	c3                   	ret    

f01049b8 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f01049b8:	55                   	push   %ebp
f01049b9:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01049bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bf:	74 1d                	je     f01049de <init_queue+0x26>
	{
		LIST_INIT(queue);
f01049c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01049ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01049cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01049d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01049d7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01049de:	90                   	nop
f01049df:	5d                   	pop    %ebp
f01049e0:	c3                   	ret    

f01049e1 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f01049e1:	55                   	push   %ebp
f01049e2:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	74 08                	je     f01049f2 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01049ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ed:	8b 40 0c             	mov    0xc(%eax),%eax
f01049f0:	eb 05                	jmp    f01049f7 <queue_size+0x16>
	}
	else
	{
		return 0;
f01049f2:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01049f7:	5d                   	pop    %ebp
f01049f8:	c3                   	ret    

f01049f9 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01049f9:	55                   	push   %ebp
f01049fa:	89 e5                	mov    %esp,%ebp
f01049fc:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01049ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a03:	75 16                	jne    f0104a1b <enqueue+0x22>
f0104a05:	68 e4 15 13 f0       	push   $0xf01315e4
f0104a0a:	68 f2 15 13 f0       	push   $0xf01315f2
f0104a0f:	6a 33                	push   $0x33
f0104a11:	68 07 16 13 f0       	push   $0xf0131607
f0104a16:	e8 95 b7 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104a1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104a1f:	74 66                	je     f0104a87 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104a21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104a25:	75 14                	jne    f0104a3b <enqueue+0x42>
f0104a27:	83 ec 04             	sub    $0x4,%esp
f0104a2a:	68 20 16 13 f0       	push   $0xf0131620
f0104a2f:	6a 36                	push   $0x36
f0104a31:	68 07 16 13 f0       	push   $0xf0131607
f0104a36:	e8 75 b7 ff ff       	call   f01001b0 <_panic>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 10                	mov    (%eax),%edx
f0104a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a43:	89 50 44             	mov    %edx,0x44(%eax)
f0104a46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a49:	8b 40 44             	mov    0x44(%eax),%eax
f0104a4c:	85 c0                	test   %eax,%eax
f0104a4e:	74 0d                	je     f0104a5d <enqueue+0x64>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 00                	mov    (%eax),%eax
f0104a55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a58:	89 50 48             	mov    %edx,0x48(%eax)
f0104a5b:	eb 09                	jmp    f0104a66 <enqueue+0x6d>
f0104a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a60:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a63:	89 50 04             	mov    %edx,0x4(%eax)
f0104a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a6c:	89 10                	mov    %edx,(%eax)
f0104a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a71:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a7b:	8b 40 0c             	mov    0xc(%eax),%eax
f0104a7e:	8d 50 01             	lea    0x1(%eax),%edx
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104a87:	90                   	nop
f0104a88:	c9                   	leave  
f0104a89:	c3                   	ret    

f0104a8a <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104a8a:	55                   	push   %ebp
f0104a8b:	89 e5                	mov    %esp,%ebp
f0104a8d:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104a90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a94:	75 0a                	jne    f0104aa0 <dequeue+0x16>
f0104a96:	b8 00 00 00 00       	mov    $0x0,%eax
f0104a9b:	e9 a0 00 00 00       	jmp    f0104b40 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	8b 40 04             	mov    0x4(%eax),%eax
f0104aa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104aa9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104aad:	0f 84 8a 00 00 00    	je     f0104b3d <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104ab3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ab7:	75 14                	jne    f0104acd <dequeue+0x43>
f0104ab9:	83 ec 04             	sub    $0x4,%esp
f0104abc:	68 43 16 13 f0       	push   $0xf0131643
f0104ac1:	6a 43                	push   $0x43
f0104ac3:	68 07 16 13 f0       	push   $0xf0131607
f0104ac8:	e8 e3 b6 ff ff       	call   f01001b0 <_panic>
f0104acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad0:	8b 40 44             	mov    0x44(%eax),%eax
f0104ad3:	85 c0                	test   %eax,%eax
f0104ad5:	74 11                	je     f0104ae8 <dequeue+0x5e>
f0104ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ada:	8b 40 44             	mov    0x44(%eax),%eax
f0104add:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae0:	8b 52 48             	mov    0x48(%edx),%edx
f0104ae3:	89 50 48             	mov    %edx,0x48(%eax)
f0104ae6:	eb 0c                	jmp    f0104af4 <dequeue+0x6a>
f0104ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104aeb:	8b 50 48             	mov    0x48(%eax),%edx
f0104aee:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af1:	89 50 04             	mov    %edx,0x4(%eax)
f0104af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104af7:	8b 40 48             	mov    0x48(%eax),%eax
f0104afa:	85 c0                	test   %eax,%eax
f0104afc:	74 11                	je     f0104b0f <dequeue+0x85>
f0104afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b01:	8b 40 48             	mov    0x48(%eax),%eax
f0104b04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b07:	8b 52 44             	mov    0x44(%edx),%edx
f0104b0a:	89 50 44             	mov    %edx,0x44(%eax)
f0104b0d:	eb 0b                	jmp    f0104b1a <dequeue+0x90>
f0104b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b12:	8b 50 44             	mov    0x44(%eax),%edx
f0104b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b18:	89 10                	mov    %edx,(%eax)
f0104b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b1d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b27:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	8b 40 0c             	mov    0xc(%eax),%eax
f0104b34:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3a:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104b40:	c9                   	leave  
f0104b41:	c3                   	ret    

f0104b42 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104b42:	55                   	push   %ebp
f0104b43:	89 e5                	mov    %esp,%ebp
f0104b45:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104b48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b4c:	75 16                	jne    f0104b64 <remove_from_queue+0x22>
f0104b4e:	68 e4 15 13 f0       	push   $0xf01315e4
f0104b53:	68 f2 15 13 f0       	push   $0xf01315f2
f0104b58:	6a 4d                	push   $0x4d
f0104b5a:	68 07 16 13 f0       	push   $0xf0131607
f0104b5f:	e8 4c b6 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104b64:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104b68:	0f 84 8a 00 00 00    	je     f0104bf8 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104b6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104b72:	75 14                	jne    f0104b88 <remove_from_queue+0x46>
f0104b74:	83 ec 04             	sub    $0x4,%esp
f0104b77:	68 43 16 13 f0       	push   $0xf0131643
f0104b7c:	6a 51                	push   $0x51
f0104b7e:	68 07 16 13 f0       	push   $0xf0131607
f0104b83:	e8 28 b6 ff ff       	call   f01001b0 <_panic>
f0104b88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b8b:	8b 40 44             	mov    0x44(%eax),%eax
f0104b8e:	85 c0                	test   %eax,%eax
f0104b90:	74 11                	je     f0104ba3 <remove_from_queue+0x61>
f0104b92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b95:	8b 40 44             	mov    0x44(%eax),%eax
f0104b98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b9b:	8b 52 48             	mov    0x48(%edx),%edx
f0104b9e:	89 50 48             	mov    %edx,0x48(%eax)
f0104ba1:	eb 0c                	jmp    f0104baf <remove_from_queue+0x6d>
f0104ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ba6:	8b 50 48             	mov    0x48(%eax),%edx
f0104ba9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bac:	89 50 04             	mov    %edx,0x4(%eax)
f0104baf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bb2:	8b 40 48             	mov    0x48(%eax),%eax
f0104bb5:	85 c0                	test   %eax,%eax
f0104bb7:	74 11                	je     f0104bca <remove_from_queue+0x88>
f0104bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bbc:	8b 40 48             	mov    0x48(%eax),%eax
f0104bbf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bc2:	8b 52 44             	mov    0x44(%edx),%edx
f0104bc5:	89 50 44             	mov    %edx,0x44(%eax)
f0104bc8:	eb 0b                	jmp    f0104bd5 <remove_from_queue+0x93>
f0104bca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bcd:	8b 50 44             	mov    0x44(%eax),%edx
f0104bd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd3:	89 10                	mov    %edx,(%eax)
f0104bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bd8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104be2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bec:	8b 40 0c             	mov    0xc(%eax),%eax
f0104bef:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104bf8:	90                   	nop
f0104bf9:	c9                   	leave  
f0104bfa:	c3                   	ret    

f0104bfb <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104bfb:	55                   	push   %ebp
f0104bfc:	89 e5                	mov    %esp,%ebp
f0104bfe:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104c01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104c05:	75 07                	jne    f0104c0e <find_env_in_queue+0x13>
f0104c07:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c0c:	eb 58                	jmp    f0104c66 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104c0e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104c15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c18:	8b 00                	mov    (%eax),%eax
f0104c1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104c1d:	eb 19                	jmp    f0104c38 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104c1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c22:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c25:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104c28:	75 05                	jne    f0104c2f <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c2d:	eb 37                	jmp    f0104c66 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c32:	8b 40 08             	mov    0x8(%eax),%eax
f0104c35:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104c38:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104c3c:	74 08                	je     f0104c46 <find_env_in_queue+0x4b>
f0104c3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c41:	8b 40 44             	mov    0x44(%eax),%eax
f0104c44:	eb 05                	jmp    f0104c4b <find_env_in_queue+0x50>
f0104c46:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c4b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c4e:	89 42 08             	mov    %eax,0x8(%edx)
f0104c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c54:	8b 40 08             	mov    0x8(%eax),%eax
f0104c57:	85 c0                	test   %eax,%eax
f0104c59:	75 c4                	jne    f0104c1f <find_env_in_queue+0x24>
f0104c5b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104c5f:	75 be                	jne    f0104c1f <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104c61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104c66:	c9                   	leave  
f0104c67:	c3                   	ret    

f0104c68 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0104c68:	55                   	push   %ebp
f0104c69:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0104c6b:	90                   	nop
f0104c6c:	5d                   	pop    %ebp
f0104c6d:	c3                   	ret    

f0104c6e <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f0104c6e:	55                   	push   %ebp
f0104c6f:	89 e5                	mov    %esp,%ebp
f0104c71:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104c78:	74 1d                	je     f0104c97 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0104c7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7d:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104c84:	83 ec 08             	sub    $0x8,%esp
f0104c87:	ff 75 08             	pushl  0x8(%ebp)
f0104c8a:	68 20 3b 25 f0       	push   $0xf0253b20
f0104c8f:	e8 65 fd ff ff       	call   f01049f9 <enqueue>
f0104c94:	83 c4 10             	add    $0x10,%esp
	}
}
f0104c97:	90                   	nop
f0104c98:	c9                   	leave  
f0104c99:	c3                   	ret    

f0104c9a <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0104c9a:	55                   	push   %ebp
f0104c9b:	89 e5                	mov    %esp,%ebp
f0104c9d:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f0104ca0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ca4:	0f 84 02 01 00 00    	je     f0104dac <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104caa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104cb1:	e9 e5 00 00 00       	jmp    f0104d9b <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104cb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cb9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104cbc:	89 c2                	mov    %eax,%edx
f0104cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cc1:	c1 e0 04             	shl    $0x4,%eax
f0104cc4:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0104cc9:	52                   	push   %edx
f0104cca:	50                   	push   %eax
f0104ccb:	e8 2b ff ff ff       	call   f0104bfb <find_env_in_queue>
f0104cd0:	83 c4 08             	add    $0x8,%esp
f0104cd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104cda:	0f 84 b8 00 00 00    	je     f0104d98 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104ce0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ce4:	75 17                	jne    f0104cfd <sched_remove_ready+0x63>
f0104ce6:	83 ec 04             	sub    $0x4,%esp
f0104ce9:	68 43 16 13 f0       	push   $0xf0131643
f0104cee:	68 90 00 00 00       	push   $0x90
f0104cf3:	68 07 16 13 f0       	push   $0xf0131607
f0104cf8:	e8 b3 b4 ff ff       	call   f01001b0 <_panic>
f0104cfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d00:	8b 40 44             	mov    0x44(%eax),%eax
f0104d03:	85 c0                	test   %eax,%eax
f0104d05:	74 11                	je     f0104d18 <sched_remove_ready+0x7e>
f0104d07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d0a:	8b 40 44             	mov    0x44(%eax),%eax
f0104d0d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104d10:	8b 52 48             	mov    0x48(%edx),%edx
f0104d13:	89 50 48             	mov    %edx,0x48(%eax)
f0104d16:	eb 14                	jmp    f0104d2c <sched_remove_ready+0x92>
f0104d18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1b:	8b 40 48             	mov    0x48(%eax),%eax
f0104d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d21:	c1 e2 04             	shl    $0x4,%edx
f0104d24:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0104d2a:	89 02                	mov    %eax,(%edx)
f0104d2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d2f:	8b 40 48             	mov    0x48(%eax),%eax
f0104d32:	85 c0                	test   %eax,%eax
f0104d34:	74 11                	je     f0104d47 <sched_remove_ready+0xad>
f0104d36:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d39:	8b 40 48             	mov    0x48(%eax),%eax
f0104d3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0104d3f:	8b 52 44             	mov    0x44(%edx),%edx
f0104d42:	89 50 44             	mov    %edx,0x44(%eax)
f0104d45:	eb 14                	jmp    f0104d5b <sched_remove_ready+0xc1>
f0104d47:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104d4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0104d59:	89 02                	mov    %eax,(%edx)
f0104d5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104d65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d68:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d72:	c1 e0 04             	shl    $0x4,%eax
f0104d75:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0104d7a:	8b 00                	mov    (%eax),%eax
f0104d7c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d82:	c1 e0 04             	shl    $0x4,%eax
f0104d85:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0104d8a:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0104d8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d8f:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104d96:	eb 14                	jmp    f0104dac <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d98:	ff 45 f4             	incl   -0xc(%ebp)
f0104d9b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0104da0:	0f b6 c0             	movzbl %al,%eax
f0104da3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104da6:	0f 8f 0a ff ff ff    	jg     f0104cb6 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104dac:	c9                   	leave  
f0104dad:	c3                   	ret    

f0104dae <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f0104dae:	55                   	push   %ebp
f0104daf:	89 e5                	mov    %esp,%ebp
f0104db1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104db4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db8:	74 1d                	je     f0104dd7 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104dba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dbd:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104dc4:	83 ec 08             	sub    $0x8,%esp
f0104dc7:	ff 75 08             	pushl  0x8(%ebp)
f0104dca:	68 b8 be 2b f0       	push   $0xf02bbeb8
f0104dcf:	e8 25 fc ff ff       	call   f01049f9 <enqueue>
f0104dd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0104dd7:	90                   	nop
f0104dd8:	c9                   	leave  
f0104dd9:	c3                   	ret    

f0104dda <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f0104dda:	55                   	push   %ebp
f0104ddb:	89 e5                	mov    %esp,%ebp
f0104ddd:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104de0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104de4:	0f 84 92 00 00 00    	je     f0104e7c <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104dea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dee:	75 17                	jne    f0104e07 <sched_remove_new+0x2d>
f0104df0:	83 ec 04             	sub    $0x4,%esp
f0104df3:	68 43 16 13 f0       	push   $0xf0131643
f0104df8:	68 ab 00 00 00       	push   $0xab
f0104dfd:	68 07 16 13 f0       	push   $0xf0131607
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e0d:	85 c0                	test   %eax,%eax
f0104e0f:	74 11                	je     f0104e22 <sched_remove_new+0x48>
f0104e11:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e14:	8b 40 44             	mov    0x44(%eax),%eax
f0104e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0104e1a:	8b 52 48             	mov    0x48(%edx),%edx
f0104e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0104e20:	eb 0b                	jmp    f0104e2d <sched_remove_new+0x53>
f0104e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e25:	8b 40 48             	mov    0x48(%eax),%eax
f0104e28:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0104e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e30:	8b 40 48             	mov    0x48(%eax),%eax
f0104e33:	85 c0                	test   %eax,%eax
f0104e35:	74 11                	je     f0104e48 <sched_remove_new+0x6e>
f0104e37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e3a:	8b 40 48             	mov    0x48(%eax),%eax
f0104e3d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104e40:	8b 52 44             	mov    0x44(%edx),%edx
f0104e43:	89 50 44             	mov    %edx,0x44(%eax)
f0104e46:	eb 0b                	jmp    f0104e53 <sched_remove_new+0x79>
f0104e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104e4e:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f0104e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e56:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e60:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e67:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f0104e6c:	48                   	dec    %eax
f0104e6d:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
		env->env_status = ENV_UNKNOWN;
f0104e72:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e75:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104e7c:	90                   	nop
f0104e7d:	c9                   	leave  
f0104e7e:	c3                   	ret    

f0104e7f <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f0104e7f:	55                   	push   %ebp
f0104e80:	89 e5                	mov    %esp,%ebp
f0104e82:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104e85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e89:	74 34                	je     f0104ebf <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104e8b:	e8 b7 85 00 00       	call   f010d447 <isBufferingEnabled>
f0104e90:	84 c0                	test   %al,%al
f0104e92:	74 0e                	je     f0104ea2 <sched_insert_exit+0x23>
f0104e94:	83 ec 0c             	sub    $0xc,%esp
f0104e97:	ff 75 08             	pushl  0x8(%ebp)
f0104e9a:	e8 49 5b 00 00       	call   f010a9e8 <cleanup_buffers>
f0104e9f:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ea5:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104eac:	83 ec 08             	sub    $0x8,%esp
f0104eaf:	ff 75 08             	pushl  0x8(%ebp)
f0104eb2:	68 84 9a 2b f0       	push   $0xf02b9a84
f0104eb7:	e8 3d fb ff ff       	call   f01049f9 <enqueue>
f0104ebc:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ebf:	90                   	nop
f0104ec0:	c9                   	leave  
f0104ec1:	c3                   	ret    

f0104ec2 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f0104ec2:	55                   	push   %ebp
f0104ec3:	89 e5                	mov    %esp,%ebp
f0104ec5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ec8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ecc:	0f 84 92 00 00 00    	je     f0104f64 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ed2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ed6:	75 17                	jne    f0104eef <sched_remove_exit+0x2d>
f0104ed8:	83 ec 04             	sub    $0x4,%esp
f0104edb:	68 43 16 13 f0       	push   $0xf0131643
f0104ee0:	68 c3 00 00 00       	push   $0xc3
f0104ee5:	68 07 16 13 f0       	push   $0xf0131607
f0104eea:	e8 c1 b2 ff ff       	call   f01001b0 <_panic>
f0104eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ef2:	8b 40 44             	mov    0x44(%eax),%eax
f0104ef5:	85 c0                	test   %eax,%eax
f0104ef7:	74 11                	je     f0104f0a <sched_remove_exit+0x48>
f0104ef9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efc:	8b 40 44             	mov    0x44(%eax),%eax
f0104eff:	8b 55 08             	mov    0x8(%ebp),%edx
f0104f02:	8b 52 48             	mov    0x48(%edx),%edx
f0104f05:	89 50 48             	mov    %edx,0x48(%eax)
f0104f08:	eb 0b                	jmp    f0104f15 <sched_remove_exit+0x53>
f0104f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f0d:	8b 40 48             	mov    0x48(%eax),%eax
f0104f10:	a3 88 9a 2b f0       	mov    %eax,0xf02b9a88
f0104f15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f18:	8b 40 48             	mov    0x48(%eax),%eax
f0104f1b:	85 c0                	test   %eax,%eax
f0104f1d:	74 11                	je     f0104f30 <sched_remove_exit+0x6e>
f0104f1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f22:	8b 40 48             	mov    0x48(%eax),%eax
f0104f25:	8b 55 08             	mov    0x8(%ebp),%edx
f0104f28:	8b 52 44             	mov    0x44(%edx),%edx
f0104f2b:	89 50 44             	mov    %edx,0x44(%eax)
f0104f2e:	eb 0b                	jmp    f0104f3b <sched_remove_exit+0x79>
f0104f30:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f33:	8b 40 44             	mov    0x44(%eax),%eax
f0104f36:	a3 84 9a 2b f0       	mov    %eax,0xf02b9a84
f0104f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f3e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104f45:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f48:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104f4f:	a1 90 9a 2b f0       	mov    0xf02b9a90,%eax
f0104f54:	48                   	dec    %eax
f0104f55:	a3 90 9a 2b f0       	mov    %eax,0xf02b9a90
		env->env_status = ENV_UNKNOWN;
f0104f5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5d:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104f64:	90                   	nop
f0104f65:	c9                   	leave  
f0104f66:	c3                   	ret    

f0104f67 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0104f67:	55                   	push   %ebp
f0104f68:	89 e5                	mov    %esp,%ebp
f0104f6a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0104f6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f71:	74 0e                	je     f0104f81 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0104f73:	83 ec 0c             	sub    $0xc,%esp
f0104f76:	ff 75 08             	pushl  0x8(%ebp)
f0104f79:	e8 30 fe ff ff       	call   f0104dae <sched_insert_new>
f0104f7e:	83 c4 10             	add    $0x10,%esp
	}
}
f0104f81:	90                   	nop
f0104f82:	c9                   	leave  
f0104f83:	c3                   	ret    

f0104f84 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0104f84:	55                   	push   %ebp
f0104f85:	89 e5                	mov    %esp,%ebp
f0104f87:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104f8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104f91:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0104f96:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f99:	eb 3d                	jmp    f0104fd8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0104f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fa1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104fa4:	75 2a                	jne    f0104fd0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0104fa6:	83 ec 0c             	sub    $0xc,%esp
f0104fa9:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fac:	e8 29 fe ff ff       	call   f0104dda <sched_remove_new>
f0104fb1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0104fb4:	83 ec 0c             	sub    $0xc,%esp
f0104fb7:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fba:	e8 af fc ff ff       	call   f0104c6e <sched_insert_ready0>
f0104fbf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0104fc2:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0104fc7:	85 c0                	test   %eax,%eax
f0104fc9:	75 36                	jne    f0105001 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0104fcb:	e8 7d 0e 00 00       	call   f0105e4d <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104fd0:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104fdc:	74 08                	je     f0104fe6 <sched_run_env+0x62>
f0104fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe1:	8b 40 44             	mov    0x44(%eax),%eax
f0104fe4:	eb 05                	jmp    f0104feb <sched_run_env+0x67>
f0104fe6:	b8 00 00 00 00       	mov    $0x0,%eax
f0104feb:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0104ff0:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0104ff5:	85 c0                	test   %eax,%eax
f0104ff7:	75 a2                	jne    f0104f9b <sched_run_env+0x17>
f0104ff9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffd:	75 9c                	jne    f0104f9b <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0104fff:	eb 01                	jmp    f0105002 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105001:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105002:	90                   	nop
f0105003:	c9                   	leave  
f0105004:	c3                   	ret    

f0105005 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f0105005:	55                   	push   %ebp
f0105006:	89 e5                	mov    %esp,%ebp
f0105008:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010500b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105012:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105019:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010501d:	75 59                	jne    f0105078 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010501f:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105024:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105027:	eb 28                	jmp    f0105051 <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f0105029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010502c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010502f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105032:	75 15                	jne    f0105049 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105034:	83 ec 0c             	sub    $0xc,%esp
f0105037:	ff 75 f4             	pushl  -0xc(%ebp)
f010503a:	e8 9b fd ff ff       	call   f0104dda <sched_remove_new>
f010503f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105042:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105049:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010504e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105051:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105055:	74 08                	je     f010505f <sched_exit_env+0x5a>
f0105057:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010505a:	8b 40 44             	mov    0x44(%eax),%eax
f010505d:	eb 05                	jmp    f0105064 <sched_exit_env+0x5f>
f010505f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105064:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105069:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	75 b7                	jne    f0105029 <sched_exit_env+0x24>
f0105072:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105076:	75 b1                	jne    f0105029 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010507c:	0f 85 6e 01 00 00    	jne    f01051f0 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105082:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105089:	e9 4e 01 00 00       	jmp    f01051dc <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010508e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105091:	c1 e0 04             	shl    $0x4,%eax
f0105094:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105099:	8b 00                	mov    (%eax),%eax
f010509b:	85 c0                	test   %eax,%eax
f010509d:	0f 84 30 01 00 00    	je     f01051d3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01050a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01050ad:	c1 e0 04             	shl    $0x4,%eax
f01050b0:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01050b5:	8b 00                	mov    (%eax),%eax
f01050b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050ba:	e9 d4 00 00 00       	jmp    f0105193 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01050bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050c2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050c5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050c8:	0f 85 b5 00 00 00    	jne    f0105183 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01050ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050d2:	75 17                	jne    f01050eb <sched_exit_env+0xe6>
f01050d4:	83 ec 04             	sub    $0x4,%esp
f01050d7:	68 43 16 13 f0       	push   $0xf0131643
f01050dc:	68 10 01 00 00       	push   $0x110
f01050e1:	68 07 16 13 f0       	push   $0xf0131607
f01050e6:	e8 c5 b0 ff ff       	call   f01001b0 <_panic>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	85 c0                	test   %eax,%eax
f01050f3:	74 11                	je     f0105106 <sched_exit_env+0x101>
f01050f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f8:	8b 40 44             	mov    0x44(%eax),%eax
f01050fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050fe:	8b 52 48             	mov    0x48(%edx),%edx
f0105101:	89 50 48             	mov    %edx,0x48(%eax)
f0105104:	eb 14                	jmp    f010511a <sched_exit_env+0x115>
f0105106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105109:	8b 40 48             	mov    0x48(%eax),%eax
f010510c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010510f:	c1 e2 04             	shl    $0x4,%edx
f0105112:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0105118:	89 02                	mov    %eax,(%edx)
f010511a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010511d:	8b 40 48             	mov    0x48(%eax),%eax
f0105120:	85 c0                	test   %eax,%eax
f0105122:	74 11                	je     f0105135 <sched_exit_env+0x130>
f0105124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105127:	8b 40 48             	mov    0x48(%eax),%eax
f010512a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010512d:	8b 52 44             	mov    0x44(%edx),%edx
f0105130:	89 50 44             	mov    %edx,0x44(%eax)
f0105133:	eb 14                	jmp    f0105149 <sched_exit_env+0x144>
f0105135:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105138:	8b 40 44             	mov    0x44(%eax),%eax
f010513b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010513e:	c1 e2 04             	shl    $0x4,%edx
f0105141:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105147:	89 02                	mov    %eax,(%edx)
f0105149:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105156:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010515d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105160:	c1 e0 04             	shl    $0x4,%eax
f0105163:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105168:	8b 00                	mov    (%eax),%eax
f010516a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010516d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105170:	c1 e0 04             	shl    $0x4,%eax
f0105173:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105178:	89 10                	mov    %edx,(%eax)
						found = 1;
f010517a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105181:	eb 50                	jmp    f01051d3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105183:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105186:	c1 e0 04             	shl    $0x4,%eax
f0105189:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f010518e:	8b 00                	mov    (%eax),%eax
f0105190:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105193:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105197:	74 08                	je     f01051a1 <sched_exit_env+0x19c>
f0105199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010519c:	8b 40 44             	mov    0x44(%eax),%eax
f010519f:	eb 05                	jmp    f01051a6 <sched_exit_env+0x1a1>
f01051a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01051a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01051a9:	c1 e2 04             	shl    $0x4,%edx
f01051ac:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f01051b2:	89 02                	mov    %eax,(%edx)
f01051b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051b7:	c1 e0 04             	shl    $0x4,%eax
f01051ba:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f01051bf:	8b 00                	mov    (%eax),%eax
f01051c1:	85 c0                	test   %eax,%eax
f01051c3:	0f 85 f6 fe ff ff    	jne    f01050bf <sched_exit_env+0xba>
f01051c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051cd:	0f 85 ec fe ff ff    	jne    f01050bf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01051d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051d7:	75 16                	jne    f01051ef <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01051d9:	ff 45 ec             	incl   -0x14(%ebp)
f01051dc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01051e1:	0f b6 c0             	movzbl %al,%eax
f01051e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01051e7:	0f 8f a1 fe ff ff    	jg     f010508e <sched_exit_env+0x89>
f01051ed:	eb 01                	jmp    f01051f0 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01051ef:	90                   	nop
		}
	}
	if (!found)
f01051f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051f4:	75 1c                	jne    f0105212 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01051f6:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01051fb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051fe:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105201:	75 0f                	jne    f0105212 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105203:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105208:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010520b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105212:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105216:	74 2a                	je     f0105242 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105218:	83 ec 0c             	sub    $0xc,%esp
f010521b:	ff 75 f4             	pushl  -0xc(%ebp)
f010521e:	e8 5c fc ff ff       	call   f0104e7f <sched_insert_exit>
f0105223:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105226:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010522b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010522e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105231:	75 0f                	jne    f0105242 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105233:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f010523a:	00 00 00 
			fos_scheduler();
f010523d:	e8 0b 0c 00 00       	call   f0105e4d <fos_scheduler>
		}
	}
}
f0105242:	90                   	nop
f0105243:	c9                   	leave  
f0105244:	c3                   	ret    

f0105245 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105245:	55                   	push   %ebp
f0105246:	89 e5                	mov    %esp,%ebp
f0105248:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010524b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105252:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010525d:	0f 85 9d 00 00 00    	jne    f0105300 <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105263:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105268:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010526b:	eb 64                	jmp    f01052d1 <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f010526d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105270:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105273:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105276:	75 51                	jne    f01052c9 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527b:	8d 50 5c             	lea    0x5c(%eax),%edx
f010527e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105281:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105284:	83 ec 04             	sub    $0x4,%esp
f0105287:	52                   	push   %edx
f0105288:	50                   	push   %eax
f0105289:	68 64 16 13 f0       	push   $0xf0131664
f010528e:	e8 9e bb ff ff       	call   f0100e31 <cprintf>
f0105293:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105296:	83 ec 0c             	sub    $0xc,%esp
f0105299:	ff 75 f4             	pushl  -0xc(%ebp)
f010529c:	e8 39 fb ff ff       	call   f0104dda <sched_remove_new>
f01052a1:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01052a4:	83 ec 0c             	sub    $0xc,%esp
f01052a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01052aa:	e8 2e 43 00 00       	call   f01095dd <env_free>
f01052af:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01052b2:	83 ec 0c             	sub    $0xc,%esp
f01052b5:	68 89 16 13 f0       	push   $0xf0131689
f01052ba:	e8 72 bb ff ff       	call   f0100e31 <cprintf>
f01052bf:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052c2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052c9:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01052ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052d5:	74 08                	je     f01052df <sched_kill_env+0x9a>
f01052d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052da:	8b 40 44             	mov    0x44(%eax),%eax
f01052dd:	eb 05                	jmp    f01052e4 <sched_kill_env+0x9f>
f01052df:	b8 00 00 00 00       	mov    $0x0,%eax
f01052e4:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f01052e9:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01052ee:	85 c0                	test   %eax,%eax
f01052f0:	0f 85 77 ff ff ff    	jne    f010526d <sched_kill_env+0x28>
f01052f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052fa:	0f 85 6d ff ff ff    	jne    f010526d <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	0f 85 aa 01 00 00    	jne    f01054b4 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010530a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105311:	e9 8a 01 00 00       	jmp    f01054a0 <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105316:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105319:	c1 e0 04             	shl    $0x4,%eax
f010531c:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105321:	8b 00                	mov    (%eax),%eax
f0105323:	85 c0                	test   %eax,%eax
f0105325:	0f 84 6c 01 00 00    	je     f0105497 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f010532b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105332:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105335:	c1 e0 04             	shl    $0x4,%eax
f0105338:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f010533d:	8b 00                	mov    (%eax),%eax
f010533f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105342:	e9 10 01 00 00       	jmp    f0105457 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105347:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010534d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105350:	0f 85 f1 00 00 00    	jne    f0105447 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105359:	8d 50 5c             	lea    0x5c(%eax),%edx
f010535c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010535f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105362:	ff 75 ec             	pushl  -0x14(%ebp)
f0105365:	52                   	push   %edx
f0105366:	50                   	push   %eax
f0105367:	68 90 16 13 f0       	push   $0xf0131690
f010536c:	e8 c0 ba ff ff       	call   f0100e31 <cprintf>
f0105371:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105374:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105378:	75 17                	jne    f0105391 <sched_kill_env+0x14c>
f010537a:	83 ec 04             	sub    $0x4,%esp
f010537d:	68 43 16 13 f0       	push   $0xf0131643
f0105382:	68 54 01 00 00       	push   $0x154
f0105387:	68 07 16 13 f0       	push   $0xf0131607
f010538c:	e8 1f ae ff ff       	call   f01001b0 <_panic>
f0105391:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105394:	8b 40 44             	mov    0x44(%eax),%eax
f0105397:	85 c0                	test   %eax,%eax
f0105399:	74 11                	je     f01053ac <sched_kill_env+0x167>
f010539b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539e:	8b 40 44             	mov    0x44(%eax),%eax
f01053a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053a4:	8b 52 48             	mov    0x48(%edx),%edx
f01053a7:	89 50 48             	mov    %edx,0x48(%eax)
f01053aa:	eb 14                	jmp    f01053c0 <sched_kill_env+0x17b>
f01053ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053af:	8b 40 48             	mov    0x48(%eax),%eax
f01053b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053b5:	c1 e2 04             	shl    $0x4,%edx
f01053b8:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f01053be:	89 02                	mov    %eax,(%edx)
f01053c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c3:	8b 40 48             	mov    0x48(%eax),%eax
f01053c6:	85 c0                	test   %eax,%eax
f01053c8:	74 11                	je     f01053db <sched_kill_env+0x196>
f01053ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053cd:	8b 40 48             	mov    0x48(%eax),%eax
f01053d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d3:	8b 52 44             	mov    0x44(%edx),%edx
f01053d6:	89 50 44             	mov    %edx,0x44(%eax)
f01053d9:	eb 14                	jmp    f01053ef <sched_kill_env+0x1aa>
f01053db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053de:	8b 40 44             	mov    0x44(%eax),%eax
f01053e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e4:	c1 e2 04             	shl    $0x4,%edx
f01053e7:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f01053ed:	89 02                	mov    %eax,(%edx)
f01053ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105403:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105406:	c1 e0 04             	shl    $0x4,%eax
f0105409:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f010540e:	8b 00                	mov    (%eax),%eax
f0105410:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105413:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105416:	c1 e0 04             	shl    $0x4,%eax
f0105419:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f010541e:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f0105420:	83 ec 0c             	sub    $0xc,%esp
f0105423:	ff 75 f4             	pushl  -0xc(%ebp)
f0105426:	e8 b2 41 00 00       	call   f01095dd <env_free>
f010542b:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010542e:	83 ec 0c             	sub    $0xc,%esp
f0105431:	68 89 16 13 f0       	push   $0xf0131689
f0105436:	e8 f6 b9 ff ff       	call   f0100e31 <cprintf>
f010543b:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010543e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105445:	eb 50                	jmp    f0105497 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105447:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010544a:	c1 e0 04             	shl    $0x4,%eax
f010544d:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105452:	8b 00                	mov    (%eax),%eax
f0105454:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105457:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010545b:	74 08                	je     f0105465 <sched_kill_env+0x220>
f010545d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105460:	8b 40 44             	mov    0x44(%eax),%eax
f0105463:	eb 05                	jmp    f010546a <sched_kill_env+0x225>
f0105465:	b8 00 00 00 00       	mov    $0x0,%eax
f010546a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010546d:	c1 e2 04             	shl    $0x4,%edx
f0105470:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105476:	89 02                	mov    %eax,(%edx)
f0105478:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010547b:	c1 e0 04             	shl    $0x4,%eax
f010547e:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105483:	8b 00                	mov    (%eax),%eax
f0105485:	85 c0                	test   %eax,%eax
f0105487:	0f 85 ba fe ff ff    	jne    f0105347 <sched_kill_env+0x102>
f010548d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105491:	0f 85 b0 fe ff ff    	jne    f0105347 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105497:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010549b:	75 16                	jne    f01054b3 <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010549d:	ff 45 ec             	incl   -0x14(%ebp)
f01054a0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01054a5:	0f b6 c0             	movzbl %al,%eax
f01054a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01054ab:	0f 8f 65 fe ff ff    	jg     f0105316 <sched_kill_env+0xd1>
f01054b1:	eb 01                	jmp    f01054b4 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f01054b3:	90                   	nop
		}
	}
	if (!found)
f01054b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054b8:	0f 85 a4 00 00 00    	jne    f0105562 <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f01054be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01054c5:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f01054ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054cd:	eb 64                	jmp    f0105533 <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f01054cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054d8:	75 51                	jne    f010552b <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	8d 50 5c             	lea    0x5c(%eax),%edx
f01054e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054e6:	83 ec 04             	sub    $0x4,%esp
f01054e9:	52                   	push   %edx
f01054ea:	50                   	push   %eax
f01054eb:	68 bc 16 13 f0       	push   $0xf01316bc
f01054f0:	e8 3c b9 ff ff       	call   f0100e31 <cprintf>
f01054f5:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 bf f9 ff ff       	call   f0104ec2 <sched_remove_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105506:	83 ec 0c             	sub    $0xc,%esp
f0105509:	ff 75 f4             	pushl  -0xc(%ebp)
f010550c:	e8 cc 40 00 00       	call   f01095dd <env_free>
f0105511:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	68 89 16 13 f0       	push   $0xf0131689
f010551c:	e8 10 b9 ff ff       	call   f0100e31 <cprintf>
f0105521:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105524:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010552b:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105530:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105533:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105537:	74 08                	je     f0105541 <sched_kill_env+0x2fc>
f0105539:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010553c:	8b 40 44             	mov    0x44(%eax),%eax
f010553f:	eb 05                	jmp    f0105546 <sched_kill_env+0x301>
f0105541:	b8 00 00 00 00       	mov    $0x0,%eax
f0105546:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f010554b:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105550:	85 c0                	test   %eax,%eax
f0105552:	0f 85 77 ff ff ff    	jne    f01054cf <sched_kill_env+0x28a>
f0105558:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010555c:	0f 85 6d ff ff ff    	jne    f01054cf <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f0105562:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105566:	0f 85 9d 00 00 00    	jne    f0105609 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f010556c:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105571:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105574:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105577:	0f 85 8c 00 00 00    	jne    f0105609 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f010557d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105582:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105588:	8b 40 54             	mov    0x54(%eax),%eax
f010558b:	83 f8 02             	cmp    $0x2,%eax
f010558e:	74 19                	je     f01055a9 <sched_kill_env+0x364>
f0105590:	68 e4 16 13 f0       	push   $0xf01316e4
f0105595:	68 f2 15 13 f0       	push   $0xf01315f2
f010559a:	68 77 01 00 00       	push   $0x177
f010559f:	68 07 16 13 f0       	push   $0xf0131607
f01055a4:	e8 07 ac ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01055a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055ac:	8d 50 5c             	lea    0x5c(%eax),%edx
f01055af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055b5:	83 ec 04             	sub    $0x4,%esp
f01055b8:	52                   	push   %edx
f01055b9:	50                   	push   %eax
f01055ba:	68 08 17 13 f0       	push   $0xf0131708
f01055bf:	e8 6d b8 ff ff       	call   f0100e31 <cprintf>
f01055c4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01055c7:	83 ec 0c             	sub    $0xc,%esp
f01055ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01055cd:	e8 0b 40 00 00       	call   f01095dd <env_free>
f01055d2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01055d5:	83 ec 0c             	sub    $0xc,%esp
f01055d8:	68 89 16 13 f0       	push   $0xf0131689
f01055dd:	e8 4f b8 ff ff       	call   f0100e31 <cprintf>
f01055e2:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01055e5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01055ec:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01055f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01055f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01055f7:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01055fa:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105601:	00 00 00 
			fos_scheduler();
f0105604:	e8 44 08 00 00       	call   f0105e4d <fos_scheduler>
		}
	}
}
f0105609:	90                   	nop
f010560a:	c9                   	leave  
f010560b:	c3                   	ret    

f010560c <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f010560c:	55                   	push   %ebp
f010560d:	89 e5                	mov    %esp,%ebp
f010560f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105612:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105617:	85 c0                	test   %eax,%eax
f0105619:	74 69                	je     f0105684 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010561b:	83 ec 0c             	sub    $0xc,%esp
f010561e:	68 34 17 13 f0       	push   $0xf0131734
f0105623:	e8 09 b8 ff ff       	call   f0100e31 <cprintf>
f0105628:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562b:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105630:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105633:	eb 26                	jmp    f010565b <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105638:	8d 50 5c             	lea    0x5c(%eax),%edx
f010563b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105641:	83 ec 04             	sub    $0x4,%esp
f0105644:	52                   	push   %edx
f0105645:	50                   	push   %eax
f0105646:	68 56 17 13 f0       	push   $0xf0131756
f010564b:	e8 e1 b7 ff ff       	call   f0100e31 <cprintf>
f0105650:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105653:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105658:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010565b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010565f:	74 08                	je     f0105669 <sched_print_all+0x5d>
f0105661:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105664:	8b 40 44             	mov    0x44(%eax),%eax
f0105667:	eb 05                	jmp    f010566e <sched_print_all+0x62>
f0105669:	b8 00 00 00 00       	mov    $0x0,%eax
f010566e:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105673:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105678:	85 c0                	test   %eax,%eax
f010567a:	75 b9                	jne    f0105635 <sched_print_all+0x29>
f010567c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105680:	75 b3                	jne    f0105635 <sched_print_all+0x29>
f0105682:	eb 10                	jmp    f0105694 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105684:	83 ec 0c             	sub    $0xc,%esp
f0105687:	68 60 17 13 f0       	push   $0xf0131760
f010568c:	e8 a0 b7 ff ff       	call   f0100e31 <cprintf>
f0105691:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105694:	83 ec 0c             	sub    $0xc,%esp
f0105697:	68 7c 17 13 f0       	push   $0xf013177c
f010569c:	e8 90 b7 ff ff       	call   f0100e31 <cprintf>
f01056a1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01056ab:	e9 c8 00 00 00       	jmp    f0105778 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01056b3:	c1 e0 04             	shl    $0x4,%eax
f01056b6:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01056bb:	8b 00                	mov    (%eax),%eax
f01056bd:	85 c0                	test   %eax,%eax
f01056bf:	0f 84 8d 00 00 00    	je     f0105752 <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f01056c5:	83 ec 08             	sub    $0x8,%esp
f01056c8:	ff 75 f0             	pushl  -0x10(%ebp)
f01056cb:	68 b0 17 13 f0       	push   $0xf01317b0
f01056d0:	e8 5c b7 ff ff       	call   f0100e31 <cprintf>
f01056d5:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01056db:	c1 e0 04             	shl    $0x4,%eax
f01056de:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01056e3:	8b 00                	mov    (%eax),%eax
f01056e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056e8:	eb 2e                	jmp    f0105718 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01056ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056ed:	8d 50 5c             	lea    0x5c(%eax),%edx
f01056f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056f6:	83 ec 04             	sub    $0x4,%esp
f01056f9:	52                   	push   %edx
f01056fa:	50                   	push   %eax
f01056fb:	68 56 17 13 f0       	push   $0xf0131756
f0105700:	e8 2c b7 ff ff       	call   f0100e31 <cprintf>
f0105705:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105708:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010570b:	c1 e0 04             	shl    $0x4,%eax
f010570e:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105713:	8b 00                	mov    (%eax),%eax
f0105715:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105718:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010571c:	74 08                	je     f0105726 <sched_print_all+0x11a>
f010571e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105721:	8b 40 44             	mov    0x44(%eax),%eax
f0105724:	eb 05                	jmp    f010572b <sched_print_all+0x11f>
f0105726:	b8 00 00 00 00       	mov    $0x0,%eax
f010572b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010572e:	c1 e2 04             	shl    $0x4,%edx
f0105731:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105737:	89 02                	mov    %eax,(%edx)
f0105739:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010573c:	c1 e0 04             	shl    $0x4,%eax
f010573f:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105744:	8b 00                	mov    (%eax),%eax
f0105746:	85 c0                	test   %eax,%eax
f0105748:	75 a0                	jne    f01056ea <sched_print_all+0xde>
f010574a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010574e:	75 9a                	jne    f01056ea <sched_print_all+0xde>
f0105750:	eb 13                	jmp    f0105765 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105752:	83 ec 08             	sub    $0x8,%esp
f0105755:	ff 75 f0             	pushl  -0x10(%ebp)
f0105758:	68 d8 17 13 f0       	push   $0xf01317d8
f010575d:	e8 cf b6 ff ff       	call   f0100e31 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105765:	83 ec 0c             	sub    $0xc,%esp
f0105768:	68 7c 17 13 f0       	push   $0xf013177c
f010576d:	e8 bf b6 ff ff       	call   f0100e31 <cprintf>
f0105772:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105775:	ff 45 f0             	incl   -0x10(%ebp)
f0105778:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f010577d:	0f b6 c0             	movzbl %al,%eax
f0105780:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105783:	0f 8f 27 ff ff ff    	jg     f01056b0 <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105789:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f010578e:	85 c0                	test   %eax,%eax
f0105790:	74 69                	je     f01057fb <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105792:	83 ec 0c             	sub    $0xc,%esp
f0105795:	68 fc 17 13 f0       	push   $0xf01317fc
f010579a:	e8 92 b6 ff ff       	call   f0100e31 <cprintf>
f010579f:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057a2:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f01057a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057aa:	eb 26                	jmp    f01057d2 <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01057ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057af:	8d 50 5c             	lea    0x5c(%eax),%edx
f01057b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057b8:	83 ec 04             	sub    $0x4,%esp
f01057bb:	52                   	push   %edx
f01057bc:	50                   	push   %eax
f01057bd:	68 56 17 13 f0       	push   $0xf0131756
f01057c2:	e8 6a b6 ff ff       	call   f0100e31 <cprintf>
f01057c7:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057ca:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f01057cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057d6:	74 08                	je     f01057e0 <sched_print_all+0x1d4>
f01057d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057db:	8b 40 44             	mov    0x44(%eax),%eax
f01057de:	eb 05                	jmp    f01057e5 <sched_print_all+0x1d9>
f01057e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01057e5:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f01057ea:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f01057ef:	85 c0                	test   %eax,%eax
f01057f1:	75 b9                	jne    f01057ac <sched_print_all+0x1a0>
f01057f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057f7:	75 b3                	jne    f01057ac <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f01057f9:	eb 10                	jmp    f010580b <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01057fb:	83 ec 0c             	sub    $0xc,%esp
f01057fe:	68 1e 18 13 f0       	push   $0xf013181e
f0105803:	e8 29 b6 ff ff       	call   f0100e31 <cprintf>
f0105808:	83 c4 10             	add    $0x10,%esp
	}
}
f010580b:	90                   	nop
f010580c:	c9                   	leave  
f010580d:	c3                   	ret    

f010580e <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f010580e:	55                   	push   %ebp
f010580f:	89 e5                	mov    %esp,%ebp
f0105811:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105814:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010581b:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	eb 24                	jmp    f0105849 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105825:	83 ec 0c             	sub    $0xc,%esp
f0105828:	ff 75 f4             	pushl  -0xc(%ebp)
f010582b:	e8 aa f5 ff ff       	call   f0104dda <sched_remove_new>
f0105830:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105833:	83 ec 0c             	sub    $0xc,%esp
f0105836:	ff 75 f4             	pushl  -0xc(%ebp)
f0105839:	e8 30 f4 ff ff       	call   f0104c6e <sched_insert_ready0>
f010583e:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105841:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105846:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584d:	74 08                	je     f0105857 <sched_run_all+0x49>
f010584f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105852:	8b 40 44             	mov    0x44(%eax),%eax
f0105855:	eb 05                	jmp    f010585c <sched_run_all+0x4e>
f0105857:	b8 00 00 00 00       	mov    $0x0,%eax
f010585c:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105861:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105866:	85 c0                	test   %eax,%eax
f0105868:	75 bb                	jne    f0105825 <sched_run_all+0x17>
f010586a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010586e:	75 b5                	jne    f0105825 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105870:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	75 05                	jne    f010587e <sched_run_all+0x70>
		fos_scheduler();
f0105879:	e8 cf 05 00 00       	call   f0105e4d <fos_scheduler>
}
f010587e:	90                   	nop
f010587f:	c9                   	leave  
f0105880:	c3                   	ret    

f0105881 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105881:	55                   	push   %ebp
f0105882:	89 e5                	mov    %esp,%ebp
f0105884:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105887:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f010588c:	85 c0                	test   %eax,%eax
f010588e:	0f 84 95 00 00 00    	je     f0105929 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105894:	83 ec 0c             	sub    $0xc,%esp
f0105897:	68 3c 18 13 f0       	push   $0xf013183c
f010589c:	e8 90 b5 ff ff       	call   f0100e31 <cprintf>
f01058a1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01058a4:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f01058a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ac:	eb 52                	jmp    f0105900 <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b1:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ba:	83 ec 04             	sub    $0x4,%esp
f01058bd:	52                   	push   %edx
f01058be:	50                   	push   %eax
f01058bf:	68 68 18 13 f0       	push   $0xf0131868
f01058c4:	e8 68 b5 ff ff       	call   f0100e31 <cprintf>
f01058c9:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f01058cc:	83 ec 0c             	sub    $0xc,%esp
f01058cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d2:	e8 03 f5 ff ff       	call   f0104dda <sched_remove_new>
f01058d7:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058da:	83 ec 0c             	sub    $0xc,%esp
f01058dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01058e0:	e8 f8 3c 00 00       	call   f01095dd <env_free>
f01058e5:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058e8:	83 ec 0c             	sub    $0xc,%esp
f01058eb:	68 89 16 13 f0       	push   $0xf0131689
f01058f0:	e8 3c b5 ff ff       	call   f0100e31 <cprintf>
f01058f5:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f01058f8:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01058fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105904:	74 08                	je     f010590e <sched_kill_all+0x8d>
f0105906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105909:	8b 40 44             	mov    0x44(%eax),%eax
f010590c:	eb 05                	jmp    f0105913 <sched_kill_all+0x92>
f010590e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105913:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105918:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010591d:	85 c0                	test   %eax,%eax
f010591f:	75 8d                	jne    f01058ae <sched_kill_all+0x2d>
f0105921:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105925:	75 87                	jne    f01058ae <sched_kill_all+0x2d>
f0105927:	eb 10                	jmp    f0105939 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105929:	83 ec 0c             	sub    $0xc,%esp
f010592c:	68 7b 18 13 f0       	push   $0xf013187b
f0105931:	e8 fb b4 ff ff       	call   f0100e31 <cprintf>
f0105936:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105939:	83 ec 0c             	sub    $0xc,%esp
f010593c:	68 7c 17 13 f0       	push   $0xf013177c
f0105941:	e8 eb b4 ff ff       	call   f0100e31 <cprintf>
f0105946:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105949:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105950:	e9 9d 01 00 00       	jmp    f0105af2 <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105955:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105960:	8b 00                	mov    (%eax),%eax
f0105962:	85 c0                	test   %eax,%eax
f0105964:	0f 84 62 01 00 00    	je     f0105acc <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f010596a:	83 ec 08             	sub    $0x8,%esp
f010596d:	ff 75 f0             	pushl  -0x10(%ebp)
f0105970:	68 98 18 13 f0       	push   $0xf0131898
f0105975:	e8 b7 b4 ff ff       	call   f0100e31 <cprintf>
f010597a:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010597d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105980:	c1 e0 04             	shl    $0x4,%eax
f0105983:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105988:	8b 00                	mov    (%eax),%eax
f010598a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010598d:	e9 f8 00 00 00       	jmp    f0105a8a <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105995:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010599b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010599e:	83 ec 04             	sub    $0x4,%esp
f01059a1:	52                   	push   %edx
f01059a2:	50                   	push   %eax
f01059a3:	68 68 18 13 f0       	push   $0xf0131868
f01059a8:	e8 84 b4 ff ff       	call   f0100e31 <cprintf>
f01059ad:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01059b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059b4:	75 17                	jne    f01059cd <sched_kill_all+0x14c>
f01059b6:	83 ec 04             	sub    $0x4,%esp
f01059b9:	68 43 16 13 f0       	push   $0xf0131643
f01059be:	68 e5 01 00 00       	push   $0x1e5
f01059c3:	68 07 16 13 f0       	push   $0xf0131607
f01059c8:	e8 e3 a7 ff ff       	call   f01001b0 <_panic>
f01059cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059d0:	8b 40 44             	mov    0x44(%eax),%eax
f01059d3:	85 c0                	test   %eax,%eax
f01059d5:	74 11                	je     f01059e8 <sched_kill_all+0x167>
f01059d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059da:	8b 40 44             	mov    0x44(%eax),%eax
f01059dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059e0:	8b 52 48             	mov    0x48(%edx),%edx
f01059e3:	89 50 48             	mov    %edx,0x48(%eax)
f01059e6:	eb 14                	jmp    f01059fc <sched_kill_all+0x17b>
f01059e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059eb:	8b 40 48             	mov    0x48(%eax),%eax
f01059ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059f1:	c1 e2 04             	shl    $0x4,%edx
f01059f4:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f01059fa:	89 02                	mov    %eax,(%edx)
f01059fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059ff:	8b 40 48             	mov    0x48(%eax),%eax
f0105a02:	85 c0                	test   %eax,%eax
f0105a04:	74 11                	je     f0105a17 <sched_kill_all+0x196>
f0105a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a09:	8b 40 48             	mov    0x48(%eax),%eax
f0105a0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a0f:	8b 52 44             	mov    0x44(%edx),%edx
f0105a12:	89 50 44             	mov    %edx,0x44(%eax)
f0105a15:	eb 14                	jmp    f0105a2b <sched_kill_all+0x1aa>
f0105a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a1a:	8b 40 44             	mov    0x44(%eax),%eax
f0105a1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a20:	c1 e2 04             	shl    $0x4,%edx
f0105a23:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105a29:	89 02                	mov    %eax,(%edx)
f0105a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a2e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a38:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a42:	c1 e0 04             	shl    $0x4,%eax
f0105a45:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105a4a:	8b 00                	mov    (%eax),%eax
f0105a4c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a52:	c1 e0 04             	shl    $0x4,%eax
f0105a55:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105a5a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105a5c:	83 ec 0c             	sub    $0xc,%esp
f0105a5f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a62:	e8 76 3b 00 00       	call   f01095dd <env_free>
f0105a67:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105a6a:	83 ec 0c             	sub    $0xc,%esp
f0105a6d:	68 89 16 13 f0       	push   $0xf0131689
f0105a72:	e8 ba b3 ff ff       	call   f0100e31 <cprintf>
f0105a77:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7d:	c1 e0 04             	shl    $0x4,%eax
f0105a80:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105a85:	8b 00                	mov    (%eax),%eax
f0105a87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a8e:	74 08                	je     f0105a98 <sched_kill_all+0x217>
f0105a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a93:	8b 40 44             	mov    0x44(%eax),%eax
f0105a96:	eb 05                	jmp    f0105a9d <sched_kill_all+0x21c>
f0105a98:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa0:	c1 e2 04             	shl    $0x4,%edx
f0105aa3:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105aa9:	89 02                	mov    %eax,(%edx)
f0105aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aae:	c1 e0 04             	shl    $0x4,%eax
f0105ab1:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105ab6:	8b 00                	mov    (%eax),%eax
f0105ab8:	85 c0                	test   %eax,%eax
f0105aba:	0f 85 d2 fe ff ff    	jne    f0105992 <sched_kill_all+0x111>
f0105ac0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ac4:	0f 85 c8 fe ff ff    	jne    f0105992 <sched_kill_all+0x111>
f0105aca:	eb 13                	jmp    f0105adf <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105acc:	83 ec 08             	sub    $0x8,%esp
f0105acf:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ad2:	68 d8 17 13 f0       	push   $0xf01317d8
f0105ad7:	e8 55 b3 ff ff       	call   f0100e31 <cprintf>
f0105adc:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105adf:	83 ec 0c             	sub    $0xc,%esp
f0105ae2:	68 7c 17 13 f0       	push   $0xf013177c
f0105ae7:	e8 45 b3 ff ff       	call   f0100e31 <cprintf>
f0105aec:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105aef:	ff 45 f0             	incl   -0x10(%ebp)
f0105af2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0105af7:	0f b6 c0             	movzbl %al,%eax
f0105afa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105afd:	0f 8f 52 fe ff ff    	jg     f0105955 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105b03:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0105b08:	85 c0                	test   %eax,%eax
f0105b0a:	0f 84 95 00 00 00    	je     f0105ba5 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105b10:	83 ec 0c             	sub    $0xc,%esp
f0105b13:	68 cc 18 13 f0       	push   $0xf01318cc
f0105b18:	e8 14 b3 ff ff       	call   f0100e31 <cprintf>
f0105b1d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b20:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0105b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b28:	eb 52                	jmp    f0105b7c <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b2d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b36:	83 ec 04             	sub    $0x4,%esp
f0105b39:	52                   	push   %edx
f0105b3a:	50                   	push   %eax
f0105b3b:	68 68 18 13 f0       	push   $0xf0131868
f0105b40:	e8 ec b2 ff ff       	call   f0100e31 <cprintf>
f0105b45:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105b48:	83 ec 0c             	sub    $0xc,%esp
f0105b4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105b4e:	e8 6f f3 ff ff       	call   f0104ec2 <sched_remove_exit>
f0105b53:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105b56:	83 ec 0c             	sub    $0xc,%esp
f0105b59:	ff 75 f4             	pushl  -0xc(%ebp)
f0105b5c:	e8 7c 3a 00 00       	call   f01095dd <env_free>
f0105b61:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105b64:	83 ec 0c             	sub    $0xc,%esp
f0105b67:	68 89 16 13 f0       	push   $0xf0131689
f0105b6c:	e8 c0 b2 ff ff       	call   f0100e31 <cprintf>
f0105b71:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b74:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b80:	74 08                	je     f0105b8a <sched_kill_all+0x309>
f0105b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b85:	8b 40 44             	mov    0x44(%eax),%eax
f0105b88:	eb 05                	jmp    f0105b8f <sched_kill_all+0x30e>
f0105b8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0105b8f:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f0105b94:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105b99:	85 c0                	test   %eax,%eax
f0105b9b:	75 8d                	jne    f0105b2a <sched_kill_all+0x2a9>
f0105b9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba1:	75 87                	jne    f0105b2a <sched_kill_all+0x2a9>
f0105ba3:	eb 10                	jmp    f0105bb5 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105ba5:	83 ec 0c             	sub    $0xc,%esp
f0105ba8:	68 1e 18 13 f0       	push   $0xf013181e
f0105bad:	e8 7f b2 ff ff       	call   f0100e31 <cprintf>
f0105bb2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105bb5:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105bbc:	00 00 00 
	fos_scheduler();
f0105bbf:	e8 89 02 00 00       	call   f0105e4d <fos_scheduler>

f0105bc4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105bc4:	55                   	push   %ebp
f0105bc5:	89 e5                	mov    %esp,%ebp
f0105bc7:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105bca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105bd1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105bd8:	e9 3e 01 00 00       	jmp    f0105d1b <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105be0:	c1 e0 04             	shl    $0x4,%eax
f0105be3:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105be8:	8b 00                	mov    (%eax),%eax
f0105bea:	85 c0                	test   %eax,%eax
f0105bec:	0f 84 26 01 00 00    	je     f0105d18 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105bf2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105bfc:	c1 e0 04             	shl    $0x4,%eax
f0105bff:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105c04:	8b 00                	mov    (%eax),%eax
f0105c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c09:	e9 ca 00 00 00       	jmp    f0105cd8 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105c0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c12:	75 17                	jne    f0105c2b <sched_exit_all_ready_envs+0x67>
f0105c14:	83 ec 04             	sub    $0x4,%esp
f0105c17:	68 43 16 13 f0       	push   $0xf0131643
f0105c1c:	68 14 02 00 00       	push   $0x214
f0105c21:	68 07 16 13 f0       	push   $0xf0131607
f0105c26:	e8 85 a5 ff ff       	call   f01001b0 <_panic>
f0105c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c2e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c31:	85 c0                	test   %eax,%eax
f0105c33:	74 11                	je     f0105c46 <sched_exit_all_ready_envs+0x82>
f0105c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c38:	8b 40 44             	mov    0x44(%eax),%eax
f0105c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c3e:	8b 52 48             	mov    0x48(%edx),%edx
f0105c41:	89 50 48             	mov    %edx,0x48(%eax)
f0105c44:	eb 14                	jmp    f0105c5a <sched_exit_all_ready_envs+0x96>
f0105c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c49:	8b 40 48             	mov    0x48(%eax),%eax
f0105c4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4f:	c1 e2 04             	shl    $0x4,%edx
f0105c52:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0105c58:	89 02                	mov    %eax,(%edx)
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 48             	mov    0x48(%eax),%eax
f0105c60:	85 c0                	test   %eax,%eax
f0105c62:	74 11                	je     f0105c75 <sched_exit_all_ready_envs+0xb1>
f0105c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c67:	8b 40 48             	mov    0x48(%eax),%eax
f0105c6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c6d:	8b 52 44             	mov    0x44(%edx),%edx
f0105c70:	89 50 44             	mov    %edx,0x44(%eax)
f0105c73:	eb 14                	jmp    f0105c89 <sched_exit_all_ready_envs+0xc5>
f0105c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c78:	8b 40 44             	mov    0x44(%eax),%eax
f0105c7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c7e:	c1 e2 04             	shl    $0x4,%edx
f0105c81:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105c87:	89 02                	mov    %eax,(%edx)
f0105c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c8c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c96:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ca0:	c1 e0 04             	shl    $0x4,%eax
f0105ca3:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105ca8:	8b 00                	mov    (%eax),%eax
f0105caa:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cb0:	c1 e0 04             	shl    $0x4,%eax
f0105cb3:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105cb8:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0105cba:	83 ec 0c             	sub    $0xc,%esp
f0105cbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cc0:	e8 ba f1 ff ff       	call   f0104e7f <sched_insert_exit>
f0105cc5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ccb:	c1 e0 04             	shl    $0x4,%eax
f0105cce:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105cd3:	8b 00                	mov    (%eax),%eax
f0105cd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cdc:	74 08                	je     f0105ce6 <sched_exit_all_ready_envs+0x122>
f0105cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce1:	8b 40 44             	mov    0x44(%eax),%eax
f0105ce4:	eb 05                	jmp    f0105ceb <sched_exit_all_ready_envs+0x127>
f0105ce6:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ceb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cee:	c1 e2 04             	shl    $0x4,%edx
f0105cf1:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105cf7:	89 02                	mov    %eax,(%edx)
f0105cf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cfc:	c1 e0 04             	shl    $0x4,%eax
f0105cff:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105d04:	8b 00                	mov    (%eax),%eax
f0105d06:	85 c0                	test   %eax,%eax
f0105d08:	0f 85 00 ff ff ff    	jne    f0105c0e <sched_exit_all_ready_envs+0x4a>
f0105d0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d12:	0f 85 f6 fe ff ff    	jne    f0105c0e <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d18:	ff 45 f0             	incl   -0x10(%ebp)
f0105d1b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0105d20:	0f b6 c0             	movzbl %al,%eax
f0105d23:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105d26:	0f 8f b1 fe ff ff    	jg     f0105bdd <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105d2c:	90                   	nop
f0105d2d:	c9                   	leave  
f0105d2e:	c3                   	ret    

f0105d2f <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f0105d2f:	55                   	push   %ebp
f0105d30:	89 e5                	mov    %esp,%ebp
	return ticks;
f0105d32:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105d37:	8b 15 e4 be 2b f0    	mov    0xf02bbee4,%edx
}
f0105d3d:	5d                   	pop    %ebp
f0105d3e:	c3                   	ret    

f0105d3f <env_get_nice>:
int env_get_nice(struct Env* e)
{
f0105d3f:	55                   	push   %ebp
f0105d40:	89 e5                	mov    %esp,%ebp
f0105d42:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d45:	83 ec 04             	sub    $0x4,%esp
f0105d48:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d4d:	68 26 02 00 00       	push   $0x226
f0105d52:	68 07 16 13 f0       	push   $0xf0131607
f0105d57:	e8 54 a4 ff ff       	call   f01001b0 <_panic>

f0105d5c <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0105d5c:	55                   	push   %ebp
f0105d5d:	89 e5                	mov    %esp,%ebp
f0105d5f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d62:	83 ec 04             	sub    $0x4,%esp
f0105d65:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d6a:	68 2e 02 00 00       	push   $0x22e
f0105d6f:	68 07 16 13 f0       	push   $0xf0131607
f0105d74:	e8 37 a4 ff ff       	call   f01001b0 <_panic>

f0105d79 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0105d79:	55                   	push   %ebp
f0105d7a:	89 e5                	mov    %esp,%ebp
f0105d7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d7f:	83 ec 04             	sub    $0x4,%esp
f0105d82:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d87:	68 35 02 00 00       	push   $0x235
f0105d8c:	68 07 16 13 f0       	push   $0xf0131607
f0105d91:	e8 1a a4 ff ff       	call   f01001b0 <_panic>

f0105d96 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0105d96:	55                   	push   %ebp
f0105d97:	89 e5                	mov    %esp,%ebp
f0105d99:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d9c:	83 ec 04             	sub    $0x4,%esp
f0105d9f:	68 f8 18 13 f0       	push   $0xf01318f8
f0105da4:	68 3d 02 00 00       	push   $0x23d
f0105da9:	68 07 16 13 f0       	push   $0xf0131607
f0105dae:	e8 fd a3 ff ff       	call   f01001b0 <_panic>

f0105db3 <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0105db3:	55                   	push   %ebp
f0105db4:	89 e5                	mov    %esp,%ebp
f0105db6:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105dbb:	85 c0                	test   %eax,%eax
f0105dbd:	75 07                	jne    f0105dc6 <isSchedMethodRR+0x13>
f0105dbf:	b8 01 00 00 00       	mov    $0x1,%eax
f0105dc4:	eb 05                	jmp    f0105dcb <isSchedMethodRR+0x18>
f0105dc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0105dcb:	5d                   	pop    %ebp
f0105dcc:	c3                   	ret    

f0105dcd <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0105dcd:	55                   	push   %ebp
f0105dce:	89 e5                	mov    %esp,%ebp
f0105dd0:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105dd5:	83 f8 01             	cmp    $0x1,%eax
f0105dd8:	75 07                	jne    f0105de1 <isSchedMethodMLFQ+0x14>
f0105dda:	b8 01 00 00 00       	mov    $0x1,%eax
f0105ddf:	eb 05                	jmp    f0105de6 <isSchedMethodMLFQ+0x19>
f0105de1:	b8 00 00 00 00       	mov    $0x0,%eax
f0105de6:	5d                   	pop    %ebp
f0105de7:	c3                   	ret    

f0105de8 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0105de8:	55                   	push   %ebp
f0105de9:	89 e5                	mov    %esp,%ebp
f0105deb:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105df0:	83 f8 02             	cmp    $0x2,%eax
f0105df3:	75 07                	jne    f0105dfc <isSchedMethodBSD+0x14>
f0105df5:	b8 01 00 00 00       	mov    $0x1,%eax
f0105dfa:	eb 05                	jmp    f0105e01 <isSchedMethodBSD+0x19>
f0105dfc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e01:	5d                   	pop    %ebp
f0105e02:	c3                   	ret    

f0105e03 <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f0105e03:	55                   	push   %ebp
f0105e04:	89 e5                	mov    %esp,%ebp
f0105e06:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0105e09:	c7 05 94 9a 2b f0 00 	movl   $0x0,0xf02b9a94
f0105e10:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f0105e13:	83 ec 0c             	sub    $0xc,%esp
f0105e16:	6a 0a                	push   $0xa
f0105e18:	e8 2b 01 00 00       	call   f0105f48 <sched_init_RR>
f0105e1d:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0105e20:	83 ec 0c             	sub    $0xc,%esp
f0105e23:	68 b8 be 2b f0       	push   $0xf02bbeb8
f0105e28:	e8 8b eb ff ff       	call   f01049b8 <init_queue>
f0105e2d:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0105e30:	83 ec 0c             	sub    $0xc,%esp
f0105e33:	68 84 9a 2b f0       	push   $0xf02b9a84
f0105e38:	e8 7b eb ff ff       	call   f01049b8 <init_queue>
f0105e3d:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0105e40:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105e47:	00 00 00 
}
f0105e4a:	90                   	nop
f0105e4b:	c9                   	leave  
f0105e4c:	c3                   	ret    

f0105e4d <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0105e4d:	55                   	push   %ebp
f0105e4e:	89 e5                	mov    %esp,%ebp
f0105e50:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f0105e53:	e8 c0 7e 02 00       	call   f012dd18 <chk1>
	scheduler_status = SCH_STARTED;
f0105e58:	c7 05 d4 be 2b f0 01 	movl   $0x1,0xf02bbed4
f0105e5f:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0105e62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0105e69:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105e6e:	85 c0                	test   %eax,%eax
f0105e70:	75 48                	jne    f0105eba <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0105e72:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105e77:	85 c0                	test   %eax,%eax
f0105e79:	74 16                	je     f0105e91 <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0105e7b:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105e80:	83 ec 08             	sub    $0x8,%esp
f0105e83:	50                   	push   %eax
f0105e84:	68 20 3b 25 f0       	push   $0xf0253b20
f0105e89:	e8 6b eb ff ff       	call   f01049f9 <enqueue>
f0105e8e:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0105e91:	83 ec 0c             	sub    $0xc,%esp
f0105e94:	68 20 3b 25 f0       	push   $0xf0253b20
f0105e99:	e8 ec eb ff ff       	call   f0104a8a <dequeue>
f0105e9e:	83 c4 10             	add    $0x10,%esp
f0105ea1:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0105ea4:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0105ea9:	0f b6 c0             	movzbl %al,%eax
f0105eac:	83 ec 0c             	sub    $0xc,%esp
f0105eaf:	50                   	push   %eax
f0105eb0:	e8 31 e9 ff ff       	call   f01047e6 <kclock_set_quantum>
f0105eb5:	83 c4 10             	add    $0x10,%esp
f0105eb8:	eb 26                	jmp    f0105ee0 <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0105eba:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105ebf:	83 f8 01             	cmp    $0x1,%eax
f0105ec2:	75 0a                	jne    f0105ece <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0105ec4:	e8 f9 00 00 00       	call   f0105fc2 <fos_scheduler_MLFQ>
f0105ec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ecc:	eb 12                	jmp    f0105ee0 <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f0105ece:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105ed3:	83 f8 02             	cmp    $0x2,%eax
f0105ed6:	75 08                	jne    f0105ee0 <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f0105ed8:	e8 02 01 00 00       	call   f0105fdf <fos_scheduler_BSD>
f0105edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0105ee0:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105ee5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0105ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eeb:	a3 34 32 25 f0       	mov    %eax,0xf0253234
	chk2(next_env) ;
f0105ef0:	83 ec 0c             	sub    $0xc,%esp
f0105ef3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ef6:	e8 5a 7e 02 00       	call   f012dd55 <chk2>
f0105efb:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0105efe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f01:	a3 34 32 25 f0       	mov    %eax,0xf0253234

	//sched_print_all();

	if(next_env != NULL)
f0105f06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f0a:	74 0b                	je     f0105f17 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0105f0c:	83 ec 0c             	sub    $0xc,%esp
f0105f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f12:	e8 69 36 00 00       	call   f0109580 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0105f17:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105f1e:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0105f21:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0105f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0105f29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f2c:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0105f2f:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105f36:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0105f39:	83 ec 0c             	sub    $0xc,%esp
f0105f3c:	6a 00                	push   $0x0
f0105f3e:	e8 0d bc ff ff       	call   f0101b50 <run_command_prompt>
f0105f43:	83 c4 10             	add    $0x10,%esp
f0105f46:	eb f1                	jmp    f0105f39 <fos_scheduler+0xec>

f0105f48 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 18             	sub    $0x18,%esp
f0105f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f51:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0105f54:	c6 05 f4 be 2b f0 01 	movb   $0x1,0xf02bbef4
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0105f5b:	8a 45 f4             	mov    -0xc(%ebp),%al
f0105f5e:	a2 a8 be 2b f0       	mov    %al,0xf02bbea8
	kclock_set_quantum(quantums[0]);
f0105f63:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0105f68:	0f b6 c0             	movzbl %al,%eax
f0105f6b:	83 ec 0c             	sub    $0xc,%esp
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 72 e8 ff ff       	call   f01047e6 <kclock_set_quantum>
f0105f74:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0105f77:	83 ec 0c             	sub    $0xc,%esp
f0105f7a:	68 20 3b 25 f0       	push   $0xf0253b20
f0105f7f:	e8 34 ea ff ff       	call   f01049b8 <init_queue>
f0105f84:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0105f87:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105f8e:	00 00 00 
	scheduler_method = SCH_RR;
f0105f91:	c7 05 c8 be 2b f0 00 	movl   $0x0,0xf02bbec8
f0105f98:	00 00 00 
	//=========================================
	//=========================================
}
f0105f9b:	90                   	nop
f0105f9c:	c9                   	leave  
f0105f9d:	c3                   	ret    

f0105f9e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0105f9e:	55                   	push   %ebp
f0105f9f:	89 e5                	mov    %esp,%ebp
f0105fa1:	83 ec 04             	sub    $0x4,%esp
f0105fa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0105fa7:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0105faa:	90                   	nop
f0105fab:	c9                   	leave  
f0105fac:	c3                   	ret    

f0105fad <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0105fad:	55                   	push   %ebp
f0105fae:	89 e5                	mov    %esp,%ebp
f0105fb0:	83 ec 08             	sub    $0x8,%esp
f0105fb3:	8b 55 08             	mov    0x8(%ebp),%edx
f0105fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fb9:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0105fbc:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f0105fbf:	90                   	nop
f0105fc0:	c9                   	leave  
f0105fc1:	c3                   	ret    

f0105fc2 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0105fc2:	55                   	push   %ebp
f0105fc3:	89 e5                	mov    %esp,%ebp
f0105fc5:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0105fc8:	83 ec 04             	sub    $0x4,%esp
f0105fcb:	68 0c 19 13 f0       	push   $0xf013190c
f0105fd0:	68 b9 00 00 00       	push   $0xb9
f0105fd5:	68 1c 19 13 f0       	push   $0xf013191c
f0105fda:	e8 d1 a1 ff ff       	call   f01001b0 <_panic>

f0105fdf <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0105fdf:	55                   	push   %ebp
f0105fe0:	89 e5                	mov    %esp,%ebp
f0105fe2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105fe5:	83 ec 04             	sub    $0x4,%esp
f0105fe8:	68 2d 19 13 f0       	push   $0xf013192d
f0105fed:	68 c5 00 00 00       	push   $0xc5
f0105ff2:	68 1c 19 13 f0       	push   $0xf013191c
f0105ff7:	e8 b4 a1 ff ff       	call   f01001b0 <_panic>

f0105ffc <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f0105ffc:	55                   	push   %ebp
f0105ffd:	89 e5                	mov    %esp,%ebp
f0105fff:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f0106002:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0106007:	8b 15 e4 be 2b f0    	mov    0xf02bbee4,%edx
f010600d:	83 c0 01             	add    $0x1,%eax
f0106010:	83 d2 00             	adc    $0x0,%edx
f0106013:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0106018:	89 15 e4 be 2b f0    	mov    %edx,0xf02bbee4
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010601e:	83 ec 0c             	sub    $0xc,%esp
f0106021:	6a 01                	push   $0x1
f0106023:	e8 5c 73 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f0106028:	83 c4 10             	add    $0x10,%esp
f010602b:	85 c0                	test   %eax,%eax
f010602d:	74 05                	je     f0106034 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f010602f:	e8 05 00 00 00       	call   f0106039 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106034:	e8 14 fe ff ff       	call   f0105e4d <fos_scheduler>

f0106039 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106039:	55                   	push   %ebp
f010603a:	89 e5                	mov    %esp,%ebp
f010603c:	53                   	push   %ebx
f010603d:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f0106040:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0106045:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106048:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010604c:	0f 84 a9 01 00 00    	je     f01061fb <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106059:	e9 9f 00 00 00       	jmp    f01060fd <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010605e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106061:	89 d0                	mov    %edx,%eax
f0106063:	01 c0                	add    %eax,%eax
f0106065:	01 d0                	add    %edx,%eax
f0106067:	c1 e0 03             	shl    $0x3,%eax
f010606a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0106070:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106073:	01 d0                	add    %edx,%eax
f0106075:	83 c0 08             	add    $0x8,%eax
f0106078:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	8a 40 04             	mov    0x4(%eax),%al
f0106081:	3c 01                	cmp    $0x1,%al
f0106083:	74 74                	je     f01060f9 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106085:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106088:	8b 00                	mov    (%eax),%eax
f010608a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f010608d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106090:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106096:	83 ec 08             	sub    $0x8,%esp
f0106099:	ff 75 e4             	pushl  -0x1c(%ebp)
f010609c:	50                   	push   %eax
f010609d:	e8 75 1c 00 00       	call   f0107d17 <pt_get_page_permissions>
f01060a2:	83 c4 10             	add    $0x10,%esp
f01060a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f01060a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060ab:	8b 40 08             	mov    0x8(%eax),%eax
f01060ae:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f01060b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060b4:	83 e0 20             	and    $0x20,%eax
f01060b7:	85 c0                	test   %eax,%eax
f01060b9:	74 2e                	je     f01060e9 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01060bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060be:	c1 e8 02             	shr    $0x2,%eax
f01060c1:	0d 00 00 00 80       	or     $0x80000000,%eax
f01060c6:	89 c2                	mov    %eax,%edx
f01060c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060cb:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f01060ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060d1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01060d7:	6a 20                	push   $0x20
f01060d9:	6a 00                	push   $0x0
f01060db:	ff 75 e4             	pushl  -0x1c(%ebp)
f01060de:	50                   	push   %eax
f01060df:	e8 6f 1b 00 00       	call   f0107c53 <pt_set_page_permissions>
f01060e4:	83 c4 10             	add    $0x10,%esp
f01060e7:	eb 11                	jmp    f01060fa <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01060e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060ec:	c1 e8 02             	shr    $0x2,%eax
f01060ef:	89 c2                	mov    %eax,%edx
f01060f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060f4:	89 50 08             	mov    %edx,0x8(%eax)
f01060f7:	eb 01                	jmp    f01060fa <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01060f9:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01060fa:	ff 45 f4             	incl   -0xc(%ebp)
f01060fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106100:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0106106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106109:	39 c2                	cmp    %eax,%edx
f010610b:	0f 87 4d ff ff ff    	ja     f010605e <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106111:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106118:	e9 d4 00 00 00       	jmp    f01061f1 <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010611d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106120:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106123:	89 d0                	mov    %edx,%eax
f0106125:	01 c0                	add    %eax,%eax
f0106127:	01 d0                	add    %edx,%eax
f0106129:	c1 e0 03             	shl    $0x3,%eax
f010612c:	01 c8                	add    %ecx,%eax
f010612e:	05 84 d5 01 00       	add    $0x1d584,%eax
f0106133:	8a 00                	mov    (%eax),%al
f0106135:	3c 01                	cmp    $0x1,%al
f0106137:	0f 84 b1 00 00 00    	je     f01061ee <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010613d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106140:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106143:	89 d0                	mov    %edx,%eax
f0106145:	01 c0                	add    %eax,%eax
f0106147:	01 d0                	add    %edx,%eax
f0106149:	c1 e0 03             	shl    $0x3,%eax
f010614c:	01 c8                	add    %ecx,%eax
f010614e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0106153:	8b 00                	mov    (%eax),%eax
f0106155:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106158:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010615b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010615e:	89 d0                	mov    %edx,%eax
f0106160:	01 c0                	add    %eax,%eax
f0106162:	01 d0                	add    %edx,%eax
f0106164:	c1 e0 03             	shl    $0x3,%eax
f0106167:	01 c8                	add    %ecx,%eax
f0106169:	05 88 d5 01 00       	add    $0x1d588,%eax
f010616e:	8b 00                	mov    (%eax),%eax
f0106170:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106173:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106176:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010617c:	83 ec 08             	sub    $0x8,%esp
f010617f:	ff 75 d8             	pushl  -0x28(%ebp)
f0106182:	50                   	push   %eax
f0106183:	e8 6b 1c 00 00       	call   f0107df3 <pd_is_table_used>
f0106188:	83 c4 10             	add    $0x10,%esp
f010618b:	85 c0                	test   %eax,%eax
f010618d:	74 3f                	je     f01061ce <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010618f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106192:	c1 e8 02             	shr    $0x2,%eax
f0106195:	0d 00 00 00 80       	or     $0x80000000,%eax
f010619a:	89 c1                	mov    %eax,%ecx
f010619c:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010619f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01061a2:	89 d0                	mov    %edx,%eax
f01061a4:	01 c0                	add    %eax,%eax
f01061a6:	01 d0                	add    %edx,%eax
f01061a8:	c1 e0 03             	shl    $0x3,%eax
f01061ab:	01 d8                	add    %ebx,%eax
f01061ad:	05 88 d5 01 00       	add    $0x1d588,%eax
f01061b2:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f01061b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01061b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01061bd:	83 ec 08             	sub    $0x8,%esp
f01061c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01061c3:	50                   	push   %eax
f01061c4:	e8 4e 1c 00 00       	call   f0107e17 <pd_set_table_unused>
f01061c9:	83 c4 10             	add    $0x10,%esp
f01061cc:	eb 20                	jmp    f01061ee <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f01061ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01061d1:	c1 e8 02             	shr    $0x2,%eax
f01061d4:	89 c1                	mov    %eax,%ecx
f01061d6:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01061d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01061dc:	89 d0                	mov    %edx,%eax
f01061de:	01 c0                	add    %eax,%eax
f01061e0:	01 d0                	add    %edx,%eax
f01061e2:	c1 e0 03             	shl    $0x3,%eax
f01061e5:	01 d8                	add    %ebx,%eax
f01061e7:	05 88 d5 01 00       	add    $0x1d588,%eax
f01061ec:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01061ee:	ff 45 f0             	incl   -0x10(%ebp)
f01061f1:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01061f5:	0f 8e 22 ff ff ff    	jle    f010611d <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01061fb:	90                   	nop
f01061fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01061ff:	c9                   	leave  
f0106200:	c3                   	ret    

f0106201 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106201:	55                   	push   %ebp
f0106202:	89 e5                	mov    %esp,%ebp
f0106204:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106207:	c7 05 2c 32 25 f0 01 	movl   $0x1,0xf025322c
f010620e:	00 00 00 
f0106211:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106218:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010621c:	8a 45 b2             	mov    -0x4e(%ebp),%al
f010621f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106222:	ee                   	out    %al,(%dx)
f0106223:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f010622a:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f010622e:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106231:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106234:	ee                   	out    %al,(%dx)
f0106235:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f010623c:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106240:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106243:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106246:	ee                   	out    %al,(%dx)
f0106247:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010624e:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106252:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106255:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106258:	ee                   	out    %al,(%dx)
f0106259:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106260:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106264:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010626a:	ee                   	out    %al,(%dx)
f010626b:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106272:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106276:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106279:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010627c:	ee                   	out    %al,(%dx)
f010627d:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106284:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106288:	8a 45 b8             	mov    -0x48(%ebp),%al
f010628b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010628e:	ee                   	out    %al,(%dx)
f010628f:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106296:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f010629a:	8a 45 b9             	mov    -0x47(%ebp),%al
f010629d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01062a0:	ee                   	out    %al,(%dx)
f01062a1:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f01062a8:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f01062ac:	8a 45 ba             	mov    -0x46(%ebp),%al
f01062af:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01062b2:	ee                   	out    %al,(%dx)
f01062b3:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f01062ba:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f01062be:	8a 45 bb             	mov    -0x45(%ebp),%al
f01062c1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01062c4:	ee                   	out    %al,(%dx)
f01062c5:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f01062cc:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f01062d0:	8a 45 bc             	mov    -0x44(%ebp),%al
f01062d3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01062d6:	ee                   	out    %al,(%dx)
f01062d7:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01062de:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01062e2:	8a 45 bd             	mov    -0x43(%ebp),%al
f01062e5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01062e8:	ee                   	out    %al,(%dx)
f01062e9:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01062f0:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01062f4:	8a 45 be             	mov    -0x42(%ebp),%al
f01062f7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01062fa:	ee                   	out    %al,(%dx)
f01062fb:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106302:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106306:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106309:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010630c:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f010630d:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0106313:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106317:	74 15                	je     f010632e <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106319:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f010631f:	0f b7 c0             	movzwl %ax,%eax
f0106322:	83 ec 0c             	sub    $0xc,%esp
f0106325:	50                   	push   %eax
f0106326:	e8 06 00 00 00       	call   f0106331 <irq_setmask_8259A>
f010632b:	83 c4 10             	add    $0x10,%esp
}
f010632e:	90                   	nop
f010632f:	c9                   	leave  
f0106330:	c3                   	ret    

f0106331 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106331:	55                   	push   %ebp
f0106332:	89 e5                	mov    %esp,%ebp
f0106334:	83 ec 14             	sub    $0x14,%esp
f0106337:	8b 45 08             	mov    0x8(%ebp),%eax
f010633a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010633e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106341:	66 a3 4c c9 18 f0    	mov    %ax,0xf018c94c
	if (!didinit)
f0106347:	a1 2c 32 25 f0       	mov    0xf025322c,%eax
f010634c:	85 c0                	test   %eax,%eax
f010634e:	74 34                	je     f0106384 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0106350:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106353:	0f b6 c0             	movzbl %al,%eax
f0106356:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f010635d:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106360:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106363:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106366:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106367:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010636a:	66 c1 e8 08          	shr    $0x8,%ax
f010636e:	0f b6 c0             	movzbl %al,%eax
f0106371:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106378:	88 45 f7             	mov    %al,-0x9(%ebp)
f010637b:	8a 45 f7             	mov    -0x9(%ebp),%al
f010637e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106381:	ee                   	out    %al,(%dx)
f0106382:	eb 01                	jmp    f0106385 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106384:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106385:	c9                   	leave  
f0106386:	c3                   	ret    

f0106387 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106387:	55                   	push   %ebp
f0106388:	89 e5                	mov    %esp,%ebp
f010638a:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f010638d:	83 ec 08             	sub    $0x8,%esp
f0106390:	68 00 10 00 00       	push   $0x1000
f0106395:	68 00 10 00 00       	push   $0x1000
f010639a:	e8 0a 02 00 00       	call   f01065a9 <boot_allocate_space>
f010639f:	83 c4 10             	add    $0x10,%esp
f01063a2:	a3 f0 be 2b f0       	mov    %eax,0xf02bbef0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063a7:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01063ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01063af:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f01063b6:	77 14                	ja     f01063cc <initialize_kernel_VM+0x45>
f01063b8:	ff 75 e8             	pushl  -0x18(%ebp)
f01063bb:	68 44 19 13 f0       	push   $0xf0131944
f01063c0:	6a 45                	push   $0x45
f01063c2:	68 78 19 13 f0       	push   $0xf0131978
f01063c7:	e8 e4 9d ff ff       	call   f01001b0 <_panic>
f01063cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01063cf:	05 00 00 00 10       	add    $0x10000000,%eax
f01063d4:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01063d9:	c7 45 e4 00 40 18 f0 	movl   $0xf0184000,-0x1c(%ebp)
f01063e0:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01063e7:	77 14                	ja     f01063fd <initialize_kernel_VM+0x76>
f01063e9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01063ec:	68 44 19 13 f0       	push   $0xf0131944
f01063f1:	6a 4d                	push   $0x4d
f01063f3:	68 78 19 13 f0       	push   $0xf0131978
f01063f8:	e8 b3 9d ff ff       	call   f01001b0 <_panic>
f01063fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106400:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106406:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010640b:	83 ec 0c             	sub    $0xc,%esp
f010640e:	6a 02                	push   $0x2
f0106410:	52                   	push   %edx
f0106411:	68 00 80 00 00       	push   $0x8000
f0106416:	68 00 80 bf ef       	push   $0xefbf8000
f010641b:	50                   	push   %eax
f010641c:	e8 fc 01 00 00       	call   f010661d <boot_map_range>
f0106421:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0106424:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f010642b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0106432:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106439:	eb 25                	jmp    f0106460 <initialize_kernel_VM+0xd9>
	{
		++nTables;
f010643b:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010643e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106441:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106446:	83 ec 04             	sub    $0x4,%esp
f0106449:	6a 01                	push   $0x1
f010644b:	52                   	push   %edx
f010644c:	50                   	push   %eax
f010644d:	e8 3f 02 00 00       	call   f0106691 <boot_get_page_table>
f0106452:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106455:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010645c:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0106460:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106464:	72 d5                	jb     f010643b <initialize_kernel_VM+0xb4>
f0106466:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010646a:	77 06                	ja     f0106472 <initialize_kernel_VM+0xeb>
f010646c:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0106470:	76 c9                	jbe    f010643b <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0106472:	8b 15 90 be 2b f0    	mov    0xf02bbe90,%edx
f0106478:	89 d0                	mov    %edx,%eax
f010647a:	01 c0                	add    %eax,%eax
f010647c:	01 d0                	add    %edx,%eax
f010647e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106485:	01 c8                	add    %ecx,%eax
f0106487:	01 d0                	add    %edx,%eax
f0106489:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010648c:	83 ec 08             	sub    $0x8,%esp
f010648f:	68 00 10 00 00       	push   $0x1000
f0106494:	ff 75 e0             	pushl  -0x20(%ebp)
f0106497:	e8 0d 01 00 00       	call   f01065a9 <boot_allocate_space>
f010649c:	83 c4 10             	add    $0x10,%esp
f010649f:	a3 d0 be 2b f0       	mov    %eax,0xf02bbed0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f01064a4:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f01064ab:	83 ec 08             	sub    $0x8,%esp
f01064ae:	68 00 10 00 00       	push   $0x1000
f01064b3:	ff 75 dc             	pushl  -0x24(%ebp)
f01064b6:	e8 ee 00 00 00       	call   f01065a9 <boot_allocate_space>
f01064bb:	83 c4 10             	add    $0x10,%esp
f01064be:	a3 10 3b 25 f0       	mov    %eax,0xf0253b10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f01064c3:	e8 fe 04 00 00       	call   f01069c6 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f01064c8:	83 ec 0c             	sub    $0xc,%esp
f01064cb:	6a 08                	push   $0x8
f01064cd:	e8 fb 72 02 00       	call   f012d7cd <nearest_pow2_ceil>
f01064d2:	83 c4 10             	add    $0x10,%esp
f01064d5:	83 ec 04             	sub    $0x4,%esp
f01064d8:	50                   	push   %eax
f01064d9:	6a 08                	push   $0x8
f01064db:	68 98 19 13 f0       	push   $0xf0131998
f01064e0:	e8 4c a9 ff ff       	call   f0100e31 <cprintf>
f01064e5:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01064e8:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01064ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01064f2:	83 ec 08             	sub    $0x8,%esp
f01064f5:	68 00 10 00 00       	push   $0x1000
f01064fa:	50                   	push   %eax
f01064fb:	e8 a9 00 00 00       	call   f01065a9 <boot_allocate_space>
f0106500:	83 c4 10             	add    $0x10,%esp
f0106503:	a3 30 32 25 f0       	mov    %eax,0xf0253230
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0106508:	a1 30 32 25 f0       	mov    0xf0253230,%eax
f010650d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0106510:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0106517:	77 17                	ja     f0106530 <initialize_kernel_VM+0x1a9>
f0106519:	ff 75 d4             	pushl  -0x2c(%ebp)
f010651c:	68 44 19 13 f0       	push   $0xf0131944
f0106521:	68 96 00 00 00       	push   $0x96
f0106526:	68 78 19 13 f0       	push   $0xf0131978
f010652b:	e8 80 9c ff ff       	call   f01001b0 <_panic>
f0106530:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106533:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106539:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010653c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106541:	83 ec 0c             	sub    $0xc,%esp
f0106544:	6a 04                	push   $0x4
f0106546:	51                   	push   %ecx
f0106547:	52                   	push   %edx
f0106548:	68 00 00 c0 ee       	push   $0xeec00000
f010654d:	50                   	push   %eax
f010654e:	e8 ca 00 00 00       	call   f010661d <boot_map_range>
f0106553:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106556:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010655b:	05 ec 0e 00 00       	add    $0xeec,%eax
f0106560:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0106566:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010656c:	8b 12                	mov    (%edx),%edx
f010656e:	83 ca 05             	or     $0x5,%edx
f0106571:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0106573:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106578:	83 ec 0c             	sub    $0xc,%esp
f010657b:	6a 02                	push   $0x2
f010657d:	6a 00                	push   $0x0
f010657f:	68 ff ff ff 0f       	push   $0xfffffff
f0106584:	68 00 00 00 f0       	push   $0xf0000000
f0106589:	50                   	push   %eax
f010658a:	e8 8e 00 00 00       	call   f010661d <boot_map_range>
f010658f:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106592:	e8 0d 7a 02 00       	call   f012dfa4 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106597:	c7 05 80 9a 2b f0 19 	movl   $0x19,0xf02b9a80
f010659e:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f01065a1:	e8 20 03 00 00       	call   f01068c6 <turn_on_paging>
}
f01065a6:	90                   	nop
f01065a7:	c9                   	leave  
f01065a8:	c3                   	ret    

f01065a9 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f01065a9:	55                   	push   %ebp
f01065aa:	89 e5                	mov    %esp,%ebp
f01065ac:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f01065af:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065b4:	85 c0                	test   %eax,%eax
f01065b6:	75 0a                	jne    f01065c2 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f01065b8:	c7 05 ec be 2b f0 2c 	movl   $0xf02de62c,0xf02bbeec
f01065bf:	e6 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f01065c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01065c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01065c8:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065cd:	89 c2                	mov    %eax,%edx
f01065cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065d2:	01 d0                	add    %edx,%eax
f01065d4:	48                   	dec    %eax
f01065d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01065d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065db:	ba 00 00 00 00       	mov    $0x0,%edx
f01065e0:	f7 75 f4             	divl   -0xc(%ebp)
f01065e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065e6:	29 d0                	sub    %edx,%eax
f01065e8:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01065ed:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065f2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01065f5:	8b 15 ec be 2b f0    	mov    0xf02bbeec,%edx
f01065fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01065fe:	01 d0                	add    %edx,%eax
f0106600:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f0106605:	83 ec 04             	sub    $0x4,%esp
f0106608:	ff 75 08             	pushl  0x8(%ebp)
f010660b:	6a 00                	push   $0x0
f010660d:	ff 75 ec             	pushl  -0x14(%ebp)
f0106610:	e8 1b 86 02 00       	call   f012ec30 <memset>
f0106615:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106618:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f010661b:	c9                   	leave  
f010661c:	c3                   	ret    

f010661d <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010661d:	55                   	push   %ebp
f010661e:	89 e5                	mov    %esp,%ebp
f0106620:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010662a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106631:	eb 53                	jmp    f0106686 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106633:	83 ec 04             	sub    $0x4,%esp
f0106636:	6a 01                	push   $0x1
f0106638:	ff 75 0c             	pushl  0xc(%ebp)
f010663b:	ff 75 08             	pushl  0x8(%ebp)
f010663e:	e8 4e 00 00 00       	call   f0106691 <boot_get_page_table>
f0106643:	83 c4 10             	add    $0x10,%esp
f0106646:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106649:	8b 45 0c             	mov    0xc(%ebp),%eax
f010664c:	c1 e8 0c             	shr    $0xc,%eax
f010664f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106657:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010665a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106661:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106664:	01 c2                	add    %eax,%edx
f0106666:	8b 45 18             	mov    0x18(%ebp),%eax
f0106669:	0b 45 14             	or     0x14(%ebp),%eax
f010666c:	83 c8 01             	or     $0x1,%eax
f010666f:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106671:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106678:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010667f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106686:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106689:	3b 45 10             	cmp    0x10(%ebp),%eax
f010668c:	72 a5                	jb     f0106633 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010668e:	90                   	nop
f010668f:	c9                   	leave  
f0106690:	c3                   	ret    

f0106691 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106691:	55                   	push   %ebp
f0106692:	89 e5                	mov    %esp,%ebp
f0106694:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106697:	8b 45 0c             	mov    0xc(%ebp),%eax
f010669a:	c1 e8 16             	shr    $0x16,%eax
f010669d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f01066a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01066a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01066aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01066ad:	01 d0                	add    %edx,%eax
f01066af:	8b 00                	mov    (%eax),%eax
f01066b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01066b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01066b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01066bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f01066bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01066c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066c8:	c1 e8 0c             	shr    $0xc,%eax
f01066cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01066ce:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01066d3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01066d6:	72 17                	jb     f01066ef <boot_get_page_table+0x5e>
f01066d8:	ff 75 e8             	pushl  -0x18(%ebp)
f01066db:	68 c0 19 13 f0       	push   $0xf01319c0
f01066e0:	68 18 01 00 00       	push   $0x118
f01066e5:	68 78 19 13 f0       	push   $0xf0131978
f01066ea:	e8 c1 9a ff ff       	call   f01001b0 <_panic>
f01066ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066f2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01066f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01066fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01066fe:	75 72                	jne    f0106772 <boot_get_page_table+0xe1>
	{
		if (create)
f0106700:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106704:	74 65                	je     f010676b <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106706:	83 ec 08             	sub    $0x8,%esp
f0106709:	68 00 10 00 00       	push   $0x1000
f010670e:	68 00 10 00 00       	push   $0x1000
f0106713:	e8 91 fe ff ff       	call   f01065a9 <boot_allocate_space>
f0106718:	83 c4 10             	add    $0x10,%esp
f010671b:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f010671e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106721:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106724:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010672b:	77 17                	ja     f0106744 <boot_get_page_table+0xb3>
f010672d:	ff 75 dc             	pushl  -0x24(%ebp)
f0106730:	68 44 19 13 f0       	push   $0xf0131944
f0106735:	68 1e 01 00 00       	push   $0x11e
f010673a:	68 78 19 13 f0       	push   $0xf0131978
f010673f:	e8 6c 9a ff ff       	call   f01001b0 <_panic>
f0106744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106747:	05 00 00 00 10       	add    $0x10000000,%eax
f010674c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f010674f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106752:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106759:	8b 45 08             	mov    0x8(%ebp),%eax
f010675c:	01 d0                	add    %edx,%eax
f010675e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106761:	83 ca 03             	or     $0x3,%edx
f0106764:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106766:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106769:	eb 0a                	jmp    f0106775 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010676b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106770:	eb 03                	jmp    f0106775 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106772:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106775:	c9                   	leave  
f0106776:	c3                   	ret    

f0106777 <nvram_read>:


int nvram_read(int r)
{
f0106777:	55                   	push   %ebp
f0106778:	89 e5                	mov    %esp,%ebp
f010677a:	53                   	push   %ebx
f010677b:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010677e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106781:	83 ec 0c             	sub    $0xc,%esp
f0106784:	50                   	push   %eax
f0106785:	e8 6a de ff ff       	call   f01045f4 <mc146818_read>
f010678a:	83 c4 10             	add    $0x10,%esp
f010678d:	89 c3                	mov    %eax,%ebx
f010678f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106792:	40                   	inc    %eax
f0106793:	83 ec 0c             	sub    $0xc,%esp
f0106796:	50                   	push   %eax
f0106797:	e8 58 de ff ff       	call   f01045f4 <mc146818_read>
f010679c:	83 c4 10             	add    $0x10,%esp
f010679f:	c1 e0 08             	shl    $0x8,%eax
f01067a2:	09 d8                	or     %ebx,%eax
}
f01067a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067a7:	c9                   	leave  
f01067a8:	c3                   	ret    

f01067a9 <detect_memory>:

void detect_memory()
{
f01067a9:	55                   	push   %ebp
f01067aa:	89 e5                	mov    %esp,%ebp
f01067ac:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f01067af:	83 ec 0c             	sub    $0xc,%esp
f01067b2:	6a 15                	push   $0x15
f01067b4:	e8 be ff ff ff       	call   f0106777 <nvram_read>
f01067b9:	83 c4 10             	add    $0x10,%esp
f01067bc:	c1 e0 0a             	shl    $0xa,%eax
f01067bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01067c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067c5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01067ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01067cd:	83 ec 0c             	sub    $0xc,%esp
f01067d0:	6a 17                	push   $0x17
f01067d2:	e8 a0 ff ff ff       	call   f0106777 <nvram_read>
f01067d7:	83 c4 10             	add    $0x10,%esp
f01067da:	c1 e0 0a             	shl    $0xa,%eax
f01067dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01067e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01067e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01067eb:	83 ec 0c             	sub    $0xc,%esp
f01067ee:	6a 34                	push   $0x34
f01067f0:	e8 82 ff ff ff       	call   f0106777 <nvram_read>
f01067f5:	83 c4 10             	add    $0x10,%esp
f01067f8:	c1 e0 10             	shl    $0x10,%eax
f01067fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01067fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106801:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106806:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106809:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010680d:	74 18                	je     f0106827 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010680f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106812:	05 00 00 00 01       	add    $0x1000000,%eax
f0106817:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010681a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010681d:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106822:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106825:	eb 19                	jmp    f0106840 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106827:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010682b:	74 0d                	je     f010683a <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010682d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106830:	05 00 00 10 00       	add    $0x100000,%eax
f0106835:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106838:	eb 06                	jmp    f0106840 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010683a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010683d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106840:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106847:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010684a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010684d:	76 32                	jbe    f0106881 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f010684f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106852:	c1 e8 0a             	shr    $0xa,%eax
f0106855:	89 c2                	mov    %eax,%edx
f0106857:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010685a:	c1 e8 0a             	shr    $0xa,%eax
f010685d:	83 ec 04             	sub    $0x4,%esp
f0106860:	52                   	push   %edx
f0106861:	50                   	push   %eax
f0106862:	68 f0 19 13 f0       	push   $0xf01319f0
f0106867:	e8 c5 a5 ff ff       	call   f0100e31 <cprintf>
f010686c:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f010686f:	83 ec 0c             	sub    $0xc,%esp
f0106872:	68 38 1a 13 f0       	push   $0xf0131a38
f0106877:	e8 b5 a5 ff ff       	call   f0100e31 <cprintf>
f010687c:	83 c4 10             	add    $0x10,%esp
		while(1);
f010687f:	eb fe                	jmp    f010687f <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106884:	c1 e8 0c             	shr    $0xc,%eax
f0106887:	a3 90 be 2b f0       	mov    %eax,0xf02bbe90

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010688c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010688f:	c1 e8 0a             	shr    $0xa,%eax
f0106892:	83 ec 08             	sub    $0x8,%esp
f0106895:	50                   	push   %eax
f0106896:	68 cc 1a 13 f0       	push   $0xf0131acc
f010689b:	e8 91 a5 ff ff       	call   f0100e31 <cprintf>
f01068a0:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01068a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01068a6:	c1 e8 0a             	shr    $0xa,%eax
f01068a9:	89 c2                	mov    %eax,%edx
f01068ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01068ae:	c1 e8 0a             	shr    $0xa,%eax
f01068b1:	83 ec 04             	sub    $0x4,%esp
f01068b4:	52                   	push   %edx
f01068b5:	50                   	push   %eax
f01068b6:	68 ed 1a 13 f0       	push   $0xf0131aed
f01068bb:	e8 71 a5 ff ff       	call   f0100e31 <cprintf>
f01068c0:	83 c4 10             	add    $0x10,%esp
}
f01068c3:	90                   	nop
f01068c4:	c9                   	leave  
f01068c5:	c3                   	ret    

f01068c6 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01068c6:	55                   	push   %ebp
f01068c7:	89 e5                	mov    %esp,%ebp
f01068c9:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01068cc:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01068d3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01068da:	eb 24                	jmp    f0106900 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01068dc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01068e1:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01068e4:	c1 e2 02             	shl    $0x2,%edx
f01068e7:	01 c2                	add    %eax,%edx
f01068e9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01068ee:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01068f1:	c1 e1 02             	shl    $0x2,%ecx
f01068f4:	01 c8                	add    %ecx,%eax
f01068f6:	8b 00                	mov    (%eax),%eax
f01068f8:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01068fa:	ff 45 fc             	incl   -0x4(%ebp)
f01068fd:	ff 45 f8             	incl   -0x8(%ebp)
f0106900:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f0106905:	c1 e8 16             	shr    $0x16,%eax
f0106908:	89 c2                	mov    %eax,%edx
f010690a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010690d:	39 c2                	cmp    %eax,%edx
f010690f:	77 cb                	ja     f01068dc <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106911:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0106916:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106919:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010691c:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f010691f:	0f 20 c0             	mov    %cr0,%eax
f0106922:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106925:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106928:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010692b:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106932:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106936:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106939:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010693c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010693f:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106942:	0f 01 15 90 c9 18 f0 	lgdtl  0xf018c990
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106949:	b8 23 00 00 00       	mov    $0x23,%eax
f010694e:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106950:	b8 23 00 00 00       	mov    $0x23,%eax
f0106955:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106957:	b8 10 00 00 00       	mov    $0x10,%eax
f010695c:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010695e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106963:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106965:	b8 10 00 00 00       	mov    $0x10,%eax
f010696a:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010696c:	ea 73 69 10 f0 08 00 	ljmp   $0x8,$0xf0106973
	asm volatile("lldt %%ax" :: "a" (0));
f0106973:	b8 00 00 00 00       	mov    $0x0,%eax
f0106978:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010697b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106982:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106989:	eb 19                	jmp    f01069a4 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010698b:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106990:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106993:	c1 e2 02             	shl    $0x2,%edx
f0106996:	01 d0                	add    %edx,%eax
f0106998:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010699e:	ff 45 f4             	incl   -0xc(%ebp)
f01069a1:	ff 45 f0             	incl   -0x10(%ebp)
f01069a4:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01069a9:	c1 e8 16             	shr    $0x16,%eax
f01069ac:	89 c2                	mov    %eax,%edx
f01069ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069b1:	39 c2                	cmp    %eax,%edx
f01069b3:	77 d6                	ja     f010698b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01069b5:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01069ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01069bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01069c0:	0f 22 d8             	mov    %eax,%cr3
}
f01069c3:	90                   	nop
f01069c4:	c9                   	leave  
f01069c5:	c3                   	ret    

f01069c6 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01069c6:	55                   	push   %ebp
f01069c7:	89 e5                	mov    %esp,%ebp
f01069c9:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01069cc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01069d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01069d4:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01069db:	77 17                	ja     f01069f4 <setup_listing_to_all_page_tables_entries+0x2e>
f01069dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01069e0:	68 44 19 13 f0       	push   $0xf0131944
f01069e5:	68 ae 01 00 00       	push   $0x1ae
f01069ea:	68 78 19 13 f0       	push   $0xf0131978
f01069ef:	e8 bc 97 ff ff       	call   f01001b0 <_panic>
f01069f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069f7:	05 00 00 00 10       	add    $0x10000000,%eax
f01069fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01069ff:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a04:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106a09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106a0c:	83 ca 03             	or     $0x3,%edx
f0106a0f:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106a11:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a16:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106a1c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a21:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a24:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106a2b:	77 17                	ja     f0106a44 <setup_listing_to_all_page_tables_entries+0x7e>
f0106a2d:	ff 75 ec             	pushl  -0x14(%ebp)
f0106a30:	68 44 19 13 f0       	push   $0xf0131944
f0106a35:	68 b3 01 00 00       	push   $0x1b3
f0106a3a:	68 78 19 13 f0       	push   $0xf0131978
f0106a3f:	e8 6c 97 ff ff       	call   f01001b0 <_panic>
f0106a44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a47:	05 00 00 00 10       	add    $0x10000000,%eax
f0106a4c:	83 c8 05             	or     $0x5,%eax
f0106a4f:	89 02                	mov    %eax,(%edx)

}
f0106a51:	90                   	nop
f0106a52:	c9                   	leave  
f0106a53:	c3                   	ret    

f0106a54 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106a54:	55                   	push   %ebp
f0106a55:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5a:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f0106a60:	29 d0                	sub    %edx,%eax
f0106a62:	c1 f8 02             	sar    $0x2,%eax
f0106a65:	89 c2                	mov    %eax,%edx
f0106a67:	89 d0                	mov    %edx,%eax
f0106a69:	c1 e0 03             	shl    $0x3,%eax
f0106a6c:	01 d0                	add    %edx,%eax
f0106a6e:	c1 e0 03             	shl    $0x3,%eax
f0106a71:	01 d0                	add    %edx,%eax
f0106a73:	c1 e0 03             	shl    $0x3,%eax
f0106a76:	01 d0                	add    %edx,%eax
f0106a78:	c1 e0 03             	shl    $0x3,%eax
f0106a7b:	01 d0                	add    %edx,%eax
f0106a7d:	89 c1                	mov    %eax,%ecx
f0106a7f:	c1 e1 0f             	shl    $0xf,%ecx
f0106a82:	01 c8                	add    %ecx,%eax
f0106a84:	c1 e0 03             	shl    $0x3,%eax
f0106a87:	01 d0                	add    %edx,%eax
f0106a89:	f7 d8                	neg    %eax
}
f0106a8b:	5d                   	pop    %ebp
f0106a8c:	c3                   	ret    

f0106a8d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106a8d:	55                   	push   %ebp
f0106a8e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106a90:	ff 75 08             	pushl  0x8(%ebp)
f0106a93:	e8 bc ff ff ff       	call   f0106a54 <to_frame_number>
f0106a98:	83 c4 04             	add    $0x4,%esp
f0106a9b:	c1 e0 0c             	shl    $0xc,%eax
}
f0106a9e:	c9                   	leave  
f0106a9f:	c3                   	ret    

f0106aa0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106aa0:	55                   	push   %ebp
f0106aa1:	89 e5                	mov    %esp,%ebp
f0106aa3:	53                   	push   %ebx
f0106aa4:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aaa:	c1 e8 0c             	shr    $0xc,%eax
f0106aad:	89 c2                	mov    %eax,%edx
f0106aaf:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0106ab4:	39 c2                	cmp    %eax,%edx
f0106ab6:	72 14                	jb     f0106acc <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106ab8:	83 ec 04             	sub    $0x4,%esp
f0106abb:	68 0c 1b 13 f0       	push   $0xf0131b0c
f0106ac0:	6a 55                	push   $0x55
f0106ac2:	68 31 1b 13 f0       	push   $0xf0131b31
f0106ac7:	e8 e4 96 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106acc:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ad2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ad5:	c1 e8 0c             	shr    $0xc,%eax
f0106ad8:	89 c2                	mov    %eax,%edx
f0106ada:	89 d0                	mov    %edx,%eax
f0106adc:	01 c0                	add    %eax,%eax
f0106ade:	01 d0                	add    %edx,%eax
f0106ae0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ae7:	01 d8                	add    %ebx,%eax
f0106ae9:	01 d0                	add    %edx,%eax
f0106aeb:	01 c8                	add    %ecx,%eax
}
f0106aed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106af0:	c9                   	leave  
f0106af1:	c3                   	ret    

f0106af2 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106af2:	55                   	push   %ebp
f0106af3:	89 e5                	mov    %esp,%ebp
f0106af5:	83 ec 10             	sub    $0x10,%esp
f0106af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106afb:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106b01:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106b04:	90                   	nop
f0106b05:	c9                   	leave  
f0106b06:	c3                   	ret    

f0106b07 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106b07:	55                   	push   %ebp
f0106b08:	89 e5                	mov    %esp,%ebp
f0106b0a:	56                   	push   %esi
f0106b0b:	53                   	push   %ebx
f0106b0c:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106b0f:	c7 05 98 be 2b f0 00 	movl   $0x0,0xf02bbe98
f0106b16:	00 00 00 
f0106b19:	c7 05 9c be 2b f0 00 	movl   $0x0,0xf02bbe9c
f0106b20:	00 00 00 
f0106b23:	c7 05 a4 be 2b f0 00 	movl   $0x0,0xf02bbea4
f0106b2a:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106b2d:	c7 05 00 3b 25 f0 00 	movl   $0x0,0xf0253b00
f0106b34:	00 00 00 
f0106b37:	c7 05 04 3b 25 f0 00 	movl   $0x0,0xf0253b04
f0106b3e:	00 00 00 
f0106b41:	c7 05 0c 3b 25 f0 00 	movl   $0x0,0xf0253b0c
f0106b48:	00 00 00 

	frames_info[0].references = 1;
f0106b4b:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b50:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106b56:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b5b:	83 c0 1c             	add    $0x1c,%eax
f0106b5e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106b64:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b69:	83 c0 38             	add    $0x38,%eax
f0106b6c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106b72:	c7 05 dc be 2b f0 00 	movl   $0xf0001000,0xf02bbedc
f0106b79:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106b7c:	c7 05 f8 be 2b f0 00 	movl   $0xf0002000,0xf02bbef8
f0106b83:	20 00 f0 
	i =0;
f0106b86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106b8d:	eb 1f                	jmp    f0106bae <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106b8f:	8b 15 dc be 2b f0    	mov    0xf02bbedc,%edx
f0106b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b98:	01 d0                	add    %edx,%eax
f0106b9a:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106b9d:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0106ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ba6:	01 d0                	add    %edx,%eax
f0106ba8:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106bab:	ff 45 f4             	incl   -0xc(%ebp)
f0106bae:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106bb5:	7e d8                	jle    f0106b8f <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106bb7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bc1:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0106bd1:	f7 75 f0             	divl   -0x10(%ebp)
f0106bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bd7:	29 d0                	sub    %edx,%eax
f0106bd9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106bdc:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106be3:	e9 20 01 00 00       	jmp    f0106d08 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106be8:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106bee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106bf1:	89 d0                	mov    %edx,%eax
f0106bf3:	01 c0                	add    %eax,%eax
f0106bf5:	01 d0                	add    %edx,%eax
f0106bf7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106bfe:	01 d8                	add    %ebx,%eax
f0106c00:	01 d0                	add    %edx,%eax
f0106c02:	01 c8                	add    %ecx,%eax
f0106c04:	83 ec 0c             	sub    $0xc,%esp
f0106c07:	50                   	push   %eax
f0106c08:	e8 31 03 00 00       	call   f0106f3e <initialize_frame_info>
f0106c0d:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106c10:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c19:	89 d0                	mov    %edx,%eax
f0106c1b:	01 c0                	add    %eax,%eax
f0106c1d:	01 d0                	add    %edx,%eax
f0106c1f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106c26:	01 d8                	add    %ebx,%eax
f0106c28:	01 d0                	add    %edx,%eax
f0106c2a:	01 c8                	add    %ecx,%eax
f0106c2c:	85 c0                	test   %eax,%eax
f0106c2e:	75 14                	jne    f0106c44 <initialize_paging+0x13d>
f0106c30:	83 ec 04             	sub    $0x4,%esp
f0106c33:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0106c38:	6a 5c                	push   $0x5c
f0106c3a:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106c3f:	e8 6c 95 ff ff       	call   f01001b0 <_panic>
f0106c44:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c4d:	89 d0                	mov    %edx,%eax
f0106c4f:	01 c0                	add    %eax,%eax
f0106c51:	01 d0                	add    %edx,%eax
f0106c53:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106c5a:	01 d8                	add    %ebx,%eax
f0106c5c:	01 d0                	add    %edx,%eax
f0106c5e:	01 c8                	add    %ecx,%eax
f0106c60:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106c66:	89 10                	mov    %edx,(%eax)
f0106c68:	8b 00                	mov    (%eax),%eax
f0106c6a:	85 c0                	test   %eax,%eax
f0106c6c:	74 27                	je     f0106c95 <initialize_paging+0x18e>
f0106c6e:	8b 0d 98 be 2b f0    	mov    0xf02bbe98,%ecx
f0106c74:	8b 1d d0 be 2b f0    	mov    0xf02bbed0,%ebx
f0106c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c7d:	89 d0                	mov    %edx,%eax
f0106c7f:	01 c0                	add    %eax,%eax
f0106c81:	01 d0                	add    %edx,%eax
f0106c83:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0106c8a:	01 f0                	add    %esi,%eax
f0106c8c:	01 d0                	add    %edx,%eax
f0106c8e:	01 d8                	add    %ebx,%eax
f0106c90:	89 41 04             	mov    %eax,0x4(%ecx)
f0106c93:	eb 21                	jmp    f0106cb6 <initialize_paging+0x1af>
f0106c95:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c9e:	89 d0                	mov    %edx,%eax
f0106ca0:	01 c0                	add    %eax,%eax
f0106ca2:	01 d0                	add    %edx,%eax
f0106ca4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106cab:	01 d8                	add    %ebx,%eax
f0106cad:	01 d0                	add    %edx,%eax
f0106caf:	01 c8                	add    %ecx,%eax
f0106cb1:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106cb6:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106cbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106cbf:	89 d0                	mov    %edx,%eax
f0106cc1:	01 c0                	add    %eax,%eax
f0106cc3:	01 d0                	add    %edx,%eax
f0106cc5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ccc:	01 d8                	add    %ebx,%eax
f0106cce:	01 d0                	add    %edx,%eax
f0106cd0:	01 c8                	add    %ecx,%eax
f0106cd2:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0106cd7:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106cdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ce0:	89 d0                	mov    %edx,%eax
f0106ce2:	01 c0                	add    %eax,%eax
f0106ce4:	01 d0                	add    %edx,%eax
f0106ce6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ced:	01 d8                	add    %ebx,%eax
f0106cef:	01 d0                	add    %edx,%eax
f0106cf1:	01 c8                	add    %ecx,%eax
f0106cf3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106cfa:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0106cff:	40                   	inc    %eax
f0106d00:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106d05:	ff 45 f4             	incl   -0xc(%ebp)
f0106d08:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0b:	85 c0                	test   %eax,%eax
f0106d0d:	79 05                	jns    f0106d14 <initialize_paging+0x20d>
f0106d0f:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106d14:	c1 f8 0c             	sar    $0xc,%eax
f0106d17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106d1a:	0f 8f c8 fe ff ff    	jg     f0106be8 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106d20:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106d27:	eb 25                	jmp    f0106d4e <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f0106d29:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106d2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106d32:	89 d0                	mov    %edx,%eax
f0106d34:	01 c0                	add    %eax,%eax
f0106d36:	01 d0                	add    %edx,%eax
f0106d38:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106d3f:	01 d8                	add    %ebx,%eax
f0106d41:	01 d0                	add    %edx,%eax
f0106d43:	01 c8                	add    %ecx,%eax
f0106d45:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106d4b:	ff 45 f4             	incl   -0xc(%ebp)
f0106d4e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106d55:	7e d2                	jle    f0106d29 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106d57:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106d5e:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f0106d63:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106d66:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106d6d:	77 14                	ja     f0106d83 <initialize_paging+0x27c>
f0106d6f:	ff 75 e0             	pushl  -0x20(%ebp)
f0106d72:	68 8c 1b 13 f0       	push   $0xf0131b8c
f0106d77:	6a 64                	push   $0x64
f0106d79:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106d7e:	e8 2d 94 ff ff       	call   f01001b0 <_panic>
f0106d83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d86:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	01 d0                	add    %edx,%eax
f0106d91:	48                   	dec    %eax
f0106d92:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106d95:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106d9d:	f7 75 e4             	divl   -0x1c(%ebp)
f0106da0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106da3:	29 d0                	sub    %edx,%eax
f0106da5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106da8:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106daf:	eb 25                	jmp    f0106dd6 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f0106db1:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106db7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106dba:	89 d0                	mov    %edx,%eax
f0106dbc:	01 c0                	add    %eax,%eax
f0106dbe:	01 d0                	add    %edx,%eax
f0106dc0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106dc7:	01 d8                	add    %ebx,%eax
f0106dc9:	01 d0                	add    %edx,%eax
f0106dcb:	01 c8                	add    %ecx,%eax
f0106dcd:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106dd3:	ff 45 f4             	incl   -0xc(%ebp)
f0106dd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dd9:	85 c0                	test   %eax,%eax
f0106ddb:	79 05                	jns    f0106de2 <initialize_paging+0x2db>
f0106ddd:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106de2:	c1 f8 0c             	sar    $0xc,%eax
f0106de5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106de8:	7f c7                	jg     f0106db1 <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106dea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ded:	85 c0                	test   %eax,%eax
f0106def:	79 05                	jns    f0106df6 <initialize_paging+0x2ef>
f0106df1:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106df6:	c1 f8 0c             	sar    $0xc,%eax
f0106df9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106dfc:	e9 20 01 00 00       	jmp    f0106f21 <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f0106e01:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e0a:	89 d0                	mov    %edx,%eax
f0106e0c:	01 c0                	add    %eax,%eax
f0106e0e:	01 d0                	add    %edx,%eax
f0106e10:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e17:	01 d8                	add    %ebx,%eax
f0106e19:	01 d0                	add    %edx,%eax
f0106e1b:	01 c8                	add    %ecx,%eax
f0106e1d:	83 ec 0c             	sub    $0xc,%esp
f0106e20:	50                   	push   %eax
f0106e21:	e8 18 01 00 00       	call   f0106f3e <initialize_frame_info>
f0106e26:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106e29:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e32:	89 d0                	mov    %edx,%eax
f0106e34:	01 c0                	add    %eax,%eax
f0106e36:	01 d0                	add    %edx,%eax
f0106e38:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e3f:	01 d8                	add    %ebx,%eax
f0106e41:	01 d0                	add    %edx,%eax
f0106e43:	01 c8                	add    %ecx,%eax
f0106e45:	85 c0                	test   %eax,%eax
f0106e47:	75 14                	jne    f0106e5d <initialize_paging+0x356>
f0106e49:	83 ec 04             	sub    $0x4,%esp
f0106e4c:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0106e51:	6a 70                	push   $0x70
f0106e53:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106e58:	e8 53 93 ff ff       	call   f01001b0 <_panic>
f0106e5d:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e66:	89 d0                	mov    %edx,%eax
f0106e68:	01 c0                	add    %eax,%eax
f0106e6a:	01 d0                	add    %edx,%eax
f0106e6c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e73:	01 d8                	add    %ebx,%eax
f0106e75:	01 d0                	add    %edx,%eax
f0106e77:	01 c8                	add    %ecx,%eax
f0106e79:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106e7f:	89 10                	mov    %edx,(%eax)
f0106e81:	8b 00                	mov    (%eax),%eax
f0106e83:	85 c0                	test   %eax,%eax
f0106e85:	74 27                	je     f0106eae <initialize_paging+0x3a7>
f0106e87:	8b 0d 98 be 2b f0    	mov    0xf02bbe98,%ecx
f0106e8d:	8b 1d d0 be 2b f0    	mov    0xf02bbed0,%ebx
f0106e93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e96:	89 d0                	mov    %edx,%eax
f0106e98:	01 c0                	add    %eax,%eax
f0106e9a:	01 d0                	add    %edx,%eax
f0106e9c:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0106ea3:	01 f0                	add    %esi,%eax
f0106ea5:	01 d0                	add    %edx,%eax
f0106ea7:	01 d8                	add    %ebx,%eax
f0106ea9:	89 41 04             	mov    %eax,0x4(%ecx)
f0106eac:	eb 21                	jmp    f0106ecf <initialize_paging+0x3c8>
f0106eae:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106eb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106eb7:	89 d0                	mov    %edx,%eax
f0106eb9:	01 c0                	add    %eax,%eax
f0106ebb:	01 d0                	add    %edx,%eax
f0106ebd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ec4:	01 d8                	add    %ebx,%eax
f0106ec6:	01 d0                	add    %edx,%eax
f0106ec8:	01 c8                	add    %ecx,%eax
f0106eca:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106ecf:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ed5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ed8:	89 d0                	mov    %edx,%eax
f0106eda:	01 c0                	add    %eax,%eax
f0106edc:	01 d0                	add    %edx,%eax
f0106ede:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ee5:	01 d8                	add    %ebx,%eax
f0106ee7:	01 d0                	add    %edx,%eax
f0106ee9:	01 c8                	add    %ecx,%eax
f0106eeb:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0106ef0:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ef6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ef9:	89 d0                	mov    %edx,%eax
f0106efb:	01 c0                	add    %eax,%eax
f0106efd:	01 d0                	add    %edx,%eax
f0106eff:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106f06:	01 d8                	add    %ebx,%eax
f0106f08:	01 d0                	add    %edx,%eax
f0106f0a:	01 c8                	add    %ecx,%eax
f0106f0c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106f13:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0106f18:	40                   	inc    %eax
f0106f19:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0106f21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f24:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0106f29:	39 c2                	cmp    %eax,%edx
f0106f2b:	0f 82 d0 fe ff ff    	jb     f0106e01 <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106f31:	e8 f2 c5 ff ff       	call   f0103528 <initialize_disk_page_file>
}
f0106f36:	90                   	nop
f0106f37:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0106f3a:	5b                   	pop    %ebx
f0106f3b:	5e                   	pop    %esi
f0106f3c:	5d                   	pop    %ebp
f0106f3d:	c3                   	ret    

f0106f3e <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106f3e:	55                   	push   %ebp
f0106f3f:	89 e5                	mov    %esp,%ebp
f0106f41:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106f44:	83 ec 04             	sub    $0x4,%esp
f0106f47:	6a 1c                	push   $0x1c
f0106f49:	6a 00                	push   $0x0
f0106f4b:	ff 75 08             	pushl  0x8(%ebp)
f0106f4e:	e8 dd 7c 02 00       	call   f012ec30 <memset>
f0106f53:	83 c4 10             	add    $0x10,%esp
}
f0106f56:	90                   	nop
f0106f57:	c9                   	leave  
f0106f58:	c3                   	ret    

f0106f59 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0106f59:	55                   	push   %ebp
f0106f5a:	89 e5                	mov    %esp,%ebp
f0106f5c:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106f5f:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f68:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106f6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f74:	8b 00                	mov    (%eax),%eax
f0106f76:	85 c0                	test   %eax,%eax
f0106f78:	75 17                	jne    f0106f91 <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106f7a:	83 ec 04             	sub    $0x4,%esp
f0106f7d:	68 c0 1b 13 f0       	push   $0xf0131bc0
f0106f82:	68 98 00 00 00       	push   $0x98
f0106f87:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106f8c:	e8 1f 92 ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f94:	8b 00                	mov    (%eax),%eax
f0106f96:	85 c0                	test   %eax,%eax
f0106f98:	75 17                	jne    f0106fb1 <allocate_frame+0x58>
f0106f9a:	83 ec 04             	sub    $0x4,%esp
f0106f9d:	68 0d 1c 13 f0       	push   $0xf0131c0d
f0106fa2:	68 9e 00 00 00       	push   $0x9e
f0106fa7:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106fac:	e8 ff 91 ff ff       	call   f01001b0 <_panic>
f0106fb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fb4:	8b 00                	mov    (%eax),%eax
f0106fb6:	8b 00                	mov    (%eax),%eax
f0106fb8:	85 c0                	test   %eax,%eax
f0106fba:	74 14                	je     f0106fd0 <allocate_frame+0x77>
f0106fbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbf:	8b 00                	mov    (%eax),%eax
f0106fc1:	8b 00                	mov    (%eax),%eax
f0106fc3:	8b 55 08             	mov    0x8(%ebp),%edx
f0106fc6:	8b 12                	mov    (%edx),%edx
f0106fc8:	8b 52 04             	mov    0x4(%edx),%edx
f0106fcb:	89 50 04             	mov    %edx,0x4(%eax)
f0106fce:	eb 0d                	jmp    f0106fdd <allocate_frame+0x84>
f0106fd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd3:	8b 00                	mov    (%eax),%eax
f0106fd5:	8b 40 04             	mov    0x4(%eax),%eax
f0106fd8:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe0:	8b 00                	mov    (%eax),%eax
f0106fe2:	8b 40 04             	mov    0x4(%eax),%eax
f0106fe5:	85 c0                	test   %eax,%eax
f0106fe7:	74 13                	je     f0106ffc <allocate_frame+0xa3>
f0106fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fec:	8b 00                	mov    (%eax),%eax
f0106fee:	8b 40 04             	mov    0x4(%eax),%eax
f0106ff1:	8b 55 08             	mov    0x8(%ebp),%edx
f0106ff4:	8b 12                	mov    (%edx),%edx
f0106ff6:	8b 12                	mov    (%edx),%edx
f0106ff8:	89 10                	mov    %edx,(%eax)
f0106ffa:	eb 0c                	jmp    f0107008 <allocate_frame+0xaf>
f0106ffc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fff:	8b 00                	mov    (%eax),%eax
f0107001:	8b 00                	mov    (%eax),%eax
f0107003:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0107008:	8b 45 08             	mov    0x8(%ebp),%eax
f010700b:	8b 00                	mov    (%eax),%eax
f010700d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107013:	8b 45 08             	mov    0x8(%ebp),%eax
f0107016:	8b 00                	mov    (%eax),%eax
f0107018:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010701f:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0107024:	48                   	dec    %eax
f0107025:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010702a:	8b 45 08             	mov    0x8(%ebp),%eax
f010702d:	8b 00                	mov    (%eax),%eax
f010702f:	8a 40 14             	mov    0x14(%eax),%al
f0107032:	84 c0                	test   %al,%al
f0107034:	74 23                	je     f0107059 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107036:	8b 45 08             	mov    0x8(%ebp),%eax
f0107039:	8b 00                	mov    (%eax),%eax
f010703b:	8b 50 0c             	mov    0xc(%eax),%edx
f010703e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107041:	8b 00                	mov    (%eax),%eax
f0107043:	8b 40 10             	mov    0x10(%eax),%eax
f0107046:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010704c:	83 ec 08             	sub    $0x8,%esp
f010704f:	52                   	push   %edx
f0107050:	50                   	push   %eax
f0107051:	e8 0a 0d 00 00       	call   f0107d60 <pt_clear_page_table_entry>
f0107056:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107059:	8b 45 08             	mov    0x8(%ebp),%eax
f010705c:	8b 00                	mov    (%eax),%eax
f010705e:	83 ec 0c             	sub    $0xc,%esp
f0107061:	50                   	push   %eax
f0107062:	e8 d7 fe ff ff       	call   f0106f3e <initialize_frame_info>
f0107067:	83 c4 10             	add    $0x10,%esp
	return 0;
f010706a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010706f:	c9                   	leave  
f0107070:	c3                   	ret    

f0107071 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0107071:	55                   	push   %ebp
f0107072:	89 e5                	mov    %esp,%ebp
f0107074:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107077:	83 ec 0c             	sub    $0xc,%esp
f010707a:	ff 75 08             	pushl  0x8(%ebp)
f010707d:	e8 bc fe ff ff       	call   f0106f3e <initialize_frame_info>
f0107082:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107085:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107089:	75 17                	jne    f01070a2 <free_frame+0x31>
f010708b:	83 ec 04             	sub    $0x4,%esp
f010708e:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0107093:	68 bb 00 00 00       	push   $0xbb
f0107098:	68 6f 1b 13 f0       	push   $0xf0131b6f
f010709d:	e8 0e 91 ff ff       	call   f01001b0 <_panic>
f01070a2:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f01070a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ab:	89 10                	mov    %edx,(%eax)
f01070ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b0:	8b 00                	mov    (%eax),%eax
f01070b2:	85 c0                	test   %eax,%eax
f01070b4:	74 0d                	je     f01070c3 <free_frame+0x52>
f01070b6:	a1 98 be 2b f0       	mov    0xf02bbe98,%eax
f01070bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01070be:	89 50 04             	mov    %edx,0x4(%eax)
f01070c1:	eb 08                	jmp    f01070cb <free_frame+0x5a>
f01070c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01070c6:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f01070cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ce:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f01070d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01070d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070dd:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f01070e2:	40                   	inc    %eax
f01070e3:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01070e8:	90                   	nop
f01070e9:	c9                   	leave  
f01070ea:	c3                   	ret    

f01070eb <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01070eb:	55                   	push   %ebp
f01070ec:	89 e5                	mov    %esp,%ebp
f01070ee:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01070f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070f4:	8b 40 08             	mov    0x8(%eax),%eax
f01070f7:	48                   	dec    %eax
f01070f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01070fb:	66 89 42 08          	mov    %ax,0x8(%edx)
f01070ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0107102:	8b 40 08             	mov    0x8(%eax),%eax
f0107105:	66 85 c0             	test   %ax,%ax
f0107108:	75 0e                	jne    f0107118 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f010710a:	83 ec 0c             	sub    $0xc,%esp
f010710d:	ff 75 08             	pushl  0x8(%ebp)
f0107110:	e8 5c ff ff ff       	call   f0107071 <free_frame>
f0107115:	83 c4 10             	add    $0x10,%esp
}
f0107118:	90                   	nop
f0107119:	c9                   	leave  
f010711a:	c3                   	ret    

f010711b <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010711b:	55                   	push   %ebp
f010711c:	89 e5                	mov    %esp,%ebp
f010711e:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0107121:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107124:	c1 e8 16             	shr    $0x16,%eax
f0107127:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010712e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107131:	01 d0                	add    %edx,%eax
f0107133:	8b 00                	mov    (%eax),%eax
f0107135:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010713b:	83 e0 01             	and    $0x1,%eax
f010713e:	85 c0                	test   %eax,%eax
f0107140:	74 4e                	je     f0107190 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107142:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107145:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010714a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010714d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107150:	c1 e8 0c             	shr    $0xc,%eax
f0107153:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107156:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010715b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010715e:	72 17                	jb     f0107177 <get_page_table+0x5c>
f0107160:	ff 75 f0             	pushl  -0x10(%ebp)
f0107163:	68 2c 1c 13 f0       	push   $0xf0131c2c
f0107168:	68 e2 00 00 00       	push   $0xe2
f010716d:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107172:	e8 39 90 ff ff       	call   f01001b0 <_panic>
f0107177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010717a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010717f:	89 c2                	mov    %eax,%edx
f0107181:	8b 45 10             	mov    0x10(%ebp),%eax
f0107184:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107186:	b8 00 00 00 00       	mov    $0x0,%eax
f010718b:	e9 8f 00 00 00       	jmp    f010721f <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0107190:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107194:	74 7b                	je     f0107211 <get_page_table+0xf6>
f0107196:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107199:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010719c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010719f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01071a2:	83 ec 0c             	sub    $0xc,%esp
f01071a5:	6a 00                	push   $0x0
f01071a7:	e8 87 4f 00 00       	call   f010c133 <fault_handler>
f01071ac:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01071af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01071b2:	c1 e8 16             	shr    $0x16,%eax
f01071b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01071bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01071bf:	01 d0                	add    %edx,%eax
f01071c1:	8b 00                	mov    (%eax),%eax
f01071c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01071c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071c9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01071ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01071d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071d4:	c1 e8 0c             	shr    $0xc,%eax
f01071d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01071da:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01071df:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01071e2:	72 17                	jb     f01071fb <get_page_table+0xe0>
f01071e4:	ff 75 e8             	pushl  -0x18(%ebp)
f01071e7:	68 2c 1c 13 f0       	push   $0xf0131c2c
f01071ec:	68 fa 00 00 00       	push   $0xfa
f01071f1:	68 6f 1b 13 f0       	push   $0xf0131b6f
f01071f6:	e8 b5 8f ff ff       	call   f01001b0 <_panic>
f01071fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071fe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107203:	89 c2                	mov    %eax,%edx
f0107205:	8b 45 10             	mov    0x10(%ebp),%eax
f0107208:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f010720a:	b8 00 00 00 00       	mov    $0x0,%eax
f010720f:	eb 0e                	jmp    f010721f <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0107211:	8b 45 10             	mov    0x10(%ebp),%eax
f0107214:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010721a:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f010721f:	c9                   	leave  
f0107220:	c3                   	ret    

f0107221 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0107221:	55                   	push   %ebp
f0107222:	89 e5                	mov    %esp,%ebp
f0107224:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0107227:	83 ec 04             	sub    $0x4,%esp
f010722a:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010722d:	50                   	push   %eax
f010722e:	ff 75 0c             	pushl  0xc(%ebp)
f0107231:	ff 75 08             	pushl  0x8(%ebp)
f0107234:	e8 08 00 00 00       	call   f0107241 <__static_cpt>
f0107239:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f010723c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010723f:	c9                   	leave  
f0107240:	c3                   	ret    

f0107241 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0107241:	55                   	push   %ebp
f0107242:	89 e5                	mov    %esp,%ebp
f0107244:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107247:	83 ec 0c             	sub    $0xc,%esp
f010724a:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010724d:	50                   	push   %eax
f010724e:	e8 06 fd ff ff       	call   f0106f59 <allocate_frame>
f0107253:	83 c4 10             	add    $0x10,%esp
f0107256:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107259:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010725c:	83 ec 0c             	sub    $0xc,%esp
f010725f:	50                   	push   %eax
f0107260:	e8 28 f8 ff ff       	call   f0106a8d <to_physical_address>
f0107265:	83 c4 10             	add    $0x10,%esp
f0107268:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010726b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010726e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107271:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107274:	c1 e8 0c             	shr    $0xc,%eax
f0107277:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010727a:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010727f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0107282:	72 17                	jb     f010729b <__static_cpt+0x5a>
f0107284:	ff 75 ec             	pushl  -0x14(%ebp)
f0107287:	68 2c 1c 13 f0       	push   $0xf0131c2c
f010728c:	68 2f 01 00 00       	push   $0x12f
f0107291:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107296:	e8 15 8f ff ff       	call   f01001b0 <_panic>
f010729b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010729e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01072a3:	89 c2                	mov    %eax,%edx
f01072a5:	8b 45 10             	mov    0x10(%ebp),%eax
f01072a8:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f01072aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01072ad:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01072b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072b6:	c1 e8 16             	shr    $0x16,%eax
f01072b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01072c8:	83 ca 07             	or     $0x7,%edx
f01072cb:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01072cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01072d0:	8b 00                	mov    (%eax),%eax
f01072d2:	83 ec 04             	sub    $0x4,%esp
f01072d5:	68 00 10 00 00       	push   $0x1000
f01072da:	6a 00                	push   $0x0
f01072dc:	50                   	push   %eax
f01072dd:	e8 4e 79 02 00       	call   f012ec30 <memset>
f01072e2:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01072e5:	0f 20 d8             	mov    %cr3,%eax
f01072e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01072eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01072ee:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01072f1:	90                   	nop
f01072f2:	c9                   	leave  
f01072f3:	c3                   	ret    

f01072f4 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01072f4:	55                   	push   %ebp
f01072f5:	89 e5                	mov    %esp,%ebp
f01072f7:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01072fa:	ff 75 0c             	pushl  0xc(%ebp)
f01072fd:	e8 8b f7 ff ff       	call   f0106a8d <to_physical_address>
f0107302:	83 c4 04             	add    $0x4,%esp
f0107305:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0107308:	83 ec 04             	sub    $0x4,%esp
f010730b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010730e:	50                   	push   %eax
f010730f:	ff 75 10             	pushl  0x10(%ebp)
f0107312:	ff 75 08             	pushl  0x8(%ebp)
f0107315:	e8 01 fe ff ff       	call   f010711b <get_page_table>
f010731a:	83 c4 10             	add    $0x10,%esp
f010731d:	83 f8 01             	cmp    $0x1,%eax
f0107320:	75 15                	jne    f0107337 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0107322:	83 ec 04             	sub    $0x4,%esp
f0107325:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107328:	50                   	push   %eax
f0107329:	ff 75 10             	pushl  0x10(%ebp)
f010732c:	ff 75 08             	pushl  0x8(%ebp)
f010732f:	e8 0d ff ff ff       	call   f0107241 <__static_cpt>
f0107334:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107337:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010733a:	8b 55 10             	mov    0x10(%ebp),%edx
f010733d:	c1 ea 0c             	shr    $0xc,%edx
f0107340:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107346:	c1 e2 02             	shl    $0x2,%edx
f0107349:	01 d0                	add    %edx,%eax
f010734b:	8b 00                	mov    (%eax),%eax
f010734d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0107350:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107353:	83 e0 01             	and    $0x1,%eax
f0107356:	85 c0                	test   %eax,%eax
f0107358:	74 25                	je     f010737f <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010735a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010735d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107362:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107365:	75 07                	jne    f010736e <map_frame+0x7a>
			return 0;
f0107367:	b8 00 00 00 00       	mov    $0x0,%eax
f010736c:	eb 43                	jmp    f01073b1 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010736e:	83 ec 08             	sub    $0x8,%esp
f0107371:	ff 75 10             	pushl  0x10(%ebp)
f0107374:	ff 75 08             	pushl  0x8(%ebp)
f0107377:	e8 a7 00 00 00       	call   f0107423 <unmap_frame>
f010737c:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010737f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107382:	8b 40 08             	mov    0x8(%eax),%eax
f0107385:	40                   	inc    %eax
f0107386:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107389:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010738d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107390:	8b 55 10             	mov    0x10(%ebp),%edx
f0107393:	c1 ea 0c             	shr    $0xc,%edx
f0107396:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010739c:	c1 e2 02             	shl    $0x2,%edx
f010739f:	01 c2                	add    %eax,%edx
f01073a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01073a4:	0b 45 f4             	or     -0xc(%ebp),%eax
f01073a7:	83 c8 01             	or     $0x1,%eax
f01073aa:	89 02                	mov    %eax,(%edx)

	return 0;
f01073ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073b1:	c9                   	leave  
f01073b2:	c3                   	ret    

f01073b3 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01073b3:	55                   	push   %ebp
f01073b4:	89 e5                	mov    %esp,%ebp
f01073b6:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01073b9:	83 ec 04             	sub    $0x4,%esp
f01073bc:	ff 75 10             	pushl  0x10(%ebp)
f01073bf:	ff 75 0c             	pushl  0xc(%ebp)
f01073c2:	ff 75 08             	pushl  0x8(%ebp)
f01073c5:	e8 51 fd ff ff       	call   f010711b <get_page_table>
f01073ca:	83 c4 10             	add    $0x10,%esp
f01073cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01073d0:	8b 45 10             	mov    0x10(%ebp),%eax
f01073d3:	8b 00                	mov    (%eax),%eax
f01073d5:	85 c0                	test   %eax,%eax
f01073d7:	74 43                	je     f010741c <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01073d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01073dc:	c1 e8 0c             	shr    $0xc,%eax
f01073df:	25 ff 03 00 00       	and    $0x3ff,%eax
f01073e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01073e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01073ea:	8b 00                	mov    (%eax),%eax
f01073ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01073ef:	c1 e2 02             	shl    $0x2,%edx
f01073f2:	01 d0                	add    %edx,%eax
f01073f4:	8b 00                	mov    (%eax),%eax
f01073f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01073f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01073fd:	74 16                	je     f0107415 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01073ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107402:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107407:	83 ec 0c             	sub    $0xc,%esp
f010740a:	50                   	push   %eax
f010740b:	e8 90 f6 ff ff       	call   f0106aa0 <to_frame_info>
f0107410:	83 c4 10             	add    $0x10,%esp
f0107413:	eb 0c                	jmp    f0107421 <get_frame_info+0x6e>
		}
		return 0;
f0107415:	b8 00 00 00 00       	mov    $0x0,%eax
f010741a:	eb 05                	jmp    f0107421 <get_frame_info+0x6e>
	}
	return 0;
f010741c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107421:	c9                   	leave  
f0107422:	c3                   	ret    

f0107423 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0107423:	55                   	push   %ebp
f0107424:	89 e5                	mov    %esp,%ebp
f0107426:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0107429:	83 ec 04             	sub    $0x4,%esp
f010742c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010742f:	50                   	push   %eax
f0107430:	ff 75 0c             	pushl  0xc(%ebp)
f0107433:	ff 75 08             	pushl  0x8(%ebp)
f0107436:	e8 78 ff ff ff       	call   f01073b3 <get_frame_info>
f010743b:	83 c4 10             	add    $0x10,%esp
f010743e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0107441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107445:	74 60                	je     f01074a7 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107447:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010744a:	8a 40 14             	mov    0x14(%eax),%al
f010744d:	84 c0                	test   %al,%al
f010744f:	74 1c                	je     f010746d <unmap_frame+0x4a>
f0107451:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107458:	77 13                	ja     f010746d <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f010745a:	83 ec 08             	sub    $0x8,%esp
f010745d:	ff 75 0c             	pushl  0xc(%ebp)
f0107460:	68 5c 1c 13 f0       	push   $0xf0131c5c
f0107465:	e8 c7 99 ff ff       	call   f0100e31 <cprintf>
f010746a:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010746d:	83 ec 0c             	sub    $0xc,%esp
f0107470:	ff 75 f4             	pushl  -0xc(%ebp)
f0107473:	e8 73 fc ff ff       	call   f01070eb <decrement_references>
f0107478:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010747b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010747e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107481:	c1 ea 0c             	shr    $0xc,%edx
f0107484:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748a:	c1 e2 02             	shl    $0x2,%edx
f010748d:	01 d0                	add    %edx,%eax
f010748f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107495:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107498:	83 ec 08             	sub    $0x8,%esp
f010749b:	50                   	push   %eax
f010749c:	ff 75 08             	pushl  0x8(%ebp)
f010749f:	e8 4e f6 ff ff       	call   f0106af2 <tlb_invalidate>
f01074a4:	83 c4 10             	add    $0x10,%esp
	}
}
f01074a7:	90                   	nop
f01074a8:	c9                   	leave  
f01074a9:	c3                   	ret    

f01074aa <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01074aa:	55                   	push   %ebp
f01074ab:	89 e5                	mov    %esp,%ebp
f01074ad:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01074b0:	ff 75 0c             	pushl  0xc(%ebp)
f01074b3:	e8 d5 f5 ff ff       	call   f0106a8d <to_physical_address>
f01074b8:	83 c4 04             	add    $0x4,%esp
f01074bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074be:	8b 45 10             	mov    0x10(%ebp),%eax
f01074c1:	c1 e8 16             	shr    $0x16,%eax
f01074c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	01 d0                	add    %edx,%eax
f01074d0:	8b 00                	mov    (%eax),%eax
f01074d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01074d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01074e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074e3:	c1 e8 0c             	shr    $0xc,%eax
f01074e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01074e9:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01074ee:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01074f1:	72 17                	jb     f010750a <loadtime_map_frame+0x60>
f01074f3:	ff 75 ec             	pushl  -0x14(%ebp)
f01074f6:	68 2c 1c 13 f0       	push   $0xf0131c2c
f01074fb:	68 e5 01 00 00       	push   $0x1e5
f0107500:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107505:	e8 a6 8c ff ff       	call   f01001b0 <_panic>
f010750a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010750d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107512:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0107515:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107519:	75 15                	jne    f0107530 <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f010751b:	83 ec 04             	sub    $0x4,%esp
f010751e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107521:	50                   	push   %eax
f0107522:	ff 75 10             	pushl  0x10(%ebp)
f0107525:	ff 75 08             	pushl  0x8(%ebp)
f0107528:	e8 14 fd ff ff       	call   f0107241 <__static_cpt>
f010752d:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0107530:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107533:	8b 40 08             	mov    0x8(%eax),%eax
f0107536:	40                   	inc    %eax
f0107537:	8b 55 0c             	mov    0xc(%ebp),%edx
f010753a:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010753e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107541:	8b 55 10             	mov    0x10(%ebp),%edx
f0107544:	c1 ea 0c             	shr    $0xc,%edx
f0107547:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010754d:	c1 e2 02             	shl    $0x2,%edx
f0107550:	01 c2                	add    %eax,%edx
f0107552:	8b 45 14             	mov    0x14(%ebp),%eax
f0107555:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107558:	83 c8 01             	or     $0x1,%eax
f010755b:	89 02                	mov    %eax,(%edx)

	return 0;
f010755d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107562:	c9                   	leave  
f0107563:	c3                   	ret    

f0107564 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107564:	55                   	push   %ebp
f0107565:	89 e5                	mov    %esp,%ebp
f0107567:	57                   	push   %edi
f0107568:	56                   	push   %esi
f0107569:	53                   	push   %ebx
f010756a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010756d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107574:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f010757b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107582:	a1 98 be 2b f0       	mov    0xf02bbe98,%eax
f0107587:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010758a:	eb 1a                	jmp    f01075a6 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010758c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010758f:	8a 40 14             	mov    0x14(%eax),%al
f0107592:	84 c0                	test   %al,%al
f0107594:	74 05                	je     f010759b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107596:	ff 45 e8             	incl   -0x18(%ebp)
f0107599:	eb 03                	jmp    f010759e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010759b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010759e:	a1 a0 be 2b f0       	mov    0xf02bbea0,%eax
f01075a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075aa:	74 07                	je     f01075b3 <calculate_available_frames+0x4f>
f01075ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01075af:	8b 00                	mov    (%eax),%eax
f01075b1:	eb 05                	jmp    f01075b8 <calculate_available_frames+0x54>
f01075b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01075b8:	a3 a0 be 2b f0       	mov    %eax,0xf02bbea0
f01075bd:	a1 a0 be 2b f0       	mov    0xf02bbea0,%eax
f01075c2:	85 c0                	test   %eax,%eax
f01075c4:	75 c6                	jne    f010758c <calculate_available_frames+0x28>
f01075c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075ca:	75 c0                	jne    f010758c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01075cc:	a1 00 3b 25 f0       	mov    0xf0253b00,%eax
f01075d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075d4:	eb 0b                	jmp    f01075e1 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01075d6:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01075d9:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f01075de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075e5:	74 07                	je     f01075ee <calculate_available_frames+0x8a>
f01075e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01075ea:	8b 00                	mov    (%eax),%eax
f01075ec:	eb 05                	jmp    f01075f3 <calculate_available_frames+0x8f>
f01075ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01075f3:	a3 08 3b 25 f0       	mov    %eax,0xf0253b08
f01075f8:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f01075fd:	85 c0                	test   %eax,%eax
f01075ff:	75 d5                	jne    f01075d6 <calculate_available_frames+0x72>
f0107601:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107605:	75 cf                	jne    f01075d6 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107607:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010760a:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010760d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107610:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107616:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107619:	8b 45 08             	mov    0x8(%ebp),%eax
f010761c:	89 c3                	mov    %eax,%ebx
f010761e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107621:	ba 03 00 00 00       	mov    $0x3,%edx
f0107626:	89 df                	mov    %ebx,%edi
f0107628:	89 c6                	mov    %eax,%esi
f010762a:	89 d1                	mov    %edx,%ecx
f010762c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010762e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107631:	83 c4 20             	add    $0x20,%esp
f0107634:	5b                   	pop    %ebx
f0107635:	5e                   	pop    %esi
f0107636:	5f                   	pop    %edi
f0107637:	5d                   	pop    %ebp
f0107638:	c2 04 00             	ret    $0x4

f010763b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010763b:	55                   	push   %ebp
f010763c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107641:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f0107647:	29 d0                	sub    %edx,%eax
f0107649:	c1 f8 02             	sar    $0x2,%eax
f010764c:	89 c2                	mov    %eax,%edx
f010764e:	89 d0                	mov    %edx,%eax
f0107650:	c1 e0 03             	shl    $0x3,%eax
f0107653:	01 d0                	add    %edx,%eax
f0107655:	c1 e0 03             	shl    $0x3,%eax
f0107658:	01 d0                	add    %edx,%eax
f010765a:	c1 e0 03             	shl    $0x3,%eax
f010765d:	01 d0                	add    %edx,%eax
f010765f:	c1 e0 03             	shl    $0x3,%eax
f0107662:	01 d0                	add    %edx,%eax
f0107664:	89 c1                	mov    %eax,%ecx
f0107666:	c1 e1 0f             	shl    $0xf,%ecx
f0107669:	01 c8                	add    %ecx,%eax
f010766b:	c1 e0 03             	shl    $0x3,%eax
f010766e:	01 d0                	add    %edx,%eax
f0107670:	f7 d8                	neg    %eax
}
f0107672:	5d                   	pop    %ebp
f0107673:	c3                   	ret    

f0107674 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107674:	55                   	push   %ebp
f0107675:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107677:	ff 75 08             	pushl  0x8(%ebp)
f010767a:	e8 bc ff ff ff       	call   f010763b <to_frame_number>
f010767f:	83 c4 04             	add    $0x4,%esp
f0107682:	c1 e0 0c             	shl    $0xc,%eax
}
f0107685:	c9                   	leave  
f0107686:	c3                   	ret    

f0107687 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107687:	55                   	push   %ebp
f0107688:	89 e5                	mov    %esp,%ebp
f010768a:	53                   	push   %ebx
f010768b:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f010768e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107691:	c1 e8 0c             	shr    $0xc,%eax
f0107694:	89 c2                	mov    %eax,%edx
f0107696:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010769b:	39 c2                	cmp    %eax,%edx
f010769d:	72 14                	jb     f01076b3 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f010769f:	83 ec 04             	sub    $0x4,%esp
f01076a2:	68 80 1c 13 f0       	push   $0xf0131c80
f01076a7:	6a 55                	push   $0x55
f01076a9:	68 a5 1c 13 f0       	push   $0xf0131ca5
f01076ae:	e8 fd 8a ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01076b3:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f01076b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01076bc:	c1 e8 0c             	shr    $0xc,%eax
f01076bf:	89 c2                	mov    %eax,%edx
f01076c1:	89 d0                	mov    %edx,%eax
f01076c3:	01 c0                	add    %eax,%eax
f01076c5:	01 d0                	add    %edx,%eax
f01076c7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01076ce:	01 d8                	add    %ebx,%eax
f01076d0:	01 d0                	add    %edx,%eax
f01076d2:	01 c8                	add    %ecx,%eax
}
f01076d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01076d7:	c9                   	leave  
f01076d8:	c3                   	ret    

f01076d9 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01076d9:	55                   	push   %ebp
f01076da:	89 e5                	mov    %esp,%ebp
f01076dc:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01076df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076e6:	eb 5f                	jmp    f0107747 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f01076e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01076eb:	89 d0                	mov    %edx,%eax
f01076ed:	01 c0                	add    %eax,%eax
f01076ef:	01 d0                	add    %edx,%eax
f01076f1:	01 c0                	add    %eax,%eax
f01076f3:	01 d0                	add    %edx,%eax
f01076f5:	c1 e0 02             	shl    $0x2,%eax
f01076f8:	01 d0                	add    %edx,%eax
f01076fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107701:	01 d0                	add    %edx,%eax
f0107703:	c1 e0 04             	shl    $0x4,%eax
f0107706:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f010770b:	83 ec 04             	sub    $0x4,%esp
f010770e:	68 50 10 00 00       	push   $0x1050
f0107713:	6a 00                	push   $0x0
f0107715:	50                   	push   %eax
f0107716:	e8 15 75 02 00       	call   f012ec30 <memset>
f010771b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010771e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107721:	89 d0                	mov    %edx,%eax
f0107723:	01 c0                	add    %eax,%eax
f0107725:	01 d0                	add    %edx,%eax
f0107727:	01 c0                	add    %eax,%eax
f0107729:	01 d0                	add    %edx,%eax
f010772b:	c1 e0 02             	shl    $0x2,%eax
f010772e:	01 d0                	add    %edx,%eax
f0107730:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107737:	01 d0                	add    %edx,%eax
f0107739:	c1 e0 04             	shl    $0x4,%eax
f010773c:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107741:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107744:	ff 45 f4             	incl   -0xc(%ebp)
f0107747:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010774b:	7e 9b                	jle    f01076e8 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010774d:	90                   	nop
f010774e:	c9                   	leave  
f010774f:	c3                   	ret    

f0107750 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107750:	55                   	push   %ebp
f0107751:	89 e5                	mov    %esp,%ebp
f0107753:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107756:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010775d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107764:	eb 34                	jmp    f010779a <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107766:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107769:	89 d0                	mov    %edx,%eax
f010776b:	01 c0                	add    %eax,%eax
f010776d:	01 d0                	add    %edx,%eax
f010776f:	01 c0                	add    %eax,%eax
f0107771:	01 d0                	add    %edx,%eax
f0107773:	c1 e0 02             	shl    $0x2,%eax
f0107776:	01 d0                	add    %edx,%eax
f0107778:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010777f:	01 d0                	add    %edx,%eax
f0107781:	c1 e0 04             	shl    $0x4,%eax
f0107784:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107789:	8a 00                	mov    (%eax),%al
f010778b:	84 c0                	test   %al,%al
f010778d:	74 08                	je     f0107797 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f010778f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107792:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107795:	eb 09                	jmp    f01077a0 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107797:	ff 45 f0             	incl   -0x10(%ebp)
f010779a:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010779e:	7e c6                	jle    f0107766 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01077a0:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01077a4:	75 0a                	jne    f01077b0 <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f01077a6:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01077ab:	e9 8b 00 00 00       	jmp    f010783b <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f01077b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01077b3:	89 d0                	mov    %edx,%eax
f01077b5:	01 c0                	add    %eax,%eax
f01077b7:	01 d0                	add    %edx,%eax
f01077b9:	01 c0                	add    %eax,%eax
f01077bb:	01 d0                	add    %edx,%eax
f01077bd:	c1 e0 02             	shl    $0x2,%eax
f01077c0:	01 d0                	add    %edx,%eax
f01077c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01077c9:	01 d0                	add    %edx,%eax
f01077cb:	c1 e0 04             	shl    $0x4,%eax
f01077ce:	8d 90 40 3b 25 f0    	lea    -0xfdac4c0(%eax),%edx
f01077d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01077d7:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f01077d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01077dc:	89 d0                	mov    %edx,%eax
f01077de:	01 c0                	add    %eax,%eax
f01077e0:	01 d0                	add    %edx,%eax
f01077e2:	01 c0                	add    %eax,%eax
f01077e4:	01 d0                	add    %edx,%eax
f01077e6:	c1 e0 02             	shl    $0x2,%eax
f01077e9:	01 d0                	add    %edx,%eax
f01077eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01077f2:	01 d0                	add    %edx,%eax
f01077f4:	c1 e0 04             	shl    $0x4,%eax
f01077f7:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f01077fc:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f01077ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107802:	89 d0                	mov    %edx,%eax
f0107804:	01 c0                	add    %eax,%eax
f0107806:	01 d0                	add    %edx,%eax
f0107808:	01 c0                	add    %eax,%eax
f010780a:	01 d0                	add    %edx,%eax
f010780c:	c1 e0 02             	shl    $0x2,%eax
f010780f:	01 d0                	add    %edx,%eax
f0107811:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107818:	01 d0                	add    %edx,%eax
f010781a:	c1 e0 04             	shl    $0x4,%eax
f010781d:	83 c0 50             	add    $0x50,%eax
f0107820:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107825:	83 ec 04             	sub    $0x4,%esp
f0107828:	68 00 10 00 00       	push   $0x1000
f010782d:	6a 00                	push   $0x0
f010782f:	50                   	push   %eax
f0107830:	e8 fb 73 02 00       	call   f012ec30 <memset>
f0107835:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107838:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010783b:	c9                   	leave  
f010783c:	c3                   	ret    

f010783d <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010783d:	55                   	push   %ebp
f010783e:	89 e5                	mov    %esp,%ebp
f0107840:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107843:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010784a:	e9 95 00 00 00       	jmp    f01078e4 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010784f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107852:	89 d0                	mov    %edx,%eax
f0107854:	01 c0                	add    %eax,%eax
f0107856:	01 d0                	add    %edx,%eax
f0107858:	01 c0                	add    %eax,%eax
f010785a:	01 d0                	add    %edx,%eax
f010785c:	c1 e0 02             	shl    $0x2,%eax
f010785f:	01 d0                	add    %edx,%eax
f0107861:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107868:	01 d0                	add    %edx,%eax
f010786a:	c1 e0 04             	shl    $0x4,%eax
f010786d:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107872:	8a 00                	mov    (%eax),%al
f0107874:	84 c0                	test   %al,%al
f0107876:	75 68                	jne    f01078e0 <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107878:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010787b:	89 d0                	mov    %edx,%eax
f010787d:	01 c0                	add    %eax,%eax
f010787f:	01 d0                	add    %edx,%eax
f0107881:	01 c0                	add    %eax,%eax
f0107883:	01 d0                	add    %edx,%eax
f0107885:	c1 e0 02             	shl    $0x2,%eax
f0107888:	01 d0                	add    %edx,%eax
f010788a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107891:	01 d0                	add    %edx,%eax
f0107893:	c1 e0 04             	shl    $0x4,%eax
f0107896:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f010789b:	8b 00                	mov    (%eax),%eax
f010789d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01078a0:	75 3f                	jne    f01078e1 <get_share_object_ID+0xa4>
f01078a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01078a5:	89 d0                	mov    %edx,%eax
f01078a7:	01 c0                	add    %eax,%eax
f01078a9:	01 d0                	add    %edx,%eax
f01078ab:	01 c0                	add    %eax,%eax
f01078ad:	01 d0                	add    %edx,%eax
f01078af:	c1 e0 02             	shl    $0x2,%eax
f01078b2:	01 d0                	add    %edx,%eax
f01078b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01078bb:	01 d0                	add    %edx,%eax
f01078bd:	c1 e0 04             	shl    $0x4,%eax
f01078c0:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f01078c5:	83 c0 04             	add    $0x4,%eax
f01078c8:	83 ec 08             	sub    $0x8,%esp
f01078cb:	50                   	push   %eax
f01078cc:	ff 75 0c             	pushl  0xc(%ebp)
f01078cf:	e8 7a 72 02 00       	call   f012eb4e <strcmp>
f01078d4:	83 c4 10             	add    $0x10,%esp
f01078d7:	85 c0                	test   %eax,%eax
f01078d9:	75 06                	jne    f01078e1 <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f01078db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078de:	eb 13                	jmp    f01078f3 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01078e0:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01078e1:	ff 45 f4             	incl   -0xc(%ebp)
f01078e4:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f01078e8:	0f 8e 61 ff ff ff    	jle    f010784f <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01078ee:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01078f3:	c9                   	leave  
f01078f4:	c3                   	ret    

f01078f5 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01078f5:	55                   	push   %ebp
f01078f6:	89 e5                	mov    %esp,%ebp
f01078f8:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01078fb:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f01078ff:	76 0a                	jbe    f010790b <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107901:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107906:	e9 93 00 00 00       	jmp    f010799e <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010790b:	8b 55 08             	mov    0x8(%ebp),%edx
f010790e:	89 d0                	mov    %edx,%eax
f0107910:	01 c0                	add    %eax,%eax
f0107912:	01 d0                	add    %edx,%eax
f0107914:	01 c0                	add    %eax,%eax
f0107916:	01 d0                	add    %edx,%eax
f0107918:	c1 e0 02             	shl    $0x2,%eax
f010791b:	01 d0                	add    %edx,%eax
f010791d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107924:	01 d0                	add    %edx,%eax
f0107926:	c1 e0 04             	shl    $0x4,%eax
f0107929:	83 c0 50             	add    $0x50,%eax
f010792c:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107931:	83 ec 0c             	sub    $0xc,%esp
f0107934:	50                   	push   %eax
f0107935:	e8 3e 01 00 00       	call   f0107a78 <clear_frames_storage>
f010793a:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010793d:	8b 55 08             	mov    0x8(%ebp),%edx
f0107940:	89 d0                	mov    %edx,%eax
f0107942:	01 c0                	add    %eax,%eax
f0107944:	01 d0                	add    %edx,%eax
f0107946:	01 c0                	add    %eax,%eax
f0107948:	01 d0                	add    %edx,%eax
f010794a:	c1 e0 02             	shl    $0x2,%eax
f010794d:	01 d0                	add    %edx,%eax
f010794f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107956:	01 d0                	add    %edx,%eax
f0107958:	c1 e0 04             	shl    $0x4,%eax
f010795b:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107960:	83 ec 04             	sub    $0x4,%esp
f0107963:	68 50 10 00 00       	push   $0x1050
f0107968:	6a 00                	push   $0x0
f010796a:	50                   	push   %eax
f010796b:	e8 c0 72 02 00       	call   f012ec30 <memset>
f0107970:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107973:	8b 55 08             	mov    0x8(%ebp),%edx
f0107976:	89 d0                	mov    %edx,%eax
f0107978:	01 c0                	add    %eax,%eax
f010797a:	01 d0                	add    %edx,%eax
f010797c:	01 c0                	add    %eax,%eax
f010797e:	01 d0                	add    %edx,%eax
f0107980:	c1 e0 02             	shl    $0x2,%eax
f0107983:	01 d0                	add    %edx,%eax
f0107985:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010798c:	01 d0                	add    %edx,%eax
f010798e:	c1 e0 04             	shl    $0x4,%eax
f0107991:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107996:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107999:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010799e:	c9                   	leave  
f010799f:	c3                   	ret    

f01079a0 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01079a0:	55                   	push   %ebp
f01079a1:	89 e5                	mov    %esp,%ebp
f01079a3:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01079a6:	83 ec 0c             	sub    $0xc,%esp
f01079a9:	68 00 10 00 00       	push   $0x1000
f01079ae:	e8 e0 01 00 00       	call   f0107b93 <kmalloc>
f01079b3:	83 c4 10             	add    $0x10,%esp
f01079b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01079b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01079bd:	75 17                	jne    f01079d6 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01079bf:	83 ec 04             	sub    $0x4,%esp
f01079c2:	68 bf 1c 13 f0       	push   $0xf0131cbf
f01079c7:	68 a6 00 00 00       	push   $0xa6
f01079cc:	68 dc 1c 13 f0       	push   $0xf0131cdc
f01079d1:	e8 da 87 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f01079d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01079d9:	c9                   	leave  
f01079da:	c3                   	ret    

f01079db <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01079db:	55                   	push   %ebp
f01079dc:	89 e5                	mov    %esp,%ebp
f01079de:	53                   	push   %ebx
f01079df:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01079e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01079e5:	c1 e0 0c             	shl    $0xc,%eax
f01079e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01079eb:	83 ec 04             	sub    $0x4,%esp
f01079ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01079f1:	50                   	push   %eax
f01079f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01079f5:	ff 75 08             	pushl  0x8(%ebp)
f01079f8:	e8 1e f7 ff ff       	call   f010711b <get_page_table>
f01079fd:	83 c4 10             	add    $0x10,%esp
f0107a00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107a03:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107a07:	75 15                	jne    f0107a1e <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107a09:	83 ec 04             	sub    $0x4,%esp
f0107a0c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107a0f:	50                   	push   %eax
f0107a10:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a13:	ff 75 08             	pushl  0x8(%ebp)
f0107a16:	e8 26 f8 ff ff       	call   f0107241 <__static_cpt>
f0107a1b:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107a1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107a24:	c1 ea 0c             	shr    $0xc,%edx
f0107a27:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107a2d:	c1 e2 02             	shl    $0x2,%edx
f0107a30:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107a33:	83 ec 0c             	sub    $0xc,%esp
f0107a36:	ff 75 0c             	pushl  0xc(%ebp)
f0107a39:	e8 36 fc ff ff       	call   f0107674 <to_physical_address>
f0107a3e:	83 c4 10             	add    $0x10,%esp
f0107a41:	83 c8 01             	or     $0x1,%eax
f0107a44:	89 03                	mov    %eax,(%ebx)
}
f0107a46:	90                   	nop
f0107a47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a4a:	c9                   	leave  
f0107a4b:	c3                   	ret    

f0107a4c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107a4c:	55                   	push   %ebp
f0107a4d:	89 e5                	mov    %esp,%ebp
f0107a4f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107a55:	c1 e0 0c             	shl    $0xc,%eax
f0107a58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107a5b:	83 ec 04             	sub    $0x4,%esp
f0107a5e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107a61:	50                   	push   %eax
f0107a62:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a65:	ff 75 08             	pushl  0x8(%ebp)
f0107a68:	e8 46 f9 ff ff       	call   f01073b3 <get_frame_info>
f0107a6d:	83 c4 10             	add    $0x10,%esp
f0107a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107a76:	c9                   	leave  
f0107a77:	c3                   	ret    

f0107a78 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107a78:	55                   	push   %ebp
f0107a79:	89 e5                	mov    %esp,%ebp
f0107a7b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107a7e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107a85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107a8c:	eb 5b                	jmp    f0107ae9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a9b:	01 d0                	add    %edx,%eax
f0107a9d:	8b 00                	mov    (%eax),%eax
f0107a9f:	85 c0                	test   %eax,%eax
f0107aa1:	74 43                	je     f0107ae6 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107aa6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ab0:	01 d0                	add    %edx,%eax
f0107ab2:	8b 00                	mov    (%eax),%eax
f0107ab4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ab9:	83 ec 0c             	sub    $0xc,%esp
f0107abc:	50                   	push   %eax
f0107abd:	e8 c5 fb ff ff       	call   f0107687 <to_frame_info>
f0107ac2:	83 c4 10             	add    $0x10,%esp
f0107ac5:	83 ec 0c             	sub    $0xc,%esp
f0107ac8:	50                   	push   %eax
f0107ac9:	e8 a3 f5 ff ff       	call   f0107071 <free_frame>
f0107ace:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ad4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ade:	01 d0                	add    %edx,%eax
f0107ae0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107ae6:	ff 45 f4             	incl   -0xc(%ebp)
f0107ae9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107af0:	7e 9c                	jle    f0107a8e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107af2:	90                   	nop
f0107af3:	c9                   	leave  
f0107af4:	c3                   	ret    

f0107af5 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107af5:	55                   	push   %ebp
f0107af6:	89 e5                	mov    %esp,%ebp
f0107af8:	83 ec 18             	sub    $0x18,%esp
f0107afb:	8b 45 14             	mov    0x14(%ebp),%eax
f0107afe:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107b01:	83 ec 04             	sub    $0x4,%esp
f0107b04:	68 00 1d 13 f0       	push   $0xf0131d00
f0107b09:	68 f6 00 00 00       	push   $0xf6
f0107b0e:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b13:	e8 98 86 ff ff       	call   f01001b0 <_panic>

f0107b18 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107b18:	55                   	push   %ebp
f0107b19:	89 e5                	mov    %esp,%ebp
f0107b1b:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107b1e:	83 ec 04             	sub    $0x4,%esp
f0107b21:	68 34 1d 13 f0       	push   $0xf0131d34
f0107b26:	68 02 01 00 00       	push   $0x102
f0107b2b:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b30:	e8 7b 86 ff ff       	call   f01001b0 <_panic>

f0107b35 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107b35:	55                   	push   %ebp
f0107b36:	89 e5                	mov    %esp,%ebp
f0107b38:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107b3b:	83 ec 04             	sub    $0x4,%esp
f0107b3e:	68 68 1d 13 f0       	push   $0xf0131d68
f0107b43:	68 0c 01 00 00       	push   $0x10c
f0107b48:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b4d:	e8 5e 86 ff ff       	call   f01001b0 <_panic>

f0107b52 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107b52:	55                   	push   %ebp
f0107b53:	89 e5                	mov    %esp,%ebp
f0107b55:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107b58:	83 ec 04             	sub    $0x4,%esp
f0107b5b:	68 98 1d 13 f0       	push   $0xf0131d98
f0107b60:	68 1b 01 00 00       	push   $0x11b
f0107b65:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b6a:	e8 41 86 ff ff       	call   f01001b0 <_panic>

f0107b6f <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107b6f:	55                   	push   %ebp
f0107b70:	89 e5                	mov    %esp,%ebp
f0107b72:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107b75:	83 ec 04             	sub    $0x4,%esp
f0107b78:	68 c8 1d 13 f0       	push   $0xf0131dc8
f0107b7d:	6a 13                	push   $0x13
f0107b7f:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107b84:	e8 27 86 ff ff       	call   f01001b0 <_panic>

f0107b89 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107b89:	55                   	push   %ebp
f0107b8a:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107b8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107b91:	5d                   	pop    %ebp
f0107b92:	c3                   	ret    

f0107b93 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107b93:	55                   	push   %ebp
f0107b94:	89 e5                	mov    %esp,%ebp
f0107b96:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107b99:	83 ec 04             	sub    $0x4,%esp
f0107b9c:	68 f0 1d 13 f0       	push   $0xf0131df0
f0107ba1:	6a 36                	push   $0x36
f0107ba3:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107ba8:	e8 60 87 ff ff       	call   f010030d <_panic_into_prompt>

f0107bad <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107bb3:	83 ec 04             	sub    $0x4,%esp
f0107bb6:	68 18 1e 13 f0       	push   $0xf0131e18
f0107bbb:	6a 3f                	push   $0x3f
f0107bbd:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bc2:	e8 e9 85 ff ff       	call   f01001b0 <_panic>

f0107bc7 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107bc7:	55                   	push   %ebp
f0107bc8:	89 e5                	mov    %esp,%ebp
f0107bca:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107bcd:	83 ec 04             	sub    $0x4,%esp
f0107bd0:	68 3c 1e 13 f0       	push   $0xf0131e3c
f0107bd5:	6a 47                	push   $0x47
f0107bd7:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bdc:	e8 cf 85 ff ff       	call   f01001b0 <_panic>

f0107be1 <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107be1:	55                   	push   %ebp
f0107be2:	89 e5                	mov    %esp,%ebp
f0107be4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107be7:	83 ec 04             	sub    $0x4,%esp
f0107bea:	68 70 1e 13 f0       	push   $0xf0131e70
f0107bef:	6a 54                	push   $0x54
f0107bf1:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bf6:	e8 b5 85 ff ff       	call   f01001b0 <_panic>

f0107bfb <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107bfb:	55                   	push   %ebp
f0107bfc:	89 e5                	mov    %esp,%ebp
f0107bfe:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c01:	83 ec 04             	sub    $0x4,%esp
f0107c04:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c09:	6a 5d                	push   $0x5d
f0107c0b:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c10:	e8 9b 85 ff ff       	call   f01001b0 <_panic>

f0107c15 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107c15:	55                   	push   %ebp
f0107c16:	89 e5                	mov    %esp,%ebp
f0107c18:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c1b:	83 ec 04             	sub    $0x4,%esp
f0107c1e:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c23:	6a 63                	push   $0x63
f0107c25:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c2a:	e8 81 85 ff ff       	call   f01001b0 <_panic>

f0107c2f <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107c2f:	55                   	push   %ebp
f0107c30:	89 e5                	mov    %esp,%ebp
f0107c32:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c35:	83 ec 04             	sub    $0x4,%esp
f0107c38:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c3d:	6a 68                	push   $0x68
f0107c3f:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c44:	e8 67 85 ff ff       	call   f01001b0 <_panic>

f0107c49 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107c49:	55                   	push   %ebp
f0107c4a:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0107c4c:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0107c51:	5d                   	pop    %ebp
f0107c52:	c3                   	ret    

f0107c53 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107c53:	55                   	push   %ebp
f0107c54:	89 e5                	mov    %esp,%ebp
f0107c56:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107c59:	83 ec 04             	sub    $0x4,%esp
f0107c5c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107c5f:	50                   	push   %eax
f0107c60:	ff 75 0c             	pushl  0xc(%ebp)
f0107c63:	ff 75 08             	pushl  0x8(%ebp)
f0107c66:	e8 b0 f4 ff ff       	call   f010711b <get_page_table>
f0107c6b:	83 c4 10             	add    $0x10,%esp
f0107c6e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0107c71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c74:	85 c0                	test   %eax,%eax
f0107c76:	74 64                	je     f0107cdc <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0107c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c7b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c7e:	c1 ea 0c             	shr    $0xc,%edx
f0107c81:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c87:	c1 e2 02             	shl    $0x2,%edx
f0107c8a:	01 c2                	add    %eax,%edx
f0107c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c8f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c92:	c1 e9 0c             	shr    $0xc,%ecx
f0107c95:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c9b:	c1 e1 02             	shl    $0x2,%ecx
f0107c9e:	01 c8                	add    %ecx,%eax
f0107ca0:	8b 00                	mov    (%eax),%eax
f0107ca2:	0b 45 10             	or     0x10(%ebp),%eax
f0107ca5:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0107ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107caa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107cad:	c1 ea 0c             	shr    $0xc,%edx
f0107cb0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cb6:	c1 e2 02             	shl    $0x2,%edx
f0107cb9:	01 d0                	add    %edx,%eax
f0107cbb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cbe:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107cc1:	c1 e9 0c             	shr    $0xc,%ecx
f0107cc4:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107cca:	c1 e1 02             	shl    $0x2,%ecx
f0107ccd:	01 ca                	add    %ecx,%edx
f0107ccf:	8b 12                	mov    (%edx),%edx
f0107cd1:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107cd4:	f7 d1                	not    %ecx
f0107cd6:	21 ca                	and    %ecx,%edx
f0107cd8:	89 10                	mov    %edx,(%eax)
f0107cda:	eb 27                	jmp    f0107d03 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0107cdc:	83 ec 08             	sub    $0x8,%esp
f0107cdf:	ff 75 0c             	pushl  0xc(%ebp)
f0107ce2:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0107ce7:	e8 45 91 ff ff       	call   f0100e31 <cprintf>
f0107cec:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0107cef:	83 ec 04             	sub    $0x4,%esp
f0107cf2:	68 e0 1e 13 f0       	push   $0xf0131ee0
f0107cf7:	6a 1c                	push   $0x1c
f0107cf9:	68 54 1f 13 f0       	push   $0xf0131f54
f0107cfe:	e8 ad 84 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d06:	83 ec 08             	sub    $0x8,%esp
f0107d09:	50                   	push   %eax
f0107d0a:	6a 00                	push   $0x0
f0107d0c:	e8 e1 ed ff ff       	call   f0106af2 <tlb_invalidate>
f0107d11:	83 c4 10             	add    $0x10,%esp
}
f0107d14:	90                   	nop
f0107d15:	c9                   	leave  
f0107d16:	c3                   	ret    

f0107d17 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107d17:	55                   	push   %ebp
f0107d18:	89 e5                	mov    %esp,%ebp
f0107d1a:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107d1d:	83 ec 04             	sub    $0x4,%esp
f0107d20:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d23:	50                   	push   %eax
f0107d24:	ff 75 0c             	pushl  0xc(%ebp)
f0107d27:	ff 75 08             	pushl  0x8(%ebp)
f0107d2a:	e8 ec f3 ff ff       	call   f010711b <get_page_table>
f0107d2f:	83 c4 10             	add    $0x10,%esp
f0107d32:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0107d35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d38:	85 c0                	test   %eax,%eax
f0107d3a:	74 1d                	je     f0107d59 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0107d3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d3f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d42:	c1 ea 0c             	shr    $0xc,%edx
f0107d45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d4b:	c1 e2 02             	shl    $0x2,%edx
f0107d4e:	01 d0                	add    %edx,%eax
f0107d50:	8b 00                	mov    (%eax),%eax
f0107d52:	25 ff 0f 00 00       	and    $0xfff,%eax
f0107d57:	eb 05                	jmp    f0107d5e <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0107d59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107d5e:	c9                   	leave  
f0107d5f:	c3                   	ret    

f0107d60 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d60:	55                   	push   %ebp
f0107d61:	89 e5                	mov    %esp,%ebp
f0107d63:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107d66:	83 ec 04             	sub    $0x4,%esp
f0107d69:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d6c:	50                   	push   %eax
f0107d6d:	ff 75 0c             	pushl  0xc(%ebp)
f0107d70:	ff 75 08             	pushl  0x8(%ebp)
f0107d73:	e8 a3 f3 ff ff       	call   f010711b <get_page_table>
f0107d78:	83 c4 10             	add    $0x10,%esp
f0107d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0107d7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d81:	85 c0                	test   %eax,%eax
f0107d83:	74 46                	je     f0107dcb <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0107d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d88:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d8b:	c1 ea 0c             	shr    $0xc,%edx
f0107d8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d94:	c1 e2 02             	shl    $0x2,%edx
f0107d97:	01 d0                	add    %edx,%eax
f0107d99:	8b 00                	mov    (%eax),%eax
f0107d9b:	83 ec 04             	sub    $0x4,%esp
f0107d9e:	50                   	push   %eax
f0107d9f:	ff 75 0c             	pushl  0xc(%ebp)
f0107da2:	68 70 1f 13 f0       	push   $0xf0131f70
f0107da7:	e8 85 90 ff ff       	call   f0100e31 <cprintf>
f0107dac:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107daf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107db2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107db5:	c1 ea 0c             	shr    $0xc,%edx
f0107db8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107dbe:	c1 e2 02             	shl    $0x2,%edx
f0107dc1:	01 d0                	add    %edx,%eax
f0107dc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107dc9:	eb 14                	jmp    f0107ddf <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0107dcb:	83 ec 04             	sub    $0x4,%esp
f0107dce:	68 98 1f 13 f0       	push   $0xf0131f98
f0107dd3:	6a 47                	push   $0x47
f0107dd5:	68 54 1f 13 f0       	push   $0xf0131f54
f0107dda:	e8 d1 83 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de2:	83 ec 08             	sub    $0x8,%esp
f0107de5:	50                   	push   %eax
f0107de6:	6a 00                	push   $0x0
f0107de8:	e8 05 ed ff ff       	call   f0106af2 <tlb_invalidate>
f0107ded:	83 c4 10             	add    $0x10,%esp
}
f0107df0:	90                   	nop
f0107df1:	c9                   	leave  
f0107df2:	c3                   	ret    

f0107df3 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107df3:	55                   	push   %ebp
f0107df4:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107df6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df9:	c1 e8 16             	shr    $0x16,%eax
f0107dfc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e06:	01 d0                	add    %edx,%eax
f0107e08:	8b 00                	mov    (%eax),%eax
f0107e0a:	83 e0 20             	and    $0x20,%eax
f0107e0d:	85 c0                	test   %eax,%eax
f0107e0f:	0f 95 c0             	setne  %al
f0107e12:	0f b6 c0             	movzbl %al,%eax
}
f0107e15:	5d                   	pop    %ebp
f0107e16:	c3                   	ret    

f0107e17 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107e17:	55                   	push   %ebp
f0107e18:	89 e5                	mov    %esp,%ebp
f0107e1a:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107e1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e20:	c1 e8 16             	shr    $0x16,%eax
f0107e23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2d:	01 d0                	add    %edx,%eax
f0107e2f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e32:	c1 ea 16             	shr    $0x16,%edx
f0107e35:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107e3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0107e3f:	01 ca                	add    %ecx,%edx
f0107e41:	8b 12                	mov    (%edx),%edx
f0107e43:	83 e2 df             	and    $0xffffffdf,%edx
f0107e46:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107e48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e4b:	83 ec 08             	sub    $0x8,%esp
f0107e4e:	50                   	push   %eax
f0107e4f:	6a 00                	push   $0x0
f0107e51:	e8 9c ec ff ff       	call   f0106af2 <tlb_invalidate>
f0107e56:	83 c4 10             	add    $0x10,%esp
}
f0107e59:	90                   	nop
f0107e5a:	c9                   	leave  
f0107e5b:	c3                   	ret    

f0107e5c <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107e5c:	55                   	push   %ebp
f0107e5d:	89 e5                	mov    %esp,%ebp
f0107e5f:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e65:	c1 e8 16             	shr    $0x16,%eax
f0107e68:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e72:	01 d0                	add    %edx,%eax
f0107e74:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e7a:	0f 20 d8             	mov    %cr3,%eax
f0107e7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e83:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e86:	90                   	nop
f0107e87:	c9                   	leave  
f0107e88:	c3                   	ret    

f0107e89 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e89:	55                   	push   %ebp
f0107e8a:	89 e5                	mov    %esp,%ebp
f0107e8c:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e96:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e9d:	eb 22                	jmp    f0107ec1 <env_page_ws_get_size+0x38>
f0107e9f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ea2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107ea5:	89 d0                	mov    %edx,%eax
f0107ea7:	01 c0                	add    %eax,%eax
f0107ea9:	01 d0                	add    %edx,%eax
f0107eab:	c1 e0 03             	shl    $0x3,%eax
f0107eae:	01 c8                	add    %ecx,%eax
f0107eb0:	05 bc 00 00 00       	add    $0xbc,%eax
f0107eb5:	8a 00                	mov    (%eax),%al
f0107eb7:	84 c0                	test   %al,%al
f0107eb9:	75 03                	jne    f0107ebe <env_page_ws_get_size+0x35>
f0107ebb:	ff 45 f8             	incl   -0x8(%ebp)
f0107ebe:	ff 45 fc             	incl   -0x4(%ebp)
f0107ec1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec4:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0107eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107ecd:	39 c2                	cmp    %eax,%edx
f0107ecf:	77 ce                	ja     f0107e9f <env_page_ws_get_size+0x16>
	return counter;
f0107ed1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107ed4:	c9                   	leave  
f0107ed5:	c3                   	ret    

f0107ed6 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107ed6:	55                   	push   %ebp
f0107ed7:	89 e5                	mov    %esp,%ebp
f0107ed9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107edc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107ee3:	eb 4e                	jmp    f0107f33 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107ee5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ee8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eeb:	89 d0                	mov    %edx,%eax
f0107eed:	01 c0                	add    %eax,%eax
f0107eef:	01 d0                	add    %edx,%eax
f0107ef1:	c1 e0 03             	shl    $0x3,%eax
f0107ef4:	01 c8                	add    %ecx,%eax
f0107ef6:	05 b8 00 00 00       	add    $0xb8,%eax
f0107efb:	8b 00                	mov    (%eax),%eax
f0107efd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f08:	89 c2                	mov    %eax,%edx
f0107f0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f18:	39 c2                	cmp    %eax,%edx
f0107f1a:	75 14                	jne    f0107f30 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0107f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f1f:	83 ec 08             	sub    $0x8,%esp
f0107f22:	50                   	push   %eax
f0107f23:	ff 75 08             	pushl  0x8(%ebp)
f0107f26:	e8 c8 00 00 00       	call   f0107ff3 <env_page_ws_clear_entry>
f0107f2b:	83 c4 10             	add    $0x10,%esp
			break;
f0107f2e:	eb 13                	jmp    f0107f43 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107f30:	ff 45 f4             	incl   -0xc(%ebp)
f0107f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f36:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0107f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f3f:	39 c2                	cmp    %eax,%edx
f0107f41:	77 a2                	ja     f0107ee5 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107f43:	90                   	nop
f0107f44:	c9                   	leave  
f0107f45:	c3                   	ret    

f0107f46 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107f46:	55                   	push   %ebp
f0107f47:	89 e5                	mov    %esp,%ebp
f0107f49:	53                   	push   %ebx
f0107f4a:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0107f56:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f59:	77 16                	ja     f0107f71 <env_page_ws_set_entry+0x2b>
f0107f5b:	68 10 20 13 f0       	push   $0xf0132010
f0107f60:	68 46 20 13 f0       	push   $0xf0132046
f0107f65:	6a 77                	push   $0x77
f0107f67:	68 5c 20 13 f0       	push   $0xf013205c
f0107f6c:	e8 3f 82 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107f71:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107f78:	76 16                	jbe    f0107f90 <env_page_ws_set_entry+0x4a>
f0107f7a:	68 7c 20 13 f0       	push   $0xf013207c
f0107f7f:	68 46 20 13 f0       	push   $0xf0132046
f0107f84:	6a 78                	push   $0x78
f0107f86:	68 5c 20 13 f0       	push   $0xf013205c
f0107f8b:	e8 20 82 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f90:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f9e:	89 c1                	mov    %eax,%ecx
f0107fa0:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107fa3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fa6:	89 d0                	mov    %edx,%eax
f0107fa8:	01 c0                	add    %eax,%eax
f0107faa:	01 d0                	add    %edx,%eax
f0107fac:	c1 e0 03             	shl    $0x3,%eax
f0107faf:	01 d8                	add    %ebx,%eax
f0107fb1:	05 b8 00 00 00       	add    $0xb8,%eax
f0107fb6:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107fb8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fbb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fbe:	89 d0                	mov    %edx,%eax
f0107fc0:	01 c0                	add    %eax,%eax
f0107fc2:	01 d0                	add    %edx,%eax
f0107fc4:	c1 e0 03             	shl    $0x3,%eax
f0107fc7:	01 c8                	add    %ecx,%eax
f0107fc9:	05 bc 00 00 00       	add    $0xbc,%eax
f0107fce:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107fd1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fd7:	89 d0                	mov    %edx,%eax
f0107fd9:	01 c0                	add    %eax,%eax
f0107fdb:	01 d0                	add    %edx,%eax
f0107fdd:	c1 e0 03             	shl    $0x3,%eax
f0107fe0:	01 c8                	add    %ecx,%eax
f0107fe2:	05 c0 00 00 00       	add    $0xc0,%eax
f0107fe7:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107fed:	90                   	nop
}
f0107fee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107ff1:	c9                   	leave  
f0107ff2:	c3                   	ret    

f0107ff3 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ff3:	55                   	push   %ebp
f0107ff4:	89 e5                	mov    %esp,%ebp
f0107ff6:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107ff9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ffc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108002:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108005:	77 19                	ja     f0108020 <env_page_ws_clear_entry+0x2d>
f0108007:	68 b0 20 13 f0       	push   $0xf01320b0
f010800c:	68 46 20 13 f0       	push   $0xf0132046
f0108011:	68 83 00 00 00       	push   $0x83
f0108016:	68 5c 20 13 f0       	push   $0xf013205c
f010801b:	e8 90 81 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108020:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108023:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108026:	89 d0                	mov    %edx,%eax
f0108028:	01 c0                	add    %eax,%eax
f010802a:	01 d0                	add    %edx,%eax
f010802c:	c1 e0 03             	shl    $0x3,%eax
f010802f:	01 c8                	add    %ecx,%eax
f0108031:	05 b8 00 00 00       	add    $0xb8,%eax
f0108036:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010803c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010803f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108042:	89 d0                	mov    %edx,%eax
f0108044:	01 c0                	add    %eax,%eax
f0108046:	01 d0                	add    %edx,%eax
f0108048:	c1 e0 03             	shl    $0x3,%eax
f010804b:	01 c8                	add    %ecx,%eax
f010804d:	05 bc 00 00 00       	add    $0xbc,%eax
f0108052:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108055:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108058:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805b:	89 d0                	mov    %edx,%eax
f010805d:	01 c0                	add    %eax,%eax
f010805f:	01 d0                	add    %edx,%eax
f0108061:	c1 e0 03             	shl    $0x3,%eax
f0108064:	01 c8                	add    %ecx,%eax
f0108066:	05 c0 00 00 00       	add    $0xc0,%eax
f010806b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108071:	90                   	nop
f0108072:	c9                   	leave  
f0108073:	c3                   	ret    

f0108074 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108074:	55                   	push   %ebp
f0108075:	89 e5                	mov    %esp,%ebp
f0108077:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010807a:	8b 45 08             	mov    0x8(%ebp),%eax
f010807d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108083:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108086:	77 19                	ja     f01080a1 <env_page_ws_get_virtual_address+0x2d>
f0108088:	68 b0 20 13 f0       	push   $0xf01320b0
f010808d:	68 46 20 13 f0       	push   $0xf0132046
f0108092:	68 8b 00 00 00       	push   $0x8b
f0108097:	68 5c 20 13 f0       	push   $0xf013205c
f010809c:	e8 0f 81 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01080a1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080a7:	89 d0                	mov    %edx,%eax
f01080a9:	01 c0                	add    %eax,%eax
f01080ab:	01 d0                	add    %edx,%eax
f01080ad:	c1 e0 03             	shl    $0x3,%eax
f01080b0:	01 c8                	add    %ecx,%eax
f01080b2:	05 b8 00 00 00       	add    $0xb8,%eax
f01080b7:	8b 00                	mov    (%eax),%eax
f01080b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080bf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01080c4:	c9                   	leave  
f01080c5:	c3                   	ret    

f01080c6 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01080c6:	55                   	push   %ebp
f01080c7:	89 e5                	mov    %esp,%ebp
f01080c9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01080cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01080cf:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01080d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01080d8:	77 19                	ja     f01080f3 <env_page_ws_get_time_stamp+0x2d>
f01080da:	68 b0 20 13 f0       	push   $0xf01320b0
f01080df:	68 46 20 13 f0       	push   $0xf0132046
f01080e4:	68 91 00 00 00       	push   $0x91
f01080e9:	68 5c 20 13 f0       	push   $0xf013205c
f01080ee:	e8 bd 80 ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01080f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080f6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080f9:	89 d0                	mov    %edx,%eax
f01080fb:	01 c0                	add    %eax,%eax
f01080fd:	01 d0                	add    %edx,%eax
f01080ff:	c1 e0 03             	shl    $0x3,%eax
f0108102:	01 c8                	add    %ecx,%eax
f0108104:	05 c0 00 00 00       	add    $0xc0,%eax
f0108109:	8b 00                	mov    (%eax),%eax
}
f010810b:	c9                   	leave  
f010810c:	c3                   	ret    

f010810d <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010810d:	55                   	push   %ebp
f010810e:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108110:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108113:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108116:	89 d0                	mov    %edx,%eax
f0108118:	01 c0                	add    %eax,%eax
f010811a:	01 d0                	add    %edx,%eax
f010811c:	c1 e0 03             	shl    $0x3,%eax
f010811f:	01 c8                	add    %ecx,%eax
f0108121:	05 bc 00 00 00       	add    $0xbc,%eax
f0108126:	8a 00                	mov    (%eax),%al
f0108128:	0f b6 c0             	movzbl %al,%eax
}
f010812b:	5d                   	pop    %ebp
f010812c:	c3                   	ret    

f010812d <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010812d:	55                   	push   %ebp
f010812e:	89 e5                	mov    %esp,%ebp
f0108130:	53                   	push   %ebx
f0108131:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108134:	83 ec 0c             	sub    $0xc,%esp
f0108137:	6a 02                	push   $0x2
f0108139:	e8 46 52 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f010813e:	83 c4 10             	add    $0x10,%esp
f0108141:	85 c0                	test   %eax,%eax
f0108143:	0f 84 fe 00 00 00    	je     f0108247 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108149:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108150:	83 ec 0c             	sub    $0xc,%esp
f0108153:	68 e8 20 13 f0       	push   $0xf01320e8
f0108158:	e8 d4 8c ff ff       	call   f0100e31 <cprintf>
f010815d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108160:	8b 45 08             	mov    0x8(%ebp),%eax
f0108163:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108169:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010816c:	eb 2c                	jmp    f010819a <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010816e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108171:	8b 10                	mov    (%eax),%edx
f0108173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108176:	8d 48 01             	lea    0x1(%eax),%ecx
f0108179:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010817c:	83 ec 04             	sub    $0x4,%esp
f010817f:	52                   	push   %edx
f0108180:	50                   	push   %eax
f0108181:	68 02 21 13 f0       	push   $0xf0132102
f0108186:	e8 a6 8c ff ff       	call   f0100e31 <cprintf>
f010818b:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010818e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108191:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108197:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	74 08                	je     f01081a8 <env_page_ws_print+0x7b>
f01081a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081a3:	8b 40 10             	mov    0x10(%eax),%eax
f01081a6:	eb 05                	jmp    f01081ad <env_page_ws_print+0x80>
f01081a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01081ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01081b0:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01081b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b9:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01081bf:	85 c0                	test   %eax,%eax
f01081c1:	75 ab                	jne    f010816e <env_page_ws_print+0x41>
f01081c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01081c7:	75 a5                	jne    f010816e <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01081c9:	83 ec 0c             	sub    $0xc,%esp
f01081cc:	68 0a 21 13 f0       	push   $0xf013210a
f01081d1:	e8 5b 8c ff ff       	call   f0100e31 <cprintf>
f01081d6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01081d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01081dc:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01081e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01081e5:	eb 2c                	jmp    f0108213 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01081e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081ea:	8b 10                	mov    (%eax),%edx
f01081ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ef:	8d 48 01             	lea    0x1(%eax),%ecx
f01081f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01081f5:	83 ec 04             	sub    $0x4,%esp
f01081f8:	52                   	push   %edx
f01081f9:	50                   	push   %eax
f01081fa:	68 02 21 13 f0       	push   $0xf0132102
f01081ff:	e8 2d 8c ff ff       	call   f0100e31 <cprintf>
f0108204:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108207:	8b 45 08             	mov    0x8(%ebp),%eax
f010820a:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108210:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108213:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108217:	74 08                	je     f0108221 <env_page_ws_print+0xf4>
f0108219:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010821c:	8b 40 10             	mov    0x10(%eax),%eax
f010821f:	eb 05                	jmp    f0108226 <env_page_ws_print+0xf9>
f0108221:	b8 00 00 00 00       	mov    $0x0,%eax
f0108226:	8b 55 08             	mov    0x8(%ebp),%edx
f0108229:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f010822f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108232:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108238:	85 c0                	test   %eax,%eax
f010823a:	75 ab                	jne    f01081e7 <env_page_ws_print+0xba>
f010823c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108240:	75 a5                	jne    f01081e7 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108242:	e9 a2 01 00 00       	jmp    f01083e9 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108247:	83 ec 0c             	sub    $0xc,%esp
f010824a:	68 25 21 13 f0       	push   $0xf0132125
f010824f:	e8 dd 8b ff ff       	call   f0100e31 <cprintf>
f0108254:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108257:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010825e:	e9 74 01 00 00       	jmp    f01083d7 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108263:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108266:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108269:	89 d0                	mov    %edx,%eax
f010826b:	01 c0                	add    %eax,%eax
f010826d:	01 d0                	add    %edx,%eax
f010826f:	c1 e0 03             	shl    $0x3,%eax
f0108272:	01 c8                	add    %ecx,%eax
f0108274:	05 bc 00 00 00       	add    $0xbc,%eax
f0108279:	8a 00                	mov    (%eax),%al
f010827b:	84 c0                	test   %al,%al
f010827d:	74 43                	je     f01082c2 <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010827f:	83 ec 0c             	sub    $0xc,%esp
f0108282:	68 2f 21 13 f0       	push   $0xf013212f
f0108287:	e8 a5 8b ff ff       	call   f0100e31 <cprintf>
f010828c:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010828f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108292:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108298:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010829b:	75 10                	jne    f01082ad <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f010829d:	83 ec 0c             	sub    $0xc,%esp
f01082a0:	68 3e 21 13 f0       	push   $0xf013213e
f01082a5:	e8 87 8b ff ff       	call   f0100e31 <cprintf>
f01082aa:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01082ad:	83 ec 0c             	sub    $0xc,%esp
f01082b0:	68 44 21 13 f0       	push   $0xf0132144
f01082b5:	e8 77 8b ff ff       	call   f0100e31 <cprintf>
f01082ba:	83 c4 10             	add    $0x10,%esp
				continue;
f01082bd:	e9 12 01 00 00       	jmp    f01083d4 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01082c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c8:	89 d0                	mov    %edx,%eax
f01082ca:	01 c0                	add    %eax,%eax
f01082cc:	01 d0                	add    %edx,%eax
f01082ce:	c1 e0 03             	shl    $0x3,%eax
f01082d1:	01 c8                	add    %ecx,%eax
f01082d3:	05 b8 00 00 00       	add    $0xb8,%eax
f01082d8:	8b 00                	mov    (%eax),%eax
f01082da:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01082dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082e3:	89 d0                	mov    %edx,%eax
f01082e5:	01 c0                	add    %eax,%eax
f01082e7:	01 d0                	add    %edx,%eax
f01082e9:	c1 e0 03             	shl    $0x3,%eax
f01082ec:	01 c8                	add    %ecx,%eax
f01082ee:	05 c0 00 00 00       	add    $0xc0,%eax
f01082f3:	8b 00                	mov    (%eax),%eax
f01082f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01082f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108301:	83 ec 08             	sub    $0x8,%esp
f0108304:	ff 75 e8             	pushl  -0x18(%ebp)
f0108307:	50                   	push   %eax
f0108308:	e8 0a fa ff ff       	call   f0107d17 <pt_get_page_permissions>
f010830d:	83 c4 10             	add    $0x10,%esp
f0108310:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108313:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108316:	83 e0 40             	and    $0x40,%eax
f0108319:	85 c0                	test   %eax,%eax
f010831b:	0f 95 c0             	setne  %al
f010831e:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108321:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108324:	83 e0 20             	and    $0x20,%eax
f0108327:	85 c0                	test   %eax,%eax
f0108329:	0f 95 c0             	setne  %al
f010832c:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010832f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108332:	25 00 02 00 00       	and    $0x200,%eax
f0108337:	85 c0                	test   %eax,%eax
f0108339:	0f 95 c0             	setne  %al
f010833c:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010833f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108342:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108345:	89 d0                	mov    %edx,%eax
f0108347:	01 c0                	add    %eax,%eax
f0108349:	01 d0                	add    %edx,%eax
f010834b:	c1 e0 03             	shl    $0x3,%eax
f010834e:	01 c8                	add    %ecx,%eax
f0108350:	05 b8 00 00 00       	add    $0xb8,%eax
f0108355:	8b 00                	mov    (%eax),%eax
f0108357:	83 ec 04             	sub    $0x4,%esp
f010835a:	50                   	push   %eax
f010835b:	ff 75 ec             	pushl  -0x14(%ebp)
f010835e:	68 46 21 13 f0       	push   $0xf0132146
f0108363:	e8 c9 8a ff ff       	call   f0100e31 <cprintf>
f0108368:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010836b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010836e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108371:	89 d0                	mov    %edx,%eax
f0108373:	01 c0                	add    %eax,%eax
f0108375:	01 d0                	add    %edx,%eax
f0108377:	c1 e0 03             	shl    $0x3,%eax
f010837a:	01 c8                	add    %ecx,%eax
f010837c:	05 c4 00 00 00       	add    $0xc4,%eax
f0108381:	8b 18                	mov    (%eax),%ebx
f0108383:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108387:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010838b:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010838f:	83 ec 08             	sub    $0x8,%esp
f0108392:	53                   	push   %ebx
f0108393:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108396:	51                   	push   %ecx
f0108397:	52                   	push   %edx
f0108398:	50                   	push   %eax
f0108399:	68 58 21 13 f0       	push   $0xf0132158
f010839e:	e8 8e 8a ff ff       	call   f0100e31 <cprintf>
f01083a3:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01083a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a9:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f01083af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083b2:	75 10                	jne    f01083c4 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f01083b4:	83 ec 0c             	sub    $0xc,%esp
f01083b7:	68 9f 21 13 f0       	push   $0xf013219f
f01083bc:	e8 70 8a ff ff       	call   f0100e31 <cprintf>
f01083c1:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083c4:	83 ec 0c             	sub    $0xc,%esp
f01083c7:	68 44 21 13 f0       	push   $0xf0132144
f01083cc:	e8 60 8a ff ff       	call   f0100e31 <cprintf>
f01083d1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01083d4:	ff 45 ec             	incl   -0x14(%ebp)
f01083d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083da:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083e3:	0f 87 7a fe ff ff    	ja     f0108263 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01083e9:	90                   	nop
f01083ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01083ed:	c9                   	leave  
f01083ee:	c3                   	ret    

f01083ef <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01083ef:	55                   	push   %ebp
f01083f0:	89 e5                	mov    %esp,%ebp
f01083f2:	53                   	push   %ebx
f01083f3:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01083f6:	83 ec 0c             	sub    $0xc,%esp
f01083f9:	68 a4 21 13 f0       	push   $0xf01321a4
f01083fe:	e8 2e 8a ff ff       	call   f0100e31 <cprintf>
f0108403:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108406:	83 ec 0c             	sub    $0xc,%esp
f0108409:	68 d9 21 13 f0       	push   $0xf01321d9
f010840e:	e8 1e 8a ff ff       	call   f0100e31 <cprintf>
f0108413:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010841d:	e9 19 01 00 00       	jmp    f010853b <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f0108422:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108425:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108428:	89 d0                	mov    %edx,%eax
f010842a:	01 c0                	add    %eax,%eax
f010842c:	01 d0                	add    %edx,%eax
f010842e:	c1 e0 03             	shl    $0x3,%eax
f0108431:	01 c8                	add    %ecx,%eax
f0108433:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108438:	8a 00                	mov    (%eax),%al
f010843a:	84 c0                	test   %al,%al
f010843c:	74 43                	je     f0108481 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010843e:	83 ec 0c             	sub    $0xc,%esp
f0108441:	68 2f 21 13 f0       	push   $0xf013212f
f0108446:	e8 e6 89 ff ff       	call   f0100e31 <cprintf>
f010844b:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010844e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108451:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108457:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845a:	75 10                	jne    f010846c <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f010845c:	83 ec 0c             	sub    $0xc,%esp
f010845f:	68 3e 21 13 f0       	push   $0xf013213e
f0108464:	e8 c8 89 ff ff       	call   f0100e31 <cprintf>
f0108469:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010846c:	83 ec 0c             	sub    $0xc,%esp
f010846f:	68 44 21 13 f0       	push   $0xf0132144
f0108474:	e8 b8 89 ff ff       	call   f0100e31 <cprintf>
f0108479:	83 c4 10             	add    $0x10,%esp
			continue;
f010847c:	e9 b7 00 00 00       	jmp    f0108538 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108481:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108484:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108487:	89 d0                	mov    %edx,%eax
f0108489:	01 c0                	add    %eax,%eax
f010848b:	01 d0                	add    %edx,%eax
f010848d:	c1 e0 03             	shl    $0x3,%eax
f0108490:	01 c8                	add    %ecx,%eax
f0108492:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108497:	8b 00                	mov    (%eax),%eax
f0108499:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f010849c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010849f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084a2:	89 d0                	mov    %edx,%eax
f01084a4:	01 c0                	add    %eax,%eax
f01084a6:	01 d0                	add    %edx,%eax
f01084a8:	c1 e0 03             	shl    $0x3,%eax
f01084ab:	01 c8                	add    %ecx,%eax
f01084ad:	05 80 d5 01 00       	add    $0x1d580,%eax
f01084b2:	8b 00                	mov    (%eax),%eax
f01084b4:	83 ec 04             	sub    $0x4,%esp
f01084b7:	50                   	push   %eax
f01084b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01084bb:	68 e4 21 13 f0       	push   $0xf01321e4
f01084c0:	e8 6c 89 ff ff       	call   f0100e31 <cprintf>
f01084c5:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01084c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084ce:	89 d0                	mov    %edx,%eax
f01084d0:	01 c0                	add    %eax,%eax
f01084d2:	01 d0                	add    %edx,%eax
f01084d4:	c1 e0 03             	shl    $0x3,%eax
f01084d7:	01 c8                	add    %ecx,%eax
f01084d9:	05 88 d5 01 00       	add    $0x1d588,%eax
f01084de:	8b 18                	mov    (%eax),%ebx
f01084e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01084e3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01084e9:	83 ec 08             	sub    $0x8,%esp
f01084ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01084ef:	50                   	push   %eax
f01084f0:	e8 fe f8 ff ff       	call   f0107df3 <pd_is_table_used>
f01084f5:	83 c4 10             	add    $0x10,%esp
f01084f8:	83 ec 04             	sub    $0x4,%esp
f01084fb:	53                   	push   %ebx
f01084fc:	50                   	push   %eax
f01084fd:	68 fc 21 13 f0       	push   $0xf01321fc
f0108502:	e8 2a 89 ff ff       	call   f0100e31 <cprintf>
f0108507:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f010850a:	8b 45 08             	mov    0x8(%ebp),%eax
f010850d:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108513:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108516:	75 10                	jne    f0108528 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f0108518:	83 ec 0c             	sub    $0xc,%esp
f010851b:	68 9f 21 13 f0       	push   $0xf013219f
f0108520:	e8 0c 89 ff ff       	call   f0100e31 <cprintf>
f0108525:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108528:	83 ec 0c             	sub    $0xc,%esp
f010852b:	68 44 21 13 f0       	push   $0xf0132144
f0108530:	e8 fc 88 ff ff       	call   f0100e31 <cprintf>
f0108535:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108538:	ff 45 f4             	incl   -0xc(%ebp)
f010853b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010853f:	0f 86 dd fe ff ff    	jbe    f0108422 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108545:	90                   	nop
f0108546:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108549:	c9                   	leave  
f010854a:	c3                   	ret    

f010854b <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010854b:	55                   	push   %ebp
f010854c:	89 e5                	mov    %esp,%ebp
f010854e:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108551:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108558:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010855f:	eb 22                	jmp    f0108583 <env_table_ws_get_size+0x38>
f0108561:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108564:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108567:	89 d0                	mov    %edx,%eax
f0108569:	01 c0                	add    %eax,%eax
f010856b:	01 d0                	add    %edx,%eax
f010856d:	c1 e0 03             	shl    $0x3,%eax
f0108570:	01 c8                	add    %ecx,%eax
f0108572:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108577:	8a 00                	mov    (%eax),%al
f0108579:	84 c0                	test   %al,%al
f010857b:	75 03                	jne    f0108580 <env_table_ws_get_size+0x35>
f010857d:	ff 45 f8             	incl   -0x8(%ebp)
f0108580:	ff 45 fc             	incl   -0x4(%ebp)
f0108583:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108587:	7e d8                	jle    f0108561 <env_table_ws_get_size+0x16>
	return counter;
f0108589:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010858c:	c9                   	leave  
f010858d:	c3                   	ret    

f010858e <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010858e:	55                   	push   %ebp
f010858f:	89 e5                	mov    %esp,%ebp
f0108591:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108594:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010859b:	eb 4e                	jmp    f01085eb <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010859d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085a3:	89 d0                	mov    %edx,%eax
f01085a5:	01 c0                	add    %eax,%eax
f01085a7:	01 d0                	add    %edx,%eax
f01085a9:	c1 e0 03             	shl    $0x3,%eax
f01085ac:	01 c8                	add    %ecx,%eax
f01085ae:	05 80 d5 01 00       	add    $0x1d580,%eax
f01085b3:	8b 00                	mov    (%eax),%eax
f01085b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085bb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01085c0:	89 c2                	mov    %eax,%edx
f01085c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01085c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01085cb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01085d0:	39 c2                	cmp    %eax,%edx
f01085d2:	75 14                	jne    f01085e8 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01085d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085d7:	83 ec 08             	sub    $0x8,%esp
f01085da:	50                   	push   %eax
f01085db:	ff 75 08             	pushl  0x8(%ebp)
f01085de:	e8 bc 00 00 00       	call   f010869f <env_table_ws_clear_entry>
f01085e3:	83 c4 10             	add    $0x10,%esp
			break;
f01085e6:	eb 09                	jmp    f01085f1 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01085e8:	ff 45 f4             	incl   -0xc(%ebp)
f01085eb:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01085ef:	7e ac                	jle    f010859d <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01085f1:	90                   	nop
f01085f2:	c9                   	leave  
f01085f3:	c3                   	ret    

f01085f4 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01085f4:	55                   	push   %ebp
f01085f5:	89 e5                	mov    %esp,%ebp
f01085f7:	53                   	push   %ebx
f01085f8:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085fb:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ff:	76 19                	jbe    f010861a <env_table_ws_set_entry+0x26>
f0108601:	68 20 22 13 f0       	push   $0xf0132220
f0108606:	68 46 20 13 f0       	push   $0xf0132046
f010860b:	68 07 01 00 00       	push   $0x107
f0108610:	68 5c 20 13 f0       	push   $0xf013205c
f0108615:	e8 96 7b ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010861a:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108621:	76 19                	jbe    f010863c <env_table_ws_set_entry+0x48>
f0108623:	68 7c 20 13 f0       	push   $0xf013207c
f0108628:	68 46 20 13 f0       	push   $0xf0132046
f010862d:	68 08 01 00 00       	push   $0x108
f0108632:	68 5c 20 13 f0       	push   $0xf013205c
f0108637:	e8 74 7b ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010863c:	8b 45 10             	mov    0x10(%ebp),%eax
f010863f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108642:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108645:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010864a:	89 c1                	mov    %eax,%ecx
f010864c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010864f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108652:	89 d0                	mov    %edx,%eax
f0108654:	01 c0                	add    %eax,%eax
f0108656:	01 d0                	add    %edx,%eax
f0108658:	c1 e0 03             	shl    $0x3,%eax
f010865b:	01 d8                	add    %ebx,%eax
f010865d:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108662:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108664:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108667:	8b 55 0c             	mov    0xc(%ebp),%edx
f010866a:	89 d0                	mov    %edx,%eax
f010866c:	01 c0                	add    %eax,%eax
f010866e:	01 d0                	add    %edx,%eax
f0108670:	c1 e0 03             	shl    $0x3,%eax
f0108673:	01 c8                	add    %ecx,%eax
f0108675:	05 84 d5 01 00       	add    $0x1d584,%eax
f010867a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010867d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108680:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108683:	89 d0                	mov    %edx,%eax
f0108685:	01 c0                	add    %eax,%eax
f0108687:	01 d0                	add    %edx,%eax
f0108689:	c1 e0 03             	shl    $0x3,%eax
f010868c:	01 c8                	add    %ecx,%eax
f010868e:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108693:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108699:	90                   	nop
}
f010869a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010869d:	c9                   	leave  
f010869e:	c3                   	ret    

f010869f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010869f:	55                   	push   %ebp
f01086a0:	89 e5                	mov    %esp,%ebp
f01086a2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a9:	76 19                	jbe    f01086c4 <env_table_ws_clear_entry+0x25>
f01086ab:	68 20 22 13 f0       	push   $0xf0132220
f01086b0:	68 46 20 13 f0       	push   $0xf0132046
f01086b5:	68 13 01 00 00       	push   $0x113
f01086ba:	68 5c 20 13 f0       	push   $0xf013205c
f01086bf:	e8 ec 7a ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01086c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086ca:	89 d0                	mov    %edx,%eax
f01086cc:	01 c0                	add    %eax,%eax
f01086ce:	01 d0                	add    %edx,%eax
f01086d0:	c1 e0 03             	shl    $0x3,%eax
f01086d3:	01 c8                	add    %ecx,%eax
f01086d5:	05 80 d5 01 00       	add    $0x1d580,%eax
f01086da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01086e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e6:	89 d0                	mov    %edx,%eax
f01086e8:	01 c0                	add    %eax,%eax
f01086ea:	01 d0                	add    %edx,%eax
f01086ec:	c1 e0 03             	shl    $0x3,%eax
f01086ef:	01 c8                	add    %ecx,%eax
f01086f1:	05 84 d5 01 00       	add    $0x1d584,%eax
f01086f6:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01086f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086ff:	89 d0                	mov    %edx,%eax
f0108701:	01 c0                	add    %eax,%eax
f0108703:	01 d0                	add    %edx,%eax
f0108705:	c1 e0 03             	shl    $0x3,%eax
f0108708:	01 c8                	add    %ecx,%eax
f010870a:	05 88 d5 01 00       	add    $0x1d588,%eax
f010870f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108715:	90                   	nop
f0108716:	c9                   	leave  
f0108717:	c3                   	ret    

f0108718 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108718:	55                   	push   %ebp
f0108719:	89 e5                	mov    %esp,%ebp
f010871b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010871e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108722:	76 19                	jbe    f010873d <env_table_ws_get_virtual_address+0x25>
f0108724:	68 20 22 13 f0       	push   $0xf0132220
f0108729:	68 46 20 13 f0       	push   $0xf0132046
f010872e:	68 1b 01 00 00       	push   $0x11b
f0108733:	68 5c 20 13 f0       	push   $0xf013205c
f0108738:	e8 73 7a ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f010873d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108740:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108743:	89 d0                	mov    %edx,%eax
f0108745:	01 c0                	add    %eax,%eax
f0108747:	01 d0                	add    %edx,%eax
f0108749:	c1 e0 03             	shl    $0x3,%eax
f010874c:	01 c8                	add    %ecx,%eax
f010874e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108753:	8b 00                	mov    (%eax),%eax
f0108755:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108758:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010875b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108760:	c9                   	leave  
f0108761:	c3                   	ret    

f0108762 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108762:	55                   	push   %ebp
f0108763:	89 e5                	mov    %esp,%ebp
f0108765:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108768:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010876c:	76 19                	jbe    f0108787 <env_table_ws_get_time_stamp+0x25>
f010876e:	68 20 22 13 f0       	push   $0xf0132220
f0108773:	68 46 20 13 f0       	push   $0xf0132046
f0108778:	68 22 01 00 00       	push   $0x122
f010877d:	68 5c 20 13 f0       	push   $0xf013205c
f0108782:	e8 29 7a ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108787:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010878a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010878d:	89 d0                	mov    %edx,%eax
f010878f:	01 c0                	add    %eax,%eax
f0108791:	01 d0                	add    %edx,%eax
f0108793:	c1 e0 03             	shl    $0x3,%eax
f0108796:	01 c8                	add    %ecx,%eax
f0108798:	05 88 d5 01 00       	add    $0x1d588,%eax
f010879d:	8b 00                	mov    (%eax),%eax
}
f010879f:	c9                   	leave  
f01087a0:	c3                   	ret    

f01087a1 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01087a1:	55                   	push   %ebp
f01087a2:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01087a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087aa:	89 d0                	mov    %edx,%eax
f01087ac:	01 c0                	add    %eax,%eax
f01087ae:	01 d0                	add    %edx,%eax
f01087b0:	c1 e0 03             	shl    $0x3,%eax
f01087b3:	01 c8                	add    %ecx,%eax
f01087b5:	05 84 d5 01 00       	add    $0x1d584,%eax
f01087ba:	8a 00                	mov    (%eax),%al
f01087bc:	0f b6 c0             	movzbl %al,%eax
}
f01087bf:	5d                   	pop    %ebp
f01087c0:	c3                   	ret    

f01087c1 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01087c1:	55                   	push   %ebp
f01087c2:	89 e5                	mov    %esp,%ebp
f01087c4:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f01087c7:	83 ec 04             	sub    $0x4,%esp
f01087ca:	68 54 22 13 f0       	push   $0xf0132254
f01087cf:	6a 1f                	push   $0x1f
f01087d1:	68 82 22 13 f0       	push   $0xf0132282
f01087d6:	e8 d5 79 ff ff       	call   f01001b0 <_panic>

f01087db <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01087db:	55                   	push   %ebp
f01087dc:	89 e5                	mov    %esp,%ebp
f01087de:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f01087e1:	83 ec 04             	sub    $0x4,%esp
f01087e4:	68 a0 22 13 f0       	push   $0xf01322a0
f01087e9:	6a 32                	push   $0x32
f01087eb:	68 82 22 13 f0       	push   $0xf0132282
f01087f0:	e8 bb 79 ff ff       	call   f01001b0 <_panic>

f01087f5 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f01087f5:	55                   	push   %ebp
f01087f6:	89 e5                	mov    %esp,%ebp
f01087f8:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f01087fb:	83 ec 04             	sub    $0x4,%esp
f01087fe:	68 d0 22 13 f0       	push   $0xf01322d0
f0108803:	6a 41                	push   $0x41
f0108805:	68 82 22 13 f0       	push   $0xf0132282
f010880a:	e8 a1 79 ff ff       	call   f01001b0 <_panic>

f010880f <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010880f:	55                   	push   %ebp
f0108810:	89 e5                	mov    %esp,%ebp
f0108812:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108815:	83 ec 04             	sub    $0x4,%esp
f0108818:	68 fc 22 13 f0       	push   $0xf01322fc
f010881d:	6a 4e                	push   $0x4e
f010881f:	68 82 22 13 f0       	push   $0xf0132282
f0108824:	e8 87 79 ff ff       	call   f01001b0 <_panic>

f0108829 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108829:	55                   	push   %ebp
f010882a:	89 e5                	mov    %esp,%ebp
f010882c:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f010882f:	83 ec 04             	sub    $0x4,%esp
f0108832:	68 2c 23 13 f0       	push   $0xf013232c
f0108837:	6a 57                	push   $0x57
f0108839:	68 82 22 13 f0       	push   $0xf0132282
f010883e:	e8 6d 79 ff ff       	call   f01001b0 <_panic>

f0108843 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108843:	55                   	push   %ebp
f0108844:	89 e5                	mov    %esp,%ebp
f0108846:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	68 64 23 13 f0       	push   $0xf0132364
f0108851:	6a 63                	push   $0x63
f0108853:	68 82 22 13 f0       	push   $0xf0132282
f0108858:	e8 53 79 ff ff       	call   f01001b0 <_panic>

f010885d <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010885d:	55                   	push   %ebp
f010885e:	89 e5                	mov    %esp,%ebp
f0108860:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108863:	e8 2e 4e 02 00       	call   f012d696 <inctst>
	return;
f0108868:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108869:	c9                   	leave  
f010886a:	c3                   	ret    

f010886b <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010886b:	55                   	push   %ebp
f010886c:	89 e5                	mov    %esp,%ebp
f010886e:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108871:	e8 20 4e 02 00       	call   f012d696 <inctst>
	return;
f0108876:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108877:	c9                   	leave  
f0108878:	c3                   	ret    

f0108879 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108879:	55                   	push   %ebp
f010887a:	89 e5                	mov    %esp,%ebp
f010887c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f010887f:	83 ec 04             	sub    $0x4,%esp
f0108882:	68 9c 23 13 f0       	push   $0xf013239c
f0108887:	68 99 00 00 00       	push   $0x99
f010888c:	68 82 22 13 f0       	push   $0xf0132282
f0108891:	e8 1a 79 ff ff       	call   f01001b0 <_panic>

f0108896 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108896:	55                   	push   %ebp
f0108897:	89 e5                	mov    %esp,%ebp
f0108899:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f010889c:	83 ec 04             	sub    $0x4,%esp
f010889f:	68 dc 23 13 f0       	push   $0xf01323dc
f01088a4:	68 a3 00 00 00       	push   $0xa3
f01088a9:	68 82 22 13 f0       	push   $0xf0132282
f01088ae:	e8 fd 78 ff ff       	call   f01001b0 <_panic>

f01088b3 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01088b3:	55                   	push   %ebp
f01088b4:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01088b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b9:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f01088bf:	29 d0                	sub    %edx,%eax
f01088c1:	c1 f8 02             	sar    $0x2,%eax
f01088c4:	89 c2                	mov    %eax,%edx
f01088c6:	89 d0                	mov    %edx,%eax
f01088c8:	c1 e0 03             	shl    $0x3,%eax
f01088cb:	01 d0                	add    %edx,%eax
f01088cd:	c1 e0 03             	shl    $0x3,%eax
f01088d0:	01 d0                	add    %edx,%eax
f01088d2:	c1 e0 03             	shl    $0x3,%eax
f01088d5:	01 d0                	add    %edx,%eax
f01088d7:	c1 e0 03             	shl    $0x3,%eax
f01088da:	01 d0                	add    %edx,%eax
f01088dc:	89 c1                	mov    %eax,%ecx
f01088de:	c1 e1 0f             	shl    $0xf,%ecx
f01088e1:	01 c8                	add    %ecx,%eax
f01088e3:	c1 e0 03             	shl    $0x3,%eax
f01088e6:	01 d0                	add    %edx,%eax
f01088e8:	f7 d8                	neg    %eax
}
f01088ea:	5d                   	pop    %ebp
f01088eb:	c3                   	ret    

f01088ec <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01088ec:	55                   	push   %ebp
f01088ed:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01088ef:	ff 75 08             	pushl  0x8(%ebp)
f01088f2:	e8 bc ff ff ff       	call   f01088b3 <to_frame_number>
f01088f7:	83 c4 04             	add    $0x4,%esp
f01088fa:	c1 e0 0c             	shl    $0xc,%eax
}
f01088fd:	c9                   	leave  
f01088fe:	c3                   	ret    

f01088ff <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f01088ff:	55                   	push   %ebp
f0108900:	89 e5                	mov    %esp,%ebp
f0108902:	57                   	push   %edi
f0108903:	56                   	push   %esi
f0108904:	53                   	push   %ebx
f0108905:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010890b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108912:	83 ec 0c             	sub    $0xc,%esp
f0108915:	ff 75 08             	pushl  0x8(%ebp)
f0108918:	e8 f6 21 00 00       	call   f010ab13 <get_user_program_info>
f010891d:	83 c4 10             	add    $0x10,%esp
f0108920:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108923:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108927:	75 0a                	jne    f0108933 <env_create+0x34>
f0108929:	b8 00 00 00 00       	mov    $0x0,%eax
f010892e:	e9 45 0c 00 00       	jmp    f0109578 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108933:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108936:	8b 40 08             	mov    0x8(%eax),%eax
f0108939:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010893c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108943:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108946:	83 ec 0c             	sub    $0xc,%esp
f0108949:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f010894f:	50                   	push   %eax
f0108950:	e8 aa 0f 00 00       	call   f01098ff <allocate_environment>
f0108955:	83 c4 10             	add    $0x10,%esp
f0108958:	85 c0                	test   %eax,%eax
f010895a:	79 0a                	jns    f0108966 <env_create+0x67>
	{
		return 0;
f010895c:	b8 00 00 00 00       	mov    $0x0,%eax
f0108961:	e9 12 0c 00 00       	jmp    f0109578 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108966:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108969:	8b 00                	mov    (%eax),%eax
f010896b:	83 ec 0c             	sub    $0xc,%esp
f010896e:	50                   	push   %eax
f010896f:	e8 ce 60 02 00       	call   f012ea42 <strlen>
f0108974:	83 c4 10             	add    $0x10,%esp
f0108977:	83 f8 3f             	cmp    $0x3f,%eax
f010897a:	7f 1d                	jg     f0108999 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f010897c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010897f:	8b 00                	mov    (%eax),%eax
f0108981:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108987:	83 c2 5c             	add    $0x5c,%edx
f010898a:	83 ec 08             	sub    $0x8,%esp
f010898d:	50                   	push   %eax
f010898e:	52                   	push   %edx
f010898f:	e8 fd 60 02 00       	call   f012ea91 <strcpy>
f0108994:	83 c4 10             	add    $0x10,%esp
f0108997:	eb 1d                	jmp    f01089b6 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108999:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010899c:	8b 00                	mov    (%eax),%eax
f010899e:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01089a4:	83 c2 5c             	add    $0x5c,%edx
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	6a 3f                	push   $0x3f
f01089ac:	50                   	push   %eax
f01089ad:	52                   	push   %edx
f01089ae:	e8 0c 61 02 00       	call   f012eabf <strncpy>
f01089b3:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f01089b6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01089bd:	00 00 00 

		allocate_frame(&p) ;
f01089c0:	83 ec 0c             	sub    $0xc,%esp
f01089c3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01089c9:	50                   	push   %eax
f01089ca:	e8 8a e5 ff ff       	call   f0106f59 <allocate_frame>
f01089cf:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f01089d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01089d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01089de:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01089e4:	83 ec 0c             	sub    $0xc,%esp
f01089e7:	50                   	push   %eax
f01089e8:	e8 ff fe ff ff       	call   f01088ec <to_physical_address>
f01089ed:	83 c4 10             	add    $0x10,%esp
f01089f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01089f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01089f6:	c1 e8 0c             	shr    $0xc,%eax
f01089f9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01089fc:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0108a01:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108a04:	72 17                	jb     f0108a1d <env_create+0x11e>
f0108a06:	ff 75 b0             	pushl  -0x50(%ebp)
f0108a09:	68 08 24 13 f0       	push   $0xf0132408
f0108a0e:	68 8a 00 00 00       	push   $0x8a
f0108a13:	68 37 24 13 f0       	push   $0xf0132437
f0108a18:	e8 93 77 ff ff       	call   f01001b0 <_panic>
f0108a1d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108a20:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108a25:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108a28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108a2e:	83 ec 0c             	sub    $0xc,%esp
f0108a31:	50                   	push   %eax
f0108a32:	e8 b5 fe ff ff       	call   f01088ec <to_physical_address>
f0108a37:	83 c4 10             	add    $0x10,%esp
f0108a3a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108a3d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a43:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a46:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108a4c:	83 ec 0c             	sub    $0xc,%esp
f0108a4f:	6a 02                	push   $0x2
f0108a51:	e8 2e 49 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f0108a56:	83 c4 10             	add    $0x10,%esp
f0108a59:	85 c0                	test   %eax,%eax
f0108a5b:	74 21                	je     f0108a7e <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108a5d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a63:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a66:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108a6c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a75:	2b 55 10             	sub    0x10(%ebp),%edx
f0108a78:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108a7e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108a82:	75 12                	jne    f0108a96 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108a84:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a8a:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108a91:	00 00 00 
f0108a94:	eb 0f                	jmp    f0108aa5 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108a96:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a9c:	8b 55 14             	mov    0x14(%ebp),%edx
f0108a9f:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108aa5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108aab:	83 ec 04             	sub    $0x4,%esp
f0108aae:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108ab1:	ff 75 a8             	pushl  -0x58(%ebp)
f0108ab4:	50                   	push   %eax
f0108ab5:	e8 ac 16 00 00       	call   f010a166 <initialize_environment>
f0108aba:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108abd:	0f 20 d8             	mov    %cr3,%eax
f0108ac0:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108ac3:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108ac6:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108ac9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108acf:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108ad5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108adb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ae1:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108ae4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108aeb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108af2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108af8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108afe:	48                   	dec    %eax
f0108aff:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108b02:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108b09:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108b0c:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108b12:	83 ec 08             	sub    $0x8,%esp
f0108b15:	ff 75 b8             	pushl  -0x48(%ebp)
f0108b18:	50                   	push   %eax
f0108b19:	e8 b1 1d 00 00       	call   f010a8cf <PROGRAM_SEGMENT_FIRST>
f0108b1e:	83 c4 0c             	add    $0xc,%esp
f0108b21:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108b27:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108b2d:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108b32:	89 c7                	mov    %eax,%edi
f0108b34:	89 d6                	mov    %edx,%esi
f0108b36:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108b38:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108b3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b41:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b44:	8b 40 10             	mov    0x10(%eax),%eax
f0108b47:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108b4a:	75 07                	jne    f0108b53 <env_create+0x254>
f0108b4c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108b53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108b59:	e9 24 03 00 00       	jmp    f0108e82 <env_create+0x583>
	{
		segment_counter++;
f0108b5e:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108b61:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108b68:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108b6b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108b71:	83 ec 0c             	sub    $0xc,%esp
f0108b74:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108b7a:	52                   	push   %edx
f0108b7b:	ff 75 dc             	pushl  -0x24(%ebp)
f0108b7e:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108b84:	52                   	push   %edx
f0108b85:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108b88:	50                   	push   %eax
f0108b89:	e8 2f 0e 00 00       	call   f01099bd <program_segment_alloc_map_copy_workingset>
f0108b8e:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108b91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108b97:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b9d:	8b 00                	mov    (%eax),%eax
f0108b9f:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108ba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ba5:	8b 40 0c             	mov    0xc(%eax),%eax
f0108ba8:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108bab:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108bae:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108bb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108bb4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108bb9:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108bbc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108bc3:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108bc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108bc9:	01 d0                	add    %edx,%eax
f0108bcb:	48                   	dec    %eax
f0108bcc:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108bcf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0108bd7:	f7 75 84             	divl   -0x7c(%ebp)
f0108bda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108bdd:	29 d0                	sub    %edx,%eax
f0108bdf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108be5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108be8:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108beb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108bf1:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f0108bf6:	83 ec 04             	sub    $0x4,%esp
f0108bf9:	68 00 10 00 00       	push   $0x1000
f0108bfe:	6a 00                	push   $0x0
f0108c00:	50                   	push   %eax
f0108c01:	e8 2a 60 02 00       	call   f012ec30 <memset>
f0108c06:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108c09:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108c0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108c0f:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108c15:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108c1b:	01 d0                	add    %edx,%eax
f0108c1d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108c20:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c23:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108c26:	eb 13                	jmp    f0108c3b <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108c28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108c2b:	8a 10                	mov    (%eax),%dl
f0108c2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c30:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108c32:	ff 45 cc             	incl   -0x34(%ebp)
f0108c35:	ff 45 d4             	incl   -0x2c(%ebp)
f0108c38:	ff 45 d0             	incl   -0x30(%ebp)
f0108c3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c3e:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0108c44:	72 e2                	jb     f0108c28 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108c46:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108c4c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108c52:	83 ec 04             	sub    $0x4,%esp
f0108c55:	52                   	push   %edx
f0108c56:	ff 75 88             	pushl  -0x78(%ebp)
f0108c59:	50                   	push   %eax
f0108c5a:	e8 a0 ae ff ff       	call   f0103aff <pf_add_env_page>
f0108c5f:	83 c4 10             	add    $0x10,%esp
f0108c62:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108c65:	75 17                	jne    f0108c7e <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108c67:	83 ec 04             	sub    $0x4,%esp
f0108c6a:	68 54 24 13 f0       	push   $0xf0132454
f0108c6f:	68 de 00 00 00       	push   $0xde
f0108c74:	68 37 24 13 f0       	push   $0xf0132437
f0108c79:	e8 32 75 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c81:	8b 50 04             	mov    0x4(%eax),%edx
f0108c84:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c87:	01 d0                	add    %edx,%eax
f0108c89:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0108c8f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108c95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c9a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108ca0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ca3:	8b 50 04             	mov    0x4(%eax),%edx
f0108ca6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108ca9:	01 d0                	add    %edx,%eax
f0108cab:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108cb1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108cb7:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108cba:	eb 43                	jmp    f0108cff <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108cbc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108cbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108cc5:	83 ec 04             	sub    $0x4,%esp
f0108cc8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ccb:	52                   	push   %edx
f0108ccc:	50                   	push   %eax
f0108ccd:	e8 2d ae ff ff       	call   f0103aff <pf_add_env_page>
f0108cd2:	83 c4 10             	add    $0x10,%esp
f0108cd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108cd8:	75 17                	jne    f0108cf1 <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108cda:	83 ec 04             	sub    $0x4,%esp
f0108cdd:	68 54 24 13 f0       	push   $0xf0132454
f0108ce2:	68 eb 00 00 00       	push   $0xeb
f0108ce7:	68 37 24 13 f0       	push   $0xf0132437
f0108cec:	e8 bf 74 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108cf1:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108cf8:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108cff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108d02:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108d08:	72 b2                	jb     f0108cbc <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108d0a:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f0108d0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108d12:	83 ec 04             	sub    $0x4,%esp
f0108d15:	68 00 10 00 00       	push   $0x1000
f0108d1a:	6a 00                	push   $0x0
f0108d1c:	ff 75 d0             	pushl  -0x30(%ebp)
f0108d1f:	e8 0c 5f 02 00       	call   f012ec30 <memset>
f0108d24:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108d27:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108d2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108d30:	eb 13                	jmp    f0108d45 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f0108d32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d35:	8a 10                	mov    (%eax),%dl
f0108d37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108d3a:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108d3c:	ff 45 cc             	incl   -0x34(%ebp)
f0108d3f:	ff 45 d4             	incl   -0x2c(%ebp)
f0108d42:	ff 45 d0             	incl   -0x30(%ebp)
f0108d45:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108d48:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0108d4e:	72 e2                	jb     f0108d32 <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108d50:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108d56:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108d5c:	83 ec 04             	sub    $0x4,%esp
f0108d5f:	52                   	push   %edx
f0108d60:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0108d66:	50                   	push   %eax
f0108d67:	e8 93 ad ff ff       	call   f0103aff <pf_add_env_page>
f0108d6c:	83 c4 10             	add    $0x10,%esp
f0108d6f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108d72:	75 17                	jne    f0108d8b <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108d74:	83 ec 04             	sub    $0x4,%esp
f0108d77:	68 54 24 13 f0       	push   $0xf0132454
f0108d7c:	68 fa 00 00 00       	push   $0xfa
f0108d81:	68 37 24 13 f0       	push   $0xf0132437
f0108d86:	e8 25 74 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0108d8b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0108d92:	10 00 00 
f0108d95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d98:	8b 50 04             	mov    0x4(%eax),%edx
f0108d9b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108d9e:	01 c2                	add    %eax,%edx
f0108da0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108da6:	01 d0                	add    %edx,%eax
f0108da8:	48                   	dec    %eax
f0108da9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108daf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108db5:	ba 00 00 00 00       	mov    $0x0,%edx
f0108dba:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108dc0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108dc6:	29 d0                	sub    %edx,%eax
f0108dc8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108dcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108dce:	8b 50 08             	mov    0x8(%eax),%edx
f0108dd1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108dd4:	01 d0                	add    %edx,%eax
f0108dd6:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108dd9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108ddf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108de6:	eb 41                	jmp    f0108e29 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108de8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108dee:	83 ec 04             	sub    $0x4,%esp
f0108df1:	6a 01                	push   $0x1
f0108df3:	ff 75 c8             	pushl  -0x38(%ebp)
f0108df6:	50                   	push   %eax
f0108df7:	e8 cd ab ff ff       	call   f01039c9 <pf_add_empty_env_page>
f0108dfc:	83 c4 10             	add    $0x10,%esp
f0108dff:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108e02:	75 17                	jne    f0108e1b <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108e04:	83 ec 04             	sub    $0x4,%esp
f0108e07:	68 54 24 13 f0       	push   $0xf0132454
f0108e0c:	68 07 01 00 00       	push   $0x107
f0108e11:	68 37 24 13 f0       	push   $0xf0132437
f0108e16:	e8 95 73 ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108e1b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108e22:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0108e29:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0108e30:	10 00 00 
f0108e33:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0108e39:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0108e3f:	01 d0                	add    %edx,%eax
f0108e41:	48                   	dec    %eax
f0108e42:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0108e48:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108e4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e53:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0108e59:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108e5f:	29 d0                	sub    %edx,%eax
f0108e61:	89 c2                	mov    %eax,%edx
f0108e63:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108e66:	39 c2                	cmp    %eax,%edx
f0108e68:	0f 87 7a ff ff ff    	ja     f0108de8 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108e6e:	83 ec 08             	sub    $0x8,%esp
f0108e71:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e74:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108e77:	e8 48 19 00 00       	call   f010a7c4 <PROGRAM_SEGMENT_NEXT>
f0108e7c:	83 c4 10             	add    $0x10,%esp
f0108e7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108e82:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108e86:	0f 85 d2 fc ff ff    	jne    f0108b5e <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f0108e8c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0108e93:	e9 a7 00 00 00       	jmp    f0108f3f <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0108e98:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0108e9e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108ea1:	89 d0                	mov    %edx,%eax
f0108ea3:	01 c0                	add    %eax,%eax
f0108ea5:	01 d0                	add    %edx,%eax
f0108ea7:	c1 e0 03             	shl    $0x3,%eax
f0108eaa:	01 c8                	add    %ecx,%eax
f0108eac:	05 bc 00 00 00       	add    $0xbc,%eax
f0108eb1:	8a 00                	mov    (%eax),%al
f0108eb3:	84 c0                	test   %al,%al
f0108eb5:	0f 85 81 00 00 00    	jne    f0108f3c <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108ebb:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0108ec1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108ec4:	89 d0                	mov    %edx,%eax
f0108ec6:	01 c0                	add    %eax,%eax
f0108ec8:	01 d0                	add    %edx,%eax
f0108eca:	c1 e0 03             	shl    $0x3,%eax
f0108ecd:	01 c8                	add    %ecx,%eax
f0108ecf:	05 b8 00 00 00       	add    $0xb8,%eax
f0108ed4:	8b 00                	mov    (%eax),%eax
f0108ed6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108edc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ee2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108ee8:	83 ec 04             	sub    $0x4,%esp
f0108eeb:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f0108ef1:	52                   	push   %edx
f0108ef2:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108ef8:	50                   	push   %eax
f0108ef9:	e8 1d e2 ff ff       	call   f010711b <get_page_table>
f0108efe:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108f01:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0108f07:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108f0d:	c1 ea 0c             	shr    $0xc,%edx
f0108f10:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108f16:	c1 e2 02             	shl    $0x2,%edx
f0108f19:	01 d0                	add    %edx,%eax
f0108f1b:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108f21:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108f27:	c1 e9 0c             	shr    $0xc,%ecx
f0108f2a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108f30:	c1 e1 02             	shl    $0x2,%ecx
f0108f33:	01 ca                	add    %ecx,%edx
f0108f35:	8b 12                	mov    (%edx),%edx
f0108f37:	83 e2 bf             	and    $0xffffffbf,%edx
f0108f3a:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0108f3c:	ff 45 c4             	incl   -0x3c(%ebp)
f0108f3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f45:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108f4b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108f4e:	39 c2                	cmp    %eax,%edx
f0108f50:	0f 87 42 ff ff ff    	ja     f0108e98 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0108f56:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f59:	8b 50 08             	mov    0x8(%eax),%edx
f0108f5c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f62:	83 ec 08             	sub    $0x8,%esp
f0108f65:	52                   	push   %edx
f0108f66:	50                   	push   %eax
f0108f67:	e8 18 18 00 00       	call   f010a784 <set_environment_entry_point>
f0108f6c:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0108f6f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f75:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f0108f7c:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0108f7f:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0108f86:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0108f89:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108f90:	e9 3c 05 00 00       	jmp    f01094d1 <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0108f95:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0108f9c:	00 00 00 
		allocate_frame(&pp);
f0108f9f:	83 ec 0c             	sub    $0xc,%esp
f0108fa2:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0108fa8:	50                   	push   %eax
f0108fa9:	e8 ab df ff ff       	call   f0106f59 <allocate_frame>
f0108fae:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108fb1:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0108fb7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fbd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108fc3:	6a 06                	push   $0x6
f0108fc5:	ff 75 c0             	pushl  -0x40(%ebp)
f0108fc8:	52                   	push   %edx
f0108fc9:	50                   	push   %eax
f0108fca:	e8 db e4 ff ff       	call   f01074aa <loadtime_map_frame>
f0108fcf:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108fd2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108fd5:	83 ec 04             	sub    $0x4,%esp
f0108fd8:	68 00 10 00 00       	push   $0x1000
f0108fdd:	6a 00                	push   $0x0
f0108fdf:	50                   	push   %eax
f0108fe0:	e8 4b 5c 02 00       	call   f012ec30 <memset>
f0108fe5:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108fe8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fee:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0108ff4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ffa:	83 ec 04             	sub    $0x4,%esp
f0108ffd:	ff 75 c0             	pushl  -0x40(%ebp)
f0109000:	52                   	push   %edx
f0109001:	50                   	push   %eax
f0109002:	e8 3f ef ff ff       	call   f0107f46 <env_page_ws_set_entry>
f0109007:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f010900a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109010:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f0109016:	8d 48 01             	lea    0x1(%eax),%ecx
f0109019:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f010901f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109025:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010902b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109031:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109037:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010903d:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f0109043:	ba 00 00 00 00       	mov    $0x0,%edx
f0109048:	f7 f3                	div    %ebx
f010904a:	89 d0                	mov    %edx,%eax
f010904c:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109052:	83 ec 0c             	sub    $0xc,%esp
f0109055:	6a 02                	push   $0x2
f0109057:	e8 28 43 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f010905c:	83 c4 10             	add    $0x10,%esp
f010905f:	85 c0                	test   %eax,%eax
f0109061:	0f 84 46 04 00 00    	je     f01094ad <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109067:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010906d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109073:	89 d0                	mov    %edx,%eax
f0109075:	01 c0                	add    %eax,%eax
f0109077:	01 d0                	add    %edx,%eax
f0109079:	c1 e0 03             	shl    $0x3,%eax
f010907c:	05 b0 00 00 00       	add    $0xb0,%eax
f0109081:	01 c8                	add    %ecx,%eax
f0109083:	83 c0 08             	add    $0x8,%eax
f0109086:	85 c0                	test   %eax,%eax
f0109088:	75 17                	jne    f01090a1 <env_create+0x7a2>
f010908a:	83 ec 04             	sub    $0x4,%esp
f010908d:	68 99 24 13 f0       	push   $0xf0132499
f0109092:	68 67 01 00 00       	push   $0x167
f0109097:	68 37 24 13 f0       	push   $0xf0132437
f010909c:	e8 0f 71 ff ff       	call   f01001b0 <_panic>
f01090a1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01090a7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01090ad:	89 d0                	mov    %edx,%eax
f01090af:	01 c0                	add    %eax,%eax
f01090b1:	01 d0                	add    %edx,%eax
f01090b3:	c1 e0 03             	shl    $0x3,%eax
f01090b6:	01 c8                	add    %ecx,%eax
f01090b8:	05 c8 00 00 00       	add    $0xc8,%eax
f01090bd:	8b 00                	mov    (%eax),%eax
f01090bf:	85 c0                	test   %eax,%eax
f01090c1:	74 41                	je     f0109104 <env_create+0x805>
f01090c3:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01090c9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01090cf:	89 d0                	mov    %edx,%eax
f01090d1:	01 c0                	add    %eax,%eax
f01090d3:	01 d0                	add    %edx,%eax
f01090d5:	c1 e0 03             	shl    $0x3,%eax
f01090d8:	01 c8                	add    %ecx,%eax
f01090da:	05 c8 00 00 00       	add    $0xc8,%eax
f01090df:	8b 10                	mov    (%eax),%edx
f01090e1:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01090e7:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01090ed:	89 c8                	mov    %ecx,%eax
f01090ef:	01 c0                	add    %eax,%eax
f01090f1:	01 c8                	add    %ecx,%eax
f01090f3:	c1 e0 03             	shl    $0x3,%eax
f01090f6:	01 d8                	add    %ebx,%eax
f01090f8:	05 cc 00 00 00       	add    $0xcc,%eax
f01090fd:	8b 00                	mov    (%eax),%eax
f01090ff:	89 42 14             	mov    %eax,0x14(%edx)
f0109102:	eb 2a                	jmp    f010912e <env_create+0x82f>
f0109104:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010910a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109110:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109116:	89 c8                	mov    %ecx,%eax
f0109118:	01 c0                	add    %eax,%eax
f010911a:	01 c8                	add    %ecx,%eax
f010911c:	c1 e0 03             	shl    $0x3,%eax
f010911f:	01 d8                	add    %ebx,%eax
f0109121:	05 cc 00 00 00       	add    $0xcc,%eax
f0109126:	8b 00                	mov    (%eax),%eax
f0109128:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f010912e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109134:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010913a:	89 d0                	mov    %edx,%eax
f010913c:	01 c0                	add    %eax,%eax
f010913e:	01 d0                	add    %edx,%eax
f0109140:	c1 e0 03             	shl    $0x3,%eax
f0109143:	01 c8                	add    %ecx,%eax
f0109145:	05 cc 00 00 00       	add    $0xcc,%eax
f010914a:	8b 00                	mov    (%eax),%eax
f010914c:	85 c0                	test   %eax,%eax
f010914e:	74 41                	je     f0109191 <env_create+0x892>
f0109150:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109156:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010915c:	89 d0                	mov    %edx,%eax
f010915e:	01 c0                	add    %eax,%eax
f0109160:	01 d0                	add    %edx,%eax
f0109162:	c1 e0 03             	shl    $0x3,%eax
f0109165:	01 c8                	add    %ecx,%eax
f0109167:	05 cc 00 00 00       	add    $0xcc,%eax
f010916c:	8b 10                	mov    (%eax),%edx
f010916e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109174:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010917a:	89 c8                	mov    %ecx,%eax
f010917c:	01 c0                	add    %eax,%eax
f010917e:	01 c8                	add    %ecx,%eax
f0109180:	c1 e0 03             	shl    $0x3,%eax
f0109183:	01 d8                	add    %ebx,%eax
f0109185:	05 c8 00 00 00       	add    $0xc8,%eax
f010918a:	8b 00                	mov    (%eax),%eax
f010918c:	89 42 10             	mov    %eax,0x10(%edx)
f010918f:	eb 2a                	jmp    f01091bb <env_create+0x8bc>
f0109191:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109197:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010919d:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01091a3:	89 c8                	mov    %ecx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 c8                	add    %ecx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 d8                	add    %ebx,%eax
f01091ae:	05 c8 00 00 00       	add    $0xc8,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f01091bb:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01091c1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091c7:	89 d0                	mov    %edx,%eax
f01091c9:	01 c0                	add    %eax,%eax
f01091cb:	01 d0                	add    %edx,%eax
f01091cd:	c1 e0 03             	shl    $0x3,%eax
f01091d0:	01 c8                	add    %ecx,%eax
f01091d2:	05 c8 00 00 00       	add    $0xc8,%eax
f01091d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01091dd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01091e3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091e9:	89 d0                	mov    %edx,%eax
f01091eb:	01 c0                	add    %eax,%eax
f01091ed:	01 d0                	add    %edx,%eax
f01091ef:	c1 e0 03             	shl    $0x3,%eax
f01091f2:	01 c8                	add    %ecx,%eax
f01091f4:	05 cc 00 00 00       	add    $0xcc,%eax
f01091f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01091ff:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109205:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f010920b:	4a                   	dec    %edx
f010920c:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109212:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109218:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010921e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109224:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010922a:	39 c2                	cmp    %eax,%edx
f010922c:	0f 83 40 01 00 00    	jae    f0109372 <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109232:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109238:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010923e:	89 d0                	mov    %edx,%eax
f0109240:	01 c0                	add    %eax,%eax
f0109242:	01 d0                	add    %edx,%eax
f0109244:	c1 e0 03             	shl    $0x3,%eax
f0109247:	05 b0 00 00 00       	add    $0xb0,%eax
f010924c:	01 c8                	add    %ecx,%eax
f010924e:	83 c0 08             	add    $0x8,%eax
f0109251:	85 c0                	test   %eax,%eax
f0109253:	75 17                	jne    f010926c <env_create+0x96d>
f0109255:	83 ec 04             	sub    $0x4,%esp
f0109258:	68 b8 24 13 f0       	push   $0xf01324b8
f010925d:	68 6c 01 00 00       	push   $0x16c
f0109262:	68 37 24 13 f0       	push   $0xf0132437
f0109267:	e8 44 6f ff ff       	call   f01001b0 <_panic>
f010926c:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109272:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109278:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010927e:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109284:	89 d8                	mov    %ebx,%eax
f0109286:	01 c0                	add    %eax,%eax
f0109288:	01 d8                	add    %ebx,%eax
f010928a:	c1 e0 03             	shl    $0x3,%eax
f010928d:	01 d0                	add    %edx,%eax
f010928f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109294:	89 08                	mov    %ecx,(%eax)
f0109296:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010929c:	89 c8                	mov    %ecx,%eax
f010929e:	01 c0                	add    %eax,%eax
f01092a0:	01 c8                	add    %ecx,%eax
f01092a2:	c1 e0 03             	shl    $0x3,%eax
f01092a5:	01 d0                	add    %edx,%eax
f01092a7:	05 c8 00 00 00       	add    $0xc8,%eax
f01092ac:	8b 00                	mov    (%eax),%eax
f01092ae:	85 c0                	test   %eax,%eax
f01092b0:	74 30                	je     f01092e2 <env_create+0x9e3>
f01092b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092b8:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f01092be:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01092c4:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01092ca:	89 c8                	mov    %ecx,%eax
f01092cc:	01 c0                	add    %eax,%eax
f01092ce:	01 c8                	add    %ecx,%eax
f01092d0:	c1 e0 03             	shl    $0x3,%eax
f01092d3:	05 b0 00 00 00       	add    $0xb0,%eax
f01092d8:	01 d8                	add    %ebx,%eax
f01092da:	83 c0 08             	add    $0x8,%eax
f01092dd:	89 42 14             	mov    %eax,0x14(%edx)
f01092e0:	eb 2b                	jmp    f010930d <env_create+0xa0e>
f01092e2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01092e8:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01092ee:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01092f4:	89 c8                	mov    %ecx,%eax
f01092f6:	01 c0                	add    %eax,%eax
f01092f8:	01 c8                	add    %ecx,%eax
f01092fa:	c1 e0 03             	shl    $0x3,%eax
f01092fd:	05 b0 00 00 00       	add    $0xb0,%eax
f0109302:	01 d8                	add    %ebx,%eax
f0109304:	83 c0 08             	add    $0x8,%eax
f0109307:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f010930d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109313:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109319:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010931f:	89 c8                	mov    %ecx,%eax
f0109321:	01 c0                	add    %eax,%eax
f0109323:	01 c8                	add    %ecx,%eax
f0109325:	c1 e0 03             	shl    $0x3,%eax
f0109328:	05 b0 00 00 00       	add    $0xb0,%eax
f010932d:	01 d8                	add    %ebx,%eax
f010932f:	83 c0 08             	add    $0x8,%eax
f0109332:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109338:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010933e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109344:	89 d0                	mov    %edx,%eax
f0109346:	01 c0                	add    %eax,%eax
f0109348:	01 d0                	add    %edx,%eax
f010934a:	c1 e0 03             	shl    $0x3,%eax
f010934d:	01 c8                	add    %ecx,%eax
f010934f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109354:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010935a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109360:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109366:	42                   	inc    %edx
f0109367:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010936d:	e9 3b 01 00 00       	jmp    f01094ad <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109372:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109378:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010937e:	89 d0                	mov    %edx,%eax
f0109380:	01 c0                	add    %eax,%eax
f0109382:	01 d0                	add    %edx,%eax
f0109384:	c1 e0 03             	shl    $0x3,%eax
f0109387:	05 b0 00 00 00       	add    $0xb0,%eax
f010938c:	01 c8                	add    %ecx,%eax
f010938e:	83 c0 08             	add    $0x8,%eax
f0109391:	85 c0                	test   %eax,%eax
f0109393:	75 17                	jne    f01093ac <env_create+0xaad>
f0109395:	83 ec 04             	sub    $0x4,%esp
f0109398:	68 b8 24 13 f0       	push   $0xf01324b8
f010939d:	68 70 01 00 00       	push   $0x170
f01093a2:	68 37 24 13 f0       	push   $0xf0132437
f01093a7:	e8 04 6e ff ff       	call   f01001b0 <_panic>
f01093ac:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093b8:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f01093be:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f01093c4:	89 d8                	mov    %ebx,%eax
f01093c6:	01 c0                	add    %eax,%eax
f01093c8:	01 d8                	add    %ebx,%eax
f01093ca:	c1 e0 03             	shl    $0x3,%eax
f01093cd:	01 d0                	add    %edx,%eax
f01093cf:	05 c8 00 00 00       	add    $0xc8,%eax
f01093d4:	89 08                	mov    %ecx,(%eax)
f01093d6:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01093dc:	89 c8                	mov    %ecx,%eax
f01093de:	01 c0                	add    %eax,%eax
f01093e0:	01 c8                	add    %ecx,%eax
f01093e2:	c1 e0 03             	shl    $0x3,%eax
f01093e5:	01 d0                	add    %edx,%eax
f01093e7:	05 c8 00 00 00       	add    $0xc8,%eax
f01093ec:	8b 00                	mov    (%eax),%eax
f01093ee:	85 c0                	test   %eax,%eax
f01093f0:	74 30                	je     f0109422 <env_create+0xb23>
f01093f2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093f8:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01093fe:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109404:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010940a:	89 c8                	mov    %ecx,%eax
f010940c:	01 c0                	add    %eax,%eax
f010940e:	01 c8                	add    %ecx,%eax
f0109410:	c1 e0 03             	shl    $0x3,%eax
f0109413:	05 b0 00 00 00       	add    $0xb0,%eax
f0109418:	01 d8                	add    %ebx,%eax
f010941a:	83 c0 08             	add    $0x8,%eax
f010941d:	89 42 14             	mov    %eax,0x14(%edx)
f0109420:	eb 2b                	jmp    f010944d <env_create+0xb4e>
f0109422:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109428:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010942e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109434:	89 c8                	mov    %ecx,%eax
f0109436:	01 c0                	add    %eax,%eax
f0109438:	01 c8                	add    %ecx,%eax
f010943a:	c1 e0 03             	shl    $0x3,%eax
f010943d:	05 b0 00 00 00       	add    $0xb0,%eax
f0109442:	01 d8                	add    %ebx,%eax
f0109444:	83 c0 08             	add    $0x8,%eax
f0109447:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f010944d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109453:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109459:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010945f:	89 c8                	mov    %ecx,%eax
f0109461:	01 c0                	add    %eax,%eax
f0109463:	01 c8                	add    %ecx,%eax
f0109465:	c1 e0 03             	shl    $0x3,%eax
f0109468:	05 b0 00 00 00       	add    $0xb0,%eax
f010946d:	01 d8                	add    %ebx,%eax
f010946f:	83 c0 08             	add    $0x8,%eax
f0109472:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109478:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010947e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109484:	89 d0                	mov    %edx,%eax
f0109486:	01 c0                	add    %eax,%eax
f0109488:	01 d0                	add    %edx,%eax
f010948a:	c1 e0 03             	shl    $0x3,%eax
f010948d:	01 c8                	add    %ecx,%eax
f010948f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109494:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010949a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094a0:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f01094a6:	42                   	inc    %edx
f01094a7:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f01094ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094b3:	83 ec 04             	sub    $0x4,%esp
f01094b6:	6a 01                	push   $0x1
f01094b8:	ff 75 c0             	pushl  -0x40(%ebp)
f01094bb:	50                   	push   %eax
f01094bc:	e8 08 a5 ff ff       	call   f01039c9 <pf_add_empty_env_page>
f01094c1:	83 c4 10             	add    $0x10,%esp
f01094c4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01094ca:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01094d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094d4:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01094da:	0f 83 b5 fa ff ff    	jae    f0108f95 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094e0:	83 ec 0c             	sub    $0xc,%esp
f01094e3:	6a 02                	push   $0x2
f01094e5:	e8 9a 3e 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f01094ea:	83 c4 10             	add    $0x10,%esp
f01094ed:	85 c0                	test   %eax,%eax
f01094ef:	74 75                	je     f0109566 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f01094f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01094f8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094fe:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0109504:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109507:	eb 2e                	jmp    f0109537 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109509:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010950c:	8b 10                	mov    (%eax),%edx
f010950e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109514:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010951a:	6a 01                	push   $0x1
f010951c:	6a 00                	push   $0x0
f010951e:	52                   	push   %edx
f010951f:	50                   	push   %eax
f0109520:	e8 2e e7 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0109525:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109528:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010952e:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109534:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109537:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010953d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109541:	74 08                	je     f010954b <env_create+0xc4c>
f0109543:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109546:	8b 52 10             	mov    0x10(%edx),%edx
f0109549:	eb 05                	jmp    f0109550 <env_create+0xc51>
f010954b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109550:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109556:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f010955c:	85 c0                	test   %eax,%eax
f010955e:	75 a9                	jne    f0109509 <env_create+0xc0a>
f0109560:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109564:	75 a3                	jne    f0109509 <env_create+0xc0a>
f0109566:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109569:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010956c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010956f:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109572:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109578:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010957b:	5b                   	pop    %ebx
f010957c:	5e                   	pop    %esi
f010957d:	5f                   	pop    %edi
f010957e:	5d                   	pop    %ebp
f010957f:	c3                   	ret    

f0109580 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109580:	55                   	push   %ebp
f0109581:	89 e5                	mov    %esp,%ebp
f0109583:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109586:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010958b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010958e:	74 2e                	je     f01095be <env_run+0x3e>
	{
		curenv = e ;
f0109590:	8b 45 08             	mov    0x8(%ebp),%eax
f0109593:	a3 34 32 25 f0       	mov    %eax,0xf0253234
		curenv->env_runs++ ;
f0109598:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010959d:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f01095a3:	42                   	inc    %edx
f01095a4:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f01095aa:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095af:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01095b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01095b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01095bb:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01095be:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095c3:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01095ca:	e8 5c b1 ff ff       	call   f010472b <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01095cf:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095d4:	83 ec 0c             	sub    $0xc,%esp
f01095d7:	50                   	push   %eax
f01095d8:	e8 f5 00 00 00       	call   f01096d2 <env_pop_tf>

f01095dd <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01095dd:	55                   	push   %ebp
f01095de:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f01095e0:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f01095e1:	5d                   	pop    %ebp
f01095e2:	c3                   	ret    

f01095e3 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01095e3:	55                   	push   %ebp
f01095e4:	89 e5                	mov    %esp,%ebp
f01095e6:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01095e9:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095ee:	8b 40 4c             	mov    0x4c(%eax),%eax
f01095f1:	83 ec 0c             	sub    $0xc,%esp
f01095f4:	50                   	push   %eax
f01095f5:	e8 0b ba ff ff       	call   f0105005 <sched_exit_env>
f01095fa:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01095fd:	e8 4b c8 ff ff       	call   f0105e4d <fos_scheduler>

f0109602 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109602:	55                   	push   %ebp
f0109603:	89 e5                	mov    %esp,%ebp
f0109605:	53                   	push   %ebx
f0109606:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109609:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010960d:	75 15                	jne    f0109624 <envid2env+0x22>
		*env_store = curenv;
f010960f:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f0109615:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109618:	89 10                	mov    %edx,(%eax)
		return 0;
f010961a:	b8 00 00 00 00       	mov    $0x0,%eax
f010961f:	e9 a9 00 00 00       	jmp    f01096cd <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109624:	8b 1d 30 32 25 f0    	mov    0xf0253230,%ebx
f010962a:	83 ec 0c             	sub    $0xc,%esp
f010962d:	6a 08                	push   $0x8
f010962f:	e8 99 41 02 00       	call   f012d7cd <nearest_pow2_ceil>
f0109634:	83 c4 10             	add    $0x10,%esp
f0109637:	8d 50 ff             	lea    -0x1(%eax),%edx
f010963a:	8b 45 08             	mov    0x8(%ebp),%eax
f010963d:	21 c2                	and    %eax,%edx
f010963f:	89 d0                	mov    %edx,%eax
f0109641:	01 c0                	add    %eax,%eax
f0109643:	01 d0                	add    %edx,%eax
f0109645:	01 c0                	add    %eax,%eax
f0109647:	01 d0                	add    %edx,%eax
f0109649:	c1 e0 02             	shl    $0x2,%eax
f010964c:	01 d0                	add    %edx,%eax
f010964e:	01 c0                	add    %eax,%eax
f0109650:	01 d0                	add    %edx,%eax
f0109652:	c1 e0 02             	shl    $0x2,%eax
f0109655:	01 d0                	add    %edx,%eax
f0109657:	c1 e0 02             	shl    $0x2,%eax
f010965a:	01 d0                	add    %edx,%eax
f010965c:	c1 e0 02             	shl    $0x2,%eax
f010965f:	01 d0                	add    %edx,%eax
f0109661:	c1 e0 05             	shl    $0x5,%eax
f0109664:	01 d8                	add    %ebx,%eax
f0109666:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109669:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010966c:	8b 40 54             	mov    0x54(%eax),%eax
f010966f:	85 c0                	test   %eax,%eax
f0109671:	74 0b                	je     f010967e <envid2env+0x7c>
f0109673:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109676:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109679:	3b 45 08             	cmp    0x8(%ebp),%eax
f010967c:	74 10                	je     f010968e <envid2env+0x8c>
		*env_store = 0;
f010967e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109681:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109687:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010968c:	eb 3f                	jmp    f01096cd <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010968e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109692:	74 2c                	je     f01096c0 <envid2env+0xbe>
f0109694:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0109699:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010969c:	74 22                	je     f01096c0 <envid2env+0xbe>
f010969e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096a1:	8b 50 50             	mov    0x50(%eax),%edx
f01096a4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01096a9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01096ac:	39 c2                	cmp    %eax,%edx
f01096ae:	74 10                	je     f01096c0 <envid2env+0xbe>
		*env_store = 0;
f01096b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01096b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01096b9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01096be:	eb 0d                	jmp    f01096cd <envid2env+0xcb>
	}

	*env_store = e;
f01096c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01096c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096c6:	89 10                	mov    %edx,(%eax)
	return 0;
f01096c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01096cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01096d0:	c9                   	leave  
f01096d1:	c3                   	ret    

f01096d2 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01096d2:	55                   	push   %ebp
f01096d3:	89 e5                	mov    %esp,%ebp
f01096d5:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01096d8:	8b 65 08             	mov    0x8(%ebp),%esp
f01096db:	61                   	popa   
f01096dc:	07                   	pop    %es
f01096dd:	1f                   	pop    %ds
f01096de:	83 c4 08             	add    $0x8,%esp
f01096e1:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01096e2:	83 ec 04             	sub    $0x4,%esp
f01096e5:	68 db 24 13 f0       	push   $0xf01324db
f01096ea:	68 23 02 00 00       	push   $0x223
f01096ef:	68 37 24 13 f0       	push   $0xf0132437
f01096f4:	e8 b7 6a ff ff       	call   f01001b0 <_panic>

f01096f9 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01096f9:	55                   	push   %ebp
f01096fa:	89 e5                	mov    %esp,%ebp
f01096fc:	53                   	push   %ebx
f01096fd:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109700:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109707:	e9 e3 01 00 00       	jmp    f01098ef <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f010970c:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109715:	89 d0                	mov    %edx,%eax
f0109717:	01 c0                	add    %eax,%eax
f0109719:	01 d0                	add    %edx,%eax
f010971b:	01 c0                	add    %eax,%eax
f010971d:	01 d0                	add    %edx,%eax
f010971f:	c1 e0 02             	shl    $0x2,%eax
f0109722:	01 d0                	add    %edx,%eax
f0109724:	01 c0                	add    %eax,%eax
f0109726:	01 d0                	add    %edx,%eax
f0109728:	c1 e0 02             	shl    $0x2,%eax
f010972b:	01 d0                	add    %edx,%eax
f010972d:	c1 e0 02             	shl    $0x2,%eax
f0109730:	01 d0                	add    %edx,%eax
f0109732:	c1 e0 02             	shl    $0x2,%eax
f0109735:	01 d0                	add    %edx,%eax
f0109737:	c1 e0 05             	shl    $0x5,%eax
f010973a:	01 c8                	add    %ecx,%eax
f010973c:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109743:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109749:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010974c:	89 d0                	mov    %edx,%eax
f010974e:	01 c0                	add    %eax,%eax
f0109750:	01 d0                	add    %edx,%eax
f0109752:	01 c0                	add    %eax,%eax
f0109754:	01 d0                	add    %edx,%eax
f0109756:	c1 e0 02             	shl    $0x2,%eax
f0109759:	01 d0                	add    %edx,%eax
f010975b:	01 c0                	add    %eax,%eax
f010975d:	01 d0                	add    %edx,%eax
f010975f:	c1 e0 02             	shl    $0x2,%eax
f0109762:	01 d0                	add    %edx,%eax
f0109764:	c1 e0 02             	shl    $0x2,%eax
f0109767:	01 d0                	add    %edx,%eax
f0109769:	c1 e0 02             	shl    $0x2,%eax
f010976c:	01 d0                	add    %edx,%eax
f010976e:	c1 e0 05             	shl    $0x5,%eax
f0109771:	01 c8                	add    %ecx,%eax
f0109773:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010977a:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109780:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109783:	89 d0                	mov    %edx,%eax
f0109785:	01 c0                	add    %eax,%eax
f0109787:	01 d0                	add    %edx,%eax
f0109789:	01 c0                	add    %eax,%eax
f010978b:	01 d0                	add    %edx,%eax
f010978d:	c1 e0 02             	shl    $0x2,%eax
f0109790:	01 d0                	add    %edx,%eax
f0109792:	01 c0                	add    %eax,%eax
f0109794:	01 d0                	add    %edx,%eax
f0109796:	c1 e0 02             	shl    $0x2,%eax
f0109799:	01 d0                	add    %edx,%eax
f010979b:	c1 e0 02             	shl    $0x2,%eax
f010979e:	01 d0                	add    %edx,%eax
f01097a0:	c1 e0 02             	shl    $0x2,%eax
f01097a3:	01 d0                	add    %edx,%eax
f01097a5:	c1 e0 05             	shl    $0x5,%eax
f01097a8:	01 c8                	add    %ecx,%eax
f01097aa:	85 c0                	test   %eax,%eax
f01097ac:	75 17                	jne    f01097c5 <env_init+0xcc>
f01097ae:	83 ec 04             	sub    $0x4,%esp
f01097b1:	68 b8 24 13 f0       	push   $0xf01324b8
f01097b6:	68 3f 02 00 00       	push   $0x23f
f01097bb:	68 37 24 13 f0       	push   $0xf0132437
f01097c0:	e8 eb 69 ff ff       	call   f01001b0 <_panic>
f01097c5:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f01097cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097ce:	89 d0                	mov    %edx,%eax
f01097d0:	01 c0                	add    %eax,%eax
f01097d2:	01 d0                	add    %edx,%eax
f01097d4:	01 c0                	add    %eax,%eax
f01097d6:	01 d0                	add    %edx,%eax
f01097d8:	c1 e0 02             	shl    $0x2,%eax
f01097db:	01 d0                	add    %edx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 d0                	add    %edx,%eax
f01097e1:	c1 e0 02             	shl    $0x2,%eax
f01097e4:	01 d0                	add    %edx,%eax
f01097e6:	c1 e0 02             	shl    $0x2,%eax
f01097e9:	01 d0                	add    %edx,%eax
f01097eb:	c1 e0 02             	shl    $0x2,%eax
f01097ee:	01 d0                	add    %edx,%eax
f01097f0:	c1 e0 05             	shl    $0x5,%eax
f01097f3:	01 c8                	add    %ecx,%eax
f01097f5:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f01097fb:	89 50 44             	mov    %edx,0x44(%eax)
f01097fe:	8b 40 44             	mov    0x44(%eax),%eax
f0109801:	85 c0                	test   %eax,%eax
f0109803:	74 3b                	je     f0109840 <env_init+0x147>
f0109805:	8b 0d 38 32 25 f0    	mov    0xf0253238,%ecx
f010980b:	8b 1d 30 32 25 f0    	mov    0xf0253230,%ebx
f0109811:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109814:	89 d0                	mov    %edx,%eax
f0109816:	01 c0                	add    %eax,%eax
f0109818:	01 d0                	add    %edx,%eax
f010981a:	01 c0                	add    %eax,%eax
f010981c:	01 d0                	add    %edx,%eax
f010981e:	c1 e0 02             	shl    $0x2,%eax
f0109821:	01 d0                	add    %edx,%eax
f0109823:	01 c0                	add    %eax,%eax
f0109825:	01 d0                	add    %edx,%eax
f0109827:	c1 e0 02             	shl    $0x2,%eax
f010982a:	01 d0                	add    %edx,%eax
f010982c:	c1 e0 02             	shl    $0x2,%eax
f010982f:	01 d0                	add    %edx,%eax
f0109831:	c1 e0 02             	shl    $0x2,%eax
f0109834:	01 d0                	add    %edx,%eax
f0109836:	c1 e0 05             	shl    $0x5,%eax
f0109839:	01 d8                	add    %ebx,%eax
f010983b:	89 41 48             	mov    %eax,0x48(%ecx)
f010983e:	eb 35                	jmp    f0109875 <env_init+0x17c>
f0109840:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109846:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109849:	89 d0                	mov    %edx,%eax
f010984b:	01 c0                	add    %eax,%eax
f010984d:	01 d0                	add    %edx,%eax
f010984f:	01 c0                	add    %eax,%eax
f0109851:	01 d0                	add    %edx,%eax
f0109853:	c1 e0 02             	shl    $0x2,%eax
f0109856:	01 d0                	add    %edx,%eax
f0109858:	01 c0                	add    %eax,%eax
f010985a:	01 d0                	add    %edx,%eax
f010985c:	c1 e0 02             	shl    $0x2,%eax
f010985f:	01 d0                	add    %edx,%eax
f0109861:	c1 e0 02             	shl    $0x2,%eax
f0109864:	01 d0                	add    %edx,%eax
f0109866:	c1 e0 02             	shl    $0x2,%eax
f0109869:	01 d0                	add    %edx,%eax
f010986b:	c1 e0 05             	shl    $0x5,%eax
f010986e:	01 c8                	add    %ecx,%eax
f0109870:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f0109875:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f010987b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987e:	89 d0                	mov    %edx,%eax
f0109880:	01 c0                	add    %eax,%eax
f0109882:	01 d0                	add    %edx,%eax
f0109884:	01 c0                	add    %eax,%eax
f0109886:	01 d0                	add    %edx,%eax
f0109888:	c1 e0 02             	shl    $0x2,%eax
f010988b:	01 d0                	add    %edx,%eax
f010988d:	01 c0                	add    %eax,%eax
f010988f:	01 d0                	add    %edx,%eax
f0109891:	c1 e0 02             	shl    $0x2,%eax
f0109894:	01 d0                	add    %edx,%eax
f0109896:	c1 e0 02             	shl    $0x2,%eax
f0109899:	01 d0                	add    %edx,%eax
f010989b:	c1 e0 02             	shl    $0x2,%eax
f010989e:	01 d0                	add    %edx,%eax
f01098a0:	c1 e0 05             	shl    $0x5,%eax
f01098a3:	01 c8                	add    %ecx,%eax
f01098a5:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f01098aa:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f01098b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098b3:	89 d0                	mov    %edx,%eax
f01098b5:	01 c0                	add    %eax,%eax
f01098b7:	01 d0                	add    %edx,%eax
f01098b9:	01 c0                	add    %eax,%eax
f01098bb:	01 d0                	add    %edx,%eax
f01098bd:	c1 e0 02             	shl    $0x2,%eax
f01098c0:	01 d0                	add    %edx,%eax
f01098c2:	01 c0                	add    %eax,%eax
f01098c4:	01 d0                	add    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	c1 e0 02             	shl    $0x2,%eax
f01098ce:	01 d0                	add    %edx,%eax
f01098d0:	c1 e0 02             	shl    $0x2,%eax
f01098d3:	01 d0                	add    %edx,%eax
f01098d5:	c1 e0 05             	shl    $0x5,%eax
f01098d8:	01 c8                	add    %ecx,%eax
f01098da:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098e1:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f01098e6:	40                   	inc    %eax
f01098e7:	a3 44 32 25 f0       	mov    %eax,0xf0253244
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01098ec:	ff 4d f4             	decl   -0xc(%ebp)
f01098ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098f3:	0f 89 13 fe ff ff    	jns    f010970c <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01098f9:	90                   	nop
f01098fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01098fd:	c9                   	leave  
f01098fe:	c3                   	ret    

f01098ff <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01098ff:	55                   	push   %ebp
f0109900:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109902:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f0109908:	8b 45 08             	mov    0x8(%ebp),%eax
f010990b:	89 10                	mov    %edx,(%eax)
f010990d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109910:	8b 00                	mov    (%eax),%eax
f0109912:	85 c0                	test   %eax,%eax
f0109914:	75 07                	jne    f010991d <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109916:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010991b:	eb 11                	jmp    f010992e <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010991d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109920:	8b 00                	mov    (%eax),%eax
f0109922:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010992e:	5d                   	pop    %ebp
f010992f:	c3                   	ret    

f0109930 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109930:	55                   	push   %ebp
f0109931:	89 e5                	mov    %esp,%ebp
f0109933:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109936:	83 ec 04             	sub    $0x4,%esp
f0109939:	68 a0 da 01 00       	push   $0x1daa0
f010993e:	6a 00                	push   $0x0
f0109940:	ff 75 08             	pushl  0x8(%ebp)
f0109943:	e8 e8 52 02 00       	call   f012ec30 <memset>
f0109948:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010994b:	8b 45 08             	mov    0x8(%ebp),%eax
f010994e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109955:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109959:	75 17                	jne    f0109972 <free_environment+0x42>
f010995b:	83 ec 04             	sub    $0x4,%esp
f010995e:	68 b8 24 13 f0       	push   $0xf01324b8
f0109963:	68 5c 02 00 00       	push   $0x25c
f0109968:	68 37 24 13 f0       	push   $0xf0132437
f010996d:	e8 3e 68 ff ff       	call   f01001b0 <_panic>
f0109972:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f0109978:	8b 45 08             	mov    0x8(%ebp),%eax
f010997b:	89 50 44             	mov    %edx,0x44(%eax)
f010997e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109981:	8b 40 44             	mov    0x44(%eax),%eax
f0109984:	85 c0                	test   %eax,%eax
f0109986:	74 0d                	je     f0109995 <free_environment+0x65>
f0109988:	a1 38 32 25 f0       	mov    0xf0253238,%eax
f010998d:	8b 55 08             	mov    0x8(%ebp),%edx
f0109990:	89 50 48             	mov    %edx,0x48(%eax)
f0109993:	eb 08                	jmp    f010999d <free_environment+0x6d>
f0109995:	8b 45 08             	mov    0x8(%ebp),%eax
f0109998:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f010999d:	8b 45 08             	mov    0x8(%ebp),%eax
f01099a0:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f01099a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01099a8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01099af:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f01099b4:	40                   	inc    %eax
f01099b5:	a3 44 32 25 f0       	mov    %eax,0xf0253244
}
f01099ba:	90                   	nop
f01099bb:	c9                   	leave  
f01099bc:	c3                   	ret    

f01099bd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01099bd:	55                   	push   %ebp
f01099be:	89 e5                	mov    %esp,%ebp
f01099c0:	53                   	push   %ebx
f01099c1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01099c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099c7:	8b 40 0c             	mov    0xc(%eax),%eax
f01099ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01099cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099d0:	8b 40 08             	mov    0x8(%eax),%eax
f01099d3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01099d6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01099dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01099e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01099e3:	01 c2                	add    %eax,%edx
f01099e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01099e8:	01 d0                	add    %edx,%eax
f01099ea:	48                   	dec    %eax
f01099eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01099ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01099f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01099f6:	f7 75 dc             	divl   -0x24(%ebp)
f01099f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01099fc:	29 d0                	sub    %edx,%eax
f01099fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109a01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109a04:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109a07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109a12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109a19:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0109a23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109a29:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109a30:	0f 85 38 06 00 00    	jne    f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
f0109a36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a39:	83 c0 5c             	add    $0x5c,%eax
f0109a3c:	83 ec 08             	sub    $0x8,%esp
f0109a3f:	68 e7 24 13 f0       	push   $0xf01324e7
f0109a44:	50                   	push   %eax
f0109a45:	e8 04 51 02 00       	call   f012eb4e <strcmp>
f0109a4a:	83 c4 10             	add    $0x10,%esp
f0109a4d:	85 c0                	test   %eax,%eax
f0109a4f:	0f 84 19 06 00 00    	je     f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109a55:	8b 45 14             	mov    0x14(%ebp),%eax
f0109a58:	83 f8 06             	cmp    $0x6,%eax
f0109a5b:	76 05                	jbe    f0109a62 <program_segment_alloc_map_copy_workingset+0xa5>
f0109a5d:	b8 06 00 00 00       	mov    $0x6,%eax
f0109a62:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109a65:	e9 04 06 00 00       	jmp    f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109a6a:	83 ec 0c             	sub    $0xc,%esp
f0109a6d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109a70:	50                   	push   %eax
f0109a71:	e8 e3 d4 ff ff       	call   f0106f59 <allocate_frame>
f0109a76:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109a79:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109a85:	6a 06                	push   $0x6
f0109a87:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a8a:	52                   	push   %edx
f0109a8b:	50                   	push   %eax
f0109a8c:	e8 19 da ff ff       	call   f01074aa <loadtime_map_frame>
f0109a91:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a97:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109a9d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109aa0:	89 d0                	mov    %edx,%eax
f0109aa2:	01 c0                	add    %eax,%eax
f0109aa4:	01 d0                	add    %edx,%eax
f0109aa6:	c1 e0 03             	shl    $0x3,%eax
f0109aa9:	01 c8                	add    %ecx,%eax
f0109aab:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ab4:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ab9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ac2:	89 d0                	mov    %edx,%eax
f0109ac4:	01 c0                	add    %eax,%eax
f0109ac6:	01 d0                	add    %edx,%eax
f0109ac8:	c1 e0 03             	shl    $0x3,%eax
f0109acb:	01 c8                	add    %ecx,%eax
f0109acd:	05 bc 00 00 00       	add    $0xbc,%eax
f0109ad2:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad8:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ade:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ae1:	89 d0                	mov    %edx,%eax
f0109ae3:	01 c0                	add    %eax,%eax
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	c1 e0 03             	shl    $0x3,%eax
f0109aea:	01 c8                	add    %ecx,%eax
f0109aec:	05 c0 00 00 00       	add    $0xc0,%eax
f0109af1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109af7:	83 ec 0c             	sub    $0xc,%esp
f0109afa:	6a 02                	push   $0x2
f0109afc:	e8 83 38 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f0109b01:	83 c4 10             	add    $0x10,%esp
f0109b04:	85 c0                	test   %eax,%eax
f0109b06:	0f 84 2c 04 00 00    	je     f0109f38 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b0f:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b15:	89 d0                	mov    %edx,%eax
f0109b17:	01 c0                	add    %eax,%eax
f0109b19:	01 d0                	add    %edx,%eax
f0109b1b:	c1 e0 03             	shl    $0x3,%eax
f0109b1e:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109b24:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b27:	01 d0                	add    %edx,%eax
f0109b29:	83 c0 08             	add    $0x8,%eax
f0109b2c:	85 c0                	test   %eax,%eax
f0109b2e:	75 17                	jne    f0109b47 <program_segment_alloc_map_copy_workingset+0x18a>
f0109b30:	83 ec 04             	sub    $0x4,%esp
f0109b33:	68 99 24 13 f0       	push   $0xf0132499
f0109b38:	68 9f 02 00 00       	push   $0x29f
f0109b3d:	68 37 24 13 f0       	push   $0xf0132437
f0109b42:	e8 69 66 ff ff       	call   f01001b0 <_panic>
f0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b53:	89 d0                	mov    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 03             	shl    $0x3,%eax
f0109b5c:	01 c8                	add    %ecx,%eax
f0109b5e:	05 c8 00 00 00       	add    $0xc8,%eax
f0109b63:	8b 00                	mov    (%eax),%eax
f0109b65:	85 c0                	test   %eax,%eax
f0109b67:	74 41                	je     f0109baa <program_segment_alloc_map_copy_workingset+0x1ed>
f0109b69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b6c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b72:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b75:	89 d0                	mov    %edx,%eax
f0109b77:	01 c0                	add    %eax,%eax
f0109b79:	01 d0                	add    %edx,%eax
f0109b7b:	c1 e0 03             	shl    $0x3,%eax
f0109b7e:	01 c8                	add    %ecx,%eax
f0109b80:	05 c8 00 00 00       	add    $0xc8,%eax
f0109b85:	8b 10                	mov    (%eax),%edx
f0109b87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b8a:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109b90:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109b93:	89 c8                	mov    %ecx,%eax
f0109b95:	01 c0                	add    %eax,%eax
f0109b97:	01 c8                	add    %ecx,%eax
f0109b99:	c1 e0 03             	shl    $0x3,%eax
f0109b9c:	01 d8                	add    %ebx,%eax
f0109b9e:	05 cc 00 00 00       	add    $0xcc,%eax
f0109ba3:	8b 00                	mov    (%eax),%eax
f0109ba5:	89 42 14             	mov    %eax,0x14(%edx)
f0109ba8:	eb 27                	jmp    f0109bd1 <program_segment_alloc_map_copy_workingset+0x214>
f0109baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bad:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bb3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bb6:	89 d0                	mov    %edx,%eax
f0109bb8:	01 c0                	add    %eax,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 03             	shl    $0x3,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	05 cc 00 00 00       	add    $0xcc,%eax
f0109bc6:	8b 10                	mov    (%eax),%edx
f0109bc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bcb:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109bd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bd4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bdd:	89 d0                	mov    %edx,%eax
f0109bdf:	01 c0                	add    %eax,%eax
f0109be1:	01 d0                	add    %edx,%eax
f0109be3:	c1 e0 03             	shl    $0x3,%eax
f0109be6:	01 c8                	add    %ecx,%eax
f0109be8:	05 cc 00 00 00       	add    $0xcc,%eax
f0109bed:	8b 00                	mov    (%eax),%eax
f0109bef:	85 c0                	test   %eax,%eax
f0109bf1:	74 41                	je     f0109c34 <program_segment_alloc_map_copy_workingset+0x277>
f0109bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bf6:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bfc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bff:	89 d0                	mov    %edx,%eax
f0109c01:	01 c0                	add    %eax,%eax
f0109c03:	01 d0                	add    %edx,%eax
f0109c05:	c1 e0 03             	shl    $0x3,%eax
f0109c08:	01 c8                	add    %ecx,%eax
f0109c0a:	05 cc 00 00 00       	add    $0xcc,%eax
f0109c0f:	8b 10                	mov    (%eax),%edx
f0109c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c14:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109c1a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c1d:	89 c8                	mov    %ecx,%eax
f0109c1f:	01 c0                	add    %eax,%eax
f0109c21:	01 c8                	add    %ecx,%eax
f0109c23:	c1 e0 03             	shl    $0x3,%eax
f0109c26:	01 d8                	add    %ebx,%eax
f0109c28:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c2d:	8b 00                	mov    (%eax),%eax
f0109c2f:	89 42 10             	mov    %eax,0x10(%edx)
f0109c32:	eb 27                	jmp    f0109c5b <program_segment_alloc_map_copy_workingset+0x29e>
f0109c34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c37:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c3d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c40:	89 d0                	mov    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	c1 e0 03             	shl    $0x3,%eax
f0109c49:	01 c8                	add    %ecx,%eax
f0109c4b:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c50:	8b 10                	mov    (%eax),%edx
f0109c52:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c55:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f0109c5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c5e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c64:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c67:	89 d0                	mov    %edx,%eax
f0109c69:	01 c0                	add    %eax,%eax
f0109c6b:	01 d0                	add    %edx,%eax
f0109c6d:	c1 e0 03             	shl    $0x3,%eax
f0109c70:	01 c8                	add    %ecx,%eax
f0109c72:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109c7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c80:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c86:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c89:	89 d0                	mov    %edx,%eax
f0109c8b:	01 c0                	add    %eax,%eax
f0109c8d:	01 d0                	add    %edx,%eax
f0109c8f:	c1 e0 03             	shl    $0x3,%eax
f0109c92:	01 c8                	add    %ecx,%eax
f0109c94:	05 cc 00 00 00       	add    $0xcc,%eax
f0109c99:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca2:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f0109ca8:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109cab:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cae:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109cb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cb7:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109cbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc0:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0109cc6:	48                   	dec    %eax
f0109cc7:	39 c2                	cmp    %eax,%edx
f0109cc9:	0f 83 37 01 00 00    	jae    f0109e06 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ccf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109cd8:	89 d0                	mov    %edx,%eax
f0109cda:	01 c0                	add    %eax,%eax
f0109cdc:	01 d0                	add    %edx,%eax
f0109cde:	c1 e0 03             	shl    $0x3,%eax
f0109ce1:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ce7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cea:	01 d0                	add    %edx,%eax
f0109cec:	83 c0 08             	add    $0x8,%eax
f0109cef:	85 c0                	test   %eax,%eax
f0109cf1:	75 17                	jne    f0109d0a <program_segment_alloc_map_copy_workingset+0x34d>
f0109cf3:	83 ec 04             	sub    $0x4,%esp
f0109cf6:	68 b8 24 13 f0       	push   $0xf01324b8
f0109cfb:	68 a3 02 00 00       	push   $0x2a3
f0109d00:	68 37 24 13 f0       	push   $0xf0132437
f0109d05:	e8 a6 64 ff ff       	call   f01001b0 <_panic>
f0109d0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0d:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d16:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f0109d1c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d1f:	89 d0                	mov    %edx,%eax
f0109d21:	01 c0                	add    %eax,%eax
f0109d23:	01 d0                	add    %edx,%eax
f0109d25:	c1 e0 03             	shl    $0x3,%eax
f0109d28:	01 d8                	add    %ebx,%eax
f0109d2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109d2f:	89 08                	mov    %ecx,(%eax)
f0109d31:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d34:	89 d0                	mov    %edx,%eax
f0109d36:	01 c0                	add    %eax,%eax
f0109d38:	01 d0                	add    %edx,%eax
f0109d3a:	c1 e0 03             	shl    $0x3,%eax
f0109d3d:	01 c8                	add    %ecx,%eax
f0109d3f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109d44:	8b 00                	mov    (%eax),%eax
f0109d46:	85 c0                	test   %eax,%eax
f0109d48:	74 2e                	je     f0109d78 <program_segment_alloc_map_copy_workingset+0x3bb>
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f0109d53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d56:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109d5c:	89 c8                	mov    %ecx,%eax
f0109d5e:	01 c0                	add    %eax,%eax
f0109d60:	01 c8                	add    %ecx,%eax
f0109d62:	c1 e0 03             	shl    $0x3,%eax
f0109d65:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f0109d6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6e:	01 c8                	add    %ecx,%eax
f0109d70:	83 c0 08             	add    $0x8,%eax
f0109d73:	89 42 14             	mov    %eax,0x14(%edx)
f0109d76:	eb 29                	jmp    f0109da1 <program_segment_alloc_map_copy_workingset+0x3e4>
f0109d78:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d7b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109d81:	89 d0                	mov    %edx,%eax
f0109d83:	01 c0                	add    %eax,%eax
f0109d85:	01 d0                	add    %edx,%eax
f0109d87:	c1 e0 03             	shl    $0x3,%eax
f0109d8a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d93:	01 d0                	add    %edx,%eax
f0109d95:	8d 50 08             	lea    0x8(%eax),%edx
f0109d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9b:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f0109da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109daa:	89 d0                	mov    %edx,%eax
f0109dac:	01 c0                	add    %eax,%eax
f0109dae:	01 d0                	add    %edx,%eax
f0109db0:	c1 e0 03             	shl    $0x3,%eax
f0109db3:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109db9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dbc:	01 d0                	add    %edx,%eax
f0109dbe:	8d 50 08             	lea    0x8(%eax),%edx
f0109dc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc4:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f0109dca:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dcd:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109dd3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109dd6:	89 d0                	mov    %edx,%eax
f0109dd8:	01 c0                	add    %eax,%eax
f0109dda:	01 d0                	add    %edx,%eax
f0109ddc:	c1 e0 03             	shl    $0x3,%eax
f0109ddf:	01 c8                	add    %ecx,%eax
f0109de1:	05 cc 00 00 00       	add    $0xcc,%eax
f0109de6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109dec:	8b 45 08             	mov    0x8(%ebp),%eax
f0109def:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f0109df5:	8d 50 01             	lea    0x1(%eax),%edx
f0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dfb:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109e01:	e9 32 01 00 00       	jmp    f0109f38 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e09:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e0f:	89 d0                	mov    %edx,%eax
f0109e11:	01 c0                	add    %eax,%eax
f0109e13:	01 d0                	add    %edx,%eax
f0109e15:	c1 e0 03             	shl    $0x3,%eax
f0109e18:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e21:	01 d0                	add    %edx,%eax
f0109e23:	83 c0 08             	add    $0x8,%eax
f0109e26:	85 c0                	test   %eax,%eax
f0109e28:	75 17                	jne    f0109e41 <program_segment_alloc_map_copy_workingset+0x484>
f0109e2a:	83 ec 04             	sub    $0x4,%esp
f0109e2d:	68 b8 24 13 f0       	push   $0xf01324b8
f0109e32:	68 a8 02 00 00       	push   $0x2a8
f0109e37:	68 37 24 13 f0       	push   $0xf0132437
f0109e3c:	e8 6f 63 ff ff       	call   f01001b0 <_panic>
f0109e41:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e44:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4d:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f0109e53:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109e56:	89 d0                	mov    %edx,%eax
f0109e58:	01 c0                	add    %eax,%eax
f0109e5a:	01 d0                	add    %edx,%eax
f0109e5c:	c1 e0 03             	shl    $0x3,%eax
f0109e5f:	01 d8                	add    %ebx,%eax
f0109e61:	05 c8 00 00 00       	add    $0xc8,%eax
f0109e66:	89 08                	mov    %ecx,(%eax)
f0109e68:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e6b:	89 d0                	mov    %edx,%eax
f0109e6d:	01 c0                	add    %eax,%eax
f0109e6f:	01 d0                	add    %edx,%eax
f0109e71:	c1 e0 03             	shl    $0x3,%eax
f0109e74:	01 c8                	add    %ecx,%eax
f0109e76:	05 c8 00 00 00       	add    $0xc8,%eax
f0109e7b:	8b 00                	mov    (%eax),%eax
f0109e7d:	85 c0                	test   %eax,%eax
f0109e7f:	74 2e                	je     f0109eaf <program_segment_alloc_map_copy_workingset+0x4f2>
f0109e81:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e84:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f0109e8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8d:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109e93:	89 c8                	mov    %ecx,%eax
f0109e95:	01 c0                	add    %eax,%eax
f0109e97:	01 c8                	add    %ecx,%eax
f0109e99:	c1 e0 03             	shl    $0x3,%eax
f0109e9c:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f0109ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea5:	01 c8                	add    %ecx,%eax
f0109ea7:	83 c0 08             	add    $0x8,%eax
f0109eaa:	89 42 14             	mov    %eax,0x14(%edx)
f0109ead:	eb 29                	jmp    f0109ed8 <program_segment_alloc_map_copy_workingset+0x51b>
f0109eaf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109eb8:	89 d0                	mov    %edx,%eax
f0109eba:	01 c0                	add    %eax,%eax
f0109ebc:	01 d0                	add    %edx,%eax
f0109ebe:	c1 e0 03             	shl    $0x3,%eax
f0109ec1:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ec7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eca:	01 d0                	add    %edx,%eax
f0109ecc:	8d 50 08             	lea    0x8(%eax),%edx
f0109ecf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed2:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f0109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee1:	89 d0                	mov    %edx,%eax
f0109ee3:	01 c0                	add    %eax,%eax
f0109ee5:	01 d0                	add    %edx,%eax
f0109ee7:	c1 e0 03             	shl    $0x3,%eax
f0109eea:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef3:	01 d0                	add    %edx,%eax
f0109ef5:	8d 50 08             	lea    0x8(%eax),%edx
f0109ef8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109efb:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f0109f01:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f04:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f0a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f0d:	89 d0                	mov    %edx,%eax
f0109f0f:	01 c0                	add    %eax,%eax
f0109f11:	01 d0                	add    %edx,%eax
f0109f13:	c1 e0 03             	shl    $0x3,%eax
f0109f16:	01 c8                	add    %ecx,%eax
f0109f18:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109f23:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f26:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f0109f2c:	8d 50 01             	lea    0x1(%eax),%edx
f0109f2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f32:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f0109f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3b:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109f41:	8d 50 01             	lea    0x1(%eax),%edx
f0109f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f47:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f50:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109f56:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f59:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f0109f5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f64:	f7 f1                	div    %ecx
f0109f66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f69:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f72:	c1 e8 16             	shr    $0x16,%eax
f0109f75:	89 c2                	mov    %eax,%edx
f0109f77:	8b 45 18             	mov    0x18(%ebp),%eax
f0109f7a:	8b 00                	mov    (%eax),%eax
f0109f7c:	39 c2                	cmp    %eax,%edx
f0109f7e:	0f 84 d3 00 00 00    	je     f010a057 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109f84:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f87:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f90:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109f93:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109f96:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109f9b:	89 c1                	mov    %eax,%ecx
f0109f9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fa0:	89 d0                	mov    %edx,%eax
f0109fa2:	01 c0                	add    %eax,%eax
f0109fa4:	01 d0                	add    %edx,%eax
f0109fa6:	c1 e0 03             	shl    $0x3,%eax
f0109fa9:	01 d8                	add    %ebx,%eax
f0109fab:	05 80 d5 01 00       	add    $0x1d580,%eax
f0109fb0:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb5:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109fbb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fbe:	89 d0                	mov    %edx,%eax
f0109fc0:	01 c0                	add    %eax,%eax
f0109fc2:	01 d0                	add    %edx,%eax
f0109fc4:	c1 e0 03             	shl    $0x3,%eax
f0109fc7:	01 c8                	add    %ecx,%eax
f0109fc9:	05 84 d5 01 00       	add    $0x1d584,%eax
f0109fce:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd4:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109fda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fdd:	89 d0                	mov    %edx,%eax
f0109fdf:	01 c0                	add    %eax,%eax
f0109fe1:	01 d0                	add    %edx,%eax
f0109fe3:	c1 e0 03             	shl    $0x3,%eax
f0109fe6:	01 c8                	add    %ecx,%eax
f0109fe8:	05 88 d5 01 00       	add    $0x1d588,%eax
f0109fed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109ff3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff6:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0109ffc:	8d 50 01             	lea    0x1(%eax),%edx
f0109fff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a002:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a008:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00b:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a011:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a016:	ba 00 00 00 00       	mov    $0x0,%edx
f010a01b:	f7 f1                	div    %ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a026:	8b 45 08             	mov    0x8(%ebp),%eax
f010a029:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a02f:	85 c0                	test   %eax,%eax
f010a031:	75 17                	jne    f010a04a <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a033:	83 ec 04             	sub    $0x4,%esp
f010a036:	68 ec 24 13 f0       	push   $0xf01324ec
f010a03b:	68 c3 02 00 00       	push   $0x2c3
f010a040:	68 37 24 13 f0       	push   $0xf0132437
f010a045:	e8 66 61 ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a04a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a04d:	c1 e8 16             	shr    $0x16,%eax
f010a050:	89 c2                	mov    %eax,%edx
f010a052:	8b 45 18             	mov    0x18(%ebp),%eax
f010a055:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a057:	8b 45 10             	mov    0x10(%ebp),%eax
f010a05a:	8b 00                	mov    (%eax),%eax
f010a05c:	8d 50 01             	lea    0x1(%eax),%edx
f010a05f:	8b 45 10             	mov    0x10(%ebp),%eax
f010a062:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a064:	ff 45 f0             	incl   -0x10(%ebp)
f010a067:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a06e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a071:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a074:	73 0c                	jae    f010a082 <program_segment_alloc_map_copy_workingset+0x6c5>
f010a076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a079:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a07c:	0f 82 e8 f9 ff ff    	jb     f0109a6a <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a082:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a085:	8b 00                	mov    (%eax),%eax
f010a087:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a08a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a08d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a090:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a093:	eb 10                	jmp    f010a0a5 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a095:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a098:	8a 10                	mov    (%eax),%dl
f010a09a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a09d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a09f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a0a2:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a0a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0a8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a0ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a0ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a0b3:	89 c2                	mov    %eax,%edx
f010a0b5:	8b 45 10             	mov    0x10(%ebp),%eax
f010a0b8:	8b 00                	mov    (%eax),%eax
f010a0ba:	c1 e0 0c             	shl    $0xc,%eax
f010a0bd:	01 c2                	add    %eax,%edx
f010a0bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a0c2:	39 c2                	cmp    %eax,%edx
f010a0c4:	76 1d                	jbe    f010a0e3 <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a0c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0c9:	8b 50 04             	mov    0x4(%eax),%edx
f010a0cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0cf:	01 c2                	add    %eax,%edx
f010a0d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a0d4:	39 c2                	cmp    %eax,%edx
f010a0d6:	77 bd                	ja     f010a095 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a0d8:	eb 09                	jmp    f010a0e3 <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a0da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a0dd:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a0e0:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a0e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0e6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a0e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a0f1:	89 c2                	mov    %eax,%edx
f010a0f3:	8b 45 10             	mov    0x10(%ebp),%eax
f010a0f6:	8b 00                	mov    (%eax),%eax
f010a0f8:	c1 e0 0c             	shl    $0xc,%eax
f010a0fb:	01 c2                	add    %eax,%edx
f010a0fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a100:	39 c2                	cmp    %eax,%edx
f010a102:	77 d6                	ja     f010a0da <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a104:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a109:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a10c:	c9                   	leave  
f010a10d:	c3                   	ret    

f010a10e <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a10e:	55                   	push   %ebp
f010a10f:	89 e5                	mov    %esp,%ebp
f010a111:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a114:	83 ec 0c             	sub    $0xc,%esp
f010a117:	68 00 10 00 00       	push   $0x1000
f010a11c:	e8 72 da ff ff       	call   f0107b93 <kmalloc>
f010a121:	83 c4 10             	add    $0x10,%esp
f010a124:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a12b:	75 17                	jne    f010a144 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a12d:	83 ec 04             	sub    $0x4,%esp
f010a130:	68 8f 25 13 f0       	push   $0xf013258f
f010a135:	68 ff 02 00 00       	push   $0x2ff
f010a13a:	68 37 24 13 f0       	push   $0xf0132437
f010a13f:	e8 6c 60 ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a144:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a147:	c9                   	leave  
f010a148:	c3                   	ret    

f010a149 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a149:	55                   	push   %ebp
f010a14a:	89 e5                	mov    %esp,%ebp
f010a14c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	panic("not implemented yet");
f010a14f:	83 ec 04             	sub    $0x4,%esp
f010a152:	68 ac 25 13 f0       	push   $0xf01325ac
f010a157:	68 0e 03 00 00       	push   $0x30e
f010a15c:	68 37 24 13 f0       	push   $0xf0132437
f010a161:	e8 4a 60 ff ff       	call   f01001b0 <_panic>

f010a166 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a166:	55                   	push   %ebp
f010a167:	89 e5                	mov    %esp,%ebp
f010a169:	53                   	push   %ebx
f010a16a:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a16d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a170:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a173:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 55 10             	mov    0x10(%ebp),%edx
f010a17f:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a185:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a18c:	eb 1a                	jmp    f010a1a8 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a18e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a191:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a197:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a19a:	c1 e2 02             	shl    $0x2,%edx
f010a19d:	01 d0                	add    %edx,%eax
f010a19f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a1a5:	ff 45 f4             	incl   -0xc(%ebp)
f010a1a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ab:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a1b0:	76 dc                	jbe    f010a18e <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a1b2:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a1b9:	eb 25                	jmp    f010a1e0 <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a1bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1be:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a1c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1c7:	c1 e2 02             	shl    $0x2,%edx
f010a1ca:	01 c2                	add    %eax,%edx
f010a1cc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010a1d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a1d4:	c1 e1 02             	shl    $0x2,%ecx
f010a1d7:	01 c8                	add    %ecx,%eax
f010a1d9:	8b 00                	mov    (%eax),%eax
f010a1db:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a1dd:	ff 45 f4             	incl   -0xc(%ebp)
f010a1e0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a1e7:	7e d2                	jle    f010a1bb <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a1e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ec:	8b 15 30 32 25 f0    	mov    0xf0253230,%edx
f010a1f2:	29 d0                	sub    %edx,%eax
f010a1f4:	c1 f8 05             	sar    $0x5,%eax
f010a1f7:	89 c2                	mov    %eax,%edx
f010a1f9:	89 d0                	mov    %edx,%eax
f010a1fb:	c1 e0 03             	shl    $0x3,%eax
f010a1fe:	01 d0                	add    %edx,%eax
f010a200:	01 c0                	add    %eax,%eax
f010a202:	01 d0                	add    %edx,%eax
f010a204:	c1 e0 06             	shl    $0x6,%eax
f010a207:	01 d0                	add    %edx,%eax
f010a209:	89 c1                	mov    %eax,%ecx
f010a20b:	c1 e1 04             	shl    $0x4,%ecx
f010a20e:	01 c8                	add    %ecx,%eax
f010a210:	c1 e0 03             	shl    $0x3,%eax
f010a213:	01 d0                	add    %edx,%eax
f010a215:	01 c0                	add    %eax,%eax
f010a217:	01 d0                	add    %edx,%eax
f010a219:	89 c1                	mov    %eax,%ecx
f010a21b:	c1 e1 04             	shl    $0x4,%ecx
f010a21e:	01 c8                	add    %ecx,%eax
f010a220:	c1 e0 03             	shl    $0x3,%eax
f010a223:	01 d0                	add    %edx,%eax
f010a225:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a22c:	01 d0                	add    %edx,%eax
f010a22e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a231:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a234:	89 d0                	mov    %edx,%eax
f010a236:	01 c0                	add    %eax,%eax
f010a238:	01 d0                	add    %edx,%eax
f010a23a:	01 c0                	add    %eax,%eax
f010a23c:	01 d0                	add    %edx,%eax
f010a23e:	c1 e0 02             	shl    $0x2,%eax
f010a241:	01 d0                	add    %edx,%eax
f010a243:	01 c0                	add    %eax,%eax
f010a245:	01 d0                	add    %edx,%eax
f010a247:	c1 e0 02             	shl    $0x2,%eax
f010a24a:	01 d0                	add    %edx,%eax
f010a24c:	c1 e0 02             	shl    $0x2,%eax
f010a24f:	01 d0                	add    %edx,%eax
f010a251:	c1 e0 02             	shl    $0x2,%eax
f010a254:	01 d0                	add    %edx,%eax
f010a256:	c1 e0 05             	shl    $0x5,%eax
f010a259:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a25e:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a264:	8b 45 08             	mov    0x8(%ebp),%eax
f010a267:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a26d:	83 ec 0c             	sub    $0xc,%esp
f010a270:	6a 02                	push   $0x2
f010a272:	e8 0d 31 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f010a277:	83 c4 10             	add    $0x10,%esp
f010a27a:	85 c0                	test   %eax,%eax
f010a27c:	0f 84 34 01 00 00    	je     f010a3b6 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a282:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a289:	e9 14 01 00 00       	jmp    f010a3a2 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a28e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a291:	89 d0                	mov    %edx,%eax
f010a293:	01 c0                	add    %eax,%eax
f010a295:	01 d0                	add    %edx,%eax
f010a297:	c1 e0 03             	shl    $0x3,%eax
f010a29a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a2a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a3:	01 d0                	add    %edx,%eax
f010a2a5:	83 c0 08             	add    $0x8,%eax
f010a2a8:	85 c0                	test   %eax,%eax
f010a2aa:	75 17                	jne    f010a2c3 <initialize_environment+0x15d>
f010a2ac:	83 ec 04             	sub    $0x4,%esp
f010a2af:	68 b8 24 13 f0       	push   $0xf01324b8
f010a2b4:	68 45 03 00 00       	push   $0x345
f010a2b9:	68 37 24 13 f0       	push   $0xf0132437
f010a2be:	e8 ed 5e ff ff       	call   f01001b0 <_panic>
f010a2c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c6:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a2cc:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a2cf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a2d2:	89 c8                	mov    %ecx,%eax
f010a2d4:	01 c0                	add    %eax,%eax
f010a2d6:	01 c8                	add    %ecx,%eax
f010a2d8:	c1 e0 03             	shl    $0x3,%eax
f010a2db:	01 d8                	add    %ebx,%eax
f010a2dd:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2e2:	89 10                	mov    %edx,(%eax)
f010a2e4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a2ea:	89 d0                	mov    %edx,%eax
f010a2ec:	01 c0                	add    %eax,%eax
f010a2ee:	01 d0                	add    %edx,%eax
f010a2f0:	c1 e0 03             	shl    $0x3,%eax
f010a2f3:	01 c8                	add    %ecx,%eax
f010a2f5:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2fa:	8b 00                	mov    (%eax),%eax
f010a2fc:	85 c0                	test   %eax,%eax
f010a2fe:	74 28                	je     f010a328 <initialize_environment+0x1c2>
f010a300:	8b 45 08             	mov    0x8(%ebp),%eax
f010a303:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a309:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a30c:	89 c8                	mov    %ecx,%eax
f010a30e:	01 c0                	add    %eax,%eax
f010a310:	01 c8                	add    %ecx,%eax
f010a312:	c1 e0 03             	shl    $0x3,%eax
f010a315:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31e:	01 c8                	add    %ecx,%eax
f010a320:	83 c0 08             	add    $0x8,%eax
f010a323:	89 42 14             	mov    %eax,0x14(%edx)
f010a326:	eb 23                	jmp    f010a34b <initialize_environment+0x1e5>
f010a328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a33a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33d:	01 d0                	add    %edx,%eax
f010a33f:	8d 50 08             	lea    0x8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a34b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a34e:	89 d0                	mov    %edx,%eax
f010a350:	01 c0                	add    %eax,%eax
f010a352:	01 d0                	add    %edx,%eax
f010a354:	c1 e0 03             	shl    $0x3,%eax
f010a357:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a35d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a360:	01 d0                	add    %edx,%eax
f010a362:	8d 50 08             	lea    0x8(%eax),%edx
f010a365:	8b 45 08             	mov    0x8(%ebp),%eax
f010a368:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a36e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a371:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a374:	89 d0                	mov    %edx,%eax
f010a376:	01 c0                	add    %eax,%eax
f010a378:	01 d0                	add    %edx,%eax
f010a37a:	c1 e0 03             	shl    $0x3,%eax
f010a37d:	01 c8                	add    %ecx,%eax
f010a37f:	05 cc 00 00 00       	add    $0xcc,%eax
f010a384:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38d:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a393:	8d 50 01             	lea    0x1(%eax),%edx
f010a396:	8b 45 08             	mov    0x8(%ebp),%eax
f010a399:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a39f:	ff 45 f0             	incl   -0x10(%ebp)
f010a3a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a5:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a3ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a3ae:	39 c2                	cmp    %eax,%edx
f010a3b0:	0f 87 d8 fe ff ff    	ja     f010a28e <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a3b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a3bd:	eb 54                	jmp    f010a413 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a3bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3c5:	89 d0                	mov    %edx,%eax
f010a3c7:	01 c0                	add    %eax,%eax
f010a3c9:	01 d0                	add    %edx,%eax
f010a3cb:	c1 e0 03             	shl    $0x3,%eax
f010a3ce:	01 c8                	add    %ecx,%eax
f010a3d0:	05 b8 00 00 00       	add    $0xb8,%eax
f010a3d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a3db:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3e1:	89 d0                	mov    %edx,%eax
f010a3e3:	01 c0                	add    %eax,%eax
f010a3e5:	01 d0                	add    %edx,%eax
f010a3e7:	c1 e0 03             	shl    $0x3,%eax
f010a3ea:	01 c8                	add    %ecx,%eax
f010a3ec:	05 bc 00 00 00       	add    $0xbc,%eax
f010a3f1:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a3f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3fa:	89 d0                	mov    %edx,%eax
f010a3fc:	01 c0                	add    %eax,%eax
f010a3fe:	01 d0                	add    %edx,%eax
f010a400:	c1 e0 03             	shl    $0x3,%eax
f010a403:	01 c8                	add    %ecx,%eax
f010a405:	05 c0 00 00 00       	add    $0xc0,%eax
f010a40a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a410:	ff 45 f4             	incl   -0xc(%ebp)
f010a413:	8b 45 08             	mov    0x8(%ebp),%eax
f010a416:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a41c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a41f:	39 c2                	cmp    %eax,%edx
f010a421:	77 9c                	ja     f010a3bf <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a423:	8b 45 08             	mov    0x8(%ebp),%eax
f010a426:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a42d:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a430:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a437:	eb 54                	jmp    f010a48d <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a439:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a43c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a43f:	89 d0                	mov    %edx,%eax
f010a441:	01 c0                	add    %eax,%eax
f010a443:	01 d0                	add    %edx,%eax
f010a445:	c1 e0 03             	shl    $0x3,%eax
f010a448:	01 c8                	add    %ecx,%eax
f010a44a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a44f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a458:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a45b:	89 d0                	mov    %edx,%eax
f010a45d:	01 c0                	add    %eax,%eax
f010a45f:	01 d0                	add    %edx,%eax
f010a461:	c1 e0 03             	shl    $0x3,%eax
f010a464:	01 c8                	add    %ecx,%eax
f010a466:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a46b:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a46e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a471:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a474:	89 d0                	mov    %edx,%eax
f010a476:	01 c0                	add    %eax,%eax
f010a478:	01 d0                	add    %edx,%eax
f010a47a:	c1 e0 03             	shl    $0x3,%eax
f010a47d:	01 c8                	add    %ecx,%eax
f010a47f:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a484:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a48a:	ff 45 f4             	incl   -0xc(%ebp)
f010a48d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a491:	7e a6                	jle    f010a439 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a49d:	00 00 00 

	e->pageFaultsCounter=0;
f010a4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a3:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a4aa:	00 00 00 
	e->tableFaultsCounter=0;
f010a4ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b0:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a4b7:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a4ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4bd:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a4c4:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ca:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a4d1:	00 00 00 

	e->nModifiedPages=0;
f010a4d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d7:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a4de:	00 00 00 
	e->nNotModifiedPages=0;
f010a4e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e4:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a4eb:	00 00 00 
	e->nClocks = 0;
f010a4ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f1:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a4f8:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a4fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4fe:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a505:	00 00 00 
	e->nPageOut = 0;
f010a508:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50b:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a512:	00 00 00 
	e->nNewPageAdded = 0;
f010a515:	8b 45 08             	mov    0x8(%ebp),%eax
f010a518:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a51f:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a522:	83 ec 04             	sub    $0x4,%esp
f010a525:	68 00 00 00 82       	push   $0x82000000
f010a52a:	68 00 00 00 80       	push   $0x80000000
f010a52f:	ff 75 08             	pushl  0x8(%ebp)
f010a532:	e8 12 fc ff ff       	call   f010a149 <initialize_uheap_dynamic_allocator>
f010a537:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a53a:	83 ec 0c             	sub    $0xc,%esp
f010a53d:	ff 75 08             	pushl  0x8(%ebp)
f010a540:	e8 09 00 00 00       	call   f010a54e <complete_environment_initialization>
f010a545:	83 c4 10             	add    $0x10,%esp
}
f010a548:	90                   	nop
f010a549:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a54c:	c9                   	leave  
f010a54d:	c3                   	ret    

f010a54e <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a54e:	55                   	push   %ebp
f010a54f:	89 e5                	mov    %esp,%ebp
f010a551:	53                   	push   %ebx
f010a552:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a555:	8b 45 08             	mov    0x8(%ebp),%eax
f010a558:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a55e:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a564:	8b 45 08             	mov    0x8(%ebp),%eax
f010a567:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a56d:	83 c8 03             	or     $0x3,%eax
f010a570:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a572:	8b 45 08             	mov    0x8(%ebp),%eax
f010a575:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a57b:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a581:	8b 45 08             	mov    0x8(%ebp),%eax
f010a584:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a58a:	83 c8 05             	or     $0x5,%eax
f010a58d:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a58f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a592:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a599:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a59c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a5a6:	00 00 00 
	e->disk_env_tabledir = 0;
f010a5a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ac:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a5b3:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a5c0:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a5c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c6:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a5c9:	83 ec 0c             	sub    $0xc,%esp
f010a5cc:	6a 08                	push   $0x8
f010a5ce:	e8 2f 32 02 00       	call   f012d802 <log2_ceil>
f010a5d3:	83 c4 10             	add    $0x10,%esp
f010a5d6:	ba 01 00 00 00       	mov    $0x1,%edx
f010a5db:	88 c1                	mov    %al,%cl
f010a5dd:	d3 e2                	shl    %cl,%edx
f010a5df:	89 d0                	mov    %edx,%eax
f010a5e1:	01 d8                	add    %ebx,%eax
f010a5e3:	89 c3                	mov    %eax,%ebx
f010a5e5:	83 ec 0c             	sub    $0xc,%esp
f010a5e8:	6a 08                	push   $0x8
f010a5ea:	e8 de 31 02 00       	call   f012d7cd <nearest_pow2_ceil>
f010a5ef:	83 c4 10             	add    $0x10,%esp
f010a5f2:	f7 d8                	neg    %eax
f010a5f4:	21 d8                	and    %ebx,%eax
f010a5f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a5f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a5fd:	7f 1b                	jg     f010a61a <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a5ff:	83 ec 0c             	sub    $0xc,%esp
f010a602:	6a 08                	push   $0x8
f010a604:	e8 f9 31 02 00       	call   f012d802 <log2_ceil>
f010a609:	83 c4 10             	add    $0x10,%esp
f010a60c:	ba 01 00 00 00       	mov    $0x1,%edx
f010a611:	88 c1                	mov    %al,%cl
f010a613:	d3 e2                	shl    %cl,%edx
f010a615:	89 d0                	mov    %edx,%eax
f010a617:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a61a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61d:	8b 15 30 32 25 f0    	mov    0xf0253230,%edx
f010a623:	29 d0                	sub    %edx,%eax
f010a625:	c1 f8 05             	sar    $0x5,%eax
f010a628:	89 c2                	mov    %eax,%edx
f010a62a:	89 d0                	mov    %edx,%eax
f010a62c:	c1 e0 03             	shl    $0x3,%eax
f010a62f:	01 d0                	add    %edx,%eax
f010a631:	01 c0                	add    %eax,%eax
f010a633:	01 d0                	add    %edx,%eax
f010a635:	c1 e0 06             	shl    $0x6,%eax
f010a638:	01 d0                	add    %edx,%eax
f010a63a:	89 c1                	mov    %eax,%ecx
f010a63c:	c1 e1 04             	shl    $0x4,%ecx
f010a63f:	01 c8                	add    %ecx,%eax
f010a641:	c1 e0 03             	shl    $0x3,%eax
f010a644:	01 d0                	add    %edx,%eax
f010a646:	01 c0                	add    %eax,%eax
f010a648:	01 d0                	add    %edx,%eax
f010a64a:	89 c1                	mov    %eax,%ecx
f010a64c:	c1 e1 04             	shl    $0x4,%ecx
f010a64f:	01 c8                	add    %ecx,%eax
f010a651:	c1 e0 03             	shl    $0x3,%eax
f010a654:	01 d0                	add    %edx,%eax
f010a656:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a65d:	01 d0                	add    %edx,%eax
f010a65f:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a662:	89 c2                	mov    %eax,%edx
f010a664:	8b 45 08             	mov    0x8(%ebp),%eax
f010a667:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a66a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010a66f:	85 c0                	test   %eax,%eax
f010a671:	75 0c                	jne    f010a67f <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010a673:	8b 45 08             	mov    0x8(%ebp),%eax
f010a676:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a67d:	eb 0e                	jmp    f010a68d <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a67f:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010a684:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a687:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68a:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a68d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a690:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a697:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69a:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010a6a1:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a7:	83 ec 04             	sub    $0x4,%esp
f010a6aa:	6a 44                	push   $0x44
f010a6ac:	6a 00                	push   $0x0
f010a6ae:	50                   	push   %eax
f010a6af:	e8 7c 45 02 00       	call   f012ec30 <memset>
f010a6b4:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ba:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a6c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c3:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a6c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cc:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d5:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a6dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6df:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	8b 40 38             	mov    0x38(%eax),%eax
f010a6eb:	80 cc 02             	or     $0x2,%ah
f010a6ee:	89 c2                	mov    %eax,%edx
f010a6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f3:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a6f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a6fa:	75 17                	jne    f010a713 <complete_environment_initialization+0x1c5>
f010a6fc:	83 ec 04             	sub    $0x4,%esp
f010a6ff:	68 99 24 13 f0       	push   $0xf0132499
f010a704:	68 b1 03 00 00       	push   $0x3b1
f010a709:	68 37 24 13 f0       	push   $0xf0132437
f010a70e:	e8 9d 5a ff ff       	call   f01001b0 <_panic>
f010a713:	8b 45 08             	mov    0x8(%ebp),%eax
f010a716:	8b 40 44             	mov    0x44(%eax),%eax
f010a719:	85 c0                	test   %eax,%eax
f010a71b:	74 11                	je     f010a72e <complete_environment_initialization+0x1e0>
f010a71d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a720:	8b 40 44             	mov    0x44(%eax),%eax
f010a723:	8b 55 08             	mov    0x8(%ebp),%edx
f010a726:	8b 52 48             	mov    0x48(%edx),%edx
f010a729:	89 50 48             	mov    %edx,0x48(%eax)
f010a72c:	eb 0b                	jmp    f010a739 <complete_environment_initialization+0x1eb>
f010a72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a731:	8b 40 48             	mov    0x48(%eax),%eax
f010a734:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f010a739:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73c:	8b 40 48             	mov    0x48(%eax),%eax
f010a73f:	85 c0                	test   %eax,%eax
f010a741:	74 11                	je     f010a754 <complete_environment_initialization+0x206>
f010a743:	8b 45 08             	mov    0x8(%ebp),%eax
f010a746:	8b 40 48             	mov    0x48(%eax),%eax
f010a749:	8b 55 08             	mov    0x8(%ebp),%edx
f010a74c:	8b 52 44             	mov    0x44(%edx),%edx
f010a74f:	89 50 44             	mov    %edx,0x44(%eax)
f010a752:	eb 0b                	jmp    f010a75f <complete_environment_initialization+0x211>
f010a754:	8b 45 08             	mov    0x8(%ebp),%eax
f010a757:	8b 40 44             	mov    0x44(%eax),%eax
f010a75a:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f010a75f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a762:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a769:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a773:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f010a778:	48                   	dec    %eax
f010a779:	a3 44 32 25 f0       	mov    %eax,0xf0253244
	return ;
f010a77e:	90                   	nop
}
f010a77f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a782:	c9                   	leave  
f010a783:	c3                   	ret    

f010a784 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a784:	55                   	push   %ebp
f010a785:	89 e5                	mov    %esp,%ebp
f010a787:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a78a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a78d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a790:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a793:	8b 00                	mov    (%eax),%eax
f010a795:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a79a:	74 17                	je     f010a7b3 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a79c:	83 ec 04             	sub    $0x4,%esp
f010a79f:	68 c0 25 13 f0       	push   $0xf01325c0
f010a7a4:	68 bd 03 00 00       	push   $0x3bd
f010a7a9:	68 37 24 13 f0       	push   $0xf0132437
f010a7ae:	e8 fd 59 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7b6:	8b 40 18             	mov    0x18(%eax),%eax
f010a7b9:	89 c2                	mov    %eax,%edx
f010a7bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7be:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a7c1:	90                   	nop
f010a7c2:	c9                   	leave  
f010a7c3:	c3                   	ret    

f010a7c4 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a7c4:	55                   	push   %ebp
f010a7c5:	89 e5                	mov    %esp,%ebp
f010a7c7:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a7ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cd:	8b 40 10             	mov    0x10(%eax),%eax
f010a7d0:	8d 48 01             	lea    0x1(%eax),%ecx
f010a7d3:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7d6:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a7d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a7dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a7e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a7e5:	8b 00                	mov    (%eax),%eax
f010a7e7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a7ec:	74 17                	je     f010a805 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a7ee:	83 ec 04             	sub    $0x4,%esp
f010a7f1:	68 c0 25 13 f0       	push   $0xf01325c0
f010a7f6:	68 cc 03 00 00       	push   $0x3cc
f010a7fb:	68 37 24 13 f0       	push   $0xf0132437
f010a800:	e8 ab 59 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a805:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a808:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a80b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a80e:	01 d0                	add    %edx,%eax
f010a810:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a813:	eb 0f                	jmp    f010a824 <PROGRAM_SEGMENT_NEXT+0x60>
f010a815:	8b 45 08             	mov    0x8(%ebp),%eax
f010a818:	8b 40 10             	mov    0x10(%eax),%eax
f010a81b:	8d 50 01             	lea    0x1(%eax),%edx
f010a81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a821:	89 50 10             	mov    %edx,0x10(%eax)
f010a824:	8b 45 08             	mov    0x8(%ebp),%eax
f010a827:	8b 40 10             	mov    0x10(%eax),%eax
f010a82a:	c1 e0 05             	shl    $0x5,%eax
f010a82d:	89 c2                	mov    %eax,%edx
f010a82f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a832:	01 d0                	add    %edx,%eax
f010a834:	8b 00                	mov    (%eax),%eax
f010a836:	83 f8 01             	cmp    $0x1,%eax
f010a839:	74 13                	je     f010a84e <PROGRAM_SEGMENT_NEXT+0x8a>
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	8b 50 10             	mov    0x10(%eax),%edx
f010a841:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a844:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a847:	0f b7 c0             	movzwl %ax,%eax
f010a84a:	39 c2                	cmp    %eax,%edx
f010a84c:	72 c7                	jb     f010a815 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a84e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a851:	8b 40 10             	mov    0x10(%eax),%eax
f010a854:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a85a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a85d:	0f b7 c0             	movzwl %ax,%eax
f010a860:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a863:	7e 63                	jle    f010a8c8 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a865:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a868:	c1 e0 05             	shl    $0x5,%eax
f010a86b:	89 c2                	mov    %eax,%edx
f010a86d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a870:	01 d0                	add    %edx,%eax
f010a872:	8b 50 04             	mov    0x4(%eax),%edx
f010a875:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a878:	01 c2                	add    %eax,%edx
f010a87a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87d:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a882:	c1 e0 05             	shl    $0x5,%eax
f010a885:	89 c2                	mov    %eax,%edx
f010a887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a88a:	01 d0                	add    %edx,%eax
f010a88c:	8b 50 14             	mov    0x14(%eax),%edx
f010a88f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a892:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a895:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a898:	c1 e0 05             	shl    $0x5,%eax
f010a89b:	89 c2                	mov    %eax,%edx
f010a89d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8a0:	01 d0                	add    %edx,%eax
f010a8a2:	8b 50 10             	mov    0x10(%eax),%edx
f010a8a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a8:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a8ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8ae:	c1 e0 05             	shl    $0x5,%eax
f010a8b1:	89 c2                	mov    %eax,%edx
f010a8b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8b6:	01 d0                	add    %edx,%eax
f010a8b8:	8b 40 08             	mov    0x8(%eax),%eax
f010a8bb:	89 c2                	mov    %eax,%edx
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	eb 05                	jmp    f010a8cd <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a8c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8cd:	c9                   	leave  
f010a8ce:	c3                   	ret    

f010a8cf <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a8cf:	55                   	push   %ebp
f010a8d0:	89 e5                	mov    %esp,%ebp
f010a8d2:	57                   	push   %edi
f010a8d3:	56                   	push   %esi
f010a8d4:	53                   	push   %ebx
f010a8d5:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a8d8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a8df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a8e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a8e8:	8b 00                	mov    (%eax),%eax
f010a8ea:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a8ef:	74 17                	je     f010a908 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a8f1:	83 ec 04             	sub    $0x4,%esp
f010a8f4:	68 c0 25 13 f0       	push   $0xf01325c0
f010a8f9:	68 e8 03 00 00       	push   $0x3e8
f010a8fe:	68 37 24 13 f0       	push   $0xf0132437
f010a903:	e8 a8 58 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a90b:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a90e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a911:	01 d0                	add    %edx,%eax
f010a913:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a916:	eb 07                	jmp    f010a91f <PROGRAM_SEGMENT_FIRST+0x50>
f010a918:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a91b:	40                   	inc    %eax
f010a91c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a91f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a922:	c1 e0 05             	shl    $0x5,%eax
f010a925:	89 c2                	mov    %eax,%edx
f010a927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a92a:	01 d0                	add    %edx,%eax
f010a92c:	8b 00                	mov    (%eax),%eax
f010a92e:	83 f8 01             	cmp    $0x1,%eax
f010a931:	74 10                	je     f010a943 <PROGRAM_SEGMENT_FIRST+0x74>
f010a933:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a936:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a939:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a93c:	0f b7 c0             	movzwl %ax,%eax
f010a93f:	39 c2                	cmp    %eax,%edx
f010a941:	72 d5                	jb     f010a918 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a943:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a946:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a949:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a94c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a94f:	0f b7 c0             	movzwl %ax,%eax
f010a952:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a955:	7e 68                	jle    f010a9bf <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a957:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a95a:	c1 e0 05             	shl    $0x5,%eax
f010a95d:	89 c2                	mov    %eax,%edx
f010a95f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a962:	01 d0                	add    %edx,%eax
f010a964:	8b 50 04             	mov    0x4(%eax),%edx
f010a967:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a96a:	01 d0                	add    %edx,%eax
f010a96c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a96f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a972:	c1 e0 05             	shl    $0x5,%eax
f010a975:	89 c2                	mov    %eax,%edx
f010a977:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a97a:	01 d0                	add    %edx,%eax
f010a97c:	8b 40 14             	mov    0x14(%eax),%eax
f010a97f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a982:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a985:	c1 e0 05             	shl    $0x5,%eax
f010a988:	89 c2                	mov    %eax,%edx
f010a98a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a98d:	01 d0                	add    %edx,%eax
f010a98f:	8b 40 10             	mov    0x10(%eax),%eax
f010a992:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a995:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a998:	c1 e0 05             	shl    $0x5,%eax
f010a99b:	89 c2                	mov    %eax,%edx
f010a99d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a9a0:	01 d0                	add    %edx,%eax
f010a9a2:	8b 40 08             	mov    0x8(%eax),%eax
f010a9a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a9a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ab:	89 c3                	mov    %eax,%ebx
f010a9ad:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a9b0:	ba 05 00 00 00       	mov    $0x5,%edx
f010a9b5:	89 df                	mov    %ebx,%edi
f010a9b7:	89 c6                	mov    %eax,%esi
f010a9b9:	89 d1                	mov    %edx,%ecx
f010a9bb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a9bd:	eb 1c                	jmp    f010a9db <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a9bf:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a9c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c9:	89 c3                	mov    %eax,%ebx
f010a9cb:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a9ce:	ba 05 00 00 00       	mov    $0x5,%edx
f010a9d3:	89 df                	mov    %ebx,%edi
f010a9d5:	89 c6                	mov    %eax,%esi
f010a9d7:	89 d1                	mov    %edx,%ecx
f010a9d9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9de:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a9e1:	5b                   	pop    %ebx
f010a9e2:	5e                   	pop    %esi
f010a9e3:	5f                   	pop    %edi
f010a9e4:	5d                   	pop    %ebp
f010a9e5:	c2 04 00             	ret    $0x4

f010a9e8 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010a9e8:	55                   	push   %ebp
f010a9e9:	89 e5                	mov    %esp,%ebp
f010a9eb:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a9ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a9f5:	a1 00 3b 25 f0       	mov    0xf0253b00,%eax
f010a9fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a9fd:	e9 c6 00 00 00       	jmp    f010aac8 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010aa02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa05:	8b 40 10             	mov    0x10(%eax),%eax
f010aa08:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aa0b:	0f 85 af 00 00 00    	jne    f010aac0 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010aa11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa14:	8b 50 0c             	mov    0xc(%eax),%edx
f010aa17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa1a:	8b 40 10             	mov    0x10(%eax),%eax
f010aa1d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010aa23:	83 ec 08             	sub    $0x8,%esp
f010aa26:	52                   	push   %edx
f010aa27:	50                   	push   %eax
f010aa28:	e8 33 d3 ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f010aa2d:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010aa30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aa34:	75 17                	jne    f010aa4d <cleanup_buffers+0x65>
f010aa36:	83 ec 04             	sub    $0x4,%esp
f010aa39:	68 99 24 13 f0       	push   $0xf0132499
f010aa3e:	68 0f 04 00 00       	push   $0x40f
f010aa43:	68 37 24 13 f0       	push   $0xf0132437
f010aa48:	e8 63 57 ff ff       	call   f01001b0 <_panic>
f010aa4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa50:	8b 00                	mov    (%eax),%eax
f010aa52:	85 c0                	test   %eax,%eax
f010aa54:	74 10                	je     f010aa66 <cleanup_buffers+0x7e>
f010aa56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa59:	8b 00                	mov    (%eax),%eax
f010aa5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa5e:	8b 52 04             	mov    0x4(%edx),%edx
f010aa61:	89 50 04             	mov    %edx,0x4(%eax)
f010aa64:	eb 0b                	jmp    f010aa71 <cleanup_buffers+0x89>
f010aa66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa69:	8b 40 04             	mov    0x4(%eax),%eax
f010aa6c:	a3 04 3b 25 f0       	mov    %eax,0xf0253b04
f010aa71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa74:	8b 40 04             	mov    0x4(%eax),%eax
f010aa77:	85 c0                	test   %eax,%eax
f010aa79:	74 0f                	je     f010aa8a <cleanup_buffers+0xa2>
f010aa7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa7e:	8b 40 04             	mov    0x4(%eax),%eax
f010aa81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa84:	8b 12                	mov    (%edx),%edx
f010aa86:	89 10                	mov    %edx,(%eax)
f010aa88:	eb 0a                	jmp    f010aa94 <cleanup_buffers+0xac>
f010aa8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa8d:	8b 00                	mov    (%eax),%eax
f010aa8f:	a3 00 3b 25 f0       	mov    %eax,0xf0253b00
f010aa94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010aa9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010aaa7:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f010aaac:	48                   	dec    %eax
f010aaad:	a3 0c 3b 25 f0       	mov    %eax,0xf0253b0c

			free_frame(ptr_fi);
f010aab2:	83 ec 0c             	sub    $0xc,%esp
f010aab5:	ff 75 f4             	pushl  -0xc(%ebp)
f010aab8:	e8 b4 c5 ff ff       	call   f0107071 <free_frame>
f010aabd:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aac0:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f010aac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aac8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aacc:	74 07                	je     f010aad5 <cleanup_buffers+0xed>
f010aace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad1:	8b 00                	mov    (%eax),%eax
f010aad3:	eb 05                	jmp    f010aada <cleanup_buffers+0xf2>
f010aad5:	b8 00 00 00 00       	mov    $0x0,%eax
f010aada:	a3 08 3b 25 f0       	mov    %eax,0xf0253b08
f010aadf:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f010aae4:	85 c0                	test   %eax,%eax
f010aae6:	0f 85 16 ff ff ff    	jne    f010aa02 <cleanup_buffers+0x1a>
f010aaec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aaf0:	0f 85 0c ff ff ff    	jne    f010aa02 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aaf6:	90                   	nop
f010aaf7:	c9                   	leave  
f010aaf8:	c3                   	ret    

f010aaf9 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aaf9:	55                   	push   %ebp
f010aafa:	89 e5                	mov    %esp,%ebp
f010aafc:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aaff:	83 ec 04             	sub    $0x4,%esp
f010ab02:	68 d6 25 13 f0       	push   $0xf01325d6
f010ab07:	6a 0b                	push   $0xb
f010ab09:	68 e6 25 13 f0       	push   $0xf01325e6
f010ab0e:	e8 9d 56 ff ff       	call   f01001b0 <_panic>

f010ab13 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010ab13:	55                   	push   %ebp
f010ab14:	89 e5                	mov    %esp,%ebp
f010ab16:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab20:	eb 29                	jmp    f010ab4b <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010ab22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab25:	89 d0                	mov    %edx,%eax
f010ab27:	01 c0                	add    %eax,%eax
f010ab29:	01 d0                	add    %edx,%eax
f010ab2b:	c1 e0 02             	shl    $0x2,%eax
f010ab2e:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010ab33:	8b 00                	mov    (%eax),%eax
f010ab35:	83 ec 08             	sub    $0x8,%esp
f010ab38:	50                   	push   %eax
f010ab39:	ff 75 08             	pushl  0x8(%ebp)
f010ab3c:	e8 0d 40 02 00       	call   f012eb4e <strcmp>
f010ab41:	83 c4 10             	add    $0x10,%esp
f010ab44:	85 c0                	test   %eax,%eax
f010ab46:	74 0f                	je     f010ab57 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab48:	ff 45 f4             	incl   -0xc(%ebp)
f010ab4b:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010ab50:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab53:	7c cd                	jl     f010ab22 <get_user_program_info+0xf>
f010ab55:	eb 01                	jmp    f010ab58 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010ab57:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010ab58:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010ab5d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab60:	75 1a                	jne    f010ab7c <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010ab62:	83 ec 08             	sub    $0x8,%esp
f010ab65:	ff 75 08             	pushl  0x8(%ebp)
f010ab68:	68 72 27 13 f0       	push   $0xf0132772
f010ab6d:	e8 bf 62 ff ff       	call   f0100e31 <cprintf>
f010ab72:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ab75:	b8 00 00 00 00       	mov    $0x0,%eax
f010ab7a:	eb 11                	jmp    f010ab8d <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010ab7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab7f:	89 d0                	mov    %edx,%eax
f010ab81:	01 c0                	add    %eax,%eax
f010ab83:	01 d0                	add    %edx,%eax
f010ab85:	c1 e0 02             	shl    $0x2,%eax
f010ab88:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010ab8d:	c9                   	leave  
f010ab8e:	c3                   	ret    

f010ab8f <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010ab8f:	55                   	push   %ebp
f010ab90:	89 e5                	mov    %esp,%ebp
f010ab92:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab9c:	eb 2d                	jmp    f010abcb <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010ab9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aba1:	89 d0                	mov    %edx,%eax
f010aba3:	01 c0                	add    %eax,%eax
f010aba5:	01 d0                	add    %edx,%eax
f010aba7:	c1 e0 02             	shl    $0x2,%eax
f010abaa:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010abaf:	8b 00                	mov    (%eax),%eax
f010abb1:	8b 55 08             	mov    0x8(%ebp),%edx
f010abb4:	83 c2 5c             	add    $0x5c,%edx
f010abb7:	83 ec 08             	sub    $0x8,%esp
f010abba:	50                   	push   %eax
f010abbb:	52                   	push   %edx
f010abbc:	e8 8d 3f 02 00       	call   f012eb4e <strcmp>
f010abc1:	83 c4 10             	add    $0x10,%esp
f010abc4:	85 c0                	test   %eax,%eax
f010abc6:	74 0f                	je     f010abd7 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010abc8:	ff 45 f4             	incl   -0xc(%ebp)
f010abcb:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010abd0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010abd3:	7c c9                	jl     f010ab9e <get_user_program_info_by_env+0xf>
f010abd5:	eb 01                	jmp    f010abd8 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010abd7:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010abd8:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010abdd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010abe0:	75 17                	jne    f010abf9 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010abe2:	83 ec 0c             	sub    $0xc,%esp
f010abe5:	68 8d 27 13 f0       	push   $0xf013278d
f010abea:	e8 42 62 ff ff       	call   f0100e31 <cprintf>
f010abef:	83 c4 10             	add    $0x10,%esp
		return 0;
f010abf2:	b8 00 00 00 00       	mov    $0x0,%eax
f010abf7:	eb 11                	jmp    f010ac0a <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010abf9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abfc:	89 d0                	mov    %edx,%eax
f010abfe:	01 c0                	add    %eax,%eax
f010ac00:	01 d0                	add    %edx,%eax
f010ac02:	c1 e0 02             	shl    $0x2,%eax
f010ac05:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010ac0a:	c9                   	leave  
f010ac0b:	c3                   	ret    

f010ac0c <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010ac0c:	55                   	push   %ebp
f010ac0d:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010ac0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac12:	83 f8 13             	cmp    $0x13,%eax
f010ac15:	77 0c                	ja     f010ac23 <trapname+0x17>
		return excnames[trapno];
f010ac17:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1a:	8b 04 85 e0 2b 13 f0 	mov    -0xfecd420(,%eax,4),%eax
f010ac21:	eb 12                	jmp    f010ac35 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010ac23:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010ac27:	75 07                	jne    f010ac30 <trapname+0x24>
		return "System call";
f010ac29:	b8 c0 27 13 f0       	mov    $0xf01327c0,%eax
f010ac2e:	eb 05                	jmp    f010ac35 <trapname+0x29>
	return "(unknown trap)";
f010ac30:	b8 cc 27 13 f0       	mov    $0xf01327cc,%eax
}
f010ac35:	5d                   	pop    %ebp
f010ac36:	c3                   	ret    

f010ac37 <idt_init>:


void
idt_init(void)
{
f010ac37:	55                   	push   %ebp
f010ac38:	89 e5                	mov    %esp,%ebp
f010ac3a:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010ac3d:	b8 d2 c2 10 f0       	mov    $0xf010c2d2,%eax
f010ac42:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010ac48:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010ac4f:	08 00 
f010ac51:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010ac56:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac59:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010ac5e:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010ac63:	83 e0 1f             	and    $0x1f,%eax
f010ac66:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010ac6b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac70:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac73:	83 c8 0e             	or     $0xe,%eax
f010ac76:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac7b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac80:	83 e0 ef             	and    $0xffffffef,%eax
f010ac83:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac88:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac8d:	83 e0 9f             	and    $0xffffff9f,%eax
f010ac90:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac95:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac9a:	83 c8 80             	or     $0xffffff80,%eax
f010ac9d:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010aca2:	b8 d2 c2 10 f0       	mov    $0xf010c2d2,%eax
f010aca7:	c1 e8 10             	shr    $0x10,%eax
f010acaa:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010acb0:	b8 da c2 10 f0       	mov    $0xf010c2da,%eax
f010acb5:	66 a3 e0 33 25 f0    	mov    %ax,0xf02533e0
f010acbb:	66 c7 05 e2 33 25 f0 	movw   $0x8,0xf02533e2
f010acc2:	08 00 
f010acc4:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010acc9:	83 e0 e0             	and    $0xffffffe0,%eax
f010accc:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010acd1:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010acd6:	83 e0 1f             	and    $0x1f,%eax
f010acd9:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010acde:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ace3:	83 e0 f0             	and    $0xfffffff0,%eax
f010ace6:	83 c8 0e             	or     $0xe,%eax
f010ace9:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010acee:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010acf3:	83 e0 ef             	and    $0xffffffef,%eax
f010acf6:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010acfb:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ad00:	83 c8 60             	or     $0x60,%eax
f010ad03:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010ad08:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ad0d:	83 c8 80             	or     $0xffffff80,%eax
f010ad10:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010ad15:	b8 da c2 10 f0       	mov    $0xf010c2da,%eax
f010ad1a:	c1 e8 10             	shr    $0x10,%eax
f010ad1d:	66 a3 e6 33 25 f0    	mov    %ax,0xf02533e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010ad23:	b8 e4 c2 10 f0       	mov    $0xf010c2e4,%eax
f010ad28:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010ad2e:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010ad35:	08 00 
f010ad37:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010ad3c:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad3f:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010ad44:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010ad49:	83 e0 1f             	and    $0x1f,%eax
f010ad4c:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010ad51:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad56:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad59:	83 c8 0e             	or     $0xe,%eax
f010ad5c:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad61:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad66:	83 e0 ef             	and    $0xffffffef,%eax
f010ad69:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad6e:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad73:	83 e0 9f             	and    $0xffffff9f,%eax
f010ad76:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad7b:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad80:	83 c8 80             	or     $0xffffff80,%eax
f010ad83:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad88:	b8 e4 c2 10 f0       	mov    $0xf010c2e4,%eax
f010ad8d:	c1 e8 10             	shr    $0x10,%eax
f010ad90:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010ad96:	b8 ec c2 10 f0       	mov    $0xf010c2ec,%eax
f010ad9b:	66 a3 60 32 25 f0    	mov    %ax,0xf0253260
f010ada1:	66 c7 05 62 32 25 f0 	movw   $0x8,0xf0253262
f010ada8:	08 00 
f010adaa:	a0 64 32 25 f0       	mov    0xf0253264,%al
f010adaf:	83 e0 e0             	and    $0xffffffe0,%eax
f010adb2:	a2 64 32 25 f0       	mov    %al,0xf0253264
f010adb7:	a0 64 32 25 f0       	mov    0xf0253264,%al
f010adbc:	83 e0 1f             	and    $0x1f,%eax
f010adbf:	a2 64 32 25 f0       	mov    %al,0xf0253264
f010adc4:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010adc9:	83 e0 f0             	and    $0xfffffff0,%eax
f010adcc:	83 c8 0e             	or     $0xe,%eax
f010adcf:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010add4:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010add9:	83 e0 ef             	and    $0xffffffef,%eax
f010addc:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010ade1:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010ade6:	83 c8 60             	or     $0x60,%eax
f010ade9:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010adee:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010adf3:	83 c8 80             	or     $0xffffff80,%eax
f010adf6:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010adfb:	b8 ec c2 10 f0       	mov    $0xf010c2ec,%eax
f010ae00:	c1 e8 10             	shr    $0x10,%eax
f010ae03:	66 a3 66 32 25 f0    	mov    %ax,0xf0253266
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010ae09:	b8 f6 c2 10 f0       	mov    $0xf010c2f6,%eax
f010ae0e:	66 a3 68 32 25 f0    	mov    %ax,0xf0253268
f010ae14:	66 c7 05 6a 32 25 f0 	movw   $0x8,0xf025326a
f010ae1b:	08 00 
f010ae1d:	a0 6c 32 25 f0       	mov    0xf025326c,%al
f010ae22:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae25:	a2 6c 32 25 f0       	mov    %al,0xf025326c
f010ae2a:	a0 6c 32 25 f0       	mov    0xf025326c,%al
f010ae2f:	83 e0 1f             	and    $0x1f,%eax
f010ae32:	a2 6c 32 25 f0       	mov    %al,0xf025326c
f010ae37:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae3c:	83 c8 0f             	or     $0xf,%eax
f010ae3f:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae44:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae49:	83 e0 ef             	and    $0xffffffef,%eax
f010ae4c:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae51:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae56:	83 c8 60             	or     $0x60,%eax
f010ae59:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae5e:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae63:	83 c8 80             	or     $0xffffff80,%eax
f010ae66:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae6b:	b8 f6 c2 10 f0       	mov    $0xf010c2f6,%eax
f010ae70:	c1 e8 10             	shr    $0x10,%eax
f010ae73:	66 a3 6e 32 25 f0    	mov    %ax,0xf025326e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010ae79:	b8 00 c3 10 f0       	mov    $0xf010c300,%eax
f010ae7e:	66 a3 70 32 25 f0    	mov    %ax,0xf0253270
f010ae84:	66 c7 05 72 32 25 f0 	movw   $0x8,0xf0253272
f010ae8b:	08 00 
f010ae8d:	a0 74 32 25 f0       	mov    0xf0253274,%al
f010ae92:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae95:	a2 74 32 25 f0       	mov    %al,0xf0253274
f010ae9a:	a0 74 32 25 f0       	mov    0xf0253274,%al
f010ae9f:	83 e0 1f             	and    $0x1f,%eax
f010aea2:	a2 74 32 25 f0       	mov    %al,0xf0253274
f010aea7:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aeac:	83 e0 f0             	and    $0xfffffff0,%eax
f010aeaf:	83 c8 0e             	or     $0xe,%eax
f010aeb2:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aeb7:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aebc:	83 e0 ef             	and    $0xffffffef,%eax
f010aebf:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aec4:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aec9:	83 c8 60             	or     $0x60,%eax
f010aecc:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aed1:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aed6:	83 c8 80             	or     $0xffffff80,%eax
f010aed9:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aede:	b8 00 c3 10 f0       	mov    $0xf010c300,%eax
f010aee3:	c1 e8 10             	shr    $0x10,%eax
f010aee6:	66 a3 76 32 25 f0    	mov    %ax,0xf0253276
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010aeec:	b8 0a c3 10 f0       	mov    $0xf010c30a,%eax
f010aef1:	66 a3 78 32 25 f0    	mov    %ax,0xf0253278
f010aef7:	66 c7 05 7a 32 25 f0 	movw   $0x8,0xf025327a
f010aefe:	08 00 
f010af00:	a0 7c 32 25 f0       	mov    0xf025327c,%al
f010af05:	83 e0 e0             	and    $0xffffffe0,%eax
f010af08:	a2 7c 32 25 f0       	mov    %al,0xf025327c
f010af0d:	a0 7c 32 25 f0       	mov    0xf025327c,%al
f010af12:	83 e0 1f             	and    $0x1f,%eax
f010af15:	a2 7c 32 25 f0       	mov    %al,0xf025327c
f010af1a:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af1f:	83 c8 0f             	or     $0xf,%eax
f010af22:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af27:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af2c:	83 e0 ef             	and    $0xffffffef,%eax
f010af2f:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af34:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af39:	83 c8 60             	or     $0x60,%eax
f010af3c:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af41:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af46:	83 c8 80             	or     $0xffffff80,%eax
f010af49:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af4e:	b8 0a c3 10 f0       	mov    $0xf010c30a,%eax
f010af53:	c1 e8 10             	shr    $0x10,%eax
f010af56:	66 a3 7e 32 25 f0    	mov    %ax,0xf025327e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010af5c:	b8 14 c3 10 f0       	mov    $0xf010c314,%eax
f010af61:	66 a3 80 32 25 f0    	mov    %ax,0xf0253280
f010af67:	66 c7 05 82 32 25 f0 	movw   $0x8,0xf0253282
f010af6e:	08 00 
f010af70:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010af75:	83 e0 e0             	and    $0xffffffe0,%eax
f010af78:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010af7d:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010af82:	83 e0 1f             	and    $0x1f,%eax
f010af85:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010af8a:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010af8f:	83 c8 0f             	or     $0xf,%eax
f010af92:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010af97:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010af9c:	83 e0 ef             	and    $0xffffffef,%eax
f010af9f:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afa4:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010afa9:	83 c8 60             	or     $0x60,%eax
f010afac:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afb1:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010afb6:	83 c8 80             	or     $0xffffff80,%eax
f010afb9:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afbe:	b8 14 c3 10 f0       	mov    $0xf010c314,%eax
f010afc3:	c1 e8 10             	shr    $0x10,%eax
f010afc6:	66 a3 86 32 25 f0    	mov    %ax,0xf0253286
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010afcc:	b8 1e c3 10 f0       	mov    $0xf010c31e,%eax
f010afd1:	66 a3 88 32 25 f0    	mov    %ax,0xf0253288
f010afd7:	66 c7 05 8a 32 25 f0 	movw   $0x8,0xf025328a
f010afde:	08 00 
f010afe0:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010afe5:	83 e0 e0             	and    $0xffffffe0,%eax
f010afe8:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010afed:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010aff2:	83 e0 1f             	and    $0x1f,%eax
f010aff5:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010affa:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010afff:	83 e0 f0             	and    $0xfffffff0,%eax
f010b002:	83 c8 0e             	or     $0xe,%eax
f010b005:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b00a:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b00f:	83 e0 ef             	and    $0xffffffef,%eax
f010b012:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b017:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b01c:	83 c8 60             	or     $0x60,%eax
f010b01f:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b024:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b029:	83 c8 80             	or     $0xffffff80,%eax
f010b02c:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b031:	b8 1e c3 10 f0       	mov    $0xf010c31e,%eax
f010b036:	c1 e8 10             	shr    $0x10,%eax
f010b039:	66 a3 8e 32 25 f0    	mov    %ax,0xf025328e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b03f:	b8 28 c3 10 f0       	mov    $0xf010c328,%eax
f010b044:	66 a3 90 32 25 f0    	mov    %ax,0xf0253290
f010b04a:	66 c7 05 92 32 25 f0 	movw   $0x8,0xf0253292
f010b051:	08 00 
f010b053:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b058:	83 e0 e0             	and    $0xffffffe0,%eax
f010b05b:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b060:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b065:	83 e0 1f             	and    $0x1f,%eax
f010b068:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b06d:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b072:	83 e0 f0             	and    $0xfffffff0,%eax
f010b075:	83 c8 0e             	or     $0xe,%eax
f010b078:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b07d:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b082:	83 e0 ef             	and    $0xffffffef,%eax
f010b085:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b08a:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b08f:	83 c8 60             	or     $0x60,%eax
f010b092:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b097:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b09c:	83 c8 80             	or     $0xffffff80,%eax
f010b09f:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b0a4:	b8 28 c3 10 f0       	mov    $0xf010c328,%eax
f010b0a9:	c1 e8 10             	shr    $0x10,%eax
f010b0ac:	66 a3 96 32 25 f0    	mov    %ax,0xf0253296
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b0b2:	b8 32 c3 10 f0       	mov    $0xf010c332,%eax
f010b0b7:	66 a3 98 32 25 f0    	mov    %ax,0xf0253298
f010b0bd:	66 c7 05 9a 32 25 f0 	movw   $0x8,0xf025329a
f010b0c4:	08 00 
f010b0c6:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b0cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0ce:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b0d3:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b0d8:	83 e0 1f             	and    $0x1f,%eax
f010b0db:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b0e0:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b0e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0e8:	83 c8 0e             	or     $0xe,%eax
f010b0eb:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b0f0:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b0f5:	83 e0 ef             	and    $0xffffffef,%eax
f010b0f8:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b0fd:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b102:	83 c8 60             	or     $0x60,%eax
f010b105:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b10a:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b10f:	83 c8 80             	or     $0xffffff80,%eax
f010b112:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b117:	b8 32 c3 10 f0       	mov    $0xf010c332,%eax
f010b11c:	c1 e8 10             	shr    $0x10,%eax
f010b11f:	66 a3 9e 32 25 f0    	mov    %ax,0xf025329e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b125:	b8 3c c3 10 f0       	mov    $0xf010c33c,%eax
f010b12a:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b130:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b137:	08 00 
f010b139:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b13e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b141:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b146:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b14b:	83 e0 1f             	and    $0x1f,%eax
f010b14e:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b153:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b158:	83 e0 f0             	and    $0xfffffff0,%eax
f010b15b:	83 c8 0e             	or     $0xe,%eax
f010b15e:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b163:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b168:	83 e0 ef             	and    $0xffffffef,%eax
f010b16b:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b170:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b175:	83 c8 60             	or     $0x60,%eax
f010b178:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b17d:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b182:	83 c8 80             	or     $0xffffff80,%eax
f010b185:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b18a:	b8 3c c3 10 f0       	mov    $0xf010c33c,%eax
f010b18f:	c1 e8 10             	shr    $0x10,%eax
f010b192:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b198:	b8 44 c3 10 f0       	mov    $0xf010c344,%eax
f010b19d:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b1a3:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b1aa:	08 00 
f010b1ac:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b1b1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1b4:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b1b9:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b1be:	83 e0 1f             	and    $0x1f,%eax
f010b1c1:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b1c6:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1cb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ce:	83 c8 0e             	or     $0xe,%eax
f010b1d1:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1d6:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1db:	83 e0 ef             	and    $0xffffffef,%eax
f010b1de:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1e3:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1e8:	83 c8 60             	or     $0x60,%eax
f010b1eb:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1f0:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1f5:	83 c8 80             	or     $0xffffff80,%eax
f010b1f8:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1fd:	b8 44 c3 10 f0       	mov    $0xf010c344,%eax
f010b202:	c1 e8 10             	shr    $0x10,%eax
f010b205:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b20b:	b8 48 c3 10 f0       	mov    $0xf010c348,%eax
f010b210:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010b216:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010b21d:	08 00 
f010b21f:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b224:	83 e0 e0             	and    $0xffffffe0,%eax
f010b227:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b22c:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b231:	83 e0 1f             	and    $0x1f,%eax
f010b234:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b239:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b23e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b241:	83 c8 0e             	or     $0xe,%eax
f010b244:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b249:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b24e:	83 e0 ef             	and    $0xffffffef,%eax
f010b251:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b256:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b25b:	83 c8 60             	or     $0x60,%eax
f010b25e:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b263:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b268:	83 c8 80             	or     $0xffffff80,%eax
f010b26b:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b270:	b8 48 c3 10 f0       	mov    $0xf010c348,%eax
f010b275:	c1 e8 10             	shr    $0x10,%eax
f010b278:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b27e:	b8 4c c3 10 f0       	mov    $0xf010c34c,%eax
f010b283:	66 a3 c8 32 25 f0    	mov    %ax,0xf02532c8
f010b289:	66 c7 05 ca 32 25 f0 	movw   $0x8,0xf02532ca
f010b290:	08 00 
f010b292:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010b297:	83 e0 e0             	and    $0xffffffe0,%eax
f010b29a:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010b29f:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010b2a4:	83 e0 1f             	and    $0x1f,%eax
f010b2a7:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010b2ac:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2b1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2b4:	83 c8 0e             	or     $0xe,%eax
f010b2b7:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2bc:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2c1:	83 e0 ef             	and    $0xffffffef,%eax
f010b2c4:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2c9:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2ce:	83 c8 60             	or     $0x60,%eax
f010b2d1:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2d6:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2db:	83 c8 80             	or     $0xffffff80,%eax
f010b2de:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2e3:	b8 4c c3 10 f0       	mov    $0xf010c34c,%eax
f010b2e8:	c1 e8 10             	shr    $0x10,%eax
f010b2eb:	66 a3 ce 32 25 f0    	mov    %ax,0xf02532ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b2f1:	b8 50 c3 10 f0       	mov    $0xf010c350,%eax
f010b2f6:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010b2fc:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010b303:	08 00 
f010b305:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b30a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b30d:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b312:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b317:	83 e0 1f             	and    $0x1f,%eax
f010b31a:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b31f:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b324:	83 e0 f0             	and    $0xfffffff0,%eax
f010b327:	83 c8 0e             	or     $0xe,%eax
f010b32a:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b32f:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b334:	83 e0 ef             	and    $0xffffffef,%eax
f010b337:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b33c:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b341:	83 c8 60             	or     $0x60,%eax
f010b344:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b349:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b34e:	83 c8 80             	or     $0xffffff80,%eax
f010b351:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b356:	b8 50 c3 10 f0       	mov    $0xf010c350,%eax
f010b35b:	c1 e8 10             	shr    $0x10,%eax
f010b35e:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b364:	b8 56 c3 10 f0       	mov    $0xf010c356,%eax
f010b369:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010b36f:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010b376:	08 00 
f010b378:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b37d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b380:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b385:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b38a:	83 e0 1f             	and    $0x1f,%eax
f010b38d:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b392:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b397:	83 e0 f0             	and    $0xfffffff0,%eax
f010b39a:	83 c8 0e             	or     $0xe,%eax
f010b39d:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3a2:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3a7:	83 e0 ef             	and    $0xffffffef,%eax
f010b3aa:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3af:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3b4:	83 c8 60             	or     $0x60,%eax
f010b3b7:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3bc:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3c1:	83 c8 80             	or     $0xffffff80,%eax
f010b3c4:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3c9:	b8 56 c3 10 f0       	mov    $0xf010c356,%eax
f010b3ce:	c1 e8 10             	shr    $0x10,%eax
f010b3d1:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b3d7:	b8 5a c3 10 f0       	mov    $0xf010c35a,%eax
f010b3dc:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010b3e2:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010b3e9:	08 00 
f010b3eb:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b3f0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3f3:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b3f8:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b3fd:	83 e0 1f             	and    $0x1f,%eax
f010b400:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b405:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b40a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b40d:	83 c8 0e             	or     $0xe,%eax
f010b410:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b415:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b41a:	83 e0 ef             	and    $0xffffffef,%eax
f010b41d:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b422:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b427:	83 c8 60             	or     $0x60,%eax
f010b42a:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b42f:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b434:	83 c8 80             	or     $0xffffff80,%eax
f010b437:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b43c:	b8 5a c3 10 f0       	mov    $0xf010c35a,%eax
f010b441:	c1 e8 10             	shr    $0x10,%eax
f010b444:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b44a:	b8 60 c3 10 f0       	mov    $0xf010c360,%eax
f010b44f:	66 a3 f8 32 25 f0    	mov    %ax,0xf02532f8
f010b455:	66 c7 05 fa 32 25 f0 	movw   $0x8,0xf02532fa
f010b45c:	08 00 
f010b45e:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010b463:	83 e0 e0             	and    $0xffffffe0,%eax
f010b466:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010b46b:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010b470:	83 e0 1f             	and    $0x1f,%eax
f010b473:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010b478:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b47d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b480:	83 c8 0e             	or     $0xe,%eax
f010b483:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b488:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b48d:	83 e0 ef             	and    $0xffffffef,%eax
f010b490:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b495:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b49a:	83 c8 60             	or     $0x60,%eax
f010b49d:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b4a2:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b4a7:	83 c8 80             	or     $0xffffff80,%eax
f010b4aa:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b4af:	b8 60 c3 10 f0       	mov    $0xf010c360,%eax
f010b4b4:	c1 e8 10             	shr    $0x10,%eax
f010b4b7:	66 a3 fe 32 25 f0    	mov    %ax,0xf02532fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b4bd:	b8 66 c3 10 f0       	mov    $0xf010c366,%eax
f010b4c2:	66 a3 60 33 25 f0    	mov    %ax,0xf0253360
f010b4c8:	66 c7 05 62 33 25 f0 	movw   $0x8,0xf0253362
f010b4cf:	08 00 
f010b4d1:	a0 64 33 25 f0       	mov    0xf0253364,%al
f010b4d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4d9:	a2 64 33 25 f0       	mov    %al,0xf0253364
f010b4de:	a0 64 33 25 f0       	mov    0xf0253364,%al
f010b4e3:	83 e0 1f             	and    $0x1f,%eax
f010b4e6:	a2 64 33 25 f0       	mov    %al,0xf0253364
f010b4eb:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b4f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4f3:	83 c8 0e             	or     $0xe,%eax
f010b4f6:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b4fb:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b500:	83 e0 ef             	and    $0xffffffef,%eax
f010b503:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b508:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b50d:	83 c8 60             	or     $0x60,%eax
f010b510:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b515:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b51a:	83 c8 80             	or     $0xffffff80,%eax
f010b51d:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b522:	b8 66 c3 10 f0       	mov    $0xf010c366,%eax
f010b527:	c1 e8 10             	shr    $0x10,%eax
f010b52a:	66 a3 66 33 25 f0    	mov    %ax,0xf0253366
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b530:	b8 6c c3 10 f0       	mov    $0xf010c36c,%eax
f010b535:	66 a3 68 33 25 f0    	mov    %ax,0xf0253368
f010b53b:	66 c7 05 6a 33 25 f0 	movw   $0x8,0xf025336a
f010b542:	08 00 
f010b544:	a0 6c 33 25 f0       	mov    0xf025336c,%al
f010b549:	83 e0 e0             	and    $0xffffffe0,%eax
f010b54c:	a2 6c 33 25 f0       	mov    %al,0xf025336c
f010b551:	a0 6c 33 25 f0       	mov    0xf025336c,%al
f010b556:	83 e0 1f             	and    $0x1f,%eax
f010b559:	a2 6c 33 25 f0       	mov    %al,0xf025336c
f010b55e:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b563:	83 e0 f0             	and    $0xfffffff0,%eax
f010b566:	83 c8 0e             	or     $0xe,%eax
f010b569:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b56e:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b573:	83 e0 ef             	and    $0xffffffef,%eax
f010b576:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b57b:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b580:	83 c8 60             	or     $0x60,%eax
f010b583:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b588:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b58d:	83 c8 80             	or     $0xffffff80,%eax
f010b590:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b595:	b8 6c c3 10 f0       	mov    $0xf010c36c,%eax
f010b59a:	c1 e8 10             	shr    $0x10,%eax
f010b59d:	66 a3 6e 33 25 f0    	mov    %ax,0xf025336e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b5a3:	b8 72 c3 10 f0       	mov    $0xf010c372,%eax
f010b5a8:	66 a3 70 33 25 f0    	mov    %ax,0xf0253370
f010b5ae:	66 c7 05 72 33 25 f0 	movw   $0x8,0xf0253372
f010b5b5:	08 00 
f010b5b7:	a0 74 33 25 f0       	mov    0xf0253374,%al
f010b5bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5bf:	a2 74 33 25 f0       	mov    %al,0xf0253374
f010b5c4:	a0 74 33 25 f0       	mov    0xf0253374,%al
f010b5c9:	83 e0 1f             	and    $0x1f,%eax
f010b5cc:	a2 74 33 25 f0       	mov    %al,0xf0253374
f010b5d1:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5d9:	83 c8 0e             	or     $0xe,%eax
f010b5dc:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5e1:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5e6:	83 e0 ef             	and    $0xffffffef,%eax
f010b5e9:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5ee:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5f3:	83 c8 60             	or     $0x60,%eax
f010b5f6:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5fb:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b600:	83 c8 80             	or     $0xffffff80,%eax
f010b603:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b608:	b8 72 c3 10 f0       	mov    $0xf010c372,%eax
f010b60d:	c1 e8 10             	shr    $0x10,%eax
f010b610:	66 a3 76 33 25 f0    	mov    %ax,0xf0253376
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b616:	b8 78 c3 10 f0       	mov    $0xf010c378,%eax
f010b61b:	66 a3 78 33 25 f0    	mov    %ax,0xf0253378
f010b621:	66 c7 05 7a 33 25 f0 	movw   $0x8,0xf025337a
f010b628:	08 00 
f010b62a:	a0 7c 33 25 f0       	mov    0xf025337c,%al
f010b62f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b632:	a2 7c 33 25 f0       	mov    %al,0xf025337c
f010b637:	a0 7c 33 25 f0       	mov    0xf025337c,%al
f010b63c:	83 e0 1f             	and    $0x1f,%eax
f010b63f:	a2 7c 33 25 f0       	mov    %al,0xf025337c
f010b644:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b649:	83 e0 f0             	and    $0xfffffff0,%eax
f010b64c:	83 c8 0e             	or     $0xe,%eax
f010b64f:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b654:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b659:	83 e0 ef             	and    $0xffffffef,%eax
f010b65c:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b661:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b666:	83 c8 60             	or     $0x60,%eax
f010b669:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b66e:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b673:	83 c8 80             	or     $0xffffff80,%eax
f010b676:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b67b:	b8 78 c3 10 f0       	mov    $0xf010c378,%eax
f010b680:	c1 e8 10             	shr    $0x10,%eax
f010b683:	66 a3 7e 33 25 f0    	mov    %ax,0xf025337e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b689:	b8 7e c3 10 f0       	mov    $0xf010c37e,%eax
f010b68e:	66 a3 80 33 25 f0    	mov    %ax,0xf0253380
f010b694:	66 c7 05 82 33 25 f0 	movw   $0x8,0xf0253382
f010b69b:	08 00 
f010b69d:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b6a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6a5:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b6aa:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b6af:	83 e0 1f             	and    $0x1f,%eax
f010b6b2:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b6b7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6bf:	83 c8 0e             	or     $0xe,%eax
f010b6c2:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6c7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6cc:	83 e0 ef             	and    $0xffffffef,%eax
f010b6cf:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6d4:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6d9:	83 c8 60             	or     $0x60,%eax
f010b6dc:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6e1:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6e6:	83 c8 80             	or     $0xffffff80,%eax
f010b6e9:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6ee:	b8 7e c3 10 f0       	mov    $0xf010c37e,%eax
f010b6f3:	c1 e8 10             	shr    $0x10,%eax
f010b6f6:	66 a3 86 33 25 f0    	mov    %ax,0xf0253386
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b6fc:	b8 84 c3 10 f0       	mov    $0xf010c384,%eax
f010b701:	66 a3 88 33 25 f0    	mov    %ax,0xf0253388
f010b707:	66 c7 05 8a 33 25 f0 	movw   $0x8,0xf025338a
f010b70e:	08 00 
f010b710:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b715:	83 e0 e0             	and    $0xffffffe0,%eax
f010b718:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b71d:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b722:	83 e0 1f             	and    $0x1f,%eax
f010b725:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b72a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b72f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b732:	83 c8 0e             	or     $0xe,%eax
f010b735:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b73a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b73f:	83 e0 ef             	and    $0xffffffef,%eax
f010b742:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b747:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b74c:	83 c8 60             	or     $0x60,%eax
f010b74f:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b754:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b759:	83 c8 80             	or     $0xffffff80,%eax
f010b75c:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b761:	b8 84 c3 10 f0       	mov    $0xf010c384,%eax
f010b766:	c1 e8 10             	shr    $0x10,%eax
f010b769:	66 a3 8e 33 25 f0    	mov    %ax,0xf025338e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b76f:	b8 8a c3 10 f0       	mov    $0xf010c38a,%eax
f010b774:	66 a3 90 33 25 f0    	mov    %ax,0xf0253390
f010b77a:	66 c7 05 92 33 25 f0 	movw   $0x8,0xf0253392
f010b781:	08 00 
f010b783:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b788:	83 e0 e0             	and    $0xffffffe0,%eax
f010b78b:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b790:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b795:	83 e0 1f             	and    $0x1f,%eax
f010b798:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b79d:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7a5:	83 c8 0e             	or     $0xe,%eax
f010b7a8:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7ad:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7b2:	83 e0 ef             	and    $0xffffffef,%eax
f010b7b5:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7ba:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7bf:	83 c8 60             	or     $0x60,%eax
f010b7c2:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7c7:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7cc:	83 c8 80             	or     $0xffffff80,%eax
f010b7cf:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7d4:	b8 8a c3 10 f0       	mov    $0xf010c38a,%eax
f010b7d9:	c1 e8 10             	shr    $0x10,%eax
f010b7dc:	66 a3 96 33 25 f0    	mov    %ax,0xf0253396
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b7e2:	b8 90 c3 10 f0       	mov    $0xf010c390,%eax
f010b7e7:	66 a3 98 33 25 f0    	mov    %ax,0xf0253398
f010b7ed:	66 c7 05 9a 33 25 f0 	movw   $0x8,0xf025339a
f010b7f4:	08 00 
f010b7f6:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b7fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7fe:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b803:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b808:	83 e0 1f             	and    $0x1f,%eax
f010b80b:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b810:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b815:	83 e0 f0             	and    $0xfffffff0,%eax
f010b818:	83 c8 0e             	or     $0xe,%eax
f010b81b:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b820:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b825:	83 e0 ef             	and    $0xffffffef,%eax
f010b828:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b82d:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b832:	83 c8 60             	or     $0x60,%eax
f010b835:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b83a:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b83f:	83 c8 80             	or     $0xffffff80,%eax
f010b842:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b847:	b8 90 c3 10 f0       	mov    $0xf010c390,%eax
f010b84c:	c1 e8 10             	shr    $0x10,%eax
f010b84f:	66 a3 9e 33 25 f0    	mov    %ax,0xf025339e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b855:	b8 96 c3 10 f0       	mov    $0xf010c396,%eax
f010b85a:	66 a3 a0 33 25 f0    	mov    %ax,0xf02533a0
f010b860:	66 c7 05 a2 33 25 f0 	movw   $0x8,0xf02533a2
f010b867:	08 00 
f010b869:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010b86e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b871:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010b876:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010b87b:	83 e0 1f             	and    $0x1f,%eax
f010b87e:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010b883:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b888:	83 e0 f0             	and    $0xfffffff0,%eax
f010b88b:	83 c8 0e             	or     $0xe,%eax
f010b88e:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b893:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b898:	83 e0 ef             	and    $0xffffffef,%eax
f010b89b:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8a0:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b8a5:	83 c8 60             	or     $0x60,%eax
f010b8a8:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8ad:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b8b2:	83 c8 80             	or     $0xffffff80,%eax
f010b8b5:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8ba:	b8 96 c3 10 f0       	mov    $0xf010c396,%eax
f010b8bf:	c1 e8 10             	shr    $0x10,%eax
f010b8c2:	66 a3 a6 33 25 f0    	mov    %ax,0xf02533a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b8c8:	b8 9c c3 10 f0       	mov    $0xf010c39c,%eax
f010b8cd:	66 a3 a8 33 25 f0    	mov    %ax,0xf02533a8
f010b8d3:	66 c7 05 aa 33 25 f0 	movw   $0x8,0xf02533aa
f010b8da:	08 00 
f010b8dc:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010b8e1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8e4:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010b8e9:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010b8ee:	83 e0 1f             	and    $0x1f,%eax
f010b8f1:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010b8f6:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b8fb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8fe:	83 c8 0e             	or     $0xe,%eax
f010b901:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b906:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b90b:	83 e0 ef             	and    $0xffffffef,%eax
f010b90e:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b913:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b918:	83 c8 60             	or     $0x60,%eax
f010b91b:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b920:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b925:	83 c8 80             	or     $0xffffff80,%eax
f010b928:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b92d:	b8 9c c3 10 f0       	mov    $0xf010c39c,%eax
f010b932:	c1 e8 10             	shr    $0x10,%eax
f010b935:	66 a3 ae 33 25 f0    	mov    %ax,0xf02533ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b93b:	b8 a2 c3 10 f0       	mov    $0xf010c3a2,%eax
f010b940:	66 a3 b0 33 25 f0    	mov    %ax,0xf02533b0
f010b946:	66 c7 05 b2 33 25 f0 	movw   $0x8,0xf02533b2
f010b94d:	08 00 
f010b94f:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010b954:	83 e0 e0             	and    $0xffffffe0,%eax
f010b957:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010b95c:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010b961:	83 e0 1f             	and    $0x1f,%eax
f010b964:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010b969:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b96e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b971:	83 c8 0e             	or     $0xe,%eax
f010b974:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b979:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b97e:	83 e0 ef             	and    $0xffffffef,%eax
f010b981:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b986:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b98b:	83 c8 60             	or     $0x60,%eax
f010b98e:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b993:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b998:	83 c8 80             	or     $0xffffff80,%eax
f010b99b:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b9a0:	b8 a2 c3 10 f0       	mov    $0xf010c3a2,%eax
f010b9a5:	c1 e8 10             	shr    $0x10,%eax
f010b9a8:	66 a3 b6 33 25 f0    	mov    %ax,0xf02533b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b9ae:	b8 a8 c3 10 f0       	mov    $0xf010c3a8,%eax
f010b9b3:	66 a3 b8 33 25 f0    	mov    %ax,0xf02533b8
f010b9b9:	66 c7 05 ba 33 25 f0 	movw   $0x8,0xf02533ba
f010b9c0:	08 00 
f010b9c2:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010b9c7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9ca:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010b9cf:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010b9d4:	83 e0 1f             	and    $0x1f,%eax
f010b9d7:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010b9dc:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9e1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9e4:	83 c8 0e             	or     $0xe,%eax
f010b9e7:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010b9ec:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9f1:	83 e0 ef             	and    $0xffffffef,%eax
f010b9f4:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010b9f9:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9fe:	83 c8 60             	or     $0x60,%eax
f010ba01:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010ba06:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010ba0b:	83 c8 80             	or     $0xffffff80,%eax
f010ba0e:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010ba13:	b8 a8 c3 10 f0       	mov    $0xf010c3a8,%eax
f010ba18:	c1 e8 10             	shr    $0x10,%eax
f010ba1b:	66 a3 be 33 25 f0    	mov    %ax,0xf02533be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010ba21:	b8 ae c3 10 f0       	mov    $0xf010c3ae,%eax
f010ba26:	66 a3 c0 33 25 f0    	mov    %ax,0xf02533c0
f010ba2c:	66 c7 05 c2 33 25 f0 	movw   $0x8,0xf02533c2
f010ba33:	08 00 
f010ba35:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010ba3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba3d:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010ba42:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010ba47:	83 e0 1f             	and    $0x1f,%eax
f010ba4a:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010ba4f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba54:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba57:	83 c8 0e             	or     $0xe,%eax
f010ba5a:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba5f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba64:	83 e0 ef             	and    $0xffffffef,%eax
f010ba67:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba6c:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba71:	83 c8 60             	or     $0x60,%eax
f010ba74:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba79:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba7e:	83 c8 80             	or     $0xffffff80,%eax
f010ba81:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba86:	b8 ae c3 10 f0       	mov    $0xf010c3ae,%eax
f010ba8b:	c1 e8 10             	shr    $0x10,%eax
f010ba8e:	66 a3 c6 33 25 f0    	mov    %ax,0xf02533c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010ba94:	b8 b4 c3 10 f0       	mov    $0xf010c3b4,%eax
f010ba99:	66 a3 c8 33 25 f0    	mov    %ax,0xf02533c8
f010ba9f:	66 c7 05 ca 33 25 f0 	movw   $0x8,0xf02533ca
f010baa6:	08 00 
f010baa8:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010baad:	83 e0 e0             	and    $0xffffffe0,%eax
f010bab0:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bab5:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010baba:	83 e0 1f             	and    $0x1f,%eax
f010babd:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bac2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bac7:	83 e0 f0             	and    $0xfffffff0,%eax
f010baca:	83 c8 0e             	or     $0xe,%eax
f010bacd:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bad2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bad7:	83 e0 ef             	and    $0xffffffef,%eax
f010bada:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010badf:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bae4:	83 c8 60             	or     $0x60,%eax
f010bae7:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010baec:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010baf1:	83 c8 80             	or     $0xffffff80,%eax
f010baf4:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010baf9:	b8 b4 c3 10 f0       	mov    $0xf010c3b4,%eax
f010bafe:	c1 e8 10             	shr    $0x10,%eax
f010bb01:	66 a3 ce 33 25 f0    	mov    %ax,0xf02533ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bb07:	b8 ba c3 10 f0       	mov    $0xf010c3ba,%eax
f010bb0c:	66 a3 d0 33 25 f0    	mov    %ax,0xf02533d0
f010bb12:	66 c7 05 d2 33 25 f0 	movw   $0x8,0xf02533d2
f010bb19:	08 00 
f010bb1b:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bb20:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb23:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bb28:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bb2d:	83 e0 1f             	and    $0x1f,%eax
f010bb30:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bb35:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb3d:	83 c8 0e             	or     $0xe,%eax
f010bb40:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb45:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb4a:	83 e0 ef             	and    $0xffffffef,%eax
f010bb4d:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb52:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb57:	83 c8 60             	or     $0x60,%eax
f010bb5a:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb5f:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb64:	83 c8 80             	or     $0xffffff80,%eax
f010bb67:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb6c:	b8 ba c3 10 f0       	mov    $0xf010c3ba,%eax
f010bb71:	c1 e8 10             	shr    $0x10,%eax
f010bb74:	66 a3 d6 33 25 f0    	mov    %ax,0xf02533d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bb7a:	b8 c0 c3 10 f0       	mov    $0xf010c3c0,%eax
f010bb7f:	66 a3 d8 33 25 f0    	mov    %ax,0xf02533d8
f010bb85:	66 c7 05 da 33 25 f0 	movw   $0x8,0xf02533da
f010bb8c:	08 00 
f010bb8e:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bb93:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb96:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bb9b:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bba0:	83 e0 1f             	and    $0x1f,%eax
f010bba3:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bba8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbad:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbb0:	83 c8 0e             	or     $0xe,%eax
f010bbb3:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbb8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbbd:	83 e0 ef             	and    $0xffffffef,%eax
f010bbc0:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbc5:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbca:	83 c8 60             	or     $0x60,%eax
f010bbcd:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbd2:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbd7:	83 c8 80             	or     $0xffffff80,%eax
f010bbda:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbdf:	b8 c0 c3 10 f0       	mov    $0xf010c3c0,%eax
f010bbe4:	c1 e8 10             	shr    $0x10,%eax
f010bbe7:	66 a3 de 33 25 f0    	mov    %ax,0xf02533de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bbed:	c7 05 84 3a 25 f0 00 	movl   $0xefc00000,0xf0253a84
f010bbf4:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bbf7:	66 c7 05 88 3a 25 f0 	movw   $0x10,0xf0253a88
f010bbfe:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bc00:	66 c7 05 88 c9 18 f0 	movw   $0x68,0xf018c988
f010bc07:	68 00 
f010bc09:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc0e:	66 a3 8a c9 18 f0    	mov    %ax,0xf018c98a
f010bc14:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc19:	c1 e8 10             	shr    $0x10,%eax
f010bc1c:	a2 8c c9 18 f0       	mov    %al,0xf018c98c
f010bc21:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc26:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc29:	83 c8 09             	or     $0x9,%eax
f010bc2c:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc31:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc36:	83 c8 10             	or     $0x10,%eax
f010bc39:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc3e:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc43:	83 e0 9f             	and    $0xffffff9f,%eax
f010bc46:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc4b:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc50:	83 c8 80             	or     $0xffffff80,%eax
f010bc53:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc58:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc60:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc65:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc6a:	83 e0 ef             	and    $0xffffffef,%eax
f010bc6d:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc72:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc77:	83 e0 df             	and    $0xffffffdf,%eax
f010bc7a:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc7f:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc84:	83 c8 40             	or     $0x40,%eax
f010bc87:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc8c:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc91:	83 e0 7f             	and    $0x7f,%eax
f010bc94:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc99:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc9e:	c1 e8 18             	shr    $0x18,%eax
f010bca1:	a2 8f c9 18 f0       	mov    %al,0xf018c98f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010bca6:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bcab:	83 e0 ef             	and    $0xffffffef,%eax
f010bcae:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bcb3:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bcb9:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bcbd:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bcc0:	0f 01 1d 50 ca 18 f0 	lidtl  0xf018ca50
}
f010bcc7:	90                   	nop
f010bcc8:	c9                   	leave  
f010bcc9:	c3                   	ret    

f010bcca <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010bcca:	55                   	push   %ebp
f010bccb:	89 e5                	mov    %esp,%ebp
f010bccd:	53                   	push   %ebx
f010bcce:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010bcd1:	83 ec 08             	sub    $0x8,%esp
f010bcd4:	ff 75 08             	pushl  0x8(%ebp)
f010bcd7:	68 db 27 13 f0       	push   $0xf01327db
f010bcdc:	e8 50 51 ff ff       	call   f0100e31 <cprintf>
f010bce1:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010bce4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bce7:	83 ec 0c             	sub    $0xc,%esp
f010bcea:	50                   	push   %eax
f010bceb:	e8 fd 00 00 00       	call   f010bded <print_regs>
f010bcf0:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010bcf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcf6:	8b 40 20             	mov    0x20(%eax),%eax
f010bcf9:	0f b7 c0             	movzwl %ax,%eax
f010bcfc:	83 ec 08             	sub    $0x8,%esp
f010bcff:	50                   	push   %eax
f010bd00:	68 ed 27 13 f0       	push   $0xf01327ed
f010bd05:	e8 27 51 ff ff       	call   f0100e31 <cprintf>
f010bd0a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010bd0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd10:	8b 40 24             	mov    0x24(%eax),%eax
f010bd13:	0f b7 c0             	movzwl %ax,%eax
f010bd16:	83 ec 08             	sub    $0x8,%esp
f010bd19:	50                   	push   %eax
f010bd1a:	68 00 28 13 f0       	push   $0xf0132800
f010bd1f:	e8 0d 51 ff ff       	call   f0100e31 <cprintf>
f010bd24:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010bd27:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd2a:	8b 58 28             	mov    0x28(%eax),%ebx
f010bd2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd30:	8b 40 28             	mov    0x28(%eax),%eax
f010bd33:	83 ec 0c             	sub    $0xc,%esp
f010bd36:	50                   	push   %eax
f010bd37:	e8 d0 ee ff ff       	call   f010ac0c <trapname>
f010bd3c:	83 c4 10             	add    $0x10,%esp
f010bd3f:	89 c2                	mov    %eax,%edx
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	8b 40 28             	mov    0x28(%eax),%eax
f010bd47:	53                   	push   %ebx
f010bd48:	52                   	push   %edx
f010bd49:	50                   	push   %eax
f010bd4a:	68 13 28 13 f0       	push   $0xf0132813
f010bd4f:	e8 dd 50 ff ff       	call   f0100e31 <cprintf>
f010bd54:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010bd57:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd5a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bd5d:	83 ec 08             	sub    $0x8,%esp
f010bd60:	50                   	push   %eax
f010bd61:	68 2a 28 13 f0       	push   $0xf013282a
f010bd66:	e8 c6 50 ff ff       	call   f0100e31 <cprintf>
f010bd6b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010bd6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd71:	8b 40 30             	mov    0x30(%eax),%eax
f010bd74:	83 ec 08             	sub    $0x8,%esp
f010bd77:	50                   	push   %eax
f010bd78:	68 39 28 13 f0       	push   $0xf0132839
f010bd7d:	e8 af 50 ff ff       	call   f0100e31 <cprintf>
f010bd82:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010bd85:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd88:	8b 40 34             	mov    0x34(%eax),%eax
f010bd8b:	0f b7 c0             	movzwl %ax,%eax
f010bd8e:	83 ec 08             	sub    $0x8,%esp
f010bd91:	50                   	push   %eax
f010bd92:	68 48 28 13 f0       	push   $0xf0132848
f010bd97:	e8 95 50 ff ff       	call   f0100e31 <cprintf>
f010bd9c:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010bd9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bda2:	8b 40 38             	mov    0x38(%eax),%eax
f010bda5:	83 ec 08             	sub    $0x8,%esp
f010bda8:	50                   	push   %eax
f010bda9:	68 5b 28 13 f0       	push   $0xf013285b
f010bdae:	e8 7e 50 ff ff       	call   f0100e31 <cprintf>
f010bdb3:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010bdb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdb9:	8b 40 3c             	mov    0x3c(%eax),%eax
f010bdbc:	83 ec 08             	sub    $0x8,%esp
f010bdbf:	50                   	push   %eax
f010bdc0:	68 6a 28 13 f0       	push   $0xf013286a
f010bdc5:	e8 67 50 ff ff       	call   f0100e31 <cprintf>
f010bdca:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010bdcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdd0:	8b 40 40             	mov    0x40(%eax),%eax
f010bdd3:	0f b7 c0             	movzwl %ax,%eax
f010bdd6:	83 ec 08             	sub    $0x8,%esp
f010bdd9:	50                   	push   %eax
f010bdda:	68 79 28 13 f0       	push   $0xf0132879
f010bddf:	e8 4d 50 ff ff       	call   f0100e31 <cprintf>
f010bde4:	83 c4 10             	add    $0x10,%esp
}
f010bde7:	90                   	nop
f010bde8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bdeb:	c9                   	leave  
f010bdec:	c3                   	ret    

f010bded <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010bded:	55                   	push   %ebp
f010bdee:	89 e5                	mov    %esp,%ebp
f010bdf0:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010bdf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	83 ec 08             	sub    $0x8,%esp
f010bdfb:	50                   	push   %eax
f010bdfc:	68 8c 28 13 f0       	push   $0xf013288c
f010be01:	e8 2b 50 ff ff       	call   f0100e31 <cprintf>
f010be06:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010be09:	8b 45 08             	mov    0x8(%ebp),%eax
f010be0c:	8b 40 04             	mov    0x4(%eax),%eax
f010be0f:	83 ec 08             	sub    $0x8,%esp
f010be12:	50                   	push   %eax
f010be13:	68 9b 28 13 f0       	push   $0xf013289b
f010be18:	e8 14 50 ff ff       	call   f0100e31 <cprintf>
f010be1d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010be20:	8b 45 08             	mov    0x8(%ebp),%eax
f010be23:	8b 40 08             	mov    0x8(%eax),%eax
f010be26:	83 ec 08             	sub    $0x8,%esp
f010be29:	50                   	push   %eax
f010be2a:	68 aa 28 13 f0       	push   $0xf01328aa
f010be2f:	e8 fd 4f ff ff       	call   f0100e31 <cprintf>
f010be34:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010be37:	8b 45 08             	mov    0x8(%ebp),%eax
f010be3a:	8b 40 0c             	mov    0xc(%eax),%eax
f010be3d:	83 ec 08             	sub    $0x8,%esp
f010be40:	50                   	push   %eax
f010be41:	68 b9 28 13 f0       	push   $0xf01328b9
f010be46:	e8 e6 4f ff ff       	call   f0100e31 <cprintf>
f010be4b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010be4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010be51:	8b 40 10             	mov    0x10(%eax),%eax
f010be54:	83 ec 08             	sub    $0x8,%esp
f010be57:	50                   	push   %eax
f010be58:	68 c8 28 13 f0       	push   $0xf01328c8
f010be5d:	e8 cf 4f ff ff       	call   f0100e31 <cprintf>
f010be62:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010be65:	8b 45 08             	mov    0x8(%ebp),%eax
f010be68:	8b 40 14             	mov    0x14(%eax),%eax
f010be6b:	83 ec 08             	sub    $0x8,%esp
f010be6e:	50                   	push   %eax
f010be6f:	68 d7 28 13 f0       	push   $0xf01328d7
f010be74:	e8 b8 4f ff ff       	call   f0100e31 <cprintf>
f010be79:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010be7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010be7f:	8b 40 18             	mov    0x18(%eax),%eax
f010be82:	83 ec 08             	sub    $0x8,%esp
f010be85:	50                   	push   %eax
f010be86:	68 e6 28 13 f0       	push   $0xf01328e6
f010be8b:	e8 a1 4f ff ff       	call   f0100e31 <cprintf>
f010be90:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010be93:	8b 45 08             	mov    0x8(%ebp),%eax
f010be96:	8b 40 1c             	mov    0x1c(%eax),%eax
f010be99:	83 ec 08             	sub    $0x8,%esp
f010be9c:	50                   	push   %eax
f010be9d:	68 f5 28 13 f0       	push   $0xf01328f5
f010bea2:	e8 8a 4f ff ff       	call   f0100e31 <cprintf>
f010bea7:	83 c4 10             	add    $0x10,%esp
}
f010beaa:	90                   	nop
f010beab:	c9                   	leave  
f010beac:	c3                   	ret    

f010bead <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010bead:	55                   	push   %ebp
f010beae:	89 e5                	mov    %esp,%ebp
f010beb0:	57                   	push   %edi
f010beb1:	56                   	push   %esi
f010beb2:	53                   	push   %ebx
f010beb3:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010beb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010beb9:	8b 40 28             	mov    0x28(%eax),%eax
f010bebc:	83 f8 0e             	cmp    $0xe,%eax
f010bebf:	75 29                	jne    f010beea <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010bec1:	83 ec 0c             	sub    $0xc,%esp
f010bec4:	6a 01                	push   $0x1
f010bec6:	e8 b9 14 00 00       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f010becb:	83 c4 10             	add    $0x10,%esp
f010bece:	85 c0                	test   %eax,%eax
f010bed0:	74 05                	je     f010bed7 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010bed2:	e8 62 a1 ff ff       	call   f0106039 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010bed7:	83 ec 0c             	sub    $0xc,%esp
f010beda:	ff 75 08             	pushl  0x8(%ebp)
f010bedd:	e8 51 02 00 00       	call   f010c133 <fault_handler>
f010bee2:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bee5:	e9 bb 00 00 00       	jmp    f010bfa5 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010beea:	8b 45 08             	mov    0x8(%ebp),%eax
f010beed:	8b 40 28             	mov    0x28(%eax),%eax
f010bef0:	83 f8 30             	cmp    $0x30,%eax
f010bef3:	75 42                	jne    f010bf37 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010bef5:	8b 45 08             	mov    0x8(%ebp),%eax
f010bef8:	8b 78 04             	mov    0x4(%eax),%edi
f010befb:	8b 45 08             	mov    0x8(%ebp),%eax
f010befe:	8b 30                	mov    (%eax),%esi
f010bf00:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf03:	8b 58 10             	mov    0x10(%eax),%ebx
f010bf06:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf09:	8b 48 18             	mov    0x18(%eax),%ecx
f010bf0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf0f:	8b 50 14             	mov    0x14(%eax),%edx
f010bf12:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf15:	8b 40 1c             	mov    0x1c(%eax),%eax
f010bf18:	83 ec 08             	sub    $0x8,%esp
f010bf1b:	57                   	push   %edi
f010bf1c:	56                   	push   %esi
f010bf1d:	53                   	push   %ebx
f010bf1e:	51                   	push   %ecx
f010bf1f:	52                   	push   %edx
f010bf20:	50                   	push   %eax
f010bf21:	e8 a8 0b 00 00       	call   f010cace <syscall>
f010bf26:	83 c4 20             	add    $0x20,%esp
f010bf29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010bf2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf2f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bf32:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bf35:	eb 6e                	jmp    f010bfa5 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 40 28             	mov    0x28(%eax),%eax
f010bf3d:	83 f8 08             	cmp    $0x8,%eax
f010bf40:	75 17                	jne    f010bf59 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010bf42:	83 ec 04             	sub    $0x4,%esp
f010bf45:	68 04 29 13 f0       	push   $0xf0132904
f010bf4a:	68 e7 00 00 00       	push   $0xe7
f010bf4f:	68 13 29 13 f0       	push   $0xf0132913
f010bf54:	e8 57 42 ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010bf59:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf5c:	8b 40 28             	mov    0x28(%eax),%eax
f010bf5f:	83 f8 20             	cmp    $0x20,%eax
f010bf62:	75 07                	jne    f010bf6b <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010bf64:	e8 93 a0 ff ff       	call   f0105ffc <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bf69:	eb 3a                	jmp    f010bfa5 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010bf6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf6e:	8b 40 34             	mov    0x34(%eax),%eax
f010bf71:	66 83 f8 08          	cmp    $0x8,%ax
f010bf75:	75 17                	jne    f010bf8e <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bf77:	83 ec 04             	sub    $0x4,%esp
f010bf7a:	68 24 29 13 f0       	push   $0xf0132924
f010bf7f:	68 f4 00 00 00       	push   $0xf4
f010bf84:	68 13 29 13 f0       	push   $0xf0132913
f010bf89:	e8 22 42 ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010bf8e:	83 ec 04             	sub    $0x4,%esp
f010bf91:	68 40 29 13 f0       	push   $0xf0132940
f010bf96:	68 f8 00 00 00       	push   $0xf8
f010bf9b:	68 13 29 13 f0       	push   $0xf0132913
f010bfa0:	e8 0b 42 ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010bfa5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bfa8:	5b                   	pop    %ebx
f010bfa9:	5e                   	pop    %esi
f010bfaa:	5f                   	pop    %edi
f010bfab:	5d                   	pop    %ebp
f010bfac:	c3                   	ret    

f010bfad <trap>:

void trap(struct Trapframe *tf)
{
f010bfad:	55                   	push   %ebp
f010bfae:	89 e5                	mov    %esp,%ebp
f010bfb0:	57                   	push   %edi
f010bfb1:	56                   	push   %esi
f010bfb2:	53                   	push   %ebx
f010bfb3:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010bfb6:	e8 45 87 ff ff       	call   f0104700 <kclock_stop>

	int userTrap = 0;
f010bfbb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bfc2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfc5:	8b 40 34             	mov    0x34(%eax),%eax
f010bfc8:	0f b7 c0             	movzwl %ax,%eax
f010bfcb:	83 e0 03             	and    $0x3,%eax
f010bfce:	83 f8 03             	cmp    $0x3,%eax
f010bfd1:	75 49                	jne    f010c01c <trap+0x6f>
		assert(curenv);
f010bfd3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010bfd8:	85 c0                	test   %eax,%eax
f010bfda:	75 19                	jne    f010bff5 <trap+0x48>
f010bfdc:	68 5f 29 13 f0       	push   $0xf013295f
f010bfe1:	68 66 29 13 f0       	push   $0xf0132966
f010bfe6:	68 06 01 00 00       	push   $0x106
f010bfeb:	68 13 29 13 f0       	push   $0xf0132913
f010bff0:	e8 bb 41 ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010bff5:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010bffb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bffe:	89 c3                	mov    %eax,%ebx
f010c000:	b8 11 00 00 00       	mov    $0x11,%eax
f010c005:	89 d7                	mov    %edx,%edi
f010c007:	89 de                	mov    %ebx,%esi
f010c009:	89 c1                	mov    %eax,%ecx
f010c00b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c00d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c012:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c015:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c01c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c01f:	8b 40 28             	mov    0x28(%eax),%eax
f010c022:	83 f8 20             	cmp    $0x20,%eax
f010c025:	75 40                	jne    f010c067 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c027:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c02b:	0f 84 a6 00 00 00    	je     f010c0d7 <trap+0x12a>
		{
			assert(curenv);
f010c031:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c036:	85 c0                	test   %eax,%eax
f010c038:	75 19                	jne    f010c053 <trap+0xa6>
f010c03a:	68 5f 29 13 f0       	push   $0xf013295f
f010c03f:	68 66 29 13 f0       	push   $0xf0132966
f010c044:	68 12 01 00 00       	push   $0x112
f010c049:	68 13 29 13 f0       	push   $0xf0132913
f010c04e:	e8 5d 41 ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c053:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c058:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c05e:	42                   	inc    %edx
f010c05f:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c065:	eb 70                	jmp    f010c0d7 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c067:	8b 45 08             	mov    0x8(%ebp),%eax
f010c06a:	8b 40 28             	mov    0x28(%eax),%eax
f010c06d:	83 f8 0e             	cmp    $0xe,%eax
f010c070:	75 65                	jne    f010c0d7 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c072:	a0 e8 3a 25 f0       	mov    0xf0253ae8,%al
f010c077:	84 c0                	test   %al,%al
f010c079:	74 5c                	je     f010c0d7 <trap+0x12a>
			if (userTrap){
f010c07b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c07f:	74 2c                	je     f010c0ad <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c081:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c086:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c08c:	8b 52 30             	mov    0x30(%edx),%edx
f010c08f:	89 d1                	mov    %edx,%ecx
f010c091:	8a 15 e8 3a 25 f0    	mov    0xf0253ae8,%dl
f010c097:	0f b6 d2             	movzbl %dl,%edx
f010c09a:	01 ca                	add    %ecx,%edx
f010c09c:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c09f:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0a4:	83 ec 0c             	sub    $0xc,%esp
f010c0a7:	50                   	push   %eax
f010c0a8:	e8 d3 d4 ff ff       	call   f0109580 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b0:	8b 40 30             	mov    0x30(%eax),%eax
f010c0b3:	89 c2                	mov    %eax,%edx
f010c0b5:	a0 e8 3a 25 f0       	mov    0xf0253ae8,%al
f010c0ba:	0f b6 c0             	movzbl %al,%eax
f010c0bd:	01 d0                	add    %edx,%eax
f010c0bf:	89 c2                	mov    %eax,%edx
f010c0c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c4:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c0c7:	e8 5f 86 ff ff       	call   f010472b <kclock_resume>
				env_pop_tf(tf);
f010c0cc:	83 ec 0c             	sub    $0xc,%esp
f010c0cf:	ff 75 08             	pushl  0x8(%ebp)
f010c0d2:	e8 fb d5 ff ff       	call   f01096d2 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c0d7:	83 ec 0c             	sub    $0xc,%esp
f010c0da:	ff 75 08             	pushl  0x8(%ebp)
f010c0dd:	e8 cb fd ff ff       	call   f010bead <trap_dispatch>
f010c0e2:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c0e5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c0e9:	74 3d                	je     f010c128 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c0eb:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0f0:	85 c0                	test   %eax,%eax
f010c0f2:	74 0d                	je     f010c101 <trap+0x154>
f010c0f4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0f9:	8b 40 54             	mov    0x54(%eax),%eax
f010c0fc:	83 f8 02             	cmp    $0x2,%eax
f010c0ff:	74 19                	je     f010c11a <trap+0x16d>
f010c101:	68 7c 29 13 f0       	push   $0xf013297c
f010c106:	68 66 29 13 f0       	push   $0xf0132966
f010c10b:	68 27 01 00 00       	push   $0x127
f010c110:	68 13 29 13 f0       	push   $0xf0132913
f010c115:	e8 96 40 ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c11a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c11f:	83 ec 0c             	sub    $0xc,%esp
f010c122:	50                   	push   %eax
f010c123:	e8 58 d4 ff ff       	call   f0109580 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c128:	83 ec 0c             	sub    $0xc,%esp
f010c12b:	ff 75 08             	pushl  0x8(%ebp)
f010c12e:	e8 9f d5 ff ff       	call   f01096d2 <env_pop_tf>

f010c133 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c133:	55                   	push   %ebp
f010c134:	89 e5                	mov    %esp,%ebp
f010c136:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c139:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c140:	8b 45 08             	mov    0x8(%ebp),%eax
f010c143:	8b 40 34             	mov    0x34(%eax),%eax
f010c146:	0f b7 c0             	movzwl %ax,%eax
f010c149:	83 e0 03             	and    $0x3,%eax
f010c14c:	83 f8 03             	cmp    $0x3,%eax
f010c14f:	75 07                	jne    f010c158 <fault_handler+0x25>
		userTrap = 1;
f010c151:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c158:	0f 20 d0             	mov    %cr2,%eax
f010c15b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c15e:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c161:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c164:	a1 60 3a 25 f0       	mov    0xf0253a60,%eax
f010c169:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c16c:	75 2b                	jne    f010c199 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c16e:	a0 64 3a 25 f0       	mov    0xf0253a64,%al
f010c173:	40                   	inc    %eax
f010c174:	a2 64 3a 25 f0       	mov    %al,0xf0253a64
		if (num_repeated_fault == 3)
f010c179:	a0 64 3a 25 f0       	mov    0xf0253a64,%al
f010c17e:	3c 03                	cmp    $0x3,%al
f010c180:	75 1e                	jne    f010c1a0 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c182:	ff 75 ec             	pushl  -0x14(%ebp)
f010c185:	68 ac 29 13 f0       	push   $0xf01329ac
f010c18a:	68 4a 01 00 00       	push   $0x14a
f010c18f:	68 13 29 13 f0       	push   $0xf0132913
f010c194:	e8 17 40 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c199:	c6 05 64 3a 25 f0 00 	movb   $0x0,0xf0253a64
	}
	last_fault_va = fault_va ;
f010c1a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c1a3:	a3 60 3a 25 f0       	mov    %eax,0xf0253a60
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c1a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c1ac:	75 29                	jne    f010c1d7 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c1ae:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c1b5:	77 40                	ja     f010c1f7 <fault_handler+0xc4>
f010c1b7:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c1be:	76 37                	jbe    f010c1f7 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c1c0:	83 ec 04             	sub    $0x4,%esp
f010c1c3:	68 f8 29 13 f0       	push   $0xf01329f8
f010c1c8:	68 56 01 00 00       	push   $0x156
f010c1cd:	68 13 29 13 f0       	push   $0xf0132913
f010c1d2:	e8 d9 3f ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c1d7:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c1de:	76 17                	jbe    f010c1f7 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c1e0:	83 ec 04             	sub    $0x4,%esp
f010c1e3:	68 1c 2a 13 f0       	push   $0xf0132a1c
f010c1e8:	68 5c 01 00 00       	push   $0x15c
f010c1ed:	68 13 29 13 f0       	push   $0xf0132913
f010c1f2:	e8 b9 3f ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c1f7:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c1fc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c1ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c202:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c208:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c20b:	c1 ea 16             	shr    $0x16,%edx
f010c20e:	c1 e2 02             	shl    $0x2,%edx
f010c211:	01 d0                	add    %edx,%eax
f010c213:	8b 00                	mov    (%eax),%eax
f010c215:	83 e0 01             	and    $0x1,%eax
f010c218:	85 c0                	test   %eax,%eax
f010c21a:	75 28                	jne    f010c244 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c21c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c21f:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c225:	8d 50 01             	lea    0x1(%eax),%edx
f010c228:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c22b:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c231:	83 ec 08             	sub    $0x8,%esp
f010c234:	ff 75 ec             	pushl  -0x14(%ebp)
f010c237:	ff 75 e8             	pushl  -0x18(%ebp)
f010c23a:	e8 2a 12 00 00       	call   f010d469 <table_fault_handler>
f010c23f:	83 c4 10             	add    $0x10,%esp
f010c242:	eb 7e                	jmp    f010c2c2 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c244:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c247:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 ec             	pushl  -0x14(%ebp)
f010c253:	50                   	push   %eax
f010c254:	e8 be ba ff ff       	call   f0107d17 <pt_get_page_permissions>
f010c259:	83 c4 10             	add    $0x10,%esp
f010c25c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c25f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c262:	83 e0 01             	and    $0x1,%eax
f010c265:	85 c0                	test   %eax,%eax
f010c267:	74 17                	je     f010c280 <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c269:	ff 75 ec             	pushl  -0x14(%ebp)
f010c26c:	68 40 2a 13 f0       	push   $0xf0132a40
f010c271:	68 7b 01 00 00       	push   $0x17b
f010c276:	68 13 29 13 f0       	push   $0xf0132913
f010c27b:	e8 30 3f ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c280:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c283:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c289:	8d 50 01             	lea    0x1(%eax),%edx
f010c28c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c28f:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c295:	e8 ad 11 00 00       	call   f010d447 <isBufferingEnabled>
f010c29a:	84 c0                	test   %al,%al
f010c29c:	74 13                	je     f010c2b1 <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c29e:	83 ec 08             	sub    $0x8,%esp
f010c2a1:	ff 75 ec             	pushl  -0x14(%ebp)
f010c2a4:	ff 75 e8             	pushl  -0x18(%ebp)
f010c2a7:	e8 60 12 00 00       	call   f010d50c <__page_fault_handler_with_buffering>
f010c2ac:	83 c4 10             	add    $0x10,%esp
f010c2af:	eb 11                	jmp    f010c2c2 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c2b1:	83 ec 08             	sub    $0x8,%esp
f010c2b4:	ff 75 ec             	pushl  -0x14(%ebp)
f010c2b7:	ff 75 e8             	pushl  -0x18(%ebp)
f010c2ba:	e8 cf 11 00 00       	call   f010d48e <page_fault_handler>
f010c2bf:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c2c2:	0f 20 d8             	mov    %cr3,%eax
f010c2c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c2c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2cb:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c2ce:	90                   	nop
f010c2cf:	c9                   	leave  
f010c2d0:	c3                   	ret    
f010c2d1:	90                   	nop

f010c2d2 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c2d2:	6a 0e                	push   $0xe
f010c2d4:	e9 ed 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2d9:	90                   	nop

f010c2da <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c2da:	6a 00                	push   $0x0
f010c2dc:	6a 30                	push   $0x30
f010c2de:	e9 e3 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2e3:	90                   	nop

f010c2e4 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c2e4:	6a 08                	push   $0x8
f010c2e6:	e9 db 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2eb:	90                   	nop

f010c2ec <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c2ec:	6a 00                	push   $0x0
f010c2ee:	6a 00                	push   $0x0
f010c2f0:	e9 d1 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2f5:	90                   	nop

f010c2f6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c2f6:	6a 00                	push   $0x0
f010c2f8:	6a 01                	push   $0x1
f010c2fa:	e9 c7 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2ff:	90                   	nop

f010c300 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c300:	6a 00                	push   $0x0
f010c302:	6a 02                	push   $0x2
f010c304:	e9 bd 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c309:	90                   	nop

f010c30a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c30a:	6a 00                	push   $0x0
f010c30c:	6a 03                	push   $0x3
f010c30e:	e9 b3 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c313:	90                   	nop

f010c314 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c314:	6a 00                	push   $0x0
f010c316:	6a 04                	push   $0x4
f010c318:	e9 a9 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c31d:	90                   	nop

f010c31e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c31e:	6a 00                	push   $0x0
f010c320:	6a 05                	push   $0x5
f010c322:	e9 9f 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c327:	90                   	nop

f010c328 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c328:	6a 00                	push   $0x0
f010c32a:	6a 06                	push   $0x6
f010c32c:	e9 95 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c331:	90                   	nop

f010c332 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c332:	6a 00                	push   $0x0
f010c334:	6a 07                	push   $0x7
f010c336:	e9 8b 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c33b:	90                   	nop

f010c33c <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c33c:	6a 0a                	push   $0xa
f010c33e:	e9 83 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c343:	90                   	nop

f010c344 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c344:	6a 0b                	push   $0xb
f010c346:	eb 7e                	jmp    f010c3c6 <_alltraps>

f010c348 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c348:	6a 0c                	push   $0xc
f010c34a:	eb 7a                	jmp    f010c3c6 <_alltraps>

f010c34c <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c34c:	6a 0d                	push   $0xd
f010c34e:	eb 76                	jmp    f010c3c6 <_alltraps>

f010c350 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c350:	6a 00                	push   $0x0
f010c352:	6a 10                	push   $0x10
f010c354:	eb 70                	jmp    f010c3c6 <_alltraps>

f010c356 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c356:	6a 11                	push   $0x11
f010c358:	eb 6c                	jmp    f010c3c6 <_alltraps>

f010c35a <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c35a:	6a 00                	push   $0x0
f010c35c:	6a 12                	push   $0x12
f010c35e:	eb 66                	jmp    f010c3c6 <_alltraps>

f010c360 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c360:	6a 00                	push   $0x0
f010c362:	6a 13                	push   $0x13
f010c364:	eb 60                	jmp    f010c3c6 <_alltraps>

f010c366 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c366:	6a 00                	push   $0x0
f010c368:	6a 20                	push   $0x20
f010c36a:	eb 5a                	jmp    f010c3c6 <_alltraps>

f010c36c <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c36c:	6a 00                	push   $0x0
f010c36e:	6a 21                	push   $0x21
f010c370:	eb 54                	jmp    f010c3c6 <_alltraps>

f010c372 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c372:	6a 00                	push   $0x0
f010c374:	6a 22                	push   $0x22
f010c376:	eb 4e                	jmp    f010c3c6 <_alltraps>

f010c378 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c378:	6a 00                	push   $0x0
f010c37a:	6a 23                	push   $0x23
f010c37c:	eb 48                	jmp    f010c3c6 <_alltraps>

f010c37e <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c37e:	6a 00                	push   $0x0
f010c380:	6a 24                	push   $0x24
f010c382:	eb 42                	jmp    f010c3c6 <_alltraps>

f010c384 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c384:	6a 00                	push   $0x0
f010c386:	6a 25                	push   $0x25
f010c388:	eb 3c                	jmp    f010c3c6 <_alltraps>

f010c38a <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c38a:	6a 00                	push   $0x0
f010c38c:	6a 26                	push   $0x26
f010c38e:	eb 36                	jmp    f010c3c6 <_alltraps>

f010c390 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c390:	6a 00                	push   $0x0
f010c392:	6a 27                	push   $0x27
f010c394:	eb 30                	jmp    f010c3c6 <_alltraps>

f010c396 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c396:	6a 00                	push   $0x0
f010c398:	6a 28                	push   $0x28
f010c39a:	eb 2a                	jmp    f010c3c6 <_alltraps>

f010c39c <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c39c:	6a 00                	push   $0x0
f010c39e:	6a 29                	push   $0x29
f010c3a0:	eb 24                	jmp    f010c3c6 <_alltraps>

f010c3a2 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c3a2:	6a 00                	push   $0x0
f010c3a4:	6a 2a                	push   $0x2a
f010c3a6:	eb 1e                	jmp    f010c3c6 <_alltraps>

f010c3a8 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c3a8:	6a 00                	push   $0x0
f010c3aa:	6a 2b                	push   $0x2b
f010c3ac:	eb 18                	jmp    f010c3c6 <_alltraps>

f010c3ae <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c3ae:	6a 00                	push   $0x0
f010c3b0:	6a 2c                	push   $0x2c
f010c3b2:	eb 12                	jmp    f010c3c6 <_alltraps>

f010c3b4 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c3b4:	6a 00                	push   $0x0
f010c3b6:	6a 2d                	push   $0x2d
f010c3b8:	eb 0c                	jmp    f010c3c6 <_alltraps>

f010c3ba <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c3ba:	6a 00                	push   $0x0
f010c3bc:	6a 2e                	push   $0x2e
f010c3be:	eb 06                	jmp    f010c3c6 <_alltraps>

f010c3c0 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c3c0:	6a 00                	push   $0x0
f010c3c2:	6a 2f                	push   $0x2f
f010c3c4:	eb 00                	jmp    f010c3c6 <_alltraps>

f010c3c6 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c3c6:	1e                   	push   %ds
push %es
f010c3c7:	06                   	push   %es
pushal
f010c3c8:	60                   	pusha  

mov $(GD_KD), %ax
f010c3c9:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c3cd:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c3cf:	8e c0                	mov    %eax,%es

push %esp
f010c3d1:	54                   	push   %esp

call trap
f010c3d2:	e8 d6 fb ff ff       	call   f010bfad <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c3d7:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c3d8:	61                   	popa   
pop %es
f010c3d9:	07                   	pop    %es
pop %ds
f010c3da:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c3db:	83 c4 08             	add    $0x8,%esp

iret
f010c3de:	cf                   	iret   

f010c3df <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c3df:	55                   	push   %ebp
f010c3e0:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e5:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f010c3eb:	29 d0                	sub    %edx,%eax
f010c3ed:	c1 f8 02             	sar    $0x2,%eax
f010c3f0:	89 c2                	mov    %eax,%edx
f010c3f2:	89 d0                	mov    %edx,%eax
f010c3f4:	c1 e0 03             	shl    $0x3,%eax
f010c3f7:	01 d0                	add    %edx,%eax
f010c3f9:	c1 e0 03             	shl    $0x3,%eax
f010c3fc:	01 d0                	add    %edx,%eax
f010c3fe:	c1 e0 03             	shl    $0x3,%eax
f010c401:	01 d0                	add    %edx,%eax
f010c403:	c1 e0 03             	shl    $0x3,%eax
f010c406:	01 d0                	add    %edx,%eax
f010c408:	89 c1                	mov    %eax,%ecx
f010c40a:	c1 e1 0f             	shl    $0xf,%ecx
f010c40d:	01 c8                	add    %ecx,%eax
f010c40f:	c1 e0 03             	shl    $0x3,%eax
f010c412:	01 d0                	add    %edx,%eax
f010c414:	f7 d8                	neg    %eax
}
f010c416:	5d                   	pop    %ebp
f010c417:	c3                   	ret    

f010c418 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c418:	55                   	push   %ebp
f010c419:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c41b:	ff 75 08             	pushl  0x8(%ebp)
f010c41e:	e8 bc ff ff ff       	call   f010c3df <to_frame_number>
f010c423:	83 c4 04             	add    $0x4,%esp
f010c426:	c1 e0 0c             	shl    $0xc,%eax
}
f010c429:	c9                   	leave  
f010c42a:	c3                   	ret    

f010c42b <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c42b:	55                   	push   %ebp
f010c42c:	89 e5                	mov    %esp,%ebp
f010c42e:	83 ec 18             	sub    $0x18,%esp
f010c431:	8b 45 10             	mov    0x10(%ebp),%eax
f010c434:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c437:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c43b:	74 23                	je     f010c460 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c43d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c442:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c445:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c44b:	83 c2 5c             	add    $0x5c,%edx
f010c44e:	83 ec 04             	sub    $0x4,%esp
f010c451:	50                   	push   %eax
f010c452:	52                   	push   %edx
f010c453:	68 30 2c 13 f0       	push   $0xf0132c30
f010c458:	e8 d4 49 ff ff       	call   f0100e31 <cprintf>
f010c45d:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c460:	83 ec 04             	sub    $0x4,%esp
f010c463:	ff 75 08             	pushl  0x8(%ebp)
f010c466:	ff 75 0c             	pushl  0xc(%ebp)
f010c469:	68 39 2c 13 f0       	push   $0xf0132c39
f010c46e:	e8 be 49 ff ff       	call   f0100e31 <cprintf>
f010c473:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c476:	90                   	nop
f010c477:	c9                   	leave  
f010c478:	c3                   	ret    

f010c479 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c479:	55                   	push   %ebp
f010c47a:	89 e5                	mov    %esp,%ebp
f010c47c:	83 ec 18             	sub    $0x18,%esp
f010c47f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c482:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c485:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c489:	83 ec 08             	sub    $0x8,%esp
f010c48c:	50                   	push   %eax
f010c48d:	68 3e 2c 13 f0       	push   $0xf0132c3e
f010c492:	e8 9a 49 ff ff       	call   f0100e31 <cprintf>
f010c497:	83 c4 10             	add    $0x10,%esp
}
f010c49a:	90                   	nop
f010c49b:	c9                   	leave  
f010c49c:	c3                   	ret    

f010c49d <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c49d:	55                   	push   %ebp
f010c49e:	89 e5                	mov    %esp,%ebp
f010c4a0:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c4a3:	e8 bf 47 ff ff       	call   f0100c67 <cons_getc2>
f010c4a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c4ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c4ae:	c9                   	leave  
f010c4af:	c3                   	ret    

f010c4b0 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c4b0:	55                   	push   %ebp
f010c4b1:	89 e5                	mov    %esp,%ebp
f010c4b3:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c4b6:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c4bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c4be:	83 ec 0c             	sub    $0xc,%esp
f010c4c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c4c4:	50                   	push   %eax
f010c4c5:	e8 8f aa ff ff       	call   f0106f59 <allocate_frame>
f010c4ca:	83 c4 10             	add    $0x10,%esp
f010c4cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c4d0:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c4d4:	75 08                	jne    f010c4de <__sys_allocate_page+0x2e>
		return r ;
f010c4d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c4d9:	e9 d3 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c4de:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4e1:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c4e6:	77 0c                	ja     f010c4f4 <__sys_allocate_page+0x44>
f010c4e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4eb:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c4f0:	85 c0                	test   %eax,%eax
f010c4f2:	74 0a                	je     f010c4fe <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c4f4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c4f9:	e9 b3 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c4fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c501:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c506:	83 f8 04             	cmp    $0x4,%eax
f010c509:	74 0a                	je     f010c515 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c50b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c510:	e9 9c 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c515:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c518:	83 ec 0c             	sub    $0xc,%esp
f010c51b:	50                   	push   %eax
f010c51c:	e8 f7 fe ff ff       	call   f010c418 <to_physical_address>
f010c521:	83 c4 10             	add    $0x10,%esp
f010c524:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c527:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c52a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c52d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c530:	c1 e8 0c             	shr    $0xc,%eax
f010c533:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c536:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010c53b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c53e:	72 17                	jb     f010c557 <__sys_allocate_page+0xa7>
f010c540:	ff 75 e8             	pushl  -0x18(%ebp)
f010c543:	68 44 2c 13 f0       	push   $0xf0132c44
f010c548:	68 8d 00 00 00       	push   $0x8d
f010c54d:	68 73 2c 13 f0       	push   $0xf0132c73
f010c552:	e8 59 3c ff ff       	call   f01001b0 <_panic>
f010c557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c55a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c55f:	83 ec 04             	sub    $0x4,%esp
f010c562:	68 00 10 00 00       	push   $0x1000
f010c567:	6a 00                	push   $0x0
f010c569:	50                   	push   %eax
f010c56a:	e8 c1 26 02 00       	call   f012ec30 <memset>
f010c56f:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c572:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c575:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c578:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c57b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c581:	ff 75 0c             	pushl  0xc(%ebp)
f010c584:	51                   	push   %ecx
f010c585:	52                   	push   %edx
f010c586:	50                   	push   %eax
f010c587:	e8 68 ad ff ff       	call   f01072f4 <map_frame>
f010c58c:	83 c4 10             	add    $0x10,%esp
f010c58f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c592:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c596:	75 14                	jne    f010c5ac <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c598:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c59b:	83 ec 0c             	sub    $0xc,%esp
f010c59e:	50                   	push   %eax
f010c59f:	e8 47 ab ff ff       	call   f01070eb <decrement_references>
f010c5a4:	83 c4 10             	add    $0x10,%esp
		return r;
f010c5a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c5aa:	eb 05                	jmp    f010c5b1 <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c5ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c5b1:	c9                   	leave  
f010c5b2:	c3                   	ret    

f010c5b3 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c5b3:	55                   	push   %ebp
f010c5b4:	89 e5                	mov    %esp,%ebp
f010c5b6:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c5b9:	83 ec 04             	sub    $0x4,%esp
f010c5bc:	68 87 2c 13 f0       	push   $0xf0132c87
f010c5c1:	68 b4 00 00 00       	push   $0xb4
f010c5c6:	68 73 2c 13 f0       	push   $0xf0132c73
f010c5cb:	e8 e0 3b ff ff       	call   f01001b0 <_panic>

f010c5d0 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c5d0:	55                   	push   %ebp
f010c5d1:	89 e5                	mov    %esp,%ebp
f010c5d3:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c5d6:	83 ec 04             	sub    $0x4,%esp
f010c5d9:	68 a8 2c 13 f0       	push   $0xf0132ca8
f010c5de:	68 c5 00 00 00       	push   $0xc5
f010c5e3:	68 73 2c 13 f0       	push   $0xf0132c73
f010c5e8:	e8 c3 3b ff ff       	call   f01001b0 <_panic>

f010c5ed <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c5ed:	55                   	push   %ebp
f010c5ee:	89 e5                	mov    %esp,%ebp
f010c5f0:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c5f3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c5f8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5fe:	83 ec 04             	sub    $0x4,%esp
f010c601:	ff 75 0c             	pushl  0xc(%ebp)
f010c604:	ff 75 08             	pushl  0x8(%ebp)
f010c607:	50                   	push   %eax
f010c608:	e8 36 c2 ff ff       	call   f0108843 <calculate_required_frames>
f010c60d:	83 c4 10             	add    $0x10,%esp
}
f010c610:	c9                   	leave  
f010c611:	c3                   	ret    

f010c612 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c612:	55                   	push   %ebp
f010c613:	89 e5                	mov    %esp,%ebp
f010c615:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c618:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c61b:	83 ec 0c             	sub    $0xc,%esp
f010c61e:	50                   	push   %eax
f010c61f:	e8 40 af ff ff       	call   f0107564 <calculate_available_frames>
f010c624:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c627:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c62a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c62d:	01 d0                	add    %edx,%eax
}
f010c62f:	c9                   	leave  
f010c630:	c3                   	ret    

f010c631 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c631:	55                   	push   %ebp
f010c632:	89 e5                	mov    %esp,%ebp
f010c634:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c637:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c63a:	83 ec 0c             	sub    $0xc,%esp
f010c63d:	50                   	push   %eax
f010c63e:	e8 21 af ff ff       	call   f0107564 <calculate_available_frames>
f010c643:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c646:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c649:	c9                   	leave  
f010c64a:	c3                   	ret    

f010c64b <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c64b:	55                   	push   %ebp
f010c64c:	89 e5                	mov    %esp,%ebp
f010c64e:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c651:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c654:	83 ec 0c             	sub    $0xc,%esp
f010c657:	50                   	push   %eax
f010c658:	e8 07 af ff ff       	call   f0107564 <calculate_available_frames>
f010c65d:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c660:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c663:	c9                   	leave  
f010c664:	c3                   	ret    

f010c665 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c665:	55                   	push   %ebp
f010c666:	89 e5                	mov    %esp,%ebp
f010c668:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c66b:	83 ec 0c             	sub    $0xc,%esp
f010c66e:	ff 75 08             	pushl  0x8(%ebp)
f010c671:	e8 f0 12 02 00       	call   f012d966 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c676:	83 c4 10             	add    $0x10,%esp
}
f010c679:	c9                   	leave  
f010c67a:	c3                   	ret    

f010c67b <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c67b:	55                   	push   %ebp
f010c67c:	89 e5                	mov    %esp,%ebp
f010c67e:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c681:	e8 38 12 02 00       	call   f012d8be <scarce_memory>
}
f010c686:	90                   	nop
f010c687:	c9                   	leave  
f010c688:	c3                   	ret    

f010c689 <sys_clearFFL>:

void sys_clearFFL()
{
f010c689:	55                   	push   %ebp
f010c68a:	89 e5                	mov    %esp,%ebp
f010c68c:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c68f:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f010c694:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c697:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c69e:	eb 12                	jmp    f010c6b2 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c6a0:	83 ec 0c             	sub    $0xc,%esp
f010c6a3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c6a6:	50                   	push   %eax
f010c6a7:	e8 ad a8 ff ff       	call   f0106f59 <allocate_frame>
f010c6ac:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c6af:	ff 45 f4             	incl   -0xc(%ebp)
f010c6b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c6b8:	7c e6                	jl     f010c6a0 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c6ba:	90                   	nop
f010c6bb:	c9                   	leave  
f010c6bc:	c3                   	ret    

f010c6bd <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c6bd:	55                   	push   %ebp
f010c6be:	89 e5                	mov    %esp,%ebp
f010c6c0:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c6c3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c6c8:	83 ec 0c             	sub    $0xc,%esp
f010c6cb:	50                   	push   %eax
f010c6cc:	e8 10 7b ff ff       	call   f01041e1 <pf_calculate_allocated_pages>
f010c6d1:	83 c4 10             	add    $0x10,%esp
}
f010c6d4:	c9                   	leave  
f010c6d5:	c3                   	ret    

f010c6d6 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c6d6:	55                   	push   %ebp
f010c6d7:	89 e5                	mov    %esp,%ebp
f010c6d9:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c6dc:	e8 66 0d 00 00       	call   f010d447 <isBufferingEnabled>
f010c6e1:	84 c0                	test   %al,%al
f010c6e3:	74 19                	je     f010c6fe <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c6e5:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c6ea:	83 ec 04             	sub    $0x4,%esp
f010c6ed:	ff 75 0c             	pushl  0xc(%ebp)
f010c6f0:	ff 75 08             	pushl  0x8(%ebp)
f010c6f3:	50                   	push   %eax
f010c6f4:	e8 80 c1 ff ff       	call   f0108879 <__free_user_mem_with_buffering>
f010c6f9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c6fc:	eb 18                	jmp    f010c716 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c6fe:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c703:	83 ec 04             	sub    $0x4,%esp
f010c706:	ff 75 0c             	pushl  0xc(%ebp)
f010c709:	ff 75 08             	pushl  0x8(%ebp)
f010c70c:	50                   	push   %eax
f010c70d:	e8 59 c1 ff ff       	call   f010886b <free_user_mem>
f010c712:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c715:	90                   	nop
}
f010c716:	c9                   	leave  
f010c717:	c3                   	ret    

f010c718 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c718:	55                   	push   %ebp
f010c719:	89 e5                	mov    %esp,%ebp
f010c71b:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c71e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c723:	83 ec 04             	sub    $0x4,%esp
f010c726:	ff 75 0c             	pushl  0xc(%ebp)
f010c729:	ff 75 08             	pushl  0x8(%ebp)
f010c72c:	50                   	push   %eax
f010c72d:	e8 2b c1 ff ff       	call   f010885d <allocate_user_mem>
f010c732:	83 c4 10             	add    $0x10,%esp
	return;
f010c735:	90                   	nop
}
f010c736:	c9                   	leave  
f010c737:	c3                   	ret    

f010c738 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c738:	55                   	push   %ebp
f010c739:	89 e5                	mov    %esp,%ebp
f010c73b:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c73e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c743:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c749:	ff 75 10             	pushl  0x10(%ebp)
f010c74c:	ff 75 0c             	pushl  0xc(%ebp)
f010c74f:	ff 75 08             	pushl  0x8(%ebp)
f010c752:	50                   	push   %eax
f010c753:	e8 b7 c0 ff ff       	call   f010880f <allocate_chunk>
f010c758:	83 c4 10             	add    $0x10,%esp
	return;
f010c75b:	90                   	nop
}
f010c75c:	c9                   	leave  
f010c75d:	c3                   	ret    

f010c75e <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c75e:	55                   	push   %ebp
f010c75f:	89 e5                	mov    %esp,%ebp
f010c761:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c764:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c769:	ff 75 10             	pushl  0x10(%ebp)
f010c76c:	ff 75 0c             	pushl  0xc(%ebp)
f010c76f:	ff 75 08             	pushl  0x8(%ebp)
f010c772:	50                   	push   %eax
f010c773:	e8 1e c1 ff ff       	call   f0108896 <move_user_mem>
f010c778:	83 c4 10             	add    $0x10,%esp
	return;
f010c77b:	90                   	nop
}
f010c77c:	c9                   	leave  
f010c77d:	c3                   	ret    

f010c77e <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c77e:	55                   	push   %ebp
f010c77f:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c781:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
}
f010c786:	5d                   	pop    %ebp
f010c787:	c3                   	ret    

f010c788 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c788:	55                   	push   %ebp
f010c789:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c78b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c78e:	a3 ac be 2b f0       	mov    %eax,0xf02bbeac
}
f010c793:	90                   	nop
f010c794:	5d                   	pop    %ebp
f010c795:	c3                   	ret    

f010c796 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c796:	55                   	push   %ebp
f010c797:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c799:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c79e:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c7a4:	8b 52 38             	mov    0x38(%edx),%edx
f010c7a7:	80 e6 fd             	and    $0xfd,%dh
f010c7aa:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c7ad:	90                   	nop
f010c7ae:	5d                   	pop    %ebp
f010c7af:	c3                   	ret    

f010c7b0 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c7b0:	55                   	push   %ebp
f010c7b1:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c7b3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c7b8:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c7be:	8b 52 38             	mov    0x38(%edx),%edx
f010c7c1:	80 ce 02             	or     $0x2,%dh
f010c7c4:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c7c7:	90                   	nop
f010c7c8:	5d                   	pop    %ebp
f010c7c9:	c3                   	ret    

f010c7ca <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c7ca:	55                   	push   %ebp
f010c7cb:	89 e5                	mov    %esp,%ebp
f010c7cd:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c7d0:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c7d5:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7d8:	83 ec 04             	sub    $0x4,%esp
f010c7db:	ff 75 0c             	pushl  0xc(%ebp)
f010c7de:	ff 75 08             	pushl  0x8(%ebp)
f010c7e1:	50                   	push   %eax
f010c7e2:	e8 f8 0f 00 00       	call   f010d7df <createSemaphore>
f010c7e7:	83 c4 10             	add    $0x10,%esp
}
f010c7ea:	c9                   	leave  
f010c7eb:	c3                   	ret    

f010c7ec <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c7ec:	55                   	push   %ebp
f010c7ed:	89 e5                	mov    %esp,%ebp
f010c7ef:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c7f2:	83 ec 08             	sub    $0x8,%esp
f010c7f5:	ff 75 0c             	pushl  0xc(%ebp)
f010c7f8:	ff 75 08             	pushl  0x8(%ebp)
f010c7fb:	e8 fc 0f 00 00       	call   f010d7fc <waitSemaphore>
f010c800:	83 c4 10             	add    $0x10,%esp
}
f010c803:	90                   	nop
f010c804:	c9                   	leave  
f010c805:	c3                   	ret    

f010c806 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c806:	55                   	push   %ebp
f010c807:	89 e5                	mov    %esp,%ebp
f010c809:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c80c:	83 ec 08             	sub    $0x8,%esp
f010c80f:	ff 75 0c             	pushl  0xc(%ebp)
f010c812:	ff 75 08             	pushl  0x8(%ebp)
f010c815:	e8 ff 0f 00 00       	call   f010d819 <signalSemaphore>
f010c81a:	83 c4 10             	add    $0x10,%esp
}
f010c81d:	90                   	nop
f010c81e:	c9                   	leave  
f010c81f:	c3                   	ret    

f010c820 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c820:	55                   	push   %ebp
f010c821:	89 e5                	mov    %esp,%ebp
f010c823:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c826:	83 ec 08             	sub    $0x8,%esp
f010c829:	ff 75 0c             	pushl  0xc(%ebp)
f010c82c:	ff 75 08             	pushl  0x8(%ebp)
f010c82f:	e8 51 0e 00 00       	call   f010d685 <get_semaphore_object_ID>
f010c834:	83 c4 10             	add    $0x10,%esp
f010c837:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c83a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c83e:	78 06                	js     f010c846 <sys_getSemaphoreValue+0x26>
f010c840:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c844:	7e 19                	jle    f010c85f <sys_getSemaphoreValue+0x3f>
f010c846:	68 c8 2c 13 f0       	push   $0xf0132cc8
f010c84b:	68 ed 2c 13 f0       	push   $0xf0132ced
f010c850:	68 4d 01 00 00       	push   $0x14d
f010c855:	68 73 2c 13 f0       	push   $0xf0132c73
f010c85a:	e8 51 39 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010c85f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c862:	89 d0                	mov    %edx,%eax
f010c864:	c1 e0 02             	shl    $0x2,%eax
f010c867:	01 d0                	add    %edx,%eax
f010c869:	01 c0                	add    %eax,%eax
f010c86b:	01 d0                	add    %edx,%eax
f010c86d:	01 c0                	add    %eax,%eax
f010c86f:	01 d0                	add    %edx,%eax
f010c871:	c1 e0 02             	shl    $0x2,%eax
f010c874:	05 f4 9a 2b f0       	add    $0xf02b9af4,%eax
f010c879:	8b 00                	mov    (%eax),%eax
}
f010c87b:	c9                   	leave  
f010c87c:	c3                   	ret    

f010c87d <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c87d:	55                   	push   %ebp
f010c87e:	89 e5                	mov    %esp,%ebp
f010c880:	83 ec 18             	sub    $0x18,%esp
f010c883:	8b 45 10             	mov    0x10(%ebp),%eax
f010c886:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c889:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c88d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c892:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c895:	83 ec 0c             	sub    $0xc,%esp
f010c898:	ff 75 14             	pushl  0x14(%ebp)
f010c89b:	52                   	push   %edx
f010c89c:	ff 75 0c             	pushl  0xc(%ebp)
f010c89f:	ff 75 08             	pushl  0x8(%ebp)
f010c8a2:	50                   	push   %eax
f010c8a3:	e8 4d b2 ff ff       	call   f0107af5 <createSharedObject>
f010c8a8:	83 c4 20             	add    $0x20,%esp
}
f010c8ab:	c9                   	leave  
f010c8ac:	c3                   	ret    

f010c8ad <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c8ad:	55                   	push   %ebp
f010c8ae:	89 e5                	mov    %esp,%ebp
f010c8b0:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c8b3:	83 ec 08             	sub    $0x8,%esp
f010c8b6:	ff 75 0c             	pushl  0xc(%ebp)
f010c8b9:	ff 75 08             	pushl  0x8(%ebp)
f010c8bc:	e8 57 b2 ff ff       	call   f0107b18 <getSizeOfSharedObject>
f010c8c1:	83 c4 10             	add    $0x10,%esp
}
f010c8c4:	c9                   	leave  
f010c8c5:	c3                   	ret    

f010c8c6 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c8c6:	55                   	push   %ebp
f010c8c7:	89 e5                	mov    %esp,%ebp
f010c8c9:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c8cc:	83 ec 04             	sub    $0x4,%esp
f010c8cf:	ff 75 10             	pushl  0x10(%ebp)
f010c8d2:	ff 75 0c             	pushl  0xc(%ebp)
f010c8d5:	ff 75 08             	pushl  0x8(%ebp)
f010c8d8:	e8 58 b2 ff ff       	call   f0107b35 <getSharedObject>
f010c8dd:	83 c4 10             	add    $0x10,%esp
}
f010c8e0:	c9                   	leave  
f010c8e1:	c3                   	ret    

f010c8e2 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c8e2:	55                   	push   %ebp
f010c8e3:	89 e5                	mov    %esp,%ebp
f010c8e5:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c8e8:	83 ec 08             	sub    $0x8,%esp
f010c8eb:	ff 75 0c             	pushl  0xc(%ebp)
f010c8ee:	ff 75 08             	pushl  0x8(%ebp)
f010c8f1:	e8 5c b2 ff ff       	call   f0107b52 <freeSharedObject>
f010c8f6:	83 c4 10             	add    $0x10,%esp
}
f010c8f9:	c9                   	leave  
f010c8fa:	c3                   	ret    

f010c8fb <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c8fb:	55                   	push   %ebp
f010c8fc:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c8fe:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c903:	5d                   	pop    %ebp
f010c904:	c3                   	ret    

f010c905 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c905:	55                   	push   %ebp
f010c906:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c908:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c90d:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c910:	5d                   	pop    %ebp
f010c911:	c3                   	ret    

f010c912 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c912:	55                   	push   %ebp
f010c913:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c915:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c91a:	89 c2                	mov    %eax,%edx
f010c91c:	a1 30 32 25 f0       	mov    0xf0253230,%eax
f010c921:	29 c2                	sub    %eax,%edx
f010c923:	89 d0                	mov    %edx,%eax
f010c925:	c1 f8 05             	sar    $0x5,%eax
f010c928:	89 c2                	mov    %eax,%edx
f010c92a:	89 d0                	mov    %edx,%eax
f010c92c:	c1 e0 03             	shl    $0x3,%eax
f010c92f:	01 d0                	add    %edx,%eax
f010c931:	01 c0                	add    %eax,%eax
f010c933:	01 d0                	add    %edx,%eax
f010c935:	c1 e0 06             	shl    $0x6,%eax
f010c938:	01 d0                	add    %edx,%eax
f010c93a:	89 c1                	mov    %eax,%ecx
f010c93c:	c1 e1 04             	shl    $0x4,%ecx
f010c93f:	01 c8                	add    %ecx,%eax
f010c941:	c1 e0 03             	shl    $0x3,%eax
f010c944:	01 d0                	add    %edx,%eax
f010c946:	01 c0                	add    %eax,%eax
f010c948:	01 d0                	add    %edx,%eax
f010c94a:	89 c1                	mov    %eax,%ecx
f010c94c:	c1 e1 04             	shl    $0x4,%ecx
f010c94f:	01 c8                	add    %ecx,%eax
f010c951:	c1 e0 03             	shl    $0x3,%eax
f010c954:	01 d0                	add    %edx,%eax
f010c956:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c95d:	01 d0                	add    %edx,%eax
}
f010c95f:	5d                   	pop    %ebp
f010c960:	c3                   	ret    

f010c961 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c961:	55                   	push   %ebp
f010c962:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c964:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c969:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c96c:	5d                   	pop    %ebp
f010c96d:	c3                   	ret    

f010c96e <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c96e:	55                   	push   %ebp
f010c96f:	89 e5                	mov    %esp,%ebp
f010c971:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c974:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c978:	75 0a                	jne    f010c984 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c97a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c97f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c982:	eb 22                	jmp    f010c9a6 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c984:	83 ec 04             	sub    $0x4,%esp
f010c987:	6a 00                	push   $0x0
f010c989:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c98c:	50                   	push   %eax
f010c98d:	ff 75 08             	pushl  0x8(%ebp)
f010c990:	e8 6d cc ff ff       	call   f0109602 <envid2env>
f010c995:	83 c4 10             	add    $0x10,%esp
f010c998:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c99b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c99f:	79 05                	jns    f010c9a6 <sys_destroy_env+0x38>
	{
		return r;
f010c9a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9a4:	eb 5e                	jmp    f010ca04 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c9a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c9a9:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9ae:	39 c2                	cmp    %eax,%edx
f010c9b0:	75 1b                	jne    f010c9cd <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c9b2:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	83 ec 08             	sub    $0x8,%esp
f010c9bd:	50                   	push   %eax
f010c9be:	68 02 2d 13 f0       	push   $0xf0132d02
f010c9c3:	e8 69 44 ff ff       	call   f0100e31 <cprintf>
f010c9c8:	83 c4 10             	add    $0x10,%esp
f010c9cb:	eb 20                	jmp    f010c9ed <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c9cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9d0:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c9d3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9d8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9db:	83 ec 04             	sub    $0x4,%esp
f010c9de:	52                   	push   %edx
f010c9df:	50                   	push   %eax
f010c9e0:	68 1d 2d 13 f0       	push   $0xf0132d1d
f010c9e5:	e8 47 44 ff ff       	call   f0100e31 <cprintf>
f010c9ea:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c9ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9f3:	83 ec 0c             	sub    $0xc,%esp
f010c9f6:	50                   	push   %eax
f010c9f7:	e8 49 88 ff ff       	call   f0105245 <sched_kill_env>
f010c9fc:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ca04:	c9                   	leave  
f010ca05:	c3                   	ret    

f010ca06 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ca06:	55                   	push   %ebp
f010ca07:	89 e5                	mov    %esp,%ebp
f010ca09:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ca0c:	e8 d2 cb ff ff       	call   f01095e3 <env_exit>
	//env_run_cmd_prmpt();
}
f010ca11:	90                   	nop
f010ca12:	c9                   	leave  
f010ca13:	c3                   	ret    

f010ca14 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ca14:	55                   	push   %ebp
f010ca15:	89 e5                	mov    %esp,%ebp
f010ca17:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ca1a:	ff 75 14             	pushl  0x14(%ebp)
f010ca1d:	ff 75 10             	pushl  0x10(%ebp)
f010ca20:	ff 75 0c             	pushl  0xc(%ebp)
f010ca23:	ff 75 08             	pushl  0x8(%ebp)
f010ca26:	e8 d4 be ff ff       	call   f01088ff <env_create>
f010ca2b:	83 c4 10             	add    $0x10,%esp
f010ca2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ca31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca35:	75 07                	jne    f010ca3e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ca37:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ca3c:	eb 14                	jmp    f010ca52 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ca3e:	83 ec 0c             	sub    $0xc,%esp
f010ca41:	ff 75 f4             	pushl  -0xc(%ebp)
f010ca44:	e8 1e 85 ff ff       	call   f0104f67 <sched_new_env>
f010ca49:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ca4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca4f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ca52:	c9                   	leave  
f010ca53:	c3                   	ret    

f010ca54 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ca54:	55                   	push   %ebp
f010ca55:	89 e5                	mov    %esp,%ebp
f010ca57:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ca5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca5d:	83 ec 0c             	sub    $0xc,%esp
f010ca60:	50                   	push   %eax
f010ca61:	e8 1e 85 ff ff       	call   f0104f84 <sched_run_env>
f010ca66:	83 c4 10             	add    $0x10,%esp
}
f010ca69:	90                   	nop
f010ca6a:	c9                   	leave  
f010ca6b:	c3                   	ret    

f010ca6c <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ca6c:	55                   	push   %ebp
f010ca6d:	89 e5                	mov    %esp,%ebp
f010ca6f:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ca72:	0f 31                	rdtsc  
f010ca74:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ca77:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ca7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca80:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ca83:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ca86:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ca89:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ca8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ca8f:	89 01                	mov    %eax,(%ecx)
f010ca91:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ca94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca97:	c9                   	leave  
f010ca98:	c2 04 00             	ret    $0x4

f010ca9b <sys_rcr2>:

uint32 sys_rcr2()
{
f010ca9b:	55                   	push   %ebp
f010ca9c:	89 e5                	mov    %esp,%ebp
f010ca9e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010caa1:	0f 20 d0             	mov    %cr2,%eax
f010caa4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010caa7:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010caaa:	90                   	nop
}
f010caab:	c9                   	leave  
f010caac:	c3                   	ret    

f010caad <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010caad:	55                   	push   %ebp
f010caae:	89 e5                	mov    %esp,%ebp
f010cab0:	83 ec 04             	sub    $0x4,%esp
f010cab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010cab6:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cab9:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cabc:	a2 e8 3a 25 f0       	mov    %al,0xf0253ae8
}
f010cac1:	90                   	nop
f010cac2:	c9                   	leave  
f010cac3:	c3                   	ret    

f010cac4 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010cac4:	55                   	push   %ebp
f010cac5:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010cac7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010cacc:	5d                   	pop    %ebp
f010cacd:	c3                   	ret    

f010cace <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010cace:	55                   	push   %ebp
f010cacf:	89 e5                	mov    %esp,%ebp
f010cad1:	56                   	push   %esi
f010cad2:	53                   	push   %ebx
f010cad3:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010cad6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
f010cada:	0f 87 0f 04 00 00    	ja     f010ceef <syscall+0x421>
f010cae0:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae3:	c1 e0 02             	shl    $0x2,%eax
f010cae6:	05 38 2d 13 f0       	add    $0xf0132d38,%eax
f010caeb:	8b 00                	mov    (%eax),%eax
f010caed:	ff e0                	jmp    *%eax
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here

	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010caef:	8b 45 14             	mov    0x14(%ebp),%eax
f010caf2:	0f b6 d0             	movzbl %al,%edx
f010caf5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010caf8:	83 ec 04             	sub    $0x4,%esp
f010cafb:	52                   	push   %edx
f010cafc:	ff 75 10             	pushl  0x10(%ebp)
f010caff:	50                   	push   %eax
f010cb00:	e8 26 f9 ff ff       	call   f010c42b <sys_cputs>
f010cb05:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb08:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb0d:	e9 e2 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cb12:	e8 86 f9 ff ff       	call   f010c49d <sys_cgetc>
f010cb17:	e9 d8 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cb1c:	83 ec 08             	sub    $0x8,%esp
f010cb1f:	ff 75 10             	pushl  0x10(%ebp)
f010cb22:	ff 75 0c             	pushl  0xc(%ebp)
f010cb25:	e8 c3 fa ff ff       	call   f010c5ed <sys_calculate_required_frames>
f010cb2a:	83 c4 10             	add    $0x10,%esp
f010cb2d:	e9 c2 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cb32:	e8 db fa ff ff       	call   f010c612 <sys_calculate_free_frames>
f010cb37:	e9 b8 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cb3c:	e8 f0 fa ff ff       	call   f010c631 <sys_calculate_modified_frames>
f010cb41:	e9 ae 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cb46:	e8 00 fb ff ff       	call   f010c64b <sys_calculate_notmod_frames>
f010cb4b:	e9 a4 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cb50:	e8 68 fb ff ff       	call   f010c6bd <sys_pf_calculate_allocated_pages>
f010cb55:	e9 9a 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cb5a:	83 ec 0c             	sub    $0xc,%esp
f010cb5d:	ff 75 0c             	pushl  0xc(%ebp)
f010cb60:	e8 00 fb ff ff       	call   f010c665 <sys_calculate_pages_tobe_removed_ready_exit>
f010cb65:	83 c4 10             	add    $0x10,%esp
f010cb68:	e9 87 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cb6d:	e8 09 fb ff ff       	call   f010c67b <sys_scarce_memory>
		return 0;
f010cb72:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb77:	e9 78 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cb7c:	83 ec 04             	sub    $0x4,%esp
f010cb7f:	ff 75 14             	pushl  0x14(%ebp)
f010cb82:	ff 75 10             	pushl  0x10(%ebp)
f010cb85:	ff 75 0c             	pushl  0xc(%ebp)
f010cb88:	e8 ab fb ff ff       	call   f010c738 <sys_allocate_chunk>
f010cb8d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb90:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb95:	e9 5a 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cb9a:	8b 55 10             	mov    0x10(%ebp),%edx
f010cb9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cba0:	83 ec 08             	sub    $0x8,%esp
f010cba3:	52                   	push   %edx
f010cba4:	50                   	push   %eax
f010cba5:	e8 06 f9 ff ff       	call   f010c4b0 <__sys_allocate_page>
f010cbaa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cbad:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbb2:	e9 3d 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cbb7:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cbba:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cbbd:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cbc0:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbc6:	83 ec 0c             	sub    $0xc,%esp
f010cbc9:	56                   	push   %esi
f010cbca:	53                   	push   %ebx
f010cbcb:	51                   	push   %ecx
f010cbcc:	52                   	push   %edx
f010cbcd:	50                   	push   %eax
f010cbce:	e8 e0 f9 ff ff       	call   f010c5b3 <__sys_map_frame>
f010cbd3:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cbd6:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbdb:	e9 14 03 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cbe0:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbe3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbe6:	83 ec 08             	sub    $0x8,%esp
f010cbe9:	52                   	push   %edx
f010cbea:	50                   	push   %eax
f010cbeb:	e8 e0 f9 ff ff       	call   f010c5d0 <__sys_unmap_frame>
f010cbf0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cbf3:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbf8:	e9 f7 02 00 00       	jmp    f010cef4 <syscall+0x426>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cbfd:	e8 94 fb ff ff       	call   f010c796 <sys_disable_interrupt>
		return 0;
f010cc02:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc07:	e9 e8 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cc0c:	e8 9f fb ff ff       	call   f010c7b0 <sys_enable_interrupt>
		return 0;
f010cc11:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc16:	e9 d9 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cc1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc1e:	0f be c0             	movsbl %al,%eax
f010cc21:	83 ec 0c             	sub    $0xc,%esp
f010cc24:	50                   	push   %eax
f010cc25:	e8 4f f8 ff ff       	call   f010c479 <sys_cputc>
f010cc2a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc2d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc32:	e9 bd 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cc37:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc3a:	0f be c0             	movsbl %al,%eax
f010cc3d:	83 ec 0c             	sub    $0xc,%esp
f010cc40:	50                   	push   %eax
f010cc41:	e8 43 fa ff ff       	call   f010c689 <sys_clearFFL>
f010cc46:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc49:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc4e:	e9 a1 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cc53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc56:	83 ec 08             	sub    $0x8,%esp
f010cc59:	ff 75 10             	pushl  0x10(%ebp)
f010cc5c:	50                   	push   %eax
f010cc5d:	e8 68 fb ff ff       	call   f010c7ca <sys_createSemaphore>
f010cc62:	83 c4 10             	add    $0x10,%esp
f010cc65:	e9 8a 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cc6a:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc70:	83 ec 08             	sub    $0x8,%esp
f010cc73:	52                   	push   %edx
f010cc74:	50                   	push   %eax
f010cc75:	e8 72 fb ff ff       	call   f010c7ec <sys_waitSemaphore>
f010cc7a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc7d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc82:	e9 6d 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cc87:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc8d:	83 ec 08             	sub    $0x8,%esp
f010cc90:	52                   	push   %edx
f010cc91:	50                   	push   %eax
f010cc92:	e8 6f fb ff ff       	call   f010c806 <sys_signalSemaphore>
f010cc97:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc9a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc9f:	e9 50 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010cca4:	8b 55 10             	mov    0x10(%ebp),%edx
f010cca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccaa:	83 ec 08             	sub    $0x8,%esp
f010ccad:	52                   	push   %edx
f010ccae:	50                   	push   %eax
f010ccaf:	e8 6c fb ff ff       	call   f010c820 <sys_getSemaphoreValue>
f010ccb4:	83 c4 10             	add    $0x10,%esp
f010ccb7:	e9 38 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010ccbc:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010ccbf:	8b 45 14             	mov    0x14(%ebp),%eax
f010ccc2:	0f b6 d0             	movzbl %al,%edx
f010ccc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccc8:	51                   	push   %ecx
f010ccc9:	52                   	push   %edx
f010ccca:	ff 75 10             	pushl  0x10(%ebp)
f010cccd:	50                   	push   %eax
f010ccce:	e8 aa fb ff ff       	call   f010c87d <sys_createSharedObject>
f010ccd3:	83 c4 10             	add    $0x10,%esp
f010ccd6:	e9 19 02 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010ccdb:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ccde:	8b 55 10             	mov    0x10(%ebp),%edx
f010cce1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cce4:	83 ec 04             	sub    $0x4,%esp
f010cce7:	51                   	push   %ecx
f010cce8:	52                   	push   %edx
f010cce9:	50                   	push   %eax
f010ccea:	e8 d7 fb ff ff       	call   f010c8c6 <sys_getSharedObject>
f010ccef:	83 c4 10             	add    $0x10,%esp
f010ccf2:	e9 fd 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010ccf7:	8b 55 10             	mov    0x10(%ebp),%edx
f010ccfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccfd:	83 ec 08             	sub    $0x8,%esp
f010cd00:	52                   	push   %edx
f010cd01:	50                   	push   %eax
f010cd02:	e8 db fb ff ff       	call   f010c8e2 <sys_freeSharedObject>
f010cd07:	83 c4 10             	add    $0x10,%esp
f010cd0a:	e9 e5 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010cd0f:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd12:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd15:	83 ec 08             	sub    $0x8,%esp
f010cd18:	52                   	push   %edx
f010cd19:	50                   	push   %eax
f010cd1a:	e8 8e fb ff ff       	call   f010c8ad <sys_getSizeOfSharedObject>
f010cd1f:	83 c4 10             	add    $0x10,%esp
f010cd22:	e9 cd 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010cd27:	e8 cf fb ff ff       	call   f010c8fb <sys_getMaxShares>
f010cd2c:	e9 c3 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cd31:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd34:	ff 75 18             	pushl  0x18(%ebp)
f010cd37:	ff 75 14             	pushl  0x14(%ebp)
f010cd3a:	ff 75 10             	pushl  0x10(%ebp)
f010cd3d:	50                   	push   %eax
f010cd3e:	e8 d1 fc ff ff       	call   f010ca14 <sys_create_env>
f010cd43:	83 c4 10             	add    $0x10,%esp
f010cd46:	e9 a9 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010cd4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd4e:	83 ec 0c             	sub    $0xc,%esp
f010cd51:	50                   	push   %eax
f010cd52:	e8 fd fc ff ff       	call   f010ca54 <sys_run_env>
f010cd57:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd5a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd5f:	e9 90 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cd64:	e8 a9 fb ff ff       	call   f010c912 <sys_getenvindex>
f010cd69:	e9 86 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cd6e:	e8 92 fb ff ff       	call   f010c905 <sys_getenvid>
f010cd73:	e9 7c 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cd78:	e8 e4 fb ff ff       	call   f010c961 <sys_getparentenvid>
f010cd7d:	e9 72 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010cd82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd85:	83 ec 0c             	sub    $0xc,%esp
f010cd88:	50                   	push   %eax
f010cd89:	e8 e0 fb ff ff       	call   f010c96e <sys_destroy_env>
f010cd8e:	83 c4 10             	add    $0x10,%esp
f010cd91:	e9 5e 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010cd96:	e8 6b fc ff ff       	call   f010ca06 <sys_exit_env>
		return 0;
f010cd9b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cda0:	e9 4f 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010cda5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cda8:	83 ec 0c             	sub    $0xc,%esp
f010cdab:	50                   	push   %eax
f010cdac:	e8 bb fc ff ff       	call   f010ca6c <sys_get_virtual_time>
f010cdb1:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010cdb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010cdba:	8b 45 10             	mov    0x10(%ebp),%eax
f010cdbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010cdc0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cdc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdc6:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010cdc8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cdcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdce:	89 10                	mov    %edx,(%eax)
		return 0;
f010cdd0:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdd5:	e9 1a 01 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010cdda:	83 ec 04             	sub    $0x4,%esp
f010cddd:	ff 75 14             	pushl  0x14(%ebp)
f010cde0:	ff 75 10             	pushl  0x10(%ebp)
f010cde3:	ff 75 0c             	pushl  0xc(%ebp)
f010cde6:	e8 73 f9 ff ff       	call   f010c75e <sys_move_user_mem>
f010cdeb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdee:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdf3:	e9 fc 00 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010cdf8:	e8 9e fc ff ff       	call   f010ca9b <sys_rcr2>
f010cdfd:	e9 f2 00 00 00       	jmp    f010cef4 <syscall+0x426>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ce02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce05:	0f b6 c0             	movzbl %al,%eax
f010ce08:	83 ec 0c             	sub    $0xc,%esp
f010ce0b:	50                   	push   %eax
f010ce0c:	e8 9c fc ff ff       	call   f010caad <sys_bypassPageFault>
f010ce11:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce14:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce19:	e9 d6 00 00 00       	jmp    f010cef4 <syscall+0x426>

	case SYS_rsttst:
		rsttst();
f010ce1e:	e8 63 08 02 00       	call   f012d686 <rsttst>
		return 0;
f010ce23:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce28:	e9 c7 00 00 00       	jmp    f010cef4 <syscall+0x426>
	case SYS_inctst:
		inctst();
f010ce2d:	e8 64 08 02 00       	call   f012d696 <inctst>
		return 0;
f010ce32:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce37:	e9 b8 00 00 00       	jmp    f010cef4 <syscall+0x426>
	case SYS_chktst:
		chktst(a1);
f010ce3c:	83 ec 0c             	sub    $0xc,%esp
f010ce3f:	ff 75 0c             	pushl  0xc(%ebp)
f010ce42:	e8 4e 09 02 00       	call   f012d795 <chktst>
f010ce47:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce4a:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce4f:	e9 a0 00 00 00       	jmp    f010cef4 <syscall+0x426>
	case SYS_gettst:
		return gettst();
f010ce54:	e8 4e 08 02 00       	call   f012d6a7 <gettst>
f010ce59:	e9 96 00 00 00       	jmp    f010cef4 <syscall+0x426>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010ce5e:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010ce61:	8b 45 18             	mov    0x18(%ebp),%eax
f010ce64:	0f be c0             	movsbl %al,%eax
f010ce67:	83 ec 0c             	sub    $0xc,%esp
f010ce6a:	52                   	push   %edx
f010ce6b:	50                   	push   %eax
f010ce6c:	ff 75 14             	pushl  0x14(%ebp)
f010ce6f:	ff 75 10             	pushl  0x10(%ebp)
f010ce72:	ff 75 0c             	pushl  0xc(%ebp)
f010ce75:	e8 37 08 02 00       	call   f012d6b1 <tst>
f010ce7a:	83 c4 20             	add    $0x20,%esp
		return 0;
f010ce7d:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce82:	eb 70                	jmp    f010cef4 <syscall+0x426>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010ce84:	e8 f5 f8 ff ff       	call   f010c77e <sys_get_heap_strategy>
f010ce89:	eb 69                	jmp    f010cef4 <syscall+0x426>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010ce8b:	83 ec 0c             	sub    $0xc,%esp
f010ce8e:	ff 75 0c             	pushl  0xc(%ebp)
f010ce91:	e8 f2 f8 ff ff       	call   f010c788 <sys_set_uheap_strategy>
f010ce96:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce99:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce9e:	eb 54                	jmp    f010cef4 <syscall+0x426>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010cea0:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cea3:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cea6:	8b 55 10             	mov    0x10(%ebp),%edx
f010cea9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceac:	53                   	push   %ebx
f010cead:	51                   	push   %ecx
f010ceae:	52                   	push   %edx
f010ceaf:	50                   	push   %eax
f010ceb0:	e8 a3 46 00 00       	call   f0111558 <sys_check_LRU_lists>
f010ceb5:	83 c4 10             	add    $0x10,%esp
f010ceb8:	eb 3a                	jmp    f010cef4 <syscall+0x426>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010ceba:	8b 55 10             	mov    0x10(%ebp),%edx
f010cebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cec0:	83 ec 08             	sub    $0x8,%esp
f010cec3:	52                   	push   %edx
f010cec4:	50                   	push   %eax
f010cec5:	e8 10 48 00 00       	call   f01116da <sys_check_LRU_lists_free>
f010ceca:	83 c4 10             	add    $0x10,%esp
f010cecd:	eb 25                	jmp    f010cef4 <syscall+0x426>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010cecf:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010ced2:	8b 55 10             	mov    0x10(%ebp),%edx
f010ced5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ced8:	51                   	push   %ecx
f010ced9:	ff 75 14             	pushl  0x14(%ebp)
f010cedc:	52                   	push   %edx
f010cedd:	50                   	push   %eax
f010cede:	e8 62 49 00 00       	call   f0111845 <sys_check_WS_list>
f010cee3:	83 c4 10             	add    $0x10,%esp
f010cee6:	eb 0c                	jmp    f010cef4 <syscall+0x426>

	case NSYSCALLS:
		return 	-E_INVAL;
f010cee8:	b8 03 00 00 00       	mov    $0x3,%eax
f010ceed:	eb 05                	jmp    f010cef4 <syscall+0x426>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010ceef:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cef4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010cef7:	5b                   	pop    %ebx
f010cef8:	5e                   	pop    %esi
f010cef9:	5d                   	pop    %ebp
f010cefa:	c3                   	ret    

f010cefb <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010cefb:	55                   	push   %ebp
f010cefc:	89 e5                	mov    %esp,%ebp
f010cefe:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010cf01:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf04:	8b 00                	mov    (%eax),%eax
f010cf06:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cf09:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf0c:	8b 00                	mov    (%eax),%eax
f010cf0e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cf11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010cf18:	e9 ca 00 00 00       	jmp    f010cfe7 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010cf1d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cf20:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cf23:	01 d0                	add    %edx,%eax
f010cf25:	89 c2                	mov    %eax,%edx
f010cf27:	c1 ea 1f             	shr    $0x1f,%edx
f010cf2a:	01 d0                	add    %edx,%eax
f010cf2c:	d1 f8                	sar    %eax
f010cf2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010cf31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cf34:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cf37:	eb 03                	jmp    f010cf3c <stab_binsearch+0x41>
			m--;
f010cf39:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cf3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf3f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cf42:	7c 1e                	jl     f010cf62 <stab_binsearch+0x67>
f010cf44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf47:	89 d0                	mov    %edx,%eax
f010cf49:	01 c0                	add    %eax,%eax
f010cf4b:	01 d0                	add    %edx,%eax
f010cf4d:	c1 e0 02             	shl    $0x2,%eax
f010cf50:	89 c2                	mov    %eax,%edx
f010cf52:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf55:	01 d0                	add    %edx,%eax
f010cf57:	8a 40 04             	mov    0x4(%eax),%al
f010cf5a:	0f b6 c0             	movzbl %al,%eax
f010cf5d:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cf60:	75 d7                	jne    f010cf39 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010cf62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf65:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cf68:	7d 09                	jge    f010cf73 <stab_binsearch+0x78>
			l = true_m + 1;
f010cf6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cf6d:	40                   	inc    %eax
f010cf6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010cf71:	eb 74                	jmp    f010cfe7 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010cf73:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010cf7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf7d:	89 d0                	mov    %edx,%eax
f010cf7f:	01 c0                	add    %eax,%eax
f010cf81:	01 d0                	add    %edx,%eax
f010cf83:	c1 e0 02             	shl    $0x2,%eax
f010cf86:	89 c2                	mov    %eax,%edx
f010cf88:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf8b:	01 d0                	add    %edx,%eax
f010cf8d:	8b 40 08             	mov    0x8(%eax),%eax
f010cf90:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cf93:	73 11                	jae    f010cfa6 <stab_binsearch+0xab>
			*region_left = m;
f010cf95:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf98:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf9b:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010cf9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfa0:	40                   	inc    %eax
f010cfa1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cfa4:	eb 41                	jmp    f010cfe7 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010cfa6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cfa9:	89 d0                	mov    %edx,%eax
f010cfab:	01 c0                	add    %eax,%eax
f010cfad:	01 d0                	add    %edx,%eax
f010cfaf:	c1 e0 02             	shl    $0x2,%eax
f010cfb2:	89 c2                	mov    %eax,%edx
f010cfb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfb7:	01 d0                	add    %edx,%eax
f010cfb9:	8b 40 08             	mov    0x8(%eax),%eax
f010cfbc:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cfbf:	76 14                	jbe    f010cfd5 <stab_binsearch+0xda>
			*region_right = m - 1;
f010cfc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfc4:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cfc7:	8b 45 10             	mov    0x10(%ebp),%eax
f010cfca:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010cfcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfcf:	48                   	dec    %eax
f010cfd0:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cfd3:	eb 12                	jmp    f010cfe7 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010cfd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cfdb:	89 10                	mov    %edx,(%eax)
			l = m;
f010cfdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfe0:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010cfe3:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010cfe7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cfea:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010cfed:	0f 8e 2a ff ff ff    	jle    f010cf1d <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010cff3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cff7:	75 0f                	jne    f010d008 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010cff9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cffc:	8b 00                	mov    (%eax),%eax
f010cffe:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d001:	8b 45 10             	mov    0x10(%ebp),%eax
f010d004:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d006:	eb 3d                	jmp    f010d045 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d008:	8b 45 10             	mov    0x10(%ebp),%eax
f010d00b:	8b 00                	mov    (%eax),%eax
f010d00d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d010:	eb 03                	jmp    f010d015 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d012:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d015:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d018:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d01a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d01d:	7d 1e                	jge    f010d03d <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d01f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d022:	89 d0                	mov    %edx,%eax
f010d024:	01 c0                	add    %eax,%eax
f010d026:	01 d0                	add    %edx,%eax
f010d028:	c1 e0 02             	shl    $0x2,%eax
f010d02b:	89 c2                	mov    %eax,%edx
f010d02d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d030:	01 d0                	add    %edx,%eax
f010d032:	8a 40 04             	mov    0x4(%eax),%al
f010d035:	0f b6 c0             	movzbl %al,%eax
f010d038:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d03b:	75 d5                	jne    f010d012 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d03d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d040:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d043:	89 10                	mov    %edx,(%eax)
	}
}
f010d045:	90                   	nop
f010d046:	c9                   	leave  
f010d047:	c3                   	ret    

f010d048 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d048:	55                   	push   %ebp
f010d049:	89 e5                	mov    %esp,%ebp
f010d04b:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d04e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d051:	c7 00 f8 2d 13 f0    	movl   $0xf0132df8,(%eax)
	info->eip_line = 0;
f010d057:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d05a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d061:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d064:	c7 40 08 f8 2d 13 f0 	movl   $0xf0132df8,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d06b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d06e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d075:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d078:	8b 55 08             	mov    0x8(%ebp),%edx
f010d07b:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d07e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d081:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d088:	8b 45 08             	mov    0x8(%ebp),%eax
f010d08b:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d090:	76 1e                	jbe    f010d0b0 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d092:	c7 45 f4 c0 ae 13 f0 	movl   $0xf013aec0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d099:	c7 45 f0 1c 64 17 f0 	movl   $0xf017641c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d0a0:	c7 45 ec 1d 64 17 f0 	movl   $0xf017641d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d0a7:	c7 45 e8 7a 30 18 f0 	movl   $0xf018307a,-0x18(%ebp)
f010d0ae:	eb 2a                	jmp    f010d0da <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d0b0:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d0b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d0ba:	8b 00                	mov    (%eax),%eax
f010d0bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d0bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d0c2:	8b 40 04             	mov    0x4(%eax),%eax
f010d0c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d0c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d0cb:	8b 40 08             	mov    0x8(%eax),%eax
f010d0ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d0d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d0d4:	8b 40 0c             	mov    0xc(%eax),%eax
f010d0d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d0da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d0e0:	76 0a                	jbe    f010d0ec <debuginfo_eip+0xa4>
f010d0e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0e5:	48                   	dec    %eax
f010d0e6:	8a 00                	mov    (%eax),%al
f010d0e8:	84 c0                	test   %al,%al
f010d0ea:	74 0a                	je     f010d0f6 <debuginfo_eip+0xae>
		return -1;
f010d0ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d0f1:	e9 01 02 00 00       	jmp    f010d2f7 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d0f6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d0fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d100:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d103:	29 c2                	sub    %eax,%edx
f010d105:	89 d0                	mov    %edx,%eax
f010d107:	c1 f8 02             	sar    $0x2,%eax
f010d10a:	89 c2                	mov    %eax,%edx
f010d10c:	89 d0                	mov    %edx,%eax
f010d10e:	c1 e0 02             	shl    $0x2,%eax
f010d111:	01 d0                	add    %edx,%eax
f010d113:	c1 e0 02             	shl    $0x2,%eax
f010d116:	01 d0                	add    %edx,%eax
f010d118:	c1 e0 02             	shl    $0x2,%eax
f010d11b:	01 d0                	add    %edx,%eax
f010d11d:	89 c1                	mov    %eax,%ecx
f010d11f:	c1 e1 08             	shl    $0x8,%ecx
f010d122:	01 c8                	add    %ecx,%eax
f010d124:	89 c1                	mov    %eax,%ecx
f010d126:	c1 e1 10             	shl    $0x10,%ecx
f010d129:	01 c8                	add    %ecx,%eax
f010d12b:	01 c0                	add    %eax,%eax
f010d12d:	01 d0                	add    %edx,%eax
f010d12f:	48                   	dec    %eax
f010d130:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d133:	ff 75 08             	pushl  0x8(%ebp)
f010d136:	6a 64                	push   $0x64
f010d138:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d13b:	50                   	push   %eax
f010d13c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d13f:	50                   	push   %eax
f010d140:	ff 75 f4             	pushl  -0xc(%ebp)
f010d143:	e8 b3 fd ff ff       	call   f010cefb <stab_binsearch>
f010d148:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d14b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d14e:	85 c0                	test   %eax,%eax
f010d150:	75 0a                	jne    f010d15c <debuginfo_eip+0x114>
		return -1;
f010d152:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d157:	e9 9b 01 00 00       	jmp    f010d2f7 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d15c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d15f:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d162:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d165:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d168:	ff 75 08             	pushl  0x8(%ebp)
f010d16b:	6a 24                	push   $0x24
f010d16d:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d170:	50                   	push   %eax
f010d171:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d174:	50                   	push   %eax
f010d175:	ff 75 f4             	pushl  -0xc(%ebp)
f010d178:	e8 7e fd ff ff       	call   f010cefb <stab_binsearch>
f010d17d:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d180:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d183:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d186:	39 c2                	cmp    %eax,%edx
f010d188:	0f 8f 86 00 00 00    	jg     f010d214 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d18e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d191:	89 c2                	mov    %eax,%edx
f010d193:	89 d0                	mov    %edx,%eax
f010d195:	01 c0                	add    %eax,%eax
f010d197:	01 d0                	add    %edx,%eax
f010d199:	c1 e0 02             	shl    $0x2,%eax
f010d19c:	89 c2                	mov    %eax,%edx
f010d19e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1a1:	01 d0                	add    %edx,%eax
f010d1a3:	8b 00                	mov    (%eax),%eax
f010d1a5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d1a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1ab:	29 d1                	sub    %edx,%ecx
f010d1ad:	89 ca                	mov    %ecx,%edx
f010d1af:	39 d0                	cmp    %edx,%eax
f010d1b1:	73 22                	jae    f010d1d5 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d1b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d1b6:	89 c2                	mov    %eax,%edx
f010d1b8:	89 d0                	mov    %edx,%eax
f010d1ba:	01 c0                	add    %eax,%eax
f010d1bc:	01 d0                	add    %edx,%eax
f010d1be:	c1 e0 02             	shl    $0x2,%eax
f010d1c1:	89 c2                	mov    %eax,%edx
f010d1c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1c6:	01 d0                	add    %edx,%eax
f010d1c8:	8b 10                	mov    (%eax),%edx
f010d1ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d1cd:	01 c2                	add    %eax,%edx
f010d1cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1d2:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d1d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d1d8:	89 c2                	mov    %eax,%edx
f010d1da:	89 d0                	mov    %edx,%eax
f010d1dc:	01 c0                	add    %eax,%eax
f010d1de:	01 d0                	add    %edx,%eax
f010d1e0:	c1 e0 02             	shl    $0x2,%eax
f010d1e3:	89 c2                	mov    %eax,%edx
f010d1e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1e8:	01 d0                	add    %edx,%eax
f010d1ea:	8b 50 08             	mov    0x8(%eax),%edx
f010d1ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1f0:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d1f3:	8b 55 08             	mov    0x8(%ebp),%edx
f010d1f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1f9:	8b 40 10             	mov    0x10(%eax),%eax
f010d1fc:	29 c2                	sub    %eax,%edx
f010d1fe:	89 d0                	mov    %edx,%eax
f010d200:	c1 f8 02             	sar    $0x2,%eax
f010d203:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d206:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d20c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d20f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d212:	eb 15                	jmp    f010d229 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d214:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d217:	8b 55 08             	mov    0x8(%ebp),%edx
f010d21a:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d21d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d220:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d223:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d226:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d229:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d22c:	8b 40 08             	mov    0x8(%eax),%eax
f010d22f:	83 ec 08             	sub    $0x8,%esp
f010d232:	6a 3a                	push   $0x3a
f010d234:	50                   	push   %eax
f010d235:	e8 ca 19 02 00       	call   f012ec04 <strfind>
f010d23a:	83 c4 10             	add    $0x10,%esp
f010d23d:	89 c2                	mov    %eax,%edx
f010d23f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d242:	8b 40 08             	mov    0x8(%eax),%eax
f010d245:	29 c2                	sub    %eax,%edx
f010d247:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d24a:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d24d:	eb 03                	jmp    f010d252 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d24f:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d252:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d255:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d258:	7c 4e                	jl     f010d2a8 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d25a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d25d:	89 d0                	mov    %edx,%eax
f010d25f:	01 c0                	add    %eax,%eax
f010d261:	01 d0                	add    %edx,%eax
f010d263:	c1 e0 02             	shl    $0x2,%eax
f010d266:	89 c2                	mov    %eax,%edx
f010d268:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d26b:	01 d0                	add    %edx,%eax
f010d26d:	8a 40 04             	mov    0x4(%eax),%al
f010d270:	3c 84                	cmp    $0x84,%al
f010d272:	74 34                	je     f010d2a8 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d274:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d277:	89 d0                	mov    %edx,%eax
f010d279:	01 c0                	add    %eax,%eax
f010d27b:	01 d0                	add    %edx,%eax
f010d27d:	c1 e0 02             	shl    $0x2,%eax
f010d280:	89 c2                	mov    %eax,%edx
f010d282:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d285:	01 d0                	add    %edx,%eax
f010d287:	8a 40 04             	mov    0x4(%eax),%al
f010d28a:	3c 64                	cmp    $0x64,%al
f010d28c:	75 c1                	jne    f010d24f <debuginfo_eip+0x207>
f010d28e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d291:	89 d0                	mov    %edx,%eax
f010d293:	01 c0                	add    %eax,%eax
f010d295:	01 d0                	add    %edx,%eax
f010d297:	c1 e0 02             	shl    $0x2,%eax
f010d29a:	89 c2                	mov    %eax,%edx
f010d29c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d29f:	01 d0                	add    %edx,%eax
f010d2a1:	8b 40 08             	mov    0x8(%eax),%eax
f010d2a4:	85 c0                	test   %eax,%eax
f010d2a6:	74 a7                	je     f010d24f <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d2a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d2ae:	7c 42                	jl     f010d2f2 <debuginfo_eip+0x2aa>
f010d2b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2b3:	89 d0                	mov    %edx,%eax
f010d2b5:	01 c0                	add    %eax,%eax
f010d2b7:	01 d0                	add    %edx,%eax
f010d2b9:	c1 e0 02             	shl    $0x2,%eax
f010d2bc:	89 c2                	mov    %eax,%edx
f010d2be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2c1:	01 d0                	add    %edx,%eax
f010d2c3:	8b 00                	mov    (%eax),%eax
f010d2c5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d2c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d2cb:	29 d1                	sub    %edx,%ecx
f010d2cd:	89 ca                	mov    %ecx,%edx
f010d2cf:	39 d0                	cmp    %edx,%eax
f010d2d1:	73 1f                	jae    f010d2f2 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d2d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2d6:	89 d0                	mov    %edx,%eax
f010d2d8:	01 c0                	add    %eax,%eax
f010d2da:	01 d0                	add    %edx,%eax
f010d2dc:	c1 e0 02             	shl    $0x2,%eax
f010d2df:	89 c2                	mov    %eax,%edx
f010d2e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2e4:	01 d0                	add    %edx,%eax
f010d2e6:	8b 10                	mov    (%eax),%edx
f010d2e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2eb:	01 c2                	add    %eax,%edx
f010d2ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2f0:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d2f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d2f7:	c9                   	leave  
f010d2f8:	c3                   	ret    

f010d2f9 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d2f9:	55                   	push   %ebp
f010d2fa:	89 e5                	mov    %esp,%ebp
f010d2fc:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d2ff:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d303:	74 1c                	je     f010d321 <setPageReplacmentAlgorithmLRU+0x28>
f010d305:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d309:	74 16                	je     f010d321 <setPageReplacmentAlgorithmLRU+0x28>
f010d30b:	68 04 2e 13 f0       	push   $0xf0132e04
f010d310:	68 4e 2e 13 f0       	push   $0xf0132e4e
f010d315:	6a 18                	push   $0x18
f010d317:	68 63 2e 13 f0       	push   $0xf0132e63
f010d31c:	e8 8f 2e ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d321:	8b 45 08             	mov    0x8(%ebp),%eax
f010d324:	a3 fc be 2b f0       	mov    %eax,0xf02bbefc
}
f010d329:	90                   	nop
f010d32a:	c9                   	leave  
f010d32b:	c3                   	ret    

f010d32c <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d32c:	55                   	push   %ebp
f010d32d:	89 e5                	mov    %esp,%ebp
f010d32f:	c7 05 fc be 2b f0 03 	movl   $0x3,0xf02bbefc
f010d336:	00 00 00 
f010d339:	90                   	nop
f010d33a:	5d                   	pop    %ebp
f010d33b:	c3                   	ret    

f010d33c <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d33c:	55                   	push   %ebp
f010d33d:	89 e5                	mov    %esp,%ebp
f010d33f:	c7 05 fc be 2b f0 04 	movl   $0x4,0xf02bbefc
f010d346:	00 00 00 
f010d349:	90                   	nop
f010d34a:	5d                   	pop    %ebp
f010d34b:	c3                   	ret    

f010d34c <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d34c:	55                   	push   %ebp
f010d34d:	89 e5                	mov    %esp,%ebp
f010d34f:	c7 05 fc be 2b f0 05 	movl   $0x5,0xf02bbefc
f010d356:	00 00 00 
f010d359:	90                   	nop
f010d35a:	5d                   	pop    %ebp
f010d35b:	c3                   	ret    

f010d35c <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d35c:	55                   	push   %ebp
f010d35d:	89 e5                	mov    %esp,%ebp
f010d35f:	c7 05 fc be 2b f0 07 	movl   $0x7,0xf02bbefc
f010d366:	00 00 00 
f010d369:	90                   	nop
f010d36a:	5d                   	pop    %ebp
f010d36b:	c3                   	ret    

f010d36c <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d36c:	55                   	push   %ebp
f010d36d:	89 e5                	mov    %esp,%ebp
f010d36f:	c7 05 fc be 2b f0 06 	movl   $0x6,0xf02bbefc
f010d376:	00 00 00 
f010d379:	8b 45 08             	mov    0x8(%ebp),%eax
f010d37c:	a3 1c 3b 25 f0       	mov    %eax,0xf0253b1c
f010d381:	90                   	nop
f010d382:	5d                   	pop    %ebp
f010d383:	c3                   	ret    

f010d384 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d384:	55                   	push   %ebp
f010d385:	89 e5                	mov    %esp,%ebp
f010d387:	8b 15 fc be 2b f0    	mov    0xf02bbefc,%edx
f010d38d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d390:	39 c2                	cmp    %eax,%edx
f010d392:	0f 94 c0             	sete   %al
f010d395:	0f b6 c0             	movzbl %al,%eax
f010d398:	5d                   	pop    %ebp
f010d399:	c3                   	ret    

f010d39a <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d39a:	55                   	push   %ebp
f010d39b:	89 e5                	mov    %esp,%ebp
f010d39d:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d3a2:	83 f8 03             	cmp    $0x3,%eax
f010d3a5:	75 07                	jne    f010d3ae <isPageReplacmentAlgorithmCLOCK+0x14>
f010d3a7:	b8 01 00 00 00       	mov    $0x1,%eax
f010d3ac:	eb 05                	jmp    f010d3b3 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d3ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3b3:	5d                   	pop    %ebp
f010d3b4:	c3                   	ret    

f010d3b5 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d3b5:	55                   	push   %ebp
f010d3b6:	89 e5                	mov    %esp,%ebp
f010d3b8:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d3bd:	83 f8 04             	cmp    $0x4,%eax
f010d3c0:	75 07                	jne    f010d3c9 <isPageReplacmentAlgorithmFIFO+0x14>
f010d3c2:	b8 01 00 00 00       	mov    $0x1,%eax
f010d3c7:	eb 05                	jmp    f010d3ce <isPageReplacmentAlgorithmFIFO+0x19>
f010d3c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3ce:	5d                   	pop    %ebp
f010d3cf:	c3                   	ret    

f010d3d0 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d3d0:	55                   	push   %ebp
f010d3d1:	89 e5                	mov    %esp,%ebp
f010d3d3:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d3d8:	83 f8 05             	cmp    $0x5,%eax
f010d3db:	75 07                	jne    f010d3e4 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d3dd:	b8 01 00 00 00       	mov    $0x1,%eax
f010d3e2:	eb 05                	jmp    f010d3e9 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d3e4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3e9:	5d                   	pop    %ebp
f010d3ea:	c3                   	ret    

f010d3eb <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d3eb:	55                   	push   %ebp
f010d3ec:	89 e5                	mov    %esp,%ebp
f010d3ee:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d3f3:	83 f8 07             	cmp    $0x7,%eax
f010d3f6:	75 07                	jne    f010d3ff <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d3f8:	b8 01 00 00 00       	mov    $0x1,%eax
f010d3fd:	eb 05                	jmp    f010d404 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d3ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010d404:	5d                   	pop    %ebp
f010d405:	c3                   	ret    

f010d406 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d406:	55                   	push   %ebp
f010d407:	89 e5                	mov    %esp,%ebp
f010d409:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d40e:	83 f8 06             	cmp    $0x6,%eax
f010d411:	75 07                	jne    f010d41a <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d413:	b8 01 00 00 00       	mov    $0x1,%eax
f010d418:	eb 05                	jmp    f010d41f <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d41a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d41f:	5d                   	pop    %ebp
f010d420:	c3                   	ret    

f010d421 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d421:	55                   	push   %ebp
f010d422:	89 e5                	mov    %esp,%ebp
f010d424:	8b 45 08             	mov    0x8(%ebp),%eax
f010d427:	a3 cc be 2b f0       	mov    %eax,0xf02bbecc
f010d42c:	90                   	nop
f010d42d:	5d                   	pop    %ebp
f010d42e:	c3                   	ret    

f010d42f <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d42f:	55                   	push   %ebp
f010d430:	89 e5                	mov    %esp,%ebp
f010d432:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f010d437:	5d                   	pop    %ebp
f010d438:	c3                   	ret    

f010d439 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d439:	55                   	push   %ebp
f010d43a:	89 e5                	mov    %esp,%ebp
f010d43c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43f:	a3 14 bf 2b f0       	mov    %eax,0xf02bbf14
f010d444:	90                   	nop
f010d445:	5d                   	pop    %ebp
f010d446:	c3                   	ret    

f010d447 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d447:	55                   	push   %ebp
f010d448:	89 e5                	mov    %esp,%ebp
f010d44a:	a1 14 bf 2b f0       	mov    0xf02bbf14,%eax
f010d44f:	5d                   	pop    %ebp
f010d450:	c3                   	ret    

f010d451 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d451:	55                   	push   %ebp
f010d452:	89 e5                	mov    %esp,%ebp
f010d454:	8b 45 08             	mov    0x8(%ebp),%eax
f010d457:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f010d45c:	90                   	nop
f010d45d:	5d                   	pop    %ebp
f010d45e:	c3                   	ret    

f010d45f <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d45f:	55                   	push   %ebp
f010d460:	89 e5                	mov    %esp,%ebp
f010d462:	a1 24 bf 2b f0       	mov    0xf02bbf24,%eax
f010d467:	5d                   	pop    %ebp
f010d468:	c3                   	ret    

f010d469 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d469:	55                   	push   %ebp
f010d46a:	89 e5                	mov    %esp,%ebp
f010d46c:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d46f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d472:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d478:	83 ec 04             	sub    $0x4,%esp
f010d47b:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d47e:	52                   	push   %edx
f010d47f:	ff 75 0c             	pushl  0xc(%ebp)
f010d482:	50                   	push   %eax
f010d483:	e8 b9 9d ff ff       	call   f0107241 <__static_cpt>
f010d488:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d48b:	90                   	nop
f010d48c:	c9                   	leave  
f010d48d:	c3                   	ret    

f010d48e <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d48e:	55                   	push   %ebp
f010d48f:	89 e5                	mov    %esp,%ebp
f010d491:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d494:	83 ec 0c             	sub    $0xc,%esp
f010d497:	ff 75 08             	pushl  0x8(%ebp)
f010d49a:	e8 ea a9 ff ff       	call   f0107e89 <env_page_ws_get_size>
f010d49f:	83 c4 10             	add    $0x10,%esp
f010d4a2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d4a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d4ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d4b1:	76 14                	jbe    f010d4c7 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d4b3:	83 ec 04             	sub    $0x4,%esp
f010d4b6:	68 80 2e 13 f0       	push   $0xf0132e80
f010d4bb:	6a 55                	push   $0x55
f010d4bd:	68 63 2e 13 f0       	push   $0xf0132e63
f010d4c2:	e8 e9 2c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d4c7:	e8 e9 fe ff ff       	call   f010d3b5 <isPageReplacmentAlgorithmFIFO>
f010d4cc:	85 c0                	test   %eax,%eax
f010d4ce:	74 14                	je     f010d4e4 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d4d0:	83 ec 04             	sub    $0x4,%esp
f010d4d3:	68 bc 2e 13 f0       	push   $0xf0132ebc
f010d4d8:	6a 61                	push   $0x61
f010d4da:	68 63 2e 13 f0       	push   $0xf0132e63
f010d4df:	e8 cc 2c ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d4e4:	83 ec 0c             	sub    $0xc,%esp
f010d4e7:	6a 02                	push   $0x2
f010d4e9:	e8 96 fe ff ff       	call   f010d384 <isPageReplacmentAlgorithmLRU>
f010d4ee:	83 c4 10             	add    $0x10,%esp
f010d4f1:	85 c0                	test   %eax,%eax
f010d4f3:	74 14                	je     f010d509 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d4f5:	83 ec 04             	sub    $0x4,%esp
f010d4f8:	68 00 2f 13 f0       	push   $0xf0132f00
f010d4fd:	6a 67                	push   $0x67
f010d4ff:	68 63 2e 13 f0       	push   $0xf0132e63
f010d504:	e8 a7 2c ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d509:	90                   	nop
f010d50a:	c9                   	leave  
f010d50b:	c3                   	ret    

f010d50c <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d50c:	55                   	push   %ebp
f010d50d:	89 e5                	mov    %esp,%ebp
f010d50f:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d512:	83 ec 04             	sub    $0x4,%esp
f010d515:	68 44 2f 13 f0       	push   $0xf0132f44
f010d51a:	6a 70                	push   $0x70
f010d51c:	68 63 2e 13 f0       	push   $0xf0132e63
f010d521:	e8 8a 2c ff ff       	call   f01001b0 <_panic>

f010d526 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d526:	55                   	push   %ebp
f010d527:	89 e5                	mov    %esp,%ebp
f010d529:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d52c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d533:	e9 aa 00 00 00       	jmp    f010d5e2 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d538:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d53b:	89 d0                	mov    %edx,%eax
f010d53d:	c1 e0 02             	shl    $0x2,%eax
f010d540:	01 d0                	add    %edx,%eax
f010d542:	01 c0                	add    %eax,%eax
f010d544:	01 d0                	add    %edx,%eax
f010d546:	01 c0                	add    %eax,%eax
f010d548:	01 d0                	add    %edx,%eax
f010d54a:	c1 e0 02             	shl    $0x2,%eax
f010d54d:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d552:	83 ec 04             	sub    $0x4,%esp
f010d555:	6a 5c                	push   $0x5c
f010d557:	6a 00                	push   $0x0
f010d559:	50                   	push   %eax
f010d55a:	e8 d1 16 02 00       	call   f012ec30 <memset>
f010d55f:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d562:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d565:	89 d0                	mov    %edx,%eax
f010d567:	c1 e0 02             	shl    $0x2,%eax
f010d56a:	01 d0                	add    %edx,%eax
f010d56c:	01 c0                	add    %eax,%eax
f010d56e:	01 d0                	add    %edx,%eax
f010d570:	01 c0                	add    %eax,%eax
f010d572:	01 d0                	add    %edx,%eax
f010d574:	c1 e0 02             	shl    $0x2,%eax
f010d577:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d57c:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d57f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d582:	89 d0                	mov    %edx,%eax
f010d584:	c1 e0 02             	shl    $0x2,%eax
f010d587:	01 d0                	add    %edx,%eax
f010d589:	01 c0                	add    %eax,%eax
f010d58b:	01 d0                	add    %edx,%eax
f010d58d:	01 c0                	add    %eax,%eax
f010d58f:	01 d0                	add    %edx,%eax
f010d591:	c1 e0 02             	shl    $0x2,%eax
f010d594:	05 e4 9a 2b f0       	add    $0xf02b9ae4,%eax
f010d599:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d59f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5a2:	89 d0                	mov    %edx,%eax
f010d5a4:	c1 e0 02             	shl    $0x2,%eax
f010d5a7:	01 d0                	add    %edx,%eax
f010d5a9:	01 c0                	add    %eax,%eax
f010d5ab:	01 d0                	add    %edx,%eax
f010d5ad:	01 c0                	add    %eax,%eax
f010d5af:	01 d0                	add    %edx,%eax
f010d5b1:	c1 e0 02             	shl    $0x2,%eax
f010d5b4:	05 e8 9a 2b f0       	add    $0xf02b9ae8,%eax
f010d5b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d5bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5c2:	89 d0                	mov    %edx,%eax
f010d5c4:	c1 e0 02             	shl    $0x2,%eax
f010d5c7:	01 d0                	add    %edx,%eax
f010d5c9:	01 c0                	add    %eax,%eax
f010d5cb:	01 d0                	add    %edx,%eax
f010d5cd:	01 c0                	add    %eax,%eax
f010d5cf:	01 d0                	add    %edx,%eax
f010d5d1:	c1 e0 02             	shl    $0x2,%eax
f010d5d4:	05 f0 9a 2b f0       	add    $0xf02b9af0,%eax
f010d5d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d5df:	ff 45 f4             	incl   -0xc(%ebp)
f010d5e2:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d5e6:	0f 8e 4c ff ff ff    	jle    f010d538 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d5ec:	90                   	nop
f010d5ed:	c9                   	leave  
f010d5ee:	c3                   	ret    

f010d5ef <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d5ef:	55                   	push   %ebp
f010d5f0:	89 e5                	mov    %esp,%ebp
f010d5f2:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d5f5:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d5fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d603:	eb 2b                	jmp    f010d630 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d605:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010d608:	89 d0                	mov    %edx,%eax
f010d60a:	c1 e0 02             	shl    $0x2,%eax
f010d60d:	01 d0                	add    %edx,%eax
f010d60f:	01 c0                	add    %eax,%eax
f010d611:	01 d0                	add    %edx,%eax
f010d613:	01 c0                	add    %eax,%eax
f010d615:	01 d0                	add    %edx,%eax
f010d617:	c1 e0 02             	shl    $0x2,%eax
f010d61a:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d61f:	8a 00                	mov    (%eax),%al
f010d621:	84 c0                	test   %al,%al
f010d623:	74 08                	je     f010d62d <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d625:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d628:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010d62b:	eb 09                	jmp    f010d636 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d62d:	ff 45 f8             	incl   -0x8(%ebp)
f010d630:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010d634:	7e cf                	jle    f010d605 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d636:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010d63a:	75 07                	jne    f010d643 <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010d63c:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010d641:	eb 40                	jmp    f010d683 <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d643:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d646:	89 d0                	mov    %edx,%eax
f010d648:	c1 e0 02             	shl    $0x2,%eax
f010d64b:	01 d0                	add    %edx,%eax
f010d64d:	01 c0                	add    %eax,%eax
f010d64f:	01 d0                	add    %edx,%eax
f010d651:	01 c0                	add    %eax,%eax
f010d653:	01 d0                	add    %edx,%eax
f010d655:	c1 e0 02             	shl    $0x2,%eax
f010d658:	8d 90 a0 9a 2b f0    	lea    -0xfd46560(%eax),%edx
f010d65e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d661:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d663:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d666:	89 d0                	mov    %edx,%eax
f010d668:	c1 e0 02             	shl    $0x2,%eax
f010d66b:	01 d0                	add    %edx,%eax
f010d66d:	01 c0                	add    %eax,%eax
f010d66f:	01 d0                	add    %edx,%eax
f010d671:	01 c0                	add    %eax,%eax
f010d673:	01 d0                	add    %edx,%eax
f010d675:	c1 e0 02             	shl    $0x2,%eax
f010d678:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d67d:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d680:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d683:	c9                   	leave  
f010d684:	c3                   	ret    

f010d685 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d685:	55                   	push   %ebp
f010d686:	89 e5                	mov    %esp,%ebp
f010d688:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d68b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d692:	eb 7a                	jmp    f010d70e <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d694:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d697:	89 d0                	mov    %edx,%eax
f010d699:	c1 e0 02             	shl    $0x2,%eax
f010d69c:	01 d0                	add    %edx,%eax
f010d69e:	01 c0                	add    %eax,%eax
f010d6a0:	01 d0                	add    %edx,%eax
f010d6a2:	01 c0                	add    %eax,%eax
f010d6a4:	01 d0                	add    %edx,%eax
f010d6a6:	c1 e0 02             	shl    $0x2,%eax
f010d6a9:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d6ae:	8a 00                	mov    (%eax),%al
f010d6b0:	84 c0                	test   %al,%al
f010d6b2:	75 56                	jne    f010d70a <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d6b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6b7:	89 d0                	mov    %edx,%eax
f010d6b9:	c1 e0 02             	shl    $0x2,%eax
f010d6bc:	01 d0                	add    %edx,%eax
f010d6be:	01 c0                	add    %eax,%eax
f010d6c0:	01 d0                	add    %edx,%eax
f010d6c2:	01 c0                	add    %eax,%eax
f010d6c4:	01 d0                	add    %edx,%eax
f010d6c6:	c1 e0 02             	shl    $0x2,%eax
f010d6c9:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d6ce:	8b 00                	mov    (%eax),%eax
f010d6d0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d6d3:	75 36                	jne    f010d70b <get_semaphore_object_ID+0x86>
f010d6d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6d8:	89 d0                	mov    %edx,%eax
f010d6da:	c1 e0 02             	shl    $0x2,%eax
f010d6dd:	01 d0                	add    %edx,%eax
f010d6df:	01 c0                	add    %eax,%eax
f010d6e1:	01 d0                	add    %edx,%eax
f010d6e3:	01 c0                	add    %eax,%eax
f010d6e5:	01 d0                	add    %edx,%eax
f010d6e7:	c1 e0 02             	shl    $0x2,%eax
f010d6ea:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d6ef:	83 c0 04             	add    $0x4,%eax
f010d6f2:	83 ec 08             	sub    $0x8,%esp
f010d6f5:	50                   	push   %eax
f010d6f6:	ff 75 0c             	pushl  0xc(%ebp)
f010d6f9:	e8 50 14 02 00       	call   f012eb4e <strcmp>
f010d6fe:	83 c4 10             	add    $0x10,%esp
f010d701:	85 c0                	test   %eax,%eax
f010d703:	75 06                	jne    f010d70b <get_semaphore_object_ID+0x86>
		{
			return i;
f010d705:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d708:	eb 0f                	jmp    f010d719 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d70a:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d70b:	ff 45 f4             	incl   -0xc(%ebp)
f010d70e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d712:	7e 80                	jle    f010d694 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d714:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d719:	c9                   	leave  
f010d71a:	c3                   	ret    

f010d71b <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d71b:	55                   	push   %ebp
f010d71c:	89 e5                	mov    %esp,%ebp
f010d71e:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d721:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d725:	76 0a                	jbe    f010d731 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d727:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d72c:	e9 ac 00 00 00       	jmp    f010d7dd <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d731:	8b 55 08             	mov    0x8(%ebp),%edx
f010d734:	89 d0                	mov    %edx,%eax
f010d736:	c1 e0 02             	shl    $0x2,%eax
f010d739:	01 d0                	add    %edx,%eax
f010d73b:	01 c0                	add    %eax,%eax
f010d73d:	01 d0                	add    %edx,%eax
f010d73f:	01 c0                	add    %eax,%eax
f010d741:	01 d0                	add    %edx,%eax
f010d743:	c1 e0 02             	shl    $0x2,%eax
f010d746:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d74b:	83 ec 04             	sub    $0x4,%esp
f010d74e:	6a 5c                	push   $0x5c
f010d750:	6a 00                	push   $0x0
f010d752:	50                   	push   %eax
f010d753:	e8 d8 14 02 00       	call   f012ec30 <memset>
f010d758:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d75b:	8b 55 08             	mov    0x8(%ebp),%edx
f010d75e:	89 d0                	mov    %edx,%eax
f010d760:	c1 e0 02             	shl    $0x2,%eax
f010d763:	01 d0                	add    %edx,%eax
f010d765:	01 c0                	add    %eax,%eax
f010d767:	01 d0                	add    %edx,%eax
f010d769:	01 c0                	add    %eax,%eax
f010d76b:	01 d0                	add    %edx,%eax
f010d76d:	c1 e0 02             	shl    $0x2,%eax
f010d770:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d775:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d778:	8b 55 08             	mov    0x8(%ebp),%edx
f010d77b:	89 d0                	mov    %edx,%eax
f010d77d:	c1 e0 02             	shl    $0x2,%eax
f010d780:	01 d0                	add    %edx,%eax
f010d782:	01 c0                	add    %eax,%eax
f010d784:	01 d0                	add    %edx,%eax
f010d786:	01 c0                	add    %eax,%eax
f010d788:	01 d0                	add    %edx,%eax
f010d78a:	c1 e0 02             	shl    $0x2,%eax
f010d78d:	05 e4 9a 2b f0       	add    $0xf02b9ae4,%eax
f010d792:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d798:	8b 55 08             	mov    0x8(%ebp),%edx
f010d79b:	89 d0                	mov    %edx,%eax
f010d79d:	c1 e0 02             	shl    $0x2,%eax
f010d7a0:	01 d0                	add    %edx,%eax
f010d7a2:	01 c0                	add    %eax,%eax
f010d7a4:	01 d0                	add    %edx,%eax
f010d7a6:	01 c0                	add    %eax,%eax
f010d7a8:	01 d0                	add    %edx,%eax
f010d7aa:	c1 e0 02             	shl    $0x2,%eax
f010d7ad:	05 e8 9a 2b f0       	add    $0xf02b9ae8,%eax
f010d7b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d7b8:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7bb:	89 d0                	mov    %edx,%eax
f010d7bd:	c1 e0 02             	shl    $0x2,%eax
f010d7c0:	01 d0                	add    %edx,%eax
f010d7c2:	01 c0                	add    %eax,%eax
f010d7c4:	01 d0                	add    %edx,%eax
f010d7c6:	01 c0                	add    %eax,%eax
f010d7c8:	01 d0                	add    %edx,%eax
f010d7ca:	c1 e0 02             	shl    $0x2,%eax
f010d7cd:	05 f0 9a 2b f0       	add    $0xf02b9af0,%eax
f010d7d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d7d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d7dd:	c9                   	leave  
f010d7de:	c3                   	ret    

f010d7df <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d7df:	55                   	push   %ebp
f010d7e0:	89 e5                	mov    %esp,%ebp
f010d7e2:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010d7e5:	83 ec 04             	sub    $0x4,%esp
f010d7e8:	68 68 2f 13 f0       	push   $0xf0132f68
f010d7ed:	68 95 00 00 00       	push   $0x95
f010d7f2:	68 96 2f 13 f0       	push   $0xf0132f96
f010d7f7:	e8 b4 29 ff ff       	call   f01001b0 <_panic>

f010d7fc <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d7fc:	55                   	push   %ebp
f010d7fd:	89 e5                	mov    %esp,%ebp
f010d7ff:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010d802:	83 ec 04             	sub    $0x4,%esp
f010d805:	68 b4 2f 13 f0       	push   $0xf0132fb4
f010d80a:	68 9e 00 00 00       	push   $0x9e
f010d80f:	68 96 2f 13 f0       	push   $0xf0132f96
f010d814:	e8 97 29 ff ff       	call   f01001b0 <_panic>

f010d819 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d819:	55                   	push   %ebp
f010d81a:	89 e5                	mov    %esp,%ebp
f010d81c:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010d81f:	83 ec 04             	sub    $0x4,%esp
f010d822:	68 e0 2f 13 f0       	push   $0xf0132fe0
f010d827:	68 a6 00 00 00       	push   $0xa6
f010d82c:	68 96 2f 13 f0       	push   $0xf0132f96
f010d831:	e8 7a 29 ff ff       	call   f01001b0 <_panic>

f010d836 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010d836:	55                   	push   %ebp
f010d837:	89 e5                	mov    %esp,%ebp
f010d839:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f010d840:	00 00 00 
f010d843:	90                   	nop
f010d844:	5d                   	pop    %ebp
f010d845:	c3                   	ret    

f010d846 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010d846:	55                   	push   %ebp
f010d847:	89 e5                	mov    %esp,%ebp
f010d849:	c7 05 d8 be 2b f0 02 	movl   $0x2,0xf02bbed8
f010d850:	00 00 00 
f010d853:	90                   	nop
f010d854:	5d                   	pop    %ebp
f010d855:	c3                   	ret    

f010d856 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010d856:	55                   	push   %ebp
f010d857:	89 e5                	mov    %esp,%ebp
f010d859:	c7 05 d8 be 2b f0 03 	movl   $0x3,0xf02bbed8
f010d860:	00 00 00 
f010d863:	90                   	nop
f010d864:	5d                   	pop    %ebp
f010d865:	c3                   	ret    

f010d866 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010d866:	55                   	push   %ebp
f010d867:	89 e5                	mov    %esp,%ebp
f010d869:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d86e:	83 f8 01             	cmp    $0x1,%eax
f010d871:	75 04                	jne    f010d877 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010d873:	b0 01                	mov    $0x1,%al
f010d875:	eb 02                	jmp    f010d879 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010d877:	b0 00                	mov    $0x0,%al
f010d879:	5d                   	pop    %ebp
f010d87a:	c3                   	ret    

f010d87b <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010d87b:	55                   	push   %ebp
f010d87c:	89 e5                	mov    %esp,%ebp
f010d87e:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d883:	83 f8 02             	cmp    $0x2,%eax
f010d886:	75 04                	jne    f010d88c <isKHeapPlacementStrategyBESTFIT+0x11>
f010d888:	b0 01                	mov    $0x1,%al
f010d88a:	eb 02                	jmp    f010d88e <isKHeapPlacementStrategyBESTFIT+0x13>
f010d88c:	b0 00                	mov    $0x0,%al
f010d88e:	5d                   	pop    %ebp
f010d88f:	c3                   	ret    

f010d890 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010d890:	55                   	push   %ebp
f010d891:	89 e5                	mov    %esp,%ebp
f010d893:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d898:	83 f8 03             	cmp    $0x3,%eax
f010d89b:	75 04                	jne    f010d8a1 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010d89d:	b0 01                	mov    $0x1,%al
f010d89f:	eb 02                	jmp    f010d8a3 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010d8a1:	b0 00                	mov    $0x0,%al
f010d8a3:	5d                   	pop    %ebp
f010d8a4:	c3                   	ret    

f010d8a5 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010d8a5:	55                   	push   %ebp
f010d8a6:	89 e5                	mov    %esp,%ebp
f010d8a8:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010d8ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d8b2:	eb 26                	jmp    f010d8da <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010d8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d8be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c1:	01 c2                	add    %eax,%edx
f010d8c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8c6:	40                   	inc    %eax
f010d8c7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d8ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8d1:	01 c8                	add    %ecx,%eax
f010d8d3:	8b 00                	mov    (%eax),%eax
f010d8d5:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010d8d7:	ff 45 f4             	incl   -0xc(%ebp)
f010d8da:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8dd:	48                   	dec    %eax
f010d8de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d8e1:	7f d1                	jg     f010d8b4 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010d8e3:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010d8e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010d8ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010d8f4:	eb 35                	jmp    f010d92b <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010d8f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d8f9:	89 d0                	mov    %edx,%eax
f010d8fb:	01 c0                	add    %eax,%eax
f010d8fd:	01 d0                	add    %edx,%eax
f010d8ff:	c1 e0 02             	shl    $0x2,%eax
f010d902:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010d907:	8b 10                	mov    (%eax),%edx
f010d909:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d90c:	8b 00                	mov    (%eax),%eax
f010d90e:	83 ec 08             	sub    $0x8,%esp
f010d911:	52                   	push   %edx
f010d912:	50                   	push   %eax
f010d913:	e8 36 12 02 00       	call   f012eb4e <strcmp>
f010d918:	83 c4 10             	add    $0x10,%esp
f010d91b:	85 c0                	test   %eax,%eax
f010d91d:	75 09                	jne    f010d928 <tst_handler+0x83>
		{
			test_found = 1;
f010d91f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010d926:	eb 0f                	jmp    f010d937 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010d928:	ff 45 ec             	incl   -0x14(%ebp)
f010d92b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d92e:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f010d933:	39 c2                	cmp    %eax,%edx
f010d935:	72 bf                	jb     f010d8f6 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010d937:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d93b:	74 29                	je     f010d966 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010d93d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d940:	89 d0                	mov    %edx,%eax
f010d942:	01 c0                	add    %eax,%eax
f010d944:	01 d0                	add    %edx,%eax
f010d946:	c1 e0 02             	shl    $0x2,%eax
f010d949:	05 68 ca 18 f0       	add    $0xf018ca68,%eax
f010d94e:	8b 00                	mov    (%eax),%eax
f010d950:	83 ec 08             	sub    $0x8,%esp
f010d953:	ff 75 0c             	pushl  0xc(%ebp)
f010d956:	ff 75 08             	pushl  0x8(%ebp)
f010d959:	ff d0                	call   *%eax
f010d95b:	83 c4 10             	add    $0x10,%esp
f010d95e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010d961:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d964:	eb 1b                	jmp    f010d981 <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010d966:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d969:	8b 00                	mov    (%eax),%eax
f010d96b:	83 ec 08             	sub    $0x8,%esp
f010d96e:	50                   	push   %eax
f010d96f:	68 94 32 13 f0       	push   $0xf0133294
f010d974:	e8 b8 34 ff ff       	call   f0100e31 <cprintf>
f010d979:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d97c:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010d981:	c9                   	leave  
f010d982:	c3                   	ret    

f010d983 <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010d983:	55                   	push   %ebp
f010d984:	89 e5                	mov    %esp,%ebp
f010d986:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010d989:	e8 3d 70 01 00       	call   f01249cb <test_three_creation_functions>
	return 0;
f010d98e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d993:	c9                   	leave  
f010d994:	c3                   	ret    

f010d995 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010d995:	55                   	push   %ebp
f010d996:	89 e5                	mov    %esp,%ebp
f010d998:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010d99b:	e8 ff 91 00 00       	call   f0116b9f <test_priority_normal_and_higher>
	return 0;
f010d9a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9a5:	c9                   	leave  
f010d9a6:	c3                   	ret    

f010d9a7 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010d9a7:	55                   	push   %ebp
f010d9a8:	89 e5                	mov    %esp,%ebp
f010d9aa:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010d9ad:	e8 57 9c 00 00       	call   f0117609 <test_priority_normal_and_lower>
	return 0;
f010d9b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9b7:	c9                   	leave  
f010d9b8:	c3                   	ret    

f010d9b9 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010d9b9:	55                   	push   %ebp
f010d9ba:	89 e5                	mov    %esp,%ebp
f010d9bc:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010d9bf:	e8 1b 72 01 00       	call   f0124bdf <test_kfreeall>
	return 0;
f010d9c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9c9:	c9                   	leave  
f010d9ca:	c3                   	ret    

f010d9cb <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010d9cb:	55                   	push   %ebp
f010d9cc:	89 e5                	mov    %esp,%ebp
f010d9ce:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010d9d1:	e8 a3 86 01 00       	call   f0126079 <test_kexpand>
	return 0;
f010d9d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9db:	c9                   	leave  
f010d9dc:	c3                   	ret    

f010d9dd <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010d9dd:	55                   	push   %ebp
f010d9de:	89 e5                	mov    %esp,%ebp
f010d9e0:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010d9e3:	e8 62 92 01 00       	call   f0126c4a <test_kshrink>
	return 0;
f010d9e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ed:	c9                   	leave  
f010d9ee:	c3                   	ret    

f010d9ef <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010d9ef:	55                   	push   %ebp
f010d9f0:	89 e5                	mov    %esp,%ebp
f010d9f2:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010d9f5:	e8 57 9f 01 00       	call   f0127951 <test_kfreelast>
	return 0;
f010d9fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ff:	c9                   	leave  
f010da00:	c3                   	ret    

f010da01 <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010da01:	55                   	push   %ebp
f010da02:	89 e5                	mov    %esp,%ebp
f010da04:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010da07:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da0a:	83 c0 04             	add    $0x4,%eax
f010da0d:	8b 00                	mov    (%eax),%eax
f010da0f:	83 ec 04             	sub    $0x4,%esp
f010da12:	6a 0a                	push   $0xa
f010da14:	6a 00                	push   $0x0
f010da16:	50                   	push   %eax
f010da17:	e8 86 13 02 00       	call   f012eda2 <strtol>
f010da1c:	83 c4 10             	add    $0x10,%esp
f010da1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010da22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010da29:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010da30:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f010da35:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010da38:	eb 3b                	jmp    f010da75 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010da3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da3d:	83 c0 5c             	add    $0x5c,%eax
f010da40:	83 ec 08             	sub    $0x8,%esp
f010da43:	68 a7 32 13 f0       	push   $0xf01332a7
f010da48:	50                   	push   %eax
f010da49:	e8 00 11 02 00       	call   f012eb4e <strcmp>
f010da4e:	83 c4 10             	add    $0x10,%esp
f010da51:	85 c0                	test   %eax,%eax
f010da53:	75 12                	jne    f010da67 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010da55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010da59:	74 07                	je     f010da62 <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010da5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010da62:	ff 45 f4             	incl   -0xc(%ebp)
f010da65:	eb 06                	jmp    f010da6d <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010da67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010da6b:	74 31                	je     f010da9e <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010da6d:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f010da72:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010da75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010da79:	74 08                	je     f010da83 <tst_sc_MLFQ+0x82>
f010da7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da7e:	8b 40 44             	mov    0x44(%eax),%eax
f010da81:	eb 05                	jmp    f010da88 <tst_sc_MLFQ+0x87>
f010da83:	b8 00 00 00 00       	mov    $0x0,%eax
f010da88:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f010da8d:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f010da92:	85 c0                	test   %eax,%eax
f010da94:	75 a4                	jne    f010da3a <tst_sc_MLFQ+0x39>
f010da96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010da9a:	75 9e                	jne    f010da3a <tst_sc_MLFQ+0x39>
f010da9c:	eb 01                	jmp    f010da9f <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010da9e:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010da9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010daa2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010daa5:	75 12                	jne    f010dab9 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010daa7:	83 ec 0c             	sub    $0xc,%esp
f010daaa:	68 b0 32 13 f0       	push   $0xf01332b0
f010daaf:	e8 7d 33 ff ff       	call   f0100e31 <cprintf>
f010dab4:	83 c4 10             	add    $0x10,%esp
f010dab7:	eb 17                	jmp    f010dad0 <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010dab9:	83 ec 04             	sub    $0x4,%esp
f010dabc:	68 e9 32 13 f0       	push   $0xf01332e9
f010dac1:	68 94 00 00 00       	push   $0x94
f010dac6:	68 ff 32 13 f0       	push   $0xf01332ff
f010dacb:	e8 e0 26 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010dad0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dad5:	c9                   	leave  
f010dad6:	c3                   	ret    

f010dad7 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010dad7:	55                   	push   %ebp
f010dad8:	89 e5                	mov    %esp,%ebp
f010dada:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010dadd:	e8 80 3d 00 00       	call   f0111862 <TestAutoCompleteCommand>
f010dae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010dae5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010daea:	c9                   	leave  
f010daeb:	c3                   	ret    

f010daec <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010daec:	55                   	push   %ebp
f010daed:	89 e5                	mov    %esp,%ebp
f010daef:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010daf2:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010daf6:	74 1a                	je     f010db12 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010daf8:	83 ec 0c             	sub    $0xc,%esp
f010dafb:	68 18 33 13 f0       	push   $0xf0133318
f010db00:	e8 2c 33 ff ff       	call   f0100e31 <cprintf>
f010db05:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db08:	b8 00 00 00 00       	mov    $0x0,%eax
f010db0d:	e9 2f 01 00 00       	jmp    f010dc41 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010db12:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db15:	83 c0 04             	add    $0x4,%eax
f010db18:	8b 00                	mov    (%eax),%eax
f010db1a:	83 ec 08             	sub    $0x8,%esp
f010db1d:	68 55 33 13 f0       	push   $0xf0133355
f010db22:	50                   	push   %eax
f010db23:	e8 26 10 02 00       	call   f012eb4e <strcmp>
f010db28:	83 c4 10             	add    $0x10,%esp
f010db2b:	85 c0                	test   %eax,%eax
f010db2d:	75 0a                	jne    f010db39 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010db2f:	e8 80 06 00 00       	call   f010e1b4 <test_initialize_dynamic_allocator>
f010db34:	e9 03 01 00 00       	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010db39:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db3c:	83 c0 04             	add    $0x4,%eax
f010db3f:	8b 00                	mov    (%eax),%eax
f010db41:	83 ec 08             	sub    $0x8,%esp
f010db44:	68 5a 33 13 f0       	push   $0xf013335a
f010db49:	50                   	push   %eax
f010db4a:	e8 ff 0f 02 00       	call   f012eb4e <strcmp>
f010db4f:	83 c4 10             	add    $0x10,%esp
f010db52:	85 c0                	test   %eax,%eax
f010db54:	75 0a                	jne    f010db60 <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010db56:	e8 a1 0a 00 00       	call   f010e5fc <test_alloc_block_FF>
f010db5b:	e9 dc 00 00 00       	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010db60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db63:	83 c0 04             	add    $0x4,%eax
f010db66:	8b 00                	mov    (%eax),%eax
f010db68:	83 ec 08             	sub    $0x8,%esp
f010db6b:	68 62 33 13 f0       	push   $0xf0133362
f010db70:	50                   	push   %eax
f010db71:	e8 d8 0f 02 00       	call   f012eb4e <strcmp>
f010db76:	83 c4 10             	add    $0x10,%esp
f010db79:	85 c0                	test   %eax,%eax
f010db7b:	75 0a                	jne    f010db87 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010db7d:	e8 84 0e 00 00       	call   f010ea06 <test_alloc_block_BF>
f010db82:	e9 b5 00 00 00       	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010db87:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db8a:	83 c0 04             	add    $0x4,%eax
f010db8d:	8b 00                	mov    (%eax),%eax
f010db8f:	83 ec 08             	sub    $0x8,%esp
f010db92:	68 6a 33 13 f0       	push   $0xf013336a
f010db97:	50                   	push   %eax
f010db98:	e8 b1 0f 02 00       	call   f012eb4e <strcmp>
f010db9d:	83 c4 10             	add    $0x10,%esp
f010dba0:	85 c0                	test   %eax,%eax
f010dba2:	75 0a                	jne    f010dbae <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010dba4:	e8 b3 12 00 00       	call   f010ee5c <test_alloc_block_NF>
f010dba9:	e9 8e 00 00 00       	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010dbae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb1:	83 c0 04             	add    $0x4,%eax
f010dbb4:	8b 00                	mov    (%eax),%eax
f010dbb6:	83 ec 08             	sub    $0x8,%esp
f010dbb9:	68 72 33 13 f0       	push   $0xf0133372
f010dbbe:	50                   	push   %eax
f010dbbf:	e8 8a 0f 02 00       	call   f012eb4e <strcmp>
f010dbc4:	83 c4 10             	add    $0x10,%esp
f010dbc7:	85 c0                	test   %eax,%eax
f010dbc9:	75 07                	jne    f010dbd2 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010dbcb:	e8 92 12 00 00       	call   f010ee62 <test_free_block_FF>
f010dbd0:	eb 6a                	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010dbd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd5:	83 c0 04             	add    $0x4,%eax
f010dbd8:	8b 00                	mov    (%eax),%eax
f010dbda:	83 ec 08             	sub    $0x8,%esp
f010dbdd:	68 79 33 13 f0       	push   $0xf0133379
f010dbe2:	50                   	push   %eax
f010dbe3:	e8 66 0f 02 00       	call   f012eb4e <strcmp>
f010dbe8:	83 c4 10             	add    $0x10,%esp
f010dbeb:	85 c0                	test   %eax,%eax
f010dbed:	75 07                	jne    f010dbf6 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010dbef:	e8 d3 20 00 00       	call   f010fcc7 <test_free_block_BF>
f010dbf4:	eb 46                	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010dbf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbf9:	83 c0 04             	add    $0x4,%eax
f010dbfc:	8b 00                	mov    (%eax),%eax
f010dbfe:	83 ec 08             	sub    $0x8,%esp
f010dc01:	68 80 33 13 f0       	push   $0xf0133380
f010dc06:	50                   	push   %eax
f010dc07:	e8 42 0f 02 00       	call   f012eb4e <strcmp>
f010dc0c:	83 c4 10             	add    $0x10,%esp
f010dc0f:	85 c0                	test   %eax,%eax
f010dc11:	75 07                	jne    f010dc1a <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010dc13:	e8 c1 2e 00 00       	call   f0110ad9 <test_free_block_NF>
f010dc18:	eb 22                	jmp    f010dc3c <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010dc1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc1d:	83 c0 04             	add    $0x4,%eax
f010dc20:	8b 00                	mov    (%eax),%eax
f010dc22:	83 ec 08             	sub    $0x8,%esp
f010dc25:	68 87 33 13 f0       	push   $0xf0133387
f010dc2a:	50                   	push   %eax
f010dc2b:	e8 1e 0f 02 00       	call   f012eb4e <strcmp>
f010dc30:	83 c4 10             	add    $0x10,%esp
f010dc33:	85 c0                	test   %eax,%eax
f010dc35:	75 05                	jne    f010dc3c <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010dc37:	e8 ba 2e 00 00       	call   f0110af6 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010dc3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dc41:	c9                   	leave  
f010dc42:	c3                   	ret    

f010dc43 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010dc43:	55                   	push   %ebp
f010dc44:	89 e5                	mov    %esp,%ebp
f010dc46:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dc49:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dc4d:	74 1a                	je     f010dc69 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010dc4f:	83 ec 0c             	sub    $0xc,%esp
f010dc52:	68 94 33 13 f0       	push   $0xf0133394
f010dc57:	e8 d5 31 ff ff       	call   f0100e31 <cprintf>
f010dc5c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc5f:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc64:	e9 e1 00 00 00       	jmp    f010dd4a <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010dc69:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc6c:	83 c0 04             	add    $0x4,%eax
f010dc6f:	8b 00                	mov    (%eax),%eax
f010dc71:	83 ec 08             	sub    $0x8,%esp
f010dc74:	68 cd 33 13 f0       	push   $0xf01333cd
f010dc79:	50                   	push   %eax
f010dc7a:	e8 cf 0e 02 00       	call   f012eb4e <strcmp>
f010dc7f:	83 c4 10             	add    $0x10,%esp
f010dc82:	85 c0                	test   %eax,%eax
f010dc84:	75 0a                	jne    f010dc90 <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010dc86:	e8 dd 42 00 00       	call   f0111f68 <test_cut_paste_pages>
f010dc8b:	e9 b5 00 00 00       	jmp    f010dd45 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010dc90:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc93:	83 c0 04             	add    $0x4,%eax
f010dc96:	8b 00                	mov    (%eax),%eax
f010dc98:	83 ec 08             	sub    $0x8,%esp
f010dc9b:	68 d6 33 13 f0       	push   $0xf01333d6
f010dca0:	50                   	push   %eax
f010dca1:	e8 a8 0e 02 00       	call   f012eb4e <strcmp>
f010dca6:	83 c4 10             	add    $0x10,%esp
f010dca9:	85 c0                	test   %eax,%eax
f010dcab:	75 0a                	jne    f010dcb7 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010dcad:	e8 07 4d 00 00       	call   f01129b9 <test_copy_paste_chunk>
f010dcb2:	e9 8e 00 00 00       	jmp    f010dd45 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010dcb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcba:	83 c0 04             	add    $0x4,%eax
f010dcbd:	8b 00                	mov    (%eax),%eax
f010dcbf:	83 ec 08             	sub    $0x8,%esp
f010dcc2:	68 e0 33 13 f0       	push   $0xf01333e0
f010dcc7:	50                   	push   %eax
f010dcc8:	e8 81 0e 02 00       	call   f012eb4e <strcmp>
f010dccd:	83 c4 10             	add    $0x10,%esp
f010dcd0:	85 c0                	test   %eax,%eax
f010dcd2:	75 07                	jne    f010dcdb <tst_chunks+0x98>
	{
		test_share_chunk();
f010dcd4:	e8 e4 5d 00 00       	call   f0113abd <test_share_chunk>
f010dcd9:	eb 6a                	jmp    f010dd45 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010dcdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcde:	83 c0 04             	add    $0x4,%eax
f010dce1:	8b 00                	mov    (%eax),%eax
f010dce3:	83 ec 08             	sub    $0x8,%esp
f010dce6:	68 e6 33 13 f0       	push   $0xf01333e6
f010dceb:	50                   	push   %eax
f010dcec:	e8 5d 0e 02 00       	call   f012eb4e <strcmp>
f010dcf1:	83 c4 10             	add    $0x10,%esp
f010dcf4:	85 c0                	test   %eax,%eax
f010dcf6:	75 07                	jne    f010dcff <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010dcf8:	e8 ee 67 00 00       	call   f01144eb <test_allocate_chunk>
f010dcfd:	eb 46                	jmp    f010dd45 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010dcff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd02:	83 c0 04             	add    $0x4,%eax
f010dd05:	8b 00                	mov    (%eax),%eax
f010dd07:	83 ec 08             	sub    $0x8,%esp
f010dd0a:	68 ef 33 13 f0       	push   $0xf01333ef
f010dd0f:	50                   	push   %eax
f010dd10:	e8 39 0e 02 00       	call   f012eb4e <strcmp>
f010dd15:	83 c4 10             	add    $0x10,%esp
f010dd18:	85 c0                	test   %eax,%eax
f010dd1a:	75 07                	jne    f010dd23 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010dd1c:	e8 d7 70 00 00       	call   f0114df8 <test_calculate_required_frames>
f010dd21:	eb 22                	jmp    f010dd45 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010dd23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd26:	83 c0 04             	add    $0x4,%eax
f010dd29:	8b 00                	mov    (%eax),%eax
f010dd2b:	83 ec 08             	sub    $0x8,%esp
f010dd2e:	68 fe 33 13 f0       	push   $0xf01333fe
f010dd33:	50                   	push   %eax
f010dd34:	e8 15 0e 02 00       	call   f012eb4e <strcmp>
f010dd39:	83 c4 10             	add    $0x10,%esp
f010dd3c:	85 c0                	test   %eax,%eax
f010dd3e:	75 05                	jne    f010dd45 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010dd40:	e8 2d 79 00 00       	call   f0115672 <test_calculate_allocated_space>
	}
	return 0;
f010dd45:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd4a:	c9                   	leave  
f010dd4b:	c3                   	ret    

f010dd4c <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010dd4c:	55                   	push   %ebp
f010dd4d:	89 e5                	mov    %esp,%ebp
f010dd4f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dd52:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dd56:	74 1a                	je     f010dd72 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010dd58:	83 ec 0c             	sub    $0xc,%esp
f010dd5b:	68 10 34 13 f0       	push   $0xf0133410
f010dd60:	e8 cc 30 ff ff       	call   f0100e31 <cprintf>
f010dd65:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd68:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd6d:	e9 ba 00 00 00       	jmp    f010de2c <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010dd72:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd75:	83 c0 04             	add    $0x4,%eax
f010dd78:	8b 00                	mov    (%eax),%eax
f010dd7a:	83 ec 08             	sub    $0x8,%esp
f010dd7d:	68 46 34 13 f0       	push   $0xf0133446
f010dd82:	50                   	push   %eax
f010dd83:	e8 c6 0d 02 00       	call   f012eb4e <strcmp>
f010dd88:	83 c4 10             	add    $0x10,%esp
f010dd8b:	85 c0                	test   %eax,%eax
f010dd8d:	75 0a                	jne    f010dd99 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010dd8f:	e8 53 3c 00 00       	call   f01119e7 <test_pt_set_page_permissions>
f010dd94:	e9 8e 00 00 00       	jmp    f010de27 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010dd99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd9c:	83 c0 04             	add    $0x4,%eax
f010dd9f:	8b 00                	mov    (%eax),%eax
f010dda1:	83 ec 08             	sub    $0x8,%esp
f010dda4:	68 4e 34 13 f0       	push   $0xf013344e
f010dda9:	50                   	push   %eax
f010ddaa:	e8 9f 0d 02 00       	call   f012eb4e <strcmp>
f010ddaf:	83 c4 10             	add    $0x10,%esp
f010ddb2:	85 c0                	test   %eax,%eax
f010ddb4:	75 07                	jne    f010ddbd <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010ddb6:	e8 8f 3e 00 00       	call   f0111c4a <test_pt_set_page_permissions_invalid_va>
f010ddbb:	eb 6a                	jmp    f010de27 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010ddbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddc0:	83 c0 04             	add    $0x4,%eax
f010ddc3:	8b 00                	mov    (%eax),%eax
f010ddc5:	83 ec 08             	sub    $0x8,%esp
f010ddc8:	68 56 34 13 f0       	push   $0xf0133456
f010ddcd:	50                   	push   %eax
f010ddce:	e8 7b 0d 02 00       	call   f012eb4e <strcmp>
f010ddd3:	83 c4 10             	add    $0x10,%esp
f010ddd6:	85 c0                	test   %eax,%eax
f010ddd8:	75 07                	jne    f010dde1 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010ddda:	e8 b4 3e 00 00       	call   f0111c93 <test_pt_get_page_permissions>
f010dddf:	eb 46                	jmp    f010de27 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010dde1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dde4:	83 c0 04             	add    $0x4,%eax
f010dde7:	8b 00                	mov    (%eax),%eax
f010dde9:	83 ec 08             	sub    $0x8,%esp
f010ddec:	68 5e 34 13 f0       	push   $0xf013345e
f010ddf1:	50                   	push   %eax
f010ddf2:	e8 57 0d 02 00       	call   f012eb4e <strcmp>
f010ddf7:	83 c4 10             	add    $0x10,%esp
f010ddfa:	85 c0                	test   %eax,%eax
f010ddfc:	75 07                	jne    f010de05 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010ddfe:	e8 d4 3f 00 00       	call   f0111dd7 <test_pt_clear_page_table_entry>
f010de03:	eb 22                	jmp    f010de27 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010de05:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de08:	83 c0 04             	add    $0x4,%eax
f010de0b:	8b 00                	mov    (%eax),%eax
f010de0d:	83 ec 08             	sub    $0x8,%esp
f010de10:	68 65 34 13 f0       	push   $0xf0133465
f010de15:	50                   	push   %eax
f010de16:	e8 33 0d 02 00       	call   f012eb4e <strcmp>
f010de1b:	83 c4 10             	add    $0x10,%esp
f010de1e:	85 c0                	test   %eax,%eax
f010de20:	75 05                	jne    f010de27 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010de22:	e8 09 41 00 00       	call   f0111f30 <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010de27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de2c:	c9                   	leave  
f010de2d:	c3                   	ret    

f010de2e <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010de2e:	55                   	push   %ebp
f010de2f:	89 e5                	mov    %esp,%ebp
f010de31:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010de34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de37:	83 c0 08             	add    $0x8,%eax
f010de3a:	8b 00                	mov    (%eax),%eax
f010de3c:	83 ec 08             	sub    $0x8,%esp
f010de3f:	68 6c 34 13 f0       	push   $0xf013346c
f010de44:	50                   	push   %eax
f010de45:	e8 04 0d 02 00       	call   f012eb4e <strcmp>
f010de4a:	83 c4 10             	add    $0x10,%esp
f010de4d:	85 c0                	test   %eax,%eax
f010de4f:	75 20                	jne    f010de71 <tst_kheap+0x43>
f010de51:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010de55:	74 1a                	je     f010de71 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010de57:	83 ec 0c             	sub    $0xc,%esp
f010de5a:	68 74 34 13 f0       	push   $0xf0133474
f010de5f:	e8 cd 2f ff ff       	call   f0100e31 <cprintf>
f010de64:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de67:	b8 00 00 00 00       	mov    $0x0,%eax
f010de6c:	e9 41 03 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010de71:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de74:	83 c0 08             	add    $0x8,%eax
f010de77:	8b 00                	mov    (%eax),%eax
f010de79:	83 ec 08             	sub    $0x8,%esp
f010de7c:	68 6c 34 13 f0       	push   $0xf013346c
f010de81:	50                   	push   %eax
f010de82:	e8 c7 0c 02 00       	call   f012eb4e <strcmp>
f010de87:	83 c4 10             	add    $0x10,%esp
f010de8a:	85 c0                	test   %eax,%eax
f010de8c:	74 20                	je     f010deae <tst_kheap+0x80>
f010de8e:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010de92:	74 1a                	je     f010deae <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010de94:	83 ec 0c             	sub    $0xc,%esp
f010de97:	68 c4 34 13 f0       	push   $0xf01334c4
f010de9c:	e8 90 2f ff ff       	call   f0100e31 <cprintf>
f010dea1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dea4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dea9:	e9 04 03 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010deae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deb1:	83 c0 04             	add    $0x4,%eax
f010deb4:	8b 00                	mov    (%eax),%eax
f010deb6:	83 ec 08             	sub    $0x8,%esp
f010deb9:	68 09 35 13 f0       	push   $0xf0133509
f010debe:	50                   	push   %eax
f010debf:	e8 8a 0c 02 00       	call   f012eb4e <strcmp>
f010dec4:	83 c4 10             	add    $0x10,%esp
f010dec7:	85 c0                	test   %eax,%eax
f010dec9:	74 1d                	je     f010dee8 <tst_kheap+0xba>
f010decb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dece:	83 c0 04             	add    $0x4,%eax
f010ded1:	8b 00                	mov    (%eax),%eax
f010ded3:	83 ec 08             	sub    $0x8,%esp
f010ded6:	68 0c 35 13 f0       	push   $0xf013350c
f010dedb:	50                   	push   %eax
f010dedc:	e8 6d 0c 02 00       	call   f012eb4e <strcmp>
f010dee1:	83 c4 10             	add    $0x10,%esp
f010dee4:	85 c0                	test   %eax,%eax
f010dee6:	75 1a                	jne    f010df02 <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010dee8:	e8 49 f9 ff ff       	call   f010d836 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010deed:	83 ec 0c             	sub    $0xc,%esp
f010def0:	68 10 35 13 f0       	push   $0xf0133510
f010def5:	e8 37 2f ff ff       	call   f0100e31 <cprintf>
f010defa:	83 c4 10             	add    $0x10,%esp
f010defd:	e9 a0 00 00 00       	jmp    f010dfa2 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010df02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df05:	83 c0 04             	add    $0x4,%eax
f010df08:	8b 00                	mov    (%eax),%eax
f010df0a:	83 ec 08             	sub    $0x8,%esp
f010df0d:	68 3d 35 13 f0       	push   $0xf013353d
f010df12:	50                   	push   %eax
f010df13:	e8 36 0c 02 00       	call   f012eb4e <strcmp>
f010df18:	83 c4 10             	add    $0x10,%esp
f010df1b:	85 c0                	test   %eax,%eax
f010df1d:	74 1d                	je     f010df3c <tst_kheap+0x10e>
f010df1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df22:	83 c0 04             	add    $0x4,%eax
f010df25:	8b 00                	mov    (%eax),%eax
f010df27:	83 ec 08             	sub    $0x8,%esp
f010df2a:	68 40 35 13 f0       	push   $0xf0133540
f010df2f:	50                   	push   %eax
f010df30:	e8 19 0c 02 00       	call   f012eb4e <strcmp>
f010df35:	83 c4 10             	add    $0x10,%esp
f010df38:	85 c0                	test   %eax,%eax
f010df3a:	75 17                	jne    f010df53 <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010df3c:	e8 05 f9 ff ff       	call   f010d846 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010df41:	83 ec 0c             	sub    $0xc,%esp
f010df44:	68 44 35 13 f0       	push   $0xf0133544
f010df49:	e8 e3 2e ff ff       	call   f0100e31 <cprintf>
f010df4e:	83 c4 10             	add    $0x10,%esp
f010df51:	eb 4f                	jmp    f010dfa2 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010df53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df56:	83 c0 04             	add    $0x4,%eax
f010df59:	8b 00                	mov    (%eax),%eax
f010df5b:	83 ec 08             	sub    $0x8,%esp
f010df5e:	68 70 35 13 f0       	push   $0xf0133570
f010df63:	50                   	push   %eax
f010df64:	e8 e5 0b 02 00       	call   f012eb4e <strcmp>
f010df69:	83 c4 10             	add    $0x10,%esp
f010df6c:	85 c0                	test   %eax,%eax
f010df6e:	74 1d                	je     f010df8d <tst_kheap+0x15f>
f010df70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df73:	83 c0 04             	add    $0x4,%eax
f010df76:	8b 00                	mov    (%eax),%eax
f010df78:	83 ec 08             	sub    $0x8,%esp
f010df7b:	68 73 35 13 f0       	push   $0xf0133573
f010df80:	50                   	push   %eax
f010df81:	e8 c8 0b 02 00       	call   f012eb4e <strcmp>
f010df86:	83 c4 10             	add    $0x10,%esp
f010df89:	85 c0                	test   %eax,%eax
f010df8b:	75 15                	jne    f010dfa2 <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010df8d:	e8 c4 f8 ff ff       	call   f010d856 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010df92:	83 ec 0c             	sub    $0xc,%esp
f010df95:	68 78 35 13 f0       	push   $0xf0133578
f010df9a:	e8 92 2e ff ff       	call   f0100e31 <cprintf>
f010df9f:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010dfa2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa5:	83 c0 08             	add    $0x8,%eax
f010dfa8:	8b 00                	mov    (%eax),%eax
f010dfaa:	83 ec 08             	sub    $0x8,%esp
f010dfad:	68 6c 34 13 f0       	push   $0xf013346c
f010dfb2:	50                   	push   %eax
f010dfb3:	e8 96 0b 02 00       	call   f012eb4e <strcmp>
f010dfb8:	83 c4 10             	add    $0x10,%esp
f010dfbb:	85 c0                	test   %eax,%eax
f010dfbd:	0f 85 13 01 00 00    	jne    f010e0d6 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010dfc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfc6:	83 c0 0c             	add    $0xc,%eax
f010dfc9:	8b 00                	mov    (%eax),%eax
f010dfcb:	83 ec 04             	sub    $0x4,%esp
f010dfce:	6a 0a                	push   $0xa
f010dfd0:	6a 00                	push   $0x0
f010dfd2:	50                   	push   %eax
f010dfd3:	e8 ca 0d 02 00       	call   f012eda2 <strtol>
f010dfd8:	83 c4 10             	add    $0x10,%esp
f010dfdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010dfde:	e8 83 f8 ff ff       	call   f010d866 <isKHeapPlacementStrategyFIRSTFIT>
f010dfe3:	84 c0                	test   %al,%al
f010dfe5:	74 54                	je     f010e03b <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010dfe7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dfeb:	75 1a                	jne    f010e007 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010dfed:	83 ec 0c             	sub    $0xc,%esp
f010dff0:	68 a4 35 13 f0       	push   $0xf01335a4
f010dff5:	e8 37 2e ff ff       	call   f0100e31 <cprintf>
f010dffa:	83 c4 10             	add    $0x10,%esp
				return 0;
f010dffd:	b8 00 00 00 00       	mov    $0x0,%eax
f010e002:	e9 ab 01 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e007:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e00b:	75 0a                	jne    f010e017 <tst_kheap+0x1e9>
				test_kmalloc();
f010e00d:	e8 59 a0 00 00       	call   f011806b <test_kmalloc>
f010e012:	e9 b5 00 00 00       	jmp    f010e0cc <tst_kheap+0x29e>
			else if (testNum == 2)
f010e017:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e01b:	75 0a                	jne    f010e027 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e01d:	e8 96 e2 00 00       	call   f011c2b8 <test_kmalloc_firstfit1>
f010e022:	e9 a5 00 00 00       	jmp    f010e0cc <tst_kheap+0x29e>
			else if (testNum == 3)
f010e027:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e02b:	0f 85 9b 00 00 00    	jne    f010e0cc <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e031:	e8 30 f3 00 00       	call   f011d366 <test_kmalloc_firstfit2>
f010e036:	e9 91 00 00 00       	jmp    f010e0cc <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e03b:	e8 3b f8 ff ff       	call   f010d87b <isKHeapPlacementStrategyBESTFIT>
f010e040:	84 c0                	test   %al,%al
f010e042:	74 47                	je     f010e08b <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e044:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e048:	75 1a                	jne    f010e064 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e04a:	83 ec 0c             	sub    $0xc,%esp
f010e04d:	68 f4 35 13 f0       	push   $0xf01335f4
f010e052:	e8 da 2d ff ff       	call   f0100e31 <cprintf>
f010e057:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e05a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e05f:	e9 4e 01 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e064:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e068:	75 07                	jne    f010e071 <tst_kheap+0x243>
				test_kmalloc();
f010e06a:	e8 fc 9f 00 00       	call   f011806b <test_kmalloc>
f010e06f:	eb 5b                	jmp    f010e0cc <tst_kheap+0x29e>
			else if (testNum == 2)
f010e071:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e075:	75 07                	jne    f010e07e <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e077:	e8 b8 c2 00 00       	call   f011a334 <test_kmalloc_bestfit1>
f010e07c:	eb 4e                	jmp    f010e0cc <tst_kheap+0x29e>
			else if (testNum == 3)
f010e07e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e082:	75 48                	jne    f010e0cc <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e084:	e8 43 d2 00 00       	call   f011b2cc <test_kmalloc_bestfit2>
f010e089:	eb 41                	jmp    f010e0cc <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e08b:	e8 00 f8 ff ff       	call   f010d890 <isKHeapPlacementStrategyNEXTFIT>
f010e090:	84 c0                	test   %al,%al
f010e092:	74 38                	je     f010e0cc <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e094:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e098:	75 1a                	jne    f010e0b4 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e09a:	83 ec 0c             	sub    $0xc,%esp
f010e09d:	68 44 36 13 f0       	push   $0xf0133644
f010e0a2:	e8 8a 2d ff ff       	call   f0100e31 <cprintf>
f010e0a7:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e0aa:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0af:	e9 fe 00 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e0b4:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e0b8:	75 07                	jne    f010e0c1 <tst_kheap+0x293>
				test_kmalloc();
f010e0ba:	e8 ac 9f 00 00       	call   f011806b <test_kmalloc>
f010e0bf:	eb 0b                	jmp    f010e0cc <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e0c1:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e0c5:	75 05                	jne    f010e0cc <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e0c7:	e8 ab af 00 00       	call   f0119077 <test_kmalloc_nextfit>
		}
		return 0;
f010e0cc:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0d1:	e9 dc 00 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0d9:	83 c0 08             	add    $0x8,%eax
f010e0dc:	8b 00                	mov    (%eax),%eax
f010e0de:	83 ec 08             	sub    $0x8,%esp
f010e0e1:	68 92 36 13 f0       	push   $0xf0133692
f010e0e6:	50                   	push   %eax
f010e0e7:	e8 62 0a 02 00       	call   f012eb4e <strcmp>
f010e0ec:	83 c4 10             	add    $0x10,%esp
f010e0ef:	85 c0                	test   %eax,%eax
f010e0f1:	75 28                	jne    f010e11b <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e0f3:	e8 83 f7 ff ff       	call   f010d87b <isKHeapPlacementStrategyBESTFIT>
f010e0f8:	84 c0                	test   %al,%al
f010e0fa:	75 09                	jne    f010e105 <tst_kheap+0x2d7>
f010e0fc:	e8 65 f7 ff ff       	call   f010d866 <isKHeapPlacementStrategyFIRSTFIT>
f010e101:	84 c0                	test   %al,%al
f010e103:	74 07                	je     f010e10c <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e105:	e8 15 2f 01 00       	call   f012101f <test_kfree_bestfirstfit>
f010e10a:	eb 05                	jmp    f010e111 <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e10c:	e8 1c 11 01 00       	call   f011f22d <test_kfree>
		}
		return 0;
f010e111:	b8 00 00 00 00       	mov    $0x0,%eax
f010e116:	e9 97 00 00 00       	jmp    f010e1b2 <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e11b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e11e:	83 c0 08             	add    $0x8,%eax
f010e121:	8b 00                	mov    (%eax),%eax
f010e123:	83 ec 08             	sub    $0x8,%esp
f010e126:	68 98 36 13 f0       	push   $0xf0133698
f010e12b:	50                   	push   %eax
f010e12c:	e8 1d 0a 02 00       	call   f012eb4e <strcmp>
f010e131:	83 c4 10             	add    $0x10,%esp
f010e134:	85 c0                	test   %eax,%eax
f010e136:	75 0c                	jne    f010e144 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e138:	e8 8c 46 01 00       	call   f01227c9 <test_kheap_phys_addr>
		return 0;
f010e13d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e142:	eb 6e                	jmp    f010e1b2 <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e144:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e147:	83 c0 08             	add    $0x8,%eax
f010e14a:	8b 00                	mov    (%eax),%eax
f010e14c:	83 ec 08             	sub    $0x8,%esp
f010e14f:	68 a2 36 13 f0       	push   $0xf01336a2
f010e154:	50                   	push   %eax
f010e155:	e8 f4 09 02 00       	call   f012eb4e <strcmp>
f010e15a:	83 c4 10             	add    $0x10,%esp
f010e15d:	85 c0                	test   %eax,%eax
f010e15f:	75 0c                	jne    f010e16d <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e161:	e8 a1 57 01 00       	call   f0123907 <test_kheap_virt_addr>
		return 0;
f010e166:	b8 00 00 00 00       	mov    $0x0,%eax
f010e16b:	eb 45                	jmp    f010e1b2 <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e16d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e170:	83 c0 08             	add    $0x8,%eax
f010e173:	8b 00                	mov    (%eax),%eax
f010e175:	83 ec 08             	sub    $0x8,%esp
f010e178:	68 ac 36 13 f0       	push   $0xf01336ac
f010e17d:	50                   	push   %eax
f010e17e:	e8 cb 09 02 00       	call   f012eb4e <strcmp>
f010e183:	83 c4 10             	add    $0x10,%esp
f010e186:	85 c0                	test   %eax,%eax
f010e188:	75 23                	jne    f010e1ad <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e18a:	e8 01 f7 ff ff       	call   f010d890 <isKHeapPlacementStrategyNEXTFIT>
f010e18f:	84 c0                	test   %al,%al
f010e191:	74 05                	je     f010e198 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e193:	e8 12 b9 01 00       	call   f0129aaa <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e198:	e8 de f6 ff ff       	call   f010d87b <isKHeapPlacementStrategyBESTFIT>
f010e19d:	84 c0                	test   %al,%al
f010e19f:	74 05                	je     f010e1a6 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e1a1:	e8 98 d6 01 00       	call   f012b83e <test_krealloc_BF>
		}
		return 0;
f010e1a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1ab:	eb 05                	jmp    f010e1b2 <tst_kheap+0x384>
	}
	return 0;
f010e1ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e1b2:	c9                   	leave  
f010e1b3:	c3                   	ret    

f010e1b4 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e1b4:	55                   	push   %ebp
f010e1b5:	89 e5                	mov    %esp,%ebp
f010e1b7:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e1ba:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1c4:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e1ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1cd:	83 c0 04             	add    $0x4,%eax
f010e1d0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e1d6:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e1dd:	83 ec 08             	sub    $0x8,%esp
f010e1e0:	ff 75 f0             	pushl  -0x10(%ebp)
f010e1e3:	68 00 00 00 f6       	push   $0xf6000000
f010e1e8:	e8 bf 13 02 00       	call   f012f5ac <initialize_dynamic_allocator>
f010e1ed:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e1f0:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e1fa:	8a 40 04             	mov    0x4(%eax),%al
f010e1fd:	3c 01                	cmp    $0x1,%al
f010e1ff:	75 0a                	jne    f010e20b <test_initialize_dynamic_allocator+0x57>
f010e201:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e204:	8b 00                	mov    (%eax),%eax
f010e206:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e209:	74 14                	je     f010e21f <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e20b:	83 ec 04             	sub    $0x4,%esp
f010e20e:	68 b8 36 13 f0       	push   $0xf01336b8
f010e213:	6a 29                	push   $0x29
f010e215:	68 e4 36 13 f0       	push   $0xf01336e4
f010e21a:	e8 91 1f ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e21f:	83 ec 0c             	sub    $0xc,%esp
f010e222:	68 08 37 13 f0       	push   $0xf0133708
f010e227:	e8 05 2c ff ff       	call   f0100e31 <cprintf>
f010e22c:	83 c4 10             	add    $0x10,%esp
}
f010e22f:	90                   	nop
f010e230:	c9                   	leave  
f010e231:	c3                   	ret    

f010e232 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e232:	55                   	push   %ebp
f010e233:	89 e5                	mov    %esp,%ebp
f010e235:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e23f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e246:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e24d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e250:	83 ec 08             	sub    $0x8,%esp
f010e253:	50                   	push   %eax
f010e254:	68 00 00 00 f6       	push   $0xf6000000
f010e259:	e8 4e 13 02 00       	call   f012f5ac <initialize_dynamic_allocator>
f010e25e:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e261:	83 ec 0c             	sub    $0xc,%esp
f010e264:	68 58 37 13 f0       	push   $0xf0133758
f010e269:	e8 c3 2b ff ff       	call   f0100e31 <cprintf>
f010e26e:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e271:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e278:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e27b:	89 c2                	mov    %eax,%edx
f010e27d:	01 d2                	add    %edx,%edx
f010e27f:	01 d0                	add    %edx,%eax
f010e281:	83 ec 08             	sub    $0x8,%esp
f010e284:	ff 75 08             	pushl  0x8(%ebp)
f010e287:	50                   	push   %eax
f010e288:	e8 06 12 02 00       	call   f012f493 <alloc_block>
f010e28d:	83 c4 10             	add    $0x10,%esp
f010e290:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e293:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e297:	74 17                	je     f010e2b0 <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e299:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e2a0:	83 ec 0c             	sub    $0xc,%esp
f010e2a3:	68 94 37 13 f0       	push   $0xf0133794
f010e2a8:	e8 84 2b ff ff       	call   f0100e31 <cprintf>
f010e2ad:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e2b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e2b3:	83 ec 08             	sub    $0x8,%esp
f010e2b6:	ff 75 08             	pushl  0x8(%ebp)
f010e2b9:	50                   	push   %eax
f010e2ba:	e8 d4 11 02 00       	call   f012f493 <alloc_block>
f010e2bf:	83 c4 10             	add    $0x10,%esp
f010e2c2:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e2c5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e2c9:	74 17                	je     f010e2e2 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e2cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e2d2:	83 ec 0c             	sub    $0xc,%esp
f010e2d5:	68 ec 37 13 f0       	push   $0xf01337ec
f010e2da:	e8 52 2b ff ff       	call   f0100e31 <cprintf>
f010e2df:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e2e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e2e6:	74 04                	je     f010e2ec <test_initial_alloc+0xba>
	{
		eval += 5;
f010e2e8:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e2ec:	83 ec 0c             	sub    $0xc,%esp
f010e2ef:	68 44 38 13 f0       	push   $0xf0133844
f010e2f4:	e8 38 2b ff ff       	call   f0100e31 <cprintf>
f010e2f9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e2fc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e303:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e30a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e311:	eb 2a                	jmp    f010e33d <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e313:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e316:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010e31d:	89 d0                	mov    %edx,%eax
f010e31f:	c1 e0 02             	shl    $0x2,%eax
f010e322:	01 d0                	add    %edx,%eax
f010e324:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e32b:	01 d0                	add    %edx,%eax
f010e32d:	c1 e0 03             	shl    $0x3,%eax
f010e330:	89 c2                	mov    %eax,%edx
f010e332:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e335:	01 d0                	add    %edx,%eax
f010e337:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e33a:	ff 45 e8             	incl   -0x18(%ebp)
f010e33d:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e341:	7e d0                	jle    f010e313 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e343:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e346:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e349:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e34c:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e350:	7f 17                	jg     f010e369 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e352:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e359:	83 ec 0c             	sub    $0xc,%esp
f010e35c:	68 90 38 13 f0       	push   $0xf0133890
f010e361:	e8 cb 2a ff ff       	call   f0100e31 <cprintf>
f010e366:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e369:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e370:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e377:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e37e:	e9 fc 00 00 00       	jmp    f010e47f <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e383:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e38a:	e9 e0 00 00 00       	jmp    f010e46f <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e38f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e392:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e399:	83 e8 10             	sub    $0x10,%eax
f010e39c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e39f:	83 ec 08             	sub    $0x8,%esp
f010e3a2:	ff 75 08             	pushl  0x8(%ebp)
f010e3a5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e3a8:	e8 e6 10 02 00       	call   f012f493 <alloc_block>
f010e3ad:	83 c4 10             	add    $0x10,%esp
f010e3b0:	89 c2                	mov    %eax,%edx
f010e3b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3b5:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010e3bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3bf:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e3c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e3c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e3cc:	d1 e8                	shr    %eax
f010e3ce:	89 c2                	mov    %eax,%edx
f010e3d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e3d3:	01 c2                	add    %eax,%edx
f010e3d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3d8:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e3df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e3e2:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e3e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e3e8:	01 c2                	add    %eax,%edx
f010e3ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3ed:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e3f4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e3f8:	74 0b                	je     f010e405 <test_initial_alloc+0x1d3>
f010e3fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e3fd:	83 c0 10             	add    $0x10,%eax
f010e400:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e403:	74 27                	je     f010e42c <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e409:	74 21                	je     f010e42c <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e40b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e412:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e415:	83 c0 10             	add    $0x10,%eax
f010e418:	ff 75 cc             	pushl  -0x34(%ebp)
f010e41b:	50                   	push   %eax
f010e41c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e41f:	68 0c 39 13 f0       	push   $0xf013390c
f010e424:	e8 08 2a ff ff       	call   f0100e31 <cprintf>
f010e429:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e42c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e42f:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e436:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e439:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e43c:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010e443:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e446:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e44c:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010e453:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e456:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e459:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e45c:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010e463:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e466:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e469:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e46c:	ff 45 d8             	incl   -0x28(%ebp)
f010e46f:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e476:	0f 8e 13 ff ff ff    	jle    f010e38f <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e47c:	ff 45 dc             	incl   -0x24(%ebp)
f010e47f:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e483:	0f 8e fa fe ff ff    	jle    f010e383 <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e489:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e48d:	74 04                	je     f010e493 <test_initial_alloc+0x261>
	{
		eval += 20;
f010e48f:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e493:	83 ec 0c             	sub    $0xc,%esp
f010e496:	68 70 39 13 f0       	push   $0xf0133970
f010e49b:	e8 91 29 ff ff       	call   f0100e31 <cprintf>
f010e4a0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e4a3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e4aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e4ad:	83 e8 10             	sub    $0x10,%eax
f010e4b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e4b3:	83 ec 08             	sub    $0x8,%esp
f010e4b6:	ff 75 08             	pushl  0x8(%ebp)
f010e4b9:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e4bc:	e8 d2 0f 02 00       	call   f012f493 <alloc_block>
f010e4c1:	83 c4 10             	add    $0x10,%esp
f010e4c4:	89 c2                	mov    %eax,%edx
f010e4c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4c9:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010e4d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4d3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e4da:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e4dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e4e0:	d1 e8                	shr    %eax
f010e4e2:	89 c2                	mov    %eax,%edx
f010e4e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e4e7:	01 c2                	add    %eax,%edx
f010e4e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4ec:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e4f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e4f6:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e4f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e4fc:	01 c2                	add    %eax,%edx
f010e4fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e501:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e508:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e50c:	74 0b                	je     f010e519 <test_initial_alloc+0x2e7>
f010e50e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e511:	83 c0 10             	add    $0x10,%eax
f010e514:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e517:	74 17                	je     f010e530 <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e519:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e520:	83 ec 0c             	sub    $0xc,%esp
f010e523:	68 bc 39 13 f0       	push   $0xf01339bc
f010e528:	e8 04 29 ff ff       	call   f0100e31 <cprintf>
f010e52d:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e530:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e533:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010e53a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e53d:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e540:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e543:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010e54a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e54d:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e550:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e553:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010e55a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e55d:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e560:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e564:	74 04                	je     f010e56a <test_initial_alloc+0x338>
	{
		eval += 5;
f010e566:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e56a:	83 ec 0c             	sub    $0xc,%esp
f010e56d:	68 04 3a 13 f0       	push   $0xf0133a04
f010e572:	e8 ba 28 ff ff       	call   f0100e31 <cprintf>
f010e577:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e57a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e581:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e588:	eb 5b                	jmp    f010e5e5 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e58a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e58d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e594:	66 8b 00             	mov    (%eax),%ax
f010e597:	98                   	cwtl   
f010e598:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e59b:	75 26                	jne    f010e5c3 <test_initial_alloc+0x391>
f010e59d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5a0:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010e5a7:	66 8b 00             	mov    (%eax),%ax
f010e5aa:	98                   	cwtl   
f010e5ab:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e5ae:	75 13                	jne    f010e5c3 <test_initial_alloc+0x391>
f010e5b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5b3:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010e5ba:	66 8b 00             	mov    (%eax),%ax
f010e5bd:	98                   	cwtl   
f010e5be:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e5c1:	74 1f                	je     f010e5e2 <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e5c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e5ca:	83 ec 04             	sub    $0x4,%esp
f010e5cd:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e5d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e5d3:	68 38 3a 13 f0       	push   $0xf0133a38
f010e5d8:	e8 54 28 ff ff       	call   f0100e31 <cprintf>
f010e5dd:	83 c4 10             	add    $0x10,%esp
			break;
f010e5e0:	eb 0b                	jmp    f010e5ed <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e5e2:	ff 45 d4             	incl   -0x2c(%ebp)
f010e5e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5e8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e5eb:	7c 9d                	jl     f010e58a <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e5ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e5f1:	74 04                	je     f010e5f7 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e5f3:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e5f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e5fa:	c9                   	leave  
f010e5fb:	c3                   	ret    

f010e5fc <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e5fc:	55                   	push   %ebp
f010e5fd:	89 e5                	mov    %esp,%ebp
f010e5ff:	57                   	push   %edi
f010e600:	56                   	push   %esi
f010e601:	53                   	push   %ebx
f010e602:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010e608:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010e60f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010e616:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010e61d:	83 ec 0c             	sub    $0xc,%esp
f010e620:	68 88 3a 13 f0       	push   $0xf0133a88
f010e625:	e8 07 28 ff ff       	call   f0100e31 <cprintf>
f010e62a:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010e62d:	83 ec 0c             	sub    $0xc,%esp
f010e630:	68 c4 3a 13 f0       	push   $0xf0133ac4
f010e635:	e8 f7 27 ff ff       	call   f0100e31 <cprintf>
f010e63a:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010e63d:	83 ec 0c             	sub    $0xc,%esp
f010e640:	68 88 3a 13 f0       	push   $0xf0133a88
f010e645:	e8 e7 27 ff ff       	call   f0100e31 <cprintf>
f010e64a:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010e64d:	83 ec 0c             	sub    $0xc,%esp
f010e650:	6a 01                	push   $0x1
f010e652:	e8 db fb ff ff       	call   f010e232 <test_initial_alloc>
f010e657:	83 c4 10             	add    $0x10,%esp
f010e65a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010e65d:	83 ec 0c             	sub    $0xc,%esp
f010e660:	68 00 3b 13 f0       	push   $0xf0133b00
f010e665:	e8 c7 27 ff ff       	call   f0100e31 <cprintf>
f010e66a:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010e66d:	83 ec 0c             	sub    $0xc,%esp
f010e670:	68 38 3b 13 f0       	push   $0xf0133b38
f010e675:	e8 b7 27 ff ff       	call   f0100e31 <cprintf>
f010e67a:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010e67d:	83 ec 0c             	sub    $0xc,%esp
f010e680:	68 00 3b 13 f0       	push   $0xf0133b00
f010e685:	e8 a7 27 ff ff       	call   f0100e31 <cprintf>
f010e68a:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010e68d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e694:	eb 2c                	jmp    f010e6c2 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010e696:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010e699:	89 d0                	mov    %edx,%eax
f010e69b:	c1 e0 02             	shl    $0x2,%eax
f010e69e:	01 d0                	add    %edx,%eax
f010e6a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e6a7:	01 d0                	add    %edx,%eax
f010e6a9:	c1 e0 03             	shl    $0x3,%eax
f010e6ac:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e6b3:	83 ec 0c             	sub    $0xc,%esp
f010e6b6:	50                   	push   %eax
f010e6b7:	e8 7e 0f 02 00       	call   f012f63a <free_block>
f010e6bc:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010e6bf:	ff 45 dc             	incl   -0x24(%ebp)
f010e6c2:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e6c6:	7e ce                	jle    f010e696 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e6c8:	83 ec 0c             	sub    $0xc,%esp
f010e6cb:	68 58 37 13 f0       	push   $0xf0133758
f010e6d0:	e8 5c 27 ff ff       	call   f0100e31 <cprintf>
f010e6d5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e6d8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010e6df:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e6e6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e6ed:	eb 1f                	jmp    f010e70e <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010e6ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e6f2:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e6f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e6fc:	76 0d                	jbe    f010e70b <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010e6fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e701:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e708:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010e70b:	ff 45 d4             	incl   -0x2c(%ebp)
f010e70e:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010e712:	7e db                	jle    f010e6ef <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010e714:	83 ec 08             	sub    $0x8,%esp
f010e717:	6a 01                	push   $0x1
f010e719:	ff 75 d8             	pushl  -0x28(%ebp)
f010e71c:	e8 72 0d 02 00       	call   f012f493 <alloc_block>
f010e721:	83 c4 10             	add    $0x10,%esp
f010e724:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010e727:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e72b:	74 17                	je     f010e744 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010e72d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010e734:	83 ec 0c             	sub    $0xc,%esp
f010e737:	68 70 3b 13 f0       	push   $0xf0133b70
f010e73c:	e8 f0 26 ff ff       	call   f0100e31 <cprintf>
f010e741:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e748:	74 04                	je     f010e74e <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010e74a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010e74e:	83 ec 0c             	sub    $0xc,%esp
f010e751:	68 e8 3b 13 f0       	push   $0xf0133be8
f010e756:	e8 d6 26 ff ff       	call   f0100e31 <cprintf>
f010e75b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e75e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010e765:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e768:	bb a8 3d 13 f0       	mov    $0xf0133da8,%ebx
f010e76d:	ba 03 00 00 00       	mov    $0x3,%edx
f010e772:	89 c7                	mov    %eax,%edi
f010e774:	89 de                	mov    %ebx,%esi
f010e776:	89 d1                	mov    %edx,%ecx
f010e778:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010e77a:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f010e77f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010e782:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010e789:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e78c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010e78f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e792:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010e797:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010e79a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010e7a1:	e9 c6 00 00 00       	jmp    f010e86c <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010e7a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7a9:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010e7ad:	83 e8 10             	sub    $0x10,%eax
f010e7b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010e7b3:	83 ec 08             	sub    $0x8,%esp
f010e7b6:	6a 01                	push   $0x1
f010e7b8:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e7bb:	e8 d3 0c 02 00       	call   f012f493 <alloc_block>
f010e7c0:	83 c4 10             	add    $0x10,%esp
f010e7c3:	89 c2                	mov    %eax,%edx
f010e7c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7c8:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010e7cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7cf:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e7d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010e7d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e7d9:	d1 e8                	shr    %eax
f010e7db:	89 c2                	mov    %eax,%edx
f010e7dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e7e0:	01 c2                	add    %eax,%edx
f010e7e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7e5:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010e7e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e7ec:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e7ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e7f2:	01 c2                	add    %eax,%edx
f010e7f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7f7:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010e7fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e801:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e805:	85 c0                	test   %eax,%eax
f010e807:	74 12                	je     f010e81b <test_alloc_block_FF+0x21f>
f010e809:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e80c:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010e810:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e813:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010e817:	39 c2                	cmp    %eax,%edx
f010e819:	74 27                	je     f010e842 <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010e81b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010e822:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e825:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010e829:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e82c:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010e830:	52                   	push   %edx
f010e831:	50                   	push   %eax
f010e832:	ff 75 d0             	pushl  -0x30(%ebp)
f010e835:	68 44 3c 13 f0       	push   $0xf0133c44
f010e83a:	e8 f2 25 ff ff       	call   f0100e31 <cprintf>
f010e83f:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010e842:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e845:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e849:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010e84e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e851:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e855:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010e85a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e85d:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e864:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010e869:	ff 45 d0             	incl   -0x30(%ebp)
f010e86c:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010e870:	0f 8e 30 ff ff ff    	jle    f010e7a6 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010e876:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e87a:	74 04                	je     f010e880 <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010e87c:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e880:	83 ec 0c             	sub    $0xc,%esp
f010e883:	68 70 39 13 f0       	push   $0xf0133970
f010e888:	e8 a4 25 ff ff       	call   f0100e31 <cprintf>
f010e88d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e890:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010e897:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010e89e:	83 ec 08             	sub    $0x8,%esp
f010e8a1:	6a 01                	push   $0x1
f010e8a3:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e8a6:	e8 e8 0b 02 00       	call   f012f493 <alloc_block>
f010e8ab:	83 c4 10             	add    $0x10,%esp
f010e8ae:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010e8b1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e8b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010e8b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8ba:	d1 e8                	shr    %eax
f010e8bc:	89 c2                	mov    %eax,%edx
f010e8be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e8c1:	01 d0                	add    %edx,%eax
f010e8c3:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010e8c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8c9:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e8cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e8cf:	01 d0                	add    %edx,%eax
f010e8d1:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010e8d4:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010e8d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e8da:	01 d0                	add    %edx,%eax
f010e8dc:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010e8e1:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010e8e4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e8e8:	74 08                	je     f010e8f2 <test_alloc_block_FF+0x2f6>
f010e8ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e8ed:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010e8f0:	74 1d                	je     f010e90f <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010e8f2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010e8f9:	83 ec 04             	sub    $0x4,%esp
f010e8fc:	ff 75 c8             	pushl  -0x38(%ebp)
f010e8ff:	ff 75 bc             	pushl  -0x44(%ebp)
f010e902:	68 a8 3c 13 f0       	push   $0xf0133ca8
f010e907:	e8 25 25 ff ff       	call   f0100e31 <cprintf>
f010e90c:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010e90f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e912:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010e917:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e91a:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010e91f:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e922:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010e927:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e92b:	74 04                	je     f010e931 <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010e92d:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e931:	83 ec 0c             	sub    $0xc,%esp
f010e934:	68 04 3a 13 f0       	push   $0xf0133a04
f010e939:	e8 f3 24 ff ff       	call   f0100e31 <cprintf>
f010e93e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e941:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010e948:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010e94f:	e9 82 00 00 00       	jmp    f010e9d6 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010e954:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e957:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e95b:	66 8b 00             	mov    (%eax),%ax
f010e95e:	66 3d 61 01          	cmp    $0x161,%ax
f010e962:	75 23                	jne    f010e987 <test_alloc_block_FF+0x38b>
f010e964:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e967:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e96b:	66 8b 00             	mov    (%eax),%ax
f010e96e:	66 3d 61 01          	cmp    $0x161,%ax
f010e972:	75 13                	jne    f010e987 <test_alloc_block_FF+0x38b>
f010e974:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e977:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e97e:	66 8b 00             	mov    (%eax),%ax
f010e981:	66 3d 61 01          	cmp    $0x161,%ax
f010e985:	74 4c                	je     f010e9d3 <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010e987:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010e98e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e991:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e998:	66 8b 00             	mov    (%eax),%ax
f010e99b:	0f bf c8             	movswl %ax,%ecx
f010e99e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9a1:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e9a5:	66 8b 00             	mov    (%eax),%ax
f010e9a8:	0f bf d0             	movswl %ax,%edx
f010e9ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9ae:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e9b2:	66 8b 00             	mov    (%eax),%ax
f010e9b5:	98                   	cwtl   
f010e9b6:	83 ec 08             	sub    $0x8,%esp
f010e9b9:	51                   	push   %ecx
f010e9ba:	52                   	push   %edx
f010e9bb:	50                   	push   %eax
f010e9bc:	68 61 01 00 00       	push   $0x161
f010e9c1:	ff 75 cc             	pushl  -0x34(%ebp)
f010e9c4:	68 08 3d 13 f0       	push   $0xf0133d08
f010e9c9:	e8 63 24 ff ff       	call   f0100e31 <cprintf>
f010e9ce:	83 c4 20             	add    $0x20,%esp
			break;
f010e9d1:	eb 0d                	jmp    f010e9e0 <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010e9d3:	ff 45 cc             	incl   -0x34(%ebp)
f010e9d6:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010e9da:	0f 8e 74 ff ff ff    	jle    f010e954 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010e9e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e9e4:	74 04                	je     f010e9ea <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010e9e6:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010e9ea:	83 ec 08             	sub    $0x8,%esp
f010e9ed:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e9f0:	68 74 3d 13 f0       	push   $0xf0133d74
f010e9f5:	e8 37 24 ff ff       	call   f0100e31 <cprintf>
f010e9fa:	83 c4 10             	add    $0x10,%esp
}
f010e9fd:	90                   	nop
f010e9fe:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ea01:	5b                   	pop    %ebx
f010ea02:	5e                   	pop    %esi
f010ea03:	5f                   	pop    %edi
f010ea04:	5d                   	pop    %ebp
f010ea05:	c3                   	ret    

f010ea06 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ea06:	55                   	push   %ebp
f010ea07:	89 e5                	mov    %esp,%ebp
f010ea09:	57                   	push   %edi
f010ea0a:	56                   	push   %esi
f010ea0b:	53                   	push   %ebx
f010ea0c:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ea12:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ea19:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ea20:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010ea27:	83 ec 0c             	sub    $0xc,%esp
f010ea2a:	68 b4 3d 13 f0       	push   $0xf0133db4
f010ea2f:	e8 fd 23 ff ff       	call   f0100e31 <cprintf>
f010ea34:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ea37:	83 ec 0c             	sub    $0xc,%esp
f010ea3a:	68 e8 3d 13 f0       	push   $0xf0133de8
f010ea3f:	e8 ed 23 ff ff       	call   f0100e31 <cprintf>
f010ea44:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ea47:	83 ec 0c             	sub    $0xc,%esp
f010ea4a:	68 b4 3d 13 f0       	push   $0xf0133db4
f010ea4f:	e8 dd 23 ff ff       	call   f0100e31 <cprintf>
f010ea54:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010ea57:	83 ec 0c             	sub    $0xc,%esp
f010ea5a:	6a 03                	push   $0x3
f010ea5c:	e8 d1 f7 ff ff       	call   f010e232 <test_initial_alloc>
f010ea61:	83 c4 10             	add    $0x10,%esp
f010ea64:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010ea67:	83 ec 0c             	sub    $0xc,%esp
f010ea6a:	68 b4 3d 13 f0       	push   $0xf0133db4
f010ea6f:	e8 bd 23 ff ff       	call   f0100e31 <cprintf>
f010ea74:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ea77:	83 ec 0c             	sub    $0xc,%esp
f010ea7a:	68 1c 3e 13 f0       	push   $0xf0133e1c
f010ea7f:	e8 ad 23 ff ff       	call   f0100e31 <cprintf>
f010ea84:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ea87:	83 ec 0c             	sub    $0xc,%esp
f010ea8a:	68 b4 3d 13 f0       	push   $0xf0133db4
f010ea8f:	e8 9d 23 ff ff       	call   f0100e31 <cprintf>
f010ea94:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea97:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ea9e:	eb 2c                	jmp    f010eacc <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010eaa0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010eaa3:	89 d0                	mov    %edx,%eax
f010eaa5:	c1 e0 02             	shl    $0x2,%eax
f010eaa8:	01 d0                	add    %edx,%eax
f010eaaa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eab1:	01 d0                	add    %edx,%eax
f010eab3:	c1 e0 03             	shl    $0x3,%eax
f010eab6:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010eabd:	83 ec 0c             	sub    $0xc,%esp
f010eac0:	50                   	push   %eax
f010eac1:	e8 74 0b 02 00       	call   f012f63a <free_block>
f010eac6:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eac9:	ff 45 dc             	incl   -0x24(%ebp)
f010eacc:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ead0:	7e ce                	jle    f010eaa0 <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ead2:	83 ec 0c             	sub    $0xc,%esp
f010ead5:	68 58 37 13 f0       	push   $0xf0133758
f010eada:	e8 52 23 ff ff       	call   f0100e31 <cprintf>
f010eadf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eae2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eae9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eaf0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eaf7:	eb 1f                	jmp    f010eb18 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eaf9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eafc:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010eb03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eb06:	76 0d                	jbe    f010eb15 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010eb08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb0b:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010eb12:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eb15:	ff 45 d4             	incl   -0x2c(%ebp)
f010eb18:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eb1c:	7e db                	jle    f010eaf9 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010eb1e:	83 ec 08             	sub    $0x8,%esp
f010eb21:	6a 03                	push   $0x3
f010eb23:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb26:	e8 68 09 02 00       	call   f012f493 <alloc_block>
f010eb2b:	83 c4 10             	add    $0x10,%esp
f010eb2e:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eb31:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eb35:	74 17                	je     f010eb4e <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010eb37:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010eb3e:	83 ec 0c             	sub    $0xc,%esp
f010eb41:	68 50 3e 13 f0       	push   $0xf0133e50
f010eb46:	e8 e6 22 ff ff       	call   f0100e31 <cprintf>
f010eb4b:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010eb4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eb52:	74 04                	je     f010eb58 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010eb54:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eb58:	83 ec 0c             	sub    $0xc,%esp
f010eb5b:	68 e8 3b 13 f0       	push   $0xf0133be8
f010eb60:	e8 cc 22 ff ff       	call   f0100e31 <cprintf>
f010eb65:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb68:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010eb6f:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010eb72:	bb 74 40 13 f0       	mov    $0xf0134074,%ebx
f010eb77:	ba 05 00 00 00       	mov    $0x5,%edx
f010eb7c:	89 c7                	mov    %eax,%edi
f010eb7e:	89 de                	mov    %ebx,%esi
f010eb80:	89 d1                	mov    %edx,%ecx
f010eb82:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010eb84:	a1 a0 ad 2d f0       	mov    0xf02dada0,%eax
f010eb89:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010eb8c:	a1 c0 b0 2d f0       	mov    0xf02db0c0,%eax
f010eb91:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010eb94:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f010eb99:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010eb9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010eb9f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010eba2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010eba5:	89 45 90             	mov    %eax,-0x70(%ebp)
f010eba8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ebab:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ebae:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ebb1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ebb4:	01 d0                	add    %edx,%eax
f010ebb6:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ebb9:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ebc0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ebc7:	e9 de 00 00 00       	jmp    f010ecaa <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ebcc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebcf:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010ebd3:	83 e8 10             	sub    $0x10,%eax
f010ebd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010ebd9:	83 ec 08             	sub    $0x8,%esp
f010ebdc:	6a 03                	push   $0x3
f010ebde:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ebe1:	e8 ad 08 02 00       	call   f012f493 <alloc_block>
f010ebe6:	83 c4 10             	add    $0x10,%esp
f010ebe9:	89 c2                	mov    %eax,%edx
f010ebeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebee:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010ebf5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebf8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ebff:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ec02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec05:	d1 e8                	shr    %eax
f010ec07:	89 c2                	mov    %eax,%edx
f010ec09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec0c:	01 c2                	add    %eax,%edx
f010ec0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec11:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ec18:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec1b:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ec1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec21:	01 c2                	add    %eax,%edx
f010ec23:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec26:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ec2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec30:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec37:	85 c0                	test   %eax,%eax
f010ec39:	74 15                	je     f010ec50 <test_alloc_block_BF+0x24a>
f010ec3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec3e:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010ec45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec48:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010ec4c:	39 c2                	cmp    %eax,%edx
f010ec4e:	74 2a                	je     f010ec7a <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010ec50:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ec57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec5a:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010ec61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec64:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010ec68:	52                   	push   %edx
f010ec69:	50                   	push   %eax
f010ec6a:	ff 75 d0             	pushl  -0x30(%ebp)
f010ec6d:	68 c8 3e 13 f0       	push   $0xf0133ec8
f010ec72:	e8 ba 21 ff ff       	call   f0100e31 <cprintf>
f010ec77:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ec7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec7d:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec84:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ec89:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec8c:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010ec93:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ec98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec9b:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010eca2:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010eca7:	ff 45 d0             	incl   -0x30(%ebp)
f010ecaa:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010ecae:	0f 8e 18 ff ff ff    	jle    f010ebcc <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010ecb4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ecb8:	74 04                	je     f010ecbe <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010ecba:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010ecbe:	83 ec 0c             	sub    $0xc,%esp
f010ecc1:	68 2c 3f 13 f0       	push   $0xf0133f2c
f010ecc6:	e8 66 21 ff ff       	call   f0100e31 <cprintf>
f010eccb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ecce:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010ecd5:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010ecdc:	83 ec 08             	sub    $0x8,%esp
f010ecdf:	6a 03                	push   $0x3
f010ece1:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ece4:	e8 aa 07 02 00       	call   f012f493 <alloc_block>
f010ece9:	83 c4 10             	add    $0x10,%esp
f010ecec:	89 45 88             	mov    %eax,-0x78(%ebp)
f010ecef:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ecf2:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010ecf5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ecf8:	d1 e8                	shr    %eax
f010ecfa:	89 c2                	mov    %eax,%edx
f010ecfc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ecff:	01 d0                	add    %edx,%eax
f010ed01:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010ed07:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed0a:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ed0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed10:	01 d0                	add    %edx,%eax
f010ed12:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010ed18:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ed1b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ed1e:	01 c2                	add    %eax,%edx
f010ed20:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ed23:	01 d0                	add    %edx,%eax
f010ed25:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010ed28:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ed2c:	74 08                	je     f010ed36 <test_alloc_block_BF+0x330>
f010ed2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed31:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010ed34:	74 1d                	je     f010ed53 <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010ed36:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010ed3d:	83 ec 04             	sub    $0x4,%esp
f010ed40:	ff 75 c8             	pushl  -0x38(%ebp)
f010ed43:	ff 75 b4             	pushl  -0x4c(%ebp)
f010ed46:	68 70 3f 13 f0       	push   $0xf0133f70
f010ed4b:	e8 e1 20 ff ff       	call   f0100e31 <cprintf>
f010ed50:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010ed53:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ed56:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010ed5b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ed61:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010ed66:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010ed6c:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ed71:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed75:	74 04                	je     f010ed7b <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010ed77:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ed7b:	83 ec 0c             	sub    $0xc,%esp
f010ed7e:	68 04 3a 13 f0       	push   $0xf0133a04
f010ed83:	e8 a9 20 ff ff       	call   f0100e31 <cprintf>
f010ed88:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ed8b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010ed92:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ed99:	e9 8e 00 00 00       	jmp    f010ee2c <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ed9e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eda1:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010eda8:	66 8b 00             	mov    (%eax),%ax
f010edab:	66 3d 61 01          	cmp    $0x161,%ax
f010edaf:	75 26                	jne    f010edd7 <test_alloc_block_BF+0x3d1>
f010edb1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010edb4:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010edbb:	66 8b 00             	mov    (%eax),%ax
f010edbe:	66 3d 61 01          	cmp    $0x161,%ax
f010edc2:	75 13                	jne    f010edd7 <test_alloc_block_BF+0x3d1>
f010edc4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010edc7:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010edce:	66 8b 00             	mov    (%eax),%ax
f010edd1:	66 3d 61 01          	cmp    $0x161,%ax
f010edd5:	74 52                	je     f010ee29 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010edd7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010edde:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ede1:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010ede8:	66 8b 00             	mov    (%eax),%ax
f010edeb:	0f bf c8             	movswl %ax,%ecx
f010edee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010edf1:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010edf8:	66 8b 00             	mov    (%eax),%ax
f010edfb:	0f bf d0             	movswl %ax,%edx
f010edfe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee01:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ee08:	66 8b 00             	mov    (%eax),%ax
f010ee0b:	98                   	cwtl   
f010ee0c:	83 ec 08             	sub    $0x8,%esp
f010ee0f:	51                   	push   %ecx
f010ee10:	52                   	push   %edx
f010ee11:	50                   	push   %eax
f010ee12:	68 61 01 00 00       	push   $0x161
f010ee17:	ff 75 cc             	pushl  -0x34(%ebp)
f010ee1a:	68 d4 3f 13 f0       	push   $0xf0133fd4
f010ee1f:	e8 0d 20 ff ff       	call   f0100e31 <cprintf>
f010ee24:	83 c4 20             	add    $0x20,%esp
			break;
f010ee27:	eb 0d                	jmp    f010ee36 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010ee29:	ff 45 cc             	incl   -0x34(%ebp)
f010ee2c:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010ee30:	0f 8e 68 ff ff ff    	jle    f010ed9e <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ee36:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ee3a:	74 04                	je     f010ee40 <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010ee3c:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010ee40:	83 ec 08             	sub    $0x8,%esp
f010ee43:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ee46:	68 40 40 13 f0       	push   $0xf0134040
f010ee4b:	e8 e1 1f ff ff       	call   f0100e31 <cprintf>
f010ee50:	83 c4 10             	add    $0x10,%esp
}
f010ee53:	90                   	nop
f010ee54:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ee57:	5b                   	pop    %ebx
f010ee58:	5e                   	pop    %esi
f010ee59:	5f                   	pop    %edi
f010ee5a:	5d                   	pop    %ebp
f010ee5b:	c3                   	ret    

f010ee5c <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010ee5c:	55                   	push   %ebp
f010ee5d:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010ee5f:	90                   	nop
f010ee60:	5d                   	pop    %ebp
f010ee61:	c3                   	ret    

f010ee62 <test_free_block_FF>:

void test_free_block_FF()
{
f010ee62:	55                   	push   %ebp
f010ee63:	89 e5                	mov    %esp,%ebp
f010ee65:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010ee68:	83 ec 0c             	sub    $0xc,%esp
f010ee6b:	68 88 40 13 f0       	push   $0xf0134088
f010ee70:	e8 bc 1f ff ff       	call   f0100e31 <cprintf>
f010ee75:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010ee78:	83 ec 0c             	sub    $0xc,%esp
f010ee7b:	68 c8 40 13 f0       	push   $0xf01340c8
f010ee80:	e8 ac 1f ff ff       	call   f0100e31 <cprintf>
f010ee85:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010ee88:	83 ec 0c             	sub    $0xc,%esp
f010ee8b:	68 88 40 13 f0       	push   $0xf0134088
f010ee90:	e8 9c 1f ff ff       	call   f0100e31 <cprintf>
f010ee95:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010ee98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010ee9f:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010eea6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eea9:	83 ec 08             	sub    $0x8,%esp
f010eeac:	50                   	push   %eax
f010eead:	68 00 00 00 f6       	push   $0xf6000000
f010eeb2:	e8 f5 06 02 00       	call   f012f5ac <initialize_dynamic_allocator>
f010eeb7:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010eeba:	83 ec 0c             	sub    $0xc,%esp
f010eebd:	68 08 41 13 f0       	push   $0xf0134108
f010eec2:	e8 6a 1f ff ff       	call   f0100e31 <cprintf>
f010eec7:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010eeca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eed1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010eed8:	eb 2a                	jmp    f010ef04 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010eeda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010eedd:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010eee4:	89 d0                	mov    %edx,%eax
f010eee6:	c1 e0 02             	shl    $0x2,%eax
f010eee9:	01 d0                	add    %edx,%eax
f010eeeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eef2:	01 d0                	add    %edx,%eax
f010eef4:	c1 e0 03             	shl    $0x3,%eax
f010eef7:	89 c2                	mov    %eax,%edx
f010eef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eefc:	01 d0                	add    %edx,%eax
f010eefe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010ef01:	ff 45 e8             	incl   -0x18(%ebp)
f010ef04:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010ef08:	7e d0                	jle    f010eeda <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010ef0a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ef0d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010ef10:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010ef13:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ef17:	7f 17                	jg     f010ef30 <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010ef19:	83 ec 04             	sub    $0x4,%esp
f010ef1c:	68 60 41 13 f0       	push   $0xf0134160
f010ef21:	68 fe 01 00 00       	push   $0x1fe
f010ef26:	68 e4 36 13 f0       	push   $0xf01336e4
f010ef2b:	e8 80 12 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010ef30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010ef37:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010ef3e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ef45:	e9 f8 00 00 00       	jmp    f010f042 <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010ef4a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010ef51:	e9 dc 00 00 00       	jmp    f010f032 <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010ef56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef59:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010ef60:	83 e8 10             	sub    $0x10,%eax
f010ef63:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010ef66:	83 ec 08             	sub    $0x8,%esp
f010ef69:	6a 01                	push   $0x1
f010ef6b:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ef6e:	e8 20 05 02 00       	call   f012f493 <alloc_block>
f010ef73:	83 c4 10             	add    $0x10,%esp
f010ef76:	89 c2                	mov    %eax,%edx
f010ef78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef7b:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010ef82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef85:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010ef8c:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010ef8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ef92:	d1 e8                	shr    %eax
f010ef94:	89 c2                	mov    %eax,%edx
f010ef96:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef99:	01 c2                	add    %eax,%edx
f010ef9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef9e:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010efa5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efa8:	8d 50 fe             	lea    -0x2(%eax),%edx
f010efab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efae:	01 c2                	add    %eax,%edx
f010efb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efb3:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010efba:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010efbe:	74 0b                	je     f010efcb <test_free_block_FF+0x169>
f010efc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010efc3:	83 c0 10             	add    $0x10,%eax
f010efc6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010efc9:	74 24                	je     f010efef <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010efcb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010efce:	83 c0 10             	add    $0x10,%eax
f010efd1:	83 ec 08             	sub    $0x8,%esp
f010efd4:	ff 75 c0             	pushl  -0x40(%ebp)
f010efd7:	50                   	push   %eax
f010efd8:	ff 75 e4             	pushl  -0x1c(%ebp)
f010efdb:	68 d8 41 13 f0       	push   $0xf01341d8
f010efe0:	68 0d 02 00 00       	push   $0x20d
f010efe5:	68 e4 36 13 f0       	push   $0xf01336e4
f010efea:	e8 c1 11 ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010efef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eff2:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010eff9:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010effc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efff:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010f006:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f009:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f00c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f00f:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010f016:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f019:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f01c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f01f:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010f026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f029:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f02c:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f02f:	ff 45 d8             	incl   -0x28(%ebp)
f010f032:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f039:	0f 8e 17 ff ff ff    	jle    f010ef56 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f03f:	ff 45 dc             	incl   -0x24(%ebp)
f010f042:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f046:	0f 8e fe fe ff ff    	jle    f010ef4a <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f04c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f04f:	83 e8 10             	sub    $0x10,%eax
f010f052:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f055:	83 ec 08             	sub    $0x8,%esp
f010f058:	6a 01                	push   $0x1
f010f05a:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f05d:	e8 31 04 02 00       	call   f012f493 <alloc_block>
f010f062:	83 c4 10             	add    $0x10,%esp
f010f065:	89 c2                	mov    %eax,%edx
f010f067:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f06a:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010f071:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f074:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f07b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f07e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f081:	d1 e8                	shr    %eax
f010f083:	89 c2                	mov    %eax,%edx
f010f085:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f088:	01 c2                	add    %eax,%edx
f010f08a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f08d:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f094:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f097:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f09a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f09d:	01 c2                	add    %eax,%edx
f010f09f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0a2:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f0a9:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f0ad:	74 0b                	je     f010f0ba <test_free_block_FF+0x258>
f010f0af:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f0b2:	83 c0 10             	add    $0x10,%eax
f010f0b5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f0b8:	74 17                	je     f010f0d1 <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f0ba:	83 ec 04             	sub    $0x4,%esp
f010f0bd:	68 3c 42 13 f0       	push   $0xf013423c
f010f0c2:	68 1e 02 00 00       	push   $0x21e
f010f0c7:	68 e4 36 13 f0       	push   $0xf01336e4
f010f0cc:	e8 df 10 ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f0d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0d4:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010f0db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0de:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f0e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0e4:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010f0eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0ee:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f0f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0f4:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010f0fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0fe:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f101:	83 ec 0c             	sub    $0xc,%esp
f010f104:	68 84 42 13 f0       	push   $0xf0134284
f010f109:	e8 23 1d ff ff       	call   f0100e31 <cprintf>
f010f10e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f111:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f118:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f11f:	eb 5b                	jmp    f010f17c <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f121:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f124:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f12b:	66 8b 00             	mov    (%eax),%ax
f010f12e:	98                   	cwtl   
f010f12f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f132:	75 26                	jne    f010f15a <test_free_block_FF+0x2f8>
f010f134:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f137:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010f13e:	66 8b 00             	mov    (%eax),%ax
f010f141:	98                   	cwtl   
f010f142:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f145:	75 13                	jne    f010f15a <test_free_block_FF+0x2f8>
f010f147:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f14a:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010f151:	66 8b 00             	mov    (%eax),%ax
f010f154:	98                   	cwtl   
f010f155:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f158:	74 1f                	je     f010f179 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f15a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f161:	83 ec 04             	sub    $0x4,%esp
f010f164:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f167:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f16a:	68 b8 42 13 f0       	push   $0xf01342b8
f010f16f:	e8 bd 1c ff ff       	call   f0100e31 <cprintf>
f010f174:	83 c4 10             	add    $0x10,%esp
			break;
f010f177:	eb 0b                	jmp    f010f184 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f179:	ff 45 d4             	incl   -0x2c(%ebp)
f010f17c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f17f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f182:	7c 9d                	jl     f010f121 <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f184:	83 ec 0c             	sub    $0xc,%esp
f010f187:	68 08 43 13 f0       	push   $0xf0134308
f010f18c:	e8 a0 1c ff ff       	call   f0100e31 <cprintf>
f010f191:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f194:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f19b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f1a2:	e9 e4 00 00 00       	jmp    f010f28b <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f1a7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f1aa:	89 d0                	mov    %edx,%eax
f010f1ac:	c1 e0 02             	shl    $0x2,%eax
f010f1af:	01 d0                	add    %edx,%eax
f010f1b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f1b8:	01 d0                	add    %edx,%eax
f010f1ba:	c1 e0 03             	shl    $0x3,%eax
f010f1bd:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f1c4:	83 ec 0c             	sub    $0xc,%esp
f010f1c7:	50                   	push   %eax
f010f1c8:	e8 6d 04 02 00       	call   f012f63a <free_block>
f010f1cd:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f1d0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f1d3:	89 d0                	mov    %edx,%eax
f010f1d5:	c1 e0 02             	shl    $0x2,%eax
f010f1d8:	01 d0                	add    %edx,%eax
f010f1da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f1e1:	01 d0                	add    %edx,%eax
f010f1e3:	c1 e0 03             	shl    $0x3,%eax
f010f1e6:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f1ed:	83 ec 0c             	sub    $0xc,%esp
f010f1f0:	50                   	push   %eax
f010f1f1:	e8 70 02 02 00       	call   f012f466 <get_block_size>
f010f1f6:	83 c4 10             	add    $0x10,%esp
f010f1f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f1fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f1ff:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f206:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f209:	74 2b                	je     f010f236 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f20b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f20f:	74 25                	je     f010f236 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f211:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f218:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f21b:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f222:	ff 75 bc             	pushl  -0x44(%ebp)
f010f225:	50                   	push   %eax
f010f226:	ff 75 d0             	pushl  -0x30(%ebp)
f010f229:	68 38 43 13 f0       	push   $0xf0134338
f010f22e:	e8 fe 1b ff ff       	call   f0100e31 <cprintf>
f010f233:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f236:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f239:	89 d0                	mov    %edx,%eax
f010f23b:	c1 e0 02             	shl    $0x2,%eax
f010f23e:	01 d0                	add    %edx,%eax
f010f240:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f247:	01 d0                	add    %edx,%eax
f010f249:	c1 e0 03             	shl    $0x3,%eax
f010f24c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f253:	83 ec 0c             	sub    $0xc,%esp
f010f256:	50                   	push   %eax
f010f257:	e8 20 02 02 00       	call   f012f47c <is_free_block>
f010f25c:	83 c4 10             	add    $0x10,%esp
f010f25f:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f262:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f266:	74 20                	je     f010f288 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f268:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f26c:	74 1a                	je     f010f288 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f26e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f275:	83 ec 08             	sub    $0x8,%esp
f010f278:	ff 75 d0             	pushl  -0x30(%ebp)
f010f27b:	68 9c 43 13 f0       	push   $0xf013439c
f010f280:	e8 ac 1b ff ff       	call   f0100e31 <cprintf>
f010f285:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f288:	ff 45 d0             	incl   -0x30(%ebp)
f010f28b:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f28f:	0f 8e 12 ff ff ff    	jle    f010f1a7 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f295:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f299:	74 04                	je     f010f29f <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f29b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f29f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f2a6:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f2ab:	83 ec 0c             	sub    $0xc,%esp
f010f2ae:	50                   	push   %eax
f010f2af:	e8 86 03 02 00       	call   f012f63a <free_block>
f010f2b4:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f2b7:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f2bc:	83 ec 0c             	sub    $0xc,%esp
f010f2bf:	50                   	push   %eax
f010f2c0:	e8 a1 01 02 00       	call   f012f466 <get_block_size>
f010f2c5:	83 c4 10             	add    $0x10,%esp
f010f2c8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f2cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f2ce:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f2d1:	74 1d                	je     f010f2f0 <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f2d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f2da:	83 ec 04             	sub    $0x4,%esp
f010f2dd:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f2e0:	ff 75 c8             	pushl  -0x38(%ebp)
f010f2e3:	68 f4 43 13 f0       	push   $0xf01343f4
f010f2e8:	e8 44 1b ff ff       	call   f0100e31 <cprintf>
f010f2ed:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f2f0:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f2f5:	83 ec 0c             	sub    $0xc,%esp
f010f2f8:	50                   	push   %eax
f010f2f9:	e8 7e 01 02 00       	call   f012f47c <is_free_block>
f010f2fe:	83 c4 10             	add    $0x10,%esp
f010f301:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f304:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f308:	74 17                	je     f010f321 <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f30a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f311:	83 ec 0c             	sub    $0xc,%esp
f010f314:	68 54 44 13 f0       	push   $0xf0134454
f010f319:	e8 13 1b ff ff       	call   f0100e31 <cprintf>
f010f31e:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f321:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f324:	83 e8 10             	sub    $0x10,%eax
f010f327:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f32a:	83 ec 08             	sub    $0x8,%esp
f010f32d:	6a 01                	push   $0x1
f010f32f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f332:	e8 5c 01 02 00       	call   f012f493 <alloc_block>
f010f337:	83 c4 10             	add    $0x10,%esp
f010f33a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f33d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f341:	74 0b                	je     f010f34e <test_free_block_FF+0x4ec>
f010f343:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f346:	83 c0 10             	add    $0x10,%eax
f010f349:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f34c:	74 17                	je     f010f365 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f34e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f355:	83 ec 0c             	sub    $0xc,%esp
f010f358:	68 ac 44 13 f0       	push   $0xf01344ac
f010f35d:	e8 cf 1a ff ff       	call   f0100e31 <cprintf>
f010f362:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f365:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f36a:	83 ec 0c             	sub    $0xc,%esp
f010f36d:	50                   	push   %eax
f010f36e:	e8 c7 02 02 00       	call   f012f63a <free_block>
f010f373:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f376:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f37b:	83 ec 0c             	sub    $0xc,%esp
f010f37e:	50                   	push   %eax
f010f37f:	e8 e2 00 02 00       	call   f012f466 <get_block_size>
f010f384:	83 c4 10             	add    $0x10,%esp
f010f387:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f38a:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f38f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f392:	74 20                	je     f010f3b4 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f394:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f39b:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f3a0:	83 ec 04             	sub    $0x4,%esp
f010f3a3:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f3a6:	50                   	push   %eax
f010f3a7:	68 f8 44 13 f0       	push   $0xf01344f8
f010f3ac:	e8 80 1a ff ff       	call   f0100e31 <cprintf>
f010f3b1:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f3b4:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f3b9:	83 ec 0c             	sub    $0xc,%esp
f010f3bc:	50                   	push   %eax
f010f3bd:	e8 ba 00 02 00       	call   f012f47c <is_free_block>
f010f3c2:	83 c4 10             	add    $0x10,%esp
f010f3c5:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f3c8:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f3cc:	74 17                	je     f010f3e5 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f3ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f3d5:	83 ec 0c             	sub    $0xc,%esp
f010f3d8:	68 58 45 13 f0       	push   $0xf0134558
f010f3dd:	e8 4f 1a ff ff       	call   f0100e31 <cprintf>
f010f3e2:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f3e5:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f3ea:	83 e8 10             	sub    $0x10,%eax
f010f3ed:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f3f0:	83 ec 08             	sub    $0x8,%esp
f010f3f3:	6a 01                	push   $0x1
f010f3f5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f3f8:	e8 96 00 02 00       	call   f012f493 <alloc_block>
f010f3fd:	83 c4 10             	add    $0x10,%esp
f010f400:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f403:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f407:	74 09                	je     f010f412 <test_free_block_FF+0x5b0>
f010f409:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f410:	74 17                	je     f010f429 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f412:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f419:	83 ec 0c             	sub    $0xc,%esp
f010f41c:	68 b0 45 13 f0       	push   $0xf01345b0
f010f421:	e8 0b 1a ff ff       	call   f0100e31 <cprintf>
f010f426:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f429:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f42e:	83 ec 0c             	sub    $0xc,%esp
f010f431:	50                   	push   %eax
f010f432:	e8 03 02 02 00       	call   f012f63a <free_block>
f010f437:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f43a:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f43f:	83 ec 0c             	sub    $0xc,%esp
f010f442:	50                   	push   %eax
f010f443:	e8 1e 00 02 00       	call   f012f466 <get_block_size>
f010f448:	83 c4 10             	add    $0x10,%esp
f010f44b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f44e:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f453:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f456:	74 20                	je     f010f478 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f458:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f45f:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f464:	83 ec 04             	sub    $0x4,%esp
f010f467:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f46a:	50                   	push   %eax
f010f46b:	68 fc 45 13 f0       	push   $0xf01345fc
f010f470:	e8 bc 19 ff ff       	call   f0100e31 <cprintf>
f010f475:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f478:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f47d:	83 ec 0c             	sub    $0xc,%esp
f010f480:	50                   	push   %eax
f010f481:	e8 f6 ff 01 00       	call   f012f47c <is_free_block>
f010f486:	83 c4 10             	add    $0x10,%esp
f010f489:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f48c:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f490:	74 17                	je     f010f4a9 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f492:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f499:	83 ec 0c             	sub    $0xc,%esp
f010f49c:	68 5c 46 13 f0       	push   $0xf013465c
f010f4a1:	e8 8b 19 ff ff       	call   f0100e31 <cprintf>
f010f4a6:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f4a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f4ad:	74 04                	je     f010f4b3 <test_free_block_FF+0x651>
	{
		eval += 10;
f010f4af:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f4b3:	83 ec 0c             	sub    $0xc,%esp
f010f4b6:	68 b4 46 13 f0       	push   $0xf01346b4
f010f4bb:	e8 71 19 ff ff       	call   f0100e31 <cprintf>
f010f4c0:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f4c3:	83 ec 0c             	sub    $0xc,%esp
f010f4c6:	68 f0 46 13 f0       	push   $0xf01346f0
f010f4cb:	e8 61 19 ff ff       	call   f0100e31 <cprintf>
f010f4d0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f4d3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f4da:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f4e1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f4e4:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f4eb:	83 ec 0c             	sub    $0xc,%esp
f010f4ee:	50                   	push   %eax
f010f4ef:	e8 46 01 02 00       	call   f012f63a <free_block>
f010f4f4:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f4f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f4fa:	48                   	dec    %eax
f010f4fb:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f502:	83 ec 0c             	sub    $0xc,%esp
f010f505:	50                   	push   %eax
f010f506:	e8 5b ff 01 00       	call   f012f466 <get_block_size>
f010f50b:	83 c4 10             	add    $0x10,%esp
f010f50e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f511:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f517:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f51a:	01 d0                	add    %edx,%eax
f010f51c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f51f:	74 26                	je     f010f547 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f521:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f528:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f52e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f531:	01 d0                	add    %edx,%eax
f010f533:	83 ec 04             	sub    $0x4,%esp
f010f536:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f539:	50                   	push   %eax
f010f53a:	68 08 47 13 f0       	push   $0xf0134708
f010f53f:	e8 ed 18 ff ff       	call   f0100e31 <cprintf>
f010f544:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f547:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f54a:	48                   	dec    %eax
f010f54b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f552:	83 ec 0c             	sub    $0xc,%esp
f010f555:	50                   	push   %eax
f010f556:	e8 21 ff 01 00       	call   f012f47c <is_free_block>
f010f55b:	83 c4 10             	add    $0x10,%esp
f010f55e:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f561:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f565:	74 17                	je     f010f57e <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f567:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f56e:	83 ec 0c             	sub    $0xc,%esp
f010f571:	68 68 47 13 f0       	push   $0xf0134768
f010f576:	e8 b6 18 ff ff       	call   f0100e31 <cprintf>
f010f57b:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f57e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f581:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f588:	83 ec 0c             	sub    $0xc,%esp
f010f58b:	50                   	push   %eax
f010f58c:	e8 d5 fe 01 00       	call   f012f466 <get_block_size>
f010f591:	83 c4 10             	add    $0x10,%esp
f010f594:	85 c0                	test   %eax,%eax
f010f596:	75 1a                	jne    f010f5b2 <test_free_block_FF+0x750>
f010f598:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f59b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f5a2:	83 ec 0c             	sub    $0xc,%esp
f010f5a5:	50                   	push   %eax
f010f5a6:	e8 d1 fe 01 00       	call   f012f47c <is_free_block>
f010f5ab:	83 c4 10             	add    $0x10,%esp
f010f5ae:	84 c0                	test   %al,%al
f010f5b0:	74 17                	je     f010f5c9 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f5b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f5b9:	83 ec 0c             	sub    $0xc,%esp
f010f5bc:	68 c0 47 13 f0       	push   $0xf01347c0
f010f5c1:	e8 6b 18 ff ff       	call   f0100e31 <cprintf>
f010f5c6:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f5c9:	83 ec 0c             	sub    $0xc,%esp
f010f5cc:	68 2a 48 13 f0       	push   $0xf013482a
f010f5d1:	e8 5b 18 ff ff       	call   f0100e31 <cprintf>
f010f5d6:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f5d9:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f5e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f5e3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f5ea:	83 ec 0c             	sub    $0xc,%esp
f010f5ed:	50                   	push   %eax
f010f5ee:	e8 47 00 02 00       	call   f012f63a <free_block>
f010f5f3:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f5f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f5f9:	48                   	dec    %eax
f010f5fa:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f601:	83 ec 0c             	sub    $0xc,%esp
f010f604:	50                   	push   %eax
f010f605:	e8 5c fe 01 00       	call   f012f466 <get_block_size>
f010f60a:	83 c4 10             	add    $0x10,%esp
f010f60d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010f610:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f616:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f61b:	01 d0                	add    %edx,%eax
f010f61d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f620:	74 28                	je     f010f64a <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010f622:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010f629:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f62f:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f634:	01 d0                	add    %edx,%eax
f010f636:	83 ec 04             	sub    $0x4,%esp
f010f639:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f63c:	50                   	push   %eax
f010f63d:	68 44 48 13 f0       	push   $0xf0134844
f010f642:	e8 ea 17 ff ff       	call   f0100e31 <cprintf>
f010f647:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f64a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f64d:	48                   	dec    %eax
f010f64e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f655:	83 ec 0c             	sub    $0xc,%esp
f010f658:	50                   	push   %eax
f010f659:	e8 1e fe 01 00       	call   f012f47c <is_free_block>
f010f65e:	83 c4 10             	add    $0x10,%esp
f010f661:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f664:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f668:	74 17                	je     f010f681 <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010f66a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f671:	83 ec 0c             	sub    $0xc,%esp
f010f674:	68 a4 48 13 f0       	push   $0xf01348a4
f010f679:	e8 b3 17 ff ff       	call   f0100e31 <cprintf>
f010f67e:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f681:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f684:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f68b:	83 ec 0c             	sub    $0xc,%esp
f010f68e:	50                   	push   %eax
f010f68f:	e8 d2 fd 01 00       	call   f012f466 <get_block_size>
f010f694:	83 c4 10             	add    $0x10,%esp
f010f697:	85 c0                	test   %eax,%eax
f010f699:	75 1a                	jne    f010f6b5 <test_free_block_FF+0x853>
f010f69b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f69e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f6a5:	83 ec 0c             	sub    $0xc,%esp
f010f6a8:	50                   	push   %eax
f010f6a9:	e8 ce fd 01 00       	call   f012f47c <is_free_block>
f010f6ae:	83 c4 10             	add    $0x10,%esp
f010f6b1:	84 c0                	test   %al,%al
f010f6b3:	74 17                	je     f010f6cc <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010f6b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f6bc:	83 ec 0c             	sub    $0xc,%esp
f010f6bf:	68 fc 48 13 f0       	push   $0xf01348fc
f010f6c4:	e8 68 17 ff ff       	call   f0100e31 <cprintf>
f010f6c9:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f6cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f6d0:	74 04                	je     f010f6d6 <test_free_block_FF+0x874>
	{
		eval += 15;
f010f6d2:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010f6d6:	83 ec 0c             	sub    $0xc,%esp
f010f6d9:	68 68 49 13 f0       	push   $0xf0134968
f010f6de:	e8 4e 17 ff ff       	call   f0100e31 <cprintf>
f010f6e3:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010f6e6:	83 ec 0c             	sub    $0xc,%esp
f010f6e9:	68 a0 49 13 f0       	push   $0xf01349a0
f010f6ee:	e8 3e 17 ff ff       	call   f0100e31 <cprintf>
f010f6f3:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f6f6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010f6fd:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f704:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f707:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f70e:	83 ec 0c             	sub    $0xc,%esp
f010f711:	50                   	push   %eax
f010f712:	e8 23 ff 01 00       	call   f012f63a <free_block>
f010f717:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010f71a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f71d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f724:	83 ec 0c             	sub    $0xc,%esp
f010f727:	50                   	push   %eax
f010f728:	e8 39 fd 01 00       	call   f012f466 <get_block_size>
f010f72d:	83 c4 10             	add    $0x10,%esp
f010f730:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010f733:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f739:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f73e:	01 d0                	add    %edx,%eax
f010f740:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f743:	74 28                	je     f010f76d <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010f745:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010f74c:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f752:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f757:	01 d0                	add    %edx,%eax
f010f759:	83 ec 04             	sub    $0x4,%esp
f010f75c:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f75f:	50                   	push   %eax
f010f760:	68 44 48 13 f0       	push   $0xf0134844
f010f765:	e8 c7 16 ff ff       	call   f0100e31 <cprintf>
f010f76a:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010f76d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f770:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f777:	83 ec 0c             	sub    $0xc,%esp
f010f77a:	50                   	push   %eax
f010f77b:	e8 fc fc 01 00       	call   f012f47c <is_free_block>
f010f780:	83 c4 10             	add    $0x10,%esp
f010f783:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f786:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f78a:	74 17                	je     f010f7a3 <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010f78c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f793:	83 ec 0c             	sub    $0xc,%esp
f010f796:	68 a4 48 13 f0       	push   $0xf01348a4
f010f79b:	e8 91 16 ff ff       	call   f0100e31 <cprintf>
f010f7a0:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010f7a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7a6:	40                   	inc    %eax
f010f7a7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f7ae:	83 ec 0c             	sub    $0xc,%esp
f010f7b1:	50                   	push   %eax
f010f7b2:	e8 af fc 01 00       	call   f012f466 <get_block_size>
f010f7b7:	83 c4 10             	add    $0x10,%esp
f010f7ba:	85 c0                	test   %eax,%eax
f010f7bc:	75 1b                	jne    f010f7d9 <test_free_block_FF+0x977>
f010f7be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7c1:	40                   	inc    %eax
f010f7c2:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f7c9:	83 ec 0c             	sub    $0xc,%esp
f010f7cc:	50                   	push   %eax
f010f7cd:	e8 aa fc 01 00       	call   f012f47c <is_free_block>
f010f7d2:	83 c4 10             	add    $0x10,%esp
f010f7d5:	84 c0                	test   %al,%al
f010f7d7:	74 17                	je     f010f7f0 <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010f7d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f7e0:	83 ec 0c             	sub    $0xc,%esp
f010f7e3:	68 fc 48 13 f0       	push   $0xf01348fc
f010f7e8:	e8 44 16 ff ff       	call   f0100e31 <cprintf>
f010f7ed:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010f7f0:	83 ec 0c             	sub    $0xc,%esp
f010f7f3:	68 b5 49 13 f0       	push   $0xf01349b5
f010f7f8:	e8 34 16 ff ff       	call   f0100e31 <cprintf>
f010f7fd:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010f800:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f807:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f80a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f811:	83 ec 0c             	sub    $0xc,%esp
f010f814:	50                   	push   %eax
f010f815:	e8 20 fe 01 00       	call   f012f63a <free_block>
f010f81a:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010f81d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f820:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f827:	83 ec 0c             	sub    $0xc,%esp
f010f82a:	50                   	push   %eax
f010f82b:	e8 36 fc 01 00       	call   f012f466 <get_block_size>
f010f830:	83 c4 10             	add    $0x10,%esp
f010f833:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010f836:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f83c:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010f841:	01 d0                	add    %edx,%eax
f010f843:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f846:	74 28                	je     f010f870 <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010f848:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010f84f:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f855:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010f85a:	01 d0                	add    %edx,%eax
f010f85c:	83 ec 04             	sub    $0x4,%esp
f010f85f:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f862:	50                   	push   %eax
f010f863:	68 d0 49 13 f0       	push   $0xf01349d0
f010f868:	e8 c4 15 ff ff       	call   f0100e31 <cprintf>
f010f86d:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010f870:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f873:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f87a:	83 ec 0c             	sub    $0xc,%esp
f010f87d:	50                   	push   %eax
f010f87e:	e8 f9 fb 01 00       	call   f012f47c <is_free_block>
f010f883:	83 c4 10             	add    $0x10,%esp
f010f886:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f889:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f88d:	74 17                	je     f010f8a6 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010f88f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f896:	83 ec 0c             	sub    $0xc,%esp
f010f899:	68 34 4a 13 f0       	push   $0xf0134a34
f010f89e:	e8 8e 15 ff ff       	call   f0100e31 <cprintf>
f010f8a3:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010f8a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8a9:	40                   	inc    %eax
f010f8aa:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f8b1:	83 ec 0c             	sub    $0xc,%esp
f010f8b4:	50                   	push   %eax
f010f8b5:	e8 ac fb 01 00       	call   f012f466 <get_block_size>
f010f8ba:	83 c4 10             	add    $0x10,%esp
f010f8bd:	85 c0                	test   %eax,%eax
f010f8bf:	75 1b                	jne    f010f8dc <test_free_block_FF+0xa7a>
f010f8c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8c4:	40                   	inc    %eax
f010f8c5:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f8cc:	83 ec 0c             	sub    $0xc,%esp
f010f8cf:	50                   	push   %eax
f010f8d0:	e8 a7 fb 01 00       	call   f012f47c <is_free_block>
f010f8d5:	83 c4 10             	add    $0x10,%esp
f010f8d8:	84 c0                	test   %al,%al
f010f8da:	74 17                	je     f010f8f3 <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010f8dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f8e3:	83 ec 0c             	sub    $0xc,%esp
f010f8e6:	68 8c 4a 13 f0       	push   $0xf0134a8c
f010f8eb:	e8 41 15 ff ff       	call   f0100e31 <cprintf>
f010f8f0:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010f8f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f8f7:	74 04                	je     f010f8fd <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010f8f9:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010f8fd:	83 ec 0c             	sub    $0xc,%esp
f010f900:	68 f8 4a 13 f0       	push   $0xf0134af8
f010f905:	e8 27 15 ff ff       	call   f0100e31 <cprintf>
f010f90a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f90d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010f914:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f91b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f91e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f925:	83 ec 0c             	sub    $0xc,%esp
f010f928:	50                   	push   %eax
f010f929:	e8 0c fd 01 00       	call   f012f63a <free_block>
f010f92e:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010f931:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f938:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f93b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f942:	83 ec 0c             	sub    $0xc,%esp
f010f945:	50                   	push   %eax
f010f946:	e8 ef fc 01 00       	call   f012f63a <free_block>
f010f94b:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f94e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f951:	48                   	dec    %eax
f010f952:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f959:	83 ec 0c             	sub    $0xc,%esp
f010f95c:	50                   	push   %eax
f010f95d:	e8 04 fb 01 00       	call   f012f466 <get_block_size>
f010f962:	83 c4 10             	add    $0x10,%esp
f010f965:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010f968:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010f96e:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010f973:	01 c2                	add    %eax,%edx
f010f975:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010f97a:	01 d0                	add    %edx,%eax
f010f97c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f97f:	74 2f                	je     f010f9b0 <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010f981:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010f988:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010f98e:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010f993:	01 c2                	add    %eax,%edx
f010f995:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010f99a:	01 d0                	add    %edx,%eax
f010f99c:	83 ec 04             	sub    $0x4,%esp
f010f99f:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9a2:	50                   	push   %eax
f010f9a3:	68 38 4b 13 f0       	push   $0xf0134b38
f010f9a8:	e8 84 14 ff ff       	call   f0100e31 <cprintf>
f010f9ad:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f9b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9b3:	48                   	dec    %eax
f010f9b4:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f9bb:	83 ec 0c             	sub    $0xc,%esp
f010f9be:	50                   	push   %eax
f010f9bf:	e8 b8 fa 01 00       	call   f012f47c <is_free_block>
f010f9c4:	83 c4 10             	add    $0x10,%esp
f010f9c7:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f9ca:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f9ce:	74 17                	je     f010f9e7 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010f9d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f9d7:	83 ec 0c             	sub    $0xc,%esp
f010f9da:	68 9c 4b 13 f0       	push   $0xf0134b9c
f010f9df:	e8 4d 14 ff ff       	call   f0100e31 <cprintf>
f010f9e4:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010f9e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9ea:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f9f1:	83 ec 0c             	sub    $0xc,%esp
f010f9f4:	50                   	push   %eax
f010f9f5:	e8 6c fa 01 00       	call   f012f466 <get_block_size>
f010f9fa:	83 c4 10             	add    $0x10,%esp
f010f9fd:	85 c0                	test   %eax,%eax
f010f9ff:	75 50                	jne    f010fa51 <test_free_block_FF+0xbef>
f010fa01:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa04:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa0b:	83 ec 0c             	sub    $0xc,%esp
f010fa0e:	50                   	push   %eax
f010fa0f:	e8 68 fa 01 00       	call   f012f47c <is_free_block>
f010fa14:	83 c4 10             	add    $0x10,%esp
f010fa17:	84 c0                	test   %al,%al
f010fa19:	75 36                	jne    f010fa51 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fa1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa1e:	40                   	inc    %eax
f010fa1f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa26:	83 ec 0c             	sub    $0xc,%esp
f010fa29:	50                   	push   %eax
f010fa2a:	e8 37 fa 01 00       	call   f012f466 <get_block_size>
f010fa2f:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fa32:	85 c0                	test   %eax,%eax
f010fa34:	75 1b                	jne    f010fa51 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fa36:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa39:	40                   	inc    %eax
f010fa3a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa41:	83 ec 0c             	sub    $0xc,%esp
f010fa44:	50                   	push   %eax
f010fa45:	e8 32 fa 01 00       	call   f012f47c <is_free_block>
f010fa4a:	83 c4 10             	add    $0x10,%esp
f010fa4d:	84 c0                	test   %al,%al
f010fa4f:	74 17                	je     f010fa68 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fa51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fa58:	83 ec 0c             	sub    $0xc,%esp
f010fa5b:	68 f4 4b 13 f0       	push   $0xf0134bf4
f010fa60:	e8 cc 13 ff ff       	call   f0100e31 <cprintf>
f010fa65:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fa68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa6c:	74 04                	je     f010fa72 <test_free_block_FF+0xc10>
	{
		eval += 20;
f010fa6e:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fa72:	83 ec 0c             	sub    $0xc,%esp
f010fa75:	68 60 4c 13 f0       	push   $0xf0134c60
f010fa7a:	e8 b2 13 ff ff       	call   f0100e31 <cprintf>
f010fa7f:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010fa82:	83 ec 0c             	sub    $0xc,%esp
f010fa85:	68 a4 4c 13 f0       	push   $0xf0134ca4
f010fa8a:	e8 a2 13 ff ff       	call   f0100e31 <cprintf>
f010fa8f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fa92:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fa99:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010faa0:	83 ec 08             	sub    $0x8,%esp
f010faa3:	6a 01                	push   $0x1
f010faa5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010faa8:	e8 e6 f9 01 00       	call   f012f493 <alloc_block>
f010faad:	83 c4 10             	add    $0x10,%esp
f010fab0:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010fab3:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010faba:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fabe:	74 08                	je     f010fac8 <test_free_block_FF+0xc66>
f010fac0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fac3:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fac6:	74 1d                	je     f010fae5 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fac8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010facf:	83 ec 04             	sub    $0x4,%esp
f010fad2:	ff 75 c0             	pushl  -0x40(%ebp)
f010fad5:	ff 75 a8             	pushl  -0x58(%ebp)
f010fad8:	68 cc 4c 13 f0       	push   $0xf0134ccc
f010fadd:	e8 4f 13 ff ff       	call   f0100e31 <cprintf>
f010fae2:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010fae5:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010faec:	83 ec 08             	sub    $0x8,%esp
f010faef:	6a 01                	push   $0x1
f010faf1:	ff 75 c4             	pushl  -0x3c(%ebp)
f010faf4:	e8 9a f9 01 00       	call   f012f493 <alloc_block>
f010faf9:	83 c4 10             	add    $0x10,%esp
f010fafc:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010faff:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fb06:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fb0a:	74 08                	je     f010fb14 <test_free_block_FF+0xcb2>
f010fb0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fb0f:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fb12:	74 1d                	je     f010fb31 <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010fb14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fb1b:	83 ec 04             	sub    $0x4,%esp
f010fb1e:	ff 75 c0             	pushl  -0x40(%ebp)
f010fb21:	ff 75 a8             	pushl  -0x58(%ebp)
f010fb24:	68 30 4d 13 f0       	push   $0xf0134d30
f010fb29:	e8 03 13 ff ff       	call   f0100e31 <cprintf>
f010fb2e:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fb31:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fb38:	83 ec 08             	sub    $0x8,%esp
f010fb3b:	6a 01                	push   $0x1
f010fb3d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fb40:	e8 4e f9 01 00       	call   f012f493 <alloc_block>
f010fb45:	83 c4 10             	add    $0x10,%esp
f010fb48:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010fb4b:	a1 5c a7 2d f0       	mov    0xf02da75c,%eax
f010fb50:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fb53:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fb57:	74 08                	je     f010fb61 <test_free_block_FF+0xcff>
f010fb59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fb5c:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fb5f:	74 1d                	je     f010fb7e <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010fb61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fb68:	83 ec 04             	sub    $0x4,%esp
f010fb6b:	ff 75 c0             	pushl  -0x40(%ebp)
f010fb6e:	ff 75 a8             	pushl  -0x58(%ebp)
f010fb71:	68 94 4d 13 f0       	push   $0xf0134d94
f010fb76:	e8 b6 12 ff ff       	call   f0100e31 <cprintf>
f010fb7b:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fb7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fb82:	74 04                	je     f010fb88 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010fb84:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010fb88:	83 ec 0c             	sub    $0xc,%esp
f010fb8b:	68 f8 4d 13 f0       	push   $0xf0134df8
f010fb90:	e8 9c 12 ff ff       	call   f0100e31 <cprintf>
f010fb95:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fb98:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010fb9f:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fba6:	83 ec 08             	sub    $0x8,%esp
f010fba9:	6a 01                	push   $0x1
f010fbab:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fbae:	e8 e0 f8 01 00       	call   f012f493 <alloc_block>
f010fbb3:	83 c4 10             	add    $0x10,%esp
f010fbb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010fbb9:	a1 b8 b0 2d f0       	mov    0xf02db0b8,%eax
f010fbbe:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fbc1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fbc5:	74 08                	je     f010fbcf <test_free_block_FF+0xd6d>
f010fbc7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fbca:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fbcd:	74 1d                	je     f010fbec <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010fbcf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fbd6:	83 ec 04             	sub    $0x4,%esp
f010fbd9:	ff 75 c0             	pushl  -0x40(%ebp)
f010fbdc:	ff 75 a8             	pushl  -0x58(%ebp)
f010fbdf:	68 28 4e 13 f0       	push   $0xf0134e28
f010fbe4:	e8 48 12 ff ff       	call   f0100e31 <cprintf>
f010fbe9:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fbec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fbf0:	74 04                	je     f010fbf6 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010fbf2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010fbf6:	83 ec 0c             	sub    $0xc,%esp
f010fbf9:	68 8c 4e 13 f0       	push   $0xf0134e8c
f010fbfe:	e8 2e 12 ff ff       	call   f0100e31 <cprintf>
f010fc03:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc06:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f010fc0d:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fc14:	83 ec 08             	sub    $0x8,%esp
f010fc17:	6a 01                	push   $0x1
f010fc19:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fc1c:	e8 72 f8 01 00       	call   f012f493 <alloc_block>
f010fc21:	83 c4 10             	add    $0x10,%esp
f010fc24:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f010fc27:	a1 80 aa 2d f0       	mov    0xf02daa80,%eax
f010fc2c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fc2f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fc33:	74 08                	je     f010fc3d <test_free_block_FF+0xddb>
f010fc35:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fc38:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fc3b:	74 1d                	je     f010fc5a <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f010fc3d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fc44:	83 ec 04             	sub    $0x4,%esp
f010fc47:	ff 75 c0             	pushl  -0x40(%ebp)
f010fc4a:	ff 75 a8             	pushl  -0x58(%ebp)
f010fc4d:	68 28 4e 13 f0       	push   $0xf0134e28
f010fc52:	e8 da 11 ff ff       	call   f0100e31 <cprintf>
f010fc57:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f010fc5a:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fc61:	83 ec 08             	sub    $0x8,%esp
f010fc64:	6a 01                	push   $0x1
f010fc66:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fc69:	e8 25 f8 01 00       	call   f012f493 <alloc_block>
f010fc6e:	83 c4 10             	add    $0x10,%esp
f010fc71:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f010fc74:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010fc79:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fc7c:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fc80:	74 08                	je     f010fc8a <test_free_block_FF+0xe28>
f010fc82:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fc85:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fc88:	74 1d                	je     f010fca7 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f010fc8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fc91:	83 ec 04             	sub    $0x4,%esp
f010fc94:	ff 75 c0             	pushl  -0x40(%ebp)
f010fc97:	ff 75 a8             	pushl  -0x58(%ebp)
f010fc9a:	68 b4 4e 13 f0       	push   $0xf0134eb4
f010fc9f:	e8 8d 11 ff ff       	call   f0100e31 <cprintf>
f010fca4:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fca7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fcab:	74 04                	je     f010fcb1 <test_free_block_FF+0xe4f>
	{
		eval += 10;
f010fcad:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f010fcb1:	83 ec 08             	sub    $0x8,%esp
f010fcb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010fcb7:	68 18 4f 13 f0       	push   $0xf0134f18
f010fcbc:	e8 70 11 ff ff       	call   f0100e31 <cprintf>
f010fcc1:	83 c4 10             	add    $0x10,%esp

}
f010fcc4:	90                   	nop
f010fcc5:	c9                   	leave  
f010fcc6:	c3                   	ret    

f010fcc7 <test_free_block_BF>:

void test_free_block_BF()
{
f010fcc7:	55                   	push   %ebp
f010fcc8:	89 e5                	mov    %esp,%ebp
f010fcca:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010fccd:	83 ec 0c             	sub    $0xc,%esp
f010fcd0:	68 88 40 13 f0       	push   $0xf0134088
f010fcd5:	e8 57 11 ff ff       	call   f0100e31 <cprintf>
f010fcda:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010fcdd:	83 ec 0c             	sub    $0xc,%esp
f010fce0:	68 c8 40 13 f0       	push   $0xf01340c8
f010fce5:	e8 47 11 ff ff       	call   f0100e31 <cprintf>
f010fcea:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010fced:	83 ec 0c             	sub    $0xc,%esp
f010fcf0:	68 88 40 13 f0       	push   $0xf0134088
f010fcf5:	e8 37 11 ff ff       	call   f0100e31 <cprintf>
f010fcfa:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f010fcfd:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fd04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fd07:	83 ec 08             	sub    $0x8,%esp
f010fd0a:	50                   	push   %eax
f010fd0b:	68 00 00 00 f6       	push   $0xf6000000
f010fd10:	e8 97 f8 01 00       	call   f012f5ac <initialize_dynamic_allocator>
f010fd15:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010fd18:	83 ec 0c             	sub    $0xc,%esp
f010fd1b:	68 08 41 13 f0       	push   $0xf0134108
f010fd20:	e8 0c 11 ff ff       	call   f0100e31 <cprintf>
f010fd25:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010fd28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fd2f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010fd36:	eb 2a                	jmp    f010fd62 <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fd38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fd3b:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010fd42:	89 d0                	mov    %edx,%eax
f010fd44:	c1 e0 02             	shl    $0x2,%eax
f010fd47:	01 d0                	add    %edx,%eax
f010fd49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fd50:	01 d0                	add    %edx,%eax
f010fd52:	c1 e0 03             	shl    $0x3,%eax
f010fd55:	89 c2                	mov    %eax,%edx
f010fd57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fd5a:	01 d0                	add    %edx,%eax
f010fd5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fd5f:	ff 45 f0             	incl   -0x10(%ebp)
f010fd62:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f010fd66:	7e d0                	jle    f010fd38 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010fd68:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fd6b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fd6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f010fd71:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f010fd75:	7f 17                	jg     f010fd8e <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010fd77:	83 ec 04             	sub    $0x4,%esp
f010fd7a:	68 60 41 13 f0       	push   $0xf0134160
f010fd7f:	68 90 03 00 00       	push   $0x390
f010fd84:	68 e4 36 13 f0       	push   $0xf01336e4
f010fd89:	e8 22 04 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010fd8e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010fd95:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fd9c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fda3:	e9 f8 00 00 00       	jmp    f010fea0 <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fda8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010fdaf:	e9 dc 00 00 00       	jmp    f010fe90 <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010fdb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdb7:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010fdbe:	83 e8 10             	sub    $0x10,%eax
f010fdc1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f010fdc4:	83 ec 08             	sub    $0x8,%esp
f010fdc7:	6a 03                	push   $0x3
f010fdc9:	ff 75 cc             	pushl  -0x34(%ebp)
f010fdcc:	e8 c2 f6 01 00       	call   f012f493 <alloc_block>
f010fdd1:	83 c4 10             	add    $0x10,%esp
f010fdd4:	89 c2                	mov    %eax,%edx
f010fdd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdd9:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010fde0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fde3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fdea:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010fded:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fdf0:	d1 e8                	shr    %eax
f010fdf2:	89 c2                	mov    %eax,%edx
f010fdf4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fdf7:	01 c2                	add    %eax,%edx
f010fdf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdfc:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fe03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe06:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fe09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe0c:	01 c2                	add    %eax,%edx
f010fe0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe11:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010fe18:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fe1c:	74 0b                	je     f010fe29 <test_free_block_BF+0x162>
f010fe1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fe21:	83 c0 10             	add    $0x10,%eax
f010fe24:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010fe27:	74 24                	je     f010fe4d <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010fe29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fe2c:	83 c0 10             	add    $0x10,%eax
f010fe2f:	83 ec 08             	sub    $0x8,%esp
f010fe32:	ff 75 c8             	pushl  -0x38(%ebp)
f010fe35:	50                   	push   %eax
f010fe36:	ff 75 ec             	pushl  -0x14(%ebp)
f010fe39:	68 54 4f 13 f0       	push   $0xf0134f54
f010fe3e:	68 9f 03 00 00       	push   $0x39f
f010fe43:	68 e4 36 13 f0       	push   $0xf01336e4
f010fe48:	e8 63 03 ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010fe4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe50:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010fe57:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f010fe5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe5d:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010fe64:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe67:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010fe6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe6d:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010fe74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe77:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010fe7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe7d:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010fe84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe87:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fe8a:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fe8d:	ff 45 e0             	incl   -0x20(%ebp)
f010fe90:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f010fe97:	0f 8e 17 ff ff ff    	jle    f010fdb4 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fe9d:	ff 45 e4             	incl   -0x1c(%ebp)
f010fea0:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fea4:	0f 8e fe fe ff ff    	jle    f010fda8 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010feaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fead:	83 e8 10             	sub    $0x10,%eax
f010feb0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f010feb3:	83 ec 08             	sub    $0x8,%esp
f010feb6:	6a 03                	push   $0x3
f010feb8:	ff 75 cc             	pushl  -0x34(%ebp)
f010febb:	e8 d3 f5 01 00       	call   f012f493 <alloc_block>
f010fec0:	83 c4 10             	add    $0x10,%esp
f010fec3:	89 c2                	mov    %eax,%edx
f010fec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fec8:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010fecf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fed2:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fed9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010fedc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fedf:	d1 e8                	shr    %eax
f010fee1:	89 c2                	mov    %eax,%edx
f010fee3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fee6:	01 c2                	add    %eax,%edx
f010fee8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010feeb:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010fef2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fef5:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fef8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fefb:	01 c2                	add    %eax,%edx
f010fefd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff00:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010ff07:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ff0b:	74 0b                	je     f010ff18 <test_free_block_BF+0x251>
f010ff0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ff10:	83 c0 10             	add    $0x10,%eax
f010ff13:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010ff16:	74 17                	je     f010ff2f <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f010ff18:	83 ec 04             	sub    $0x4,%esp
f010ff1b:	68 b8 4f 13 f0       	push   $0xf0134fb8
f010ff20:	68 b0 03 00 00       	push   $0x3b0
f010ff25:	68 e4 36 13 f0       	push   $0xf01336e4
f010ff2a:	e8 81 02 ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010ff2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff32:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010ff39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff3c:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010ff3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff42:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010ff49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff4c:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ff4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff52:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010ff59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff5c:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010ff5f:	83 ec 0c             	sub    $0xc,%esp
f010ff62:	68 84 42 13 f0       	push   $0xf0134284
f010ff67:	e8 c5 0e ff ff       	call   f0100e31 <cprintf>
f010ff6c:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f010ff6f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ff76:	eb 59                	jmp    f010ffd1 <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010ff78:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff7b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010ff82:	66 8b 00             	mov    (%eax),%ax
f010ff85:	98                   	cwtl   
f010ff86:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ff89:	75 26                	jne    f010ffb1 <test_free_block_BF+0x2ea>
f010ff8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff8e:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010ff95:	66 8b 00             	mov    (%eax),%ax
f010ff98:	98                   	cwtl   
f010ff99:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ff9c:	75 13                	jne    f010ffb1 <test_free_block_BF+0x2ea>
f010ff9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffa1:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010ffa8:	66 8b 00             	mov    (%eax),%ax
f010ffab:	98                   	cwtl   
f010ffac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ffaf:	74 1d                	je     f010ffce <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f010ffb1:	83 ec 0c             	sub    $0xc,%esp
f010ffb4:	ff 75 dc             	pushl  -0x24(%ebp)
f010ffb7:	ff 75 dc             	pushl  -0x24(%ebp)
f010ffba:	68 00 50 13 f0       	push   $0xf0135000
f010ffbf:	68 bc 03 00 00       	push   $0x3bc
f010ffc4:	68 e4 36 13 f0       	push   $0xf01336e4
f010ffc9:	e8 e2 01 ff ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f010ffce:	ff 45 dc             	incl   -0x24(%ebp)
f010ffd1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffd4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ffd7:	7c 9f                	jl     f010ff78 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010ffd9:	83 ec 0c             	sub    $0xc,%esp
f010ffdc:	68 08 43 13 f0       	push   $0xf0134308
f010ffe1:	e8 4b 0e ff ff       	call   f0100e31 <cprintf>
f010ffe6:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ffe9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010fff0:	e9 d8 00 00 00       	jmp    f01100cd <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010fff5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010fff8:	89 d0                	mov    %edx,%eax
f010fffa:	c1 e0 02             	shl    $0x2,%eax
f010fffd:	01 d0                	add    %edx,%eax
f010ffff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110006:	01 d0                	add    %edx,%eax
f0110008:	c1 e0 03             	shl    $0x3,%eax
f011000b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110012:	83 ec 0c             	sub    $0xc,%esp
f0110015:	50                   	push   %eax
f0110016:	e8 1f f6 01 00       	call   f012f63a <free_block>
f011001b:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011001e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110021:	89 d0                	mov    %edx,%eax
f0110023:	c1 e0 02             	shl    $0x2,%eax
f0110026:	01 d0                	add    %edx,%eax
f0110028:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011002f:	01 d0                	add    %edx,%eax
f0110031:	c1 e0 03             	shl    $0x3,%eax
f0110034:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011003b:	83 ec 0c             	sub    $0xc,%esp
f011003e:	50                   	push   %eax
f011003f:	e8 22 f4 01 00       	call   f012f466 <get_block_size>
f0110044:	83 c4 10             	add    $0x10,%esp
f0110047:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f011004a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011004d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110054:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0110057:	74 28                	je     f0110081 <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110059:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011005c:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110063:	83 ec 08             	sub    $0x8,%esp
f0110066:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110069:	50                   	push   %eax
f011006a:	ff 75 d8             	pushl  -0x28(%ebp)
f011006d:	68 50 50 13 f0       	push   $0xf0135050
f0110072:	68 c9 03 00 00       	push   $0x3c9
f0110077:	68 e4 36 13 f0       	push   $0xf01336e4
f011007c:	e8 2f 01 ff ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0110081:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110084:	89 d0                	mov    %edx,%eax
f0110086:	c1 e0 02             	shl    $0x2,%eax
f0110089:	01 d0                	add    %edx,%eax
f011008b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110092:	01 d0                	add    %edx,%eax
f0110094:	c1 e0 03             	shl    $0x3,%eax
f0110097:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011009e:	83 ec 0c             	sub    $0xc,%esp
f01100a1:	50                   	push   %eax
f01100a2:	e8 d5 f3 01 00       	call   f012f47c <is_free_block>
f01100a7:	83 c4 10             	add    $0x10,%esp
f01100aa:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f01100ad:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f01100b1:	74 17                	je     f01100ca <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01100b3:	ff 75 d8             	pushl  -0x28(%ebp)
f01100b6:	68 b0 50 13 f0       	push   $0xf01350b0
f01100bb:	68 cc 03 00 00       	push   $0x3cc
f01100c0:	68 e4 36 13 f0       	push   $0xf01336e4
f01100c5:	e8 e6 00 ff ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01100ca:	ff 45 d8             	incl   -0x28(%ebp)
f01100cd:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f01100d1:	0f 8e 1e ff ff ff    	jle    f010fff5 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f01100d7:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f01100dc:	83 ec 0c             	sub    $0xc,%esp
f01100df:	50                   	push   %eax
f01100e0:	e8 55 f5 01 00       	call   f012f63a <free_block>
f01100e5:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f01100e8:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f01100ed:	83 ec 0c             	sub    $0xc,%esp
f01100f0:	50                   	push   %eax
f01100f1:	e8 70 f3 01 00       	call   f012f466 <get_block_size>
f01100f6:	83 c4 10             	add    $0x10,%esp
f01100f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f01100fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100ff:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f0110102:	74 1d                	je     f0110121 <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f0110104:	83 ec 0c             	sub    $0xc,%esp
f0110107:	ff 75 bc             	pushl  -0x44(%ebp)
f011010a:	ff 75 d0             	pushl  -0x30(%ebp)
f011010d:	68 08 51 13 f0       	push   $0xf0135108
f0110112:	68 d3 03 00 00       	push   $0x3d3
f0110117:	68 e4 36 13 f0       	push   $0xf01336e4
f011011c:	e8 8f 00 ff ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110121:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f0110126:	83 ec 0c             	sub    $0xc,%esp
f0110129:	50                   	push   %eax
f011012a:	e8 4d f3 01 00       	call   f012f47c <is_free_block>
f011012f:	83 c4 10             	add    $0x10,%esp
f0110132:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110135:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110139:	74 17                	je     f0110152 <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011013b:	83 ec 04             	sub    $0x4,%esp
f011013e:	68 68 51 13 f0       	push   $0xf0135168
f0110143:	68 d6 03 00 00       	push   $0x3d6
f0110148:	68 e4 36 13 f0       	push   $0xf01336e4
f011014d:	e8 5e 00 ff ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f0110152:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110155:	83 e8 10             	sub    $0x10,%eax
f0110158:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011015b:	83 ec 08             	sub    $0x8,%esp
f011015e:	6a 03                	push   $0x3
f0110160:	ff 75 cc             	pushl  -0x34(%ebp)
f0110163:	e8 2b f3 01 00       	call   f012f493 <alloc_block>
f0110168:	83 c4 10             	add    $0x10,%esp
f011016b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011016e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110172:	74 0b                	je     f011017f <test_free_block_BF+0x4b8>
f0110174:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110177:	83 c0 10             	add    $0x10,%eax
f011017a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011017d:	74 17                	je     f0110196 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f011017f:	83 ec 04             	sub    $0x4,%esp
f0110182:	68 bc 51 13 f0       	push   $0xf01351bc
f0110187:	68 dd 03 00 00       	push   $0x3dd
f011018c:	68 e4 36 13 f0       	push   $0xf01336e4
f0110191:	e8 1a 00 ff ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110196:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f011019b:	83 ec 0c             	sub    $0xc,%esp
f011019e:	50                   	push   %eax
f011019f:	e8 96 f4 01 00       	call   f012f63a <free_block>
f01101a4:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f01101a7:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f01101ac:	83 ec 0c             	sub    $0xc,%esp
f01101af:	50                   	push   %eax
f01101b0:	e8 b1 f2 01 00       	call   f012f466 <get_block_size>
f01101b5:	83 c4 10             	add    $0x10,%esp
f01101b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f01101bb:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f01101c0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01101c3:	74 20                	je     f01101e5 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f01101c5:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f01101ca:	83 ec 0c             	sub    $0xc,%esp
f01101cd:	ff 75 bc             	pushl  -0x44(%ebp)
f01101d0:	50                   	push   %eax
f01101d1:	68 08 52 13 f0       	push   $0xf0135208
f01101d6:	68 e3 03 00 00       	push   $0x3e3
f01101db:	68 e4 36 13 f0       	push   $0xf01336e4
f01101e0:	e8 cb ff fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f01101e5:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f01101ea:	83 ec 0c             	sub    $0xc,%esp
f01101ed:	50                   	push   %eax
f01101ee:	e8 89 f2 01 00       	call   f012f47c <is_free_block>
f01101f3:	83 c4 10             	add    $0x10,%esp
f01101f6:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01101f9:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01101fd:	74 17                	je     f0110216 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01101ff:	83 ec 04             	sub    $0x4,%esp
f0110202:	68 68 52 13 f0       	push   $0xf0135268
f0110207:	68 e6 03 00 00       	push   $0x3e6
f011020c:	68 e4 36 13 f0       	push   $0xf01336e4
f0110211:	e8 9a ff fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110216:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f011021b:	83 e8 10             	sub    $0x10,%eax
f011021e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110221:	83 ec 08             	sub    $0x8,%esp
f0110224:	6a 03                	push   $0x3
f0110226:	ff 75 cc             	pushl  -0x34(%ebp)
f0110229:	e8 65 f2 01 00       	call   f012f493 <alloc_block>
f011022e:	83 c4 10             	add    $0x10,%esp
f0110231:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f0110234:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110238:	74 09                	je     f0110243 <test_free_block_BF+0x57c>
f011023a:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f0110241:	74 17                	je     f011025a <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110243:	83 ec 04             	sub    $0x4,%esp
f0110246:	68 bc 52 13 f0       	push   $0xf01352bc
f011024b:	68 ed 03 00 00       	push   $0x3ed
f0110250:	68 e4 36 13 f0       	push   $0xf01336e4
f0110255:	e8 56 ff fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f011025a:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f011025f:	83 ec 0c             	sub    $0xc,%esp
f0110262:	50                   	push   %eax
f0110263:	e8 d2 f3 01 00       	call   f012f63a <free_block>
f0110268:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f011026b:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f0110270:	83 ec 0c             	sub    $0xc,%esp
f0110273:	50                   	push   %eax
f0110274:	e8 ed f1 01 00       	call   f012f466 <get_block_size>
f0110279:	83 c4 10             	add    $0x10,%esp
f011027c:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f011027f:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f0110284:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110287:	74 20                	je     f01102a9 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110289:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f011028e:	83 ec 0c             	sub    $0xc,%esp
f0110291:	ff 75 bc             	pushl  -0x44(%ebp)
f0110294:	50                   	push   %eax
f0110295:	68 08 53 13 f0       	push   $0xf0135308
f011029a:	68 f3 03 00 00       	push   $0x3f3
f011029f:	68 e4 36 13 f0       	push   $0xf01336e4
f01102a4:	e8 07 ff fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f01102a9:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f01102ae:	83 ec 0c             	sub    $0xc,%esp
f01102b1:	50                   	push   %eax
f01102b2:	e8 c5 f1 01 00       	call   f012f47c <is_free_block>
f01102b7:	83 c4 10             	add    $0x10,%esp
f01102ba:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01102bd:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01102c1:	74 17                	je     f01102da <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01102c3:	83 ec 04             	sub    $0x4,%esp
f01102c6:	68 68 53 13 f0       	push   $0xf0135368
f01102cb:	68 f6 03 00 00       	push   $0x3f6
f01102d0:	68 e4 36 13 f0       	push   $0xf01336e4
f01102d5:	e8 d6 fe fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f01102da:	83 ec 0c             	sub    $0xc,%esp
f01102dd:	68 b4 46 13 f0       	push   $0xf01346b4
f01102e2:	e8 4a 0b ff ff       	call   f0100e31 <cprintf>
f01102e7:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01102ea:	83 ec 0c             	sub    $0xc,%esp
f01102ed:	68 f0 46 13 f0       	push   $0xf01346f0
f01102f2:	e8 3a 0b ff ff       	call   f0100e31 <cprintf>
f01102f7:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01102fa:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110301:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110304:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011030b:	83 ec 0c             	sub    $0xc,%esp
f011030e:	50                   	push   %eax
f011030f:	e8 26 f3 01 00       	call   f012f63a <free_block>
f0110314:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110317:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011031a:	48                   	dec    %eax
f011031b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110322:	83 ec 0c             	sub    $0xc,%esp
f0110325:	50                   	push   %eax
f0110326:	e8 3b f1 01 00       	call   f012f466 <get_block_size>
f011032b:	83 c4 10             	add    $0x10,%esp
f011032e:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f0110331:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f0110337:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011033a:	01 d0                	add    %edx,%eax
f011033c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011033f:	74 26                	je     f0110367 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f0110341:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f0110347:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011034a:	01 d0                	add    %edx,%eax
f011034c:	83 ec 0c             	sub    $0xc,%esp
f011034f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110352:	50                   	push   %eax
f0110353:	68 bc 53 13 f0       	push   $0xf01353bc
f0110358:	68 01 04 00 00       	push   $0x401
f011035d:	68 e4 36 13 f0       	push   $0xf01336e4
f0110362:	e8 49 fe fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110367:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011036a:	48                   	dec    %eax
f011036b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110372:	83 ec 0c             	sub    $0xc,%esp
f0110375:	50                   	push   %eax
f0110376:	e8 01 f1 01 00       	call   f012f47c <is_free_block>
f011037b:	83 c4 10             	add    $0x10,%esp
f011037e:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110381:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110385:	74 17                	je     f011039e <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110387:	83 ec 04             	sub    $0x4,%esp
f011038a:	68 1c 54 13 f0       	push   $0xf013541c
f011038f:	68 04 04 00 00       	push   $0x404
f0110394:	68 e4 36 13 f0       	push   $0xf01336e4
f0110399:	e8 12 fe fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011039e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103a1:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01103a8:	83 ec 0c             	sub    $0xc,%esp
f01103ab:	50                   	push   %eax
f01103ac:	e8 b5 f0 01 00       	call   f012f466 <get_block_size>
f01103b1:	83 c4 10             	add    $0x10,%esp
f01103b4:	85 c0                	test   %eax,%eax
f01103b6:	75 1a                	jne    f01103d2 <test_free_block_BF+0x70b>
f01103b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103bb:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01103c2:	83 ec 0c             	sub    $0xc,%esp
f01103c5:	50                   	push   %eax
f01103c6:	e8 b1 f0 01 00       	call   f012f47c <is_free_block>
f01103cb:	83 c4 10             	add    $0x10,%esp
f01103ce:	84 c0                	test   %al,%al
f01103d0:	74 17                	je     f01103e9 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01103d2:	83 ec 04             	sub    $0x4,%esp
f01103d5:	68 70 54 13 f0       	push   $0xf0135470
f01103da:	68 07 04 00 00       	push   $0x407
f01103df:	68 e4 36 13 f0       	push   $0xf01336e4
f01103e4:	e8 c7 fd fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f01103e9:	83 ec 0c             	sub    $0xc,%esp
f01103ec:	68 2a 48 13 f0       	push   $0xf013482a
f01103f1:	e8 3b 0a ff ff       	call   f0100e31 <cprintf>
f01103f6:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f01103f9:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110400:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110403:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011040a:	83 ec 0c             	sub    $0xc,%esp
f011040d:	50                   	push   %eax
f011040e:	e8 27 f2 01 00       	call   f012f63a <free_block>
f0110413:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110416:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110419:	48                   	dec    %eax
f011041a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110421:	83 ec 0c             	sub    $0xc,%esp
f0110424:	50                   	push   %eax
f0110425:	e8 3c f0 01 00       	call   f012f466 <get_block_size>
f011042a:	83 c4 10             	add    $0x10,%esp
f011042d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f0110430:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f0110436:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f011043b:	01 d0                	add    %edx,%eax
f011043d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110440:	74 28                	je     f011046a <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f0110442:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f0110448:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f011044d:	01 d0                	add    %edx,%eax
f011044f:	83 ec 0c             	sub    $0xc,%esp
f0110452:	ff 75 bc             	pushl  -0x44(%ebp)
f0110455:	50                   	push   %eax
f0110456:	68 dc 54 13 f0       	push   $0xf01354dc
f011045b:	68 10 04 00 00       	push   $0x410
f0110460:	68 e4 36 13 f0       	push   $0xf01336e4
f0110465:	e8 46 fd fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f011046a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011046d:	48                   	dec    %eax
f011046e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110475:	83 ec 0c             	sub    $0xc,%esp
f0110478:	50                   	push   %eax
f0110479:	e8 fe ef 01 00       	call   f012f47c <is_free_block>
f011047e:	83 c4 10             	add    $0x10,%esp
f0110481:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110484:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110488:	74 17                	je     f01104a1 <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011048a:	83 ec 04             	sub    $0x4,%esp
f011048d:	68 3c 55 13 f0       	push   $0xf013553c
f0110492:	68 13 04 00 00       	push   $0x413
f0110497:	68 e4 36 13 f0       	push   $0xf01336e4
f011049c:	e8 0f fd fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f01104a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01104a4:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01104ab:	83 ec 0c             	sub    $0xc,%esp
f01104ae:	50                   	push   %eax
f01104af:	e8 b2 ef 01 00       	call   f012f466 <get_block_size>
f01104b4:	83 c4 10             	add    $0x10,%esp
f01104b7:	85 c0                	test   %eax,%eax
f01104b9:	75 1a                	jne    f01104d5 <test_free_block_BF+0x80e>
f01104bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01104be:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01104c5:	83 ec 0c             	sub    $0xc,%esp
f01104c8:	50                   	push   %eax
f01104c9:	e8 ae ef 01 00       	call   f012f47c <is_free_block>
f01104ce:	83 c4 10             	add    $0x10,%esp
f01104d1:	84 c0                	test   %al,%al
f01104d3:	74 17                	je     f01104ec <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01104d5:	83 ec 04             	sub    $0x4,%esp
f01104d8:	68 90 55 13 f0       	push   $0xf0135590
f01104dd:	68 16 04 00 00       	push   $0x416
f01104e2:	68 e4 36 13 f0       	push   $0xf01336e4
f01104e7:	e8 c4 fc fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01104ec:	83 ec 0c             	sub    $0xc,%esp
f01104ef:	68 68 49 13 f0       	push   $0xf0134968
f01104f4:	e8 38 09 ff ff       	call   f0100e31 <cprintf>
f01104f9:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01104fc:	83 ec 0c             	sub    $0xc,%esp
f01104ff:	68 a0 49 13 f0       	push   $0xf01349a0
f0110504:	e8 28 09 ff ff       	call   f0100e31 <cprintf>
f0110509:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f011050c:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110513:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110516:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011051d:	83 ec 0c             	sub    $0xc,%esp
f0110520:	50                   	push   %eax
f0110521:	e8 14 f1 01 00       	call   f012f63a <free_block>
f0110526:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110529:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011052c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110533:	83 ec 0c             	sub    $0xc,%esp
f0110536:	50                   	push   %eax
f0110537:	e8 2a ef 01 00       	call   f012f466 <get_block_size>
f011053c:	83 c4 10             	add    $0x10,%esp
f011053f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f0110542:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f0110548:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f011054d:	01 d0                	add    %edx,%eax
f011054f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110552:	74 28                	je     f011057c <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110554:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f011055a:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f011055f:	01 d0                	add    %edx,%eax
f0110561:	83 ec 0c             	sub    $0xc,%esp
f0110564:	ff 75 bc             	pushl  -0x44(%ebp)
f0110567:	50                   	push   %eax
f0110568:	68 dc 54 13 f0       	push   $0xf01354dc
f011056d:	68 20 04 00 00       	push   $0x420
f0110572:	68 e4 36 13 f0       	push   $0xf01336e4
f0110577:	e8 34 fc fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f011057c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011057f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110586:	83 ec 0c             	sub    $0xc,%esp
f0110589:	50                   	push   %eax
f011058a:	e8 ed ee 01 00       	call   f012f47c <is_free_block>
f011058f:	83 c4 10             	add    $0x10,%esp
f0110592:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110595:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110599:	74 17                	je     f01105b2 <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011059b:	83 ec 04             	sub    $0x4,%esp
f011059e:	68 3c 55 13 f0       	push   $0xf013553c
f01105a3:	68 23 04 00 00       	push   $0x423
f01105a8:	68 e4 36 13 f0       	push   $0xf01336e4
f01105ad:	e8 fe fb fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01105b2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105b5:	40                   	inc    %eax
f01105b6:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01105bd:	83 ec 0c             	sub    $0xc,%esp
f01105c0:	50                   	push   %eax
f01105c1:	e8 a0 ee 01 00       	call   f012f466 <get_block_size>
f01105c6:	83 c4 10             	add    $0x10,%esp
f01105c9:	85 c0                	test   %eax,%eax
f01105cb:	75 1b                	jne    f01105e8 <test_free_block_BF+0x921>
f01105cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105d0:	40                   	inc    %eax
f01105d1:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01105d8:	83 ec 0c             	sub    $0xc,%esp
f01105db:	50                   	push   %eax
f01105dc:	e8 9b ee 01 00       	call   f012f47c <is_free_block>
f01105e1:	83 c4 10             	add    $0x10,%esp
f01105e4:	84 c0                	test   %al,%al
f01105e6:	74 17                	je     f01105ff <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01105e8:	83 ec 04             	sub    $0x4,%esp
f01105eb:	68 90 55 13 f0       	push   $0xf0135590
f01105f0:	68 26 04 00 00       	push   $0x426
f01105f5:	68 e4 36 13 f0       	push   $0xf01336e4
f01105fa:	e8 b1 fb fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f01105ff:	83 ec 0c             	sub    $0xc,%esp
f0110602:	68 b5 49 13 f0       	push   $0xf01349b5
f0110607:	e8 25 08 ff ff       	call   f0100e31 <cprintf>
f011060c:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f011060f:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110616:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110619:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110620:	83 ec 0c             	sub    $0xc,%esp
f0110623:	50                   	push   %eax
f0110624:	e8 11 f0 01 00       	call   f012f63a <free_block>
f0110629:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f011062c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011062f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110636:	83 ec 0c             	sub    $0xc,%esp
f0110639:	50                   	push   %eax
f011063a:	e8 27 ee 01 00       	call   f012f466 <get_block_size>
f011063f:	83 c4 10             	add    $0x10,%esp
f0110642:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110645:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f011064b:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f0110650:	01 d0                	add    %edx,%eax
f0110652:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110655:	74 28                	je     f011067f <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110657:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f011065d:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f0110662:	01 d0                	add    %edx,%eax
f0110664:	83 ec 0c             	sub    $0xc,%esp
f0110667:	ff 75 bc             	pushl  -0x44(%ebp)
f011066a:	50                   	push   %eax
f011066b:	68 fc 55 13 f0       	push   $0xf01355fc
f0110670:	68 2f 04 00 00       	push   $0x42f
f0110675:	68 e4 36 13 f0       	push   $0xf01336e4
f011067a:	e8 31 fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f011067f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110682:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110689:	83 ec 0c             	sub    $0xc,%esp
f011068c:	50                   	push   %eax
f011068d:	e8 ea ed 01 00       	call   f012f47c <is_free_block>
f0110692:	83 c4 10             	add    $0x10,%esp
f0110695:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110698:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011069c:	74 17                	je     f01106b5 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011069e:	83 ec 04             	sub    $0x4,%esp
f01106a1:	68 5c 56 13 f0       	push   $0xf013565c
f01106a6:	68 32 04 00 00       	push   $0x432
f01106ab:	68 e4 36 13 f0       	push   $0xf01336e4
f01106b0:	e8 fb fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01106b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106b8:	40                   	inc    %eax
f01106b9:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01106c0:	83 ec 0c             	sub    $0xc,%esp
f01106c3:	50                   	push   %eax
f01106c4:	e8 9d ed 01 00       	call   f012f466 <get_block_size>
f01106c9:	83 c4 10             	add    $0x10,%esp
f01106cc:	85 c0                	test   %eax,%eax
f01106ce:	75 1b                	jne    f01106eb <test_free_block_BF+0xa24>
f01106d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106d3:	40                   	inc    %eax
f01106d4:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01106db:	83 ec 0c             	sub    $0xc,%esp
f01106de:	50                   	push   %eax
f01106df:	e8 98 ed 01 00       	call   f012f47c <is_free_block>
f01106e4:	83 c4 10             	add    $0x10,%esp
f01106e7:	84 c0                	test   %al,%al
f01106e9:	74 17                	je     f0110702 <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01106eb:	83 ec 04             	sub    $0x4,%esp
f01106ee:	68 b4 56 13 f0       	push   $0xf01356b4
f01106f3:	68 35 04 00 00       	push   $0x435
f01106f8:	68 e4 36 13 f0       	push   $0xf01336e4
f01106fd:	e8 ae fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110702:	83 ec 0c             	sub    $0xc,%esp
f0110705:	68 f8 4a 13 f0       	push   $0xf0134af8
f011070a:	e8 22 07 ff ff       	call   f0100e31 <cprintf>
f011070f:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110712:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110719:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011071c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110723:	83 ec 0c             	sub    $0xc,%esp
f0110726:	50                   	push   %eax
f0110727:	e8 0e ef 01 00       	call   f012f63a <free_block>
f011072c:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f011072f:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110736:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110739:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110740:	83 ec 0c             	sub    $0xc,%esp
f0110743:	50                   	push   %eax
f0110744:	e8 f1 ee 01 00       	call   f012f63a <free_block>
f0110749:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f011074c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011074f:	48                   	dec    %eax
f0110750:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110757:	83 ec 0c             	sub    $0xc,%esp
f011075a:	50                   	push   %eax
f011075b:	e8 06 ed 01 00       	call   f012f466 <get_block_size>
f0110760:	83 c4 10             	add    $0x10,%esp
f0110763:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110766:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f011076c:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0110771:	01 c2                	add    %eax,%edx
f0110773:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f0110778:	01 d0                	add    %edx,%eax
f011077a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011077d:	74 2f                	je     f01107ae <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f011077f:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f0110785:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f011078a:	01 c2                	add    %eax,%edx
f011078c:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f0110791:	01 d0                	add    %edx,%eax
f0110793:	83 ec 0c             	sub    $0xc,%esp
f0110796:	ff 75 bc             	pushl  -0x44(%ebp)
f0110799:	50                   	push   %eax
f011079a:	68 20 57 13 f0       	push   $0xf0135720
f011079f:	68 41 04 00 00       	push   $0x441
f01107a4:	68 e4 36 13 f0       	push   $0xf01336e4
f01107a9:	e8 02 fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01107ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107b1:	48                   	dec    %eax
f01107b2:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01107b9:	83 ec 0c             	sub    $0xc,%esp
f01107bc:	50                   	push   %eax
f01107bd:	e8 ba ec 01 00       	call   f012f47c <is_free_block>
f01107c2:	83 c4 10             	add    $0x10,%esp
f01107c5:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01107c8:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01107cc:	74 17                	je     f01107e5 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01107ce:	83 ec 04             	sub    $0x4,%esp
f01107d1:	68 80 57 13 f0       	push   $0xf0135780
f01107d6:	68 44 04 00 00       	push   $0x444
f01107db:	68 e4 36 13 f0       	push   $0xf01336e4
f01107e0:	e8 cb f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f01107e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107e8:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01107ef:	83 ec 0c             	sub    $0xc,%esp
f01107f2:	50                   	push   %eax
f01107f3:	e8 6e ec 01 00       	call   f012f466 <get_block_size>
f01107f8:	83 c4 10             	add    $0x10,%esp
f01107fb:	85 c0                	test   %eax,%eax
f01107fd:	75 50                	jne    f011084f <test_free_block_BF+0xb88>
f01107ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110802:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110809:	83 ec 0c             	sub    $0xc,%esp
f011080c:	50                   	push   %eax
f011080d:	e8 6a ec 01 00       	call   f012f47c <is_free_block>
f0110812:	83 c4 10             	add    $0x10,%esp
f0110815:	84 c0                	test   %al,%al
f0110817:	75 36                	jne    f011084f <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110819:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011081c:	40                   	inc    %eax
f011081d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110824:	83 ec 0c             	sub    $0xc,%esp
f0110827:	50                   	push   %eax
f0110828:	e8 39 ec 01 00       	call   f012f466 <get_block_size>
f011082d:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110830:	85 c0                	test   %eax,%eax
f0110832:	75 1b                	jne    f011084f <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110834:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110837:	40                   	inc    %eax
f0110838:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011083f:	83 ec 0c             	sub    $0xc,%esp
f0110842:	50                   	push   %eax
f0110843:	e8 34 ec 01 00       	call   f012f47c <is_free_block>
f0110848:	83 c4 10             	add    $0x10,%esp
f011084b:	84 c0                	test   %al,%al
f011084d:	74 17                	je     f0110866 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f011084f:	83 ec 04             	sub    $0x4,%esp
f0110852:	68 d8 57 13 f0       	push   $0xf01357d8
f0110857:	68 48 04 00 00       	push   $0x448
f011085c:	68 e4 36 13 f0       	push   $0xf01336e4
f0110861:	e8 4a f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110866:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f011086d:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110874:	83 ec 08             	sub    $0x8,%esp
f0110877:	6a 03                	push   $0x3
f0110879:	ff 75 cc             	pushl  -0x34(%ebp)
f011087c:	e8 12 ec 01 00       	call   f012f493 <alloc_block>
f0110881:	83 c4 10             	add    $0x10,%esp
f0110884:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110887:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f011088c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f011088f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110893:	74 08                	je     f011089d <test_free_block_BF+0xbd6>
f0110895:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110898:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011089b:	74 1d                	je     f01108ba <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f011089d:	83 ec 0c             	sub    $0xc,%esp
f01108a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01108a3:	ff 75 b0             	pushl  -0x50(%ebp)
f01108a6:	68 44 58 13 f0       	push   $0xf0135844
f01108ab:	68 55 04 00 00       	push   $0x455
f01108b0:	68 e4 36 13 f0       	push   $0xf01336e4
f01108b5:	e8 f6 f8 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01108ba:	83 ec 0c             	sub    $0xc,%esp
f01108bd:	68 60 4c 13 f0       	push   $0xf0134c60
f01108c2:	e8 6a 05 ff ff       	call   f0100e31 <cprintf>
f01108c7:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f01108ca:	83 ec 0c             	sub    $0xc,%esp
f01108cd:	68 a8 58 13 f0       	push   $0xf01358a8
f01108d2:	e8 5a 05 ff ff       	call   f0100e31 <cprintf>
f01108d7:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f01108da:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01108e1:	83 ec 08             	sub    $0x8,%esp
f01108e4:	6a 03                	push   $0x3
f01108e6:	ff 75 cc             	pushl  -0x34(%ebp)
f01108e9:	e8 a5 eb 01 00       	call   f012f493 <alloc_block>
f01108ee:	83 c4 10             	add    $0x10,%esp
f01108f1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f01108f4:	a1 80 aa 2d f0       	mov    0xf02daa80,%eax
f01108f9:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f01108fc:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110900:	74 08                	je     f011090a <test_free_block_BF+0xc43>
f0110902:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110905:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110908:	74 1d                	je     f0110927 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f011090a:	83 ec 0c             	sub    $0xc,%esp
f011090d:	ff 75 c8             	pushl  -0x38(%ebp)
f0110910:	ff 75 b0             	pushl  -0x50(%ebp)
f0110913:	68 d0 58 13 f0       	push   $0xf01358d0
f0110918:	68 60 04 00 00       	push   $0x460
f011091d:	68 e4 36 13 f0       	push   $0xf01336e4
f0110922:	e8 89 f8 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110927:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011092e:	83 ec 08             	sub    $0x8,%esp
f0110931:	6a 03                	push   $0x3
f0110933:	ff 75 cc             	pushl  -0x34(%ebp)
f0110936:	e8 58 eb 01 00       	call   f012f493 <alloc_block>
f011093b:	83 c4 10             	add    $0x10,%esp
f011093e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110941:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f0110946:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110949:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011094d:	74 08                	je     f0110957 <test_free_block_BF+0xc90>
f011094f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110952:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110955:	74 1d                	je     f0110974 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110957:	83 ec 0c             	sub    $0xc,%esp
f011095a:	ff 75 c8             	pushl  -0x38(%ebp)
f011095d:	ff 75 b0             	pushl  -0x50(%ebp)
f0110960:	68 34 59 13 f0       	push   $0xf0135934
f0110965:	68 67 04 00 00       	push   $0x467
f011096a:	68 e4 36 13 f0       	push   $0xf01336e4
f011096f:	e8 3c f8 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110974:	83 ec 0c             	sub    $0xc,%esp
f0110977:	68 f8 4d 13 f0       	push   $0xf0134df8
f011097c:	e8 b0 04 ff ff       	call   f0100e31 <cprintf>
f0110981:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110984:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011098b:	83 ec 08             	sub    $0x8,%esp
f011098e:	6a 03                	push   $0x3
f0110990:	ff 75 cc             	pushl  -0x34(%ebp)
f0110993:	e8 fb ea 01 00       	call   f012f493 <alloc_block>
f0110998:	83 c4 10             	add    $0x10,%esp
f011099b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f011099e:	a1 b8 b0 2d f0       	mov    0xf02db0b8,%eax
f01109a3:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f01109a6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01109aa:	74 08                	je     f01109b4 <test_free_block_BF+0xced>
f01109ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01109af:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01109b2:	74 1d                	je     f01109d1 <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01109b4:	83 ec 0c             	sub    $0xc,%esp
f01109b7:	ff 75 c8             	pushl  -0x38(%ebp)
f01109ba:	ff 75 b0             	pushl  -0x50(%ebp)
f01109bd:	68 98 59 13 f0       	push   $0xf0135998
f01109c2:	68 6f 04 00 00       	push   $0x46f
f01109c7:	68 e4 36 13 f0       	push   $0xf01336e4
f01109cc:	e8 df f7 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f01109d1:	83 ec 0c             	sub    $0xc,%esp
f01109d4:	68 fc 59 13 f0       	push   $0xf01359fc
f01109d9:	e8 53 04 ff ff       	call   f0100e31 <cprintf>
f01109de:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f01109e1:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01109e8:	83 ec 08             	sub    $0x8,%esp
f01109eb:	6a 03                	push   $0x3
f01109ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01109f0:	e8 9e ea 01 00       	call   f012f493 <alloc_block>
f01109f5:	83 c4 10             	add    $0x10,%esp
f01109f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f01109fb:	a1 5c a7 2d f0       	mov    0xf02da75c,%eax
f0110a00:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110a03:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a07:	74 08                	je     f0110a11 <test_free_block_BF+0xd4a>
f0110a09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110a0c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110a0f:	74 1d                	je     f0110a2e <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110a11:	83 ec 0c             	sub    $0xc,%esp
f0110a14:	ff 75 c8             	pushl  -0x38(%ebp)
f0110a17:	ff 75 b0             	pushl  -0x50(%ebp)
f0110a1a:	68 24 5a 13 f0       	push   $0xf0135a24
f0110a1f:	68 77 04 00 00       	push   $0x477
f0110a24:	68 e4 36 13 f0       	push   $0xf01336e4
f0110a29:	e8 82 f7 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110a2e:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110a35:	83 ec 08             	sub    $0x8,%esp
f0110a38:	6a 03                	push   $0x3
f0110a3a:	ff 75 cc             	pushl  -0x34(%ebp)
f0110a3d:	e8 51 ea 01 00       	call   f012f493 <alloc_block>
f0110a42:	83 c4 10             	add    $0x10,%esp
f0110a45:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110a48:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110a4f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a53:	74 08                	je     f0110a5d <test_free_block_BF+0xd96>
f0110a55:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110a58:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110a5b:	74 1d                	je     f0110a7a <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110a5d:	83 ec 0c             	sub    $0xc,%esp
f0110a60:	ff 75 c8             	pushl  -0x38(%ebp)
f0110a63:	ff 75 b0             	pushl  -0x50(%ebp)
f0110a66:	68 88 5a 13 f0       	push   $0xf0135a88
f0110a6b:	68 7e 04 00 00       	push   $0x47e
f0110a70:	68 e4 36 13 f0       	push   $0xf01336e4
f0110a75:	e8 36 f7 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110a7a:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110a81:	83 ec 08             	sub    $0x8,%esp
f0110a84:	6a 03                	push   $0x3
f0110a86:	ff 75 cc             	pushl  -0x34(%ebp)
f0110a89:	e8 05 ea 01 00       	call   f012f493 <alloc_block>
f0110a8e:	83 c4 10             	add    $0x10,%esp
f0110a91:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110a94:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110a9b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a9f:	74 08                	je     f0110aa9 <test_free_block_BF+0xde2>
f0110aa1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110aa4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110aa7:	74 1d                	je     f0110ac6 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110aa9:	83 ec 0c             	sub    $0xc,%esp
f0110aac:	ff 75 c8             	pushl  -0x38(%ebp)
f0110aaf:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ab2:	68 ec 5a 13 f0       	push   $0xf0135aec
f0110ab7:	68 85 04 00 00       	push   $0x485
f0110abc:	68 e4 36 13 f0       	push   $0xf01336e4
f0110ac1:	e8 ea f6 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110ac6:	83 ec 0c             	sub    $0xc,%esp
f0110ac9:	68 50 5b 13 f0       	push   $0xf0135b50
f0110ace:	e8 5e 03 ff ff       	call   f0100e31 <cprintf>
f0110ad3:	83 c4 10             	add    $0x10,%esp

}
f0110ad6:	90                   	nop
f0110ad7:	c9                   	leave  
f0110ad8:	c3                   	ret    

f0110ad9 <test_free_block_NF>:

void test_free_block_NF()
{
f0110ad9:	55                   	push   %ebp
f0110ada:	89 e5                	mov    %esp,%ebp
f0110adc:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110adf:	83 ec 04             	sub    $0x4,%esp
f0110ae2:	68 99 5b 13 f0       	push   $0xf0135b99
f0110ae7:	68 8e 04 00 00       	push   $0x48e
f0110aec:	68 e4 36 13 f0       	push   $0xf01336e4
f0110af1:	e8 ba f6 fe ff       	call   f01001b0 <_panic>

f0110af6 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110af6:	55                   	push   %ebp
f0110af7:	89 e5                	mov    %esp,%ebp
f0110af9:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110afc:	83 ec 0c             	sub    $0xc,%esp
f0110aff:	68 ac 5b 13 f0       	push   $0xf0135bac
f0110b04:	e8 28 03 ff ff       	call   f0100e31 <cprintf>
f0110b09:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110b0c:	83 ec 0c             	sub    $0xc,%esp
f0110b0f:	68 e4 5b 13 f0       	push   $0xf0135be4
f0110b14:	e8 18 03 ff ff       	call   f0100e31 <cprintf>
f0110b19:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110b1c:	83 ec 0c             	sub    $0xc,%esp
f0110b1f:	68 1c 5c 13 f0       	push   $0xf0135c1c
f0110b24:	e8 08 03 ff ff       	call   f0100e31 <cprintf>
f0110b29:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110b2c:	83 ec 0c             	sub    $0xc,%esp
f0110b2f:	68 ac 5b 13 f0       	push   $0xf0135bac
f0110b34:	e8 f8 02 ff ff       	call   f0100e31 <cprintf>
f0110b39:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110b43:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110b4a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110b4d:	83 ec 08             	sub    $0x8,%esp
f0110b50:	50                   	push   %eax
f0110b51:	68 00 00 00 f6       	push   $0xf6000000
f0110b56:	e8 51 ea 01 00       	call   f012f5ac <initialize_dynamic_allocator>
f0110b5b:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110b5e:	83 ec 0c             	sub    $0xc,%esp
f0110b61:	68 54 5c 13 f0       	push   $0xf0135c54
f0110b66:	e8 c6 02 ff ff       	call   f0100e31 <cprintf>
f0110b6b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110b6e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110b75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110b7c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110b83:	eb 2a                	jmp    f0110baf <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110b88:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f0110b8f:	89 d0                	mov    %edx,%eax
f0110b91:	c1 e0 02             	shl    $0x2,%eax
f0110b94:	01 d0                	add    %edx,%eax
f0110b96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110b9d:	01 d0                	add    %edx,%eax
f0110b9f:	c1 e0 03             	shl    $0x3,%eax
f0110ba2:	89 c2                	mov    %eax,%edx
f0110ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ba7:	01 d0                	add    %edx,%eax
f0110ba9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110bac:	ff 45 e8             	incl   -0x18(%ebp)
f0110baf:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110bb3:	7e d0                	jle    f0110b85 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110bb5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110bb8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110bbb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110bbe:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110bc2:	7f 17                	jg     f0110bdb <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110bc4:	83 ec 04             	sub    $0x4,%esp
f0110bc7:	68 84 5c 13 f0       	push   $0xf0135c84
f0110bcc:	68 b5 04 00 00       	push   $0x4b5
f0110bd1:	68 e4 36 13 f0       	push   $0xf01336e4
f0110bd6:	e8 d5 f5 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110bdb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110be2:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110be9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110bf0:	e9 f8 00 00 00       	jmp    f0110ced <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110bf5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110bfc:	e9 dc 00 00 00       	jmp    f0110cdd <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110c01:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110c04:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110c0b:	83 e8 10             	sub    $0x10,%eax
f0110c0e:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110c11:	83 ec 08             	sub    $0x8,%esp
f0110c14:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c17:	6a 00                	push   $0x0
f0110c19:	e8 5e ea 01 00       	call   f012f67c <realloc_block_FF>
f0110c1e:	83 c4 10             	add    $0x10,%esp
f0110c21:	89 c2                	mov    %eax,%edx
f0110c23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c26:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f0110c2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c30:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110c37:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110c3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c3d:	d1 e8                	shr    %eax
f0110c3f:	89 c2                	mov    %eax,%edx
f0110c41:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110c44:	01 c2                	add    %eax,%edx
f0110c46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c49:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110c50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c53:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110c56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110c59:	01 c2                	add    %eax,%edx
f0110c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c5e:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110c65:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110c69:	74 0b                	je     f0110c76 <test_realloc_block_FF+0x180>
f0110c6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110c6e:	83 c0 10             	add    $0x10,%eax
f0110c71:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110c74:	74 24                	je     f0110c9a <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110c76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110c79:	83 c0 10             	add    $0x10,%eax
f0110c7c:	83 ec 08             	sub    $0x8,%esp
f0110c7f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c82:	50                   	push   %eax
f0110c83:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110c86:	68 04 5d 13 f0       	push   $0xf0135d04
f0110c8b:	68 c4 04 00 00       	push   $0x4c4
f0110c90:	68 e4 36 13 f0       	push   $0xf01336e4
f0110c95:	e8 16 f5 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0110c9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110c9d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110ca4:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0110ca7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110caa:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f0110cb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cb4:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110cb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cba:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f0110cc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cc4:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110cc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cca:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f0110cd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cd4:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110cd7:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110cda:	ff 45 d8             	incl   -0x28(%ebp)
f0110cdd:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0110ce4:	0f 8e 17 ff ff ff    	jle    f0110c01 <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110cea:	ff 45 dc             	incl   -0x24(%ebp)
f0110ced:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110cf1:	0f 8e fe fe ff ff    	jle    f0110bf5 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110cf7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110cfa:	83 e8 10             	sub    $0x10,%eax
f0110cfd:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110d00:	83 ec 08             	sub    $0x8,%esp
f0110d03:	ff 75 c0             	pushl  -0x40(%ebp)
f0110d06:	6a 00                	push   $0x0
f0110d08:	e8 6f e9 01 00       	call   f012f67c <realloc_block_FF>
f0110d0d:	83 c4 10             	add    $0x10,%esp
f0110d10:	89 c2                	mov    %eax,%edx
f0110d12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d15:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f0110d1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d1f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110d26:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110d29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d2c:	d1 e8                	shr    %eax
f0110d2e:	89 c2                	mov    %eax,%edx
f0110d30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110d33:	01 c2                	add    %eax,%edx
f0110d35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d38:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110d3f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d42:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110d45:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110d48:	01 c2                	add    %eax,%edx
f0110d4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d4d:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110d54:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110d58:	74 0b                	je     f0110d65 <test_realloc_block_FF+0x26f>
f0110d5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110d5d:	83 c0 10             	add    $0x10,%eax
f0110d60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110d63:	74 17                	je     f0110d7c <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0110d65:	83 ec 04             	sub    $0x4,%esp
f0110d68:	68 60 5d 13 f0       	push   $0xf0135d60
f0110d6d:	68 d5 04 00 00       	push   $0x4d5
f0110d72:	68 e4 36 13 f0       	push   $0xf01336e4
f0110d77:	e8 34 f4 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0110d7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d7f:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f0110d86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d89:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d8f:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f0110d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d99:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110d9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d9f:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f0110da6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110da9:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110dac:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110db3:	eb 59                	jmp    f0110e0e <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110db5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110db8:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110dbf:	66 8b 00             	mov    (%eax),%ax
f0110dc2:	98                   	cwtl   
f0110dc3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110dc6:	75 26                	jne    f0110dee <test_realloc_block_FF+0x2f8>
f0110dc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110dcb:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0110dd2:	66 8b 00             	mov    (%eax),%ax
f0110dd5:	98                   	cwtl   
f0110dd6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110dd9:	75 13                	jne    f0110dee <test_realloc_block_FF+0x2f8>
f0110ddb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110dde:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f0110de5:	66 8b 00             	mov    (%eax),%ax
f0110de8:	98                   	cwtl   
f0110de9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110dec:	74 1d                	je     f0110e0b <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0110dee:	83 ec 0c             	sub    $0xc,%esp
f0110df1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110df4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110df7:	68 a4 5d 13 f0       	push   $0xf0135da4
f0110dfc:	68 df 04 00 00       	push   $0x4df
f0110e01:	68 e4 36 13 f0       	push   $0xf01336e4
f0110e06:	e8 a5 f3 fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110e0b:	ff 45 d4             	incl   -0x2c(%ebp)
f0110e0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e11:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110e14:	7c 9f                	jl     f0110db5 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0110e16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e1a:	74 04                	je     f0110e20 <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f0110e1c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f0110e20:	83 ec 0c             	sub    $0xc,%esp
f0110e23:	68 fc 5d 13 f0       	push   $0xf0135dfc
f0110e28:	e8 04 00 ff ff       	call   f0100e31 <cprintf>
f0110e2d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110e30:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110e37:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110e3e:	e9 fa 00 00 00       	jmp    f0110f3d <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f0110e43:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110e46:	89 d0                	mov    %edx,%eax
f0110e48:	c1 e0 02             	shl    $0x2,%eax
f0110e4b:	01 d0                	add    %edx,%eax
f0110e4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110e54:	01 d0                	add    %edx,%eax
f0110e56:	c1 e0 03             	shl    $0x3,%eax
f0110e59:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110e60:	83 ec 08             	sub    $0x8,%esp
f0110e63:	6a 00                	push   $0x0
f0110e65:	50                   	push   %eax
f0110e66:	e8 11 e8 01 00       	call   f012f67c <realloc_block_FF>
f0110e6b:	83 c4 10             	add    $0x10,%esp
f0110e6e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0110e71:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110e74:	89 d0                	mov    %edx,%eax
f0110e76:	c1 e0 02             	shl    $0x2,%eax
f0110e79:	01 d0                	add    %edx,%eax
f0110e7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110e82:	01 d0                	add    %edx,%eax
f0110e84:	c1 e0 03             	shl    $0x3,%eax
f0110e87:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110e8e:	83 ec 0c             	sub    $0xc,%esp
f0110e91:	50                   	push   %eax
f0110e92:	e8 cf e5 01 00       	call   f012f466 <get_block_size>
f0110e97:	83 c4 10             	add    $0x10,%esp
f0110e9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f0110e9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110ea0:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110ea7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0110eaa:	74 28                	je     f0110ed4 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110eac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110eaf:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110eb6:	83 ec 08             	sub    $0x8,%esp
f0110eb9:	ff 75 b8             	pushl  -0x48(%ebp)
f0110ebc:	50                   	push   %eax
f0110ebd:	ff 75 d0             	pushl  -0x30(%ebp)
f0110ec0:	68 2c 5e 13 f0       	push   $0xf0135e2c
f0110ec5:	68 f3 04 00 00       	push   $0x4f3
f0110eca:	68 e4 36 13 f0       	push   $0xf01336e4
f0110ecf:	e8 dc f2 fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0110ed4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110ed7:	89 d0                	mov    %edx,%eax
f0110ed9:	c1 e0 02             	shl    $0x2,%eax
f0110edc:	01 d0                	add    %edx,%eax
f0110ede:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110ee5:	01 d0                	add    %edx,%eax
f0110ee7:	c1 e0 03             	shl    $0x3,%eax
f0110eea:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110ef1:	83 ec 0c             	sub    $0xc,%esp
f0110ef4:	50                   	push   %eax
f0110ef5:	e8 82 e5 01 00       	call   f012f47c <is_free_block>
f0110efa:	83 c4 10             	add    $0x10,%esp
f0110efd:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f0110f00:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f0110f04:	74 17                	je     f0110f1d <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0110f06:	ff 75 d0             	pushl  -0x30(%ebp)
f0110f09:	68 94 5e 13 f0       	push   $0xf0135e94
f0110f0e:	68 f6 04 00 00       	push   $0x4f6
f0110f13:	68 e4 36 13 f0       	push   $0xf01336e4
f0110f18:	e8 93 f2 fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f0110f1d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110f21:	74 17                	je     f0110f3a <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f0110f23:	ff 75 d0             	pushl  -0x30(%ebp)
f0110f26:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0110f2b:	68 f8 04 00 00       	push   $0x4f8
f0110f30:	68 e4 36 13 f0       	push   $0xf01336e4
f0110f35:	e8 76 f2 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f3a:	ff 45 d0             	incl   -0x30(%ebp)
f0110f3d:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110f41:	0f 8e fc fe ff ff    	jle    f0110e43 <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f0110f47:	83 ec 08             	sub    $0x8,%esp
f0110f4a:	6a 00                	push   $0x0
f0110f4c:	6a 00                	push   $0x0
f0110f4e:	e8 29 e7 01 00       	call   f012f67c <realloc_block_FF>
f0110f53:	83 c4 10             	add    $0x10,%esp
f0110f56:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0110f59:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110f5d:	74 17                	je     f0110f76 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f0110f5f:	83 ec 04             	sub    $0x4,%esp
f0110f62:	68 24 5f 13 f0       	push   $0xf0135f24
f0110f67:	68 fe 04 00 00       	push   $0x4fe
f0110f6c:	68 e4 36 13 f0       	push   $0xf01336e4
f0110f71:	e8 3a f2 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110f76:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110f7d:	eb 6b                	jmp    f0110fea <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f0110f7f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110f82:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0110f87:	99                   	cltd   
f0110f88:	f7 f9                	idiv   %ecx
f0110f8a:	89 d0                	mov    %edx,%eax
f0110f8c:	85 c0                	test   %eax,%eax
f0110f8e:	74 56                	je     f0110fe6 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110f90:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110f93:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110f9a:	66 8b 00             	mov    (%eax),%ax
f0110f9d:	98                   	cwtl   
f0110f9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fa1:	75 26                	jne    f0110fc9 <test_realloc_block_FF+0x4d3>
f0110fa3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fa6:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0110fad:	66 8b 00             	mov    (%eax),%ax
f0110fb0:	98                   	cwtl   
f0110fb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fb4:	75 13                	jne    f0110fc9 <test_realloc_block_FF+0x4d3>
f0110fb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fb9:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f0110fc0:	66 8b 00             	mov    (%eax),%ax
f0110fc3:	98                   	cwtl   
f0110fc4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fc7:	74 1e                	je     f0110fe7 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0110fc9:	83 ec 0c             	sub    $0xc,%esp
f0110fcc:	ff 75 cc             	pushl  -0x34(%ebp)
f0110fcf:	ff 75 cc             	pushl  -0x34(%ebp)
f0110fd2:	68 58 5f 13 f0       	push   $0xf0135f58
f0110fd7:	68 06 05 00 00       	push   $0x506
f0110fdc:	68 e4 36 13 f0       	push   $0xf01336e4
f0110fe1:	e8 ca f1 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0110fe6:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110fe7:	ff 45 cc             	incl   -0x34(%ebp)
f0110fea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fed:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110ff0:	7c 8d                	jl     f0110f7f <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0110ff2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110ff6:	74 04                	je     f0110ffc <test_realloc_block_FF+0x506>
	{
		eval += 10;
f0110ff8:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f0110ffc:	83 ec 0c             	sub    $0xc,%esp
f0110fff:	68 b0 5f 13 f0       	push   $0xf0135fb0
f0111004:	e8 28 fe fe ff       	call   f0100e31 <cprintf>
f0111009:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f011100c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f0111013:	83 ec 0c             	sub    $0xc,%esp
f0111016:	68 e8 5f 13 f0       	push   $0xf0135fe8
f011101b:	e8 11 fe fe ff       	call   f0100e31 <cprintf>
f0111020:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111023:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f011102a:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111031:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0111036:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f011103c:	d1 ea                	shr    %edx
f011103e:	01 d0                	add    %edx,%eax
f0111040:	83 e8 10             	sub    $0x10,%eax
f0111043:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111046:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111049:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011104c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111053:	83 ec 08             	sub    $0x8,%esp
f0111056:	52                   	push   %edx
f0111057:	50                   	push   %eax
f0111058:	e8 1f e6 01 00       	call   f012f67c <realloc_block_FF>
f011105d:	83 c4 10             	add    $0x10,%esp
f0111060:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111063:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111067:	74 0f                	je     f0111078 <test_realloc_block_FF+0x582>
f0111069:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011106c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111073:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111076:	74 25                	je     f011109d <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011107f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111082:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111089:	83 ec 04             	sub    $0x4,%esp
f011108c:	ff 75 bc             	pushl  -0x44(%ebp)
f011108f:	50                   	push   %eax
f0111090:	68 20 60 13 f0       	push   $0xf0136020
f0111095:	e8 97 fd fe ff       	call   f0100e31 <cprintf>
f011109a:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011109d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110a0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01110a7:	83 ec 0c             	sub    $0xc,%esp
f01110aa:	50                   	push   %eax
f01110ab:	e8 b6 e3 01 00       	call   f012f466 <get_block_size>
f01110b0:	83 c4 10             	add    $0x10,%esp
f01110b3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01110b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01110b9:	8d 50 10             	lea    0x10(%eax),%edx
f01110bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01110bf:	39 c2                	cmp    %eax,%edx
f01110c1:	74 21                	je     f01110e4 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f01110c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01110ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01110cd:	83 c0 10             	add    $0x10,%eax
f01110d0:	83 ec 04             	sub    $0x4,%esp
f01110d3:	ff 75 a4             	pushl  -0x5c(%ebp)
f01110d6:	50                   	push   %eax
f01110d7:	68 80 60 13 f0       	push   $0xf0136080
f01110dc:	e8 50 fd fe ff       	call   f0100e31 <cprintf>
f01110e1:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01110e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110e7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01110ee:	83 ec 0c             	sub    $0xc,%esp
f01110f1:	50                   	push   %eax
f01110f2:	e8 85 e3 01 00       	call   f012f47c <is_free_block>
f01110f7:	83 c4 10             	add    $0x10,%esp
f01110fa:	0f be c0             	movsbl %al,%eax
f01110fd:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111100:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111104:	74 17                	je     f011111d <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f0111106:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011110d:	83 ec 0c             	sub    $0xc,%esp
f0111110:	68 ec 60 13 f0       	push   $0xf01360ec
f0111115:	e8 17 fd fe ff       	call   f0100e31 <cprintf>
f011111a:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011111d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111120:	40                   	inc    %eax
f0111121:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111128:	83 ec 0c             	sub    $0xc,%esp
f011112b:	50                   	push   %eax
f011112c:	e8 35 e3 01 00       	call   f012f466 <get_block_size>
f0111131:	83 c4 10             	add    $0x10,%esp
f0111134:	85 c0                	test   %eax,%eax
f0111136:	75 1b                	jne    f0111153 <test_realloc_block_FF+0x65d>
f0111138:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011113b:	40                   	inc    %eax
f011113c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111143:	83 ec 0c             	sub    $0xc,%esp
f0111146:	50                   	push   %eax
f0111147:	e8 30 e3 01 00       	call   f012f47c <is_free_block>
f011114c:	83 c4 10             	add    $0x10,%esp
f011114f:	84 c0                	test   %al,%al
f0111151:	74 17                	je     f011116a <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f0111153:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011115a:	83 ec 0c             	sub    $0xc,%esp
f011115d:	68 4c 61 13 f0       	push   $0xf013614c
f0111162:	e8 ca fc fe ff       	call   f0100e31 <cprintf>
f0111167:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f011116a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011116d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111174:	66 8b 00             	mov    (%eax),%ax
f0111177:	98                   	cwtl   
f0111178:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011117b:	75 26                	jne    f01111a3 <test_realloc_block_FF+0x6ad>
f011117d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111180:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0111187:	66 8b 00             	mov    (%eax),%ax
f011118a:	98                   	cwtl   
f011118b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011118e:	75 13                	jne    f01111a3 <test_realloc_block_FF+0x6ad>
f0111190:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111193:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f011119a:	66 8b 00             	mov    (%eax),%ax
f011119d:	98                   	cwtl   
f011119e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01111a1:	74 1a                	je     f01111bd <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f01111a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01111aa:	83 ec 08             	sub    $0x8,%esp
f01111ad:	ff 75 ac             	pushl  -0x54(%ebp)
f01111b0:	68 c0 61 13 f0       	push   $0xf01361c0
f01111b5:	e8 77 fc fe ff       	call   f0100e31 <cprintf>
f01111ba:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01111bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111c1:	74 04                	je     f01111c7 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f01111c3:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f01111c7:	83 ec 0c             	sub    $0xc,%esp
f01111ca:	68 20 62 13 f0       	push   $0xf0136220
f01111cf:	e8 5d fc fe ff       	call   f0100e31 <cprintf>
f01111d4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01111de:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01111e5:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f01111ea:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f01111f0:	d1 ea                	shr    %edx
f01111f2:	01 d0                	add    %edx,%eax
f01111f4:	83 e8 10             	sub    $0x10,%eax
f01111f7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01111fa:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01111fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111200:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111207:	83 ec 08             	sub    $0x8,%esp
f011120a:	52                   	push   %edx
f011120b:	50                   	push   %eax
f011120c:	e8 6b e4 01 00       	call   f012f67c <realloc_block_FF>
f0111211:	83 c4 10             	add    $0x10,%esp
f0111214:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111217:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011121b:	74 0f                	je     f011122c <test_realloc_block_FF+0x736>
f011121d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111220:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111227:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011122a:	74 25                	je     f0111251 <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f011122c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111233:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111236:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011123d:	83 ec 04             	sub    $0x4,%esp
f0111240:	ff 75 bc             	pushl  -0x44(%ebp)
f0111243:	50                   	push   %eax
f0111244:	68 5c 62 13 f0       	push   $0xf013625c
f0111249:	e8 e3 fb fe ff       	call   f0100e31 <cprintf>
f011124e:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111251:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111254:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011125b:	83 ec 0c             	sub    $0xc,%esp
f011125e:	50                   	push   %eax
f011125f:	e8 02 e2 01 00       	call   f012f466 <get_block_size>
f0111264:	83 c4 10             	add    $0x10,%esp
f0111267:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f011126a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011126d:	8d 50 10             	lea    0x10(%eax),%edx
f0111270:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111273:	39 c2                	cmp    %eax,%edx
f0111275:	74 21                	je     f0111298 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111277:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011127e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111281:	83 c0 10             	add    $0x10,%eax
f0111284:	83 ec 04             	sub    $0x4,%esp
f0111287:	ff 75 a4             	pushl  -0x5c(%ebp)
f011128a:	50                   	push   %eax
f011128b:	68 bc 62 13 f0       	push   $0xf01362bc
f0111290:	e8 9c fb fe ff       	call   f0100e31 <cprintf>
f0111295:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111298:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011129b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01112a2:	83 ec 0c             	sub    $0xc,%esp
f01112a5:	50                   	push   %eax
f01112a6:	e8 d1 e1 01 00       	call   f012f47c <is_free_block>
f01112ab:	83 c4 10             	add    $0x10,%esp
f01112ae:	0f be c0             	movsbl %al,%eax
f01112b1:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01112b4:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01112b8:	74 17                	je     f01112d1 <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f01112ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01112c1:	83 ec 0c             	sub    $0xc,%esp
f01112c4:	68 2c 63 13 f0       	push   $0xf013632c
f01112c9:	e8 63 fb fe ff       	call   f0100e31 <cprintf>
f01112ce:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01112d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01112d4:	40                   	inc    %eax
f01112d5:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01112dc:	83 ec 0c             	sub    $0xc,%esp
f01112df:	50                   	push   %eax
f01112e0:	e8 81 e1 01 00       	call   f012f466 <get_block_size>
f01112e5:	83 c4 10             	add    $0x10,%esp
f01112e8:	85 c0                	test   %eax,%eax
f01112ea:	75 1b                	jne    f0111307 <test_realloc_block_FF+0x811>
f01112ec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01112ef:	40                   	inc    %eax
f01112f0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01112f7:	83 ec 0c             	sub    $0xc,%esp
f01112fa:	50                   	push   %eax
f01112fb:	e8 7c e1 01 00       	call   f012f47c <is_free_block>
f0111300:	83 c4 10             	add    $0x10,%esp
f0111303:	84 c0                	test   %al,%al
f0111305:	74 17                	je     f011131e <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f0111307:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011130e:	83 ec 0c             	sub    $0xc,%esp
f0111311:	68 8c 63 13 f0       	push   $0xf013638c
f0111316:	e8 16 fb fe ff       	call   f0100e31 <cprintf>
f011131b:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f011131e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111321:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111328:	66 8b 00             	mov    (%eax),%ax
f011132b:	98                   	cwtl   
f011132c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011132f:	75 26                	jne    f0111357 <test_realloc_block_FF+0x861>
f0111331:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111334:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f011133b:	66 8b 00             	mov    (%eax),%ax
f011133e:	98                   	cwtl   
f011133f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111342:	75 13                	jne    f0111357 <test_realloc_block_FF+0x861>
f0111344:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111347:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f011134e:	66 8b 00             	mov    (%eax),%ax
f0111351:	98                   	cwtl   
f0111352:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111355:	74 1a                	je     f0111371 <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111357:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f011135e:	83 ec 08             	sub    $0x8,%esp
f0111361:	ff 75 ac             	pushl  -0x54(%ebp)
f0111364:	68 00 64 13 f0       	push   $0xf0136400
f0111369:	e8 c3 fa fe ff       	call   f0100e31 <cprintf>
f011136e:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111371:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111375:	74 04                	je     f011137b <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111377:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f011137b:	83 ec 0c             	sub    $0xc,%esp
f011137e:	68 60 64 13 f0       	push   $0xf0136460
f0111383:	e8 a9 fa fe ff       	call   f0100e31 <cprintf>
f0111388:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f011138b:	83 ec 0c             	sub    $0xc,%esp
f011138e:	68 98 64 13 f0       	push   $0xf0136498
f0111393:	e8 99 fa fe ff       	call   f0100e31 <cprintf>
f0111398:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011139b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f01113a2:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f01113a9:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01113ae:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f01113b1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01113b4:	2d 10 04 00 00       	sub    $0x410,%eax
f01113b9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01113bc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01113bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113c2:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01113c9:	83 ec 08             	sub    $0x8,%esp
f01113cc:	52                   	push   %edx
f01113cd:	50                   	push   %eax
f01113ce:	e8 a9 e2 01 00       	call   f012f67c <realloc_block_FF>
f01113d3:	83 c4 10             	add    $0x10,%esp
f01113d6:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01113d9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01113dd:	74 0f                	je     f01113ee <test_realloc_block_FF+0x8f8>
f01113df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113e2:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01113e9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01113ec:	74 25                	je     f0111413 <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f01113ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01113f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01113f8:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01113ff:	83 ec 04             	sub    $0x4,%esp
f0111402:	ff 75 bc             	pushl  -0x44(%ebp)
f0111405:	50                   	push   %eax
f0111406:	68 c4 64 13 f0       	push   $0xf01364c4
f011140b:	e8 21 fa fe ff       	call   f0100e31 <cprintf>
f0111410:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111413:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111416:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011141d:	83 ec 0c             	sub    $0xc,%esp
f0111420:	50                   	push   %eax
f0111421:	e8 40 e0 01 00       	call   f012f466 <get_block_size>
f0111426:	83 c4 10             	add    $0x10,%esp
f0111429:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f011142c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011142f:	8d 50 10             	lea    0x10(%eax),%edx
f0111432:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111435:	39 c2                	cmp    %eax,%edx
f0111437:	74 21                	je     f011145a <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0111439:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111440:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111443:	83 c0 10             	add    $0x10,%eax
f0111446:	83 ec 04             	sub    $0x4,%esp
f0111449:	ff 75 a4             	pushl  -0x5c(%ebp)
f011144c:	50                   	push   %eax
f011144d:	68 24 65 13 f0       	push   $0xf0136524
f0111452:	e8 da f9 fe ff       	call   f0100e31 <cprintf>
f0111457:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f011145a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011145d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111464:	83 ec 0c             	sub    $0xc,%esp
f0111467:	50                   	push   %eax
f0111468:	e8 0f e0 01 00       	call   f012f47c <is_free_block>
f011146d:	83 c4 10             	add    $0x10,%esp
f0111470:	0f be c0             	movsbl %al,%eax
f0111473:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111476:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f011147a:	74 17                	je     f0111493 <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f011147c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111483:	83 ec 0c             	sub    $0xc,%esp
f0111486:	68 94 65 13 f0       	push   $0xf0136594
f011148b:	e8 a1 f9 fe ff       	call   f0100e31 <cprintf>
f0111490:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111493:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111496:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111499:	01 d0                	add    %edx,%eax
f011149b:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f011149e:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f01114a5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01114a8:	8b 10                	mov    (%eax),%edx
f01114aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114ad:	39 c2                	cmp    %eax,%edx
f01114af:	75 0a                	jne    f01114bb <test_realloc_block_FF+0x9c5>
f01114b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01114b4:	8a 40 04             	mov    0x4(%eax),%al
f01114b7:	3c 01                	cmp    $0x1,%al
f01114b9:	74 20                	je     f01114db <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f01114bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f01114c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01114c5:	8b 00                	mov    (%eax),%eax
f01114c7:	83 ec 04             	sub    $0x4,%esp
f01114ca:	50                   	push   %eax
f01114cb:	ff 75 94             	pushl  -0x6c(%ebp)
f01114ce:	68 f4 65 13 f0       	push   $0xf01365f4
f01114d3:	e8 59 f9 fe ff       	call   f0100e31 <cprintf>
f01114d8:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f01114db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114de:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01114e5:	66 8b 00             	mov    (%eax),%ax
f01114e8:	98                   	cwtl   
f01114e9:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01114ec:	75 13                	jne    f0111501 <test_realloc_block_FF+0xa0b>
f01114ee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114f1:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f01114f8:	66 8b 00             	mov    (%eax),%ax
f01114fb:	98                   	cwtl   
f01114fc:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01114ff:	74 1a                	je     f011151b <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f0111501:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111508:	83 ec 08             	sub    $0x8,%esp
f011150b:	ff 75 ac             	pushl  -0x54(%ebp)
f011150e:	68 6c 66 13 f0       	push   $0xf013666c
f0111513:	e8 19 f9 fe ff       	call   f0100e31 <cprintf>
f0111518:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011151b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011151f:	74 04                	je     f0111525 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f0111521:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111525:	83 ec 08             	sub    $0x8,%esp
f0111528:	ff 75 f4             	pushl  -0xc(%ebp)
f011152b:	68 cc 66 13 f0       	push   $0xf01366cc
f0111530:	e8 fc f8 fe ff       	call   f0100e31 <cprintf>
f0111535:	83 c4 10             	add    $0x10,%esp

}
f0111538:	90                   	nop
f0111539:	c9                   	leave  
f011153a:	c3                   	ret    

f011153b <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f011153b:	55                   	push   %ebp
f011153c:	89 e5                	mov    %esp,%ebp
f011153e:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f0111541:	83 ec 04             	sub    $0x4,%esp
f0111544:	68 0b 67 13 f0       	push   $0xf013670b
f0111549:	68 ae 05 00 00       	push   $0x5ae
f011154e:	68 e4 36 13 f0       	push   $0xf01336e4
f0111553:	e8 58 ec fe ff       	call   f01001b0 <_panic>

f0111558 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111558:	55                   	push   %ebp
f0111559:	89 e5                	mov    %esp,%ebp
f011155b:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f011155e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0111563:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111566:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f011156d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111574:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111578:	0f 84 a5 00 00 00    	je     f0111623 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f011157e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111585:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111588:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f011158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111591:	eb 4a                	jmp    f01115dd <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111593:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111596:	8b 00                	mov    (%eax),%eax
f0111598:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011159b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011159e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01115a3:	89 c2                	mov    %eax,%edx
f01115a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01115a8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01115af:	8b 45 08             	mov    0x8(%ebp),%eax
f01115b2:	01 c8                	add    %ecx,%eax
f01115b4:	8b 00                	mov    (%eax),%eax
f01115b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01115b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01115bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01115c1:	39 c2                	cmp    %eax,%edx
f01115c3:	74 09                	je     f01115ce <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f01115c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f01115cc:	eb 3e                	jmp    f011160c <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f01115ce:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01115d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01115d4:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01115da:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01115dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01115e1:	74 08                	je     f01115eb <sys_check_LRU_lists+0x93>
f01115e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115e6:	8b 40 10             	mov    0x10(%eax),%eax
f01115e9:	eb 05                	jmp    f01115f0 <sys_check_LRU_lists+0x98>
f01115eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01115f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01115f3:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01115f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01115fc:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111602:	85 c0                	test   %eax,%eax
f0111604:	75 8d                	jne    f0111593 <sys_check_LRU_lists+0x3b>
f0111606:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011160a:	75 87                	jne    f0111593 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f011160c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011160f:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111615:	8b 45 10             	mov    0x10(%ebp),%eax
f0111618:	39 c2                	cmp    %eax,%edx
f011161a:	74 07                	je     f0111623 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f011161c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0111623:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111627:	0f 84 a5 00 00 00    	je     f01116d2 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f011162d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111634:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111637:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f011163d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111640:	eb 4a                	jmp    f011168c <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0111642:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111645:	8b 00                	mov    (%eax),%eax
f0111647:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011164a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011164d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111652:	89 c2                	mov    %eax,%edx
f0111654:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111657:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011165e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111661:	01 c8                	add    %ecx,%eax
f0111663:	8b 00                	mov    (%eax),%eax
f0111665:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111668:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011166b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111670:	39 c2                	cmp    %eax,%edx
f0111672:	74 09                	je     f011167d <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111674:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f011167b:	eb 3e                	jmp    f01116bb <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f011167d:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111680:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111683:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111689:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011168c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111690:	74 08                	je     f011169a <sys_check_LRU_lists+0x142>
f0111692:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111695:	8b 40 10             	mov    0x10(%eax),%eax
f0111698:	eb 05                	jmp    f011169f <sys_check_LRU_lists+0x147>
f011169a:	b8 00 00 00 00       	mov    $0x0,%eax
f011169f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01116a2:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01116a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01116ab:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01116b1:	85 c0                	test   %eax,%eax
f01116b3:	75 8d                	jne    f0111642 <sys_check_LRU_lists+0xea>
f01116b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01116b9:	75 87                	jne    f0111642 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f01116bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01116be:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f01116c4:	8b 45 14             	mov    0x14(%ebp),%eax
f01116c7:	39 c2                	cmp    %eax,%edx
f01116c9:	74 07                	je     f01116d2 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f01116cb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f01116d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116d5:	23 45 f8             	and    -0x8(%ebp),%eax
}
f01116d8:	c9                   	leave  
f01116d9:	c3                   	ret    

f01116da <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f01116da:	55                   	push   %ebp
f01116db:	89 e5                	mov    %esp,%ebp
f01116dd:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f01116e0:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01116e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f01116e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01116ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01116f2:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01116f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01116fb:	eb 65                	jmp    f0111762 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f01116fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111704:	eb 3a                	jmp    f0111740 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111706:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111709:	8b 00                	mov    (%eax),%eax
f011170b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011170e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111711:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111716:	89 c2                	mov    %eax,%edx
f0111718:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011171b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111722:	8b 45 08             	mov    0x8(%ebp),%eax
f0111725:	01 c8                	add    %ecx,%eax
f0111727:	8b 00                	mov    (%eax),%eax
f0111729:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011172c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011172f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111734:	39 c2                	cmp    %eax,%edx
f0111736:	75 05                	jne    f011173d <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111738:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f011173b:	eb 0b                	jmp    f0111748 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f011173d:	ff 45 f4             	incl   -0xc(%ebp)
f0111740:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111743:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111746:	7c be                	jl     f0111706 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111748:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011174c:	7e 08                	jle    f0111756 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f011174e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111751:	e9 ed 00 00 00       	jmp    f0111843 <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111756:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111759:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f011175f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111762:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111766:	74 08                	je     f0111770 <sys_check_LRU_lists_free+0x96>
f0111768:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011176b:	8b 40 10             	mov    0x10(%eax),%eax
f011176e:	eb 05                	jmp    f0111775 <sys_check_LRU_lists_free+0x9b>
f0111770:	b8 00 00 00 00       	mov    $0x0,%eax
f0111775:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111778:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f011177e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111781:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111787:	85 c0                	test   %eax,%eax
f0111789:	0f 85 6e ff ff ff    	jne    f01116fd <sys_check_LRU_lists_free+0x23>
f011178f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111793:	0f 85 64 ff ff ff    	jne    f01116fd <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111799:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011179c:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01117a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01117a5:	eb 62                	jmp    f0111809 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f01117a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01117ae:	eb 3a                	jmp    f01117ea <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f01117b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01117b3:	8b 00                	mov    (%eax),%eax
f01117b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01117b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01117bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01117c0:	89 c2                	mov    %eax,%edx
f01117c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01117c5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01117cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01117cf:	01 c8                	add    %ecx,%eax
f01117d1:	8b 00                	mov    (%eax),%eax
f01117d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01117d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01117de:	39 c2                	cmp    %eax,%edx
f01117e0:	75 05                	jne    f01117e7 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f01117e2:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f01117e5:	eb 0b                	jmp    f01117f2 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f01117e7:	ff 45 f0             	incl   -0x10(%ebp)
f01117ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01117ed:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01117f0:	7c be                	jl     f01117b0 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f01117f2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01117f6:	7e 05                	jle    f01117fd <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f01117f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01117fb:	eb 46                	jmp    f0111843 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01117fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111800:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111806:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111809:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f011180d:	74 08                	je     f0111817 <sys_check_LRU_lists_free+0x13d>
f011180f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111812:	8b 40 10             	mov    0x10(%eax),%eax
f0111815:	eb 05                	jmp    f011181c <sys_check_LRU_lists_free+0x142>
f0111817:	b8 00 00 00 00       	mov    $0x0,%eax
f011181c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011181f:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111825:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111828:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f011182e:	85 c0                	test   %eax,%eax
f0111830:	0f 85 71 ff ff ff    	jne    f01117a7 <sys_check_LRU_lists_free+0xcd>
f0111836:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f011183a:	0f 85 67 ff ff ff    	jne    f01117a7 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111840:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111843:	c9                   	leave  
f0111844:	c3                   	ret    

f0111845 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111845:	55                   	push   %ebp
f0111846:	89 e5                	mov    %esp,%ebp
f0111848:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f011184b:	83 ec 04             	sub    $0x4,%esp
f011184e:	68 20 67 13 f0       	push   $0xf0136720
f0111853:	68 9c 00 00 00       	push   $0x9c
f0111858:	68 6b 67 13 f0       	push   $0xf013676b
f011185d:	e8 4e e9 fe ff       	call   f01001b0 <_panic>

f0111862 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111862:	55                   	push   %ebp
f0111863:	89 e5                	mov    %esp,%ebp
f0111865:	57                   	push   %edi
f0111866:	56                   	push   %esi
f0111867:	53                   	push   %ebx
f0111868:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f011186e:	83 ec 0c             	sub    $0xc,%esp
f0111871:	68 8c 67 13 f0       	push   $0xf013678c
f0111876:	e8 b6 f5 fe ff       	call   f0100e31 <cprintf>
f011187b:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f011187e:	83 ec 0c             	sub    $0xc,%esp
f0111881:	68 b0 67 13 f0       	push   $0xf01367b0
f0111886:	e8 a6 f5 fe ff       	call   f0100e31 <cprintf>
f011188b:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f011188e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111895:	83 ec 0c             	sub    $0xc,%esp
f0111898:	68 cc 67 13 f0       	push   $0xf01367cc
f011189d:	e8 8f f5 fe ff       	call   f0100e31 <cprintf>
f01118a2:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01118a5:	8d 45 80             	lea    -0x80(%ebp),%eax
f01118a8:	bb 86 68 13 f0       	mov    $0xf0136886,%ebx
f01118ad:	ba 03 00 00 00       	mov    $0x3,%edx
f01118b2:	89 c7                	mov    %eax,%edi
f01118b4:	89 de                	mov    %ebx,%esi
f01118b6:	89 d1                	mov    %edx,%ecx
f01118b8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01118ba:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01118bd:	b9 16 00 00 00       	mov    $0x16,%ecx
f01118c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01118c7:	89 d7                	mov    %edx,%edi
f01118c9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f01118cb:	83 ec 0c             	sub    $0xc,%esp
f01118ce:	8d 45 80             	lea    -0x80(%ebp),%eax
f01118d1:	50                   	push   %eax
f01118d2:	e8 ec 02 ff ff       	call   f0101bc3 <execute_command>
f01118d7:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01118da:	83 ec 0c             	sub    $0xc,%esp
f01118dd:	68 fa 67 13 f0       	push   $0xf01367fa
f01118e2:	e8 4a f5 fe ff       	call   f0100e31 <cprintf>
f01118e7:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01118ea:	83 ec 0c             	sub    $0xc,%esp
f01118ed:	68 10 68 13 f0       	push   $0xf0136810
f01118f2:	e8 3a f5 fe ff       	call   f0100e31 <cprintf>
f01118f7:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01118fa:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111901:	65 00 00 
f0111904:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011190a:	b9 18 00 00 00       	mov    $0x18,%ecx
f011190f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111914:	89 d7                	mov    %edx,%edi
f0111916:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111918:	83 ec 0c             	sub    $0xc,%esp
f011191b:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111921:	50                   	push   %eax
f0111922:	e8 9c 02 ff ff       	call   f0101bc3 <execute_command>
f0111927:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011192a:	83 ec 0c             	sub    $0xc,%esp
f011192d:	68 fa 67 13 f0       	push   $0xf01367fa
f0111932:	e8 fa f4 fe ff       	call   f0100e31 <cprintf>
f0111937:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011193a:	83 ec 0c             	sub    $0xc,%esp
f011193d:	68 38 68 13 f0       	push   $0xf0136838
f0111942:	e8 ea f4 fe ff       	call   f0100e31 <cprintf>
f0111947:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f011194a:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111951:	75 00 00 
f0111954:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011195a:	b9 18 00 00 00       	mov    $0x18,%ecx
f011195f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111964:	89 d7                	mov    %edx,%edi
f0111966:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111968:	83 ec 0c             	sub    $0xc,%esp
f011196b:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111971:	50                   	push   %eax
f0111972:	e8 4c 02 ff ff       	call   f0101bc3 <execute_command>
f0111977:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011197a:	83 ec 0c             	sub    $0xc,%esp
f011197d:	68 fa 67 13 f0       	push   $0xf01367fa
f0111982:	e8 aa f4 fe ff       	call   f0100e31 <cprintf>
f0111987:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011198a:	83 ec 0c             	sub    $0xc,%esp
f011198d:	68 60 68 13 f0       	push   $0xf0136860
f0111992:	e8 9a f4 fe ff       	call   f0100e31 <cprintf>
f0111997:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011199a:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01119a1:	6d 6d 00 
f01119a4:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01119aa:	b9 18 00 00 00       	mov    $0x18,%ecx
f01119af:	b8 00 00 00 00       	mov    $0x0,%eax
f01119b4:	89 d7                	mov    %edx,%edi
f01119b6:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01119b8:	83 ec 0c             	sub    $0xc,%esp
f01119bb:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01119c1:	50                   	push   %eax
f01119c2:	e8 fc 01 ff ff       	call   f0101bc3 <execute_command>
f01119c7:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01119ca:	83 ec 0c             	sub    $0xc,%esp
f01119cd:	68 fa 67 13 f0       	push   $0xf01367fa
f01119d2:	e8 5a f4 fe ff       	call   f0100e31 <cprintf>
f01119d7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01119da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01119df:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01119e2:	5b                   	pop    %ebx
f01119e3:	5e                   	pop    %esi
f01119e4:	5f                   	pop    %edi
f01119e5:	5d                   	pop    %ebp
f01119e6:	c3                   	ret    

f01119e7 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f01119e7:	55                   	push   %ebp
f01119e8:	89 e5                	mov    %esp,%ebp
f01119ea:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01119ed:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01119f4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01119fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a02:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a07:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a0a:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a10:	50                   	push   %eax
f0111a11:	e8 3d 62 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111a16:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a19:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a1e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a21:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a24:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a27:	50                   	push   %eax
f0111a28:	e8 b8 4d 00 00       	call   f01167e5 <CP>
f0111a2d:	83 c4 10             	add    $0x10,%esp
f0111a30:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a33:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a37:	74 14                	je     f0111a4d <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111a39:	83 ec 04             	sub    $0x4,%esp
f0111a3c:	68 ec 68 13 f0       	push   $0xf01368ec
f0111a41:	6a 5a                	push   $0x5a
f0111a43:	68 0e 69 13 f0       	push   $0xf013690e
f0111a48:	e8 63 e7 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111a4d:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111a54:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111a5b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a62:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a67:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6a:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a70:	50                   	push   %eax
f0111a71:	e8 dd 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111a76:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a79:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a7e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a81:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a84:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a87:	50                   	push   %eax
f0111a88:	e8 58 4d 00 00       	call   f01167e5 <CP>
f0111a8d:	83 c4 10             	add    $0x10,%esp
f0111a90:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a93:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a97:	74 14                	je     f0111aad <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111a99:	83 ec 04             	sub    $0x4,%esp
f0111a9c:	68 2c 69 13 f0       	push   $0xf013692c
f0111aa1:	6a 66                	push   $0x66
f0111aa3:	68 0e 69 13 f0       	push   $0xf013690e
f0111aa8:	e8 03 e7 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111aad:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111ab4:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111abb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ac2:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ac7:	ff 75 ec             	pushl  -0x14(%ebp)
f0111aca:	ff 75 f0             	pushl  -0x10(%ebp)
f0111acd:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad0:	50                   	push   %eax
f0111ad1:	e8 7d 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111ad6:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ad9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ade:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ae1:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ae4:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ae7:	50                   	push   %eax
f0111ae8:	e8 f8 4c 00 00       	call   f01167e5 <CP>
f0111aed:	83 c4 10             	add    $0x10,%esp
f0111af0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111af3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111af7:	74 14                	je     f0111b0d <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111af9:	83 ec 04             	sub    $0x4,%esp
f0111afc:	68 50 69 13 f0       	push   $0xf0136950
f0111b01:	6a 71                	push   $0x71
f0111b03:	68 0e 69 13 f0       	push   $0xf013690e
f0111b08:	e8 a3 e6 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111b0d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111b1b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b22:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b27:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b2a:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b2d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b30:	50                   	push   %eax
f0111b31:	e8 1d 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111b36:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b39:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b3e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b41:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b44:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b47:	50                   	push   %eax
f0111b48:	e8 98 4c 00 00       	call   f01167e5 <CP>
f0111b4d:	83 c4 10             	add    $0x10,%esp
f0111b50:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b53:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b57:	74 14                	je     f0111b6d <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111b59:	83 ec 04             	sub    $0x4,%esp
f0111b5c:	68 74 69 13 f0       	push   $0xf0136974
f0111b61:	6a 7d                	push   $0x7d
f0111b63:	68 0e 69 13 f0       	push   $0xf013690e
f0111b68:	e8 43 e6 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111b6d:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111b7b:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b82:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b87:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b8a:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b90:	50                   	push   %eax
f0111b91:	e8 bd 60 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111b96:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b99:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b9e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ba1:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ba4:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ba7:	50                   	push   %eax
f0111ba8:	e8 38 4c 00 00       	call   f01167e5 <CP>
f0111bad:	83 c4 10             	add    $0x10,%esp
f0111bb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111bb3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111bb7:	74 17                	je     f0111bd0 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111bb9:	83 ec 04             	sub    $0x4,%esp
f0111bbc:	68 98 69 13 f0       	push   $0xf0136998
f0111bc1:	68 89 00 00 00       	push   $0x89
f0111bc6:	68 0e 69 13 f0       	push   $0xf013690e
f0111bcb:	e8 e0 e5 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111bd0:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111bd7:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111bde:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111be5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111bea:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bed:	ff 75 f0             	pushl  -0x10(%ebp)
f0111bf0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bf3:	50                   	push   %eax
f0111bf4:	e8 5a 60 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111bf9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111bfc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111c01:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c04:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c07:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c0a:	50                   	push   %eax
f0111c0b:	e8 d5 4b 00 00       	call   f01167e5 <CP>
f0111c10:	83 c4 10             	add    $0x10,%esp
f0111c13:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111c16:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111c1a:	74 17                	je     f0111c33 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111c1c:	83 ec 04             	sub    $0x4,%esp
f0111c1f:	68 bc 69 13 f0       	push   $0xf01369bc
f0111c24:	68 95 00 00 00       	push   $0x95
f0111c29:	68 0e 69 13 f0       	push   $0xf013690e
f0111c2e:	e8 7d e5 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111c33:	83 ec 0c             	sub    $0xc,%esp
f0111c36:	68 e8 69 13 f0       	push   $0xf01369e8
f0111c3b:	e8 f1 f1 fe ff       	call   f0100e31 <cprintf>
f0111c40:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111c43:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111c48:	c9                   	leave  
f0111c49:	c3                   	ret    

f0111c4a <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111c4a:	55                   	push   %ebp
f0111c4b:	89 e5                	mov    %esp,%ebp
f0111c4d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111c57:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111c5e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c65:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111c6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c70:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c73:	50                   	push   %eax
f0111c74:	e8 da 5f ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111c79:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111c7c:	83 ec 04             	sub    $0x4,%esp
f0111c7f:	68 38 6a 13 f0       	push   $0xf0136a38
f0111c84:	68 a2 00 00 00       	push   $0xa2
f0111c89:	68 0e 69 13 f0       	push   $0xf013690e
f0111c8e:	e8 1d e5 fe ff       	call   f01001b0 <_panic>

f0111c93 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111c93:	55                   	push   %ebp
f0111c94:	89 e5                	mov    %esp,%ebp
f0111c96:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111c99:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111ca0:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ca5:	83 ec 08             	sub    $0x8,%esp
f0111ca8:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cab:	50                   	push   %eax
f0111cac:	e8 66 60 ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111cb1:	83 c4 10             	add    $0x10,%esp
f0111cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111cb7:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111cbb:	74 17                	je     f0111cd4 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111cbd:	83 ec 04             	sub    $0x4,%esp
f0111cc0:	68 d4 6a 13 f0       	push   $0xf0136ad4
f0111cc5:	68 b0 00 00 00       	push   $0xb0
f0111cca:	68 0e 69 13 f0       	push   $0xf013690e
f0111ccf:	e8 dc e4 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111cd4:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cdb:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ce0:	83 ec 08             	sub    $0x8,%esp
f0111ce3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ce6:	50                   	push   %eax
f0111ce7:	e8 2b 60 ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111cec:	83 c4 10             	add    $0x10,%esp
f0111cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111cf2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111cf6:	74 17                	je     f0111d0f <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111cf8:	83 ec 04             	sub    $0x4,%esp
f0111cfb:	68 f8 6a 13 f0       	push   $0xf0136af8
f0111d00:	68 b8 00 00 00       	push   $0xb8
f0111d05:	68 0e 69 13 f0       	push   $0xf013690e
f0111d0a:	e8 a1 e4 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111d0f:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d16:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111d1b:	83 ec 08             	sub    $0x8,%esp
f0111d1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d21:	50                   	push   %eax
f0111d22:	e8 f0 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111d27:	83 c4 10             	add    $0x10,%esp
f0111d2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d2d:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d31:	74 17                	je     f0111d4a <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111d33:	83 ec 04             	sub    $0x4,%esp
f0111d36:	68 1c 6b 13 f0       	push   $0xf0136b1c
f0111d3b:	68 c0 00 00 00       	push   $0xc0
f0111d40:	68 0e 69 13 f0       	push   $0xf013690e
f0111d45:	e8 66 e4 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0111d4a:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d51:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111d56:	83 ec 08             	sub    $0x8,%esp
f0111d59:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d5c:	50                   	push   %eax
f0111d5d:	e8 b5 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111d62:	83 c4 10             	add    $0x10,%esp
f0111d65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d68:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d6c:	74 17                	je     f0111d85 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111d6e:	83 ec 04             	sub    $0x4,%esp
f0111d71:	68 40 6b 13 f0       	push   $0xf0136b40
f0111d76:	68 c7 00 00 00       	push   $0xc7
f0111d7b:	68 0e 69 13 f0       	push   $0xf013690e
f0111d80:	e8 2b e4 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0111d85:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d8c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111d91:	83 ec 08             	sub    $0x8,%esp
f0111d94:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d97:	50                   	push   %eax
f0111d98:	e8 7a 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111d9d:	83 c4 10             	add    $0x10,%esp
f0111da0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111da3:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111da7:	74 17                	je     f0111dc0 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111da9:	83 ec 04             	sub    $0x4,%esp
f0111dac:	68 64 6b 13 f0       	push   $0xf0136b64
f0111db1:	68 ce 00 00 00       	push   $0xce
f0111db6:	68 0e 69 13 f0       	push   $0xf013690e
f0111dbb:	e8 f0 e3 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111dc0:	83 ec 0c             	sub    $0xc,%esp
f0111dc3:	68 88 6b 13 f0       	push   $0xf0136b88
f0111dc8:	e8 64 f0 fe ff       	call   f0100e31 <cprintf>
f0111dcd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111dd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111dd5:	c9                   	leave  
f0111dd6:	c3                   	ret    

f0111dd7 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111dd7:	55                   	push   %ebp
f0111dd8:	89 e5                	mov    %esp,%ebp
f0111dda:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111ddd:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111de4:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111de9:	83 ec 08             	sub    $0x8,%esp
f0111dec:	ff 75 f4             	pushl  -0xc(%ebp)
f0111def:	50                   	push   %eax
f0111df0:	e8 6b 5f ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111df5:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111df8:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111dfd:	83 ec 08             	sub    $0x8,%esp
f0111e00:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e03:	50                   	push   %eax
f0111e04:	e8 38 49 00 00       	call   f0116741 <CE>
f0111e09:	83 c4 10             	add    $0x10,%esp
f0111e0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e0f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e13:	74 17                	je     f0111e2c <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111e15:	83 ec 04             	sub    $0x4,%esp
f0111e18:	68 d0 6b 13 f0       	push   $0xf0136bd0
f0111e1d:	68 de 00 00 00       	push   $0xde
f0111e22:	68 0e 69 13 f0       	push   $0xf013690e
f0111e27:	e8 84 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0111e2c:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e33:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e38:	83 ec 08             	sub    $0x8,%esp
f0111e3b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e3e:	50                   	push   %eax
f0111e3f:	e8 1c 5f ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111e44:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e47:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e4c:	83 ec 08             	sub    $0x8,%esp
f0111e4f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e52:	50                   	push   %eax
f0111e53:	e8 e9 48 00 00       	call   f0116741 <CE>
f0111e58:	83 c4 10             	add    $0x10,%esp
f0111e5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e5e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e62:	74 17                	je     f0111e7b <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111e64:	83 ec 04             	sub    $0x4,%esp
f0111e67:	68 fc 6b 13 f0       	push   $0xf0136bfc
f0111e6c:	68 e6 00 00 00       	push   $0xe6
f0111e71:	68 0e 69 13 f0       	push   $0xf013690e
f0111e76:	e8 35 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111e7b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e82:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e87:	83 ec 08             	sub    $0x8,%esp
f0111e8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e8d:	50                   	push   %eax
f0111e8e:	e8 cd 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111e93:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e96:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e9b:	83 ec 08             	sub    $0x8,%esp
f0111e9e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ea1:	50                   	push   %eax
f0111ea2:	e8 9a 48 00 00       	call   f0116741 <CE>
f0111ea7:	83 c4 10             	add    $0x10,%esp
f0111eaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111ead:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111eb1:	74 17                	je     f0111eca <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111eb3:	83 ec 04             	sub    $0x4,%esp
f0111eb6:	68 28 6c 13 f0       	push   $0xf0136c28
f0111ebb:	68 ee 00 00 00       	push   $0xee
f0111ec0:	68 0e 69 13 f0       	push   $0xf013690e
f0111ec5:	e8 e6 e2 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0111eca:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ed1:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ed6:	83 ec 08             	sub    $0x8,%esp
f0111ed9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111edc:	50                   	push   %eax
f0111edd:	e8 7e 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111ee2:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111ee5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111eea:	83 ec 08             	sub    $0x8,%esp
f0111eed:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ef0:	50                   	push   %eax
f0111ef1:	e8 4b 48 00 00       	call   f0116741 <CE>
f0111ef6:	83 c4 10             	add    $0x10,%esp
f0111ef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111efc:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111f00:	74 17                	je     f0111f19 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111f02:	83 ec 04             	sub    $0x4,%esp
f0111f05:	68 54 6c 13 f0       	push   $0xf0136c54
f0111f0a:	68 f6 00 00 00       	push   $0xf6
f0111f0f:	68 0e 69 13 f0       	push   $0xf013690e
f0111f14:	e8 97 e2 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111f19:	83 ec 0c             	sub    $0xc,%esp
f0111f1c:	68 80 6c 13 f0       	push   $0xf0136c80
f0111f21:	e8 0b ef fe ff       	call   f0100e31 <cprintf>
f0111f26:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111f29:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f2e:	c9                   	leave  
f0111f2f:	c3                   	ret    

f0111f30 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111f30:	55                   	push   %ebp
f0111f31:	89 e5                	mov    %esp,%ebp
f0111f33:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111f36:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111f3d:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111f42:	83 ec 08             	sub    $0x8,%esp
f0111f45:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f48:	50                   	push   %eax
f0111f49:	e8 12 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111f4e:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111f51:	83 ec 04             	sub    $0x4,%esp
f0111f54:	68 cc 6c 13 f0       	push   $0xf0136ccc
f0111f59:	68 01 01 00 00       	push   $0x101
f0111f5e:	68 0e 69 13 f0       	push   $0xf013690e
f0111f63:	e8 48 e2 fe ff       	call   f01001b0 <_panic>

f0111f68 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111f68:	55                   	push   %ebp
f0111f69:	89 e5                	mov    %esp,%ebp
f0111f6b:	57                   	push   %edi
f0111f6c:	56                   	push   %esi
f0111f6d:	53                   	push   %ebx
f0111f6e:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111f74:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111f7a:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f0111f7f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f84:	89 c7                	mov    %eax,%edi
f0111f86:	89 de                	mov    %ebx,%esi
f0111f88:	89 d1                	mov    %edx,%ecx
f0111f8a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f8c:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111f92:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111f97:	b0 00                	mov    $0x0,%al
f0111f99:	89 d7                	mov    %edx,%edi
f0111f9b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111f9d:	6a 00                	push   $0x0
f0111f9f:	6a 0a                	push   $0xa
f0111fa1:	6a 14                	push   $0x14
f0111fa3:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111fa9:	50                   	push   %eax
f0111faa:	e8 50 69 ff ff       	call   f01088ff <env_create>
f0111faf:	83 c4 10             	add    $0x10,%esp
f0111fb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111fb5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fb8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0111fbe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111fc1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fc4:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0111fca:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111fcd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111fd0:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111fd3:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111fda:	75 70 20 
f0111fdd:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111fe4:	00 00 00 
f0111fe7:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111fed:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111ff2:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ff7:	89 d7                	mov    %edx,%edi
f0111ff9:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111ffb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111ffe:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112001:	83 ec 08             	sub    $0x8,%esp
f0112004:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011200a:	52                   	push   %edx
f011200b:	50                   	push   %eax
f011200c:	e8 d7 ce 01 00       	call   f012eee8 <ltostr>
f0112011:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112014:	83 ec 04             	sub    $0x4,%esp
f0112017:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011201d:	50                   	push   %eax
f011201e:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0112024:	50                   	push   %eax
f0112025:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011202b:	50                   	push   %eax
f011202c:	e8 af cf 01 00       	call   f012efe0 <strcconcat>
f0112031:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112034:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011203b:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112042:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112049:	83 ec 0c             	sub    $0xc,%esp
f011204c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011204f:	e8 ee 48 00 00       	call   f0116942 <ClearUserSpace>
f0112054:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112057:	83 ec 04             	sub    $0x4,%esp
f011205a:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112060:	50                   	push   %eax
f0112061:	68 62 6d 13 f0       	push   $0xf0136d62
f0112066:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011206c:	50                   	push   %eax
f011206d:	e8 6e cf 01 00       	call   f012efe0 <strcconcat>
f0112072:	83 c4 10             	add    $0x10,%esp
f0112075:	83 ec 0c             	sub    $0xc,%esp
f0112078:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011207e:	50                   	push   %eax
f011207f:	e8 3f fb fe ff       	call   f0101bc3 <execute_command>
f0112084:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112087:	83 ec 04             	sub    $0x4,%esp
f011208a:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112090:	50                   	push   %eax
f0112091:	68 6d 6d 13 f0       	push   $0xf0136d6d
f0112096:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011209c:	50                   	push   %eax
f011209d:	e8 3e cf 01 00       	call   f012efe0 <strcconcat>
f01120a2:	83 c4 10             	add    $0x10,%esp
f01120a5:	83 ec 0c             	sub    $0xc,%esp
f01120a8:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01120ae:	50                   	push   %eax
f01120af:	e8 0f fb fe ff       	call   f0101bc3 <execute_command>
f01120b4:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01120b7:	83 ec 04             	sub    $0x4,%esp
f01120ba:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01120c0:	50                   	push   %eax
f01120c1:	68 78 6d 13 f0       	push   $0xf0136d78
f01120c6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01120cc:	50                   	push   %eax
f01120cd:	e8 0e cf 01 00       	call   f012efe0 <strcconcat>
f01120d2:	83 c4 10             	add    $0x10,%esp
f01120d5:	83 ec 0c             	sub    $0xc,%esp
f01120d8:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01120de:	50                   	push   %eax
f01120df:	e8 df fa fe ff       	call   f0101bc3 <execute_command>
f01120e4:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01120e7:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01120ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120f1:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01120f4:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01120fb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120fe:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0112101:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112108:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011210b:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011210e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112111:	83 ec 08             	sub    $0x8,%esp
f0112114:	50                   	push   %eax
f0112115:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112118:	e8 8c 47 00 00       	call   f01168a9 <GP>
f011211d:	83 c4 10             	add    $0x10,%esp
f0112120:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0112123:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011212a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0112131:	e8 dc a4 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112136:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112139:	83 ec 0c             	sub    $0xc,%esp
f011213c:	68 84 6d 13 f0       	push   $0xf0136d84
f0112141:	e8 eb ec fe ff       	call   f0100e31 <cprintf>
f0112146:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112149:	6a 03                	push   $0x3
f011214b:	68 00 00 90 02       	push   $0x2900000
f0112150:	68 00 00 80 02       	push   $0x2800000
f0112155:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112158:	e8 64 66 ff ff       	call   f01087c1 <cut_paste_pages>
f011215d:	83 c4 10             	add    $0x10,%esp
f0112160:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112163:	e8 aa a4 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112168:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011216b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112172:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112176:	75 08                	jne    f0112180 <test_cut_paste_pages+0x218>
f0112178:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011217b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011217e:	74 2b                	je     f01121ab <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112180:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112183:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112186:	83 ec 0c             	sub    $0xc,%esp
f0112189:	50                   	push   %eax
f011218a:	ff 75 b4             	pushl  -0x4c(%ebp)
f011218d:	68 b4 6d 13 f0       	push   $0xf0136db4
f0112192:	68 3a 01 00 00       	push   $0x13a
f0112197:	68 0e 69 13 f0       	push   $0xf013690e
f011219c:	e8 1d e2 fe ff       	call   f01003be <_warn>
f01121a1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01121a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01121ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121af:	74 04                	je     f01121b5 <test_cut_paste_pages+0x24d>
f01121b1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01121b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01121bc:	83 ec 08             	sub    $0x8,%esp
f01121bf:	6a 00                	push   $0x0
f01121c1:	6a 01                	push   $0x1
f01121c3:	6a 00                	push   $0x0
f01121c5:	68 ff 0f 00 00       	push   $0xfff
f01121ca:	ff 75 bc             	pushl  -0x44(%ebp)
f01121cd:	6a 01                	push   $0x1
f01121cf:	68 00 30 00 00       	push   $0x3000
f01121d4:	68 00 00 90 02       	push   $0x2900000
f01121d9:	68 00 00 80 02       	push   $0x2800000
f01121de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121e1:	e8 90 47 00 00       	call   f0116976 <CCP>
f01121e6:	83 c4 30             	add    $0x30,%esp
f01121e9:	83 f8 01             	cmp    $0x1,%eax
f01121ec:	74 21                	je     f011220f <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01121ee:	83 ec 04             	sub    $0x4,%esp
f01121f1:	68 08 6e 13 f0       	push   $0xf0136e08
f01121f6:	68 42 01 00 00       	push   $0x142
f01121fb:	68 0e 69 13 f0       	push   $0xf013690e
f0112200:	e8 b9 e1 fe ff       	call   f01003be <_warn>
f0112205:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112208:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011220f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112213:	74 04                	je     f0112219 <test_cut_paste_pages+0x2b1>
f0112215:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112219:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0112220:	83 ec 04             	sub    $0x4,%esp
f0112223:	6a 00                	push   $0x0
f0112225:	68 00 00 90 02       	push   $0x2900000
f011222a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011222d:	e8 d5 41 00 00       	call   f0116407 <CB>
f0112232:	83 c4 10             	add    $0x10,%esp
f0112235:	85 c0                	test   %eax,%eax
f0112237:	0f 84 f6 00 00 00    	je     f0112333 <test_cut_paste_pages+0x3cb>
f011223d:	83 ec 04             	sub    $0x4,%esp
f0112240:	6a 00                	push   $0x0
f0112242:	68 00 10 90 02       	push   $0x2901000
f0112247:	ff 75 d4             	pushl  -0x2c(%ebp)
f011224a:	e8 b8 41 00 00       	call   f0116407 <CB>
f011224f:	83 c4 10             	add    $0x10,%esp
f0112252:	85 c0                	test   %eax,%eax
f0112254:	0f 84 d9 00 00 00    	je     f0112333 <test_cut_paste_pages+0x3cb>
f011225a:	83 ec 04             	sub    $0x4,%esp
f011225d:	6a 00                	push   $0x0
f011225f:	68 00 20 90 02       	push   $0x2902000
f0112264:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112267:	e8 9b 41 00 00       	call   f0116407 <CB>
f011226c:	83 c4 10             	add    $0x10,%esp
f011226f:	85 c0                	test   %eax,%eax
f0112271:	0f 84 bc 00 00 00    	je     f0112333 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112277:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011227e:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112285:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011228c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011228f:	8a 00                	mov    (%eax),%al
f0112291:	3c 61                	cmp    $0x61,%al
f0112293:	75 12                	jne    f01122a7 <test_cut_paste_pages+0x33f>
f0112295:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112298:	8a 00                	mov    (%eax),%al
f011229a:	3c 62                	cmp    $0x62,%al
f011229c:	75 09                	jne    f01122a7 <test_cut_paste_pages+0x33f>
f011229e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01122a1:	8a 00                	mov    (%eax),%al
f01122a3:	3c 63                	cmp    $0x63,%al
f01122a5:	74 21                	je     f01122c8 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01122a7:	83 ec 04             	sub    $0x4,%esp
f01122aa:	68 54 6e 13 f0       	push   $0xf0136e54
f01122af:	68 4f 01 00 00       	push   $0x14f
f01122b4:	68 0e 69 13 f0       	push   $0xf013690e
f01122b9:	e8 00 e1 fe ff       	call   f01003be <_warn>
f01122be:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01122c1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01122c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122cc:	74 04                	je     f01122d2 <test_cut_paste_pages+0x36a>
f01122ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01122d2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01122d9:	83 ec 04             	sub    $0x4,%esp
f01122dc:	6a 01                	push   $0x1
f01122de:	68 00 10 90 02       	push   $0x2901000
f01122e3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122e6:	e8 1c 41 00 00       	call   f0116407 <CB>
f01122eb:	83 c4 10             	add    $0x10,%esp
f01122ee:	85 c0                	test   %eax,%eax
f01122f0:	74 41                	je     f0112333 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f01122f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122f5:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01122f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122fb:	8a 00                	mov    (%eax),%al
f01122fd:	3c 79                	cmp    $0x79,%al
f01122ff:	74 21                	je     f0112322 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112301:	83 ec 04             	sub    $0x4,%esp
f0112304:	68 54 6e 13 f0       	push   $0xf0136e54
f0112309:	68 5a 01 00 00       	push   $0x15a
f011230e:	68 0e 69 13 f0       	push   $0xf013690e
f0112313:	e8 a6 e0 fe ff       	call   f01003be <_warn>
f0112318:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011231b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112322:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112326:	74 04                	je     f011232c <test_cut_paste_pages+0x3c4>
f0112328:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011232c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112333:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112336:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112339:	6a 02                	push   $0x2
f011233b:	68 00 f0 bf 02       	push   $0x2bff000
f0112340:	68 00 10 90 02       	push   $0x2901000
f0112345:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112348:	e8 74 64 ff ff       	call   f01087c1 <cut_paste_pages>
f011234d:	83 c4 10             	add    $0x10,%esp
f0112350:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112353:	e8 ba a2 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112358:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011235b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011235f:	75 0b                	jne    f011236c <test_cut_paste_pages+0x404>
f0112361:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112364:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112367:	83 f8 01             	cmp    $0x1,%eax
f011236a:	74 2b                	je     f0112397 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011236c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011236f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112372:	83 ec 0c             	sub    $0xc,%esp
f0112375:	50                   	push   %eax
f0112376:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112379:	68 b4 6d 13 f0       	push   $0xf0136db4
f011237e:	68 6b 01 00 00       	push   $0x16b
f0112383:	68 0e 69 13 f0       	push   $0xf013690e
f0112388:	e8 31 e0 fe ff       	call   f01003be <_warn>
f011238d:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112390:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112397:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011239b:	74 04                	je     f01123a1 <test_cut_paste_pages+0x439>
f011239d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01123a1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01123a8:	83 ec 08             	sub    $0x8,%esp
f01123ab:	6a 00                	push   $0x0
f01123ad:	6a 01                	push   $0x1
f01123af:	6a 00                	push   $0x0
f01123b1:	68 ff 0f 00 00       	push   $0xfff
f01123b6:	ff 75 bc             	pushl  -0x44(%ebp)
f01123b9:	6a 01                	push   $0x1
f01123bb:	68 00 20 00 00       	push   $0x2000
f01123c0:	68 00 f0 bf 02       	push   $0x2bff000
f01123c5:	68 00 10 90 02       	push   $0x2901000
f01123ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123cd:	e8 a4 45 00 00       	call   f0116976 <CCP>
f01123d2:	83 c4 30             	add    $0x30,%esp
f01123d5:	83 f8 01             	cmp    $0x1,%eax
f01123d8:	74 21                	je     f01123fb <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01123da:	83 ec 04             	sub    $0x4,%esp
f01123dd:	68 08 6e 13 f0       	push   $0xf0136e08
f01123e2:	68 73 01 00 00       	push   $0x173
f01123e7:	68 0e 69 13 f0       	push   $0xf013690e
f01123ec:	e8 cd df fe ff       	call   f01003be <_warn>
f01123f1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01123f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01123fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123ff:	74 04                	je     f0112405 <test_cut_paste_pages+0x49d>
f0112401:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112405:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011240c:	83 ec 04             	sub    $0x4,%esp
f011240f:	6a 00                	push   $0x0
f0112411:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112416:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112419:	e8 e9 3f 00 00       	call   f0116407 <CB>
f011241e:	83 c4 10             	add    $0x10,%esp
f0112421:	85 c0                	test   %eax,%eax
f0112423:	74 6b                	je     f0112490 <test_cut_paste_pages+0x528>
f0112425:	83 ec 04             	sub    $0x4,%esp
f0112428:	6a 00                	push   $0x0
f011242a:	68 ff 0f c0 02       	push   $0x2c00fff
f011242f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112432:	e8 d0 3f 00 00       	call   f0116407 <CB>
f0112437:	83 c4 10             	add    $0x10,%esp
f011243a:	85 c0                	test   %eax,%eax
f011243c:	74 52                	je     f0112490 <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f011243e:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112445:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011244c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011244f:	8a 00                	mov    (%eax),%al
f0112451:	3c 79                	cmp    $0x79,%al
f0112453:	75 09                	jne    f011245e <test_cut_paste_pages+0x4f6>
f0112455:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112458:	8a 00                	mov    (%eax),%al
f011245a:	3c 63                	cmp    $0x63,%al
f011245c:	74 21                	je     f011247f <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011245e:	83 ec 04             	sub    $0x4,%esp
f0112461:	68 54 6e 13 f0       	push   $0xf0136e54
f0112466:	68 7f 01 00 00       	push   $0x17f
f011246b:	68 0e 69 13 f0       	push   $0xf013690e
f0112470:	e8 49 df fe ff       	call   f01003be <_warn>
f0112475:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112478:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011247f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112483:	74 04                	je     f0112489 <test_cut_paste_pages+0x521>
f0112485:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112489:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112490:	83 ec 0c             	sub    $0xc,%esp
f0112493:	68 8d 6e 13 f0       	push   $0xf0136e8d
f0112498:	e8 94 e9 fe ff       	call   f0100e31 <cprintf>
f011249d:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01124a0:	83 ec 0c             	sub    $0xc,%esp
f01124a3:	68 9c 6e 13 f0       	push   $0xf0136e9c
f01124a8:	e8 84 e9 fe ff       	call   f0100e31 <cprintf>
f01124ad:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01124b0:	83 ec 04             	sub    $0x4,%esp
f01124b3:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01124b9:	50                   	push   %eax
f01124ba:	68 c5 6e 13 f0       	push   $0xf0136ec5
f01124bf:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01124c5:	50                   	push   %eax
f01124c6:	e8 15 cb 01 00       	call   f012efe0 <strcconcat>
f01124cb:	83 c4 10             	add    $0x10,%esp
f01124ce:	83 ec 0c             	sub    $0xc,%esp
f01124d1:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01124d7:	50                   	push   %eax
f01124d8:	e8 e6 f6 fe ff       	call   f0101bc3 <execute_command>
f01124dd:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01124e0:	83 ec 04             	sub    $0x4,%esp
f01124e3:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01124e9:	50                   	push   %eax
f01124ea:	68 d0 6e 13 f0       	push   $0xf0136ed0
f01124ef:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01124f5:	50                   	push   %eax
f01124f6:	e8 e5 ca 01 00       	call   f012efe0 <strcconcat>
f01124fb:	83 c4 10             	add    $0x10,%esp
f01124fe:	83 ec 0c             	sub    $0xc,%esp
f0112501:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112507:	50                   	push   %eax
f0112508:	e8 b6 f6 fe ff       	call   f0101bc3 <execute_command>
f011250d:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112510:	83 ec 04             	sub    $0x4,%esp
f0112513:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112519:	50                   	push   %eax
f011251a:	68 db 6e 13 f0       	push   $0xf0136edb
f011251f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112525:	50                   	push   %eax
f0112526:	e8 b5 ca 01 00       	call   f012efe0 <strcconcat>
f011252b:	83 c4 10             	add    $0x10,%esp
f011252e:	83 ec 0c             	sub    $0xc,%esp
f0112531:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112537:	50                   	push   %eax
f0112538:	e8 86 f6 fe ff       	call   f0101bc3 <execute_command>
f011253d:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112540:	83 ec 04             	sub    $0x4,%esp
f0112543:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112549:	50                   	push   %eax
f011254a:	68 e6 6e 13 f0       	push   $0xf0136ee6
f011254f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112555:	50                   	push   %eax
f0112556:	e8 85 ca 01 00       	call   f012efe0 <strcconcat>
f011255b:	83 c4 10             	add    $0x10,%esp
f011255e:	83 ec 0c             	sub    $0xc,%esp
f0112561:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112567:	50                   	push   %eax
f0112568:	e8 56 f6 fe ff       	call   f0101bc3 <execute_command>
f011256d:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112570:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112577:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011257a:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f011257d:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112584:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112587:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f011258a:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112591:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112594:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112597:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011259e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125a1:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01125a4:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01125ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125ae:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01125b1:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01125b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125bb:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01125be:	83 ec 08             	sub    $0x8,%esp
f01125c1:	68 00 00 c0 01       	push   $0x1c00000
f01125c6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125c9:	e8 db 42 00 00       	call   f01168a9 <GP>
f01125ce:	83 c4 10             	add    $0x10,%esp
f01125d1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01125d4:	83 ec 08             	sub    $0x8,%esp
f01125d7:	68 00 00 40 01       	push   $0x1400000
f01125dc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125df:	e8 c5 42 00 00       	call   f01168a9 <GP>
f01125e4:	83 c4 10             	add    $0x10,%esp
f01125e7:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01125ea:	e8 23 a0 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01125ef:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01125f2:	6a 01                	push   $0x1
f01125f4:	68 00 00 40 01       	push   $0x1400000
f01125f9:	68 00 00 c0 01       	push   $0x1c00000
f01125fe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112601:	e8 bb 61 ff ff       	call   f01087c1 <cut_paste_pages>
f0112606:	83 c4 10             	add    $0x10,%esp
f0112609:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011260c:	e8 01 a0 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112611:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112614:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112618:	75 08                	jne    f0112622 <test_cut_paste_pages+0x6ba>
f011261a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011261d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112620:	74 2b                	je     f011264d <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112622:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112625:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112628:	83 ec 0c             	sub    $0xc,%esp
f011262b:	50                   	push   %eax
f011262c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011262f:	68 f4 6e 13 f0       	push   $0xf0136ef4
f0112634:	68 a2 01 00 00       	push   $0x1a2
f0112639:	68 0e 69 13 f0       	push   $0xf013690e
f011263e:	e8 7b dd fe ff       	call   f01003be <_warn>
f0112643:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112646:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011264d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112651:	74 04                	je     f0112657 <test_cut_paste_pages+0x6ef>
f0112653:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112657:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011265e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112665:	83 ec 08             	sub    $0x8,%esp
f0112668:	6a 00                	push   $0x0
f011266a:	68 ff 0f 00 00       	push   $0xfff
f011266f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112672:	68 ff 0f 00 00       	push   $0xfff
f0112677:	ff 75 a0             	pushl  -0x60(%ebp)
f011267a:	6a 01                	push   $0x1
f011267c:	68 00 10 00 00       	push   $0x1000
f0112681:	68 00 00 40 01       	push   $0x1400000
f0112686:	68 00 00 c0 01       	push   $0x1c00000
f011268b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011268e:	e8 e3 42 00 00       	call   f0116976 <CCP>
f0112693:	83 c4 30             	add    $0x30,%esp
f0112696:	83 f8 01             	cmp    $0x1,%eax
f0112699:	74 28                	je     f01126c3 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011269b:	83 ec 04             	sub    $0x4,%esp
f011269e:	68 08 6e 13 f0       	push   $0xf0136e08
f01126a3:	68 ab 01 00 00       	push   $0x1ab
f01126a8:	68 0e 69 13 f0       	push   $0xf013690e
f01126ad:	e8 0c dd fe ff       	call   f01003be <_warn>
f01126b2:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01126b5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01126bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01126c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126c7:	74 04                	je     f01126cd <test_cut_paste_pages+0x765>
f01126c9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01126cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01126d4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01126d8:	0f 84 92 00 00 00    	je     f0112770 <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f01126de:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01126e5:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01126ec:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01126f3:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01126fa:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112701:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112708:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011270b:	8a 00                	mov    (%eax),%al
f011270d:	3c 61                	cmp    $0x61,%al
f011270f:	75 2d                	jne    f011273e <test_cut_paste_pages+0x7d6>
f0112711:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112714:	8a 00                	mov    (%eax),%al
f0112716:	3c 78                	cmp    $0x78,%al
f0112718:	75 24                	jne    f011273e <test_cut_paste_pages+0x7d6>
f011271a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011271d:	8a 00                	mov    (%eax),%al
f011271f:	3c 62                	cmp    $0x62,%al
f0112721:	75 1b                	jne    f011273e <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112723:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112726:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112728:	3c 79                	cmp    $0x79,%al
f011272a:	75 12                	jne    f011273e <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011272c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011272f:	8a 00                	mov    (%eax),%al
f0112731:	3c 63                	cmp    $0x63,%al
f0112733:	75 09                	jne    f011273e <test_cut_paste_pages+0x7d6>
f0112735:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112738:	8a 00                	mov    (%eax),%al
f011273a:	3c 7a                	cmp    $0x7a,%al
f011273c:	74 21                	je     f011275f <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011273e:	83 ec 04             	sub    $0x4,%esp
f0112741:	68 54 6e 13 f0       	push   $0xf0136e54
f0112746:	68 bd 01 00 00       	push   $0x1bd
f011274b:	68 0e 69 13 f0       	push   $0xf013690e
f0112750:	e8 69 dc fe ff       	call   f01003be <_warn>
f0112755:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112758:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011275f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112763:	74 04                	je     f0112769 <test_cut_paste_pages+0x801>
f0112765:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112769:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112770:	e8 9d 9e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112775:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112778:	6a 03                	push   $0x3
f011277a:	68 00 f0 bf 01       	push   $0x1bff000
f011277f:	68 00 00 40 01       	push   $0x1400000
f0112784:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112787:	e8 35 60 ff ff       	call   f01087c1 <cut_paste_pages>
f011278c:	83 c4 10             	add    $0x10,%esp
f011278f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112792:	e8 7b 9e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112797:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011279a:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011279e:	75 08                	jne    f01127a8 <test_cut_paste_pages+0x840>
f01127a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127a3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01127a6:	74 2b                	je     f01127d3 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01127a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127ab:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01127ae:	83 ec 0c             	sub    $0xc,%esp
f01127b1:	50                   	push   %eax
f01127b2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01127b5:	68 f4 6e 13 f0       	push   $0xf0136ef4
f01127ba:	68 cc 01 00 00       	push   $0x1cc
f01127bf:	68 0e 69 13 f0       	push   $0xf013690e
f01127c4:	e8 f5 db fe ff       	call   f01003be <_warn>
f01127c9:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01127cc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01127d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127d7:	74 04                	je     f01127dd <test_cut_paste_pages+0x875>
f01127d9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01127dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01127e4:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01127eb:	83 ec 04             	sub    $0x4,%esp
f01127ee:	6a 00                	push   $0x0
f01127f0:	68 00 00 40 01       	push   $0x1400000
f01127f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127f8:	e8 0a 3c 00 00       	call   f0116407 <CB>
f01127fd:	83 c4 10             	add    $0x10,%esp
f0112800:	83 f8 01             	cmp    $0x1,%eax
f0112803:	0f 85 80 00 00 00    	jne    f0112889 <test_cut_paste_pages+0x921>
f0112809:	83 ec 04             	sub    $0x4,%esp
f011280c:	6a 00                	push   $0x0
f011280e:	68 00 10 40 01       	push   $0x1401000
f0112813:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112816:	e8 ec 3b 00 00       	call   f0116407 <CB>
f011281b:	83 c4 10             	add    $0x10,%esp
f011281e:	83 f8 01             	cmp    $0x1,%eax
f0112821:	75 66                	jne    f0112889 <test_cut_paste_pages+0x921>
f0112823:	83 ec 04             	sub    $0x4,%esp
f0112826:	6a 00                	push   $0x0
f0112828:	68 00 20 40 01       	push   $0x1402000
f011282d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112830:	e8 d2 3b 00 00       	call   f0116407 <CB>
f0112835:	83 c4 10             	add    $0x10,%esp
f0112838:	83 f8 01             	cmp    $0x1,%eax
f011283b:	75 4c                	jne    f0112889 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011283d:	83 ec 04             	sub    $0x4,%esp
f0112840:	6a 00                	push   $0x0
f0112842:	68 00 f0 bf 01       	push   $0x1bff000
f0112847:	ff 75 d4             	pushl  -0x2c(%ebp)
f011284a:	e8 b8 3b 00 00       	call   f0116407 <CB>
f011284f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112852:	85 c0                	test   %eax,%eax
f0112854:	75 33                	jne    f0112889 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112856:	83 ec 04             	sub    $0x4,%esp
f0112859:	6a 00                	push   $0x0
f011285b:	68 00 00 c0 01       	push   $0x1c00000
f0112860:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112863:	e8 9f 3b 00 00       	call   f0116407 <CB>
f0112868:	83 c4 10             	add    $0x10,%esp
f011286b:	83 f8 01             	cmp    $0x1,%eax
f011286e:	75 19                	jne    f0112889 <test_cut_paste_pages+0x921>
f0112870:	83 ec 04             	sub    $0x4,%esp
f0112873:	6a 00                	push   $0x0
f0112875:	68 00 10 c0 01       	push   $0x1c01000
f011287a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011287d:	e8 85 3b 00 00       	call   f0116407 <CB>
f0112882:	83 c4 10             	add    $0x10,%esp
f0112885:	85 c0                	test   %eax,%eax
f0112887:	74 28                	je     f01128b1 <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112889:	83 ec 04             	sub    $0x4,%esp
f011288c:	68 54 6f 13 f0       	push   $0xf0136f54
f0112891:	68 d5 01 00 00       	push   $0x1d5
f0112896:	68 0e 69 13 f0       	push   $0xf013690e
f011289b:	e8 1e db fe ff       	call   f01003be <_warn>
f01128a0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01128a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01128aa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01128b1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128b5:	74 04                	je     f01128bb <test_cut_paste_pages+0x953>
f01128b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01128bb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01128c2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01128c6:	0f 84 99 00 00 00    	je     f0112965 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f01128cc:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01128d3:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01128da:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01128e1:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01128e8:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01128ef:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01128f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128f9:	8a 00                	mov    (%eax),%al
f01128fb:	3c 61                	cmp    $0x61,%al
f01128fd:	75 2d                	jne    f011292c <test_cut_paste_pages+0x9c4>
f01128ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112902:	8a 00                	mov    (%eax),%al
f0112904:	3c 78                	cmp    $0x78,%al
f0112906:	75 24                	jne    f011292c <test_cut_paste_pages+0x9c4>
f0112908:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011290b:	8a 00                	mov    (%eax),%al
f011290d:	3c 62                	cmp    $0x62,%al
f011290f:	75 1b                	jne    f011292c <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112911:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112914:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112916:	3c 79                	cmp    $0x79,%al
f0112918:	75 12                	jne    f011292c <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011291a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011291d:	8a 00                	mov    (%eax),%al
f011291f:	3c 63                	cmp    $0x63,%al
f0112921:	75 09                	jne    f011292c <test_cut_paste_pages+0x9c4>
f0112923:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112926:	8a 00                	mov    (%eax),%al
f0112928:	3c 7a                	cmp    $0x7a,%al
f011292a:	74 28                	je     f0112954 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f011292c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112933:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011293a:	83 ec 04             	sub    $0x4,%esp
f011293d:	68 54 6e 13 f0       	push   $0xf0136e54
f0112942:	68 e9 01 00 00       	push   $0x1e9
f0112947:	68 0e 69 13 f0       	push   $0xf013690e
f011294c:	e8 6d da fe ff       	call   f01003be <_warn>
f0112951:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112954:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112958:	74 04                	je     f011295e <test_cut_paste_pages+0x9f6>
f011295a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011295e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112965:	83 ec 0c             	sub    $0xc,%esp
f0112968:	68 8d 6f 13 f0       	push   $0xf0136f8d
f011296d:	e8 bf e4 fe ff       	call   f0100e31 <cprintf>
f0112972:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112975:	83 ec 08             	sub    $0x8,%esp
f0112978:	ff 75 e4             	pushl  -0x1c(%ebp)
f011297b:	68 9c 6f 13 f0       	push   $0xf0136f9c
f0112980:	e8 ac e4 fe ff       	call   f0100e31 <cprintf>
f0112985:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112988:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011298c:	75 10                	jne    f011299e <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f011298e:	83 ec 0c             	sub    $0xc,%esp
f0112991:	68 d0 6f 13 f0       	push   $0xf0136fd0
f0112996:	e8 96 e4 fe ff       	call   f0100e31 <cprintf>
f011299b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011299e:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01129a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01129a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01129a9:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01129ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01129b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01129b4:	5b                   	pop    %ebx
f01129b5:	5e                   	pop    %esi
f01129b6:	5f                   	pop    %edi
f01129b7:	5d                   	pop    %ebp
f01129b8:	c3                   	ret    

f01129b9 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01129b9:	55                   	push   %ebp
f01129ba:	89 e5                	mov    %esp,%ebp
f01129bc:	57                   	push   %edi
f01129bd:	56                   	push   %esi
f01129be:	53                   	push   %ebx
f01129bf:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01129c5:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01129cb:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f01129d0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129d5:	89 c7                	mov    %eax,%edi
f01129d7:	89 de                	mov    %ebx,%esi
f01129d9:	89 d1                	mov    %edx,%ecx
f01129db:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129dd:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01129e3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01129e8:	b0 00                	mov    $0x0,%al
f01129ea:	89 d7                	mov    %edx,%edi
f01129ec:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01129ee:	6a 00                	push   $0x0
f01129f0:	6a 0a                	push   $0xa
f01129f2:	6a 14                	push   $0x14
f01129f4:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01129fa:	50                   	push   %eax
f01129fb:	e8 ff 5e ff ff       	call   f01088ff <env_create>
f0112a00:	83 c4 10             	add    $0x10,%esp
f0112a03:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112a06:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a09:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112a0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112a12:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a15:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112a1b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112a21:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112a27:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112a2a:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112a31:	75 70 20 
f0112a34:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112a3b:	00 00 00 
f0112a3e:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112a44:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112a49:	b8 00 00 00 00       	mov    $0x0,%eax
f0112a4e:	89 d7                	mov    %edx,%edi
f0112a50:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112a52:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a55:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112a58:	83 ec 08             	sub    $0x8,%esp
f0112a5b:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112a61:	52                   	push   %edx
f0112a62:	50                   	push   %eax
f0112a63:	e8 80 c4 01 00       	call   f012eee8 <ltostr>
f0112a68:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112a6b:	83 ec 04             	sub    $0x4,%esp
f0112a6e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a74:	50                   	push   %eax
f0112a75:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112a7b:	50                   	push   %eax
f0112a7c:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112a82:	50                   	push   %eax
f0112a83:	e8 58 c5 01 00       	call   f012efe0 <strcconcat>
f0112a88:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112a8b:	83 ec 0c             	sub    $0xc,%esp
f0112a8e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a91:	e8 ac 3e 00 00       	call   f0116942 <ClearUserSpace>
f0112a96:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112a99:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112aa0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112aa7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112aae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112ab5:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112abc:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112ac3:	83 ec 0c             	sub    $0xc,%esp
f0112ac6:	68 44 70 13 f0       	push   $0xf0137044
f0112acb:	e8 61 e3 fe ff       	call   f0100e31 <cprintf>
f0112ad0:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112ad3:	83 ec 04             	sub    $0x4,%esp
f0112ad6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112adc:	50                   	push   %eax
f0112add:	68 7a 70 13 f0       	push   $0xf013707a
f0112ae2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ae8:	50                   	push   %eax
f0112ae9:	e8 f2 c4 01 00       	call   f012efe0 <strcconcat>
f0112aee:	83 c4 10             	add    $0x10,%esp
f0112af1:	83 ec 0c             	sub    $0xc,%esp
f0112af4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112afa:	50                   	push   %eax
f0112afb:	e8 c3 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b00:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112b03:	83 ec 04             	sub    $0x4,%esp
f0112b06:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b0c:	50                   	push   %eax
f0112b0d:	68 7f 70 13 f0       	push   $0xf013707f
f0112b12:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b18:	50                   	push   %eax
f0112b19:	e8 c2 c4 01 00       	call   f012efe0 <strcconcat>
f0112b1e:	83 c4 10             	add    $0x10,%esp
f0112b21:	83 ec 0c             	sub    $0xc,%esp
f0112b24:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b2a:	50                   	push   %eax
f0112b2b:	e8 93 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b30:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112b33:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b39:	bb 85 73 13 f0       	mov    $0xf0137385,%ebx
f0112b3e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b43:	89 c7                	mov    %eax,%edi
f0112b45:	89 de                	mov    %ebx,%esi
f0112b47:	89 d1                	mov    %edx,%ecx
f0112b49:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b4b:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112b51:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b56:	b0 00                	mov    $0x0,%al
f0112b58:	89 d7                	mov    %edx,%edi
f0112b5a:	f3 aa                	rep stos %al,%es:(%edi)
f0112b5c:	83 ec 0c             	sub    $0xc,%esp
f0112b5f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b65:	50                   	push   %eax
f0112b66:	e8 58 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b6b:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112b6e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112b74:	bb e9 73 13 f0       	mov    $0xf01373e9,%ebx
f0112b79:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b7e:	89 c7                	mov    %eax,%edi
f0112b80:	89 de                	mov    %ebx,%esi
f0112b82:	89 d1                	mov    %edx,%ecx
f0112b84:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b86:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112b8c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b91:	b0 00                	mov    $0x0,%al
f0112b93:	89 d7                	mov    %edx,%edi
f0112b95:	f3 aa                	rep stos %al,%es:(%edi)
f0112b97:	83 ec 0c             	sub    $0xc,%esp
f0112b9a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112ba0:	50                   	push   %eax
f0112ba1:	e8 1d f0 fe ff       	call   f0101bc3 <execute_command>
f0112ba6:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112ba9:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112baf:	bb 4d 74 13 f0       	mov    $0xf013744d,%ebx
f0112bb4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bb9:	89 c7                	mov    %eax,%edi
f0112bbb:	89 de                	mov    %ebx,%esi
f0112bbd:	89 d1                	mov    %edx,%ecx
f0112bbf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bc1:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112bc7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bcc:	b0 00                	mov    $0x0,%al
f0112bce:	89 d7                	mov    %edx,%edi
f0112bd0:	f3 aa                	rep stos %al,%es:(%edi)
f0112bd2:	83 ec 0c             	sub    $0xc,%esp
f0112bd5:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112bdb:	50                   	push   %eax
f0112bdc:	e8 e2 ef fe ff       	call   f0101bc3 <execute_command>
f0112be1:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112be4:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112bea:	bb b1 74 13 f0       	mov    $0xf01374b1,%ebx
f0112bef:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bf4:	89 c7                	mov    %eax,%edi
f0112bf6:	89 de                	mov    %ebx,%esi
f0112bf8:	89 d1                	mov    %edx,%ecx
f0112bfa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bfc:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112c02:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c07:	b0 00                	mov    $0x0,%al
f0112c09:	89 d7                	mov    %edx,%edi
f0112c0b:	f3 aa                	rep stos %al,%es:(%edi)
f0112c0d:	83 ec 0c             	sub    $0xc,%esp
f0112c10:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112c16:	50                   	push   %eax
f0112c17:	e8 a7 ef fe ff       	call   f0101bc3 <execute_command>
f0112c1c:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112c1f:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c25:	bb 15 75 13 f0       	mov    $0xf0137515,%ebx
f0112c2a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c2f:	89 c7                	mov    %eax,%edi
f0112c31:	89 de                	mov    %ebx,%esi
f0112c33:	89 d1                	mov    %edx,%ecx
f0112c35:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c37:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112c3d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c42:	b0 00                	mov    $0x0,%al
f0112c44:	89 d7                	mov    %edx,%edi
f0112c46:	f3 aa                	rep stos %al,%es:(%edi)
f0112c48:	83 ec 0c             	sub    $0xc,%esp
f0112c4b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c51:	50                   	push   %eax
f0112c52:	e8 6c ef fe ff       	call   f0101bc3 <execute_command>
f0112c57:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112c5a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c60:	bb 79 75 13 f0       	mov    $0xf0137579,%ebx
f0112c65:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c6a:	89 c7                	mov    %eax,%edi
f0112c6c:	89 de                	mov    %ebx,%esi
f0112c6e:	89 d1                	mov    %edx,%ecx
f0112c70:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c72:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112c78:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c7d:	b0 00                	mov    $0x0,%al
f0112c7f:	89 d7                	mov    %edx,%edi
f0112c81:	f3 aa                	rep stos %al,%es:(%edi)
f0112c83:	83 ec 0c             	sub    $0xc,%esp
f0112c86:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c8c:	50                   	push   %eax
f0112c8d:	e8 31 ef fe ff       	call   f0101bc3 <execute_command>
f0112c92:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112c95:	83 ec 04             	sub    $0x4,%esp
f0112c98:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c9e:	50                   	push   %eax
f0112c9f:	68 87 70 13 f0       	push   $0xf0137087
f0112ca4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112caa:	50                   	push   %eax
f0112cab:	e8 30 c3 01 00       	call   f012efe0 <strcconcat>
f0112cb0:	83 c4 10             	add    $0x10,%esp
f0112cb3:	83 ec 0c             	sub    $0xc,%esp
f0112cb6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cbc:	50                   	push   %eax
f0112cbd:	e8 01 ef fe ff       	call   f0101bc3 <execute_command>
f0112cc2:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112cc5:	83 ec 04             	sub    $0x4,%esp
f0112cc8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cce:	50                   	push   %eax
f0112ccf:	68 91 70 13 f0       	push   $0xf0137091
f0112cd4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112cda:	50                   	push   %eax
f0112cdb:	e8 00 c3 01 00       	call   f012efe0 <strcconcat>
f0112ce0:	83 c4 10             	add    $0x10,%esp
f0112ce3:	83 ec 0c             	sub    $0xc,%esp
f0112ce6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cec:	50                   	push   %eax
f0112ced:	e8 d1 ee fe ff       	call   f0101bc3 <execute_command>
f0112cf2:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112cf5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112cfb:	bb dd 75 13 f0       	mov    $0xf01375dd,%ebx
f0112d00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d05:	89 c7                	mov    %eax,%edi
f0112d07:	89 de                	mov    %ebx,%esi
f0112d09:	89 d1                	mov    %edx,%ecx
f0112d0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d0d:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112d13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d18:	b0 00                	mov    $0x0,%al
f0112d1a:	89 d7                	mov    %edx,%edi
f0112d1c:	f3 aa                	rep stos %al,%es:(%edi)
f0112d1e:	83 ec 0c             	sub    $0xc,%esp
f0112d21:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d27:	50                   	push   %eax
f0112d28:	e8 96 ee fe ff       	call   f0101bc3 <execute_command>
f0112d2d:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112d30:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d36:	bb 41 76 13 f0       	mov    $0xf0137641,%ebx
f0112d3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d40:	89 c7                	mov    %eax,%edi
f0112d42:	89 de                	mov    %ebx,%esi
f0112d44:	89 d1                	mov    %edx,%ecx
f0112d46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d48:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112d4e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d53:	b0 00                	mov    $0x0,%al
f0112d55:	89 d7                	mov    %edx,%edi
f0112d57:	f3 aa                	rep stos %al,%es:(%edi)
f0112d59:	83 ec 0c             	sub    $0xc,%esp
f0112d5c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d62:	50                   	push   %eax
f0112d63:	e8 5b ee fe ff       	call   f0101bc3 <execute_command>
f0112d68:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112d6b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d71:	bb a5 76 13 f0       	mov    $0xf01376a5,%ebx
f0112d76:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d7b:	89 c7                	mov    %eax,%edi
f0112d7d:	89 de                	mov    %ebx,%esi
f0112d7f:	89 d1                	mov    %edx,%ecx
f0112d81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d83:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112d89:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d8e:	b0 00                	mov    $0x0,%al
f0112d90:	89 d7                	mov    %edx,%edi
f0112d92:	f3 aa                	rep stos %al,%es:(%edi)
f0112d94:	83 ec 0c             	sub    $0xc,%esp
f0112d97:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d9d:	50                   	push   %eax
f0112d9e:	e8 20 ee fe ff       	call   f0101bc3 <execute_command>
f0112da3:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112da6:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112dad:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112db4:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112dbb:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112dc2:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112dc9:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112dd0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112dd7:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112dde:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112de5:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112dec:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112df3:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112dfa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112dfd:	8a 00                	mov    (%eax),%al
f0112dff:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112e05:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e08:	8a 00                	mov    (%eax),%al
f0112e0a:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112e10:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e13:	8a 00                	mov    (%eax),%al
f0112e15:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e1b:	e8 f2 97 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112e20:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112e23:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e26:	89 d0                	mov    %edx,%eax
f0112e28:	01 c0                	add    %eax,%eax
f0112e2a:	01 d0                	add    %edx,%eax
f0112e2c:	01 c0                	add    %eax,%eax
f0112e2e:	50                   	push   %eax
f0112e2f:	68 00 00 10 00       	push   $0x100000
f0112e34:	6a 00                	push   $0x0
f0112e36:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e39:	e8 9d 59 ff ff       	call   f01087db <copy_paste_chunk>
f0112e3e:	83 c4 10             	add    $0x10,%esp
f0112e41:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e44:	e8 c9 97 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112e49:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112e4c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112e53:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112e57:	75 08                	jne    f0112e61 <test_copy_paste_chunk+0x4a8>
f0112e59:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e5c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112e5f:	74 2b                	je     f0112e8c <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112e61:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e64:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e67:	83 ec 0c             	sub    $0xc,%esp
f0112e6a:	50                   	push   %eax
f0112e6b:	ff 75 88             	pushl  -0x78(%ebp)
f0112e6e:	68 a0 70 13 f0       	push   $0xf01370a0
f0112e73:	68 3c 02 00 00       	push   $0x23c
f0112e78:	68 0e 69 13 f0       	push   $0xf013690e
f0112e7d:	e8 3c d5 fe ff       	call   f01003be <_warn>
f0112e82:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e85:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112e8c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e90:	74 04                	je     f0112e96 <test_copy_paste_chunk+0x4dd>
f0112e92:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e96:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112e9d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ea0:	8a 00                	mov    (%eax),%al
f0112ea2:	3c 61                	cmp    $0x61,%al
f0112ea4:	75 75                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112ea6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ea9:	8a 00                	mov    (%eax),%al
f0112eab:	3c 78                	cmp    $0x78,%al
f0112ead:	75 6c                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112eaf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112eb2:	8a 00                	mov    (%eax),%al
f0112eb4:	3c 62                	cmp    $0x62,%al
f0112eb6:	75 63                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112eb8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112ebb:	8a 00                	mov    (%eax),%al
f0112ebd:	3c 79                	cmp    $0x79,%al
f0112ebf:	75 5a                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112ec1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ec4:	8a 00                	mov    (%eax),%al
f0112ec6:	3c 63                	cmp    $0x63,%al
f0112ec8:	75 51                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112eca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112ecd:	8a 00                	mov    (%eax),%al
f0112ecf:	3c 7a                	cmp    $0x7a,%al
f0112ed1:	75 48                	jne    f0112f1b <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112ed3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112ed6:	8a 00                	mov    (%eax),%al
f0112ed8:	3c 64                	cmp    $0x64,%al
f0112eda:	75 3f                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112edc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112edf:	8a 10                	mov    (%eax),%dl
f0112ee1:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112ee7:	38 c2                	cmp    %al,%dl
f0112ee9:	75 30                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112eeb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112eee:	8a 00                	mov    (%eax),%al
f0112ef0:	3c 65                	cmp    $0x65,%al
f0112ef2:	75 27                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112ef4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ef7:	8a 10                	mov    (%eax),%dl
f0112ef9:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112eff:	38 c2                	cmp    %al,%dl
f0112f01:	75 18                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112f03:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112f06:	8a 00                	mov    (%eax),%al
f0112f08:	3c 66                	cmp    $0x66,%al
f0112f0a:	75 0f                	jne    f0112f1b <test_copy_paste_chunk+0x562>
f0112f0c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112f0f:	8a 10                	mov    (%eax),%dl
f0112f11:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112f17:	38 c2                	cmp    %al,%dl
f0112f19:	74 21                	je     f0112f3c <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f1b:	83 ec 04             	sub    $0x4,%esp
f0112f1e:	68 04 71 13 f0       	push   $0xf0137104
f0112f23:	68 45 02 00 00       	push   $0x245
f0112f28:	68 0e 69 13 f0       	push   $0xf013690e
f0112f2d:	e8 8c d4 fe ff       	call   f01003be <_warn>
f0112f32:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f35:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112f3c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f40:	74 04                	je     f0112f46 <test_copy_paste_chunk+0x58d>
f0112f42:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f46:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112f4d:	83 ec 0c             	sub    $0xc,%esp
f0112f50:	68 3e 71 13 f0       	push   $0xf013713e
f0112f55:	e8 d7 de fe ff       	call   f0100e31 <cprintf>
f0112f5a:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112f5d:	83 ec 0c             	sub    $0xc,%esp
f0112f60:	68 50 71 13 f0       	push   $0xf0137150
f0112f65:	e8 c7 de fe ff       	call   f0100e31 <cprintf>
f0112f6a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112f6d:	83 ec 04             	sub    $0x4,%esp
f0112f70:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f76:	50                   	push   %eax
f0112f77:	68 86 71 13 f0       	push   $0xf0137186
f0112f7c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f82:	50                   	push   %eax
f0112f83:	e8 58 c0 01 00       	call   f012efe0 <strcconcat>
f0112f88:	83 c4 10             	add    $0x10,%esp
f0112f8b:	83 ec 0c             	sub    $0xc,%esp
f0112f8e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f94:	50                   	push   %eax
f0112f95:	e8 29 ec fe ff       	call   f0101bc3 <execute_command>
f0112f9a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112f9d:	83 ec 04             	sub    $0x4,%esp
f0112fa0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112fa6:	50                   	push   %eax
f0112fa7:	68 90 71 13 f0       	push   $0xf0137190
f0112fac:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fb2:	50                   	push   %eax
f0112fb3:	e8 28 c0 01 00       	call   f012efe0 <strcconcat>
f0112fb8:	83 c4 10             	add    $0x10,%esp
f0112fbb:	83 ec 0c             	sub    $0xc,%esp
f0112fbe:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112fc4:	50                   	push   %eax
f0112fc5:	e8 f9 eb fe ff       	call   f0101bc3 <execute_command>
f0112fca:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112fcd:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112fd3:	bb 09 77 13 f0       	mov    $0xf0137709,%ebx
f0112fd8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fdd:	89 c7                	mov    %eax,%edi
f0112fdf:	89 de                	mov    %ebx,%esi
f0112fe1:	89 d1                	mov    %edx,%ecx
f0112fe3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fe5:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112feb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ff0:	b0 00                	mov    $0x0,%al
f0112ff2:	89 d7                	mov    %edx,%edi
f0112ff4:	f3 aa                	rep stos %al,%es:(%edi)
f0112ff6:	83 ec 0c             	sub    $0xc,%esp
f0112ff9:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112fff:	50                   	push   %eax
f0113000:	e8 be eb fe ff       	call   f0101bc3 <execute_command>
f0113005:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113008:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011300e:	bb 6d 77 13 f0       	mov    $0xf013776d,%ebx
f0113013:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113018:	89 c7                	mov    %eax,%edi
f011301a:	89 de                	mov    %ebx,%esi
f011301c:	89 d1                	mov    %edx,%ecx
f011301e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113020:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113026:	b9 55 00 00 00       	mov    $0x55,%ecx
f011302b:	b0 00                	mov    $0x0,%al
f011302d:	89 d7                	mov    %edx,%edi
f011302f:	f3 aa                	rep stos %al,%es:(%edi)
f0113031:	83 ec 0c             	sub    $0xc,%esp
f0113034:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011303a:	50                   	push   %eax
f011303b:	e8 83 eb fe ff       	call   f0101bc3 <execute_command>
f0113040:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113043:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113049:	bb d1 77 13 f0       	mov    $0xf01377d1,%ebx
f011304e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113053:	89 c7                	mov    %eax,%edi
f0113055:	89 de                	mov    %ebx,%esi
f0113057:	89 d1                	mov    %edx,%ecx
f0113059:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011305b:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113061:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113066:	b0 00                	mov    $0x0,%al
f0113068:	89 d7                	mov    %edx,%edi
f011306a:	f3 aa                	rep stos %al,%es:(%edi)
f011306c:	83 ec 0c             	sub    $0xc,%esp
f011306f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113075:	50                   	push   %eax
f0113076:	e8 48 eb fe ff       	call   f0101bc3 <execute_command>
f011307b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011307e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113084:	bb 35 78 13 f0       	mov    $0xf0137835,%ebx
f0113089:	ba 0f 00 00 00       	mov    $0xf,%edx
f011308e:	89 c7                	mov    %eax,%edi
f0113090:	89 de                	mov    %ebx,%esi
f0113092:	89 d1                	mov    %edx,%ecx
f0113094:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113096:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011309c:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130a1:	b0 00                	mov    $0x0,%al
f01130a3:	89 d7                	mov    %edx,%edi
f01130a5:	f3 aa                	rep stos %al,%es:(%edi)
f01130a7:	83 ec 0c             	sub    $0xc,%esp
f01130aa:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01130b0:	50                   	push   %eax
f01130b1:	e8 0d eb fe ff       	call   f0101bc3 <execute_command>
f01130b6:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01130b9:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01130bf:	bb 99 78 13 f0       	mov    $0xf0137899,%ebx
f01130c4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130c9:	89 c7                	mov    %eax,%edi
f01130cb:	89 de                	mov    %ebx,%esi
f01130cd:	89 d1                	mov    %edx,%ecx
f01130cf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130d1:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01130d7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130dc:	b0 00                	mov    $0x0,%al
f01130de:	89 d7                	mov    %edx,%edi
f01130e0:	f3 aa                	rep stos %al,%es:(%edi)
f01130e2:	83 ec 0c             	sub    $0xc,%esp
f01130e5:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01130eb:	50                   	push   %eax
f01130ec:	e8 d2 ea fe ff       	call   f0101bc3 <execute_command>
f01130f1:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01130f4:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01130fa:	bb fd 78 13 f0       	mov    $0xf01378fd,%ebx
f01130ff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113104:	89 c7                	mov    %eax,%edi
f0113106:	89 de                	mov    %ebx,%esi
f0113108:	89 d1                	mov    %edx,%ecx
f011310a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011310c:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113112:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113117:	b0 00                	mov    $0x0,%al
f0113119:	89 d7                	mov    %edx,%edi
f011311b:	f3 aa                	rep stos %al,%es:(%edi)
f011311d:	83 ec 0c             	sub    $0xc,%esp
f0113120:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113126:	50                   	push   %eax
f0113127:	e8 97 ea fe ff       	call   f0101bc3 <execute_command>
f011312c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011312f:	83 ec 04             	sub    $0x4,%esp
f0113132:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113138:	50                   	push   %eax
f0113139:	68 9a 71 13 f0       	push   $0xf013719a
f011313e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113144:	50                   	push   %eax
f0113145:	e8 96 be 01 00       	call   f012efe0 <strcconcat>
f011314a:	83 c4 10             	add    $0x10,%esp
f011314d:	83 ec 0c             	sub    $0xc,%esp
f0113150:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113156:	50                   	push   %eax
f0113157:	e8 67 ea fe ff       	call   f0101bc3 <execute_command>
f011315c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011315f:	83 ec 04             	sub    $0x4,%esp
f0113162:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113168:	50                   	push   %eax
f0113169:	68 a4 71 13 f0       	push   $0xf01371a4
f011316e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113174:	50                   	push   %eax
f0113175:	e8 66 be 01 00       	call   f012efe0 <strcconcat>
f011317a:	83 c4 10             	add    $0x10,%esp
f011317d:	83 ec 0c             	sub    $0xc,%esp
f0113180:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113186:	50                   	push   %eax
f0113187:	e8 37 ea fe ff       	call   f0101bc3 <execute_command>
f011318c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011318f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113195:	bb 61 79 13 f0       	mov    $0xf0137961,%ebx
f011319a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011319f:	89 c7                	mov    %eax,%edi
f01131a1:	89 de                	mov    %ebx,%esi
f01131a3:	89 d1                	mov    %edx,%ecx
f01131a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131a7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01131ad:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131b2:	b0 00                	mov    $0x0,%al
f01131b4:	89 d7                	mov    %edx,%edi
f01131b6:	f3 aa                	rep stos %al,%es:(%edi)
f01131b8:	83 ec 0c             	sub    $0xc,%esp
f01131bb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01131c1:	50                   	push   %eax
f01131c2:	e8 fc e9 fe ff       	call   f0101bc3 <execute_command>
f01131c7:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01131ca:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01131d0:	bb c5 79 13 f0       	mov    $0xf01379c5,%ebx
f01131d5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131da:	89 c7                	mov    %eax,%edi
f01131dc:	89 de                	mov    %ebx,%esi
f01131de:	89 d1                	mov    %edx,%ecx
f01131e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131e2:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01131e8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131ed:	b0 00                	mov    $0x0,%al
f01131ef:	89 d7                	mov    %edx,%edi
f01131f1:	f3 aa                	rep stos %al,%es:(%edi)
f01131f3:	83 ec 0c             	sub    $0xc,%esp
f01131f6:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01131fc:	50                   	push   %eax
f01131fd:	e8 c1 e9 fe ff       	call   f0101bc3 <execute_command>
f0113202:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113205:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011320b:	bb 29 7a 13 f0       	mov    $0xf0137a29,%ebx
f0113210:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113215:	89 c7                	mov    %eax,%edi
f0113217:	89 de                	mov    %ebx,%esi
f0113219:	89 d1                	mov    %edx,%ecx
f011321b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011321d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113223:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113228:	b0 00                	mov    $0x0,%al
f011322a:	89 d7                	mov    %edx,%edi
f011322c:	f3 aa                	rep stos %al,%es:(%edi)
f011322e:	83 ec 0c             	sub    $0xc,%esp
f0113231:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113237:	50                   	push   %eax
f0113238:	e8 86 e9 fe ff       	call   f0101bc3 <execute_command>
f011323d:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113240:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113247:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011324e:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113255:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011325c:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113263:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011326a:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113271:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113278:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011327f:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113286:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011328d:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113294:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113297:	8a 00                	mov    (%eax),%al
f0113299:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011329f:	e8 6e 93 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01132a4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01132a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132aa:	89 d0                	mov    %edx,%eax
f01132ac:	01 c0                	add    %eax,%eax
f01132ae:	01 d0                	add    %edx,%eax
f01132b0:	01 c0                	add    %eax,%eax
f01132b2:	50                   	push   %eax
f01132b3:	68 00 00 40 00       	push   $0x400000
f01132b8:	68 00 00 20 00       	push   $0x200000
f01132bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01132c0:	e8 16 55 ff ff       	call   f01087db <copy_paste_chunk>
f01132c5:	83 c4 10             	add    $0x10,%esp
f01132c8:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01132cb:	e8 42 93 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01132d0:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01132d3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01132da:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01132de:	75 08                	jne    f01132e8 <test_copy_paste_chunk+0x92f>
f01132e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01132e3:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01132e6:	74 2b                	je     f0113313 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01132e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01132eb:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01132ee:	83 ec 0c             	sub    $0xc,%esp
f01132f1:	50                   	push   %eax
f01132f2:	ff 75 80             	pushl  -0x80(%ebp)
f01132f5:	68 b0 71 13 f0       	push   $0xf01371b0
f01132fa:	68 75 02 00 00       	push   $0x275
f01132ff:	68 0e 69 13 f0       	push   $0xf013690e
f0113304:	e8 b5 d0 fe ff       	call   f01003be <_warn>
f0113309:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011330c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113313:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113317:	74 04                	je     f011331d <test_copy_paste_chunk+0x964>
f0113319:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011331d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113324:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f011332b:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011332e:	83 ec 08             	sub    $0x8,%esp
f0113331:	6a 01                	push   $0x1
f0113333:	6a 07                	push   $0x7
f0113335:	6a 07                	push   $0x7
f0113337:	6a 07                	push   $0x7
f0113339:	6a 07                	push   $0x7
f011333b:	6a 01                	push   $0x1
f011333d:	68 00 20 00 00       	push   $0x2000
f0113342:	68 00 00 40 00       	push   $0x400000
f0113347:	68 00 00 20 00       	push   $0x200000
f011334c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011334f:	e8 22 36 00 00       	call   f0116976 <CCP>
f0113354:	83 c4 30             	add    $0x30,%esp
f0113357:	83 f8 01             	cmp    $0x1,%eax
f011335a:	74 2b                	je     f0113387 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011335c:	83 ec 04             	sub    $0x4,%esp
f011335f:	68 04 72 13 f0       	push   $0xf0137204
f0113364:	68 7e 02 00 00       	push   $0x27e
f0113369:	68 0e 69 13 f0       	push   $0xf013690e
f011336e:	e8 4b d0 fe ff       	call   f01003be <_warn>
f0113373:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113376:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011337d:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113384:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113387:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011338b:	74 04                	je     f0113391 <test_copy_paste_chunk+0x9d8>
f011338d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113391:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113398:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011339b:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011339e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133a1:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01133a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133a7:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01133aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133ad:	8a 00                	mov    (%eax),%al
f01133af:	3c 61                	cmp    $0x61,%al
f01133b1:	75 69                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01133b6:	8a 00                	mov    (%eax),%al
f01133b8:	3c 61                	cmp    $0x61,%al
f01133ba:	75 60                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133bf:	8a 00                	mov    (%eax),%al
f01133c1:	3c 79                	cmp    $0x79,%al
f01133c3:	75 57                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133c5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01133c8:	8a 00                	mov    (%eax),%al
f01133ca:	3c 62                	cmp    $0x62,%al
f01133cc:	75 4e                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133ce:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01133d1:	8a 00                	mov    (%eax),%al
f01133d3:	3c 63                	cmp    $0x63,%al
f01133d5:	75 45                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133da:	8a 00                	mov    (%eax),%al
f01133dc:	3c 7a                	cmp    $0x7a,%al
f01133de:	75 3c                	jne    f011341c <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01133e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133e3:	8a 00                	mov    (%eax),%al
f01133e5:	3c 77                	cmp    $0x77,%al
f01133e7:	75 33                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01133ec:	8a 00                	mov    (%eax),%al
f01133ee:	3c 64                	cmp    $0x64,%al
f01133f0:	75 2a                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133f2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01133f5:	8a 00                	mov    (%eax),%al
f01133f7:	3c 65                	cmp    $0x65,%al
f01133f9:	75 21                	jne    f011341c <test_copy_paste_chunk+0xa63>
f01133fb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01133fe:	8a 00                	mov    (%eax),%al
f0113400:	3c 65                	cmp    $0x65,%al
f0113402:	75 18                	jne    f011341c <test_copy_paste_chunk+0xa63>
f0113404:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113407:	8a 00                	mov    (%eax),%al
f0113409:	3c 66                	cmp    $0x66,%al
f011340b:	75 0f                	jne    f011341c <test_copy_paste_chunk+0xa63>
f011340d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113410:	8a 10                	mov    (%eax),%dl
f0113412:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113418:	38 c2                	cmp    %al,%dl
f011341a:	74 21                	je     f011343d <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011341c:	83 ec 04             	sub    $0x4,%esp
f011341f:	68 04 71 13 f0       	push   $0xf0137104
f0113424:	68 8c 02 00 00       	push   $0x28c
f0113429:	68 0e 69 13 f0       	push   $0xf013690e
f011342e:	e8 8b cf fe ff       	call   f01003be <_warn>
f0113433:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113436:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011343d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113441:	74 04                	je     f0113447 <test_copy_paste_chunk+0xa8e>
f0113443:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113447:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011344e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113451:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113454:	e8 b9 91 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113459:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011345c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011345f:	89 c2                	mov    %eax,%edx
f0113461:	01 d2                	add    %edx,%edx
f0113463:	01 d0                	add    %edx,%eax
f0113465:	50                   	push   %eax
f0113466:	68 00 08 20 00       	push   $0x200800
f011346b:	68 00 08 40 00       	push   $0x400800
f0113470:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113473:	e8 63 53 ff ff       	call   f01087db <copy_paste_chunk>
f0113478:	83 c4 10             	add    $0x10,%esp
f011347b:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011347e:	e8 8f 91 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113483:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113486:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011348a:	75 08                	jne    f0113494 <test_copy_paste_chunk+0xadb>
f011348c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011348f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113492:	74 2b                	je     f01134bf <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113494:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113497:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011349a:	83 ec 0c             	sub    $0xc,%esp
f011349d:	50                   	push   %eax
f011349e:	ff 75 80             	pushl  -0x80(%ebp)
f01134a1:	68 b0 71 13 f0       	push   $0xf01371b0
f01134a6:	68 9c 02 00 00       	push   $0x29c
f01134ab:	68 0e 69 13 f0       	push   $0xf013690e
f01134b0:	e8 09 cf fe ff       	call   f01003be <_warn>
f01134b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01134b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01134bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134c3:	74 04                	je     f01134c9 <test_copy_paste_chunk+0xb10>
f01134c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01134c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01134d0:	83 ec 08             	sub    $0x8,%esp
f01134d3:	6a 01                	push   $0x1
f01134d5:	6a 07                	push   $0x7
f01134d7:	6a 07                	push   $0x7
f01134d9:	6a 07                	push   $0x7
f01134db:	6a 07                	push   $0x7
f01134dd:	6a 01                	push   $0x1
f01134df:	68 00 20 00 00       	push   $0x2000
f01134e4:	68 00 00 20 00       	push   $0x200000
f01134e9:	68 00 00 40 00       	push   $0x400000
f01134ee:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134f1:	e8 80 34 00 00       	call   f0116976 <CCP>
f01134f6:	83 c4 30             	add    $0x30,%esp
f01134f9:	83 f8 01             	cmp    $0x1,%eax
f01134fc:	74 21                	je     f011351f <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01134fe:	83 ec 04             	sub    $0x4,%esp
f0113501:	68 50 72 13 f0       	push   $0xf0137250
f0113506:	68 a4 02 00 00       	push   $0x2a4
f011350b:	68 0e 69 13 f0       	push   $0xf013690e
f0113510:	e8 a9 ce fe ff       	call   f01003be <_warn>
f0113515:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113518:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011351f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113523:	74 04                	je     f0113529 <test_copy_paste_chunk+0xb70>
f0113525:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113529:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113530:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113533:	8a 00                	mov    (%eax),%al
f0113535:	3c 61                	cmp    $0x61,%al
f0113537:	75 69                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113539:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011353c:	8a 00                	mov    (%eax),%al
f011353e:	3c 61                	cmp    $0x61,%al
f0113540:	75 60                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113542:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113545:	8a 00                	mov    (%eax),%al
f0113547:	3c 79                	cmp    $0x79,%al
f0113549:	75 57                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f011354b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011354e:	8a 00                	mov    (%eax),%al
f0113550:	3c 62                	cmp    $0x62,%al
f0113552:	75 4e                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113554:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113557:	8a 00                	mov    (%eax),%al
f0113559:	3c 7a                	cmp    $0x7a,%al
f011355b:	75 45                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f011355d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113560:	8a 00                	mov    (%eax),%al
f0113562:	3c 7a                	cmp    $0x7a,%al
f0113564:	75 3c                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113566:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113569:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011356b:	3c 64                	cmp    $0x64,%al
f011356d:	75 33                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011356f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113572:	8a 00                	mov    (%eax),%al
f0113574:	3c 64                	cmp    $0x64,%al
f0113576:	75 2a                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113578:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011357b:	8a 00                	mov    (%eax),%al
f011357d:	3c 65                	cmp    $0x65,%al
f011357f:	75 21                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113581:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113584:	8a 00                	mov    (%eax),%al
f0113586:	3c 78                	cmp    $0x78,%al
f0113588:	75 18                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f011358a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011358d:	8a 00                	mov    (%eax),%al
f011358f:	3c 66                	cmp    $0x66,%al
f0113591:	75 0f                	jne    f01135a2 <test_copy_paste_chunk+0xbe9>
f0113593:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113596:	8a 10                	mov    (%eax),%dl
f0113598:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011359e:	38 c2                	cmp    %al,%dl
f01135a0:	74 21                	je     f01135c3 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01135a2:	83 ec 04             	sub    $0x4,%esp
f01135a5:	68 04 71 13 f0       	push   $0xf0137104
f01135aa:	68 ad 02 00 00       	push   $0x2ad
f01135af:	68 0e 69 13 f0       	push   $0xf013690e
f01135b4:	e8 05 ce fe ff       	call   f01003be <_warn>
f01135b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01135c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01135c7:	74 04                	je     f01135cd <test_copy_paste_chunk+0xc14>
f01135c9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01135cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01135d4:	83 ec 0c             	sub    $0xc,%esp
f01135d7:	68 9b 72 13 f0       	push   $0xf013729b
f01135dc:	e8 50 d8 fe ff       	call   f0100e31 <cprintf>
f01135e1:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01135e4:	83 ec 0c             	sub    $0xc,%esp
f01135e7:	68 ac 72 13 f0       	push   $0xf01372ac
f01135ec:	e8 40 d8 fe ff       	call   f0100e31 <cprintf>
f01135f1:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01135f4:	83 ec 04             	sub    $0x4,%esp
f01135f7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01135fd:	50                   	push   %eax
f01135fe:	68 e0 72 13 f0       	push   $0xf01372e0
f0113603:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113609:	50                   	push   %eax
f011360a:	e8 d1 b9 01 00       	call   f012efe0 <strcconcat>
f011360f:	83 c4 10             	add    $0x10,%esp
f0113612:	83 ec 0c             	sub    $0xc,%esp
f0113615:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011361b:	50                   	push   %eax
f011361c:	e8 a2 e5 fe ff       	call   f0101bc3 <execute_command>
f0113621:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113624:	83 ec 04             	sub    $0x4,%esp
f0113627:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011362d:	50                   	push   %eax
f011362e:	68 ea 72 13 f0       	push   $0xf01372ea
f0113633:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113639:	50                   	push   %eax
f011363a:	e8 a1 b9 01 00       	call   f012efe0 <strcconcat>
f011363f:	83 c4 10             	add    $0x10,%esp
f0113642:	83 ec 0c             	sub    $0xc,%esp
f0113645:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011364b:	50                   	push   %eax
f011364c:	e8 72 e5 fe ff       	call   f0101bc3 <execute_command>
f0113651:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113654:	83 ec 04             	sub    $0x4,%esp
f0113657:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011365d:	50                   	push   %eax
f011365e:	68 f4 72 13 f0       	push   $0xf01372f4
f0113663:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113669:	50                   	push   %eax
f011366a:	e8 71 b9 01 00       	call   f012efe0 <strcconcat>
f011366f:	83 c4 10             	add    $0x10,%esp
f0113672:	83 ec 0c             	sub    $0xc,%esp
f0113675:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011367b:	50                   	push   %eax
f011367c:	e8 42 e5 fe ff       	call   f0101bc3 <execute_command>
f0113681:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113684:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011368a:	bb 8d 7a 13 f0       	mov    $0xf0137a8d,%ebx
f011368f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113694:	89 c7                	mov    %eax,%edi
f0113696:	89 de                	mov    %ebx,%esi
f0113698:	89 d1                	mov    %edx,%ecx
f011369a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011369c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01136a2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136a7:	b0 00                	mov    $0x0,%al
f01136a9:	89 d7                	mov    %edx,%edi
f01136ab:	f3 aa                	rep stos %al,%es:(%edi)
f01136ad:	83 ec 0c             	sub    $0xc,%esp
f01136b0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01136b6:	50                   	push   %eax
f01136b7:	e8 07 e5 fe ff       	call   f0101bc3 <execute_command>
f01136bc:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01136bf:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01136c5:	bb f1 7a 13 f0       	mov    $0xf0137af1,%ebx
f01136ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136cf:	89 c7                	mov    %eax,%edi
f01136d1:	89 de                	mov    %ebx,%esi
f01136d3:	89 d1                	mov    %edx,%ecx
f01136d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136d7:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01136dd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136e2:	b0 00                	mov    $0x0,%al
f01136e4:	89 d7                	mov    %edx,%edi
f01136e6:	f3 aa                	rep stos %al,%es:(%edi)
f01136e8:	83 ec 0c             	sub    $0xc,%esp
f01136eb:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01136f1:	50                   	push   %eax
f01136f2:	e8 cc e4 fe ff       	call   f0101bc3 <execute_command>
f01136f7:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01136fa:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113700:	bb 55 7b 13 f0       	mov    $0xf0137b55,%ebx
f0113705:	ba 0f 00 00 00       	mov    $0xf,%edx
f011370a:	89 c7                	mov    %eax,%edi
f011370c:	89 de                	mov    %ebx,%esi
f011370e:	89 d1                	mov    %edx,%ecx
f0113710:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113712:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113718:	b9 55 00 00 00       	mov    $0x55,%ecx
f011371d:	b0 00                	mov    $0x0,%al
f011371f:	89 d7                	mov    %edx,%edi
f0113721:	f3 aa                	rep stos %al,%es:(%edi)
f0113723:	83 ec 0c             	sub    $0xc,%esp
f0113726:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011372c:	50                   	push   %eax
f011372d:	e8 91 e4 fe ff       	call   f0101bc3 <execute_command>
f0113732:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113735:	e8 d8 8e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011373a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011373d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113740:	89 d0                	mov    %edx,%eax
f0113742:	01 c0                	add    %eax,%eax
f0113744:	01 d0                	add    %edx,%eax
f0113746:	c1 e0 02             	shl    $0x2,%eax
f0113749:	50                   	push   %eax
f011374a:	68 00 00 90 00       	push   $0x900000
f011374f:	68 00 00 80 00       	push   $0x800000
f0113754:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113757:	e8 7f 50 ff ff       	call   f01087db <copy_paste_chunk>
f011375c:	83 c4 10             	add    $0x10,%esp
f011375f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113765:	e8 a8 8e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011376a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011376d:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113774:	75 0b                	jne    f0113781 <test_copy_paste_chunk+0xdc8>
f0113776:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113779:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011377c:	83 f8 03             	cmp    $0x3,%eax
f011377f:	74 2e                	je     f01137af <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113781:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113784:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113787:	83 ec 0c             	sub    $0xc,%esp
f011378a:	50                   	push   %eax
f011378b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113791:	68 b0 71 13 f0       	push   $0xf01371b0
f0113796:	68 cb 02 00 00       	push   $0x2cb
f011379b:	68 0e 69 13 f0       	push   $0xf013690e
f01137a0:	e8 19 cc fe ff       	call   f01003be <_warn>
f01137a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137a8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01137af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137b3:	74 04                	je     f01137b9 <test_copy_paste_chunk+0xe00>
f01137b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137b9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01137c0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01137c7:	83 ec 08             	sub    $0x8,%esp
f01137ca:	6a 01                	push   $0x1
f01137cc:	6a 07                	push   $0x7
f01137ce:	6a 07                	push   $0x7
f01137d0:	6a 07                	push   $0x7
f01137d2:	6a 07                	push   $0x7
f01137d4:	6a 01                	push   $0x1
f01137d6:	68 00 30 00 00       	push   $0x3000
f01137db:	68 00 00 90 00       	push   $0x900000
f01137e0:	68 00 00 80 00       	push   $0x800000
f01137e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137e8:	e8 89 31 00 00       	call   f0116976 <CCP>
f01137ed:	83 c4 30             	add    $0x30,%esp
f01137f0:	83 f8 01             	cmp    $0x1,%eax
f01137f3:	74 28                	je     f011381d <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01137f5:	83 ec 04             	sub    $0x4,%esp
f01137f8:	68 50 72 13 f0       	push   $0xf0137250
f01137fd:	68 d4 02 00 00       	push   $0x2d4
f0113802:	68 0e 69 13 f0       	push   $0xf013690e
f0113807:	e8 b2 cb fe ff       	call   f01003be <_warn>
f011380c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011380f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113816:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f011381d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113821:	74 04                	je     f0113827 <test_copy_paste_chunk+0xe6e>
f0113823:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113827:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011382e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113832:	0f 84 9e 00 00 00    	je     f01138d6 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113838:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011383f:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113846:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011384d:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113854:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011385b:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113862:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113865:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113868:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011386b:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011386e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113871:	8a 00                	mov    (%eax),%al
f0113873:	3c 61                	cmp    $0x61,%al
f0113875:	75 2d                	jne    f01138a4 <test_copy_paste_chunk+0xeeb>
f0113877:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011387a:	8a 00                	mov    (%eax),%al
f011387c:	3c 61                	cmp    $0x61,%al
f011387e:	75 24                	jne    f01138a4 <test_copy_paste_chunk+0xeeb>
f0113880:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113883:	8a 00                	mov    (%eax),%al
f0113885:	3c 79                	cmp    $0x79,%al
f0113887:	75 1b                	jne    f01138a4 <test_copy_paste_chunk+0xeeb>
f0113889:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011388c:	8a 00                	mov    (%eax),%al
f011388e:	3c 62                	cmp    $0x62,%al
f0113890:	75 12                	jne    f01138a4 <test_copy_paste_chunk+0xeeb>
f0113892:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113895:	8a 00                	mov    (%eax),%al
f0113897:	3c 63                	cmp    $0x63,%al
f0113899:	75 09                	jne    f01138a4 <test_copy_paste_chunk+0xeeb>
f011389b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011389e:	8a 00                	mov    (%eax),%al
f01138a0:	3c 7a                	cmp    $0x7a,%al
f01138a2:	74 21                	je     f01138c5 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01138a4:	83 ec 04             	sub    $0x4,%esp
f01138a7:	68 04 71 13 f0       	push   $0xf0137104
f01138ac:	68 e6 02 00 00       	push   $0x2e6
f01138b1:	68 0e 69 13 f0       	push   $0xf013690e
f01138b6:	e8 03 cb fe ff       	call   f01003be <_warn>
f01138bb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01138be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01138c5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138c9:	74 04                	je     f01138cf <test_copy_paste_chunk+0xf16>
f01138cb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01138cf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01138d6:	e8 37 8d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01138db:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01138de:	6a 00                	push   $0x0
f01138e0:	6a 02                	push   $0x2
f01138e2:	68 00 10 90 00       	push   $0x901000
f01138e7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138ea:	e8 c9 2b 00 00       	call   f01164b8 <SB>
f01138ef:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01138f2:	6a 00                	push   $0x0
f01138f4:	6a 02                	push   $0x2
f01138f6:	68 00 20 90 00       	push   $0x902000
f01138fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138fe:	e8 b5 2b 00 00       	call   f01164b8 <SB>
f0113903:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113906:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113909:	c1 e0 03             	shl    $0x3,%eax
f011390c:	50                   	push   %eax
f011390d:	68 00 f0 bf 00       	push   $0xbff000
f0113912:	68 00 10 90 00       	push   $0x901000
f0113917:	ff 75 d4             	pushl  -0x2c(%ebp)
f011391a:	e8 bc 4e ff ff       	call   f01087db <copy_paste_chunk>
f011391f:	83 c4 10             	add    $0x10,%esp
f0113922:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113928:	e8 e5 8c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011392d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113930:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113937:	75 0b                	jne    f0113944 <test_copy_paste_chunk+0xf8b>
f0113939:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011393c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011393f:	83 f8 03             	cmp    $0x3,%eax
f0113942:	74 2e                	je     f0113972 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113944:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113947:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011394a:	83 ec 0c             	sub    $0xc,%esp
f011394d:	50                   	push   %eax
f011394e:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113954:	68 b0 71 13 f0       	push   $0xf01371b0
f0113959:	68 f6 02 00 00       	push   $0x2f6
f011395e:	68 0e 69 13 f0       	push   $0xf013690e
f0113963:	e8 56 ca fe ff       	call   f01003be <_warn>
f0113968:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011396b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113972:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113976:	74 04                	je     f011397c <test_copy_paste_chunk+0xfc3>
f0113978:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011397c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113983:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f011398a:	83 ec 08             	sub    $0x8,%esp
f011398d:	6a 01                	push   $0x1
f011398f:	6a 07                	push   $0x7
f0113991:	6a 03                	push   $0x3
f0113993:	6a 07                	push   $0x7
f0113995:	6a 03                	push   $0x3
f0113997:	6a 01                	push   $0x1
f0113999:	68 00 20 00 00       	push   $0x2000
f011399e:	68 00 f0 bf 00       	push   $0xbff000
f01139a3:	68 00 10 90 00       	push   $0x901000
f01139a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01139ab:	e8 c6 2f 00 00       	call   f0116976 <CCP>
f01139b0:	83 c4 30             	add    $0x30,%esp
f01139b3:	83 f8 01             	cmp    $0x1,%eax
f01139b6:	74 28                	je     f01139e0 <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01139b8:	83 ec 04             	sub    $0x4,%esp
f01139bb:	68 50 72 13 f0       	push   $0xf0137250
f01139c0:	68 ff 02 00 00       	push   $0x2ff
f01139c5:	68 0e 69 13 f0       	push   $0xf013690e
f01139ca:	e8 ef c9 fe ff       	call   f01003be <_warn>
f01139cf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01139d9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01139e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139e4:	74 04                	je     f01139ea <test_copy_paste_chunk+0x1031>
f01139e6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01139ea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01139f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01139f5:	74 72                	je     f0113a69 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01139f7:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01139fe:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113a05:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113a0c:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113a13:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a16:	8a 00                	mov    (%eax),%al
f0113a18:	3c 62                	cmp    $0x62,%al
f0113a1a:	75 1b                	jne    f0113a37 <test_copy_paste_chunk+0x107e>
f0113a1c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a1f:	8a 00                	mov    (%eax),%al
f0113a21:	3c 62                	cmp    $0x62,%al
f0113a23:	75 12                	jne    f0113a37 <test_copy_paste_chunk+0x107e>
f0113a25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a28:	8a 00                	mov    (%eax),%al
f0113a2a:	3c 7a                	cmp    $0x7a,%al
f0113a2c:	75 09                	jne    f0113a37 <test_copy_paste_chunk+0x107e>
f0113a2e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113a31:	8a 00                	mov    (%eax),%al
f0113a33:	3c 7a                	cmp    $0x7a,%al
f0113a35:	74 21                	je     f0113a58 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113a37:	83 ec 04             	sub    $0x4,%esp
f0113a3a:	68 04 71 13 f0       	push   $0xf0137104
f0113a3f:	68 0b 03 00 00       	push   $0x30b
f0113a44:	68 0e 69 13 f0       	push   $0xf013690e
f0113a49:	e8 70 c9 fe ff       	call   f01003be <_warn>
f0113a4e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113a51:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113a58:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a5c:	74 04                	je     f0113a62 <test_copy_paste_chunk+0x10a9>
f0113a5e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113a62:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113a69:	83 ec 0c             	sub    $0xc,%esp
f0113a6c:	68 fe 72 13 f0       	push   $0xf01372fe
f0113a71:	e8 bb d3 fe ff       	call   f0100e31 <cprintf>
f0113a76:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113a79:	83 ec 08             	sub    $0x8,%esp
f0113a7c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113a7f:	68 10 73 13 f0       	push   $0xf0137310
f0113a84:	e8 a8 d3 fe ff       	call   f0100e31 <cprintf>
f0113a89:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113a8c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113a90:	75 10                	jne    f0113aa2 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113a92:	83 ec 0c             	sub    $0xc,%esp
f0113a95:	68 44 73 13 f0       	push   $0xf0137344
f0113a9a:	e8 92 d3 fe ff       	call   f0100e31 <cprintf>
f0113a9f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113aa2:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0113aa7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113aaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113aad:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113ab0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113ab5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113ab8:	5b                   	pop    %ebx
f0113ab9:	5e                   	pop    %esi
f0113aba:	5f                   	pop    %edi
f0113abb:	5d                   	pop    %ebp
f0113abc:	c3                   	ret    

f0113abd <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113abd:	55                   	push   %ebp
f0113abe:	89 e5                	mov    %esp,%ebp
f0113ac0:	57                   	push   %edi
f0113ac1:	56                   	push   %esi
f0113ac2:	53                   	push   %ebx
f0113ac3:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113ac9:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113acf:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f0113ad4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ad9:	89 c7                	mov    %eax,%edi
f0113adb:	89 de                	mov    %ebx,%esi
f0113add:	89 d1                	mov    %edx,%ecx
f0113adf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ae1:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113ae7:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113aec:	b0 00                	mov    $0x0,%al
f0113aee:	89 d7                	mov    %edx,%edi
f0113af0:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113af2:	6a 00                	push   $0x0
f0113af4:	6a 0a                	push   $0xa
f0113af6:	6a 14                	push   $0x14
f0113af8:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113afe:	50                   	push   %eax
f0113aff:	e8 fb 4d ff ff       	call   f01088ff <env_create>
f0113b04:	83 c4 10             	add    $0x10,%esp
f0113b07:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113b0a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b0d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113b13:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113b16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b19:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113b1f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113b22:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113b25:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113b28:	83 ec 0c             	sub    $0xc,%esp
f0113b2b:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b2e:	e8 0f 2e 00 00       	call   f0116942 <ClearUserSpace>
f0113b33:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113b36:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113b3d:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113b44:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113b4b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113b4f:	83 ec 0c             	sub    $0xc,%esp
f0113b52:	68 bc 7b 13 f0       	push   $0xf0137bbc
f0113b57:	e8 d5 d2 fe ff       	call   f0100e31 <cprintf>
f0113b5c:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113b5f:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113b66:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113b6d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b70:	8a 00                	mov    (%eax),%al
f0113b72:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113b78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b7b:	8a 00                	mov    (%eax),%al
f0113b7d:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b83:	e8 8a 8a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113b88:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113b8b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b8e:	89 d0                	mov    %edx,%eax
f0113b90:	01 c0                	add    %eax,%eax
f0113b92:	01 d0                	add    %edx,%eax
f0113b94:	01 c0                	add    %eax,%eax
f0113b96:	83 ec 0c             	sub    $0xc,%esp
f0113b99:	6a 02                	push   $0x2
f0113b9b:	50                   	push   %eax
f0113b9c:	68 00 40 10 f0       	push   $0xf0104000
f0113ba1:	68 00 00 10 f0       	push   $0xf0100000
f0113ba6:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ba9:	e8 47 4c ff ff       	call   f01087f5 <share_chunk>
f0113bae:	83 c4 20             	add    $0x20,%esp
f0113bb1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113bb4:	e8 59 8a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113bb9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113bbc:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113bc0:	75 08                	jne    f0113bca <test_share_chunk+0x10d>
f0113bc2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bc5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113bc8:	74 28                	je     f0113bf2 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113bca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bcd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113bd0:	83 ec 0c             	sub    $0xc,%esp
f0113bd3:	50                   	push   %eax
f0113bd4:	ff 75 b0             	pushl  -0x50(%ebp)
f0113bd7:	68 e8 7b 13 f0       	push   $0xf0137be8
f0113bdc:	68 47 03 00 00       	push   $0x347
f0113be1:	68 0e 69 13 f0       	push   $0xf013690e
f0113be6:	e8 d3 c7 fe ff       	call   f01003be <_warn>
f0113beb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bf2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bf6:	74 04                	je     f0113bfc <test_share_chunk+0x13f>
f0113bf8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bfc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113c00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c03:	c1 e0 03             	shl    $0x3,%eax
f0113c06:	83 ec 08             	sub    $0x8,%esp
f0113c09:	68 fd 00 00 00       	push   $0xfd
f0113c0e:	6a 07                	push   $0x7
f0113c10:	6a 03                	push   $0x3
f0113c12:	6a 07                	push   $0x7
f0113c14:	6a 03                	push   $0x3
f0113c16:	6a 01                	push   $0x1
f0113c18:	50                   	push   %eax
f0113c19:	68 00 40 10 f0       	push   $0xf0104000
f0113c1e:	68 00 00 10 f0       	push   $0xf0100000
f0113c23:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c26:	e8 4b 2d 00 00       	call   f0116976 <CCP>
f0113c2b:	83 c4 30             	add    $0x30,%esp
f0113c2e:	85 c0                	test   %eax,%eax
f0113c30:	75 1e                	jne    f0113c50 <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c32:	83 ec 04             	sub    $0x4,%esp
f0113c35:	68 44 7c 13 f0       	push   $0xf0137c44
f0113c3a:	68 4f 03 00 00       	push   $0x34f
f0113c3f:	68 0e 69 13 f0       	push   $0xf013690e
f0113c44:	e8 75 c7 fe ff       	call   f01003be <_warn>
f0113c49:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c50:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c54:	74 04                	je     f0113c5a <test_share_chunk+0x19d>
f0113c56:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113c5a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c5d:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113c60:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c63:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113c66:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c69:	8a 00                	mov    (%eax),%al
f0113c6b:	3c 41                	cmp    $0x41,%al
f0113c6d:	75 09                	jne    f0113c78 <test_share_chunk+0x1bb>
f0113c6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c72:	8a 00                	mov    (%eax),%al
f0113c74:	3c 42                	cmp    $0x42,%al
f0113c76:	74 1e                	je     f0113c96 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113c78:	83 ec 04             	sub    $0x4,%esp
f0113c7b:	68 8c 7c 13 f0       	push   $0xf0137c8c
f0113c80:	68 59 03 00 00       	push   $0x359
f0113c85:	68 0e 69 13 f0       	push   $0xf013690e
f0113c8a:	e8 2f c7 fe ff       	call   f01003be <_warn>
f0113c8f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113c96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c9a:	74 04                	je     f0113ca0 <test_share_chunk+0x1e3>
f0113c9c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ca0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113ca4:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113caa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cad:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113caf:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113cb5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113cb8:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113cba:	83 ec 0c             	sub    $0xc,%esp
f0113cbd:	68 c1 7c 13 f0       	push   $0xf0137cc1
f0113cc2:	e8 6a d1 fe ff       	call   f0100e31 <cprintf>
f0113cc7:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113cca:	83 ec 0c             	sub    $0xc,%esp
f0113ccd:	68 d0 7c 13 f0       	push   $0xf0137cd0
f0113cd2:	e8 5a d1 fe ff       	call   f0100e31 <cprintf>
f0113cd7:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113cda:	e8 33 89 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113cdf:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113ce2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ce5:	c1 e0 05             	shl    $0x5,%eax
f0113ce8:	83 ec 0c             	sub    $0xc,%esp
f0113ceb:	68 02 0e 00 00       	push   $0xe02
f0113cf0:	50                   	push   %eax
f0113cf1:	68 00 00 00 40       	push   $0x40000000
f0113cf6:	68 00 00 00 f0       	push   $0xf0000000
f0113cfb:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cfe:	e8 f2 4a ff ff       	call   f01087f5 <share_chunk>
f0113d03:	83 c4 20             	add    $0x20,%esp
f0113d06:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d09:	e8 04 89 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113d0e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113d11:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113d15:	75 1f                	jne    f0113d36 <test_share_chunk+0x279>
f0113d17:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d1a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d1d:	89 c1                	mov    %eax,%ecx
f0113d1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d22:	c1 e0 05             	shl    $0x5,%eax
f0113d25:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113d28:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113d2f:	99                   	cltd   
f0113d30:	f7 fb                	idiv   %ebx
f0113d32:	39 c1                	cmp    %eax,%ecx
f0113d34:	74 28                	je     f0113d5e <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d39:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d3c:	83 ec 0c             	sub    $0xc,%esp
f0113d3f:	50                   	push   %eax
f0113d40:	ff 75 a8             	pushl  -0x58(%ebp)
f0113d43:	68 0c 7d 13 f0       	push   $0xf0137d0c
f0113d48:	68 71 03 00 00       	push   $0x371
f0113d4d:	68 0e 69 13 f0       	push   $0xf013690e
f0113d52:	e8 67 c6 fe ff       	call   f01003be <_warn>
f0113d57:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d5a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d5e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d62:	74 04                	je     f0113d68 <test_share_chunk+0x2ab>
f0113d64:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d68:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113d6c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113d73:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d76:	c1 e0 05             	shl    $0x5,%eax
f0113d79:	83 ec 08             	sub    $0x8,%esp
f0113d7c:	6a 02                	push   $0x2
f0113d7e:	6a 07                	push   $0x7
f0113d80:	6a 03                	push   $0x3
f0113d82:	68 07 0e 00 00       	push   $0xe07
f0113d87:	68 03 0e 00 00       	push   $0xe03
f0113d8c:	6a ff                	push   $0xffffffff
f0113d8e:	50                   	push   %eax
f0113d8f:	68 00 00 00 40       	push   $0x40000000
f0113d94:	68 00 00 00 f0       	push   $0xf0000000
f0113d99:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d9c:	e8 d5 2b 00 00       	call   f0116976 <CCP>
f0113da1:	83 c4 30             	add    $0x30,%esp
f0113da4:	85 c0                	test   %eax,%eax
f0113da6:	75 25                	jne    f0113dcd <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113da8:	83 ec 04             	sub    $0x4,%esp
f0113dab:	68 44 7c 13 f0       	push   $0xf0137c44
f0113db0:	68 7a 03 00 00       	push   $0x37a
f0113db5:	68 0e 69 13 f0       	push   $0xf013690e
f0113dba:	e8 ff c5 fe ff       	call   f01003be <_warn>
f0113dbf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113dc2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113dc6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113dcd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113dd0:	89 d0                	mov    %edx,%eax
f0113dd2:	01 c0                	add    %eax,%eax
f0113dd4:	01 d0                	add    %edx,%eax
f0113dd6:	c1 e0 02             	shl    $0x2,%eax
f0113dd9:	83 ec 08             	sub    $0x8,%esp
f0113ddc:	6a 02                	push   $0x2
f0113dde:	6a 07                	push   $0x7
f0113de0:	6a 03                	push   $0x3
f0113de2:	68 07 0e 00 00       	push   $0xe07
f0113de7:	68 03 0e 00 00       	push   $0xe03
f0113dec:	6a 02                	push   $0x2
f0113dee:	50                   	push   %eax
f0113def:	68 00 00 00 40       	push   $0x40000000
f0113df4:	68 00 00 00 f0       	push   $0xf0000000
f0113df9:	ff 75 cc             	pushl  -0x34(%ebp)
f0113dfc:	e8 75 2b 00 00       	call   f0116976 <CCP>
f0113e01:	83 c4 30             	add    $0x30,%esp
f0113e04:	85 c0                	test   %eax,%eax
f0113e06:	75 1e                	jne    f0113e26 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e08:	83 ec 04             	sub    $0x4,%esp
f0113e0b:	68 44 7c 13 f0       	push   $0xf0137c44
f0113e10:	68 81 03 00 00       	push   $0x381
f0113e15:	68 0e 69 13 f0       	push   $0xf013690e
f0113e1a:	e8 9f c5 fe ff       	call   f01003be <_warn>
f0113e1f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e2a:	74 04                	je     f0113e30 <test_share_chunk+0x373>
f0113e2c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113e34:	b8 2c e6 2d f0       	mov    $0xf02de62c,%eax
f0113e39:	05 00 00 00 10       	add    $0x10000000,%eax
f0113e3e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113e41:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113e44:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113e49:	83 ec 08             	sub    $0x8,%esp
f0113e4c:	6a 02                	push   $0x2
f0113e4e:	6a 07                	push   $0x7
f0113e50:	6a 03                	push   $0x3
f0113e52:	68 07 0e 00 00       	push   $0xe07
f0113e57:	68 03 0e 00 00       	push   $0xe03
f0113e5c:	6a 02                	push   $0x2
f0113e5e:	50                   	push   %eax
f0113e5f:	68 00 00 0a 40       	push   $0x400a0000
f0113e64:	68 00 00 0a f0       	push   $0xf00a0000
f0113e69:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e6c:	e8 05 2b 00 00       	call   f0116976 <CCP>
f0113e71:	83 c4 30             	add    $0x30,%esp
f0113e74:	85 c0                	test   %eax,%eax
f0113e76:	75 1e                	jne    f0113e96 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e78:	83 ec 04             	sub    $0x4,%esp
f0113e7b:	68 44 7c 13 f0       	push   $0xf0137c44
f0113e80:	68 8b 03 00 00       	push   $0x38b
f0113e85:	68 0e 69 13 f0       	push   $0xf013690e
f0113e8a:	e8 2f c5 fe ff       	call   f01003be <_warn>
f0113e8f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e9a:	74 04                	je     f0113ea0 <test_share_chunk+0x3e3>
f0113e9c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ea0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113ea4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113ea8:	0f 84 a4 00 00 00    	je     f0113f52 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113eae:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113eb5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113eb8:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113ebb:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113ec2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ec5:	8a 00                	mov    (%eax),%al
f0113ec7:	3c 41                	cmp    $0x41,%al
f0113ec9:	75 09                	jne    f0113ed4 <test_share_chunk+0x417>
f0113ecb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ece:	8a 00                	mov    (%eax),%al
f0113ed0:	3c 41                	cmp    $0x41,%al
f0113ed2:	74 1e                	je     f0113ef2 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113ed4:	83 ec 04             	sub    $0x4,%esp
f0113ed7:	68 8c 7c 13 f0       	push   $0xf0137c8c
f0113edc:	68 98 03 00 00       	push   $0x398
f0113ee1:	68 0e 69 13 f0       	push   $0xf013690e
f0113ee6:	e8 d3 c4 fe ff       	call   f01003be <_warn>
f0113eeb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113eee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113ef2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ef6:	74 04                	je     f0113efc <test_share_chunk+0x43f>
f0113ef8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113efc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113f00:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113f07:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f0a:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113f0d:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113f14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f17:	8a 00                	mov    (%eax),%al
f0113f19:	3c 43                	cmp    $0x43,%al
f0113f1b:	75 09                	jne    f0113f26 <test_share_chunk+0x469>
f0113f1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f20:	8a 00                	mov    (%eax),%al
f0113f22:	3c 43                	cmp    $0x43,%al
f0113f24:	74 1e                	je     f0113f44 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f26:	83 ec 04             	sub    $0x4,%esp
f0113f29:	68 8c 7c 13 f0       	push   $0xf0137c8c
f0113f2e:	68 a3 03 00 00       	push   $0x3a3
f0113f33:	68 0e 69 13 f0       	push   $0xf013690e
f0113f38:	e8 81 c4 fe ff       	call   f01003be <_warn>
f0113f3d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f40:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f44:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f48:	74 04                	je     f0113f4e <test_share_chunk+0x491>
f0113f4a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f4e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113f52:	83 ec 0c             	sub    $0xc,%esp
f0113f55:	68 9b 72 13 f0       	push   $0xf013729b
f0113f5a:	e8 d2 ce fe ff       	call   f0100e31 <cprintf>
f0113f5f:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113f62:	83 ec 0c             	sub    $0xc,%esp
f0113f65:	68 5c 7d 13 f0       	push   $0xf0137d5c
f0113f6a:	e8 c2 ce fe ff       	call   f0100e31 <cprintf>
f0113f6f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f72:	e8 9b 86 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113f77:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113f7a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f7d:	89 d0                	mov    %edx,%eax
f0113f7f:	c1 e0 03             	shl    $0x3,%eax
f0113f82:	01 d0                	add    %edx,%eax
f0113f84:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113f8b:	01 d0                	add    %edx,%eax
f0113f8d:	c1 e0 03             	shl    $0x3,%eax
f0113f90:	83 ec 0c             	sub    $0xc,%esp
f0113f93:	6a 06                	push   $0x6
f0113f95:	50                   	push   %eax
f0113f96:	6a 00                	push   $0x0
f0113f98:	68 00 00 00 40       	push   $0x40000000
f0113f9d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fa0:	e8 50 48 ff ff       	call   f01087f5 <share_chunk>
f0113fa5:	83 c4 20             	add    $0x20,%esp
f0113fa8:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113fab:	e8 62 86 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113fb0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113fb3:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113fb7:	75 0b                	jne    f0113fc4 <test_share_chunk+0x507>
f0113fb9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fbc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113fbf:	83 f8 01             	cmp    $0x1,%eax
f0113fc2:	74 28                	je     f0113fec <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113fc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fc7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113fca:	83 ec 0c             	sub    $0xc,%esp
f0113fcd:	50                   	push   %eax
f0113fce:	ff 75 a0             	pushl  -0x60(%ebp)
f0113fd1:	68 0c 7d 13 f0       	push   $0xf0137d0c
f0113fd6:	68 b9 03 00 00       	push   $0x3b9
f0113fdb:	68 0e 69 13 f0       	push   $0xf013690e
f0113fe0:	e8 d9 c3 fe ff       	call   f01003be <_warn>
f0113fe5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fe8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ff0:	74 04                	je     f0113ff6 <test_share_chunk+0x539>
f0113ff2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ff6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113ffa:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114001:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114004:	05 00 80 02 00       	add    $0x28000,%eax
f0114009:	c1 e0 02             	shl    $0x2,%eax
f011400c:	83 ec 08             	sub    $0x8,%esp
f011400f:	6a 02                	push   $0x2
f0114011:	6a 07                	push   $0x7
f0114013:	6a 03                	push   $0x3
f0114015:	6a 07                	push   $0x7
f0114017:	6a 07                	push   $0x7
f0114019:	6a ff                	push   $0xffffffff
f011401b:	50                   	push   %eax
f011401c:	6a 00                	push   $0x0
f011401e:	68 00 00 00 40       	push   $0x40000000
f0114023:	ff 75 cc             	pushl  -0x34(%ebp)
f0114026:	e8 4b 29 00 00       	call   f0116976 <CCP>
f011402b:	83 c4 30             	add    $0x30,%esp
f011402e:	85 c0                	test   %eax,%eax
f0114030:	75 25                	jne    f0114057 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114032:	83 ec 04             	sub    $0x4,%esp
f0114035:	68 44 7c 13 f0       	push   $0xf0137c44
f011403a:	68 c2 03 00 00       	push   $0x3c2
f011403f:	68 0e 69 13 f0       	push   $0xf013690e
f0114044:	e8 75 c3 fe ff       	call   f01003be <_warn>
f0114049:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011404c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114050:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114057:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011405a:	89 d0                	mov    %edx,%eax
f011405c:	01 c0                	add    %eax,%eax
f011405e:	01 d0                	add    %edx,%eax
f0114060:	c1 e0 02             	shl    $0x2,%eax
f0114063:	83 ec 08             	sub    $0x8,%esp
f0114066:	6a 02                	push   $0x2
f0114068:	6a 07                	push   $0x7
f011406a:	6a 03                	push   $0x3
f011406c:	6a 07                	push   $0x7
f011406e:	6a 07                	push   $0x7
f0114070:	6a 03                	push   $0x3
f0114072:	50                   	push   %eax
f0114073:	6a 00                	push   $0x0
f0114075:	68 00 00 00 40       	push   $0x40000000
f011407a:	ff 75 cc             	pushl  -0x34(%ebp)
f011407d:	e8 f4 28 00 00       	call   f0116976 <CCP>
f0114082:	83 c4 30             	add    $0x30,%esp
f0114085:	85 c0                	test   %eax,%eax
f0114087:	75 1e                	jne    f01140a7 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114089:	83 ec 04             	sub    $0x4,%esp
f011408c:	68 44 7c 13 f0       	push   $0xf0137c44
f0114091:	68 c9 03 00 00       	push   $0x3c9
f0114096:	68 0e 69 13 f0       	push   $0xf013690e
f011409b:	e8 1e c3 fe ff       	call   f01003be <_warn>
f01140a0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140ab:	74 04                	je     f01140b1 <test_share_chunk+0x5f4>
f01140ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01140b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140b8:	89 d0                	mov    %edx,%eax
f01140ba:	01 c0                	add    %eax,%eax
f01140bc:	01 d0                	add    %edx,%eax
f01140be:	c1 e0 02             	shl    $0x2,%eax
f01140c1:	f7 d8                	neg    %eax
f01140c3:	05 00 00 0a 00       	add    $0xa0000,%eax
f01140c8:	83 ec 08             	sub    $0x8,%esp
f01140cb:	6a 02                	push   $0x2
f01140cd:	6a 07                	push   $0x7
f01140cf:	6a 03                	push   $0x3
f01140d1:	6a 07                	push   $0x7
f01140d3:	6a 07                	push   $0x7
f01140d5:	6a 02                	push   $0x2
f01140d7:	50                   	push   %eax
f01140d8:	68 00 30 00 00       	push   $0x3000
f01140dd:	68 00 30 00 40       	push   $0x40003000
f01140e2:	ff 75 cc             	pushl  -0x34(%ebp)
f01140e5:	e8 8c 28 00 00       	call   f0116976 <CCP>
f01140ea:	83 c4 30             	add    $0x30,%esp
f01140ed:	85 c0                	test   %eax,%eax
f01140ef:	75 1e                	jne    f011410f <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140f1:	83 ec 04             	sub    $0x4,%esp
f01140f4:	68 44 7c 13 f0       	push   $0xf0137c44
f01140f9:	68 d1 03 00 00       	push   $0x3d1
f01140fe:	68 0e 69 13 f0       	push   $0xf013690e
f0114103:	e8 b6 c2 fe ff       	call   f01003be <_warn>
f0114108:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011410b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011410f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114113:	74 04                	je     f0114119 <test_share_chunk+0x65c>
f0114115:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114119:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011411d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114120:	c1 e0 02             	shl    $0x2,%eax
f0114123:	83 ec 08             	sub    $0x8,%esp
f0114126:	6a 02                	push   $0x2
f0114128:	6a 07                	push   $0x7
f011412a:	6a 03                	push   $0x3
f011412c:	6a 07                	push   $0x7
f011412e:	6a 07                	push   $0x7
f0114130:	6a 03                	push   $0x3
f0114132:	50                   	push   %eax
f0114133:	68 00 00 0a 00       	push   $0xa0000
f0114138:	68 00 00 0a 40       	push   $0x400a0000
f011413d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114140:	e8 31 28 00 00       	call   f0116976 <CCP>
f0114145:	83 c4 30             	add    $0x30,%esp
f0114148:	85 c0                	test   %eax,%eax
f011414a:	75 1e                	jne    f011416a <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011414c:	83 ec 04             	sub    $0x4,%esp
f011414f:	68 44 7c 13 f0       	push   $0xf0137c44
f0114154:	68 d9 03 00 00       	push   $0x3d9
f0114159:	68 0e 69 13 f0       	push   $0xf013690e
f011415e:	e8 5b c2 fe ff       	call   f01003be <_warn>
f0114163:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114166:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011416a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011416e:	74 04                	je     f0114174 <test_share_chunk+0x6b7>
f0114170:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114174:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114178:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011417c:	0f 84 92 00 00 00    	je     f0114214 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f0114182:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114189:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0114190:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114197:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011419e:	8b 45 98             	mov    -0x68(%ebp),%eax
f01141a1:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01141a4:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01141ab:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01141b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141b5:	8a 00                	mov    (%eax),%al
f01141b7:	3c 41                	cmp    $0x41,%al
f01141b9:	75 2d                	jne    f01141e8 <test_share_chunk+0x72b>
f01141bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141be:	8a 00                	mov    (%eax),%al
f01141c0:	3c 41                	cmp    $0x41,%al
f01141c2:	75 24                	jne    f01141e8 <test_share_chunk+0x72b>
f01141c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01141c7:	8a 00                	mov    (%eax),%al
f01141c9:	3c 41                	cmp    $0x41,%al
f01141cb:	75 1b                	jne    f01141e8 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01141cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01141d0:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01141d2:	3c 44                	cmp    $0x44,%al
f01141d4:	75 12                	jne    f01141e8 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01141d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01141d9:	8a 00                	mov    (%eax),%al
f01141db:	3c 44                	cmp    $0x44,%al
f01141dd:	75 09                	jne    f01141e8 <test_share_chunk+0x72b>
f01141df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01141e2:	8a 00                	mov    (%eax),%al
f01141e4:	3c 44                	cmp    $0x44,%al
f01141e6:	74 1e                	je     f0114206 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01141e8:	83 ec 04             	sub    $0x4,%esp
f01141eb:	68 8c 7c 13 f0       	push   $0xf0137c8c
f01141f0:	68 eb 03 00 00       	push   $0x3eb
f01141f5:	68 0e 69 13 f0       	push   $0xf013690e
f01141fa:	e8 bf c1 fe ff       	call   f01003be <_warn>
f01141ff:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114202:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114206:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011420a:	74 04                	je     f0114210 <test_share_chunk+0x753>
f011420c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114210:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114214:	83 ec 0c             	sub    $0xc,%esp
f0114217:	68 fe 72 13 f0       	push   $0xf01372fe
f011421c:	e8 10 cc fe ff       	call   f0100e31 <cprintf>
f0114221:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114224:	83 ec 0c             	sub    $0xc,%esp
f0114227:	68 98 7d 13 f0       	push   $0xf0137d98
f011422c:	e8 00 cc fe ff       	call   f0100e31 <cprintf>
f0114231:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114234:	e8 d9 83 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114239:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011423c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011423f:	89 d0                	mov    %edx,%eax
f0114241:	01 c0                	add    %eax,%eax
f0114243:	01 d0                	add    %edx,%eax
f0114245:	01 c0                	add    %eax,%eax
f0114247:	01 d0                	add    %edx,%eax
f0114249:	83 ec 0c             	sub    $0xc,%esp
f011424c:	6a 04                	push   $0x4
f011424e:	50                   	push   %eax
f011424f:	68 00 fc 3f 00       	push   $0x3ffc00
f0114254:	68 00 fc 09 00       	push   $0x9fc00
f0114259:	ff 75 cc             	pushl  -0x34(%ebp)
f011425c:	e8 94 45 ff ff       	call   f01087f5 <share_chunk>
f0114261:	83 c4 20             	add    $0x20,%esp
f0114264:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114267:	e8 a6 83 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011426c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011426f:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114273:	75 0b                	jne    f0114280 <test_share_chunk+0x7c3>
f0114275:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114278:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011427b:	83 f8 01             	cmp    $0x1,%eax
f011427e:	74 28                	je     f01142a8 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114280:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114283:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114286:	83 ec 0c             	sub    $0xc,%esp
f0114289:	50                   	push   %eax
f011428a:	ff 75 8c             	pushl  -0x74(%ebp)
f011428d:	68 0c 7d 13 f0       	push   $0xf0137d0c
f0114292:	68 01 04 00 00       	push   $0x401
f0114297:	68 0e 69 13 f0       	push   $0xf013690e
f011429c:	e8 1d c1 fe ff       	call   f01003be <_warn>
f01142a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01142a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142ac:	74 04                	je     f01142b2 <test_share_chunk+0x7f5>
f01142ae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01142b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01142b6:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01142bd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142c0:	89 d0                	mov    %edx,%eax
f01142c2:	01 c0                	add    %eax,%eax
f01142c4:	01 d0                	add    %edx,%eax
f01142c6:	c1 e0 02             	shl    $0x2,%eax
f01142c9:	83 ec 08             	sub    $0x8,%esp
f01142cc:	6a 02                	push   $0x2
f01142ce:	6a 07                	push   $0x7
f01142d0:	6a 07                	push   $0x7
f01142d2:	6a 07                	push   $0x7
f01142d4:	6a 05                	push   $0x5
f01142d6:	6a ff                	push   $0xffffffff
f01142d8:	50                   	push   %eax
f01142d9:	68 00 f0 3f 00       	push   $0x3ff000
f01142de:	68 00 f0 09 00       	push   $0x9f000
f01142e3:	ff 75 cc             	pushl  -0x34(%ebp)
f01142e6:	e8 8b 26 00 00       	call   f0116976 <CCP>
f01142eb:	83 c4 30             	add    $0x30,%esp
f01142ee:	85 c0                	test   %eax,%eax
f01142f0:	75 25                	jne    f0114317 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01142f2:	83 ec 04             	sub    $0x4,%esp
f01142f5:	68 44 7c 13 f0       	push   $0xf0137c44
f01142fa:	68 0a 04 00 00       	push   $0x40a
f01142ff:	68 0e 69 13 f0       	push   $0xf013690e
f0114304:	e8 b5 c0 fe ff       	call   f01003be <_warn>
f0114309:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011430c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114310:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114317:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011431b:	74 04                	je     f0114321 <test_share_chunk+0x864>
f011431d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114321:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114325:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114328:	c1 e0 02             	shl    $0x2,%eax
f011432b:	83 ec 08             	sub    $0x8,%esp
f011432e:	6a 02                	push   $0x2
f0114330:	6a 07                	push   $0x7
f0114332:	6a 07                	push   $0x7
f0114334:	6a 07                	push   $0x7
f0114336:	6a 05                	push   $0x5
f0114338:	6a 03                	push   $0x3
f011433a:	50                   	push   %eax
f011433b:	68 00 f0 3f 00       	push   $0x3ff000
f0114340:	68 00 f0 09 00       	push   $0x9f000
f0114345:	ff 75 cc             	pushl  -0x34(%ebp)
f0114348:	e8 29 26 00 00       	call   f0116976 <CCP>
f011434d:	83 c4 30             	add    $0x30,%esp
f0114350:	85 c0                	test   %eax,%eax
f0114352:	75 1e                	jne    f0114372 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114354:	83 ec 04             	sub    $0x4,%esp
f0114357:	68 44 7c 13 f0       	push   $0xf0137c44
f011435c:	68 13 04 00 00       	push   $0x413
f0114361:	68 0e 69 13 f0       	push   $0xf013690e
f0114366:	e8 53 c0 fe ff       	call   f01003be <_warn>
f011436b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011436e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114372:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114376:	74 04                	je     f011437c <test_share_chunk+0x8bf>
f0114378:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011437c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114380:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114383:	c1 e0 03             	shl    $0x3,%eax
f0114386:	83 ec 08             	sub    $0x8,%esp
f0114389:	6a 02                	push   $0x2
f011438b:	6a 07                	push   $0x7
f011438d:	6a 07                	push   $0x7
f011438f:	6a 07                	push   $0x7
f0114391:	6a 05                	push   $0x5
f0114393:	6a 04                	push   $0x4
f0114395:	50                   	push   %eax
f0114396:	68 00 00 40 00       	push   $0x400000
f011439b:	68 00 00 0a 00       	push   $0xa0000
f01143a0:	ff 75 cc             	pushl  -0x34(%ebp)
f01143a3:	e8 ce 25 00 00       	call   f0116976 <CCP>
f01143a8:	83 c4 30             	add    $0x30,%esp
f01143ab:	85 c0                	test   %eax,%eax
f01143ad:	75 1e                	jne    f01143cd <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143af:	83 ec 04             	sub    $0x4,%esp
f01143b2:	68 44 7c 13 f0       	push   $0xf0137c44
f01143b7:	68 1b 04 00 00       	push   $0x41b
f01143bc:	68 0e 69 13 f0       	push   $0xf013690e
f01143c1:	e8 f8 bf fe ff       	call   f01003be <_warn>
f01143c6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143d1:	74 04                	je     f01143d7 <test_share_chunk+0x91a>
f01143d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01143db:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01143df:	0f 84 b2 00 00 00    	je     f0114497 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f01143e5:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01143ec:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01143f3:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01143fa:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114401:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114408:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011440f:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114416:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011441d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114420:	8a 00                	mov    (%eax),%al
f0114422:	3c 44                	cmp    $0x44,%al
f0114424:	75 45                	jne    f011446b <test_share_chunk+0x9ae>
f0114426:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114429:	8a 00                	mov    (%eax),%al
f011442b:	3c 44                	cmp    $0x44,%al
f011442d:	75 3c                	jne    f011446b <test_share_chunk+0x9ae>
f011442f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114432:	8a 00                	mov    (%eax),%al
f0114434:	3c 44                	cmp    $0x44,%al
f0114436:	75 33                	jne    f011446b <test_share_chunk+0x9ae>
f0114438:	8b 45 98             	mov    -0x68(%ebp),%eax
f011443b:	8a 00                	mov    (%eax),%al
f011443d:	3c 44                	cmp    $0x44,%al
f011443f:	75 2a                	jne    f011446b <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114441:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114444:	8a 10                	mov    (%eax),%dl
f0114446:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114449:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011444b:	38 c2                	cmp    %al,%dl
f011444d:	75 1c                	jne    f011446b <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011444f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114452:	8a 10                	mov    (%eax),%dl
f0114454:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114457:	8a 00                	mov    (%eax),%al
f0114459:	38 c2                	cmp    %al,%dl
f011445b:	75 0e                	jne    f011446b <test_share_chunk+0x9ae>
f011445d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114460:	8a 10                	mov    (%eax),%dl
f0114462:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114465:	8a 00                	mov    (%eax),%al
f0114467:	38 c2                	cmp    %al,%dl
f0114469:	74 1e                	je     f0114489 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011446b:	83 ec 04             	sub    $0x4,%esp
f011446e:	68 8c 7c 13 f0       	push   $0xf0137c8c
f0114473:	68 30 04 00 00       	push   $0x430
f0114478:	68 0e 69 13 f0       	push   $0xf013690e
f011447d:	e8 3c bf fe ff       	call   f01003be <_warn>
f0114482:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114485:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114489:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011448d:	74 04                	je     f0114493 <test_share_chunk+0x9d6>
f011448f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114493:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114497:	83 ec 0c             	sub    $0xc,%esp
f011449a:	68 d0 7d 13 f0       	push   $0xf0137dd0
f011449f:	e8 8d c9 fe ff       	call   f0100e31 <cprintf>
f01144a4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01144a7:	83 ec 08             	sub    $0x8,%esp
f01144aa:	ff 75 e4             	pushl  -0x1c(%ebp)
f01144ad:	68 e0 7d 13 f0       	push   $0xf0137de0
f01144b2:	e8 7a c9 fe ff       	call   f0100e31 <cprintf>
f01144b7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01144ba:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01144be:	75 10                	jne    f01144d0 <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01144c0:	83 ec 0c             	sub    $0xc,%esp
f01144c3:	68 10 7e 13 f0       	push   $0xf0137e10
f01144c8:	e8 64 c9 fe ff       	call   f0100e31 <cprintf>
f01144cd:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01144d0:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01144d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01144d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01144db:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01144de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01144e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01144e6:	5b                   	pop    %ebx
f01144e7:	5e                   	pop    %esi
f01144e8:	5f                   	pop    %edi
f01144e9:	5d                   	pop    %ebp
f01144ea:	c3                   	ret    

f01144eb <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01144eb:	55                   	push   %ebp
f01144ec:	89 e5                	mov    %esp,%ebp
f01144ee:	57                   	push   %edi
f01144ef:	56                   	push   %esi
f01144f0:	53                   	push   %ebx
f01144f1:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01144f7:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01144fd:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f0114502:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114507:	89 c7                	mov    %eax,%edi
f0114509:	89 de                	mov    %ebx,%esi
f011450b:	89 d1                	mov    %edx,%ecx
f011450d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011450f:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114515:	b9 23 00 00 00       	mov    $0x23,%ecx
f011451a:	b0 00                	mov    $0x0,%al
f011451c:	89 d7                	mov    %edx,%edi
f011451e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114520:	6a 00                	push   $0x0
f0114522:	6a 0a                	push   $0xa
f0114524:	6a 14                	push   $0x14
f0114526:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011452c:	50                   	push   %eax
f011452d:	e8 cd 43 ff ff       	call   f01088ff <env_create>
f0114532:	83 c4 10             	add    $0x10,%esp
f0114535:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114538:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011453b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114541:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114544:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114547:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011454d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114550:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114553:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114556:	83 ec 0c             	sub    $0xc,%esp
f0114559:	ff 75 cc             	pushl  -0x34(%ebp)
f011455c:	e8 e1 23 00 00       	call   f0116942 <ClearUserSpace>
f0114561:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114564:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011456b:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114572:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114579:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011457d:	83 ec 0c             	sub    $0xc,%esp
f0114580:	68 4c 7e 13 f0       	push   $0xf0137e4c
f0114585:	e8 a7 c8 fe ff       	call   f0100e31 <cprintf>
f011458a:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f011458d:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114594:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f011459b:	eb 03                	jmp    f01145a0 <test_allocate_chunk+0xb5>
f011459d:	ff 4d e4             	decl   -0x1c(%ebp)
f01145a0:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01145a7:	76 09                	jbe    f01145b2 <test_allocate_chunk+0xc7>
f01145a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01145ac:	8a 00                	mov    (%eax),%al
f01145ae:	84 c0                	test   %al,%al
f01145b0:	74 eb                	je     f011459d <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f01145b2:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01145b9:	75 06                	jne    f01145c1 <test_allocate_chunk+0xd6>
f01145bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01145be:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f01145c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01145c4:	8a 00                	mov    (%eax),%al
f01145c6:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01145cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145cf:	8a 00                	mov    (%eax),%al
f01145d1:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f01145d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01145da:	8a 00                	mov    (%eax),%al
f01145dc:	0f be c0             	movsbl %al,%eax
f01145df:	83 ec 08             	sub    $0x8,%esp
f01145e2:	50                   	push   %eax
f01145e3:	68 76 7e 13 f0       	push   $0xf0137e76
f01145e8:	e8 44 c8 fe ff       	call   f0100e31 <cprintf>
f01145ed:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f01145f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145f3:	8a 00                	mov    (%eax),%al
f01145f5:	0f be c0             	movsbl %al,%eax
f01145f8:	83 ec 08             	sub    $0x8,%esp
f01145fb:	50                   	push   %eax
f01145fc:	68 82 7e 13 f0       	push   $0xf0137e82
f0114601:	e8 2b c8 fe ff       	call   f0100e31 <cprintf>
f0114606:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114609:	83 ec 08             	sub    $0x8,%esp
f011460c:	68 00 f0 bf ef       	push   $0xefbff000
f0114611:	ff 75 cc             	pushl  -0x34(%ebp)
f0114614:	e8 90 22 00 00       	call   f01168a9 <GP>
f0114619:	83 c4 10             	add    $0x10,%esp
f011461c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011461f:	e8 ee 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114624:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114627:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011462a:	c1 e0 02             	shl    $0x2,%eax
f011462d:	6a 02                	push   $0x2
f011462f:	50                   	push   %eax
f0114630:	68 00 f0 bf ef       	push   $0xefbff000
f0114635:	ff 75 cc             	pushl  -0x34(%ebp)
f0114638:	e8 d2 41 ff ff       	call   f010880f <allocate_chunk>
f011463d:	83 c4 10             	add    $0x10,%esp
f0114640:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114643:	e8 ca 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114648:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011464b:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011464f:	75 08                	jne    f0114659 <test_allocate_chunk+0x16e>
f0114651:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114654:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114657:	74 2a                	je     f0114683 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114659:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011465c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011465f:	83 ec 08             	sub    $0x8,%esp
f0114662:	6a 00                	push   $0x0
f0114664:	50                   	push   %eax
f0114665:	ff 75 b0             	pushl  -0x50(%ebp)
f0114668:	68 90 7e 13 f0       	push   $0xf0137e90
f011466d:	68 70 04 00 00       	push   $0x470
f0114672:	68 0e 69 13 f0       	push   $0xf013690e
f0114677:	e8 42 bd fe ff       	call   f01003be <_warn>
f011467c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011467f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114683:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114687:	74 04                	je     f011468d <test_allocate_chunk+0x1a2>
f0114689:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011468d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114691:	e8 7c 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114696:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114699:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011469c:	01 c0                	add    %eax,%eax
f011469e:	89 c1                	mov    %eax,%ecx
f01146a0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146a3:	89 d0                	mov    %edx,%eax
f01146a5:	c1 e0 02             	shl    $0x2,%eax
f01146a8:	01 d0                	add    %edx,%eax
f01146aa:	f7 d8                	neg    %eax
f01146ac:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01146b1:	6a 02                	push   $0x2
f01146b3:	51                   	push   %ecx
f01146b4:	50                   	push   %eax
f01146b5:	ff 75 cc             	pushl  -0x34(%ebp)
f01146b8:	e8 52 41 ff ff       	call   f010880f <allocate_chunk>
f01146bd:	83 c4 10             	add    $0x10,%esp
f01146c0:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01146c3:	e8 4a 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f01146c8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01146cb:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01146cf:	75 08                	jne    f01146d9 <test_allocate_chunk+0x1ee>
f01146d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146d4:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01146d7:	74 2a                	je     f0114703 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01146d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146dc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146df:	83 ec 08             	sub    $0x8,%esp
f01146e2:	6a 00                	push   $0x0
f01146e4:	50                   	push   %eax
f01146e5:	ff 75 b0             	pushl  -0x50(%ebp)
f01146e8:	68 90 7e 13 f0       	push   $0xf0137e90
f01146ed:	68 7e 04 00 00       	push   $0x47e
f01146f2:	68 0e 69 13 f0       	push   $0xf013690e
f01146f7:	e8 c2 bc fe ff       	call   f01003be <_warn>
f01146fc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146ff:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114703:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114707:	74 04                	je     f011470d <test_allocate_chunk+0x222>
f0114709:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011470d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114711:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114714:	c1 e0 02             	shl    $0x2,%eax
f0114717:	83 ec 08             	sub    $0x8,%esp
f011471a:	6a 03                	push   $0x3
f011471c:	6a 00                	push   $0x0
f011471e:	6a 00                	push   $0x0
f0114720:	68 ff 0f 00 00       	push   $0xfff
f0114725:	ff 75 b8             	pushl  -0x48(%ebp)
f0114728:	6a 01                	push   $0x1
f011472a:	50                   	push   %eax
f011472b:	68 00 f0 bf ef       	push   $0xefbff000
f0114730:	6a 00                	push   $0x0
f0114732:	ff 75 cc             	pushl  -0x34(%ebp)
f0114735:	e8 3c 22 00 00       	call   f0116976 <CCP>
f011473a:	83 c4 30             	add    $0x30,%esp
f011473d:	85 c0                	test   %eax,%eax
f011473f:	75 1e                	jne    f011475f <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114741:	83 ec 04             	sub    $0x4,%esp
f0114744:	68 f8 7e 13 f0       	push   $0xf0137ef8
f0114749:	68 86 04 00 00       	push   $0x486
f011474e:	68 0e 69 13 f0       	push   $0xf013690e
f0114753:	e8 66 bc fe ff       	call   f01003be <_warn>
f0114758:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011475b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f011475f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114763:	74 04                	je     f0114769 <test_allocate_chunk+0x27e>
f0114765:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114769:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f011476d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114770:	8a 10                	mov    (%eax),%dl
f0114772:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114778:	38 c2                	cmp    %al,%dl
f011477a:	75 0f                	jne    f011478b <test_allocate_chunk+0x2a0>
f011477c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011477f:	8a 10                	mov    (%eax),%dl
f0114781:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114787:	38 c2                	cmp    %al,%dl
f0114789:	74 1e                	je     f01147a9 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011478b:	83 ec 04             	sub    $0x4,%esp
f011478e:	68 44 7f 13 f0       	push   $0xf0137f44
f0114793:	68 8e 04 00 00       	push   $0x48e
f0114798:	68 0e 69 13 f0       	push   $0xf013690e
f011479d:	e8 1c bc fe ff       	call   f01003be <_warn>
f01147a2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147a5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01147a9:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01147ad:	74 04                	je     f01147b3 <test_allocate_chunk+0x2c8>
f01147af:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01147b3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01147b7:	83 ec 0c             	sub    $0xc,%esp
f01147ba:	68 c1 7c 13 f0       	push   $0xf0137cc1
f01147bf:	e8 6d c6 fe ff       	call   f0100e31 <cprintf>
f01147c4:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f01147c7:	83 ec 0c             	sub    $0xc,%esp
f01147ca:	68 7c 7f 13 f0       	push   $0xf0137f7c
f01147cf:	e8 5d c6 fe ff       	call   f0100e31 <cprintf>
f01147d4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01147d7:	e8 36 7e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01147dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01147df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147e2:	c1 e0 05             	shl    $0x5,%eax
f01147e5:	68 02 0e 00 00       	push   $0xe02
f01147ea:	50                   	push   %eax
f01147eb:	6a 00                	push   $0x0
f01147ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01147f0:	e8 1a 40 ff ff       	call   f010880f <allocate_chunk>
f01147f5:	83 c4 10             	add    $0x10,%esp
f01147f8:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01147fb:	e8 12 7e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114800:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114803:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114807:	75 36                	jne    f011483f <test_allocate_chunk+0x354>
f0114809:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011480c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011480f:	89 c1                	mov    %eax,%ecx
f0114811:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114814:	c1 e0 05             	shl    $0x5,%eax
f0114817:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011481a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114821:	99                   	cltd   
f0114822:	f7 fe                	idiv   %esi
f0114824:	89 c3                	mov    %eax,%ebx
f0114826:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114829:	c1 e0 05             	shl    $0x5,%eax
f011482c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011482f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114836:	99                   	cltd   
f0114837:	f7 fe                	idiv   %esi
f0114839:	01 d8                	add    %ebx,%eax
f011483b:	39 c1                	cmp    %eax,%ecx
f011483d:	74 54                	je     f0114893 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f011483f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114842:	c1 e0 05             	shl    $0x5,%eax
f0114845:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114848:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011484f:	99                   	cltd   
f0114850:	f7 ff                	idiv   %edi
f0114852:	89 c1                	mov    %eax,%ecx
f0114854:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114857:	c1 e0 05             	shl    $0x5,%eax
f011485a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011485d:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114864:	99                   	cltd   
f0114865:	f7 fe                	idiv   %esi
f0114867:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011486a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011486d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114870:	83 ec 08             	sub    $0x8,%esp
f0114873:	52                   	push   %edx
f0114874:	50                   	push   %eax
f0114875:	ff 75 a8             	pushl  -0x58(%ebp)
f0114878:	68 bc 7f 13 f0       	push   $0xf0137fbc
f011487d:	68 a3 04 00 00       	push   $0x4a3
f0114882:	68 0e 69 13 f0       	push   $0xf013690e
f0114887:	e8 32 bb fe ff       	call   f01003be <_warn>
f011488c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011488f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114893:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114897:	74 04                	je     f011489d <test_allocate_chunk+0x3b2>
f0114899:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011489d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01148a1:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01148a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148ab:	c1 e0 05             	shl    $0x5,%eax
f01148ae:	83 ec 08             	sub    $0x8,%esp
f01148b1:	6a 03                	push   $0x3
f01148b3:	6a 00                	push   $0x0
f01148b5:	6a 00                	push   $0x0
f01148b7:	68 07 0e 00 00       	push   $0xe07
f01148bc:	68 03 0e 00 00       	push   $0xe03
f01148c1:	6a 01                	push   $0x1
f01148c3:	50                   	push   %eax
f01148c4:	6a 00                	push   $0x0
f01148c6:	6a 00                	push   $0x0
f01148c8:	ff 75 cc             	pushl  -0x34(%ebp)
f01148cb:	e8 a6 20 00 00       	call   f0116976 <CCP>
f01148d0:	83 c4 30             	add    $0x30,%esp
f01148d3:	85 c0                	test   %eax,%eax
f01148d5:	75 25                	jne    f01148fc <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01148d7:	83 ec 04             	sub    $0x4,%esp
f01148da:	68 f8 7e 13 f0       	push   $0xf0137ef8
f01148df:	68 ac 04 00 00       	push   $0x4ac
f01148e4:	68 0e 69 13 f0       	push   $0xf013690e
f01148e9:	e8 d0 ba fe ff       	call   f01003be <_warn>
f01148ee:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148f1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01148f5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01148fc:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114900:	74 04                	je     f0114906 <test_allocate_chunk+0x41b>
f0114902:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114906:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f011490a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011490e:	74 5a                	je     f011496a <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114910:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114913:	01 c0                	add    %eax,%eax
f0114915:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114918:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011491b:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f011491e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114921:	01 c0                	add    %eax,%eax
f0114923:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114926:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114929:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011492c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011492f:	8a 00                	mov    (%eax),%al
f0114931:	3c 4b                	cmp    $0x4b,%al
f0114933:	75 09                	jne    f011493e <test_allocate_chunk+0x453>
f0114935:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114938:	8a 00                	mov    (%eax),%al
f011493a:	3c 4d                	cmp    $0x4d,%al
f011493c:	74 1e                	je     f011495c <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011493e:	83 ec 04             	sub    $0x4,%esp
f0114941:	68 44 7f 13 f0       	push   $0xf0137f44
f0114946:	68 ba 04 00 00       	push   $0x4ba
f011494b:	68 0e 69 13 f0       	push   $0xf013690e
f0114950:	e8 69 ba fe ff       	call   f01003be <_warn>
f0114955:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114958:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f011495c:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114960:	74 04                	je     f0114966 <test_allocate_chunk+0x47b>
f0114962:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114966:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011496a:	83 ec 0c             	sub    $0xc,%esp
f011496d:	68 9b 72 13 f0       	push   $0xf013729b
f0114972:	e8 ba c4 fe ff       	call   f0100e31 <cprintf>
f0114977:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f011497a:	83 ec 0c             	sub    $0xc,%esp
f011497d:	68 1c 80 13 f0       	push   $0xf013801c
f0114982:	e8 aa c4 fe ff       	call   f0100e31 <cprintf>
f0114987:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011498a:	e8 83 7c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011498f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114992:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114995:	c1 e0 06             	shl    $0x6,%eax
f0114998:	89 c2                	mov    %eax,%edx
f011499a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011499d:	c1 e0 05             	shl    $0x5,%eax
f01149a0:	6a 00                	push   $0x0
f01149a2:	52                   	push   %edx
f01149a3:	50                   	push   %eax
f01149a4:	ff 75 cc             	pushl  -0x34(%ebp)
f01149a7:	e8 63 3e ff ff       	call   f010880f <allocate_chunk>
f01149ac:	83 c4 10             	add    $0x10,%esp
f01149af:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149b2:	e8 5b 7c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01149b7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01149ba:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01149be:	75 36                	jne    f01149f6 <test_allocate_chunk+0x50b>
f01149c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149c3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149c6:	89 c1                	mov    %eax,%ecx
f01149c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149cb:	c1 e0 06             	shl    $0x6,%eax
f01149ce:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01149d1:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01149d8:	99                   	cltd   
f01149d9:	f7 ff                	idiv   %edi
f01149db:	89 c3                	mov    %eax,%ebx
f01149dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149e0:	c1 e0 06             	shl    $0x6,%eax
f01149e3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149e6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149ed:	99                   	cltd   
f01149ee:	f7 fe                	idiv   %esi
f01149f0:	01 d8                	add    %ebx,%eax
f01149f2:	39 c1                	cmp    %eax,%ecx
f01149f4:	74 54                	je     f0114a4a <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01149f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149f9:	c1 e0 06             	shl    $0x6,%eax
f01149fc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01149ff:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a06:	99                   	cltd   
f0114a07:	f7 fb                	idiv   %ebx
f0114a09:	89 c1                	mov    %eax,%ecx
f0114a0b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a0e:	c1 e0 06             	shl    $0x6,%eax
f0114a11:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a14:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114a1b:	99                   	cltd   
f0114a1c:	f7 ff                	idiv   %edi
f0114a1e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114a21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a24:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a27:	83 ec 08             	sub    $0x8,%esp
f0114a2a:	52                   	push   %edx
f0114a2b:	50                   	push   %eax
f0114a2c:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114a2f:	68 bc 7f 13 f0       	push   $0xf0137fbc
f0114a34:	68 d0 04 00 00       	push   $0x4d0
f0114a39:	68 0e 69 13 f0       	push   $0xf013690e
f0114a3e:	e8 7b b9 fe ff       	call   f01003be <_warn>
f0114a43:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a46:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114a4a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a4e:	74 04                	je     f0114a54 <test_allocate_chunk+0x569>
f0114a50:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114a54:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114a58:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a62:	c1 e0 06             	shl    $0x6,%eax
f0114a65:	89 c2                	mov    %eax,%edx
f0114a67:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a6a:	c1 e0 05             	shl    $0x5,%eax
f0114a6d:	83 ec 08             	sub    $0x8,%esp
f0114a70:	6a 03                	push   $0x3
f0114a72:	6a 00                	push   $0x0
f0114a74:	6a 00                	push   $0x0
f0114a76:	68 07 0e 00 00       	push   $0xe07
f0114a7b:	6a 01                	push   $0x1
f0114a7d:	6a 01                	push   $0x1
f0114a7f:	52                   	push   %edx
f0114a80:	50                   	push   %eax
f0114a81:	6a 00                	push   $0x0
f0114a83:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a86:	e8 eb 1e 00 00       	call   f0116976 <CCP>
f0114a8b:	83 c4 30             	add    $0x30,%esp
f0114a8e:	85 c0                	test   %eax,%eax
f0114a90:	75 25                	jne    f0114ab7 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a92:	83 ec 04             	sub    $0x4,%esp
f0114a95:	68 f8 7e 13 f0       	push   $0xf0137ef8
f0114a9a:	68 d9 04 00 00       	push   $0x4d9
f0114a9f:	68 0e 69 13 f0       	push   $0xf013690e
f0114aa4:	e8 15 b9 fe ff       	call   f01003be <_warn>
f0114aa9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114aac:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114ab0:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114ab7:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114abb:	74 04                	je     f0114ac1 <test_allocate_chunk+0x5d6>
f0114abd:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ac1:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114ac5:	83 ec 0c             	sub    $0xc,%esp
f0114ac8:	68 fe 72 13 f0       	push   $0xf01372fe
f0114acd:	e8 5f c3 fe ff       	call   f0100e31 <cprintf>
f0114ad2:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114ad5:	83 ec 0c             	sub    $0xc,%esp
f0114ad8:	68 5c 80 13 f0       	push   $0xf013805c
f0114add:	e8 4f c3 fe ff       	call   f0100e31 <cprintf>
f0114ae2:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114ae5:	e8 28 7b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114aea:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114aed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114af0:	c1 e0 06             	shl    $0x6,%eax
f0114af3:	68 06 0e 00 00       	push   $0xe06
f0114af8:	50                   	push   %eax
f0114af9:	68 00 00 00 80       	push   $0x80000000
f0114afe:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b01:	e8 09 3d ff ff       	call   f010880f <allocate_chunk>
f0114b06:	83 c4 10             	add    $0x10,%esp
f0114b09:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b0c:	e8 01 7b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114b11:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114b14:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114b18:	75 36                	jne    f0114b50 <test_allocate_chunk+0x665>
f0114b1a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b1d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b20:	89 c1                	mov    %eax,%ecx
f0114b22:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b25:	c1 e0 06             	shl    $0x6,%eax
f0114b28:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b2b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b32:	99                   	cltd   
f0114b33:	f7 fb                	idiv   %ebx
f0114b35:	89 c3                	mov    %eax,%ebx
f0114b37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b3a:	c1 e0 06             	shl    $0x6,%eax
f0114b3d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114b40:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b47:	99                   	cltd   
f0114b48:	f7 fe                	idiv   %esi
f0114b4a:	01 d8                	add    %ebx,%eax
f0114b4c:	39 c1                	cmp    %eax,%ecx
f0114b4e:	74 54                	je     f0114ba4 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114b50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b53:	c1 e0 06             	shl    $0x6,%eax
f0114b56:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b59:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114b60:	99                   	cltd   
f0114b61:	f7 ff                	idiv   %edi
f0114b63:	89 c1                	mov    %eax,%ecx
f0114b65:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b68:	c1 e0 06             	shl    $0x6,%eax
f0114b6b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114b6e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b75:	99                   	cltd   
f0114b76:	f7 fb                	idiv   %ebx
f0114b78:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114b7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b7e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b81:	83 ec 08             	sub    $0x8,%esp
f0114b84:	52                   	push   %edx
f0114b85:	50                   	push   %eax
f0114b86:	ff 75 9c             	pushl  -0x64(%ebp)
f0114b89:	68 bc 7f 13 f0       	push   $0xf0137fbc
f0114b8e:	68 ef 04 00 00       	push   $0x4ef
f0114b93:	68 0e 69 13 f0       	push   $0xf013690e
f0114b98:	e8 21 b8 fe ff       	call   f01003be <_warn>
f0114b9d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ba0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114ba4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ba8:	74 04                	je     f0114bae <test_allocate_chunk+0x6c3>
f0114baa:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114bae:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114bb2:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114bb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bbc:	c1 e0 06             	shl    $0x6,%eax
f0114bbf:	83 ec 08             	sub    $0x8,%esp
f0114bc2:	6a 03                	push   $0x3
f0114bc4:	6a 00                	push   $0x0
f0114bc6:	6a 00                	push   $0x0
f0114bc8:	68 07 0e 00 00       	push   $0xe07
f0114bcd:	68 07 0e 00 00       	push   $0xe07
f0114bd2:	6a 01                	push   $0x1
f0114bd4:	50                   	push   %eax
f0114bd5:	68 00 00 00 80       	push   $0x80000000
f0114bda:	6a 00                	push   $0x0
f0114bdc:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bdf:	e8 92 1d 00 00       	call   f0116976 <CCP>
f0114be4:	83 c4 30             	add    $0x30,%esp
f0114be7:	85 c0                	test   %eax,%eax
f0114be9:	75 25                	jne    f0114c10 <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114beb:	83 ec 04             	sub    $0x4,%esp
f0114bee:	68 f8 7e 13 f0       	push   $0xf0137ef8
f0114bf3:	68 f8 04 00 00       	push   $0x4f8
f0114bf8:	68 0e 69 13 f0       	push   $0xf013690e
f0114bfd:	e8 bc b7 fe ff       	call   f01003be <_warn>
f0114c02:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c05:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114c09:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0114c10:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c14:	74 04                	je     f0114c1a <test_allocate_chunk+0x72f>
f0114c16:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114c1a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114c1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114c22:	74 6f                	je     f0114c93 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114c24:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c27:	01 c0                	add    %eax,%eax
f0114c29:	05 00 00 00 80       	add    $0x80000000,%eax
f0114c2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114c31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c34:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114c37:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114c3a:	89 d0                	mov    %edx,%eax
f0114c3c:	c1 e0 02             	shl    $0x2,%eax
f0114c3f:	01 d0                	add    %edx,%eax
f0114c41:	01 c0                	add    %eax,%eax
f0114c43:	01 d0                	add    %edx,%eax
f0114c45:	01 c0                	add    %eax,%eax
f0114c47:	05 00 00 00 80       	add    $0x80000000,%eax
f0114c4c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114c4f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c52:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114c55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c58:	8a 00                	mov    (%eax),%al
f0114c5a:	3c 4b                	cmp    $0x4b,%al
f0114c5c:	75 09                	jne    f0114c67 <test_allocate_chunk+0x77c>
f0114c5e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c61:	8a 00                	mov    (%eax),%al
f0114c63:	3c 4d                	cmp    $0x4d,%al
f0114c65:	74 1e                	je     f0114c85 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114c67:	83 ec 04             	sub    $0x4,%esp
f0114c6a:	68 44 7f 13 f0       	push   $0xf0137f44
f0114c6f:	68 06 05 00 00       	push   $0x506
f0114c74:	68 0e 69 13 f0       	push   $0xf013690e
f0114c79:	e8 40 b7 fe ff       	call   f01003be <_warn>
f0114c7e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114c81:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114c85:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c89:	74 04                	je     f0114c8f <test_allocate_chunk+0x7a4>
f0114c8b:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114c8f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114c93:	83 ec 0c             	sub    $0xc,%esp
f0114c96:	68 d0 7d 13 f0       	push   $0xf0137dd0
f0114c9b:	e8 91 c1 fe ff       	call   f0100e31 <cprintf>
f0114ca0:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114ca3:	83 ec 0c             	sub    $0xc,%esp
f0114ca6:	68 98 80 13 f0       	push   $0xf0138098
f0114cab:	e8 81 c1 fe ff       	call   f0100e31 <cprintf>
f0114cb0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114cb3:	e8 5a 79 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114cb8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114cbb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cbe:	89 d0                	mov    %edx,%eax
f0114cc0:	01 c0                	add    %eax,%eax
f0114cc2:	01 d0                	add    %edx,%eax
f0114cc4:	01 c0                	add    %eax,%eax
f0114cc6:	01 d0                	add    %edx,%eax
f0114cc8:	68 04 0e 00 00       	push   $0xe04
f0114ccd:	50                   	push   %eax
f0114cce:	68 00 fc 3f 40       	push   $0x403ffc00
f0114cd3:	ff 75 cc             	pushl  -0x34(%ebp)
f0114cd6:	e8 34 3b ff ff       	call   f010880f <allocate_chunk>
f0114cdb:	83 c4 10             	add    $0x10,%esp
f0114cde:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114ce1:	e8 2c 79 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114ce6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114ce9:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114ced:	75 0b                	jne    f0114cfa <test_allocate_chunk+0x80f>
f0114cef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cf2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cf5:	83 f8 05             	cmp    $0x5,%eax
f0114cf8:	74 2a                	je     f0114d24 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114cfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cfd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d00:	83 ec 08             	sub    $0x8,%esp
f0114d03:	6a 05                	push   $0x5
f0114d05:	50                   	push   %eax
f0114d06:	ff 75 98             	pushl  -0x68(%ebp)
f0114d09:	68 bc 7f 13 f0       	push   $0xf0137fbc
f0114d0e:	68 1d 05 00 00       	push   $0x51d
f0114d13:	68 0e 69 13 f0       	push   $0xf013690e
f0114d18:	e8 a1 b6 fe ff       	call   f01003be <_warn>
f0114d1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d20:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114d24:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d28:	74 04                	je     f0114d2e <test_allocate_chunk+0x843>
f0114d2a:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114d2e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114d32:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d39:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d3c:	89 d0                	mov    %edx,%eax
f0114d3e:	01 c0                	add    %eax,%eax
f0114d40:	01 d0                	add    %edx,%eax
f0114d42:	c1 e0 02             	shl    $0x2,%eax
f0114d45:	83 ec 08             	sub    $0x8,%esp
f0114d48:	6a 03                	push   $0x3
f0114d4a:	6a 00                	push   $0x0
f0114d4c:	6a 00                	push   $0x0
f0114d4e:	68 07 0e 00 00       	push   $0xe07
f0114d53:	68 05 0e 00 00       	push   $0xe05
f0114d58:	6a 01                	push   $0x1
f0114d5a:	50                   	push   %eax
f0114d5b:	68 00 f0 3f 40       	push   $0x403ff000
f0114d60:	6a 00                	push   $0x0
f0114d62:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d65:	e8 0c 1c 00 00       	call   f0116976 <CCP>
f0114d6a:	83 c4 30             	add    $0x30,%esp
f0114d6d:	85 c0                	test   %eax,%eax
f0114d6f:	75 25                	jne    f0114d96 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d71:	83 ec 04             	sub    $0x4,%esp
f0114d74:	68 f8 7e 13 f0       	push   $0xf0137ef8
f0114d79:	68 26 05 00 00       	push   $0x526
f0114d7e:	68 0e 69 13 f0       	push   $0xf013690e
f0114d83:	e8 36 b6 fe ff       	call   f01003be <_warn>
f0114d88:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d8b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114d8f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114d96:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d9a:	74 04                	je     f0114da0 <test_allocate_chunk+0x8b5>
f0114d9c:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114da0:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114da4:	83 ec 0c             	sub    $0xc,%esp
f0114da7:	68 cf 80 13 f0       	push   $0xf01380cf
f0114dac:	e8 80 c0 fe ff       	call   f0100e31 <cprintf>
f0114db1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114db4:	83 ec 08             	sub    $0x8,%esp
f0114db7:	ff 75 e0             	pushl  -0x20(%ebp)
f0114dba:	68 e0 80 13 f0       	push   $0xf01380e0
f0114dbf:	e8 6d c0 fe ff       	call   f0100e31 <cprintf>
f0114dc4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114dc7:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0114dcb:	75 10                	jne    f0114ddd <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114dcd:	83 ec 0c             	sub    $0xc,%esp
f0114dd0:	68 14 81 13 f0       	push   $0xf0138114
f0114dd5:	e8 57 c0 fe ff       	call   f0100e31 <cprintf>
f0114dda:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114ddd:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0114de2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114de5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114de8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114deb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114df0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114df3:	5b                   	pop    %ebx
f0114df4:	5e                   	pop    %esi
f0114df5:	5f                   	pop    %edi
f0114df6:	5d                   	pop    %ebp
f0114df7:	c3                   	ret    

f0114df8 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114df8:	55                   	push   %ebp
f0114df9:	89 e5                	mov    %esp,%ebp
f0114dfb:	57                   	push   %edi
f0114dfc:	56                   	push   %esi
f0114dfd:	53                   	push   %ebx
f0114dfe:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114e04:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e07:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f0114e0c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114e11:	89 c7                	mov    %eax,%edi
f0114e13:	89 de                	mov    %ebx,%esi
f0114e15:	89 d1                	mov    %edx,%ecx
f0114e17:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114e19:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114e1c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114e21:	b0 00                	mov    $0x0,%al
f0114e23:	89 d7                	mov    %edx,%edi
f0114e25:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114e27:	6a 00                	push   $0x0
f0114e29:	6a 0a                	push   $0xa
f0114e2b:	6a 14                	push   $0x14
f0114e2d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e30:	50                   	push   %eax
f0114e31:	e8 c9 3a ff ff       	call   f01088ff <env_create>
f0114e36:	83 c4 10             	add    $0x10,%esp
f0114e39:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114e3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e3f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114e45:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114e48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e4b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114e51:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114e54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e57:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114e5a:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114e61:	75 70 20 
f0114e64:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114e6b:	00 00 00 
f0114e6e:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114e71:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114e76:	b8 00 00 00 00       	mov    $0x0,%eax
f0114e7b:	89 d7                	mov    %edx,%edi
f0114e7d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114e7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e82:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114e85:	83 ec 08             	sub    $0x8,%esp
f0114e88:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114e8e:	52                   	push   %edx
f0114e8f:	50                   	push   %eax
f0114e90:	e8 53 a0 01 00       	call   f012eee8 <ltostr>
f0114e95:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114e98:	83 ec 04             	sub    $0x4,%esp
f0114e9b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ea1:	50                   	push   %eax
f0114ea2:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114ea8:	50                   	push   %eax
f0114ea9:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114eaf:	50                   	push   %eax
f0114eb0:	e8 2b a1 01 00       	call   f012efe0 <strcconcat>
f0114eb5:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114eb8:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114ebf:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114ec6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114ecd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114ed4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114ed8:	83 ec 0c             	sub    $0xc,%esp
f0114edb:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ede:	e8 5f 1a 00 00       	call   f0116942 <ClearUserSpace>
f0114ee3:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114ee6:	83 ec 0c             	sub    $0xc,%esp
f0114ee9:	68 54 81 13 f0       	push   $0xf0138154
f0114eee:	e8 3e bf fe ff       	call   f0100e31 <cprintf>
f0114ef3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114ef6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ef9:	c1 e0 03             	shl    $0x3,%eax
f0114efc:	83 ec 04             	sub    $0x4,%esp
f0114eff:	50                   	push   %eax
f0114f00:	6a 00                	push   $0x0
f0114f02:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f05:	e8 39 39 ff ff       	call   f0108843 <calculate_required_frames>
f0114f0a:	83 c4 10             	add    $0x10,%esp
f0114f0d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f10:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f14:	74 23                	je     f0114f39 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f16:	83 ec 0c             	sub    $0xc,%esp
f0114f19:	6a 03                	push   $0x3
f0114f1b:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f1e:	68 88 81 13 f0       	push   $0xf0138188
f0114f23:	68 5f 05 00 00       	push   $0x55f
f0114f28:	68 0e 69 13 f0       	push   $0xf013690e
f0114f2d:	e8 8c b4 fe ff       	call   f01003be <_warn>
f0114f32:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f39:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f3d:	74 04                	je     f0114f43 <test_calculate_required_frames+0x14b>
f0114f3f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f43:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114f47:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f4a:	c1 e0 02             	shl    $0x2,%eax
f0114f4d:	83 ec 04             	sub    $0x4,%esp
f0114f50:	50                   	push   %eax
f0114f51:	6a 00                	push   $0x0
f0114f53:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f56:	e8 e8 38 ff ff       	call   f0108843 <calculate_required_frames>
f0114f5b:	83 c4 10             	add    $0x10,%esp
f0114f5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114f61:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114f68:	74 26                	je     f0114f90 <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114f6a:	83 ec 0c             	sub    $0xc,%esp
f0114f6d:	68 01 04 00 00       	push   $0x401
f0114f72:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f75:	68 88 81 13 f0       	push   $0xf0138188
f0114f7a:	68 69 05 00 00       	push   $0x569
f0114f7f:	68 0e 69 13 f0       	push   $0xf013690e
f0114f84:	e8 35 b4 fe ff       	call   f01003be <_warn>
f0114f89:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f8c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f90:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f94:	74 04                	je     f0114f9a <test_calculate_required_frames+0x1a2>
f0114f96:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f9a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114f9e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fa1:	c1 e0 0a             	shl    $0xa,%eax
f0114fa4:	83 ec 04             	sub    $0x4,%esp
f0114fa7:	50                   	push   %eax
f0114fa8:	6a 00                	push   $0x0
f0114faa:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fad:	e8 91 38 ff ff       	call   f0108843 <calculate_required_frames>
f0114fb2:	83 c4 10             	add    $0x10,%esp
f0114fb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114fb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fbb:	c1 e0 0a             	shl    $0xa,%eax
f0114fbe:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114fc1:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114fc8:	99                   	cltd   
f0114fc9:	f7 fb                	idiv   %ebx
f0114fcb:	89 c1                	mov    %eax,%ecx
f0114fcd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fd0:	c1 e0 0a             	shl    $0xa,%eax
f0114fd3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114fd6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114fdd:	99                   	cltd   
f0114fde:	f7 fe                	idiv   %esi
f0114fe0:	01 c8                	add    %ecx,%eax
f0114fe2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114fe5:	74 4c                	je     f0115033 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114fe7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fea:	c1 e0 0a             	shl    $0xa,%eax
f0114fed:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114ff0:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ff7:	99                   	cltd   
f0114ff8:	f7 fb                	idiv   %ebx
f0114ffa:	89 c1                	mov    %eax,%ecx
f0114ffc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fff:	c1 e0 0a             	shl    $0xa,%eax
f0115002:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115005:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011500c:	99                   	cltd   
f011500d:	f7 fe                	idiv   %esi
f011500f:	01 c8                	add    %ecx,%eax
f0115011:	83 ec 0c             	sub    $0xc,%esp
f0115014:	50                   	push   %eax
f0115015:	ff 75 c8             	pushl  -0x38(%ebp)
f0115018:	68 88 81 13 f0       	push   $0xf0138188
f011501d:	68 73 05 00 00       	push   $0x573
f0115022:	68 0e 69 13 f0       	push   $0xf013690e
f0115027:	e8 92 b3 fe ff       	call   f01003be <_warn>
f011502c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011502f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115033:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115037:	74 04                	je     f011503d <test_calculate_required_frames+0x245>
f0115039:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011503d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0115041:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115044:	89 d0                	mov    %edx,%eax
f0115046:	01 c0                	add    %eax,%eax
f0115048:	01 d0                	add    %edx,%eax
f011504a:	01 c0                	add    %eax,%eax
f011504c:	83 ec 04             	sub    $0x4,%esp
f011504f:	50                   	push   %eax
f0115050:	68 00 10 00 00       	push   $0x1000
f0115055:	ff 75 d8             	pushl  -0x28(%ebp)
f0115058:	e8 e6 37 ff ff       	call   f0108843 <calculate_required_frames>
f011505d:	83 c4 10             	add    $0x10,%esp
f0115060:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115063:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115067:	74 23                	je     f011508c <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115069:	83 ec 0c             	sub    $0xc,%esp
f011506c:	6a 03                	push   $0x3
f011506e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115071:	68 88 81 13 f0       	push   $0xf0138188
f0115076:	68 7f 05 00 00       	push   $0x57f
f011507b:	68 0e 69 13 f0       	push   $0xf013690e
f0115080:	e8 39 b3 fe ff       	call   f01003be <_warn>
f0115085:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115088:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011508c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115090:	74 04                	je     f0115096 <test_calculate_required_frames+0x29e>
f0115092:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115096:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011509a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011509d:	89 c2                	mov    %eax,%edx
f011509f:	01 d2                	add    %edx,%edx
f01150a1:	01 d0                	add    %edx,%eax
f01150a3:	83 ec 04             	sub    $0x4,%esp
f01150a6:	50                   	push   %eax
f01150a7:	68 00 18 00 00       	push   $0x1800
f01150ac:	ff 75 d8             	pushl  -0x28(%ebp)
f01150af:	e8 8f 37 ff ff       	call   f0108843 <calculate_required_frames>
f01150b4:	83 c4 10             	add    $0x10,%esp
f01150b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01150ba:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01150be:	74 23                	je     f01150e3 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01150c0:	83 ec 0c             	sub    $0xc,%esp
f01150c3:	6a 03                	push   $0x3
f01150c5:	ff 75 c8             	pushl  -0x38(%ebp)
f01150c8:	68 88 81 13 f0       	push   $0xf0138188
f01150cd:	68 89 05 00 00       	push   $0x589
f01150d2:	68 0e 69 13 f0       	push   $0xf013690e
f01150d7:	e8 e2 b2 fe ff       	call   f01003be <_warn>
f01150dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150e7:	74 04                	je     f01150ed <test_calculate_required_frames+0x2f5>
f01150e9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01150f1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01150f4:	89 d0                	mov    %edx,%eax
f01150f6:	c1 e0 02             	shl    $0x2,%eax
f01150f9:	01 d0                	add    %edx,%eax
f01150fb:	01 c0                	add    %eax,%eax
f01150fd:	83 ec 04             	sub    $0x4,%esp
f0115100:	50                   	push   %eax
f0115101:	68 00 00 40 00       	push   $0x400000
f0115106:	ff 75 d8             	pushl  -0x28(%ebp)
f0115109:	e8 35 37 ff ff       	call   f0108843 <calculate_required_frames>
f011510e:	83 c4 10             	add    $0x10,%esp
f0115111:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115114:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011511b:	74 26                	je     f0115143 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011511d:	83 ec 0c             	sub    $0xc,%esp
f0115120:	68 03 0a 00 00       	push   $0xa03
f0115125:	ff 75 c8             	pushl  -0x38(%ebp)
f0115128:	68 88 81 13 f0       	push   $0xf0138188
f011512d:	68 93 05 00 00       	push   $0x593
f0115132:	68 0e 69 13 f0       	push   $0xf013690e
f0115137:	e8 82 b2 fe ff       	call   f01003be <_warn>
f011513c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011513f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115143:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115147:	74 04                	je     f011514d <test_calculate_required_frames+0x355>
f0115149:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011514d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115151:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115154:	01 c0                	add    %eax,%eax
f0115156:	83 ec 04             	sub    $0x4,%esp
f0115159:	50                   	push   %eax
f011515a:	68 00 00 70 00       	push   $0x700000
f011515f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115162:	e8 dc 36 ff ff       	call   f0108843 <calculate_required_frames>
f0115167:	83 c4 10             	add    $0x10,%esp
f011516a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011516d:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115174:	74 26                	je     f011519c <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115176:	83 ec 0c             	sub    $0xc,%esp
f0115179:	68 02 02 00 00       	push   $0x202
f011517e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115181:	68 88 81 13 f0       	push   $0xf0138188
f0115186:	68 9f 05 00 00       	push   $0x59f
f011518b:	68 0e 69 13 f0       	push   $0xf013690e
f0115190:	e8 29 b2 fe ff       	call   f01003be <_warn>
f0115195:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115198:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011519c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151a0:	74 04                	je     f01151a6 <test_calculate_required_frames+0x3ae>
f01151a2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01151a6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01151aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151ad:	83 ec 04             	sub    $0x4,%esp
f01151b0:	50                   	push   %eax
f01151b1:	68 ff ff 3f 00       	push   $0x3fffff
f01151b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01151b9:	e8 85 36 ff ff       	call   f0108843 <calculate_required_frames>
f01151be:	83 c4 10             	add    $0x10,%esp
f01151c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01151c4:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01151c8:	74 23                	je     f01151ed <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f01151ca:	83 ec 0c             	sub    $0xc,%esp
f01151cd:	6a 04                	push   $0x4
f01151cf:	ff 75 c8             	pushl  -0x38(%ebp)
f01151d2:	68 88 81 13 f0       	push   $0xf0138188
f01151d7:	68 a9 05 00 00       	push   $0x5a9
f01151dc:	68 0e 69 13 f0       	push   $0xf013690e
f01151e1:	e8 d8 b1 fe ff       	call   f01003be <_warn>
f01151e6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01151ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151f1:	74 04                	je     f01151f7 <test_calculate_required_frames+0x3ff>
f01151f3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01151f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01151fb:	83 ec 0c             	sub    $0xc,%esp
f01151fe:	68 c1 7c 13 f0       	push   $0xf0137cc1
f0115203:	e8 29 bc fe ff       	call   f0100e31 <cprintf>
f0115208:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011520b:	83 ec 0c             	sub    $0xc,%esp
f011520e:	68 e0 81 13 f0       	push   $0xf01381e0
f0115213:	e8 19 bc fe ff       	call   f0100e31 <cprintf>
f0115218:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011521b:	83 ec 04             	sub    $0x4,%esp
f011521e:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115224:	50                   	push   %eax
f0115225:	68 7a 70 13 f0       	push   $0xf013707a
f011522a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115230:	50                   	push   %eax
f0115231:	e8 aa 9d 01 00       	call   f012efe0 <strcconcat>
f0115236:	83 c4 10             	add    $0x10,%esp
f0115239:	83 ec 0c             	sub    $0xc,%esp
f011523c:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115242:	50                   	push   %eax
f0115243:	e8 7b c9 fe ff       	call   f0101bc3 <execute_command>
f0115248:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011524b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011524e:	c1 e0 03             	shl    $0x3,%eax
f0115251:	83 ec 04             	sub    $0x4,%esp
f0115254:	50                   	push   %eax
f0115255:	6a 00                	push   $0x0
f0115257:	ff 75 d8             	pushl  -0x28(%ebp)
f011525a:	e8 e4 35 ff ff       	call   f0108843 <calculate_required_frames>
f011525f:	83 c4 10             	add    $0x10,%esp
f0115262:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115265:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011526c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011526f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115272:	74 24                	je     f0115298 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115274:	83 ec 0c             	sub    $0xc,%esp
f0115277:	ff 75 c4             	pushl  -0x3c(%ebp)
f011527a:	ff 75 c8             	pushl  -0x38(%ebp)
f011527d:	68 88 81 13 f0       	push   $0xf0138188
f0115282:	68 bd 05 00 00       	push   $0x5bd
f0115287:	68 0e 69 13 f0       	push   $0xf013690e
f011528c:	e8 2d b1 fe ff       	call   f01003be <_warn>
f0115291:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115294:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115298:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011529c:	74 04                	je     f01152a2 <test_calculate_required_frames+0x4aa>
f011529e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01152a6:	83 ec 04             	sub    $0x4,%esp
f01152a9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01152af:	50                   	push   %eax
f01152b0:	68 87 70 13 f0       	push   $0xf0137087
f01152b5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152bb:	50                   	push   %eax
f01152bc:	e8 1f 9d 01 00       	call   f012efe0 <strcconcat>
f01152c1:	83 c4 10             	add    $0x10,%esp
f01152c4:	83 ec 0c             	sub    $0xc,%esp
f01152c7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01152cd:	50                   	push   %eax
f01152ce:	e8 f0 c8 fe ff       	call   f0101bc3 <execute_command>
f01152d3:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01152d6:	83 ec 04             	sub    $0x4,%esp
f01152d9:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152df:	50                   	push   %eax
f01152e0:	68 14 82 13 f0       	push   $0xf0138214
f01152e5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152eb:	50                   	push   %eax
f01152ec:	e8 ef 9c 01 00       	call   f012efe0 <strcconcat>
f01152f1:	83 c4 10             	add    $0x10,%esp
f01152f4:	83 ec 0c             	sub    $0xc,%esp
f01152f7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152fd:	50                   	push   %eax
f01152fe:	e8 c0 c8 fe ff       	call   f0101bc3 <execute_command>
f0115303:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115306:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115309:	c1 e0 03             	shl    $0x3,%eax
f011530c:	83 ec 04             	sub    $0x4,%esp
f011530f:	50                   	push   %eax
f0115310:	6a 00                	push   $0x0
f0115312:	ff 75 d8             	pushl  -0x28(%ebp)
f0115315:	e8 29 35 ff ff       	call   f0108843 <calculate_required_frames>
f011531a:	83 c4 10             	add    $0x10,%esp
f011531d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115320:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115327:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011532a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011532d:	74 24                	je     f0115353 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011532f:	83 ec 0c             	sub    $0xc,%esp
f0115332:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115335:	ff 75 c8             	pushl  -0x38(%ebp)
f0115338:	68 88 81 13 f0       	push   $0xf0138188
f011533d:	68 cb 05 00 00       	push   $0x5cb
f0115342:	68 0e 69 13 f0       	push   $0xf013690e
f0115347:	e8 72 b0 fe ff       	call   f01003be <_warn>
f011534c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115353:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115357:	74 04                	je     f011535d <test_calculate_required_frames+0x565>
f0115359:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011535d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115361:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115364:	c1 e0 0a             	shl    $0xa,%eax
f0115367:	83 ec 04             	sub    $0x4,%esp
f011536a:	50                   	push   %eax
f011536b:	6a 00                	push   $0x0
f011536d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115370:	e8 ce 34 ff ff       	call   f0108843 <calculate_required_frames>
f0115375:	83 c4 10             	add    $0x10,%esp
f0115378:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f011537b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011537e:	c1 e0 0a             	shl    $0xa,%eax
f0115381:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115384:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011538b:	99                   	cltd   
f011538c:	f7 fb                	idiv   %ebx
f011538e:	89 c1                	mov    %eax,%ecx
f0115390:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115393:	c1 e0 0a             	shl    $0xa,%eax
f0115396:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115399:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153a0:	99                   	cltd   
f01153a1:	f7 fe                	idiv   %esi
f01153a3:	01 c8                	add    %ecx,%eax
f01153a5:	83 e8 05             	sub    $0x5,%eax
f01153a8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01153ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153ae:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153b1:	74 24                	je     f01153d7 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01153b3:	83 ec 0c             	sub    $0xc,%esp
f01153b6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01153b9:	ff 75 c8             	pushl  -0x38(%ebp)
f01153bc:	68 88 81 13 f0       	push   $0xf0138188
f01153c1:	68 d6 05 00 00       	push   $0x5d6
f01153c6:	68 0e 69 13 f0       	push   $0xf013690e
f01153cb:	e8 ee af fe ff       	call   f01003be <_warn>
f01153d0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01153d7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153db:	74 04                	je     f01153e1 <test_calculate_required_frames+0x5e9>
f01153dd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01153e1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01153e5:	83 ec 04             	sub    $0x4,%esp
f01153e8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01153ee:	50                   	push   %eax
f01153ef:	68 20 82 13 f0       	push   $0xf0138220
f01153f4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153fa:	50                   	push   %eax
f01153fb:	e8 e0 9b 01 00       	call   f012efe0 <strcconcat>
f0115400:	83 c4 10             	add    $0x10,%esp
f0115403:	83 ec 0c             	sub    $0xc,%esp
f0115406:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011540c:	50                   	push   %eax
f011540d:	e8 b1 c7 fe ff       	call   f0101bc3 <execute_command>
f0115412:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115415:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115418:	89 c2                	mov    %eax,%edx
f011541a:	01 d2                	add    %edx,%edx
f011541c:	01 d0                	add    %edx,%eax
f011541e:	83 ec 04             	sub    $0x4,%esp
f0115421:	50                   	push   %eax
f0115422:	68 00 18 00 00       	push   $0x1800
f0115427:	ff 75 d8             	pushl  -0x28(%ebp)
f011542a:	e8 14 34 ff ff       	call   f0108843 <calculate_required_frames>
f011542f:	83 c4 10             	add    $0x10,%esp
f0115432:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115435:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011543c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011543f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115442:	74 24                	je     f0115468 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115444:	83 ec 0c             	sub    $0xc,%esp
f0115447:	ff 75 c4             	pushl  -0x3c(%ebp)
f011544a:	ff 75 c8             	pushl  -0x38(%ebp)
f011544d:	68 88 81 13 f0       	push   $0xf0138188
f0115452:	68 e5 05 00 00       	push   $0x5e5
f0115457:	68 0e 69 13 f0       	push   $0xf013690e
f011545c:	e8 5d af fe ff       	call   f01003be <_warn>
f0115461:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115464:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115468:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011546c:	74 04                	je     f0115472 <test_calculate_required_frames+0x67a>
f011546e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115472:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115476:	83 ec 04             	sub    $0x4,%esp
f0115479:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011547f:	50                   	push   %eax
f0115480:	68 e0 72 13 f0       	push   $0xf01372e0
f0115485:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011548b:	50                   	push   %eax
f011548c:	e8 4f 9b 01 00       	call   f012efe0 <strcconcat>
f0115491:	83 c4 10             	add    $0x10,%esp
f0115494:	83 ec 0c             	sub    $0xc,%esp
f0115497:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011549d:	50                   	push   %eax
f011549e:	e8 20 c7 fe ff       	call   f0101bc3 <execute_command>
f01154a3:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01154a6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154a9:	89 d0                	mov    %edx,%eax
f01154ab:	c1 e0 02             	shl    $0x2,%eax
f01154ae:	01 d0                	add    %edx,%eax
f01154b0:	01 c0                	add    %eax,%eax
f01154b2:	83 ec 04             	sub    $0x4,%esp
f01154b5:	50                   	push   %eax
f01154b6:	68 00 00 40 00       	push   $0x400000
f01154bb:	ff 75 d8             	pushl  -0x28(%ebp)
f01154be:	e8 80 33 ff ff       	call   f0108843 <calculate_required_frames>
f01154c3:	83 c4 10             	add    $0x10,%esp
f01154c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01154c9:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01154d0:	74 26                	je     f01154f8 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01154d2:	83 ec 0c             	sub    $0xc,%esp
f01154d5:	68 03 0a 00 00       	push   $0xa03
f01154da:	ff 75 c8             	pushl  -0x38(%ebp)
f01154dd:	68 88 81 13 f0       	push   $0xf0138188
f01154e2:	68 f1 05 00 00       	push   $0x5f1
f01154e7:	68 0e 69 13 f0       	push   $0xf013690e
f01154ec:	e8 cd ae fe ff       	call   f01003be <_warn>
f01154f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154fc:	74 04                	je     f0115502 <test_calculate_required_frames+0x70a>
f01154fe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115502:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115506:	83 ec 04             	sub    $0x4,%esp
f0115509:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011550f:	50                   	push   %eax
f0115510:	68 ea 72 13 f0       	push   $0xf01372ea
f0115515:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011551b:	50                   	push   %eax
f011551c:	e8 bf 9a 01 00       	call   f012efe0 <strcconcat>
f0115521:	83 c4 10             	add    $0x10,%esp
f0115524:	83 ec 0c             	sub    $0xc,%esp
f0115527:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011552d:	50                   	push   %eax
f011552e:	e8 90 c6 fe ff       	call   f0101bc3 <execute_command>
f0115533:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115536:	83 ec 04             	sub    $0x4,%esp
f0115539:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011553f:	50                   	push   %eax
f0115540:	68 28 82 13 f0       	push   $0xf0138228
f0115545:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011554b:	50                   	push   %eax
f011554c:	e8 8f 9a 01 00       	call   f012efe0 <strcconcat>
f0115551:	83 c4 10             	add    $0x10,%esp
f0115554:	83 ec 0c             	sub    $0xc,%esp
f0115557:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011555d:	50                   	push   %eax
f011555e:	e8 60 c6 fe ff       	call   f0101bc3 <execute_command>
f0115563:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115566:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115569:	01 c0                	add    %eax,%eax
f011556b:	83 ec 04             	sub    $0x4,%esp
f011556e:	50                   	push   %eax
f011556f:	68 00 00 70 00       	push   $0x700000
f0115574:	ff 75 d8             	pushl  -0x28(%ebp)
f0115577:	e8 c7 32 ff ff       	call   f0108843 <calculate_required_frames>
f011557c:	83 c4 10             	add    $0x10,%esp
f011557f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115582:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115589:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011558c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011558f:	74 24                	je     f01155b5 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115591:	83 ec 0c             	sub    $0xc,%esp
f0115594:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115597:	ff 75 c8             	pushl  -0x38(%ebp)
f011559a:	68 88 81 13 f0       	push   $0xf0138188
f011559f:	68 01 06 00 00       	push   $0x601
f01155a4:	68 0e 69 13 f0       	push   $0xf013690e
f01155a9:	e8 10 ae fe ff       	call   f01003be <_warn>
f01155ae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01155b5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155b9:	74 04                	je     f01155bf <test_calculate_required_frames+0x7c7>
f01155bb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01155bf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01155c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155c6:	83 ec 04             	sub    $0x4,%esp
f01155c9:	50                   	push   %eax
f01155ca:	68 ff ff 3f 00       	push   $0x3fffff
f01155cf:	ff 75 d8             	pushl  -0x28(%ebp)
f01155d2:	e8 6c 32 ff ff       	call   f0108843 <calculate_required_frames>
f01155d7:	83 c4 10             	add    $0x10,%esp
f01155da:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01155dd:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01155e4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155e7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155ea:	74 24                	je     f0115610 <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155ec:	83 ec 0c             	sub    $0xc,%esp
f01155ef:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155f2:	ff 75 c8             	pushl  -0x38(%ebp)
f01155f5:	68 88 81 13 f0       	push   $0xf0138188
f01155fa:	68 0c 06 00 00       	push   $0x60c
f01155ff:	68 0e 69 13 f0       	push   $0xf013690e
f0115604:	e8 b5 ad fe ff       	call   f01003be <_warn>
f0115609:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011560c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115610:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115614:	74 04                	je     f011561a <test_calculate_required_frames+0x822>
f0115616:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011561a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011561e:	83 ec 0c             	sub    $0xc,%esp
f0115621:	68 9b 72 13 f0       	push   $0xf013729b
f0115626:	e8 06 b8 fe ff       	call   f0100e31 <cprintf>
f011562b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011562e:	83 ec 08             	sub    $0x8,%esp
f0115631:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115634:	68 34 82 13 f0       	push   $0xf0138234
f0115639:	e8 f3 b7 fe ff       	call   f0100e31 <cprintf>
f011563e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115641:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115645:	75 10                	jne    f0115657 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115647:	83 ec 0c             	sub    $0xc,%esp
f011564a:	68 74 82 13 f0       	push   $0xf0138274
f011564f:	e8 dd b7 fe ff       	call   f0100e31 <cprintf>
f0115654:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115657:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f011565c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011565f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115662:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115665:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011566a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011566d:	5b                   	pop    %ebx
f011566e:	5e                   	pop    %esi
f011566f:	5f                   	pop    %edi
f0115670:	5d                   	pop    %ebp
f0115671:	c3                   	ret    

f0115672 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115672:	55                   	push   %ebp
f0115673:	89 e5                	mov    %esp,%ebp
f0115675:	57                   	push   %edi
f0115676:	56                   	push   %esi
f0115677:	53                   	push   %ebx
f0115678:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011567e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115681:	bb 10 70 13 f0       	mov    $0xf0137010,%ebx
f0115686:	ba 0f 00 00 00       	mov    $0xf,%edx
f011568b:	89 c7                	mov    %eax,%edi
f011568d:	89 de                	mov    %ebx,%esi
f011568f:	89 d1                	mov    %edx,%ecx
f0115691:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115693:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115696:	b9 23 00 00 00       	mov    $0x23,%ecx
f011569b:	b0 00                	mov    $0x0,%al
f011569d:	89 d7                	mov    %edx,%edi
f011569f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01156a1:	6a 00                	push   $0x0
f01156a3:	6a 0a                	push   $0xa
f01156a5:	6a 14                	push   $0x14
f01156a7:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01156aa:	50                   	push   %eax
f01156ab:	e8 4f 32 ff ff       	call   f01088ff <env_create>
f01156b0:	83 c4 10             	add    $0x10,%esp
f01156b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01156b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01156b9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01156bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01156c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01156c5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01156cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01156ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01156d1:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01156d4:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01156db:	75 70 20 
f01156de:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01156e5:	00 00 00 
f01156e8:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01156eb:	b9 03 00 00 00       	mov    $0x3,%ecx
f01156f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01156f5:	89 d7                	mov    %edx,%edi
f01156f7:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01156f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01156fc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01156ff:	83 ec 08             	sub    $0x8,%esp
f0115702:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115708:	52                   	push   %edx
f0115709:	50                   	push   %eax
f011570a:	e8 d9 97 01 00       	call   f012eee8 <ltostr>
f011570f:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115712:	83 ec 04             	sub    $0x4,%esp
f0115715:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011571b:	50                   	push   %eax
f011571c:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115722:	50                   	push   %eax
f0115723:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115729:	50                   	push   %eax
f011572a:	e8 b1 98 01 00       	call   f012efe0 <strcconcat>
f011572f:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115732:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115739:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115740:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115747:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f011574b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115752:	00 00 00 
	uint32 num_tables = 0;
f0115755:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011575c:	00 00 00 
	ClearUserSpace(proc_directory);
f011575f:	83 ec 0c             	sub    $0xc,%esp
f0115762:	ff 75 d8             	pushl  -0x28(%ebp)
f0115765:	e8 d8 11 00 00       	call   f0116942 <ClearUserSpace>
f011576a:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011576d:	83 ec 0c             	sub    $0xc,%esp
f0115770:	68 54 81 13 f0       	push   $0xf0138154
f0115775:	e8 b7 b6 fe ff       	call   f0100e31 <cprintf>
f011577a:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011577d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115780:	c1 e0 03             	shl    $0x3,%eax
f0115783:	89 c2                	mov    %eax,%edx
f0115785:	83 ec 0c             	sub    $0xc,%esp
f0115788:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011578e:	50                   	push   %eax
f011578f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115795:	50                   	push   %eax
f0115796:	52                   	push   %edx
f0115797:	6a 00                	push   $0x0
f0115799:	ff 75 d8             	pushl  -0x28(%ebp)
f011579c:	e8 88 30 ff ff       	call   f0108829 <calculate_allocated_space>
f01157a1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157aa:	85 c0                	test   %eax,%eax
f01157ac:	74 27                	je     f01157d5 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157b4:	83 ec 0c             	sub    $0xc,%esp
f01157b7:	6a 00                	push   $0x0
f01157b9:	50                   	push   %eax
f01157ba:	68 c0 82 13 f0       	push   $0xf01382c0
f01157bf:	68 41 06 00 00       	push   $0x641
f01157c4:	68 0e 69 13 f0       	push   $0xf013690e
f01157c9:	e8 f0 ab fe ff       	call   f01003be <_warn>
f01157ce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01157d5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157db:	85 c0                	test   %eax,%eax
f01157dd:	74 27                	je     f0115806 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01157df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157e5:	83 ec 0c             	sub    $0xc,%esp
f01157e8:	6a 00                	push   $0x0
f01157ea:	50                   	push   %eax
f01157eb:	68 20 83 13 f0       	push   $0xf0138320
f01157f0:	68 46 06 00 00       	push   $0x646
f01157f5:	68 0e 69 13 f0       	push   $0xf013690e
f01157fa:	e8 bf ab fe ff       	call   f01003be <_warn>
f01157ff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115802:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115806:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011580a:	74 04                	je     f0115810 <test_calculate_allocated_space+0x19e>
f011580c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115810:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115814:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011581b:	00 00 00 
		num_pages = 0;
f011581e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115825:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115828:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011582b:	c1 e0 02             	shl    $0x2,%eax
f011582e:	89 c2                	mov    %eax,%edx
f0115830:	83 ec 0c             	sub    $0xc,%esp
f0115833:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115839:	50                   	push   %eax
f011583a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115840:	50                   	push   %eax
f0115841:	52                   	push   %edx
f0115842:	6a 00                	push   $0x0
f0115844:	ff 75 d8             	pushl  -0x28(%ebp)
f0115847:	e8 dd 2f ff ff       	call   f0108829 <calculate_allocated_space>
f011584c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011584f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115855:	85 c0                	test   %eax,%eax
f0115857:	74 27                	je     f0115880 <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115859:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011585f:	83 ec 0c             	sub    $0xc,%esp
f0115862:	6a 00                	push   $0x0
f0115864:	50                   	push   %eax
f0115865:	68 c0 82 13 f0       	push   $0xf01382c0
f011586a:	68 52 06 00 00       	push   $0x652
f011586f:	68 0e 69 13 f0       	push   $0xf013690e
f0115874:	e8 45 ab fe ff       	call   f01003be <_warn>
f0115879:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011587c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115880:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115886:	85 c0                	test   %eax,%eax
f0115888:	74 27                	je     f01158b1 <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011588a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115890:	83 ec 0c             	sub    $0xc,%esp
f0115893:	6a 00                	push   $0x0
f0115895:	50                   	push   %eax
f0115896:	68 20 83 13 f0       	push   $0xf0138320
f011589b:	68 57 06 00 00       	push   $0x657
f01158a0:	68 0e 69 13 f0       	push   $0xf013690e
f01158a5:	e8 14 ab fe ff       	call   f01003be <_warn>
f01158aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158b5:	74 04                	je     f01158bb <test_calculate_allocated_space+0x249>
f01158b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01158bf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158c6:	00 00 00 
		num_pages = 0;
f01158c9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158d0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01158d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158d6:	c1 e0 0a             	shl    $0xa,%eax
f01158d9:	89 c2                	mov    %eax,%edx
f01158db:	83 ec 0c             	sub    $0xc,%esp
f01158de:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158e4:	50                   	push   %eax
f01158e5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158eb:	50                   	push   %eax
f01158ec:	52                   	push   %edx
f01158ed:	6a 00                	push   $0x0
f01158ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01158f2:	e8 32 2f ff ff       	call   f0108829 <calculate_allocated_space>
f01158f7:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01158fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115900:	85 c0                	test   %eax,%eax
f0115902:	74 27                	je     f011592b <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115904:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011590a:	83 ec 0c             	sub    $0xc,%esp
f011590d:	6a 00                	push   $0x0
f011590f:	50                   	push   %eax
f0115910:	68 c0 82 13 f0       	push   $0xf01382c0
f0115915:	68 63 06 00 00       	push   $0x663
f011591a:	68 0e 69 13 f0       	push   $0xf013690e
f011591f:	e8 9a aa fe ff       	call   f01003be <_warn>
f0115924:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115927:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011592b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115931:	85 c0                	test   %eax,%eax
f0115933:	74 27                	je     f011595c <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115935:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011593b:	83 ec 0c             	sub    $0xc,%esp
f011593e:	6a 00                	push   $0x0
f0115940:	50                   	push   %eax
f0115941:	68 20 83 13 f0       	push   $0xf0138320
f0115946:	68 68 06 00 00       	push   $0x668
f011594b:	68 0e 69 13 f0       	push   $0xf013690e
f0115950:	e8 69 aa fe ff       	call   f01003be <_warn>
f0115955:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115958:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011595c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115960:	74 04                	je     f0115966 <test_calculate_allocated_space+0x2f4>
f0115962:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115966:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f011596a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115971:	00 00 00 
		num_pages = 0;
f0115974:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011597b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f011597e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115981:	89 d0                	mov    %edx,%eax
f0115983:	01 c0                	add    %eax,%eax
f0115985:	01 d0                	add    %edx,%eax
f0115987:	01 c0                	add    %eax,%eax
f0115989:	05 00 10 00 00       	add    $0x1000,%eax
f011598e:	89 c2                	mov    %eax,%edx
f0115990:	83 ec 0c             	sub    $0xc,%esp
f0115993:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115999:	50                   	push   %eax
f011599a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159a0:	50                   	push   %eax
f01159a1:	52                   	push   %edx
f01159a2:	68 00 10 00 00       	push   $0x1000
f01159a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01159aa:	e8 7a 2e ff ff       	call   f0108829 <calculate_allocated_space>
f01159af:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159b8:	85 c0                	test   %eax,%eax
f01159ba:	74 27                	je     f01159e3 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01159bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159c2:	83 ec 0c             	sub    $0xc,%esp
f01159c5:	6a 00                	push   $0x0
f01159c7:	50                   	push   %eax
f01159c8:	68 c0 82 13 f0       	push   $0xf01382c0
f01159cd:	68 75 06 00 00       	push   $0x675
f01159d2:	68 0e 69 13 f0       	push   $0xf013690e
f01159d7:	e8 e2 a9 fe ff       	call   f01003be <_warn>
f01159dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01159e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159e9:	85 c0                	test   %eax,%eax
f01159eb:	74 27                	je     f0115a14 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01159ed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159f3:	83 ec 0c             	sub    $0xc,%esp
f01159f6:	6a 00                	push   $0x0
f01159f8:	50                   	push   %eax
f01159f9:	68 20 83 13 f0       	push   $0xf0138320
f01159fe:	68 7a 06 00 00       	push   $0x67a
f0115a03:	68 0e 69 13 f0       	push   $0xf013690e
f0115a08:	e8 b1 a9 fe ff       	call   f01003be <_warn>
f0115a0d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a10:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a14:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a18:	74 04                	je     f0115a1e <test_calculate_allocated_space+0x3ac>
f0115a1a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a1e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115a22:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a29:	00 00 00 
		num_pages = 0;
f0115a2c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a33:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115a36:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a39:	89 c2                	mov    %eax,%edx
f0115a3b:	01 d2                	add    %edx,%edx
f0115a3d:	01 d0                	add    %edx,%eax
f0115a3f:	05 00 18 00 00       	add    $0x1800,%eax
f0115a44:	89 c2                	mov    %eax,%edx
f0115a46:	83 ec 0c             	sub    $0xc,%esp
f0115a49:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a4f:	50                   	push   %eax
f0115a50:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a56:	50                   	push   %eax
f0115a57:	52                   	push   %edx
f0115a58:	68 00 18 00 00       	push   $0x1800
f0115a5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a60:	e8 c4 2d ff ff       	call   f0108829 <calculate_allocated_space>
f0115a65:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a68:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a6e:	85 c0                	test   %eax,%eax
f0115a70:	74 27                	je     f0115a99 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a78:	83 ec 0c             	sub    $0xc,%esp
f0115a7b:	6a 00                	push   $0x0
f0115a7d:	50                   	push   %eax
f0115a7e:	68 c0 82 13 f0       	push   $0xf01382c0
f0115a83:	68 86 06 00 00       	push   $0x686
f0115a88:	68 0e 69 13 f0       	push   $0xf013690e
f0115a8d:	e8 2c a9 fe ff       	call   f01003be <_warn>
f0115a92:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a95:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a9f:	85 c0                	test   %eax,%eax
f0115aa1:	74 27                	je     f0115aca <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115aa3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115aa9:	83 ec 0c             	sub    $0xc,%esp
f0115aac:	6a 00                	push   $0x0
f0115aae:	50                   	push   %eax
f0115aaf:	68 20 83 13 f0       	push   $0xf0138320
f0115ab4:	68 8b 06 00 00       	push   $0x68b
f0115ab9:	68 0e 69 13 f0       	push   $0xf013690e
f0115abe:	e8 fb a8 fe ff       	call   f01003be <_warn>
f0115ac3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ac6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115aca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ace:	74 04                	je     f0115ad4 <test_calculate_allocated_space+0x462>
f0115ad0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ad4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115ad8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115adf:	00 00 00 
		num_pages = 0;
f0115ae2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ae9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115aec:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115aef:	89 d0                	mov    %edx,%eax
f0115af1:	c1 e0 02             	shl    $0x2,%eax
f0115af4:	01 d0                	add    %edx,%eax
f0115af6:	01 c0                	add    %eax,%eax
f0115af8:	05 00 00 40 00       	add    $0x400000,%eax
f0115afd:	89 c2                	mov    %eax,%edx
f0115aff:	83 ec 0c             	sub    $0xc,%esp
f0115b02:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b08:	50                   	push   %eax
f0115b09:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b0f:	50                   	push   %eax
f0115b10:	52                   	push   %edx
f0115b11:	68 00 00 40 00       	push   $0x400000
f0115b16:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b19:	e8 0b 2d ff ff       	call   f0108829 <calculate_allocated_space>
f0115b1e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b21:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b27:	85 c0                	test   %eax,%eax
f0115b29:	74 27                	je     f0115b52 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b2b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b31:	83 ec 0c             	sub    $0xc,%esp
f0115b34:	6a 00                	push   $0x0
f0115b36:	50                   	push   %eax
f0115b37:	68 c0 82 13 f0       	push   $0xf01382c0
f0115b3c:	68 97 06 00 00       	push   $0x697
f0115b41:	68 0e 69 13 f0       	push   $0xf013690e
f0115b46:	e8 73 a8 fe ff       	call   f01003be <_warn>
f0115b4b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b4e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b52:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b58:	85 c0                	test   %eax,%eax
f0115b5a:	74 27                	je     f0115b83 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b5c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b62:	83 ec 0c             	sub    $0xc,%esp
f0115b65:	6a 00                	push   $0x0
f0115b67:	50                   	push   %eax
f0115b68:	68 20 83 13 f0       	push   $0xf0138320
f0115b6d:	68 9c 06 00 00       	push   $0x69c
f0115b72:	68 0e 69 13 f0       	push   $0xf013690e
f0115b77:	e8 42 a8 fe ff       	call   f01003be <_warn>
f0115b7c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b83:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b87:	74 04                	je     f0115b8d <test_calculate_allocated_space+0x51b>
f0115b89:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b8d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115b91:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b98:	00 00 00 
		num_pages = 0;
f0115b9b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ba2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115ba5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ba8:	05 00 00 38 00       	add    $0x380000,%eax
f0115bad:	01 c0                	add    %eax,%eax
f0115baf:	89 c2                	mov    %eax,%edx
f0115bb1:	83 ec 0c             	sub    $0xc,%esp
f0115bb4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bba:	50                   	push   %eax
f0115bbb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bc1:	50                   	push   %eax
f0115bc2:	52                   	push   %edx
f0115bc3:	68 00 00 70 00       	push   $0x700000
f0115bc8:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bcb:	e8 59 2c ff ff       	call   f0108829 <calculate_allocated_space>
f0115bd0:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115bd3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bd9:	85 c0                	test   %eax,%eax
f0115bdb:	74 27                	je     f0115c04 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115bdd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115be3:	83 ec 0c             	sub    $0xc,%esp
f0115be6:	6a 00                	push   $0x0
f0115be8:	50                   	push   %eax
f0115be9:	68 c0 82 13 f0       	push   $0xf01382c0
f0115bee:	68 a9 06 00 00       	push   $0x6a9
f0115bf3:	68 0e 69 13 f0       	push   $0xf013690e
f0115bf8:	e8 c1 a7 fe ff       	call   f01003be <_warn>
f0115bfd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c00:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c04:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c0a:	85 c0                	test   %eax,%eax
f0115c0c:	74 27                	je     f0115c35 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c0e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c14:	83 ec 0c             	sub    $0xc,%esp
f0115c17:	6a 00                	push   $0x0
f0115c19:	50                   	push   %eax
f0115c1a:	68 20 83 13 f0       	push   $0xf0138320
f0115c1f:	68 ae 06 00 00       	push   $0x6ae
f0115c24:	68 0e 69 13 f0       	push   $0xf013690e
f0115c29:	e8 90 a7 fe ff       	call   f01003be <_warn>
f0115c2e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c31:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c35:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c39:	74 04                	je     f0115c3f <test_calculate_allocated_space+0x5cd>
f0115c3b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c3f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115c43:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c4a:	00 00 00 
		num_pages = 0;
f0115c4d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c54:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115c57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115c5a:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115c5f:	89 c2                	mov    %eax,%edx
f0115c61:	83 ec 0c             	sub    $0xc,%esp
f0115c64:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c6a:	50                   	push   %eax
f0115c6b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c71:	50                   	push   %eax
f0115c72:	52                   	push   %edx
f0115c73:	68 ff ff 3f 00       	push   $0x3fffff
f0115c78:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c7b:	e8 a9 2b ff ff       	call   f0108829 <calculate_allocated_space>
f0115c80:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c83:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c89:	85 c0                	test   %eax,%eax
f0115c8b:	74 27                	je     f0115cb4 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c8d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c93:	83 ec 0c             	sub    $0xc,%esp
f0115c96:	6a 00                	push   $0x0
f0115c98:	50                   	push   %eax
f0115c99:	68 c0 82 13 f0       	push   $0xf01382c0
f0115c9e:	68 ba 06 00 00       	push   $0x6ba
f0115ca3:	68 0e 69 13 f0       	push   $0xf013690e
f0115ca8:	e8 11 a7 fe ff       	call   f01003be <_warn>
f0115cad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cb0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115cb4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cba:	85 c0                	test   %eax,%eax
f0115cbc:	74 27                	je     f0115ce5 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115cbe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cc4:	83 ec 0c             	sub    $0xc,%esp
f0115cc7:	6a 00                	push   $0x0
f0115cc9:	50                   	push   %eax
f0115cca:	68 20 83 13 f0       	push   $0xf0138320
f0115ccf:	68 bf 06 00 00       	push   $0x6bf
f0115cd4:	68 0e 69 13 f0       	push   $0xf013690e
f0115cd9:	e8 e0 a6 fe ff       	call   f01003be <_warn>
f0115cde:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ce1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115ce5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ce9:	74 04                	je     f0115cef <test_calculate_allocated_space+0x67d>
f0115ceb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115cef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115cf3:	83 ec 0c             	sub    $0xc,%esp
f0115cf6:	68 c1 7c 13 f0       	push   $0xf0137cc1
f0115cfb:	e8 31 b1 fe ff       	call   f0100e31 <cprintf>
f0115d00:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115d03:	83 ec 0c             	sub    $0xc,%esp
f0115d06:	68 e0 81 13 f0       	push   $0xf01381e0
f0115d0b:	e8 21 b1 fe ff       	call   f0100e31 <cprintf>
f0115d10:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115d13:	83 ec 04             	sub    $0x4,%esp
f0115d16:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115d1c:	50                   	push   %eax
f0115d1d:	68 7a 70 13 f0       	push   $0xf013707a
f0115d22:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d28:	50                   	push   %eax
f0115d29:	e8 b2 92 01 00       	call   f012efe0 <strcconcat>
f0115d2e:	83 c4 10             	add    $0x10,%esp
f0115d31:	83 ec 0c             	sub    $0xc,%esp
f0115d34:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115d3a:	50                   	push   %eax
f0115d3b:	e8 83 be fe ff       	call   f0101bc3 <execute_command>
f0115d40:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115d43:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d4a:	00 00 00 
		num_pages = 0;
f0115d4d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d54:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115d57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115d5a:	c1 e0 03             	shl    $0x3,%eax
f0115d5d:	89 c2                	mov    %eax,%edx
f0115d5f:	83 ec 0c             	sub    $0xc,%esp
f0115d62:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d68:	50                   	push   %eax
f0115d69:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d6f:	50                   	push   %eax
f0115d70:	52                   	push   %edx
f0115d71:	6a 00                	push   $0x0
f0115d73:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d76:	e8 ae 2a ff ff       	call   f0108829 <calculate_allocated_space>
f0115d7b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115d7e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115d85:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d92:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d95:	74 28                	je     f0115dbf <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d97:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d9d:	83 ec 0c             	sub    $0xc,%esp
f0115da0:	ff 75 c8             	pushl  -0x38(%ebp)
f0115da3:	50                   	push   %eax
f0115da4:	68 c0 82 13 f0       	push   $0xf01382c0
f0115da9:	68 d6 06 00 00       	push   $0x6d6
f0115dae:	68 0e 69 13 f0       	push   $0xf013690e
f0115db3:	e8 06 a6 fe ff       	call   f01003be <_warn>
f0115db8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dbb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115dbf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dc5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115dc8:	74 28                	je     f0115df2 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115dca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dd0:	83 ec 0c             	sub    $0xc,%esp
f0115dd3:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115dd6:	50                   	push   %eax
f0115dd7:	68 20 83 13 f0       	push   $0xf0138320
f0115ddc:	68 db 06 00 00       	push   $0x6db
f0115de1:	68 0e 69 13 f0       	push   $0xf013690e
f0115de6:	e8 d3 a5 fe ff       	call   f01003be <_warn>
f0115deb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115df2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115df6:	74 04                	je     f0115dfc <test_calculate_allocated_space+0x78a>
f0115df8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dfc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115e00:	83 ec 04             	sub    $0x4,%esp
f0115e03:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e09:	50                   	push   %eax
f0115e0a:	68 87 70 13 f0       	push   $0xf0137087
f0115e0f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e15:	50                   	push   %eax
f0115e16:	e8 c5 91 01 00       	call   f012efe0 <strcconcat>
f0115e1b:	83 c4 10             	add    $0x10,%esp
f0115e1e:	83 ec 0c             	sub    $0xc,%esp
f0115e21:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e27:	50                   	push   %eax
f0115e28:	e8 96 bd fe ff       	call   f0101bc3 <execute_command>
f0115e2d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115e30:	83 ec 04             	sub    $0x4,%esp
f0115e33:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115e39:	50                   	push   %eax
f0115e3a:	68 14 82 13 f0       	push   $0xf0138214
f0115e3f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e45:	50                   	push   %eax
f0115e46:	e8 95 91 01 00       	call   f012efe0 <strcconcat>
f0115e4b:	83 c4 10             	add    $0x10,%esp
f0115e4e:	83 ec 0c             	sub    $0xc,%esp
f0115e51:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115e57:	50                   	push   %eax
f0115e58:	e8 66 bd fe ff       	call   f0101bc3 <execute_command>
f0115e5d:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115e60:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e67:	00 00 00 
		num_pages = 0;
f0115e6a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e71:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115e74:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e77:	c1 e0 03             	shl    $0x3,%eax
f0115e7a:	89 c2                	mov    %eax,%edx
f0115e7c:	83 ec 0c             	sub    $0xc,%esp
f0115e7f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e85:	50                   	push   %eax
f0115e86:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e8c:	50                   	push   %eax
f0115e8d:	52                   	push   %edx
f0115e8e:	6a 00                	push   $0x0
f0115e90:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e93:	e8 91 29 ff ff       	call   f0108829 <calculate_allocated_space>
f0115e98:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115e9b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115ea2:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ea9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115eaf:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115eb2:	74 28                	je     f0115edc <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115eb4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115eba:	83 ec 0c             	sub    $0xc,%esp
f0115ebd:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ec0:	50                   	push   %eax
f0115ec1:	68 c0 82 13 f0       	push   $0xf01382c0
f0115ec6:	68 ec 06 00 00       	push   $0x6ec
f0115ecb:	68 0e 69 13 f0       	push   $0xf013690e
f0115ed0:	e8 e9 a4 fe ff       	call   f01003be <_warn>
f0115ed5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ed8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115edc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ee2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ee5:	74 28                	je     f0115f0f <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ee7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eed:	83 ec 0c             	sub    $0xc,%esp
f0115ef0:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ef3:	50                   	push   %eax
f0115ef4:	68 20 83 13 f0       	push   $0xf0138320
f0115ef9:	68 f1 06 00 00       	push   $0x6f1
f0115efe:	68 0e 69 13 f0       	push   $0xf013690e
f0115f03:	e8 b6 a4 fe ff       	call   f01003be <_warn>
f0115f08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f0f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f13:	74 04                	je     f0115f19 <test_calculate_allocated_space+0x8a7>
f0115f15:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f19:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115f1d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f24:	00 00 00 
		num_pages = 0;
f0115f27:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f2e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115f31:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f34:	c1 e0 0a             	shl    $0xa,%eax
f0115f37:	89 c2                	mov    %eax,%edx
f0115f39:	83 ec 0c             	sub    $0xc,%esp
f0115f3c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f42:	50                   	push   %eax
f0115f43:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f49:	50                   	push   %eax
f0115f4a:	52                   	push   %edx
f0115f4b:	6a 00                	push   $0x0
f0115f4d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f50:	e8 d4 28 ff ff       	call   f0108829 <calculate_allocated_space>
f0115f55:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115f58:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115f5f:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115f66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f6c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115f6f:	74 28                	je     f0115f99 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115f71:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f77:	83 ec 0c             	sub    $0xc,%esp
f0115f7a:	ff 75 c8             	pushl  -0x38(%ebp)
f0115f7d:	50                   	push   %eax
f0115f7e:	68 c0 82 13 f0       	push   $0xf01382c0
f0115f83:	68 ff 06 00 00       	push   $0x6ff
f0115f88:	68 0e 69 13 f0       	push   $0xf013690e
f0115f8d:	e8 2c a4 fe ff       	call   f01003be <_warn>
f0115f92:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f95:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115f99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f9f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115fa2:	74 28                	je     f0115fcc <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115fa4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115faa:	83 ec 0c             	sub    $0xc,%esp
f0115fad:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115fb0:	50                   	push   %eax
f0115fb1:	68 20 83 13 f0       	push   $0xf0138320
f0115fb6:	68 04 07 00 00       	push   $0x704
f0115fbb:	68 0e 69 13 f0       	push   $0xf013690e
f0115fc0:	e8 f9 a3 fe ff       	call   f01003be <_warn>
f0115fc5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fc8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115fcc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fd0:	74 04                	je     f0115fd6 <test_calculate_allocated_space+0x964>
f0115fd2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115fd6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115fda:	83 ec 04             	sub    $0x4,%esp
f0115fdd:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115fe3:	50                   	push   %eax
f0115fe4:	68 20 82 13 f0       	push   $0xf0138220
f0115fe9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fef:	50                   	push   %eax
f0115ff0:	e8 eb 8f 01 00       	call   f012efe0 <strcconcat>
f0115ff5:	83 c4 10             	add    $0x10,%esp
f0115ff8:	83 ec 0c             	sub    $0xc,%esp
f0115ffb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116001:	50                   	push   %eax
f0116002:	e8 bc bb fe ff       	call   f0101bc3 <execute_command>
f0116007:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011600a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116011:	00 00 00 
		num_pages = 0;
f0116014:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011601b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011601e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116021:	89 c2                	mov    %eax,%edx
f0116023:	01 d2                	add    %edx,%edx
f0116025:	01 d0                	add    %edx,%eax
f0116027:	05 00 18 00 00       	add    $0x1800,%eax
f011602c:	89 c2                	mov    %eax,%edx
f011602e:	83 ec 0c             	sub    $0xc,%esp
f0116031:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116037:	50                   	push   %eax
f0116038:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011603e:	50                   	push   %eax
f011603f:	52                   	push   %edx
f0116040:	68 00 18 00 00       	push   $0x1800
f0116045:	ff 75 d8             	pushl  -0x28(%ebp)
f0116048:	e8 dc 27 ff ff       	call   f0108829 <calculate_allocated_space>
f011604d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116050:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116057:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011605e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116064:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116067:	74 28                	je     f0116091 <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116069:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011606f:	83 ec 0c             	sub    $0xc,%esp
f0116072:	ff 75 c8             	pushl  -0x38(%ebp)
f0116075:	50                   	push   %eax
f0116076:	68 c0 82 13 f0       	push   $0xf01382c0
f011607b:	68 15 07 00 00       	push   $0x715
f0116080:	68 0e 69 13 f0       	push   $0xf013690e
f0116085:	e8 34 a3 fe ff       	call   f01003be <_warn>
f011608a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011608d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116091:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116097:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011609a:	74 28                	je     f01160c4 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011609c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160a2:	83 ec 0c             	sub    $0xc,%esp
f01160a5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01160a8:	50                   	push   %eax
f01160a9:	68 20 83 13 f0       	push   $0xf0138320
f01160ae:	68 1a 07 00 00       	push   $0x71a
f01160b3:	68 0e 69 13 f0       	push   $0xf013690e
f01160b8:	e8 01 a3 fe ff       	call   f01003be <_warn>
f01160bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01160c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160c8:	74 04                	je     f01160ce <test_calculate_allocated_space+0xa5c>
f01160ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01160ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01160d2:	83 ec 04             	sub    $0x4,%esp
f01160d5:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160db:	50                   	push   %eax
f01160dc:	68 e0 72 13 f0       	push   $0xf01372e0
f01160e1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160e7:	50                   	push   %eax
f01160e8:	e8 f3 8e 01 00       	call   f012efe0 <strcconcat>
f01160ed:	83 c4 10             	add    $0x10,%esp
f01160f0:	83 ec 0c             	sub    $0xc,%esp
f01160f3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160f9:	50                   	push   %eax
f01160fa:	e8 c4 ba fe ff       	call   f0101bc3 <execute_command>
f01160ff:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116102:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116109:	00 00 00 
		num_pages = 0;
f011610c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116113:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116116:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116119:	89 d0                	mov    %edx,%eax
f011611b:	c1 e0 02             	shl    $0x2,%eax
f011611e:	01 d0                	add    %edx,%eax
f0116120:	01 c0                	add    %eax,%eax
f0116122:	05 00 00 40 00       	add    $0x400000,%eax
f0116127:	89 c2                	mov    %eax,%edx
f0116129:	83 ec 0c             	sub    $0xc,%esp
f011612c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116132:	50                   	push   %eax
f0116133:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116139:	50                   	push   %eax
f011613a:	52                   	push   %edx
f011613b:	68 00 00 40 00       	push   $0x400000
f0116140:	ff 75 d8             	pushl  -0x28(%ebp)
f0116143:	e8 e1 26 ff ff       	call   f0108829 <calculate_allocated_space>
f0116148:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011614b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116152:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116159:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011615f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116162:	74 28                	je     f011618c <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116164:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011616a:	83 ec 0c             	sub    $0xc,%esp
f011616d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116170:	50                   	push   %eax
f0116171:	68 c0 82 13 f0       	push   $0xf01382c0
f0116176:	68 2a 07 00 00       	push   $0x72a
f011617b:	68 0e 69 13 f0       	push   $0xf013690e
f0116180:	e8 39 a2 fe ff       	call   f01003be <_warn>
f0116185:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116188:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011618c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116192:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116195:	74 28                	je     f01161bf <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116197:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011619d:	83 ec 0c             	sub    $0xc,%esp
f01161a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161a3:	50                   	push   %eax
f01161a4:	68 20 83 13 f0       	push   $0xf0138320
f01161a9:	68 2f 07 00 00       	push   $0x72f
f01161ae:	68 0e 69 13 f0       	push   $0xf013690e
f01161b3:	e8 06 a2 fe ff       	call   f01003be <_warn>
f01161b8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161bb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161bf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161c3:	74 04                	je     f01161c9 <test_calculate_allocated_space+0xb57>
f01161c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161c9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01161cd:	83 ec 04             	sub    $0x4,%esp
f01161d0:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161d6:	50                   	push   %eax
f01161d7:	68 ea 72 13 f0       	push   $0xf01372ea
f01161dc:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01161e2:	50                   	push   %eax
f01161e3:	e8 f8 8d 01 00       	call   f012efe0 <strcconcat>
f01161e8:	83 c4 10             	add    $0x10,%esp
f01161eb:	83 ec 0c             	sub    $0xc,%esp
f01161ee:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161f4:	50                   	push   %eax
f01161f5:	e8 c9 b9 fe ff       	call   f0101bc3 <execute_command>
f01161fa:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01161fd:	83 ec 04             	sub    $0x4,%esp
f0116200:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116206:	50                   	push   %eax
f0116207:	68 28 82 13 f0       	push   $0xf0138228
f011620c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116212:	50                   	push   %eax
f0116213:	e8 c8 8d 01 00       	call   f012efe0 <strcconcat>
f0116218:	83 c4 10             	add    $0x10,%esp
f011621b:	83 ec 0c             	sub    $0xc,%esp
f011621e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116224:	50                   	push   %eax
f0116225:	e8 99 b9 fe ff       	call   f0101bc3 <execute_command>
f011622a:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011622d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116234:	00 00 00 
		num_pages = 0;
f0116237:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011623e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0116241:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116244:	05 00 00 38 00       	add    $0x380000,%eax
f0116249:	01 c0                	add    %eax,%eax
f011624b:	89 c2                	mov    %eax,%edx
f011624d:	83 ec 0c             	sub    $0xc,%esp
f0116250:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116256:	50                   	push   %eax
f0116257:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011625d:	50                   	push   %eax
f011625e:	52                   	push   %edx
f011625f:	68 00 00 70 00       	push   $0x700000
f0116264:	ff 75 d8             	pushl  -0x28(%ebp)
f0116267:	e8 bd 25 ff ff       	call   f0108829 <calculate_allocated_space>
f011626c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011626f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116276:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011627d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116283:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116286:	74 28                	je     f01162b0 <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116288:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011628e:	83 ec 0c             	sub    $0xc,%esp
f0116291:	ff 75 c8             	pushl  -0x38(%ebp)
f0116294:	50                   	push   %eax
f0116295:	68 c0 82 13 f0       	push   $0xf01382c0
f011629a:	68 41 07 00 00       	push   $0x741
f011629f:	68 0e 69 13 f0       	push   $0xf013690e
f01162a4:	e8 15 a1 fe ff       	call   f01003be <_warn>
f01162a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162b6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162b9:	74 28                	je     f01162e3 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162bb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162c1:	83 ec 0c             	sub    $0xc,%esp
f01162c4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162c7:	50                   	push   %eax
f01162c8:	68 20 83 13 f0       	push   $0xf0138320
f01162cd:	68 46 07 00 00       	push   $0x746
f01162d2:	68 0e 69 13 f0       	push   $0xf013690e
f01162d7:	e8 e2 a0 fe ff       	call   f01003be <_warn>
f01162dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01162e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162e7:	74 04                	je     f01162ed <test_calculate_allocated_space+0xc7b>
f01162e9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01162ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01162f1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162f8:	00 00 00 
		num_pages = 0;
f01162fb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116302:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116305:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116308:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011630d:	89 c2                	mov    %eax,%edx
f011630f:	83 ec 0c             	sub    $0xc,%esp
f0116312:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116318:	50                   	push   %eax
f0116319:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011631f:	50                   	push   %eax
f0116320:	52                   	push   %edx
f0116321:	68 ff ff 3f 00       	push   $0x3fffff
f0116326:	ff 75 d8             	pushl  -0x28(%ebp)
f0116329:	e8 fb 24 ff ff       	call   f0108829 <calculate_allocated_space>
f011632e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116331:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116338:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011633f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116345:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116348:	74 28                	je     f0116372 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011634a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116350:	83 ec 0c             	sub    $0xc,%esp
f0116353:	ff 75 c8             	pushl  -0x38(%ebp)
f0116356:	50                   	push   %eax
f0116357:	68 c0 82 13 f0       	push   $0xf01382c0
f011635c:	68 54 07 00 00       	push   $0x754
f0116361:	68 0e 69 13 f0       	push   $0xf013690e
f0116366:	e8 53 a0 fe ff       	call   f01003be <_warn>
f011636b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011636e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116372:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116378:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011637b:	74 28                	je     f01163a5 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011637d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116383:	83 ec 0c             	sub    $0xc,%esp
f0116386:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116389:	50                   	push   %eax
f011638a:	68 20 83 13 f0       	push   $0xf0138320
f011638f:	68 59 07 00 00       	push   $0x759
f0116394:	68 0e 69 13 f0       	push   $0xf013690e
f0116399:	e8 20 a0 fe ff       	call   f01003be <_warn>
f011639e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01163a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163a9:	74 04                	je     f01163af <test_calculate_allocated_space+0xd3d>
f01163ab:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01163af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01163b3:	83 ec 0c             	sub    $0xc,%esp
f01163b6:	68 9b 72 13 f0       	push   $0xf013729b
f01163bb:	e8 71 aa fe ff       	call   f0100e31 <cprintf>
f01163c0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01163c3:	83 ec 08             	sub    $0x8,%esp
f01163c6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01163c9:	68 7c 83 13 f0       	push   $0xf013837c
f01163ce:	e8 5e aa fe ff       	call   f0100e31 <cprintf>
f01163d3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01163d6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01163da:	75 10                	jne    f01163ec <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01163dc:	83 ec 0c             	sub    $0xc,%esp
f01163df:	68 bc 83 13 f0       	push   $0xf01383bc
f01163e4:	e8 48 aa fe ff       	call   f0100e31 <cprintf>
f01163e9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01163ec:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01163f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01163f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01163f7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01163fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01163ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116402:	5b                   	pop    %ebx
f0116403:	5e                   	pop    %esi
f0116404:	5f                   	pop    %edi
f0116405:	5d                   	pop    %ebp
f0116406:	c3                   	ret    

f0116407 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116407:	55                   	push   %ebp
f0116408:	89 e5                	mov    %esp,%ebp
f011640a:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011640d:	8b 45 10             	mov    0x10(%ebp),%eax
f0116410:	ba 01 00 00 00       	mov    $0x1,%edx
f0116415:	88 c1                	mov    %al,%cl
f0116417:	d3 e2                	shl    %cl,%edx
f0116419:	89 d0                	mov    %edx,%eax
f011641b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011641e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116421:	c1 e8 16             	shr    $0x16,%eax
f0116424:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011642b:	8b 45 08             	mov    0x8(%ebp),%eax
f011642e:	01 d0                	add    %edx,%eax
f0116430:	8b 00                	mov    (%eax),%eax
f0116432:	83 e0 01             	and    $0x1,%eax
f0116435:	85 c0                	test   %eax,%eax
f0116437:	75 07                	jne    f0116440 <CB+0x39>
f0116439:	b8 00 00 00 00       	mov    $0x0,%eax
f011643e:	eb 76                	jmp    f01164b6 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116440:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116443:	c1 e8 16             	shr    $0x16,%eax
f0116446:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011644d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116450:	01 d0                	add    %edx,%eax
f0116452:	8b 00                	mov    (%eax),%eax
f0116454:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116459:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011645c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011645f:	c1 e8 0c             	shr    $0xc,%eax
f0116462:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116465:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f011646a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011646d:	72 17                	jb     f0116486 <CB+0x7f>
f011646f:	ff 75 f0             	pushl  -0x10(%ebp)
f0116472:	68 08 84 13 f0       	push   $0xf0138408
f0116477:	68 74 07 00 00       	push   $0x774
f011647c:	68 0e 69 13 f0       	push   $0xf013690e
f0116481:	e8 2a 9d fe ff       	call   f01001b0 <_panic>
f0116486:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116489:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011648e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116491:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116494:	c1 e8 0c             	shr    $0xc,%eax
f0116497:	25 ff 03 00 00       	and    $0x3ff,%eax
f011649c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01164a6:	01 d0                	add    %edx,%eax
f01164a8:	8b 00                	mov    (%eax),%eax
f01164aa:	23 45 f4             	and    -0xc(%ebp),%eax
f01164ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01164b0:	0f 94 c0             	sete   %al
f01164b3:	0f b6 c0             	movzbl %al,%eax
}
f01164b6:	c9                   	leave  
f01164b7:	c3                   	ret    

f01164b8 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01164b8:	55                   	push   %ebp
f01164b9:	89 e5                	mov    %esp,%ebp
f01164bb:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01164be:	8b 45 10             	mov    0x10(%ebp),%eax
f01164c1:	ba 01 00 00 00       	mov    $0x1,%edx
f01164c6:	88 c1                	mov    %al,%cl
f01164c8:	d3 e2                	shl    %cl,%edx
f01164ca:	89 d0                	mov    %edx,%eax
f01164cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01164cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01164d2:	c1 e8 16             	shr    $0x16,%eax
f01164d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01164df:	01 d0                	add    %edx,%eax
f01164e1:	8b 00                	mov    (%eax),%eax
f01164e3:	83 e0 01             	and    $0x1,%eax
f01164e6:	85 c0                	test   %eax,%eax
f01164e8:	75 0a                	jne    f01164f4 <SB+0x3c>
f01164ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01164ef:	e9 cd 00 00 00       	jmp    f01165c1 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01164f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01164f7:	c1 e8 16             	shr    $0x16,%eax
f01164fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116501:	8b 45 08             	mov    0x8(%ebp),%eax
f0116504:	01 d0                	add    %edx,%eax
f0116506:	8b 00                	mov    (%eax),%eax
f0116508:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011650d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116510:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116513:	c1 e8 0c             	shr    $0xc,%eax
f0116516:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116519:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f011651e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116521:	72 17                	jb     f011653a <SB+0x82>
f0116523:	ff 75 f0             	pushl  -0x10(%ebp)
f0116526:	68 08 84 13 f0       	push   $0xf0138408
f011652b:	68 7c 07 00 00       	push   $0x77c
f0116530:	68 0e 69 13 f0       	push   $0xf013690e
f0116535:	e8 76 9c fe ff       	call   f01001b0 <_panic>
f011653a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011653d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116542:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116545:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116549:	74 3c                	je     f0116587 <SB+0xcf>
f011654b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011654e:	c1 e8 0c             	shr    $0xc,%eax
f0116551:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116556:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011655d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116560:	01 d0                	add    %edx,%eax
f0116562:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116565:	c1 ea 0c             	shr    $0xc,%edx
f0116568:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011656e:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116575:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116578:	01 ca                	add    %ecx,%edx
f011657a:	8b 12                	mov    (%edx),%edx
f011657c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011657f:	f7 d1                	not    %ecx
f0116581:	21 ca                	and    %ecx,%edx
f0116583:	89 10                	mov    %edx,(%eax)
f0116585:	eb 35                	jmp    f01165bc <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116587:	8b 45 0c             	mov    0xc(%ebp),%eax
f011658a:	c1 e8 0c             	shr    $0xc,%eax
f011658d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116592:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116599:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011659c:	01 c2                	add    %eax,%edx
f011659e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165a1:	c1 e8 0c             	shr    $0xc,%eax
f01165a4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01165a9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01165b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01165b3:	01 c8                	add    %ecx,%eax
f01165b5:	8b 00                	mov    (%eax),%eax
f01165b7:	0b 45 f4             	or     -0xc(%ebp),%eax
f01165ba:	89 02                	mov    %eax,(%edx)
	return 0;
f01165bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01165c1:	c9                   	leave  
f01165c2:	c3                   	ret    

f01165c3 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01165c3:	55                   	push   %ebp
f01165c4:	89 e5                	mov    %esp,%ebp
f01165c6:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01165c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165cc:	c1 e8 16             	shr    $0x16,%eax
f01165cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01165d9:	01 d0                	add    %edx,%eax
f01165db:	8b 00                	mov    (%eax),%eax
f01165dd:	83 e0 01             	and    $0x1,%eax
f01165e0:	85 c0                	test   %eax,%eax
f01165e2:	75 0a                	jne    f01165ee <CPs+0x2b>
f01165e4:	b8 00 00 00 00       	mov    $0x0,%eax
f01165e9:	e9 b8 00 00 00       	jmp    f01166a6 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01165ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165f1:	c1 e8 16             	shr    $0x16,%eax
f01165f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01165fe:	01 d0                	add    %edx,%eax
f0116600:	8b 00                	mov    (%eax),%eax
f0116602:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116607:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011660a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011660d:	c1 e8 0c             	shr    $0xc,%eax
f0116610:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116613:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116618:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011661b:	72 17                	jb     f0116634 <CPs+0x71>
f011661d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116620:	68 08 84 13 f0       	push   $0xf0138408
f0116625:	68 85 07 00 00       	push   $0x785
f011662a:	68 0e 69 13 f0       	push   $0xf013690e
f011662f:	e8 7c 9b fe ff       	call   f01001b0 <_panic>
f0116634:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116637:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011663c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f011663f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116646:	eb 53                	jmp    f011669b <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116648:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011664b:	ba 01 00 00 00       	mov    $0x1,%edx
f0116650:	88 c1                	mov    %al,%cl
f0116652:	d3 e2                	shl    %cl,%edx
f0116654:	89 d0                	mov    %edx,%eax
f0116656:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116659:	8b 45 14             	mov    0x14(%ebp),%eax
f011665c:	23 45 e4             	and    -0x1c(%ebp),%eax
f011665f:	85 c0                	test   %eax,%eax
f0116661:	74 34                	je     f0116697 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116666:	c1 e8 0c             	shr    $0xc,%eax
f0116669:	25 ff 03 00 00       	and    $0x3ff,%eax
f011666e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116678:	01 d0                	add    %edx,%eax
f011667a:	8b 00                	mov    (%eax),%eax
f011667c:	33 45 10             	xor    0x10(%ebp),%eax
f011667f:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116682:	85 c0                	test   %eax,%eax
f0116684:	0f 94 c0             	sete   %al
f0116687:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f011668a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011668e:	75 08                	jne    f0116698 <CPs+0xd5>
f0116690:	b8 00 00 00 00       	mov    $0x0,%eax
f0116695:	eb 0f                	jmp    f01166a6 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116697:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116698:	ff 45 f4             	incl   -0xc(%ebp)
f011669b:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f011669f:	7e a7                	jle    f0116648 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f01166a1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01166a6:	c9                   	leave  
f01166a7:	c3                   	ret    

f01166a8 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f01166a8:	55                   	push   %ebp
f01166a9:	89 e5                	mov    %esp,%ebp
f01166ab:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166b1:	c1 e8 16             	shr    $0x16,%eax
f01166b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01166be:	01 d0                	add    %edx,%eax
f01166c0:	8b 00                	mov    (%eax),%eax
f01166c2:	83 e0 01             	and    $0x1,%eax
f01166c5:	85 c0                	test   %eax,%eax
f01166c7:	75 07                	jne    f01166d0 <CA+0x28>
f01166c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01166ce:	eb 6f                	jmp    f011673f <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01166d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166d3:	c1 e8 16             	shr    $0x16,%eax
f01166d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01166e0:	01 d0                	add    %edx,%eax
f01166e2:	8b 00                	mov    (%eax),%eax
f01166e4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01166e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01166ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01166ef:	c1 e8 0c             	shr    $0xc,%eax
f01166f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01166f5:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01166fa:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01166fd:	72 17                	jb     f0116716 <CA+0x6e>
f01166ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0116702:	68 08 84 13 f0       	push   $0xf0138408
f0116707:	68 94 07 00 00       	push   $0x794
f011670c:	68 0e 69 13 f0       	push   $0xf013690e
f0116711:	e8 9a 9a fe ff       	call   f01001b0 <_panic>
f0116716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116719:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011671e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116721:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116724:	c1 e8 0c             	shr    $0xc,%eax
f0116727:	25 ff 03 00 00       	and    $0x3ff,%eax
f011672c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116736:	01 d0                	add    %edx,%eax
f0116738:	8b 00                	mov    (%eax),%eax
f011673a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f011673f:	c9                   	leave  
f0116740:	c3                   	ret    

f0116741 <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116741:	55                   	push   %ebp
f0116742:	89 e5                	mov    %esp,%ebp
f0116744:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116747:	8b 45 0c             	mov    0xc(%ebp),%eax
f011674a:	c1 e8 16             	shr    $0x16,%eax
f011674d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116754:	8b 45 08             	mov    0x8(%ebp),%eax
f0116757:	01 d0                	add    %edx,%eax
f0116759:	8b 00                	mov    (%eax),%eax
f011675b:	83 e0 01             	and    $0x1,%eax
f011675e:	85 c0                	test   %eax,%eax
f0116760:	75 07                	jne    f0116769 <CE+0x28>
f0116762:	b8 00 00 00 00       	mov    $0x0,%eax
f0116767:	eb 7a                	jmp    f01167e3 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116769:	8b 45 0c             	mov    0xc(%ebp),%eax
f011676c:	c1 e8 16             	shr    $0x16,%eax
f011676f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116776:	8b 45 08             	mov    0x8(%ebp),%eax
f0116779:	01 d0                	add    %edx,%eax
f011677b:	8b 00                	mov    (%eax),%eax
f011677d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116782:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116785:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116788:	c1 e8 0c             	shr    $0xc,%eax
f011678b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011678e:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116793:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116796:	72 17                	jb     f01167af <CE+0x6e>
f0116798:	ff 75 f4             	pushl  -0xc(%ebp)
f011679b:	68 08 84 13 f0       	push   $0xf0138408
f01167a0:	68 9b 07 00 00       	push   $0x79b
f01167a5:	68 0e 69 13 f0       	push   $0xf013690e
f01167aa:	e8 01 9a fe ff       	call   f01001b0 <_panic>
f01167af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167b2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01167b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01167ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167bd:	c1 e8 0c             	shr    $0xc,%eax
f01167c0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01167c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01167cf:	01 d0                	add    %edx,%eax
f01167d1:	8b 00                	mov    (%eax),%eax
f01167d3:	85 c0                	test   %eax,%eax
f01167d5:	74 07                	je     f01167de <CE+0x9d>
f01167d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01167dc:	eb 05                	jmp    f01167e3 <CE+0xa2>
	return 1;
f01167de:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01167e3:	c9                   	leave  
f01167e4:	c3                   	ret    

f01167e5 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01167e5:	55                   	push   %ebp
f01167e6:	89 e5                	mov    %esp,%ebp
f01167e8:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f01167eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167ee:	c1 e8 16             	shr    $0x16,%eax
f01167f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01167fb:	01 d0                	add    %edx,%eax
f01167fd:	8b 00                	mov    (%eax),%eax
f01167ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116802:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116805:	83 e0 01             	and    $0x1,%eax
f0116808:	85 c0                	test   %eax,%eax
f011680a:	0f 84 92 00 00 00    	je     f01168a2 <CP+0xbd>
	{
		uint32 *t = NULL;
f0116810:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116817:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011681a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011681f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116822:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116825:	c1 e8 0c             	shr    $0xc,%eax
f0116828:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011682b:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116830:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116833:	72 17                	jb     f011684c <CP+0x67>
f0116835:	ff 75 ec             	pushl  -0x14(%ebp)
f0116838:	68 08 84 13 f0       	push   $0xf0138408
f011683d:	68 a7 07 00 00       	push   $0x7a7
f0116842:	68 0e 69 13 f0       	push   $0xf013690e
f0116847:	e8 64 99 fe ff       	call   f01001b0 <_panic>
f011684c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011684f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116854:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116857:	8b 45 0c             	mov    0xc(%ebp),%eax
f011685a:	c1 e8 0c             	shr    $0xc,%eax
f011685d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116862:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116869:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011686c:	01 d0                	add    %edx,%eax
f011686e:	8b 00                	mov    (%eax),%eax
f0116870:	23 45 10             	and    0x10(%ebp),%eax
f0116873:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116876:	75 2a                	jne    f01168a2 <CP+0xbd>
f0116878:	8b 45 0c             	mov    0xc(%ebp),%eax
f011687b:	c1 e8 0c             	shr    $0xc,%eax
f011687e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116883:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011688a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011688d:	01 d0                	add    %edx,%eax
f011688f:	8b 00                	mov    (%eax),%eax
f0116891:	f7 d0                	not    %eax
f0116893:	23 45 14             	and    0x14(%ebp),%eax
f0116896:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116899:	75 07                	jne    f01168a2 <CP+0xbd>
			return 1;
f011689b:	b8 01 00 00 00       	mov    $0x1,%eax
f01168a0:	eb 05                	jmp    f01168a7 <CP+0xc2>
	}
	return 0;
f01168a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01168a7:	c9                   	leave  
f01168a8:	c3                   	ret    

f01168a9 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01168a9:	55                   	push   %ebp
f01168aa:	89 e5                	mov    %esp,%ebp
f01168ac:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01168af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168b2:	c1 e8 16             	shr    $0x16,%eax
f01168b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01168bf:	01 d0                	add    %edx,%eax
f01168c1:	8b 00                	mov    (%eax),%eax
f01168c3:	83 e0 01             	and    $0x1,%eax
f01168c6:	85 c0                	test   %eax,%eax
f01168c8:	75 07                	jne    f01168d1 <GP+0x28>
f01168ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01168cf:	eb 6f                	jmp    f0116940 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01168d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168d4:	c1 e8 16             	shr    $0x16,%eax
f01168d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168de:	8b 45 08             	mov    0x8(%ebp),%eax
f01168e1:	01 d0                	add    %edx,%eax
f01168e3:	8b 00                	mov    (%eax),%eax
f01168e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01168ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01168f0:	c1 e8 0c             	shr    $0xc,%eax
f01168f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01168f6:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01168fb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01168fe:	72 17                	jb     f0116917 <GP+0x6e>
f0116900:	ff 75 f4             	pushl  -0xc(%ebp)
f0116903:	68 08 84 13 f0       	push   $0xf0138408
f0116908:	68 b4 07 00 00       	push   $0x7b4
f011690d:	68 0e 69 13 f0       	push   $0xf013690e
f0116912:	e8 99 98 fe ff       	call   f01001b0 <_panic>
f0116917:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011691a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011691f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116922:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116925:	c1 e8 0c             	shr    $0xc,%eax
f0116928:	25 ff 03 00 00       	and    $0x3ff,%eax
f011692d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116934:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116937:	01 d0                	add    %edx,%eax
f0116939:	8b 00                	mov    (%eax),%eax
f011693b:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116940:	c9                   	leave  
f0116941:	c3                   	ret    

f0116942 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116942:	55                   	push   %ebp
f0116943:	89 e5                	mov    %esp,%ebp
f0116945:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116948:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011694f:	eb 18                	jmp    f0116969 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116951:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116954:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011695b:	8b 45 08             	mov    0x8(%ebp),%eax
f011695e:	01 d0                	add    %edx,%eax
f0116960:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116966:	ff 45 fc             	incl   -0x4(%ebp)
f0116969:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011696c:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116971:	76 de                	jbe    f0116951 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116973:	90                   	nop
f0116974:	c9                   	leave  
f0116975:	c3                   	ret    

f0116976 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116976:	55                   	push   %ebp
f0116977:	89 e5                	mov    %esp,%ebp
f0116979:	83 ec 38             	sub    $0x38,%esp
f011697c:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011697f:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116982:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116985:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011698a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011698d:	8b 45 10             	mov    0x10(%ebp),%eax
f0116990:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116995:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116998:	e9 ea 01 00 00       	jmp    f0116b87 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011699d:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01169a1:	74 44                	je     f01169e7 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01169a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01169a6:	83 ec 04             	sub    $0x4,%esp
f01169a9:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01169ac:	52                   	push   %edx
f01169ad:	50                   	push   %eax
f01169ae:	ff 75 08             	pushl  0x8(%ebp)
f01169b1:	e8 fd 09 ff ff       	call   f01073b3 <get_frame_info>
f01169b6:	83 c4 10             	add    $0x10,%esp
f01169b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01169bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01169bf:	85 c0                	test   %eax,%eax
f01169c1:	75 24                	jne    f01169e7 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01169c3:	83 ec 04             	sub    $0x4,%esp
f01169c6:	68 38 84 13 f0       	push   $0xf0138438
f01169cb:	68 cf 07 00 00       	push   $0x7cf
f01169d0:	68 0e 69 13 f0       	push   $0xf013690e
f01169d5:	e8 e4 99 fe ff       	call   f01003be <_warn>
f01169da:	83 c4 10             	add    $0x10,%esp
				return 0;
f01169dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01169e2:	e9 b6 01 00 00       	jmp    f0116b9d <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01169e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169ea:	83 ec 04             	sub    $0x4,%esp
f01169ed:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01169f0:	52                   	push   %edx
f01169f1:	50                   	push   %eax
f01169f2:	ff 75 08             	pushl  0x8(%ebp)
f01169f5:	e8 b9 09 ff ff       	call   f01073b3 <get_frame_info>
f01169fa:	83 c4 10             	add    $0x10,%esp
f01169fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116a00:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a03:	85 c0                	test   %eax,%eax
f0116a05:	75 24                	jne    f0116a2b <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116a07:	83 ec 04             	sub    $0x4,%esp
f0116a0a:	68 64 84 13 f0       	push   $0xf0138464
f0116a0f:	68 d6 07 00 00       	push   $0x7d6
f0116a14:	68 0e 69 13 f0       	push   $0xf013690e
f0116a19:	e8 a0 99 fe ff       	call   f01003be <_warn>
f0116a1e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116a21:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a26:	e9 72 01 00 00       	jmp    f0116b9d <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116a2b:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116a2f:	75 70                	jne    f0116aa1 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116a31:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116a34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116a37:	c1 ea 0c             	shr    $0xc,%edx
f0116a3a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a40:	c1 e2 02             	shl    $0x2,%edx
f0116a43:	01 d0                	add    %edx,%eax
f0116a45:	8b 00                	mov    (%eax),%eax
f0116a47:	c1 e8 0c             	shr    $0xc,%eax
f0116a4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116a4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116a53:	c1 ea 0c             	shr    $0xc,%edx
f0116a56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a5c:	c1 e2 02             	shl    $0x2,%edx
f0116a5f:	01 d0                	add    %edx,%eax
f0116a61:	8b 00                	mov    (%eax),%eax
f0116a63:	c1 e8 0c             	shr    $0xc,%eax
f0116a66:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116a69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a6c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116a6f:	74 30                	je     f0116aa1 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116a71:	83 ec 04             	sub    $0x4,%esp
f0116a74:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116a77:	ff 75 e8             	pushl  -0x18(%ebp)
f0116a7a:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0116a80:	68 90 84 13 f0       	push   $0xf0138490
f0116a85:	68 e0 07 00 00       	push   $0x7e0
f0116a8a:	68 0e 69 13 f0       	push   $0xf013690e
f0116a8f:	e8 2a 99 fe ff       	call   f01003be <_warn>
f0116a94:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a97:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a9c:	e9 fc 00 00 00       	jmp    f0116b9d <CCP+0x227>
			}
		}
		if (ref != -1)
f0116aa1:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116aa5:	74 52                	je     f0116af9 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116aa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116aab:	74 0e                	je     f0116abb <CCP+0x145>
f0116aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ab0:	8b 40 08             	mov    0x8(%eax),%eax
f0116ab3:	0f b7 c0             	movzwl %ax,%eax
f0116ab6:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116ab9:	74 3e                	je     f0116af9 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116abb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116abf:	74 0b                	je     f0116acc <CCP+0x156>
f0116ac1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ac4:	8b 40 08             	mov    0x8(%eax),%eax
f0116ac7:	0f b7 c0             	movzwl %ax,%eax
f0116aca:	eb 05                	jmp    f0116ad1 <CCP+0x15b>
f0116acc:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ad1:	83 ec 0c             	sub    $0xc,%esp
f0116ad4:	50                   	push   %eax
f0116ad5:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ad8:	68 ec 84 13 f0       	push   $0xf01384ec
f0116add:	68 e8 07 00 00       	push   $0x7e8
f0116ae2:	68 0e 69 13 f0       	push   $0xf013690e
f0116ae7:	e8 d2 98 fe ff       	call   f01003be <_warn>
f0116aec:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116aef:	b8 00 00 00 00       	mov    $0x0,%eax
f0116af4:	e9 a4 00 00 00       	jmp    f0116b9d <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116afc:	ff 75 20             	pushl  0x20(%ebp)
f0116aff:	ff 75 1c             	pushl  0x1c(%ebp)
f0116b02:	50                   	push   %eax
f0116b03:	ff 75 08             	pushl  0x8(%ebp)
f0116b06:	e8 b8 fa ff ff       	call   f01165c3 <CPs>
f0116b0b:	83 c4 10             	add    $0x10,%esp
f0116b0e:	85 c0                	test   %eax,%eax
f0116b10:	7f 21                	jg     f0116b33 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116b12:	83 ec 04             	sub    $0x4,%esp
f0116b15:	68 5c 85 13 f0       	push   $0xf013855c
f0116b1a:	68 ee 07 00 00       	push   $0x7ee
f0116b1f:	68 0e 69 13 f0       	push   $0xf013690e
f0116b24:	e8 95 98 fe ff       	call   f01003be <_warn>
f0116b29:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116b2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b31:	eb 6a                	jmp    f0116b9d <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116b33:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116b37:	74 3a                	je     f0116b73 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b3c:	ff 75 28             	pushl  0x28(%ebp)
f0116b3f:	ff 75 24             	pushl  0x24(%ebp)
f0116b42:	50                   	push   %eax
f0116b43:	ff 75 08             	pushl  0x8(%ebp)
f0116b46:	e8 78 fa ff ff       	call   f01165c3 <CPs>
f0116b4b:	83 c4 10             	add    $0x10,%esp
f0116b4e:	85 c0                	test   %eax,%eax
f0116b50:	7f 21                	jg     f0116b73 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116b52:	83 ec 04             	sub    $0x4,%esp
f0116b55:	68 a4 85 13 f0       	push   $0xf01385a4
f0116b5a:	68 f5 07 00 00       	push   $0x7f5
f0116b5f:	68 0e 69 13 f0       	push   $0xf013690e
f0116b64:	e8 55 98 fe ff       	call   f01003be <_warn>
f0116b69:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116b6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b71:	eb 2a                	jmp    f0116b9d <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116b73:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116b77:	74 07                	je     f0116b80 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116b79:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116b80:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116b87:	8b 55 10             	mov    0x10(%ebp),%edx
f0116b8a:	8b 45 14             	mov    0x14(%ebp),%eax
f0116b8d:	01 d0                	add    %edx,%eax
f0116b8f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116b92:	0f 87 05 fe ff ff    	ja     f011699d <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116b98:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116b9d:	c9                   	leave  
f0116b9e:	c3                   	ret    

f0116b9f <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116b9f:	55                   	push   %ebp
f0116ba0:	89 e5                	mov    %esp,%ebp
f0116ba2:	57                   	push   %edi
f0116ba3:	56                   	push   %esi
f0116ba4:	53                   	push   %ebx
f0116ba5:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116bab:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f0116bb0:	84 c0                	test   %al,%al
f0116bb2:	0f 84 38 0a 00 00    	je     f01175f0 <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116bb8:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0116bbf:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116bc5:	bb 60 88 13 f0       	mov    $0xf0138860,%ebx
f0116bca:	ba 04 00 00 00       	mov    $0x4,%edx
f0116bcf:	89 c7                	mov    %eax,%edi
f0116bd1:	89 de                	mov    %ebx,%esi
f0116bd3:	89 d1                	mov    %edx,%ecx
f0116bd5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116bd7:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116bdd:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116be2:	b8 00 00 00 00       	mov    $0x0,%eax
f0116be7:	89 d7                	mov    %edx,%edi
f0116be9:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116beb:	83 ec 0c             	sub    $0xc,%esp
f0116bee:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116bf4:	50                   	push   %eax
f0116bf5:	e8 c9 af fe ff       	call   f0101bc3 <execute_command>
f0116bfa:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116bfd:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116c03:	bb c4 88 13 f0       	mov    $0xf01388c4,%ebx
f0116c08:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116c0d:	89 c7                	mov    %eax,%edi
f0116c0f:	89 de                	mov    %ebx,%esi
f0116c11:	89 d1                	mov    %edx,%ecx
f0116c13:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c15:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116c1b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116c20:	b0 00                	mov    $0x0,%al
f0116c22:	89 d7                	mov    %edx,%edi
f0116c24:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116c26:	83 ec 0c             	sub    $0xc,%esp
f0116c29:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116c2f:	50                   	push   %eax
f0116c30:	e8 8e af fe ff       	call   f0101bc3 <execute_command>
f0116c35:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116c38:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116c3e:	bb 28 89 13 f0       	mov    $0xf0138928,%ebx
f0116c43:	ba 17 00 00 00       	mov    $0x17,%edx
f0116c48:	89 c7                	mov    %eax,%edi
f0116c4a:	89 de                	mov    %ebx,%esi
f0116c4c:	89 d1                	mov    %edx,%ecx
f0116c4e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c50:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116c56:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116c5b:	b0 00                	mov    $0x0,%al
f0116c5d:	89 d7                	mov    %edx,%edi
f0116c5f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116c61:	83 ec 0c             	sub    $0xc,%esp
f0116c64:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116c6a:	50                   	push   %eax
f0116c6b:	e8 53 af fe ff       	call   f0101bc3 <execute_command>
f0116c70:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0116c73:	83 ec 04             	sub    $0x4,%esp
f0116c76:	6a 00                	push   $0x0
f0116c78:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116c7b:	50                   	push   %eax
f0116c7c:	6a 10                	push   $0x10
f0116c7e:	e8 7f 29 ff ff       	call   f0109602 <envid2env>
f0116c83:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0116c86:	83 ec 04             	sub    $0x4,%esp
f0116c89:	6a 00                	push   $0x0
f0116c8b:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116c8e:	50                   	push   %eax
f0116c8f:	6a 11                	push   $0x11
f0116c91:	e8 6c 29 ff ff       	call   f0109602 <envid2env>
f0116c96:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0116c99:	83 ec 04             	sub    $0x4,%esp
f0116c9c:	6a 00                	push   $0x0
f0116c9e:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116ca1:	50                   	push   %eax
f0116ca2:	6a 12                	push   $0x12
f0116ca4:	e8 59 29 ff ff       	call   f0109602 <envid2env>
f0116ca9:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116cac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116caf:	85 c0                	test   %eax,%eax
f0116cb1:	74 0e                	je     f0116cc1 <test_priority_normal_and_higher+0x122>
f0116cb3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cb6:	85 c0                	test   %eax,%eax
f0116cb8:	74 07                	je     f0116cc1 <test_priority_normal_and_higher+0x122>
f0116cba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cbd:	85 c0                	test   %eax,%eax
f0116cbf:	75 14                	jne    f0116cd5 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f0116cc1:	83 ec 04             	sub    $0x4,%esp
f0116cc4:	68 e4 85 13 f0       	push   $0xf01385e4
f0116cc9:	6a 29                	push   $0x29
f0116ccb:	68 fd 85 13 f0       	push   $0xf01385fd
f0116cd0:	e8 db 94 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116cd5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116cd8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116cde:	83 f8 14             	cmp    $0x14,%eax
f0116ce1:	75 1c                	jne    f0116cff <test_priority_normal_and_higher+0x160>
f0116ce3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ce6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116cec:	83 f8 0f             	cmp    $0xf,%eax
f0116cef:	75 0e                	jne    f0116cff <test_priority_normal_and_higher+0x160>
f0116cf1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cf4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116cfa:	83 f8 0a             	cmp    $0xa,%eax
f0116cfd:	74 32                	je     f0116d31 <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0116cff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d02:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f0116d08:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d0b:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0116d11:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d14:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116d1a:	83 ec 08             	sub    $0x8,%esp
f0116d1d:	51                   	push   %ecx
f0116d1e:	52                   	push   %edx
f0116d1f:	50                   	push   %eax
f0116d20:	68 18 86 13 f0       	push   $0xf0138618
f0116d25:	6a 2c                	push   $0x2c
f0116d27:	68 fd 85 13 f0       	push   $0xf01385fd
f0116d2c:	e8 7f 94 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0116d31:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116d38:	eb 47                	jmp    f0116d81 <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d3a:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0116d3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116d40:	89 d0                	mov    %edx,%eax
f0116d42:	01 c0                	add    %eax,%eax
f0116d44:	01 d0                	add    %edx,%eax
f0116d46:	c1 e0 03             	shl    $0x3,%eax
f0116d49:	01 c8                	add    %ecx,%eax
f0116d4b:	05 b8 00 00 00       	add    $0xb8,%eax
f0116d50:	8b 10                	mov    (%eax),%edx
f0116d52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116d55:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d5c:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0116d5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116d62:	89 d0                	mov    %edx,%eax
f0116d64:	01 c0                	add    %eax,%eax
f0116d66:	01 d0                	add    %edx,%eax
f0116d68:	c1 e0 03             	shl    $0x3,%eax
f0116d6b:	01 c8                	add    %ecx,%eax
f0116d6d:	05 c0 00 00 00       	add    $0xc0,%eax
f0116d72:	8b 10                	mov    (%eax),%edx
f0116d74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116d77:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0116d7e:	ff 45 e4             	incl   -0x1c(%ebp)
f0116d81:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116d85:	7e b3                	jle    f0116d3a <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116d87:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116d8e:	eb 47                	jmp    f0116dd7 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d90:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116d93:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116d96:	89 d0                	mov    %edx,%eax
f0116d98:	01 c0                	add    %eax,%eax
f0116d9a:	01 d0                	add    %edx,%eax
f0116d9c:	c1 e0 03             	shl    $0x3,%eax
f0116d9f:	01 c8                	add    %ecx,%eax
f0116da1:	05 b8 00 00 00       	add    $0xb8,%eax
f0116da6:	8b 10                	mov    (%eax),%edx
f0116da8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116dab:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116db2:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116db5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116db8:	89 d0                	mov    %edx,%eax
f0116dba:	01 c0                	add    %eax,%eax
f0116dbc:	01 d0                	add    %edx,%eax
f0116dbe:	c1 e0 03             	shl    $0x3,%eax
f0116dc1:	01 c8                	add    %ecx,%eax
f0116dc3:	05 c0 00 00 00       	add    $0xc0,%eax
f0116dc8:	8b 10                	mov    (%eax),%edx
f0116dca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116dcd:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116dd4:	ff 45 e0             	incl   -0x20(%ebp)
f0116dd7:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116ddb:	7e b3                	jle    f0116d90 <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116ddd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116de4:	eb 47                	jmp    f0116e2d <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116de6:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116de9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116dec:	89 d0                	mov    %edx,%eax
f0116dee:	01 c0                	add    %eax,%eax
f0116df0:	01 d0                	add    %edx,%eax
f0116df2:	c1 e0 03             	shl    $0x3,%eax
f0116df5:	01 c8                	add    %ecx,%eax
f0116df7:	05 b8 00 00 00       	add    $0xb8,%eax
f0116dfc:	8b 10                	mov    (%eax),%edx
f0116dfe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e01:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116e08:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116e0b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e0e:	89 d0                	mov    %edx,%eax
f0116e10:	01 c0                	add    %eax,%eax
f0116e12:	01 d0                	add    %edx,%eax
f0116e14:	c1 e0 03             	shl    $0x3,%eax
f0116e17:	01 c8                	add    %ecx,%eax
f0116e19:	05 c0 00 00 00       	add    $0xc0,%eax
f0116e1e:	8b 10                	mov    (%eax),%edx
f0116e20:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e23:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116e2a:	ff 45 dc             	incl   -0x24(%ebp)
f0116e2d:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116e31:	7e b3                	jle    f0116de6 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116e33:	e8 da 57 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116e38:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116e3b:	e8 78 d4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116e40:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116e43:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e46:	83 ec 08             	sub    $0x8,%esp
f0116e49:	6a 03                	push   $0x3
f0116e4b:	50                   	push   %eax
f0116e4c:	e8 a8 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116e51:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116e54:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e57:	83 ec 08             	sub    $0x8,%esp
f0116e5a:	6a 03                	push   $0x3
f0116e5c:	50                   	push   %eax
f0116e5d:	e8 97 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116e62:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116e65:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e68:	83 ec 08             	sub    $0x8,%esp
f0116e6b:	6a 03                	push   $0x3
f0116e6d:	50                   	push   %eax
f0116e6e:	e8 86 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116e73:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e76:	e8 3d d4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116e7b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e7e:	74 14                	je     f0116e94 <test_priority_normal_and_higher+0x2f5>
f0116e80:	83 ec 04             	sub    $0x4,%esp
f0116e83:	68 80 86 13 f0       	push   $0xf0138680
f0116e88:	6a 48                	push   $0x48
f0116e8a:	68 fd 85 13 f0       	push   $0xf01385fd
f0116e8f:	e8 1c 93 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116e94:	e8 79 57 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116e99:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e9c:	74 14                	je     f0116eb2 <test_priority_normal_and_higher+0x313>
f0116e9e:	83 ec 04             	sub    $0x4,%esp
f0116ea1:	68 80 86 13 f0       	push   $0xf0138680
f0116ea6:	6a 49                	push   $0x49
f0116ea8:	68 fd 85 13 f0       	push   $0xf01385fd
f0116ead:	e8 fe 92 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116eb2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116eb5:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116ebb:	83 f8 14             	cmp    $0x14,%eax
f0116ebe:	75 1c                	jne    f0116edc <test_priority_normal_and_higher+0x33d>
f0116ec0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ec3:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116ec9:	83 f8 0f             	cmp    $0xf,%eax
f0116ecc:	75 0e                	jne    f0116edc <test_priority_normal_and_higher+0x33d>
f0116ece:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ed1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116ed7:	83 f8 0a             	cmp    $0xa,%eax
f0116eda:	74 14                	je     f0116ef0 <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116edc:	83 ec 04             	sub    $0x4,%esp
f0116edf:	68 ac 86 13 f0       	push   $0xf01386ac
f0116ee4:	6a 4c                	push   $0x4c
f0116ee6:	68 fd 85 13 f0       	push   $0xf01385fd
f0116eeb:	e8 c0 92 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ef0:	e8 1d 57 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116ef5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ef8:	e8 bb d3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116efd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116f00:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f03:	83 ec 08             	sub    $0x8,%esp
f0116f06:	6a 04                	push   $0x4
f0116f08:	50                   	push   %eax
f0116f09:	e8 eb 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f0e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116f11:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f14:	83 ec 08             	sub    $0x8,%esp
f0116f17:	6a 04                	push   $0x4
f0116f19:	50                   	push   %eax
f0116f1a:	e8 da 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f1f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116f22:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f25:	83 ec 08             	sub    $0x8,%esp
f0116f28:	6a 04                	push   $0x4
f0116f2a:	50                   	push   %eax
f0116f2b:	e8 c9 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f30:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f33:	e8 80 d3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116f38:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f3b:	74 14                	je     f0116f51 <test_priority_normal_and_higher+0x3b2>
f0116f3d:	83 ec 04             	sub    $0x4,%esp
f0116f40:	68 80 86 13 f0       	push   $0xf0138680
f0116f45:	6a 56                	push   $0x56
f0116f47:	68 fd 85 13 f0       	push   $0xf01385fd
f0116f4c:	e8 5f 92 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116f51:	e8 bc 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116f56:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f59:	74 14                	je     f0116f6f <test_priority_normal_and_higher+0x3d0>
f0116f5b:	83 ec 04             	sub    $0x4,%esp
f0116f5e:	68 00 87 13 f0       	push   $0xf0138700
f0116f63:	6a 57                	push   $0x57
f0116f65:	68 fd 85 13 f0       	push   $0xf01385fd
f0116f6a:	e8 41 92 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f72:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f78:	83 f8 14             	cmp    $0x14,%eax
f0116f7b:	75 1c                	jne    f0116f99 <test_priority_normal_and_higher+0x3fa>
f0116f7d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f80:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f86:	83 f8 0f             	cmp    $0xf,%eax
f0116f89:	75 0e                	jne    f0116f99 <test_priority_normal_and_higher+0x3fa>
f0116f8b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f8e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f94:	83 f8 14             	cmp    $0x14,%eax
f0116f97:	74 14                	je     f0116fad <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116f99:	83 ec 04             	sub    $0x4,%esp
f0116f9c:	68 30 87 13 f0       	push   $0xf0138730
f0116fa1:	6a 5a                	push   $0x5a
f0116fa3:	68 fd 85 13 f0       	push   $0xf01385fd
f0116fa8:	e8 03 92 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116fad:	e8 60 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116fb2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116fb5:	e8 fe d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116fba:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116fbd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fc0:	83 ec 08             	sub    $0x8,%esp
f0116fc3:	6a 04                	push   $0x4
f0116fc5:	50                   	push   %eax
f0116fc6:	e8 2e 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116fcb:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116fce:	e8 e5 d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116fd3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116fd6:	74 14                	je     f0116fec <test_priority_normal_and_higher+0x44d>
f0116fd8:	83 ec 04             	sub    $0x4,%esp
f0116fdb:	68 80 86 13 f0       	push   $0xf0138680
f0116fe0:	6a 62                	push   $0x62
f0116fe2:	68 fd 85 13 f0       	push   $0xf01385fd
f0116fe7:	e8 c4 91 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116fec:	e8 21 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116ff1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ff4:	74 14                	je     f011700a <test_priority_normal_and_higher+0x46b>
f0116ff6:	83 ec 04             	sub    $0x4,%esp
f0116ff9:	68 80 86 13 f0       	push   $0xf0138680
f0116ffe:	6a 63                	push   $0x63
f0117000:	68 fd 85 13 f0       	push   $0xf01385fd
f0117005:	e8 a6 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011700a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011700d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117013:	83 f8 14             	cmp    $0x14,%eax
f0117016:	75 1c                	jne    f0117034 <test_priority_normal_and_higher+0x495>
f0117018:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011701b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117021:	83 f8 0f             	cmp    $0xf,%eax
f0117024:	75 0e                	jne    f0117034 <test_priority_normal_and_higher+0x495>
f0117026:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117029:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011702f:	83 f8 14             	cmp    $0x14,%eax
f0117032:	74 14                	je     f0117048 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0117034:	83 ec 04             	sub    $0x4,%esp
f0117037:	68 78 87 13 f0       	push   $0xf0138778
f011703c:	6a 66                	push   $0x66
f011703e:	68 fd 85 13 f0       	push   $0xf01385fd
f0117043:	e8 68 91 fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117048:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011704f:	eb 1c                	jmp    f011706d <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117051:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117054:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117057:	89 d0                	mov    %edx,%eax
f0117059:	01 c0                	add    %eax,%eax
f011705b:	01 d0                	add    %edx,%eax
f011705d:	c1 e0 03             	shl    $0x3,%eax
f0117060:	01 c8                	add    %ecx,%eax
f0117062:	05 bc 00 00 00       	add    $0xbc,%eax
f0117067:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011706a:	ff 45 d8             	incl   -0x28(%ebp)
f011706d:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0117071:	7e de                	jle    f0117051 <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117073:	e8 9a 55 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117078:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011707b:	e8 38 d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117080:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0117083:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117086:	83 ec 08             	sub    $0x8,%esp
f0117089:	6a 04                	push   $0x4
f011708b:	50                   	push   %eax
f011708c:	e8 68 3a ff ff       	call   f010aaf9 <set_program_priority>
f0117091:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117094:	e8 1f d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117099:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011709c:	74 14                	je     f01170b2 <test_priority_normal_and_higher+0x513>
f011709e:	83 ec 04             	sub    $0x4,%esp
f01170a1:	68 80 86 13 f0       	push   $0xf0138680
f01170a6:	6a 73                	push   $0x73
f01170a8:	68 fd 85 13 f0       	push   $0xf01385fd
f01170ad:	e8 fe 90 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01170b2:	e8 5b 55 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01170b7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01170ba:	74 14                	je     f01170d0 <test_priority_normal_and_higher+0x531>
f01170bc:	83 ec 04             	sub    $0x4,%esp
f01170bf:	68 80 86 13 f0       	push   $0xf0138680
f01170c4:	6a 74                	push   $0x74
f01170c6:	68 fd 85 13 f0       	push   $0xf01385fd
f01170cb:	e8 e0 90 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01170d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170d3:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170d9:	83 f8 14             	cmp    $0x14,%eax
f01170dc:	75 1c                	jne    f01170fa <test_priority_normal_and_higher+0x55b>
f01170de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170e1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170e7:	83 f8 0f             	cmp    $0xf,%eax
f01170ea:	75 0e                	jne    f01170fa <test_priority_normal_and_higher+0x55b>
f01170ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170ef:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170f5:	83 f8 14             	cmp    $0x14,%eax
f01170f8:	74 14                	je     f011710e <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f01170fa:	83 ec 04             	sub    $0x4,%esp
f01170fd:	68 78 87 13 f0       	push   $0xf0138778
f0117102:	6a 77                	push   $0x77
f0117104:	68 fd 85 13 f0       	push   $0xf01385fd
f0117109:	e8 a2 90 fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f011710e:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117115:	eb 1c                	jmp    f0117133 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117117:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011711a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011711d:	89 d0                	mov    %edx,%eax
f011711f:	01 c0                	add    %eax,%eax
f0117121:	01 d0                	add    %edx,%eax
f0117123:	c1 e0 03             	shl    $0x3,%eax
f0117126:	01 c8                	add    %ecx,%eax
f0117128:	05 bc 00 00 00       	add    $0xbc,%eax
f011712d:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0117130:	ff 45 d4             	incl   -0x2c(%ebp)
f0117133:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117137:	7e de                	jle    f0117117 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117139:	e8 d4 54 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011713e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117141:	e8 72 d1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117146:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117149:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011714c:	83 ec 08             	sub    $0x8,%esp
f011714f:	6a 05                	push   $0x5
f0117151:	50                   	push   %eax
f0117152:	e8 a2 39 ff ff       	call   f010aaf9 <set_program_priority>
f0117157:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011715a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011715d:	83 ec 08             	sub    $0x8,%esp
f0117160:	6a 05                	push   $0x5
f0117162:	50                   	push   %eax
f0117163:	e8 91 39 ff ff       	call   f010aaf9 <set_program_priority>
f0117168:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011716b:	e8 48 d1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117170:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117173:	74 17                	je     f011718c <test_priority_normal_and_higher+0x5ed>
f0117175:	83 ec 04             	sub    $0x4,%esp
f0117178:	68 80 86 13 f0       	push   $0xf0138680
f011717d:	68 82 00 00 00       	push   $0x82
f0117182:	68 fd 85 13 f0       	push   $0xf01385fd
f0117187:	e8 24 90 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011718c:	e8 81 54 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117191:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117194:	74 17                	je     f01171ad <test_priority_normal_and_higher+0x60e>
f0117196:	83 ec 04             	sub    $0x4,%esp
f0117199:	68 80 86 13 f0       	push   $0xf0138680
f011719e:	68 83 00 00 00       	push   $0x83
f01171a3:	68 fd 85 13 f0       	push   $0xf01385fd
f01171a8:	e8 03 90 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01171ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171b0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01171b6:	83 f8 14             	cmp    $0x14,%eax
f01171b9:	75 1c                	jne    f01171d7 <test_priority_normal_and_higher+0x638>
f01171bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171be:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01171c4:	83 f8 1e             	cmp    $0x1e,%eax
f01171c7:	75 0e                	jne    f01171d7 <test_priority_normal_and_higher+0x638>
f01171c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171cc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01171d2:	83 f8 28             	cmp    $0x28,%eax
f01171d5:	74 17                	je     f01171ee <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f01171d7:	83 ec 04             	sub    $0x4,%esp
f01171da:	68 b4 87 13 f0       	push   $0xf01387b4
f01171df:	68 86 00 00 00       	push   $0x86
f01171e4:	68 fd 85 13 f0       	push   $0xf01385fd
f01171e9:	e8 c2 8f fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f01171ee:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01171f5:	eb 1c                	jmp    f0117213 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01171f7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01171fa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01171fd:	89 d0                	mov    %edx,%eax
f01171ff:	01 c0                	add    %eax,%eax
f0117201:	01 d0                	add    %edx,%eax
f0117203:	c1 e0 03             	shl    $0x3,%eax
f0117206:	01 c8                	add    %ecx,%eax
f0117208:	05 bc 00 00 00       	add    $0xbc,%eax
f011720d:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0117210:	ff 45 d0             	incl   -0x30(%ebp)
f0117213:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117217:	7e de                	jle    f01171f7 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117219:	e8 f4 53 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011721e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117221:	e8 92 d0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117226:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117229:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011722c:	83 ec 08             	sub    $0x8,%esp
f011722f:	6a 05                	push   $0x5
f0117231:	50                   	push   %eax
f0117232:	e8 c2 38 ff ff       	call   f010aaf9 <set_program_priority>
f0117237:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011723a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011723d:	83 ec 08             	sub    $0x8,%esp
f0117240:	6a 04                	push   $0x4
f0117242:	50                   	push   %eax
f0117243:	e8 b1 38 ff ff       	call   f010aaf9 <set_program_priority>
f0117248:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011724b:	e8 68 d0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117250:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117253:	74 17                	je     f011726c <test_priority_normal_and_higher+0x6cd>
f0117255:	83 ec 04             	sub    $0x4,%esp
f0117258:	68 80 86 13 f0       	push   $0xf0138680
f011725d:	68 91 00 00 00       	push   $0x91
f0117262:	68 fd 85 13 f0       	push   $0xf01385fd
f0117267:	e8 44 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011726c:	e8 a1 53 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117271:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117274:	74 17                	je     f011728d <test_priority_normal_and_higher+0x6ee>
f0117276:	83 ec 04             	sub    $0x4,%esp
f0117279:	68 80 86 13 f0       	push   $0xf0138680
f011727e:	68 92 00 00 00       	push   $0x92
f0117283:	68 fd 85 13 f0       	push   $0xf01385fd
f0117288:	e8 23 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011728d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117290:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117296:	83 f8 14             	cmp    $0x14,%eax
f0117299:	75 1c                	jne    f01172b7 <test_priority_normal_and_higher+0x718>
f011729b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011729e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172a4:	83 f8 1e             	cmp    $0x1e,%eax
f01172a7:	75 0e                	jne    f01172b7 <test_priority_normal_and_higher+0x718>
f01172a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172ac:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172b2:	83 f8 28             	cmp    $0x28,%eax
f01172b5:	74 17                	je     f01172ce <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f01172b7:	83 ec 04             	sub    $0x4,%esp
f01172ba:	68 b4 87 13 f0       	push   $0xf01387b4
f01172bf:	68 95 00 00 00       	push   $0x95
f01172c4:	68 fd 85 13 f0       	push   $0xf01385fd
f01172c9:	e8 e2 8e fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f01172ce:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01172d5:	eb 1c                	jmp    f01172f3 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01172d7:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01172da:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01172dd:	89 d0                	mov    %edx,%eax
f01172df:	01 c0                	add    %eax,%eax
f01172e1:	01 d0                	add    %edx,%eax
f01172e3:	c1 e0 03             	shl    $0x3,%eax
f01172e6:	01 c8                	add    %ecx,%eax
f01172e8:	05 bc 00 00 00       	add    $0xbc,%eax
f01172ed:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01172f0:	ff 45 cc             	incl   -0x34(%ebp)
f01172f3:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01172f7:	7e de                	jle    f01172d7 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01172f9:	e8 14 53 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01172fe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117301:	e8 b2 cf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117306:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117309:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011730c:	83 ec 08             	sub    $0x8,%esp
f011730f:	6a 05                	push   $0x5
f0117311:	50                   	push   %eax
f0117312:	e8 e2 37 ff ff       	call   f010aaf9 <set_program_priority>
f0117317:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011731a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011731d:	83 ec 08             	sub    $0x8,%esp
f0117320:	6a 04                	push   $0x4
f0117322:	50                   	push   %eax
f0117323:	e8 d1 37 ff ff       	call   f010aaf9 <set_program_priority>
f0117328:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011732b:	e8 88 cf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117330:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117333:	74 17                	je     f011734c <test_priority_normal_and_higher+0x7ad>
f0117335:	83 ec 04             	sub    $0x4,%esp
f0117338:	68 80 86 13 f0       	push   $0xf0138680
f011733d:	68 a0 00 00 00       	push   $0xa0
f0117342:	68 fd 85 13 f0       	push   $0xf01385fd
f0117347:	e8 64 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011734c:	e8 c1 52 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117351:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117354:	74 17                	je     f011736d <test_priority_normal_and_higher+0x7ce>
f0117356:	83 ec 04             	sub    $0x4,%esp
f0117359:	68 80 86 13 f0       	push   $0xf0138680
f011735e:	68 a1 00 00 00       	push   $0xa1
f0117363:	68 fd 85 13 f0       	push   $0xf01385fd
f0117368:	e8 43 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011736d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117370:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117376:	83 f8 14             	cmp    $0x14,%eax
f0117379:	75 1c                	jne    f0117397 <test_priority_normal_and_higher+0x7f8>
f011737b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011737e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117384:	83 f8 3c             	cmp    $0x3c,%eax
f0117387:	75 0e                	jne    f0117397 <test_priority_normal_and_higher+0x7f8>
f0117389:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011738c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117392:	83 f8 28             	cmp    $0x28,%eax
f0117395:	74 17                	je     f01173ae <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117397:	83 ec 04             	sub    $0x4,%esp
f011739a:	68 b4 87 13 f0       	push   $0xf01387b4
f011739f:	68 a4 00 00 00       	push   $0xa4
f01173a4:	68 fd 85 13 f0       	push   $0xf01385fd
f01173a9:	e8 02 8e fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f01173ae:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01173b5:	eb 1c                	jmp    f01173d3 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01173b7:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01173ba:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01173bd:	89 d0                	mov    %edx,%eax
f01173bf:	01 c0                	add    %eax,%eax
f01173c1:	01 d0                	add    %edx,%eax
f01173c3:	c1 e0 03             	shl    $0x3,%eax
f01173c6:	01 c8                	add    %ecx,%eax
f01173c8:	05 bc 00 00 00       	add    $0xbc,%eax
f01173cd:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01173d0:	ff 45 c8             	incl   -0x38(%ebp)
f01173d3:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01173d7:	7e de                	jle    f01173b7 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01173d9:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01173e0:	eb 1c                	jmp    f01173fe <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01173e2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01173e5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01173e8:	89 d0                	mov    %edx,%eax
f01173ea:	01 c0                	add    %eax,%eax
f01173ec:	01 d0                	add    %edx,%eax
f01173ee:	c1 e0 03             	shl    $0x3,%eax
f01173f1:	01 c8                	add    %ecx,%eax
f01173f3:	05 bc 00 00 00       	add    $0xbc,%eax
f01173f8:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01173fb:	ff 45 c4             	incl   -0x3c(%ebp)
f01173fe:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0117402:	7e de                	jle    f01173e2 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117404:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011740b:	eb 7d                	jmp    f011748a <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011740d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117410:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117417:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f011741a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011741d:	89 d0                	mov    %edx,%eax
f011741f:	01 c0                	add    %eax,%eax
f0117421:	01 d0                	add    %edx,%eax
f0117423:	c1 e0 03             	shl    $0x3,%eax
f0117426:	01 d8                	add    %ebx,%eax
f0117428:	05 b8 00 00 00       	add    $0xb8,%eax
f011742d:	8b 00                	mov    (%eax),%eax
f011742f:	39 c1                	cmp    %eax,%ecx
f0117431:	74 17                	je     f011744a <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f0117433:	83 ec 04             	sub    $0x4,%esp
f0117436:	68 f0 87 13 f0       	push   $0xf01387f0
f011743b:	68 b2 00 00 00       	push   $0xb2
f0117440:	68 fd 85 13 f0       	push   $0xf01385fd
f0117445:	e8 66 8d fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011744a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011744d:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117454:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117457:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011745a:	89 d0                	mov    %edx,%eax
f011745c:	01 c0                	add    %eax,%eax
f011745e:	01 d0                	add    %edx,%eax
f0117460:	c1 e0 03             	shl    $0x3,%eax
f0117463:	01 d8                	add    %ebx,%eax
f0117465:	05 c0 00 00 00       	add    $0xc0,%eax
f011746a:	8b 00                	mov    (%eax),%eax
f011746c:	39 c1                	cmp    %eax,%ecx
f011746e:	74 17                	je     f0117487 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f0117470:	83 ec 04             	sub    $0x4,%esp
f0117473:	68 f0 87 13 f0       	push   $0xf01387f0
f0117478:	68 b5 00 00 00       	push   $0xb5
f011747d:	68 fd 85 13 f0       	push   $0xf01385fd
f0117482:	e8 29 8d fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117487:	ff 45 c0             	incl   -0x40(%ebp)
f011748a:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011748e:	0f 8e 79 ff ff ff    	jle    f011740d <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117494:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011749b:	eb 7d                	jmp    f011751a <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011749d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01174a0:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01174a7:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01174aa:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01174ad:	89 d0                	mov    %edx,%eax
f01174af:	01 c0                	add    %eax,%eax
f01174b1:	01 d0                	add    %edx,%eax
f01174b3:	c1 e0 03             	shl    $0x3,%eax
f01174b6:	01 d8                	add    %ebx,%eax
f01174b8:	05 b8 00 00 00       	add    $0xb8,%eax
f01174bd:	8b 00                	mov    (%eax),%eax
f01174bf:	39 c1                	cmp    %eax,%ecx
f01174c1:	74 17                	je     f01174da <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f01174c3:	83 ec 04             	sub    $0x4,%esp
f01174c6:	68 f0 87 13 f0       	push   $0xf01387f0
f01174cb:	68 bb 00 00 00       	push   $0xbb
f01174d0:	68 fd 85 13 f0       	push   $0xf01385fd
f01174d5:	e8 d6 8c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01174da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01174dd:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01174e4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01174e7:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01174ea:	89 d0                	mov    %edx,%eax
f01174ec:	01 c0                	add    %eax,%eax
f01174ee:	01 d0                	add    %edx,%eax
f01174f0:	c1 e0 03             	shl    $0x3,%eax
f01174f3:	01 d8                	add    %ebx,%eax
f01174f5:	05 c0 00 00 00       	add    $0xc0,%eax
f01174fa:	8b 00                	mov    (%eax),%eax
f01174fc:	39 c1                	cmp    %eax,%ecx
f01174fe:	74 17                	je     f0117517 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0117500:	83 ec 04             	sub    $0x4,%esp
f0117503:	68 f0 87 13 f0       	push   $0xf01387f0
f0117508:	68 be 00 00 00       	push   $0xbe
f011750d:	68 fd 85 13 f0       	push   $0xf01385fd
f0117512:	e8 99 8c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117517:	ff 45 bc             	incl   -0x44(%ebp)
f011751a:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011751e:	0f 8e 79 ff ff ff    	jle    f011749d <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117524:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011752b:	eb 7d                	jmp    f01175aa <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011752d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117530:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117537:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011753a:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011753d:	89 d0                	mov    %edx,%eax
f011753f:	01 c0                	add    %eax,%eax
f0117541:	01 d0                	add    %edx,%eax
f0117543:	c1 e0 03             	shl    $0x3,%eax
f0117546:	01 d8                	add    %ebx,%eax
f0117548:	05 b8 00 00 00       	add    $0xb8,%eax
f011754d:	8b 00                	mov    (%eax),%eax
f011754f:	39 c1                	cmp    %eax,%ecx
f0117551:	74 17                	je     f011756a <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117553:	83 ec 04             	sub    $0x4,%esp
f0117556:	68 f0 87 13 f0       	push   $0xf01387f0
f011755b:	68 c4 00 00 00       	push   $0xc4
f0117560:	68 fd 85 13 f0       	push   $0xf01385fd
f0117565:	e8 46 8c fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011756a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011756d:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117574:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117577:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011757a:	89 d0                	mov    %edx,%eax
f011757c:	01 c0                	add    %eax,%eax
f011757e:	01 d0                	add    %edx,%eax
f0117580:	c1 e0 03             	shl    $0x3,%eax
f0117583:	01 d8                	add    %ebx,%eax
f0117585:	05 c0 00 00 00       	add    $0xc0,%eax
f011758a:	8b 00                	mov    (%eax),%eax
f011758c:	39 c1                	cmp    %eax,%ecx
f011758e:	74 17                	je     f01175a7 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0117590:	83 ec 04             	sub    $0x4,%esp
f0117593:	68 f0 87 13 f0       	push   $0xf01387f0
f0117598:	68 c7 00 00 00       	push   $0xc7
f011759d:	68 fd 85 13 f0       	push   $0xf01385fd
f01175a2:	e8 09 8c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01175a7:	ff 45 b8             	incl   -0x48(%ebp)
f01175aa:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01175ae:	0f 8e 79 ff ff ff    	jle    f011752d <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01175b4:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01175bb:	75 6e 61 
f01175be:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01175c5:	6c 00 00 
f01175c8:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01175ce:	b9 17 00 00 00       	mov    $0x17,%ecx
f01175d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01175d8:	89 d7                	mov    %edx,%edi
f01175da:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01175dc:	83 ec 0c             	sub    $0xc,%esp
f01175df:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01175e5:	50                   	push   %eax
f01175e6:	e8 d8 a5 fe ff       	call   f0101bc3 <execute_command>
f01175eb:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f01175ee:	eb 10                	jmp    f0117600 <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01175f0:	83 ec 0c             	sub    $0xc,%esp
f01175f3:	68 24 88 13 f0       	push   $0xf0138824
f01175f8:	e8 34 98 fe ff       	call   f0100e31 <cprintf>
f01175fd:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0117600:	90                   	nop
f0117601:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117604:	5b                   	pop    %ebx
f0117605:	5e                   	pop    %esi
f0117606:	5f                   	pop    %edi
f0117607:	5d                   	pop    %ebp
f0117608:	c3                   	ret    

f0117609 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117609:	55                   	push   %ebp
f011760a:	89 e5                	mov    %esp,%ebp
f011760c:	57                   	push   %edi
f011760d:	56                   	push   %esi
f011760e:	53                   	push   %ebx
f011760f:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117615:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f011761a:	84 c0                	test   %al,%al
f011761c:	0f 84 1b 0a 00 00    	je     f011803d <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117622:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0117629:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011762f:	bb 60 88 13 f0       	mov    $0xf0138860,%ebx
f0117634:	ba 04 00 00 00       	mov    $0x4,%edx
f0117639:	89 c7                	mov    %eax,%edi
f011763b:	89 de                	mov    %ebx,%esi
f011763d:	89 d1                	mov    %edx,%ecx
f011763f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117641:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117647:	b9 15 00 00 00       	mov    $0x15,%ecx
f011764c:	b8 00 00 00 00       	mov    $0x0,%eax
f0117651:	89 d7                	mov    %edx,%edi
f0117653:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117655:	83 ec 0c             	sub    $0xc,%esp
f0117658:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011765e:	50                   	push   %eax
f011765f:	e8 5f a5 fe ff       	call   f0101bc3 <execute_command>
f0117664:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117667:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011766d:	bb 68 8b 13 f0       	mov    $0xf0138b68,%ebx
f0117672:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117677:	89 c7                	mov    %eax,%edi
f0117679:	89 de                	mov    %ebx,%esi
f011767b:	89 d1                	mov    %edx,%ecx
f011767d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011767f:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117685:	b9 57 00 00 00       	mov    $0x57,%ecx
f011768a:	b0 00                	mov    $0x0,%al
f011768c:	89 d7                	mov    %edx,%edi
f011768e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117690:	83 ec 0c             	sub    $0xc,%esp
f0117693:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117699:	50                   	push   %eax
f011769a:	e8 24 a5 fe ff       	call   f0101bc3 <execute_command>
f011769f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01176a2:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01176a8:	bb cc 8b 13 f0       	mov    $0xf0138bcc,%ebx
f01176ad:	ba 17 00 00 00       	mov    $0x17,%edx
f01176b2:	89 c7                	mov    %eax,%edi
f01176b4:	89 de                	mov    %ebx,%esi
f01176b6:	89 d1                	mov    %edx,%ecx
f01176b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01176ba:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01176c0:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01176c5:	b0 00                	mov    $0x0,%al
f01176c7:	89 d7                	mov    %edx,%edi
f01176c9:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01176cb:	83 ec 0c             	sub    $0xc,%esp
f01176ce:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01176d4:	50                   	push   %eax
f01176d5:	e8 e9 a4 fe ff       	call   f0101bc3 <execute_command>
f01176da:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01176dd:	83 ec 04             	sub    $0x4,%esp
f01176e0:	6a 00                	push   $0x0
f01176e2:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01176e5:	50                   	push   %eax
f01176e6:	68 00 10 00 00       	push   $0x1000
f01176eb:	e8 12 1f ff ff       	call   f0109602 <envid2env>
f01176f0:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01176f3:	83 ec 04             	sub    $0x4,%esp
f01176f6:	6a 00                	push   $0x0
f01176f8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01176fb:	50                   	push   %eax
f01176fc:	68 01 10 00 00       	push   $0x1001
f0117701:	e8 fc 1e ff ff       	call   f0109602 <envid2env>
f0117706:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117709:	83 ec 04             	sub    $0x4,%esp
f011770c:	6a 00                	push   $0x0
f011770e:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117711:	50                   	push   %eax
f0117712:	68 02 10 00 00       	push   $0x1002
f0117717:	e8 e6 1e ff ff       	call   f0109602 <envid2env>
f011771c:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011771f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117722:	85 c0                	test   %eax,%eax
f0117724:	74 0e                	je     f0117734 <test_priority_normal_and_lower+0x12b>
f0117726:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117729:	85 c0                	test   %eax,%eax
f011772b:	74 07                	je     f0117734 <test_priority_normal_and_lower+0x12b>
f011772d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117730:	85 c0                	test   %eax,%eax
f0117732:	75 17                	jne    f011774b <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117734:	83 ec 04             	sub    $0x4,%esp
f0117737:	68 e4 85 13 f0       	push   $0xf01385e4
f011773c:	68 f2 00 00 00       	push   $0xf2
f0117741:	68 fd 85 13 f0       	push   $0xf01385fd
f0117746:	e8 65 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011774b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011774e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117754:	83 f8 14             	cmp    $0x14,%eax
f0117757:	75 1c                	jne    f0117775 <test_priority_normal_and_lower+0x16c>
f0117759:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011775c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117762:	83 f8 1e             	cmp    $0x1e,%eax
f0117765:	75 0e                	jne    f0117775 <test_priority_normal_and_lower+0x16c>
f0117767:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011776a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117770:	83 f8 28             	cmp    $0x28,%eax
f0117773:	74 17                	je     f011778c <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117775:	83 ec 04             	sub    $0x4,%esp
f0117778:	68 8c 89 13 f0       	push   $0xf013898c
f011777d:	68 f5 00 00 00       	push   $0xf5
f0117782:	68 fd 85 13 f0       	push   $0xf01385fd
f0117787:	e8 24 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f011778c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117793:	eb 47                	jmp    f01177dc <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117795:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117798:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011779b:	89 d0                	mov    %edx,%eax
f011779d:	01 c0                	add    %eax,%eax
f011779f:	01 d0                	add    %edx,%eax
f01177a1:	c1 e0 03             	shl    $0x3,%eax
f01177a4:	01 c8                	add    %ecx,%eax
f01177a6:	05 b8 00 00 00       	add    $0xb8,%eax
f01177ab:	8b 10                	mov    (%eax),%edx
f01177ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177b0:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01177b7:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01177ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01177bd:	89 d0                	mov    %edx,%eax
f01177bf:	01 c0                	add    %eax,%eax
f01177c1:	01 d0                	add    %edx,%eax
f01177c3:	c1 e0 03             	shl    $0x3,%eax
f01177c6:	01 c8                	add    %ecx,%eax
f01177c8:	05 c0 00 00 00       	add    $0xc0,%eax
f01177cd:	8b 10                	mov    (%eax),%edx
f01177cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177d2:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01177d9:	ff 45 e4             	incl   -0x1c(%ebp)
f01177dc:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01177e0:	7e b3                	jle    f0117795 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01177e2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01177e9:	eb 47                	jmp    f0117832 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01177eb:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01177ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01177f1:	89 d0                	mov    %edx,%eax
f01177f3:	01 c0                	add    %eax,%eax
f01177f5:	01 d0                	add    %edx,%eax
f01177f7:	c1 e0 03             	shl    $0x3,%eax
f01177fa:	01 c8                	add    %ecx,%eax
f01177fc:	05 b8 00 00 00       	add    $0xb8,%eax
f0117801:	8b 10                	mov    (%eax),%edx
f0117803:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117806:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011780d:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117810:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117813:	89 d0                	mov    %edx,%eax
f0117815:	01 c0                	add    %eax,%eax
f0117817:	01 d0                	add    %edx,%eax
f0117819:	c1 e0 03             	shl    $0x3,%eax
f011781c:	01 c8                	add    %ecx,%eax
f011781e:	05 c0 00 00 00       	add    $0xc0,%eax
f0117823:	8b 10                	mov    (%eax),%edx
f0117825:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117828:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011782f:	ff 45 e0             	incl   -0x20(%ebp)
f0117832:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117836:	7e b3                	jle    f01177eb <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117838:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011783f:	eb 47                	jmp    f0117888 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117841:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117844:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117847:	89 d0                	mov    %edx,%eax
f0117849:	01 c0                	add    %eax,%eax
f011784b:	01 d0                	add    %edx,%eax
f011784d:	c1 e0 03             	shl    $0x3,%eax
f0117850:	01 c8                	add    %ecx,%eax
f0117852:	05 b8 00 00 00       	add    $0xb8,%eax
f0117857:	8b 10                	mov    (%eax),%edx
f0117859:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011785c:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117863:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117866:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117869:	89 d0                	mov    %edx,%eax
f011786b:	01 c0                	add    %eax,%eax
f011786d:	01 d0                	add    %edx,%eax
f011786f:	c1 e0 03             	shl    $0x3,%eax
f0117872:	01 c8                	add    %ecx,%eax
f0117874:	05 c0 00 00 00       	add    $0xc0,%eax
f0117879:	8b 10                	mov    (%eax),%edx
f011787b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011787e:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117885:	ff 45 dc             	incl   -0x24(%ebp)
f0117888:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011788c:	7e b3                	jle    f0117841 <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011788e:	e8 7f 4d ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117893:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117896:	e8 1d ca fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011789b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011789e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178a1:	83 ec 08             	sub    $0x8,%esp
f01178a4:	6a 03                	push   $0x3
f01178a6:	50                   	push   %eax
f01178a7:	e8 4d 32 ff ff       	call   f010aaf9 <set_program_priority>
f01178ac:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01178af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178b2:	83 ec 08             	sub    $0x8,%esp
f01178b5:	6a 03                	push   $0x3
f01178b7:	50                   	push   %eax
f01178b8:	e8 3c 32 ff ff       	call   f010aaf9 <set_program_priority>
f01178bd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01178c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178c3:	83 ec 08             	sub    $0x8,%esp
f01178c6:	6a 03                	push   $0x3
f01178c8:	50                   	push   %eax
f01178c9:	e8 2b 32 ff ff       	call   f010aaf9 <set_program_priority>
f01178ce:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178d1:	e8 e2 c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01178d6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01178d9:	74 17                	je     f01178f2 <test_priority_normal_and_lower+0x2e9>
f01178db:	83 ec 04             	sub    $0x4,%esp
f01178de:	68 80 86 13 f0       	push   $0xf0138680
f01178e3:	68 11 01 00 00       	push   $0x111
f01178e8:	68 fd 85 13 f0       	push   $0xf01385fd
f01178ed:	e8 be 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01178f2:	e8 1b 4d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01178f7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01178fa:	74 17                	je     f0117913 <test_priority_normal_and_lower+0x30a>
f01178fc:	83 ec 04             	sub    $0x4,%esp
f01178ff:	68 80 86 13 f0       	push   $0xf0138680
f0117904:	68 12 01 00 00       	push   $0x112
f0117909:	68 fd 85 13 f0       	push   $0xf01385fd
f011790e:	e8 9d 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117913:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117916:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011791c:	83 f8 14             	cmp    $0x14,%eax
f011791f:	75 1c                	jne    f011793d <test_priority_normal_and_lower+0x334>
f0117921:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117924:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011792a:	83 f8 1e             	cmp    $0x1e,%eax
f011792d:	75 0e                	jne    f011793d <test_priority_normal_and_lower+0x334>
f011792f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117932:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117938:	83 f8 28             	cmp    $0x28,%eax
f011793b:	74 17                	je     f0117954 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011793d:	83 ec 04             	sub    $0x4,%esp
f0117940:	68 ac 86 13 f0       	push   $0xf01386ac
f0117945:	68 15 01 00 00       	push   $0x115
f011794a:	68 fd 85 13 f0       	push   $0xf01385fd
f011794f:	e8 5c 88 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117954:	e8 b9 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117959:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011795c:	e8 57 c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117961:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117964:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117967:	83 ec 08             	sub    $0x8,%esp
f011796a:	6a 02                	push   $0x2
f011796c:	50                   	push   %eax
f011796d:	e8 87 31 ff ff       	call   f010aaf9 <set_program_priority>
f0117972:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117975:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117978:	83 ec 08             	sub    $0x8,%esp
f011797b:	6a 02                	push   $0x2
f011797d:	50                   	push   %eax
f011797e:	e8 76 31 ff ff       	call   f010aaf9 <set_program_priority>
f0117983:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117986:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117989:	83 ec 08             	sub    $0x8,%esp
f011798c:	6a 02                	push   $0x2
f011798e:	50                   	push   %eax
f011798f:	e8 65 31 ff ff       	call   f010aaf9 <set_program_priority>
f0117994:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117997:	e8 1c c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011799c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011799f:	74 17                	je     f01179b8 <test_priority_normal_and_lower+0x3af>
f01179a1:	83 ec 04             	sub    $0x4,%esp
f01179a4:	68 80 86 13 f0       	push   $0xf0138680
f01179a9:	68 1f 01 00 00       	push   $0x11f
f01179ae:	68 fd 85 13 f0       	push   $0xf01385fd
f01179b3:	e8 f8 87 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01179b8:	e8 55 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01179bd:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01179c0:	74 21                	je     f01179e3 <test_priority_normal_and_lower+0x3da>
f01179c2:	e8 4b 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01179c7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01179ca:	29 c2                	sub    %eax,%edx
f01179cc:	89 d0                	mov    %edx,%eax
f01179ce:	50                   	push   %eax
f01179cf:	68 00 87 13 f0       	push   $0xf0138700
f01179d4:	68 20 01 00 00       	push   $0x120
f01179d9:	68 fd 85 13 f0       	push   $0xf01385fd
f01179de:	e8 cd 87 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01179e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179e6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179ec:	83 f8 0a             	cmp    $0xa,%eax
f01179ef:	75 1c                	jne    f0117a0d <test_priority_normal_and_lower+0x404>
f01179f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01179f4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179fa:	83 f8 0f             	cmp    $0xf,%eax
f01179fd:	75 0e                	jne    f0117a0d <test_priority_normal_and_lower+0x404>
f01179ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a02:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a08:	83 f8 14             	cmp    $0x14,%eax
f0117a0b:	74 17                	je     f0117a24 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117a0d:	83 ec 04             	sub    $0x4,%esp
f0117a10:	68 30 87 13 f0       	push   $0xf0138730
f0117a15:	68 23 01 00 00       	push   $0x123
f0117a1a:	68 fd 85 13 f0       	push   $0xf01385fd
f0117a1f:	e8 8c 87 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117a24:	e8 e9 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a29:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a2c:	e8 87 c8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117a31:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117a34:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a37:	83 ec 08             	sub    $0x8,%esp
f0117a3a:	6a 02                	push   $0x2
f0117a3c:	50                   	push   %eax
f0117a3d:	e8 b7 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117a42:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117a45:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a48:	83 ec 08             	sub    $0x8,%esp
f0117a4b:	6a 02                	push   $0x2
f0117a4d:	50                   	push   %eax
f0117a4e:	e8 a6 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117a53:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117a56:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a59:	83 ec 08             	sub    $0x8,%esp
f0117a5c:	6a 02                	push   $0x2
f0117a5e:	50                   	push   %eax
f0117a5f:	e8 95 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117a64:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117a67:	e8 4c c8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117a6c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117a6f:	74 17                	je     f0117a88 <test_priority_normal_and_lower+0x47f>
f0117a71:	83 ec 04             	sub    $0x4,%esp
f0117a74:	68 80 86 13 f0       	push   $0xf0138680
f0117a79:	68 2d 01 00 00       	push   $0x12d
f0117a7e:	68 fd 85 13 f0       	push   $0xf01385fd
f0117a83:	e8 28 87 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117a88:	e8 85 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a8d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117a90:	74 21                	je     f0117ab3 <test_priority_normal_and_lower+0x4aa>
f0117a92:	e8 7b 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a97:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117a9a:	29 c2                	sub    %eax,%edx
f0117a9c:	89 d0                	mov    %edx,%eax
f0117a9e:	50                   	push   %eax
f0117a9f:	68 00 87 13 f0       	push   $0xf0138700
f0117aa4:	68 2e 01 00 00       	push   $0x12e
f0117aa9:	68 fd 85 13 f0       	push   $0xf01385fd
f0117aae:	e8 fd 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117ab3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ab6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117abc:	83 f8 0a             	cmp    $0xa,%eax
f0117abf:	75 1c                	jne    f0117add <test_priority_normal_and_lower+0x4d4>
f0117ac1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ac4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117aca:	83 f8 0f             	cmp    $0xf,%eax
f0117acd:	75 0e                	jne    f0117add <test_priority_normal_and_lower+0x4d4>
f0117acf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ad2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ad8:	83 f8 0a             	cmp    $0xa,%eax
f0117adb:	74 17                	je     f0117af4 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117add:	83 ec 04             	sub    $0x4,%esp
f0117ae0:	68 30 87 13 f0       	push   $0xf0138730
f0117ae5:	68 31 01 00 00       	push   $0x131
f0117aea:	68 fd 85 13 f0       	push   $0xf01385fd
f0117aef:	e8 bc 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117af4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117afb:	eb 7d                	jmp    f0117b7a <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117afd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117b00:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117b07:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117b0a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117b0d:	89 d0                	mov    %edx,%eax
f0117b0f:	01 c0                	add    %eax,%eax
f0117b11:	01 d0                	add    %edx,%eax
f0117b13:	c1 e0 03             	shl    $0x3,%eax
f0117b16:	01 d8                	add    %ebx,%eax
f0117b18:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b1d:	8b 00                	mov    (%eax),%eax
f0117b1f:	39 c1                	cmp    %eax,%ecx
f0117b21:	74 17                	je     f0117b3a <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117b23:	83 ec 04             	sub    $0x4,%esp
f0117b26:	68 f0 87 13 f0       	push   $0xf01387f0
f0117b2b:	68 36 01 00 00       	push   $0x136
f0117b30:	68 fd 85 13 f0       	push   $0xf01385fd
f0117b35:	e8 76 86 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117b3d:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117b44:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117b47:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117b4a:	89 d0                	mov    %edx,%eax
f0117b4c:	01 c0                	add    %eax,%eax
f0117b4e:	01 d0                	add    %edx,%eax
f0117b50:	c1 e0 03             	shl    $0x3,%eax
f0117b53:	01 d8                	add    %ebx,%eax
f0117b55:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b5a:	8b 00                	mov    (%eax),%eax
f0117b5c:	39 c1                	cmp    %eax,%ecx
f0117b5e:	74 17                	je     f0117b77 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117b60:	83 ec 04             	sub    $0x4,%esp
f0117b63:	68 f0 87 13 f0       	push   $0xf01387f0
f0117b68:	68 39 01 00 00       	push   $0x139
f0117b6d:	68 fd 85 13 f0       	push   $0xf01385fd
f0117b72:	e8 39 86 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117b77:	ff 45 d8             	incl   -0x28(%ebp)
f0117b7a:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117b7e:	0f 8e 79 ff ff ff    	jle    f0117afd <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117b84:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117b8b:	eb 7d                	jmp    f0117c0a <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117b8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b90:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117b97:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117b9a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117b9d:	89 d0                	mov    %edx,%eax
f0117b9f:	01 c0                	add    %eax,%eax
f0117ba1:	01 d0                	add    %edx,%eax
f0117ba3:	c1 e0 03             	shl    $0x3,%eax
f0117ba6:	01 d8                	add    %ebx,%eax
f0117ba8:	05 b8 00 00 00       	add    $0xb8,%eax
f0117bad:	8b 00                	mov    (%eax),%eax
f0117baf:	39 c1                	cmp    %eax,%ecx
f0117bb1:	74 17                	je     f0117bca <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117bb3:	83 ec 04             	sub    $0x4,%esp
f0117bb6:	68 f0 87 13 f0       	push   $0xf01387f0
f0117bbb:	68 3f 01 00 00       	push   $0x13f
f0117bc0:	68 fd 85 13 f0       	push   $0xf01385fd
f0117bc5:	e8 e6 85 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117bcd:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117bd4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117bd7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117bda:	89 d0                	mov    %edx,%eax
f0117bdc:	01 c0                	add    %eax,%eax
f0117bde:	01 d0                	add    %edx,%eax
f0117be0:	c1 e0 03             	shl    $0x3,%eax
f0117be3:	01 d8                	add    %ebx,%eax
f0117be5:	05 c0 00 00 00       	add    $0xc0,%eax
f0117bea:	8b 00                	mov    (%eax),%eax
f0117bec:	39 c1                	cmp    %eax,%ecx
f0117bee:	74 17                	je     f0117c07 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117bf0:	83 ec 04             	sub    $0x4,%esp
f0117bf3:	68 f0 87 13 f0       	push   $0xf01387f0
f0117bf8:	68 42 01 00 00       	push   $0x142
f0117bfd:	68 fd 85 13 f0       	push   $0xf01385fd
f0117c02:	e8 a9 85 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117c07:	ff 45 d4             	incl   -0x2c(%ebp)
f0117c0a:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117c0e:	0f 8e 79 ff ff ff    	jle    f0117b8d <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117c14:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117c1b:	eb 7d                	jmp    f0117c9a <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117c1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c20:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117c27:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117c2a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117c2d:	89 d0                	mov    %edx,%eax
f0117c2f:	01 c0                	add    %eax,%eax
f0117c31:	01 d0                	add    %edx,%eax
f0117c33:	c1 e0 03             	shl    $0x3,%eax
f0117c36:	01 d8                	add    %ebx,%eax
f0117c38:	05 b8 00 00 00       	add    $0xb8,%eax
f0117c3d:	8b 00                	mov    (%eax),%eax
f0117c3f:	39 c1                	cmp    %eax,%ecx
f0117c41:	74 17                	je     f0117c5a <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0117c43:	83 ec 04             	sub    $0x4,%esp
f0117c46:	68 f0 87 13 f0       	push   $0xf01387f0
f0117c4b:	68 48 01 00 00       	push   $0x148
f0117c50:	68 fd 85 13 f0       	push   $0xf01385fd
f0117c55:	e8 56 85 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117c5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c5d:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117c64:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117c67:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117c6a:	89 d0                	mov    %edx,%eax
f0117c6c:	01 c0                	add    %eax,%eax
f0117c6e:	01 d0                	add    %edx,%eax
f0117c70:	c1 e0 03             	shl    $0x3,%eax
f0117c73:	01 d8                	add    %ebx,%eax
f0117c75:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c7a:	8b 00                	mov    (%eax),%eax
f0117c7c:	39 c1                	cmp    %eax,%ecx
f0117c7e:	74 17                	je     f0117c97 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0117c80:	83 ec 04             	sub    $0x4,%esp
f0117c83:	68 f0 87 13 f0       	push   $0xf01387f0
f0117c88:	68 4b 01 00 00       	push   $0x14b
f0117c8d:	68 fd 85 13 f0       	push   $0xf01385fd
f0117c92:	e8 19 85 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117c97:	ff 45 d0             	incl   -0x30(%ebp)
f0117c9a:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117c9e:	0f 8e 79 ff ff ff    	jle    f0117c1d <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117ca4:	e8 69 49 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117ca9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117cac:	e8 07 c6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117cb1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117cb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cb7:	83 ec 08             	sub    $0x8,%esp
f0117cba:	6a 01                	push   $0x1
f0117cbc:	50                   	push   %eax
f0117cbd:	e8 37 2e ff ff       	call   f010aaf9 <set_program_priority>
f0117cc2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117cc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cc8:	83 ec 08             	sub    $0x8,%esp
f0117ccb:	6a 01                	push   $0x1
f0117ccd:	50                   	push   %eax
f0117cce:	e8 26 2e ff ff       	call   f010aaf9 <set_program_priority>
f0117cd3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117cd6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cd9:	83 ec 08             	sub    $0x8,%esp
f0117cdc:	6a 01                	push   $0x1
f0117cde:	50                   	push   %eax
f0117cdf:	e8 15 2e ff ff       	call   f010aaf9 <set_program_priority>
f0117ce4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ce7:	e8 cc c5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117cec:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117cef:	74 17                	je     f0117d08 <test_priority_normal_and_lower+0x6ff>
f0117cf1:	83 ec 04             	sub    $0x4,%esp
f0117cf4:	68 80 86 13 f0       	push   $0xf0138680
f0117cf9:	68 54 01 00 00       	push   $0x154
f0117cfe:	68 fd 85 13 f0       	push   $0xf01385fd
f0117d03:	e8 a8 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117d08:	e8 05 49 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117d0d:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117d10:	83 f8 0d             	cmp    $0xd,%eax
f0117d13:	74 17                	je     f0117d2c <test_priority_normal_and_lower+0x723>
f0117d15:	83 ec 04             	sub    $0x4,%esp
f0117d18:	68 d8 89 13 f0       	push   $0xf01389d8
f0117d1d:	68 55 01 00 00       	push   $0x155
f0117d22:	68 fd 85 13 f0       	push   $0xf01385fd
f0117d27:	e8 84 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117d2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d2f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d35:	83 f8 05             	cmp    $0x5,%eax
f0117d38:	75 1c                	jne    f0117d56 <test_priority_normal_and_lower+0x74d>
f0117d3a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d3d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d43:	83 f8 07             	cmp    $0x7,%eax
f0117d46:	75 0e                	jne    f0117d56 <test_priority_normal_and_lower+0x74d>
f0117d48:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d4b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d51:	83 f8 05             	cmp    $0x5,%eax
f0117d54:	74 17                	je     f0117d6d <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0117d56:	83 ec 04             	sub    $0x4,%esp
f0117d59:	68 20 8a 13 f0       	push   $0xf0138a20
f0117d5e:	68 58 01 00 00       	push   $0x158
f0117d63:	68 fd 85 13 f0       	push   $0xf01385fd
f0117d68:	e8 43 84 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117d6d:	e8 a0 48 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117d72:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d75:	e8 3e c5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117d7a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117d7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d80:	83 ec 08             	sub    $0x8,%esp
f0117d83:	6a 01                	push   $0x1
f0117d85:	50                   	push   %eax
f0117d86:	e8 6e 2d ff ff       	call   f010aaf9 <set_program_priority>
f0117d8b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d8e:	e8 25 c5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117d93:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d96:	74 17                	je     f0117daf <test_priority_normal_and_lower+0x7a6>
f0117d98:	83 ec 04             	sub    $0x4,%esp
f0117d9b:	68 80 86 13 f0       	push   $0xf0138680
f0117da0:	68 5e 01 00 00       	push   $0x15e
f0117da5:	68 fd 85 13 f0       	push   $0xf01385fd
f0117daa:	e8 01 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117daf:	e8 5e 48 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117db4:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117db7:	83 f8 03             	cmp    $0x3,%eax
f0117dba:	74 17                	je     f0117dd3 <test_priority_normal_and_lower+0x7ca>
f0117dbc:	83 ec 04             	sub    $0x4,%esp
f0117dbf:	68 80 86 13 f0       	push   $0xf0138680
f0117dc4:	68 5f 01 00 00       	push   $0x15f
f0117dc9:	68 fd 85 13 f0       	push   $0xf01385fd
f0117dce:	e8 dd 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117dd3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117dd6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ddc:	83 f8 02             	cmp    $0x2,%eax
f0117ddf:	75 1c                	jne    f0117dfd <test_priority_normal_and_lower+0x7f4>
f0117de1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117de4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dea:	83 f8 07             	cmp    $0x7,%eax
f0117ded:	75 0e                	jne    f0117dfd <test_priority_normal_and_lower+0x7f4>
f0117def:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117df2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117df8:	83 f8 05             	cmp    $0x5,%eax
f0117dfb:	74 17                	je     f0117e14 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0117dfd:	83 ec 04             	sub    $0x4,%esp
f0117e00:	68 b4 87 13 f0       	push   $0xf01387b4
f0117e05:	68 62 01 00 00       	push   $0x162
f0117e0a:	68 fd 85 13 f0       	push   $0xf01385fd
f0117e0f:	e8 9c 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f0117e14:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117e1b:	e9 83 00 00 00       	jmp    f0117ea3 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117e20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117e23:	83 c0 08             	add    $0x8,%eax
f0117e26:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117e2d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117e30:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117e33:	89 d0                	mov    %edx,%eax
f0117e35:	01 c0                	add    %eax,%eax
f0117e37:	01 d0                	add    %edx,%eax
f0117e39:	c1 e0 03             	shl    $0x3,%eax
f0117e3c:	01 d8                	add    %ebx,%eax
f0117e3e:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e43:	8b 00                	mov    (%eax),%eax
f0117e45:	39 c1                	cmp    %eax,%ecx
f0117e47:	74 17                	je     f0117e60 <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e49:	83 ec 04             	sub    $0x4,%esp
f0117e4c:	68 50 8a 13 f0       	push   $0xf0138a50
f0117e51:	68 67 01 00 00       	push   $0x167
f0117e56:	68 fd 85 13 f0       	push   $0xf01385fd
f0117e5b:	e8 50 83 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117e60:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117e63:	83 c0 08             	add    $0x8,%eax
f0117e66:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117e6d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117e70:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117e73:	89 d0                	mov    %edx,%eax
f0117e75:	01 c0                	add    %eax,%eax
f0117e77:	01 d0                	add    %edx,%eax
f0117e79:	c1 e0 03             	shl    $0x3,%eax
f0117e7c:	01 d8                	add    %ebx,%eax
f0117e7e:	05 c0 00 00 00       	add    $0xc0,%eax
f0117e83:	8b 00                	mov    (%eax),%eax
f0117e85:	39 c1                	cmp    %eax,%ecx
f0117e87:	74 17                	je     f0117ea0 <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e89:	83 ec 04             	sub    $0x4,%esp
f0117e8c:	68 50 8a 13 f0       	push   $0xf0138a50
f0117e91:	68 6a 01 00 00       	push   $0x16a
f0117e96:	68 fd 85 13 f0       	push   $0xf01385fd
f0117e9b:	e8 10 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117ea0:	ff 45 cc             	incl   -0x34(%ebp)
f0117ea3:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117ea7:	0f 8e 73 ff ff ff    	jle    f0117e20 <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117ead:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117eb4:	e9 83 00 00 00       	jmp    f0117f3c <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117eb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117ebc:	83 c0 03             	add    $0x3,%eax
f0117ebf:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117ec6:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117ec9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117ecc:	89 d0                	mov    %edx,%eax
f0117ece:	01 c0                	add    %eax,%eax
f0117ed0:	01 d0                	add    %edx,%eax
f0117ed2:	c1 e0 03             	shl    $0x3,%eax
f0117ed5:	01 d8                	add    %ebx,%eax
f0117ed7:	05 b8 00 00 00       	add    $0xb8,%eax
f0117edc:	8b 00                	mov    (%eax),%eax
f0117ede:	39 c1                	cmp    %eax,%ecx
f0117ee0:	74 17                	je     f0117ef9 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117ee2:	ff 75 c8             	pushl  -0x38(%ebp)
f0117ee5:	68 bc 8a 13 f0       	push   $0xf0138abc
f0117eea:	68 70 01 00 00       	push   $0x170
f0117eef:	68 fd 85 13 f0       	push   $0xf01385fd
f0117ef4:	e8 b7 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ef9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117efc:	83 c0 03             	add    $0x3,%eax
f0117eff:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117f06:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f09:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117f0c:	89 d0                	mov    %edx,%eax
f0117f0e:	01 c0                	add    %eax,%eax
f0117f10:	01 d0                	add    %edx,%eax
f0117f12:	c1 e0 03             	shl    $0x3,%eax
f0117f15:	01 d8                	add    %ebx,%eax
f0117f17:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f1c:	8b 00                	mov    (%eax),%eax
f0117f1e:	39 c1                	cmp    %eax,%ecx
f0117f20:	74 17                	je     f0117f39 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117f22:	83 ec 04             	sub    $0x4,%esp
f0117f25:	68 50 8a 13 f0       	push   $0xf0138a50
f0117f2a:	68 73 01 00 00       	push   $0x173
f0117f2f:	68 fd 85 13 f0       	push   $0xf01385fd
f0117f34:	e8 77 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117f39:	ff 45 c8             	incl   -0x38(%ebp)
f0117f3c:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117f40:	0f 8e 73 ff ff ff    	jle    f0117eb9 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117f46:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117f4d:	e9 83 00 00 00       	jmp    f0117fd5 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f52:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f55:	83 c0 05             	add    $0x5,%eax
f0117f58:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117f5f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117f62:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117f65:	89 d0                	mov    %edx,%eax
f0117f67:	01 c0                	add    %eax,%eax
f0117f69:	01 d0                	add    %edx,%eax
f0117f6b:	c1 e0 03             	shl    $0x3,%eax
f0117f6e:	01 d8                	add    %ebx,%eax
f0117f70:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f75:	8b 00                	mov    (%eax),%eax
f0117f77:	39 c1                	cmp    %eax,%ecx
f0117f79:	74 17                	je     f0117f92 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117f7b:	83 ec 04             	sub    $0x4,%esp
f0117f7e:	68 50 8a 13 f0       	push   $0xf0138a50
f0117f83:	68 79 01 00 00       	push   $0x179
f0117f88:	68 fd 85 13 f0       	push   $0xf01385fd
f0117f8d:	e8 1e 82 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f95:	83 c0 05             	add    $0x5,%eax
f0117f98:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117f9f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117fa2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117fa5:	89 d0                	mov    %edx,%eax
f0117fa7:	01 c0                	add    %eax,%eax
f0117fa9:	01 d0                	add    %edx,%eax
f0117fab:	c1 e0 03             	shl    $0x3,%eax
f0117fae:	01 d8                	add    %ebx,%eax
f0117fb0:	05 c0 00 00 00       	add    $0xc0,%eax
f0117fb5:	8b 00                	mov    (%eax),%eax
f0117fb7:	39 c1                	cmp    %eax,%ecx
f0117fb9:	74 17                	je     f0117fd2 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117fbb:	83 ec 04             	sub    $0x4,%esp
f0117fbe:	68 50 8a 13 f0       	push   $0xf0138a50
f0117fc3:	68 7c 01 00 00       	push   $0x17c
f0117fc8:	68 fd 85 13 f0       	push   $0xf01385fd
f0117fcd:	e8 de 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117fd2:	ff 45 c4             	incl   -0x3c(%ebp)
f0117fd5:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117fd9:	0f 8e 73 ff ff ff    	jle    f0117f52 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117fdf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117fe2:	83 ec 08             	sub    $0x8,%esp
f0117fe5:	6a 05                	push   $0x5
f0117fe7:	50                   	push   %eax
f0117fe8:	e8 0c 2b ff ff       	call   f010aaf9 <set_program_priority>
f0117fed:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117ff0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ff3:	83 ec 08             	sub    $0x8,%esp
f0117ff6:	6a 05                	push   $0x5
f0117ff8:	50                   	push   %eax
f0117ff9:	e8 fb 2a ff ff       	call   f010aaf9 <set_program_priority>
f0117ffe:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0118001:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118008:	75 6e 61 
f011800b:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0118012:	6c 00 00 
f0118015:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011801b:	b9 17 00 00 00       	mov    $0x17,%ecx
f0118020:	b8 00 00 00 00       	mov    $0x0,%eax
f0118025:	89 d7                	mov    %edx,%edi
f0118027:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118029:	83 ec 0c             	sub    $0xc,%esp
f011802c:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0118032:	50                   	push   %eax
f0118033:	e8 8b 9b fe ff       	call   f0101bc3 <execute_command>
f0118038:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f011803b:	eb 10                	jmp    f011804d <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011803d:	83 ec 0c             	sub    $0xc,%esp
f0118040:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0118045:	e8 e7 8d fe ff       	call   f0100e31 <cprintf>
f011804a:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011804d:	90                   	nop
f011804e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0118051:	5b                   	pop    %ebx
f0118052:	5e                   	pop    %esi
f0118053:	5f                   	pop    %edi
f0118054:	5d                   	pop    %ebp
f0118055:	c3                   	ret    

f0118056 <isKHeapPlacementStrategyNEXTFIT>:
f0118056:	55                   	push   %ebp
f0118057:	89 e5                	mov    %esp,%ebp
f0118059:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f011805e:	83 f8 03             	cmp    $0x3,%eax
f0118061:	75 04                	jne    f0118067 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0118063:	b0 01                	mov    $0x1,%al
f0118065:	eb 02                	jmp    f0118069 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118067:	b0 00                	mov    $0x0,%al
f0118069:	5d                   	pop    %ebp
f011806a:	c3                   	ret    

f011806b <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f011806b:	55                   	push   %ebp
f011806c:	89 e5                	mov    %esp,%ebp
f011806e:	57                   	push   %edi
f011806f:	53                   	push   %ebx
f0118070:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118076:	83 ec 0c             	sub    $0xc,%esp
f0118079:	68 30 8c 13 f0       	push   $0xf0138c30
f011807e:	e8 ae 8d fe ff       	call   f0100e31 <cprintf>
f0118083:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118086:	83 ec 0c             	sub    $0xc,%esp
f0118089:	68 60 8c 13 f0       	push   $0xf0138c60
f011808e:	e8 9e 8d fe ff       	call   f0100e31 <cprintf>
f0118093:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118096:	83 ec 0c             	sub    $0xc,%esp
f0118099:	68 30 8c 13 f0       	push   $0xf0138c30
f011809e:	e8 8e 8d fe ff       	call   f0100e31 <cprintf>
f01180a3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01180a6:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01180aa:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01180ae:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01180b4:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01180ba:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01180c1:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01180c8:	e8 45 45 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01180cd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01180d0:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f01180d6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01180db:	b8 00 00 00 00       	mov    $0x0,%eax
f01180e0:	89 d7                	mov    %edx,%edi
f01180e2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01180e4:	e8 29 45 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01180e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01180ec:	e8 c7 c1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01180f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01180f4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01180fb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118100:	0f b6 d0             	movzbl %al,%edx
f0118103:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118106:	01 d0                	add    %edx,%eax
f0118108:	48                   	dec    %eax
f0118109:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011810c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011810f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118114:	f7 75 d4             	divl   -0x2c(%ebp)
f0118117:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011811a:	29 d0                	sub    %edx,%eax
f011811c:	89 c1                	mov    %eax,%ecx
f011811e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0118125:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011812a:	0f b6 c0             	movzbl %al,%eax
f011812d:	c1 e0 04             	shl    $0x4,%eax
f0118130:	89 c2                	mov    %eax,%edx
f0118132:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118135:	01 d0                	add    %edx,%eax
f0118137:	48                   	dec    %eax
f0118138:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011813b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011813e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118143:	f7 75 cc             	divl   -0x34(%ebp)
f0118146:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118149:	29 d0                	sub    %edx,%eax
f011814b:	01 c8                	add    %ecx,%eax
f011814d:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0118152:	29 c2                	sub    %eax,%edx
f0118154:	89 d0                	mov    %edx,%eax
f0118156:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118159:	83 ec 0c             	sub    $0xc,%esp
f011815c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011815f:	e8 2f fa fe ff       	call   f0107b93 <kmalloc>
f0118164:	83 c4 10             	add    $0x10,%esp
f0118167:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011816d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118173:	85 c0                	test   %eax,%eax
f0118175:	74 14                	je     f011818b <test_kmalloc+0x120>
f0118177:	83 ec 04             	sub    $0x4,%esp
f011817a:	68 bc 8c 13 f0       	push   $0xf0138cbc
f011817f:	6a 40                	push   $0x40
f0118181:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118186:	e8 25 80 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011818b:	e8 28 c1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118190:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118193:	74 14                	je     f01181a9 <test_kmalloc+0x13e>
f0118195:	83 ec 04             	sub    $0x4,%esp
f0118198:	68 08 8d 13 f0       	push   $0xf0138d08
f011819d:	6a 41                	push   $0x41
f011819f:	68 ee 8c 13 f0       	push   $0xf0138cee
f01181a4:	e8 07 80 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181a9:	e8 64 44 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01181ae:	89 c2                	mov    %eax,%edx
f01181b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01181b3:	39 c2                	cmp    %eax,%edx
f01181b5:	74 14                	je     f01181cb <test_kmalloc+0x160>
f01181b7:	83 ec 04             	sub    $0x4,%esp
f01181ba:	68 70 8d 13 f0       	push   $0xf0138d70
f01181bf:	6a 42                	push   $0x42
f01181c1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01181c6:	e8 e5 7f fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01181cb:	83 ec 0c             	sub    $0xc,%esp
f01181ce:	68 b0 8d 13 f0       	push   $0xf0138db0
f01181d3:	e8 59 8c fe ff       	call   f0100e31 <cprintf>
f01181d8:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01181db:	e8 32 44 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01181e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181e3:	e8 d0 c0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01181e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01181eb:	83 ec 0c             	sub    $0xc,%esp
f01181ee:	68 00 fc 1f 00       	push   $0x1ffc00
f01181f3:	e8 9b f9 fe ff       	call   f0107b93 <kmalloc>
f01181f8:	83 c4 10             	add    $0x10,%esp
f01181fb:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118201:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118207:	89 c1                	mov    %eax,%ecx
f0118209:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118210:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118215:	0f b6 d0             	movzbl %al,%edx
f0118218:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011821b:	01 d0                	add    %edx,%eax
f011821d:	48                   	dec    %eax
f011821e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118221:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118224:	ba 00 00 00 00       	mov    $0x0,%edx
f0118229:	f7 75 c0             	divl   -0x40(%ebp)
f011822c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011822f:	29 d0                	sub    %edx,%eax
f0118231:	89 c3                	mov    %eax,%ebx
f0118233:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011823a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011823f:	0f b6 c0             	movzbl %al,%eax
f0118242:	c1 e0 04             	shl    $0x4,%eax
f0118245:	89 c2                	mov    %eax,%edx
f0118247:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011824a:	01 d0                	add    %edx,%eax
f011824c:	48                   	dec    %eax
f011824d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118250:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118253:	ba 00 00 00 00       	mov    $0x0,%edx
f0118258:	f7 75 b8             	divl   -0x48(%ebp)
f011825b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011825e:	29 d0                	sub    %edx,%eax
f0118260:	01 d8                	add    %ebx,%eax
f0118262:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118267:	39 c1                	cmp    %eax,%ecx
f0118269:	74 14                	je     f011827f <test_kmalloc+0x214>
f011826b:	83 ec 04             	sub    $0x4,%esp
f011826e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0118273:	6a 49                	push   $0x49
f0118275:	68 ee 8c 13 f0       	push   $0xf0138cee
f011827a:	e8 31 7f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011827f:	e8 34 c0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118284:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118287:	74 14                	je     f011829d <test_kmalloc+0x232>
f0118289:	83 ec 04             	sub    $0x4,%esp
f011828c:	68 08 8d 13 f0       	push   $0xf0138d08
f0118291:	6a 4a                	push   $0x4a
f0118293:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118298:	e8 13 7f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011829d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01182a0:	e8 6d 43 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01182a5:	29 c3                	sub    %eax,%ebx
f01182a7:	89 d8                	mov    %ebx,%eax
f01182a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01182ae:	74 14                	je     f01182c4 <test_kmalloc+0x259>
f01182b0:	83 ec 04             	sub    $0x4,%esp
f01182b3:	68 70 8d 13 f0       	push   $0xf0138d70
f01182b8:	6a 4b                	push   $0x4b
f01182ba:	68 ee 8c 13 f0       	push   $0xf0138cee
f01182bf:	e8 ec 7e fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01182c4:	e8 49 43 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01182c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182cc:	e8 e7 bf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01182d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01182d4:	83 ec 0c             	sub    $0xc,%esp
f01182d7:	68 00 fc 1f 00       	push   $0x1ffc00
f01182dc:	e8 b2 f8 fe ff       	call   f0107b93 <kmalloc>
f01182e1:	83 c4 10             	add    $0x10,%esp
f01182e4:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01182ea:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01182f0:	89 c1                	mov    %eax,%ecx
f01182f2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01182f9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01182fe:	0f b6 d0             	movzbl %al,%edx
f0118301:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118304:	01 d0                	add    %edx,%eax
f0118306:	48                   	dec    %eax
f0118307:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011830a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011830d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118312:	f7 75 b0             	divl   -0x50(%ebp)
f0118315:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118318:	29 d0                	sub    %edx,%eax
f011831a:	89 c3                	mov    %eax,%ebx
f011831c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118323:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118328:	0f b6 c0             	movzbl %al,%eax
f011832b:	c1 e0 04             	shl    $0x4,%eax
f011832e:	89 c2                	mov    %eax,%edx
f0118330:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118333:	01 d0                	add    %edx,%eax
f0118335:	48                   	dec    %eax
f0118336:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118339:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011833c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118341:	f7 75 a8             	divl   -0x58(%ebp)
f0118344:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118347:	29 d0                	sub    %edx,%eax
f0118349:	01 d8                	add    %ebx,%eax
f011834b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118350:	39 c1                	cmp    %eax,%ecx
f0118352:	74 14                	je     f0118368 <test_kmalloc+0x2fd>
f0118354:	83 ec 04             	sub    $0x4,%esp
f0118357:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011835c:	6a 51                	push   $0x51
f011835e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118363:	e8 48 7e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118368:	e8 4b bf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011836d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118370:	74 14                	je     f0118386 <test_kmalloc+0x31b>
f0118372:	83 ec 04             	sub    $0x4,%esp
f0118375:	68 08 8d 13 f0       	push   $0xf0138d08
f011837a:	6a 52                	push   $0x52
f011837c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118381:	e8 2a 7e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118386:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118389:	e8 84 42 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011838e:	29 c3                	sub    %eax,%ebx
f0118390:	89 d8                	mov    %ebx,%eax
f0118392:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118397:	74 14                	je     f01183ad <test_kmalloc+0x342>
f0118399:	83 ec 04             	sub    $0x4,%esp
f011839c:	68 70 8d 13 f0       	push   $0xf0138d70
f01183a1:	6a 53                	push   $0x53
f01183a3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01183a8:	e8 03 7e fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01183ad:	e8 60 42 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01183b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183b5:	e8 fe be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01183ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01183bd:	83 ec 0c             	sub    $0xc,%esp
f01183c0:	68 00 08 00 00       	push   $0x800
f01183c5:	e8 c9 f7 fe ff       	call   f0107b93 <kmalloc>
f01183ca:	83 c4 10             	add    $0x10,%esp
f01183cd:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01183d3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01183d9:	89 c1                	mov    %eax,%ecx
f01183db:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01183e2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01183e7:	0f b6 d0             	movzbl %al,%edx
f01183ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01183ed:	01 d0                	add    %edx,%eax
f01183ef:	48                   	dec    %eax
f01183f0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01183f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01183f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01183fb:	f7 75 a0             	divl   -0x60(%ebp)
f01183fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118401:	29 d0                	sub    %edx,%eax
f0118403:	89 c3                	mov    %eax,%ebx
f0118405:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011840c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118411:	0f b6 c0             	movzbl %al,%eax
f0118414:	c1 e0 04             	shl    $0x4,%eax
f0118417:	89 c2                	mov    %eax,%edx
f0118419:	8b 45 98             	mov    -0x68(%ebp),%eax
f011841c:	01 d0                	add    %edx,%eax
f011841e:	48                   	dec    %eax
f011841f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118422:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118425:	ba 00 00 00 00       	mov    $0x0,%edx
f011842a:	f7 75 98             	divl   -0x68(%ebp)
f011842d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118430:	29 d0                	sub    %edx,%eax
f0118432:	01 d8                	add    %ebx,%eax
f0118434:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118439:	39 c1                	cmp    %eax,%ecx
f011843b:	74 14                	je     f0118451 <test_kmalloc+0x3e6>
f011843d:	83 ec 04             	sub    $0x4,%esp
f0118440:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0118445:	6a 59                	push   $0x59
f0118447:	68 ee 8c 13 f0       	push   $0xf0138cee
f011844c:	e8 5f 7d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118451:	e8 62 be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118456:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118459:	74 14                	je     f011846f <test_kmalloc+0x404>
f011845b:	83 ec 04             	sub    $0x4,%esp
f011845e:	68 08 8d 13 f0       	push   $0xf0138d08
f0118463:	6a 5a                	push   $0x5a
f0118465:	68 ee 8c 13 f0       	push   $0xf0138cee
f011846a:	e8 41 7d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011846f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118472:	e8 9b 41 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118477:	29 c3                	sub    %eax,%ebx
f0118479:	89 d8                	mov    %ebx,%eax
f011847b:	83 f8 01             	cmp    $0x1,%eax
f011847e:	74 14                	je     f0118494 <test_kmalloc+0x429>
f0118480:	83 ec 04             	sub    $0x4,%esp
f0118483:	68 70 8d 13 f0       	push   $0xf0138d70
f0118488:	6a 5b                	push   $0x5b
f011848a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011848f:	e8 1c 7d fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118494:	e8 79 41 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118499:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011849c:	e8 17 be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01184a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01184a4:	83 ec 0c             	sub    $0xc,%esp
f01184a7:	68 00 08 00 00       	push   $0x800
f01184ac:	e8 e2 f6 fe ff       	call   f0107b93 <kmalloc>
f01184b1:	83 c4 10             	add    $0x10,%esp
f01184b4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01184ba:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01184c0:	89 c1                	mov    %eax,%ecx
f01184c2:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01184c9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01184ce:	0f b6 d0             	movzbl %al,%edx
f01184d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01184d4:	01 d0                	add    %edx,%eax
f01184d6:	48                   	dec    %eax
f01184d7:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01184da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01184dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e2:	f7 75 90             	divl   -0x70(%ebp)
f01184e5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01184e8:	29 d0                	sub    %edx,%eax
f01184ea:	89 c3                	mov    %eax,%ebx
f01184ec:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01184f3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01184f8:	0f b6 c0             	movzbl %al,%eax
f01184fb:	c1 e0 04             	shl    $0x4,%eax
f01184fe:	89 c2                	mov    %eax,%edx
f0118500:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118503:	01 d0                	add    %edx,%eax
f0118505:	48                   	dec    %eax
f0118506:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118509:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011850c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118511:	f7 75 88             	divl   -0x78(%ebp)
f0118514:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118517:	29 d0                	sub    %edx,%eax
f0118519:	01 d8                	add    %ebx,%eax
f011851b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118520:	39 c1                	cmp    %eax,%ecx
f0118522:	74 14                	je     f0118538 <test_kmalloc+0x4cd>
f0118524:	83 ec 04             	sub    $0x4,%esp
f0118527:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011852c:	6a 61                	push   $0x61
f011852e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118533:	e8 78 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118538:	e8 7b bd fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011853d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118540:	74 14                	je     f0118556 <test_kmalloc+0x4eb>
f0118542:	83 ec 04             	sub    $0x4,%esp
f0118545:	68 08 8d 13 f0       	push   $0xf0138d08
f011854a:	6a 62                	push   $0x62
f011854c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118551:	e8 5a 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118556:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118559:	e8 b4 40 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011855e:	29 c3                	sub    %eax,%ebx
f0118560:	89 d8                	mov    %ebx,%eax
f0118562:	83 f8 01             	cmp    $0x1,%eax
f0118565:	74 14                	je     f011857b <test_kmalloc+0x510>
f0118567:	83 ec 04             	sub    $0x4,%esp
f011856a:	68 70 8d 13 f0       	push   $0xf0138d70
f011856f:	6a 63                	push   $0x63
f0118571:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118576:	e8 35 7c fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011857b:	e8 92 40 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118580:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118583:	e8 30 bd fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118588:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011858b:	83 ec 0c             	sub    $0xc,%esp
f011858e:	68 00 1c 00 00       	push   $0x1c00
f0118593:	e8 fb f5 fe ff       	call   f0107b93 <kmalloc>
f0118598:	83 c4 10             	add    $0x10,%esp
f011859b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01185a1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01185a7:	89 c1                	mov    %eax,%ecx
f01185a9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01185b0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01185b5:	0f b6 d0             	movzbl %al,%edx
f01185b8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01185bb:	01 d0                	add    %edx,%eax
f01185bd:	48                   	dec    %eax
f01185be:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01185c4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01185ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01185cf:	f7 75 80             	divl   -0x80(%ebp)
f01185d2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01185d8:	29 d0                	sub    %edx,%eax
f01185da:	89 c3                	mov    %eax,%ebx
f01185dc:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01185e3:	10 00 00 
f01185e6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01185eb:	0f b6 c0             	movzbl %al,%eax
f01185ee:	c1 e0 04             	shl    $0x4,%eax
f01185f1:	89 c2                	mov    %eax,%edx
f01185f3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01185f9:	01 d0                	add    %edx,%eax
f01185fb:	48                   	dec    %eax
f01185fc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118602:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118608:	ba 00 00 00 00       	mov    $0x0,%edx
f011860d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118613:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118619:	29 d0                	sub    %edx,%eax
f011861b:	01 d8                	add    %ebx,%eax
f011861d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118622:	39 c1                	cmp    %eax,%ecx
f0118624:	74 14                	je     f011863a <test_kmalloc+0x5cf>
f0118626:	83 ec 04             	sub    $0x4,%esp
f0118629:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011862e:	6a 69                	push   $0x69
f0118630:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118635:	e8 76 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011863a:	e8 79 bc fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011863f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118642:	74 14                	je     f0118658 <test_kmalloc+0x5ed>
f0118644:	83 ec 04             	sub    $0x4,%esp
f0118647:	68 08 8d 13 f0       	push   $0xf0138d08
f011864c:	6a 6a                	push   $0x6a
f011864e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118653:	e8 58 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118658:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011865b:	e8 b2 3f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118660:	29 c3                	sub    %eax,%ebx
f0118662:	89 d8                	mov    %ebx,%eax
f0118664:	83 f8 02             	cmp    $0x2,%eax
f0118667:	74 14                	je     f011867d <test_kmalloc+0x612>
f0118669:	83 ec 04             	sub    $0x4,%esp
f011866c:	68 70 8d 13 f0       	push   $0xf0138d70
f0118671:	6a 6b                	push   $0x6b
f0118673:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118678:	e8 33 7b fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011867d:	e8 90 3f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118682:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118685:	e8 2e bc fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011868a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011868d:	83 ec 0c             	sub    $0xc,%esp
f0118690:	68 00 fc 2f 00       	push   $0x2ffc00
f0118695:	e8 f9 f4 fe ff       	call   f0107b93 <kmalloc>
f011869a:	83 c4 10             	add    $0x10,%esp
f011869d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01186a3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01186a9:	89 c1                	mov    %eax,%ecx
f01186ab:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01186b2:	10 00 00 
f01186b5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01186ba:	0f b6 d0             	movzbl %al,%edx
f01186bd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01186c3:	01 d0                	add    %edx,%eax
f01186c5:	48                   	dec    %eax
f01186c6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01186cc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01186d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01186d7:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01186dd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01186e3:	29 d0                	sub    %edx,%eax
f01186e5:	89 c3                	mov    %eax,%ebx
f01186e7:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01186ee:	10 00 00 
f01186f1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01186f6:	0f b6 c0             	movzbl %al,%eax
f01186f9:	c1 e0 04             	shl    $0x4,%eax
f01186fc:	89 c2                	mov    %eax,%edx
f01186fe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118704:	01 d0                	add    %edx,%eax
f0118706:	48                   	dec    %eax
f0118707:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011870d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118713:	ba 00 00 00 00       	mov    $0x0,%edx
f0118718:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011871e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118724:	29 d0                	sub    %edx,%eax
f0118726:	01 d8                	add    %ebx,%eax
f0118728:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011872d:	39 c1                	cmp    %eax,%ecx
f011872f:	74 14                	je     f0118745 <test_kmalloc+0x6da>
f0118731:	83 ec 04             	sub    $0x4,%esp
f0118734:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0118739:	6a 71                	push   $0x71
f011873b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118740:	e8 6b 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118745:	e8 6e bb fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011874a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011874d:	74 14                	je     f0118763 <test_kmalloc+0x6f8>
f011874f:	83 ec 04             	sub    $0x4,%esp
f0118752:	68 08 8d 13 f0       	push   $0xf0138d08
f0118757:	6a 72                	push   $0x72
f0118759:	68 ee 8c 13 f0       	push   $0xf0138cee
f011875e:	e8 4d 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118763:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118766:	e8 a7 3e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011876b:	29 c3                	sub    %eax,%ebx
f011876d:	89 d8                	mov    %ebx,%eax
f011876f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118774:	74 14                	je     f011878a <test_kmalloc+0x71f>
f0118776:	83 ec 04             	sub    $0x4,%esp
f0118779:	68 70 8d 13 f0       	push   $0xf0138d70
f011877e:	6a 73                	push   $0x73
f0118780:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118785:	e8 26 7a fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011878a:	e8 83 3e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011878f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118792:	e8 21 bb fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118797:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011879a:	83 ec 0c             	sub    $0xc,%esp
f011879d:	68 00 fc 5f 00       	push   $0x5ffc00
f01187a2:	e8 ec f3 fe ff       	call   f0107b93 <kmalloc>
f01187a7:	83 c4 10             	add    $0x10,%esp
f01187aa:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187b0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01187b6:	89 c1                	mov    %eax,%ecx
f01187b8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01187bf:	10 00 00 
f01187c2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01187c7:	0f b6 d0             	movzbl %al,%edx
f01187ca:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01187d0:	01 d0                	add    %edx,%eax
f01187d2:	48                   	dec    %eax
f01187d3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01187d9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01187df:	ba 00 00 00 00       	mov    $0x0,%edx
f01187e4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01187ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01187f0:	29 d0                	sub    %edx,%eax
f01187f2:	89 c3                	mov    %eax,%ebx
f01187f4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01187fb:	10 00 00 
f01187fe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118803:	0f b6 c0             	movzbl %al,%eax
f0118806:	c1 e0 04             	shl    $0x4,%eax
f0118809:	89 c2                	mov    %eax,%edx
f011880b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118811:	01 d0                	add    %edx,%eax
f0118813:	48                   	dec    %eax
f0118814:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011881a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118820:	ba 00 00 00 00       	mov    $0x0,%edx
f0118825:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011882b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118831:	29 d0                	sub    %edx,%eax
f0118833:	01 d8                	add    %ebx,%eax
f0118835:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011883a:	39 c1                	cmp    %eax,%ecx
f011883c:	74 14                	je     f0118852 <test_kmalloc+0x7e7>
f011883e:	83 ec 04             	sub    $0x4,%esp
f0118841:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0118846:	6a 79                	push   $0x79
f0118848:	68 ee 8c 13 f0       	push   $0xf0138cee
f011884d:	e8 5e 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118852:	e8 61 ba fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118857:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011885a:	74 14                	je     f0118870 <test_kmalloc+0x805>
f011885c:	83 ec 04             	sub    $0x4,%esp
f011885f:	68 08 8d 13 f0       	push   $0xf0138d08
f0118864:	6a 7a                	push   $0x7a
f0118866:	68 ee 8c 13 f0       	push   $0xf0138cee
f011886b:	e8 40 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118870:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118873:	e8 9a 3d ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118878:	29 c3                	sub    %eax,%ebx
f011887a:	89 d8                	mov    %ebx,%eax
f011887c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118881:	74 14                	je     f0118897 <test_kmalloc+0x82c>
f0118883:	83 ec 04             	sub    $0x4,%esp
f0118886:	68 70 8d 13 f0       	push   $0xf0138d70
f011888b:	6a 7b                	push   $0x7b
f011888d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118892:	e8 19 79 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118897:	e8 76 3d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011889c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011889f:	e8 14 ba fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01188a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01188a7:	83 ec 0c             	sub    $0xc,%esp
f01188aa:	68 00 38 00 00       	push   $0x3800
f01188af:	e8 df f2 fe ff       	call   f0107b93 <kmalloc>
f01188b4:	83 c4 10             	add    $0x10,%esp
f01188b7:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188bd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01188c3:	89 c1                	mov    %eax,%ecx
f01188c5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01188cc:	10 00 00 
f01188cf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01188d4:	0f b6 d0             	movzbl %al,%edx
f01188d7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01188dd:	01 d0                	add    %edx,%eax
f01188df:	48                   	dec    %eax
f01188e0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01188e6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01188ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01188f1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01188f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01188fd:	29 d0                	sub    %edx,%eax
f01188ff:	89 c3                	mov    %eax,%ebx
f0118901:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118908:	10 00 00 
f011890b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118910:	0f b6 c0             	movzbl %al,%eax
f0118913:	c1 e0 04             	shl    $0x4,%eax
f0118916:	89 c2                	mov    %eax,%edx
f0118918:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011891e:	01 d0                	add    %edx,%eax
f0118920:	48                   	dec    %eax
f0118921:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118927:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011892d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118932:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118938:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011893e:	29 d0                	sub    %edx,%eax
f0118940:	01 d8                	add    %ebx,%eax
f0118942:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118947:	39 c1                	cmp    %eax,%ecx
f0118949:	74 17                	je     f0118962 <test_kmalloc+0x8f7>
f011894b:	83 ec 04             	sub    $0x4,%esp
f011894e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0118953:	68 81 00 00 00       	push   $0x81
f0118958:	68 ee 8c 13 f0       	push   $0xf0138cee
f011895d:	e8 4e 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118962:	e8 51 b9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118967:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011896a:	74 17                	je     f0118983 <test_kmalloc+0x918>
f011896c:	83 ec 04             	sub    $0x4,%esp
f011896f:	68 08 8d 13 f0       	push   $0xf0138d08
f0118974:	68 82 00 00 00       	push   $0x82
f0118979:	68 ee 8c 13 f0       	push   $0xf0138cee
f011897e:	e8 2d 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118983:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118986:	e8 87 3c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011898b:	29 c3                	sub    %eax,%ebx
f011898d:	89 d8                	mov    %ebx,%eax
f011898f:	83 f8 04             	cmp    $0x4,%eax
f0118992:	74 17                	je     f01189ab <test_kmalloc+0x940>
f0118994:	83 ec 04             	sub    $0x4,%esp
f0118997:	68 70 8d 13 f0       	push   $0xf0138d70
f011899c:	68 83 00 00 00       	push   $0x83
f01189a1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01189a6:	e8 05 78 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f01189ab:	83 ec 0c             	sub    $0xc,%esp
f01189ae:	68 3a 8e 13 f0       	push   $0xf0138e3a
f01189b3:	e8 79 84 fe ff       	call   f0100e31 <cprintf>
f01189b8:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01189bb:	e8 52 3c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01189c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01189c3:	e8 f0 b8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01189c8:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01189cb:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f01189d2:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01189d5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01189db:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f01189e1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01189e7:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01189ea:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01189ec:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01189f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01189f8:	01 c2                	add    %eax,%edx
f01189fa:	8a 45 f2             	mov    -0xe(%ebp),%al
f01189fd:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01189ff:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a05:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118a0b:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118a12:	fd 0f 00 
			shortArr[0] = minShort;
f0118a15:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118a1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a1e:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118a21:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118a27:	01 c0                	add    %eax,%eax
f0118a29:	89 c2                	mov    %eax,%edx
f0118a2b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118a31:	01 c2                	add    %eax,%edx
f0118a33:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118a37:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118a3a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a40:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118a46:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118a4d:	01 00 00 
			intArr[0] = minInt;
f0118a50:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118a56:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118a59:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118a5b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118a61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118a68:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118a6e:	01 c2                	add    %eax,%edx
f0118a70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118a73:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118a75:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a7b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118a81:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118a88:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118a8b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118a91:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a94:	88 10                	mov    %dl,(%eax)
f0118a96:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a9f:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118aa3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118aa9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118aac:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118aaf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ab5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118abc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ac2:	01 c2                	add    %eax,%edx
f0118ac4:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118ac7:	88 02                	mov    %al,(%edx)
f0118ac9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118acf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ad6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118adc:	01 c2                	add    %eax,%edx
f0118ade:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118ae2:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118ae6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118aec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118af3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118af9:	01 c2                	add    %eax,%edx
f0118afb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118afe:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118b01:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118b08:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118b0b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118b11:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118b17:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b1d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b20:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118b22:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118b28:	89 c2                	mov    %eax,%edx
f0118b2a:	c1 ea 1f             	shr    $0x1f,%edx
f0118b2d:	01 d0                	add    %edx,%eax
f0118b2f:	d1 f8                	sar    %eax
f0118b31:	89 c2                	mov    %eax,%edx
f0118b33:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b39:	01 c2                	add    %eax,%edx
f0118b3b:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b3e:	88 c1                	mov    %al,%cl
f0118b40:	c0 e9 07             	shr    $0x7,%cl
f0118b43:	01 c8                	add    %ecx,%eax
f0118b45:	d0 f8                	sar    %al
f0118b47:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118b49:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118b4f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b55:	01 c2                	add    %eax,%edx
f0118b57:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b5a:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118b5c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118b62:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118b68:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118b6f:	1b 00 00 
			shortArr2[0] = minShort;
f0118b72:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118b7b:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118b7e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118b84:	01 c0                	add    %eax,%eax
f0118b86:	89 c2                	mov    %eax,%edx
f0118b88:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118b8e:	01 c2                	add    %eax,%edx
f0118b90:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b94:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118b97:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118b9d:	8a 00                	mov    (%eax),%al
f0118b9f:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118ba2:	75 15                	jne    f0118bb9 <test_kmalloc+0xb4e>
f0118ba4:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118baa:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118bb0:	01 d0                	add    %edx,%eax
f0118bb2:	8a 00                	mov    (%eax),%al
f0118bb4:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118bb7:	74 17                	je     f0118bd0 <test_kmalloc+0xb65>
f0118bb9:	83 ec 04             	sub    $0x4,%esp
f0118bbc:	68 44 8e 13 f0       	push   $0xf0138e44
f0118bc1:	68 b2 00 00 00       	push   $0xb2
f0118bc6:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118bcb:	e8 e0 75 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118bd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118bd6:	66 8b 00             	mov    (%eax),%ax
f0118bd9:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118bdd:	75 1b                	jne    f0118bfa <test_kmalloc+0xb8f>
f0118bdf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118be5:	01 c0                	add    %eax,%eax
f0118be7:	89 c2                	mov    %eax,%edx
f0118be9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118bef:	01 d0                	add    %edx,%eax
f0118bf1:	66 8b 00             	mov    (%eax),%ax
f0118bf4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118bf8:	74 17                	je     f0118c11 <test_kmalloc+0xba6>
f0118bfa:	83 ec 04             	sub    $0x4,%esp
f0118bfd:	68 44 8e 13 f0       	push   $0xf0138e44
f0118c02:	68 b3 00 00 00       	push   $0xb3
f0118c07:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118c0c:	e8 9f 75 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118c11:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118c17:	8b 00                	mov    (%eax),%eax
f0118c19:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c1c:	75 1c                	jne    f0118c3a <test_kmalloc+0xbcf>
f0118c1e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118c24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118c2b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118c31:	01 d0                	add    %edx,%eax
f0118c33:	8b 00                	mov    (%eax),%eax
f0118c35:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118c38:	74 17                	je     f0118c51 <test_kmalloc+0xbe6>
f0118c3a:	83 ec 04             	sub    $0x4,%esp
f0118c3d:	68 44 8e 13 f0       	push   $0xf0138e44
f0118c42:	68 b4 00 00 00       	push   $0xb4
f0118c47:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118c4c:	e8 5f 75 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118c51:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118c57:	8a 00                	mov    (%eax),%al
f0118c59:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118c5c:	75 1c                	jne    f0118c7a <test_kmalloc+0xc0f>
f0118c5e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118c64:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118c6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118c71:	01 d0                	add    %edx,%eax
f0118c73:	8a 00                	mov    (%eax),%al
f0118c75:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118c78:	74 17                	je     f0118c91 <test_kmalloc+0xc26>
f0118c7a:	83 ec 04             	sub    $0x4,%esp
f0118c7d:	68 44 8e 13 f0       	push   $0xf0138e44
f0118c82:	68 b6 00 00 00       	push   $0xb6
f0118c87:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118c8c:	e8 1f 75 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118c91:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118c97:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118c9b:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118c9f:	75 1f                	jne    f0118cc0 <test_kmalloc+0xc55>
f0118ca1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ca7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118cb4:	01 d0                	add    %edx,%eax
f0118cb6:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118cba:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118cbe:	74 17                	je     f0118cd7 <test_kmalloc+0xc6c>
f0118cc0:	83 ec 04             	sub    $0x4,%esp
f0118cc3:	68 44 8e 13 f0       	push   $0xf0138e44
f0118cc8:	68 b7 00 00 00       	push   $0xb7
f0118ccd:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118cd2:	e8 d9 74 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118cd7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118cdd:	8b 40 04             	mov    0x4(%eax),%eax
f0118ce0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118ce3:	75 1d                	jne    f0118d02 <test_kmalloc+0xc97>
f0118ce5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ceb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cf2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118cf8:	01 d0                	add    %edx,%eax
f0118cfa:	8b 40 04             	mov    0x4(%eax),%eax
f0118cfd:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d00:	74 17                	je     f0118d19 <test_kmalloc+0xcae>
f0118d02:	83 ec 04             	sub    $0x4,%esp
f0118d05:	68 44 8e 13 f0       	push   $0xf0138e44
f0118d0a:	68 b8 00 00 00       	push   $0xb8
f0118d0f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118d14:	e8 97 74 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118d19:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118d1f:	8a 00                	mov    (%eax),%al
f0118d21:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d24:	75 40                	jne    f0118d66 <test_kmalloc+0xcfb>
f0118d26:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118d2c:	89 c2                	mov    %eax,%edx
f0118d2e:	c1 ea 1f             	shr    $0x1f,%edx
f0118d31:	01 d0                	add    %edx,%eax
f0118d33:	d1 f8                	sar    %eax
f0118d35:	89 c2                	mov    %eax,%edx
f0118d37:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118d3d:	01 d0                	add    %edx,%eax
f0118d3f:	8a 10                	mov    (%eax),%dl
f0118d41:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118d44:	88 c1                	mov    %al,%cl
f0118d46:	c0 e9 07             	shr    $0x7,%cl
f0118d49:	01 c8                	add    %ecx,%eax
f0118d4b:	d0 f8                	sar    %al
f0118d4d:	38 c2                	cmp    %al,%dl
f0118d4f:	75 15                	jne    f0118d66 <test_kmalloc+0xcfb>
f0118d51:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118d57:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118d5d:	01 d0                	add    %edx,%eax
f0118d5f:	8a 00                	mov    (%eax),%al
f0118d61:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118d64:	74 17                	je     f0118d7d <test_kmalloc+0xd12>
f0118d66:	83 ec 04             	sub    $0x4,%esp
f0118d69:	68 44 8e 13 f0       	push   $0xf0138e44
f0118d6e:	68 ba 00 00 00       	push   $0xba
f0118d73:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118d78:	e8 33 74 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118d7d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118d83:	66 8b 00             	mov    (%eax),%ax
f0118d86:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118d8a:	75 1b                	jne    f0118da7 <test_kmalloc+0xd3c>
f0118d8c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118d92:	01 c0                	add    %eax,%eax
f0118d94:	89 c2                	mov    %eax,%edx
f0118d96:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118d9c:	01 d0                	add    %edx,%eax
f0118d9e:	66 8b 00             	mov    (%eax),%ax
f0118da1:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118da5:	74 17                	je     f0118dbe <test_kmalloc+0xd53>
f0118da7:	83 ec 04             	sub    $0x4,%esp
f0118daa:	68 44 8e 13 f0       	push   $0xf0138e44
f0118daf:	68 bb 00 00 00       	push   $0xbb
f0118db4:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118db9:	e8 f2 73 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118dbe:	e8 4f 38 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118dc3:	89 c2                	mov    %eax,%edx
f0118dc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118dc8:	39 c2                	cmp    %eax,%edx
f0118dca:	74 17                	je     f0118de3 <test_kmalloc+0xd78>
f0118dcc:	83 ec 04             	sub    $0x4,%esp
f0118dcf:	68 70 8d 13 f0       	push   $0xf0138d70
f0118dd4:	68 bd 00 00 00       	push   $0xbd
f0118dd9:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118dde:	e8 cd 73 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118de3:	e8 d0 b4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118de8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118deb:	74 17                	je     f0118e04 <test_kmalloc+0xd99>
f0118ded:	83 ec 04             	sub    $0x4,%esp
f0118df0:	68 08 8d 13 f0       	push   $0xf0138d08
f0118df5:	68 be 00 00 00       	push   $0xbe
f0118dfa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118dff:	e8 ac 73 fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f0118e04:	83 ec 0c             	sub    $0xc,%esp
f0118e07:	68 79 8e 13 f0       	push   $0xf0138e79
f0118e0c:	e8 20 80 fe ff       	call   f0100e31 <cprintf>
f0118e11:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118e14:	e8 f9 37 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118e19:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e1c:	e8 97 b4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118e21:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118e24:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118e2b:	10 00 00 
f0118e2e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118e33:	0f b6 d0             	movzbl %al,%edx
f0118e36:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118e3c:	01 d0                	add    %edx,%eax
f0118e3e:	48                   	dec    %eax
f0118e3f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118e45:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118e4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e50:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118e56:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118e5c:	29 d0                	sub    %edx,%eax
f0118e5e:	89 c1                	mov    %eax,%ecx
f0118e60:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118e67:	10 00 00 
f0118e6a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118e6f:	0f b6 c0             	movzbl %al,%eax
f0118e72:	c1 e0 04             	shl    $0x4,%eax
f0118e75:	89 c2                	mov    %eax,%edx
f0118e77:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118e7d:	01 d0                	add    %edx,%eax
f0118e7f:	48                   	dec    %eax
f0118e80:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118e86:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e91:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118e97:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118e9d:	29 d0                	sub    %edx,%eax
f0118e9f:	01 c8                	add    %ecx,%eax
f0118ea1:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118ea6:	29 c2                	sub    %eax,%edx
f0118ea8:	89 d0                	mov    %edx,%eax
f0118eaa:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118eb0:	83 ec 0c             	sub    $0xc,%esp
f0118eb3:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0118eb9:	e8 d5 ec fe ff       	call   f0107b93 <kmalloc>
f0118ebe:	83 c4 10             	add    $0x10,%esp
f0118ec1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118ec7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118ecd:	85 c0                	test   %eax,%eax
f0118ecf:	74 17                	je     f0118ee8 <test_kmalloc+0xe7d>
f0118ed1:	83 ec 04             	sub    $0x4,%esp
f0118ed4:	68 bc 8c 13 f0       	push   $0xf0138cbc
f0118ed9:	68 c8 00 00 00       	push   $0xc8
f0118ede:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118ee3:	e8 c8 72 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ee8:	e8 cb b3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118eed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118ef0:	74 17                	je     f0118f09 <test_kmalloc+0xe9e>
f0118ef2:	83 ec 04             	sub    $0x4,%esp
f0118ef5:	68 08 8d 13 f0       	push   $0xf0138d08
f0118efa:	68 c9 00 00 00       	push   $0xc9
f0118eff:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118f04:	e8 a7 72 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f09:	e8 04 37 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118f0e:	89 c2                	mov    %eax,%edx
f0118f10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118f13:	39 c2                	cmp    %eax,%edx
f0118f15:	74 17                	je     f0118f2e <test_kmalloc+0xec3>
f0118f17:	83 ec 04             	sub    $0x4,%esp
f0118f1a:	68 70 8d 13 f0       	push   $0xf0138d70
f0118f1f:	68 ca 00 00 00       	push   $0xca
f0118f24:	68 ee 8c 13 f0       	push   $0xf0138cee
f0118f29:	e8 82 72 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f0118f2e:	83 ec 0c             	sub    $0xc,%esp
f0118f31:	68 80 8e 13 f0       	push   $0xf0138e80
f0118f36:	e8 f6 7e fe ff       	call   f0100e31 <cprintf>
f0118f3b:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118f3e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f44:	05 00 40 00 00       	add    $0x4000,%eax
f0118f49:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118f4f:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118f56:	10 00 00 
f0118f59:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118f5e:	0f b6 d0             	movzbl %al,%edx
f0118f61:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118f67:	01 d0                	add    %edx,%eax
f0118f69:	48                   	dec    %eax
f0118f6a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118f70:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118f76:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f7b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118f81:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118f87:	29 d0                	sub    %edx,%eax
f0118f89:	89 c1                	mov    %eax,%ecx
f0118f8b:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118f92:	10 00 00 
f0118f95:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118f9a:	0f b6 c0             	movzbl %al,%eax
f0118f9d:	c1 e0 04             	shl    $0x4,%eax
f0118fa0:	89 c2                	mov    %eax,%edx
f0118fa2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118fa8:	01 d0                	add    %edx,%eax
f0118faa:	48                   	dec    %eax
f0118fab:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118fb1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118fb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fbc:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118fc2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118fc8:	29 d0                	sub    %edx,%eax
f0118fca:	01 c8                	add    %ecx,%eax
f0118fcc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118fd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118fd4:	eb 6a                	jmp    f0119040 <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118fd6:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0118fdb:	83 ec 04             	sub    $0x4,%esp
f0118fde:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f0118fe4:	52                   	push   %edx
f0118fe5:	ff 75 f4             	pushl  -0xc(%ebp)
f0118fe8:	50                   	push   %eax
f0118fe9:	e8 2d e1 fe ff       	call   f010711b <get_page_table>
f0118fee:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118ff1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118ff7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118ffa:	c1 ea 0c             	shr    $0xc,%edx
f0118ffd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119003:	c1 e2 02             	shl    $0x2,%edx
f0119006:	01 d0                	add    %edx,%eax
f0119008:	8b 00                	mov    (%eax),%eax
f011900a:	25 ff 0f 00 00       	and    $0xfff,%eax
f011900f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119015:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011901b:	83 e0 04             	and    $0x4,%eax
f011901e:	85 c0                	test   %eax,%eax
f0119020:	74 17                	je     f0119039 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0119022:	83 ec 04             	sub    $0x4,%esp
f0119025:	68 88 8e 13 f0       	push   $0xf0138e88
f011902a:	68 d7 00 00 00       	push   $0xd7
f011902f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119034:	e8 77 71 fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119039:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0119040:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119043:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119049:	72 8b                	jb     f0118fd6 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f011904b:	83 ec 0c             	sub    $0xc,%esp
f011904e:	68 d2 8e 13 f0       	push   $0xf0138ed2
f0119053:	e8 d9 7d fe ff       	call   f0100e31 <cprintf>
f0119058:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f011905b:	83 ec 0c             	sub    $0xc,%esp
f011905e:	68 dc 8e 13 f0       	push   $0xf0138edc
f0119063:	e8 c9 7d fe ff       	call   f0100e31 <cprintf>
f0119068:	83 c4 10             	add    $0x10,%esp

	return 1;
f011906b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119070:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119073:	5b                   	pop    %ebx
f0119074:	5f                   	pop    %edi
f0119075:	5d                   	pop    %ebp
f0119076:	c3                   	ret    

f0119077 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119077:	55                   	push   %ebp
f0119078:	89 e5                	mov    %esp,%ebp
f011907a:	57                   	push   %edi
f011907b:	53                   	push   %ebx
f011907c:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f0119082:	83 ec 0c             	sub    $0xc,%esp
f0119085:	68 30 8c 13 f0       	push   $0xf0138c30
f011908a:	e8 a2 7d fe ff       	call   f0100e31 <cprintf>
f011908f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119092:	83 ec 0c             	sub    $0xc,%esp
f0119095:	68 60 8c 13 f0       	push   $0xf0138c60
f011909a:	e8 92 7d fe ff       	call   f0100e31 <cprintf>
f011909f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01190a2:	83 ec 0c             	sub    $0xc,%esp
f01190a5:	68 30 8c 13 f0       	push   $0xf0138c30
f01190aa:	e8 82 7d fe ff       	call   f0100e31 <cprintf>
f01190af:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01190b2:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f01190b8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f01190bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01190c2:	89 d7                	mov    %edx,%edi
f01190c4:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f01190c6:	83 ec 0c             	sub    $0xc,%esp
f01190c9:	68 18 8f 13 f0       	push   $0xf0138f18
f01190ce:	e8 5e 7d fe ff       	call   f0100e31 <cprintf>
f01190d3:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01190d6:	e8 37 35 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01190db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01190de:	e8 d5 b1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01190e3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01190e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01190ed:	eb 1f                	jmp    f011910e <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01190ef:	83 ec 0c             	sub    $0xc,%esp
f01190f2:	68 00 00 20 00       	push   $0x200000
f01190f7:	e8 97 ea fe ff       	call   f0107b93 <kmalloc>
f01190fc:	83 c4 10             	add    $0x10,%esp
f01190ff:	89 c2                	mov    %eax,%edx
f0119101:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119104:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f011910b:	ff 45 f4             	incl   -0xc(%ebp)
f011910e:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0119112:	7e db                	jle    f01190ef <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0119114:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f011911b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119120:	0f b6 d0             	movzbl %al,%edx
f0119123:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119126:	01 d0                	add    %edx,%eax
f0119128:	48                   	dec    %eax
f0119129:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011912c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011912f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119134:	f7 75 e8             	divl   -0x18(%ebp)
f0119137:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011913a:	29 d0                	sub    %edx,%eax
f011913c:	89 c1                	mov    %eax,%ecx
f011913e:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119145:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011914a:	0f b6 c0             	movzbl %al,%eax
f011914d:	c1 e0 04             	shl    $0x4,%eax
f0119150:	89 c2                	mov    %eax,%edx
f0119152:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119155:	01 d0                	add    %edx,%eax
f0119157:	48                   	dec    %eax
f0119158:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011915b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011915e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119163:	f7 75 e0             	divl   -0x20(%ebp)
f0119166:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119169:	29 d0                	sub    %edx,%eax
f011916b:	01 c8                	add    %ecx,%eax
f011916d:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119172:	29 c2                	sub    %eax,%edx
f0119174:	89 d0                	mov    %edx,%eax
f0119176:	83 ec 0c             	sub    $0xc,%esp
f0119179:	50                   	push   %eax
f011917a:	e8 14 ea fe ff       	call   f0107b93 <kmalloc>
f011917f:	83 c4 10             	add    $0x10,%esp
f0119182:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119188:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011918e:	89 c1                	mov    %eax,%ecx
f0119190:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119197:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011919c:	0f b6 d0             	movzbl %al,%edx
f011919f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191a2:	01 d0                	add    %edx,%eax
f01191a4:	48                   	dec    %eax
f01191a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01191a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01191ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01191b0:	f7 75 d8             	divl   -0x28(%ebp)
f01191b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01191b6:	29 d0                	sub    %edx,%eax
f01191b8:	89 c3                	mov    %eax,%ebx
f01191ba:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01191c1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01191c6:	0f b6 c0             	movzbl %al,%eax
f01191c9:	c1 e0 04             	shl    $0x4,%eax
f01191cc:	89 c2                	mov    %eax,%edx
f01191ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01191d1:	01 d0                	add    %edx,%eax
f01191d3:	48                   	dec    %eax
f01191d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01191d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01191da:	ba 00 00 00 00       	mov    $0x0,%edx
f01191df:	f7 75 d0             	divl   -0x30(%ebp)
f01191e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01191e5:	29 d0                	sub    %edx,%eax
f01191e7:	01 d8                	add    %ebx,%eax
f01191e9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01191ee:	39 c1                	cmp    %eax,%ecx
f01191f0:	0f 85 4f 03 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01191f6:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01191fc:	89 c1                	mov    %eax,%ecx
f01191fe:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119205:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011920a:	0f b6 d0             	movzbl %al,%edx
f011920d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119210:	01 d0                	add    %edx,%eax
f0119212:	48                   	dec    %eax
f0119213:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119216:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119219:	ba 00 00 00 00       	mov    $0x0,%edx
f011921e:	f7 75 c8             	divl   -0x38(%ebp)
f0119221:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119224:	29 d0                	sub    %edx,%eax
f0119226:	89 c3                	mov    %eax,%ebx
f0119228:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011922f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119234:	0f b6 c0             	movzbl %al,%eax
f0119237:	c1 e0 04             	shl    $0x4,%eax
f011923a:	89 c2                	mov    %eax,%edx
f011923c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011923f:	01 d0                	add    %edx,%eax
f0119241:	48                   	dec    %eax
f0119242:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119245:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119248:	ba 00 00 00 00       	mov    $0x0,%edx
f011924d:	f7 75 c0             	divl   -0x40(%ebp)
f0119250:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119253:	29 d0                	sub    %edx,%eax
f0119255:	01 d8                	add    %ebx,%eax
f0119257:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011925c:	39 c1                	cmp    %eax,%ecx
f011925e:	0f 85 e1 02 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119264:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f011926a:	89 c1                	mov    %eax,%ecx
f011926c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119273:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119278:	0f b6 d0             	movzbl %al,%edx
f011927b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011927e:	01 d0                	add    %edx,%eax
f0119280:	48                   	dec    %eax
f0119281:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119284:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119287:	ba 00 00 00 00       	mov    $0x0,%edx
f011928c:	f7 75 b8             	divl   -0x48(%ebp)
f011928f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119292:	29 d0                	sub    %edx,%eax
f0119294:	89 c3                	mov    %eax,%ebx
f0119296:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011929d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01192a2:	0f b6 c0             	movzbl %al,%eax
f01192a5:	c1 e0 04             	shl    $0x4,%eax
f01192a8:	89 c2                	mov    %eax,%edx
f01192aa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01192ad:	01 d0                	add    %edx,%eax
f01192af:	48                   	dec    %eax
f01192b0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01192b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01192b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01192bb:	f7 75 b0             	divl   -0x50(%ebp)
f01192be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01192c1:	29 d0                	sub    %edx,%eax
f01192c3:	01 d8                	add    %ebx,%eax
f01192c5:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01192ca:	39 c1                	cmp    %eax,%ecx
f01192cc:	0f 85 73 02 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01192d2:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01192d8:	89 c1                	mov    %eax,%ecx
f01192da:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01192e1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01192e6:	0f b6 d0             	movzbl %al,%edx
f01192e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01192ec:	01 d0                	add    %edx,%eax
f01192ee:	48                   	dec    %eax
f01192ef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01192f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01192f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01192fa:	f7 75 a8             	divl   -0x58(%ebp)
f01192fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119300:	29 d0                	sub    %edx,%eax
f0119302:	89 c3                	mov    %eax,%ebx
f0119304:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011930b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119310:	0f b6 c0             	movzbl %al,%eax
f0119313:	c1 e0 04             	shl    $0x4,%eax
f0119316:	89 c2                	mov    %eax,%edx
f0119318:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011931b:	01 d0                	add    %edx,%eax
f011931d:	48                   	dec    %eax
f011931e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0119321:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119324:	ba 00 00 00 00       	mov    $0x0,%edx
f0119329:	f7 75 a0             	divl   -0x60(%ebp)
f011932c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011932f:	29 d0                	sub    %edx,%eax
f0119331:	01 d8                	add    %ebx,%eax
f0119333:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119338:	39 c1                	cmp    %eax,%ecx
f011933a:	0f 85 05 02 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119340:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119346:	89 c1                	mov    %eax,%ecx
f0119348:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011934f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119354:	0f b6 d0             	movzbl %al,%edx
f0119357:	8b 45 98             	mov    -0x68(%ebp),%eax
f011935a:	01 d0                	add    %edx,%eax
f011935c:	48                   	dec    %eax
f011935d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0119360:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119363:	ba 00 00 00 00       	mov    $0x0,%edx
f0119368:	f7 75 98             	divl   -0x68(%ebp)
f011936b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011936e:	29 d0                	sub    %edx,%eax
f0119370:	89 c3                	mov    %eax,%ebx
f0119372:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119379:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011937e:	0f b6 c0             	movzbl %al,%eax
f0119381:	c1 e0 04             	shl    $0x4,%eax
f0119384:	89 c2                	mov    %eax,%edx
f0119386:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119389:	01 d0                	add    %edx,%eax
f011938b:	48                   	dec    %eax
f011938c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011938f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119392:	ba 00 00 00 00       	mov    $0x0,%edx
f0119397:	f7 75 90             	divl   -0x70(%ebp)
f011939a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011939d:	29 d0                	sub    %edx,%eax
f011939f:	01 d8                	add    %ebx,%eax
f01193a1:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01193a6:	39 c1                	cmp    %eax,%ecx
f01193a8:	0f 85 97 01 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01193ae:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f01193b4:	89 c1                	mov    %eax,%ecx
f01193b6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01193bd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01193c2:	0f b6 d0             	movzbl %al,%edx
f01193c5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01193c8:	01 d0                	add    %edx,%eax
f01193ca:	48                   	dec    %eax
f01193cb:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01193ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01193d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d6:	f7 75 88             	divl   -0x78(%ebp)
f01193d9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01193dc:	29 d0                	sub    %edx,%eax
f01193de:	89 c3                	mov    %eax,%ebx
f01193e0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01193e7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01193ec:	0f b6 c0             	movzbl %al,%eax
f01193ef:	c1 e0 04             	shl    $0x4,%eax
f01193f2:	89 c2                	mov    %eax,%edx
f01193f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01193f7:	01 d0                	add    %edx,%eax
f01193f9:	48                   	dec    %eax
f01193fa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119400:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119406:	ba 00 00 00 00       	mov    $0x0,%edx
f011940b:	f7 75 80             	divl   -0x80(%ebp)
f011940e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119414:	29 d0                	sub    %edx,%eax
f0119416:	01 d8                	add    %ebx,%eax
f0119418:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011941d:	39 c1                	cmp    %eax,%ecx
f011941f:	0f 85 20 01 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119425:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f011942b:	89 c1                	mov    %eax,%ecx
f011942d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119434:	10 00 00 
f0119437:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011943c:	0f b6 d0             	movzbl %al,%edx
f011943f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119445:	01 d0                	add    %edx,%eax
f0119447:	48                   	dec    %eax
f0119448:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011944e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119454:	ba 00 00 00 00       	mov    $0x0,%edx
f0119459:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011945f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119465:	29 d0                	sub    %edx,%eax
f0119467:	89 c3                	mov    %eax,%ebx
f0119469:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0119470:	10 00 00 
f0119473:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119478:	0f b6 c0             	movzbl %al,%eax
f011947b:	c1 e0 04             	shl    $0x4,%eax
f011947e:	89 c2                	mov    %eax,%edx
f0119480:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119486:	01 d0                	add    %edx,%eax
f0119488:	48                   	dec    %eax
f0119489:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011948f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119495:	ba 00 00 00 00       	mov    $0x0,%edx
f011949a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01194a0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194a6:	29 d0                	sub    %edx,%eax
f01194a8:	01 d8                	add    %ebx,%eax
f01194aa:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01194af:	39 c1                	cmp    %eax,%ecx
f01194b1:	0f 85 8e 00 00 00    	jne    f0119545 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01194b7:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01194bd:	89 c1                	mov    %eax,%ecx
f01194bf:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01194c6:	10 00 00 
f01194c9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01194ce:	0f b6 d0             	movzbl %al,%edx
f01194d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01194d7:	01 d0                	add    %edx,%eax
f01194d9:	48                   	dec    %eax
f01194da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01194e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01194e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01194eb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01194f1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01194f7:	29 d0                	sub    %edx,%eax
f01194f9:	89 c3                	mov    %eax,%ebx
f01194fb:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119502:	10 00 00 
f0119505:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011950a:	0f b6 c0             	movzbl %al,%eax
f011950d:	c1 e0 04             	shl    $0x4,%eax
f0119510:	89 c2                	mov    %eax,%edx
f0119512:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119518:	01 d0                	add    %edx,%eax
f011951a:	48                   	dec    %eax
f011951b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119521:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119527:	ba 00 00 00 00       	mov    $0x0,%edx
f011952c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119532:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119538:	29 d0                	sub    %edx,%eax
f011953a:	01 d8                	add    %ebx,%eax
f011953c:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119541:	39 c1                	cmp    %eax,%ecx
f0119543:	74 17                	je     f011955c <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119545:	83 ec 04             	sub    $0x4,%esp
f0119548:	68 68 8f 13 f0       	push   $0xf0138f68
f011954d:	68 03 01 00 00       	push   $0x103
f0119552:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119557:	e8 54 6c fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011955c:	e8 57 ad fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119561:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119564:	74 17                	je     f011957d <test_kmalloc_nextfit+0x506>
f0119566:	83 ec 04             	sub    $0x4,%esp
f0119569:	68 08 8d 13 f0       	push   $0xf0138d08
f011956e:	68 05 01 00 00       	push   $0x105
f0119573:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119578:	e8 33 6c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011957d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119580:	e8 8d 30 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119585:	29 c3                	sub    %eax,%ebx
f0119587:	89 d9                	mov    %ebx,%ecx
f0119589:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119590:	10 00 00 
f0119593:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119598:	0f b6 d0             	movzbl %al,%edx
f011959b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01195a1:	01 d0                	add    %edx,%eax
f01195a3:	48                   	dec    %eax
f01195a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01195aa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195b5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01195bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195c1:	29 d0                	sub    %edx,%eax
f01195c3:	89 c3                	mov    %eax,%ebx
f01195c5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01195cc:	10 00 00 
f01195cf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01195d4:	0f b6 c0             	movzbl %al,%eax
f01195d7:	c1 e0 04             	shl    $0x4,%eax
f01195da:	89 c2                	mov    %eax,%edx
f01195dc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01195e2:	01 d0                	add    %edx,%eax
f01195e4:	48                   	dec    %eax
f01195e5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01195eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01195f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01195f6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01195fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119602:	29 d0                	sub    %edx,%eax
f0119604:	01 d8                	add    %ebx,%eax
f0119606:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011960b:	29 c2                	sub    %eax,%edx
f011960d:	89 d0                	mov    %edx,%eax
f011960f:	c1 e8 0c             	shr    $0xc,%eax
f0119612:	39 c1                	cmp    %eax,%ecx
f0119614:	74 17                	je     f011962d <test_kmalloc_nextfit+0x5b6>
f0119616:	83 ec 04             	sub    $0x4,%esp
f0119619:	68 ab 8f 13 f0       	push   $0xf0138fab
f011961e:	68 06 01 00 00       	push   $0x106
f0119623:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119628:	e8 83 6b fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f011962d:	e8 86 ac fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119632:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119635:	e8 d8 2f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011963a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f011963d:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119643:	83 ec 0c             	sub    $0xc,%esp
f0119646:	50                   	push   %eax
f0119647:	e8 61 e5 fe ff       	call   f0107bad <kfree>
f011964c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011964f:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119655:	83 ec 0c             	sub    $0xc,%esp
f0119658:	50                   	push   %eax
f0119659:	e8 4f e5 fe ff       	call   f0107bad <kfree>
f011965e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119661:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119667:	83 ec 0c             	sub    $0xc,%esp
f011966a:	50                   	push   %eax
f011966b:	e8 3d e5 fe ff       	call   f0107bad <kfree>
f0119670:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119673:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119679:	83 ec 0c             	sub    $0xc,%esp
f011967c:	50                   	push   %eax
f011967d:	e8 2b e5 fe ff       	call   f0107bad <kfree>
f0119682:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119685:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011968b:	83 ec 0c             	sub    $0xc,%esp
f011968e:	50                   	push   %eax
f011968f:	e8 19 e5 fe ff       	call   f0107bad <kfree>
f0119694:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119697:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f011969d:	83 ec 0c             	sub    $0xc,%esp
f01196a0:	50                   	push   %eax
f01196a1:	e8 07 e5 fe ff       	call   f0107bad <kfree>
f01196a6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01196a9:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f01196af:	83 ec 0c             	sub    $0xc,%esp
f01196b2:	50                   	push   %eax
f01196b3:	e8 f5 e4 fe ff       	call   f0107bad <kfree>
f01196b8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01196bb:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f01196c1:	83 ec 0c             	sub    $0xc,%esp
f01196c4:	50                   	push   %eax
f01196c5:	e8 e3 e4 fe ff       	call   f0107bad <kfree>
f01196ca:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01196cd:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f01196d3:	83 ec 0c             	sub    $0xc,%esp
f01196d6:	50                   	push   %eax
f01196d7:	e8 d1 e4 fe ff       	call   f0107bad <kfree>
f01196dc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01196df:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01196e5:	83 ec 0c             	sub    $0xc,%esp
f01196e8:	50                   	push   %eax
f01196e9:	e8 bf e4 fe ff       	call   f0107bad <kfree>
f01196ee:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196f1:	e8 c2 ab fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01196f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01196f9:	74 17                	je     f0119712 <test_kmalloc_nextfit+0x69b>
f01196fb:	83 ec 04             	sub    $0x4,%esp
f01196fe:	68 08 8d 13 f0       	push   $0xf0138d08
f0119703:	68 17 01 00 00       	push   $0x117
f0119708:	68 ee 8c 13 f0       	push   $0xf0138cee
f011970d:	e8 9e 6a fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119712:	e8 fb 2e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119717:	89 c2                	mov    %eax,%edx
f0119719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011971c:	89 d1                	mov    %edx,%ecx
f011971e:	29 c1                	sub    %eax,%ecx
f0119720:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119727:	10 00 00 
f011972a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011972f:	0f b6 d0             	movzbl %al,%edx
f0119732:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119738:	01 d0                	add    %edx,%eax
f011973a:	48                   	dec    %eax
f011973b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119741:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119747:	ba 00 00 00 00       	mov    $0x0,%edx
f011974c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119752:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119758:	29 d0                	sub    %edx,%eax
f011975a:	89 c3                	mov    %eax,%ebx
f011975c:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119763:	10 00 00 
f0119766:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011976b:	0f b6 c0             	movzbl %al,%eax
f011976e:	c1 e0 04             	shl    $0x4,%eax
f0119771:	89 c2                	mov    %eax,%edx
f0119773:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119779:	01 d0                	add    %edx,%eax
f011977b:	48                   	dec    %eax
f011977c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119782:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119788:	ba 00 00 00 00       	mov    $0x0,%edx
f011978d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119793:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119799:	29 d0                	sub    %edx,%eax
f011979b:	01 d8                	add    %ebx,%eax
f011979d:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01197a2:	29 c2                	sub    %eax,%edx
f01197a4:	89 d0                	mov    %edx,%eax
f01197a6:	c1 e8 0c             	shr    $0xc,%eax
f01197a9:	39 c1                	cmp    %eax,%ecx
f01197ab:	74 17                	je     f01197c4 <test_kmalloc_nextfit+0x74d>
f01197ad:	83 ec 04             	sub    $0x4,%esp
f01197b0:	68 bc 8f 13 f0       	push   $0xf0138fbc
f01197b5:	68 18 01 00 00       	push   $0x118
f01197ba:	68 ee 8c 13 f0       	push   $0xf0138cee
f01197bf:	e8 ec 69 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01197c4:	e8 ef aa fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01197c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197cc:	e8 41 2e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01197d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01197d4:	83 ec 0c             	sub    $0xc,%esp
f01197d7:	68 00 fc 0f 00       	push   $0xffc00
f01197dc:	e8 b2 e3 fe ff       	call   f0107b93 <kmalloc>
f01197e1:	83 c4 10             	add    $0x10,%esp
f01197e4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01197ea:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01197f1:	10 00 00 
f01197f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01197f9:	0f b6 d0             	movzbl %al,%edx
f01197fc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119802:	01 d0                	add    %edx,%eax
f0119804:	48                   	dec    %eax
f0119805:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011980b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119811:	ba 00 00 00 00       	mov    $0x0,%edx
f0119816:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011981c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119822:	29 d0                	sub    %edx,%eax
f0119824:	89 c1                	mov    %eax,%ecx
f0119826:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011982d:	10 00 00 
f0119830:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119835:	0f b6 c0             	movzbl %al,%eax
f0119838:	c1 e0 04             	shl    $0x4,%eax
f011983b:	89 c2                	mov    %eax,%edx
f011983d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119843:	01 d0                	add    %edx,%eax
f0119845:	48                   	dec    %eax
f0119846:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011984c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119852:	ba 00 00 00 00       	mov    $0x0,%edx
f0119857:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011985d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119863:	29 d0                	sub    %edx,%eax
f0119865:	01 c8                	add    %ecx,%eax
f0119867:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011986d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119873:	39 c2                	cmp    %eax,%edx
f0119875:	74 17                	je     f011988e <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119877:	83 ec 04             	sub    $0x4,%esp
f011987a:	68 fc 8f 13 f0       	push   $0xf0138ffc
f011987f:	68 1f 01 00 00       	push   $0x11f
f0119884:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119889:	e8 22 69 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011988e:	e8 25 aa fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119893:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119896:	74 17                	je     f01198af <test_kmalloc_nextfit+0x838>
f0119898:	83 ec 04             	sub    $0x4,%esp
f011989b:	68 08 8d 13 f0       	push   $0xf0138d08
f01198a0:	68 20 01 00 00       	push   $0x120
f01198a5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01198aa:	e8 01 69 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01198af:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198b2:	e8 5b 2d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01198b7:	29 c3                	sub    %eax,%ebx
f01198b9:	89 d8                	mov    %ebx,%eax
f01198bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f01198c0:	74 17                	je     f01198d9 <test_kmalloc_nextfit+0x862>
f01198c2:	83 ec 04             	sub    $0x4,%esp
f01198c5:	68 ab 8f 13 f0       	push   $0xf0138fab
f01198ca:	68 21 01 00 00       	push   $0x121
f01198cf:	68 ee 8c 13 f0       	push   $0xf0138cee
f01198d4:	e8 d7 68 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01198d9:	e8 da a9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01198de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198e1:	e8 2c 2d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01198e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01198e9:	83 ec 0c             	sub    $0xc,%esp
f01198ec:	68 00 04 00 00       	push   $0x400
f01198f1:	e8 9d e2 fe ff       	call   f0107b93 <kmalloc>
f01198f6:	83 c4 10             	add    $0x10,%esp
f01198f9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01198ff:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119906:	10 00 00 
f0119909:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011990e:	0f b6 d0             	movzbl %al,%edx
f0119911:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119917:	01 d0                	add    %edx,%eax
f0119919:	48                   	dec    %eax
f011991a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119920:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119926:	ba 00 00 00 00       	mov    $0x0,%edx
f011992b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119931:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119937:	29 d0                	sub    %edx,%eax
f0119939:	89 c1                	mov    %eax,%ecx
f011993b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119942:	10 00 00 
f0119945:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011994a:	0f b6 c0             	movzbl %al,%eax
f011994d:	c1 e0 04             	shl    $0x4,%eax
f0119950:	89 c2                	mov    %eax,%edx
f0119952:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119958:	01 d0                	add    %edx,%eax
f011995a:	48                   	dec    %eax
f011995b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119961:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119967:	ba 00 00 00 00       	mov    $0x0,%edx
f011996c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119972:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119978:	29 d0                	sub    %edx,%eax
f011997a:	01 c8                	add    %ecx,%eax
f011997c:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119982:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119988:	39 c2                	cmp    %eax,%edx
f011998a:	74 17                	je     f01199a3 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f011998c:	83 ec 04             	sub    $0x4,%esp
f011998f:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119994:	68 27 01 00 00       	push   $0x127
f0119999:	68 ee 8c 13 f0       	push   $0xf0138cee
f011999e:	e8 0d 68 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199a3:	e8 10 a9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01199a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199ab:	74 17                	je     f01199c4 <test_kmalloc_nextfit+0x94d>
f01199ad:	83 ec 04             	sub    $0x4,%esp
f01199b0:	68 08 8d 13 f0       	push   $0xf0138d08
f01199b5:	68 28 01 00 00       	push   $0x128
f01199ba:	68 ee 8c 13 f0       	push   $0xf0138cee
f01199bf:	e8 ec 67 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01199c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01199c7:	e8 46 2c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01199cc:	29 c3                	sub    %eax,%ebx
f01199ce:	89 d8                	mov    %ebx,%eax
f01199d0:	83 f8 01             	cmp    $0x1,%eax
f01199d3:	74 17                	je     f01199ec <test_kmalloc_nextfit+0x975>
f01199d5:	83 ec 04             	sub    $0x4,%esp
f01199d8:	68 ab 8f 13 f0       	push   $0xf0138fab
f01199dd:	68 29 01 00 00       	push   $0x129
f01199e2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01199e7:	e8 c4 67 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01199ec:	e8 c7 a8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01199f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199f4:	e8 19 2c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01199f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f01199fc:	83 ec 0c             	sub    $0xc,%esp
f01199ff:	68 00 00 50 00       	push   $0x500000
f0119a04:	e8 8a e1 fe ff       	call   f0107b93 <kmalloc>
f0119a09:	83 c4 10             	add    $0x10,%esp
f0119a0c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119a12:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119a19:	10 00 00 
f0119a1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119a21:	0f b6 d0             	movzbl %al,%edx
f0119a24:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119a2a:	01 d0                	add    %edx,%eax
f0119a2c:	48                   	dec    %eax
f0119a2d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119a33:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a3e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119a44:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119a4a:	29 d0                	sub    %edx,%eax
f0119a4c:	89 c1                	mov    %eax,%ecx
f0119a4e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119a55:	10 00 00 
f0119a58:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119a5d:	0f b6 c0             	movzbl %al,%eax
f0119a60:	c1 e0 04             	shl    $0x4,%eax
f0119a63:	89 c2                	mov    %eax,%edx
f0119a65:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119a6b:	01 d0                	add    %edx,%eax
f0119a6d:	48                   	dec    %eax
f0119a6e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119a74:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a7f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119a85:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119a8b:	29 d0                	sub    %edx,%eax
f0119a8d:	01 c8                	add    %ecx,%eax
f0119a8f:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119a95:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119a9b:	39 c2                	cmp    %eax,%edx
f0119a9d:	74 17                	je     f0119ab6 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119a9f:	83 ec 04             	sub    $0x4,%esp
f0119aa2:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119aa7:	68 2f 01 00 00       	push   $0x12f
f0119aac:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119ab1:	e8 fa 66 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ab6:	e8 fd a7 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119abb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119abe:	74 17                	je     f0119ad7 <test_kmalloc_nextfit+0xa60>
f0119ac0:	83 ec 04             	sub    $0x4,%esp
f0119ac3:	68 08 8d 13 f0       	push   $0xf0138d08
f0119ac8:	68 30 01 00 00       	push   $0x130
f0119acd:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119ad2:	e8 d9 66 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ad7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ada:	e8 33 2b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119adf:	29 c3                	sub    %eax,%ebx
f0119ae1:	89 d8                	mov    %ebx,%eax
f0119ae3:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119ae8:	74 17                	je     f0119b01 <test_kmalloc_nextfit+0xa8a>
f0119aea:	83 ec 04             	sub    $0x4,%esp
f0119aed:	68 ab 8f 13 f0       	push   $0xf0138fab
f0119af2:	68 31 01 00 00       	push   $0x131
f0119af7:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119afc:	e8 af 66 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b01:	e8 b2 a7 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119b06:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b09:	e8 04 2b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119b11:	83 ec 0c             	sub    $0xc,%esp
f0119b14:	68 00 00 10 00       	push   $0x100000
f0119b19:	e8 75 e0 fe ff       	call   f0107b93 <kmalloc>
f0119b1e:	83 c4 10             	add    $0x10,%esp
f0119b21:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119b27:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119b2e:	10 00 00 
f0119b31:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119b36:	0f b6 d0             	movzbl %al,%edx
f0119b39:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119b3f:	01 d0                	add    %edx,%eax
f0119b41:	48                   	dec    %eax
f0119b42:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119b48:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b53:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119b59:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119b5f:	29 d0                	sub    %edx,%eax
f0119b61:	89 c1                	mov    %eax,%ecx
f0119b63:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119b6a:	10 00 00 
f0119b6d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119b72:	0f b6 c0             	movzbl %al,%eax
f0119b75:	c1 e0 04             	shl    $0x4,%eax
f0119b78:	89 c2                	mov    %eax,%edx
f0119b7a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119b80:	01 d0                	add    %edx,%eax
f0119b82:	48                   	dec    %eax
f0119b83:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119b89:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b94:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119b9a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119ba0:	29 d0                	sub    %edx,%eax
f0119ba2:	01 c8                	add    %ecx,%eax
f0119ba4:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119baa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119bb0:	39 c2                	cmp    %eax,%edx
f0119bb2:	74 17                	je     f0119bcb <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119bb4:	83 ec 04             	sub    $0x4,%esp
f0119bb7:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119bbc:	68 37 01 00 00       	push   $0x137
f0119bc1:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119bc6:	e8 e5 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bcb:	e8 e8 a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119bd0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bd3:	74 17                	je     f0119bec <test_kmalloc_nextfit+0xb75>
f0119bd5:	83 ec 04             	sub    $0x4,%esp
f0119bd8:	68 08 8d 13 f0       	push   $0xf0138d08
f0119bdd:	68 38 01 00 00       	push   $0x138
f0119be2:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119be7:	e8 c4 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119bec:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119bef:	e8 1e 2a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119bf4:	29 c3                	sub    %eax,%ebx
f0119bf6:	89 d8                	mov    %ebx,%eax
f0119bf8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119bfd:	74 17                	je     f0119c16 <test_kmalloc_nextfit+0xb9f>
f0119bff:	83 ec 04             	sub    $0x4,%esp
f0119c02:	68 ab 8f 13 f0       	push   $0xf0138fab
f0119c07:	68 39 01 00 00       	push   $0x139
f0119c0c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119c11:	e8 9a 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c16:	e8 9d a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c1e:	e8 ef 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119c23:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119c26:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119c2c:	83 ec 0c             	sub    $0xc,%esp
f0119c2f:	50                   	push   %eax
f0119c30:	e8 78 df fe ff       	call   f0107bad <kfree>
f0119c35:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c38:	e8 7b a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c40:	74 17                	je     f0119c59 <test_kmalloc_nextfit+0xbe2>
f0119c42:	83 ec 04             	sub    $0x4,%esp
f0119c45:	68 08 8d 13 f0       	push   $0xf0138d08
f0119c4a:	68 3e 01 00 00       	push   $0x13e
f0119c4f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119c54:	e8 57 65 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119c59:	e8 b4 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119c5e:	89 c2                	mov    %eax,%edx
f0119c60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119c63:	29 c2                	sub    %eax,%edx
f0119c65:	89 d0                	mov    %edx,%eax
f0119c67:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c6c:	74 17                	je     f0119c85 <test_kmalloc_nextfit+0xc0e>
f0119c6e:	83 ec 04             	sub    $0x4,%esp
f0119c71:	68 bc 8f 13 f0       	push   $0xf0138fbc
f0119c76:	68 3f 01 00 00       	push   $0x13f
f0119c7b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119c80:	e8 2b 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c85:	e8 2e a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c8d:	e8 80 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119c92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119c95:	83 ec 0c             	sub    $0xc,%esp
f0119c98:	68 00 04 00 00       	push   $0x400
f0119c9d:	e8 f1 de fe ff       	call   f0107b93 <kmalloc>
f0119ca2:	83 c4 10             	add    $0x10,%esp
f0119ca5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119cab:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0119cb2:	10 00 00 
f0119cb5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119cba:	0f b6 d0             	movzbl %al,%edx
f0119cbd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119cc3:	01 d0                	add    %edx,%eax
f0119cc5:	48                   	dec    %eax
f0119cc6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0119ccc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119cd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cd7:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0119cdd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119ce3:	29 d0                	sub    %edx,%eax
f0119ce5:	89 c1                	mov    %eax,%ecx
f0119ce7:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0119cee:	10 00 00 
f0119cf1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119cf6:	0f b6 c0             	movzbl %al,%eax
f0119cf9:	c1 e0 04             	shl    $0x4,%eax
f0119cfc:	89 c2                	mov    %eax,%edx
f0119cfe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119d04:	01 d0                	add    %edx,%eax
f0119d06:	48                   	dec    %eax
f0119d07:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0119d0d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119d13:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d18:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0119d1e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119d24:	29 d0                	sub    %edx,%eax
f0119d26:	01 c8                	add    %ecx,%eax
f0119d28:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119d2e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d34:	39 c2                	cmp    %eax,%edx
f0119d36:	74 17                	je     f0119d4f <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f0119d38:	83 ec 04             	sub    $0x4,%esp
f0119d3b:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119d40:	68 45 01 00 00       	push   $0x145
f0119d45:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119d4a:	e8 61 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d4f:	e8 64 a5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119d54:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d57:	74 17                	je     f0119d70 <test_kmalloc_nextfit+0xcf9>
f0119d59:	83 ec 04             	sub    $0x4,%esp
f0119d5c:	68 08 8d 13 f0       	push   $0xf0138d08
f0119d61:	68 46 01 00 00       	push   $0x146
f0119d66:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119d6b:	e8 40 64 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d70:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d73:	e8 9a 28 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119d78:	29 c3                	sub    %eax,%ebx
f0119d7a:	89 d8                	mov    %ebx,%eax
f0119d7c:	83 f8 01             	cmp    $0x1,%eax
f0119d7f:	74 17                	je     f0119d98 <test_kmalloc_nextfit+0xd21>
f0119d81:	83 ec 04             	sub    $0x4,%esp
f0119d84:	68 ab 8f 13 f0       	push   $0xf0138fab
f0119d89:	68 47 01 00 00       	push   $0x147
f0119d8e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119d93:	e8 18 64 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d98:	e8 1b a5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119d9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119da0:	e8 6d 28 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119da5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119da8:	83 ec 0c             	sub    $0xc,%esp
f0119dab:	68 00 e0 1f 00       	push   $0x1fe000
f0119db0:	e8 de dd fe ff       	call   f0107b93 <kmalloc>
f0119db5:	83 c4 10             	add    $0x10,%esp
f0119db8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119dbe:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0119dc5:	10 00 00 
f0119dc8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119dcd:	0f b6 d0             	movzbl %al,%edx
f0119dd0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119dd6:	01 d0                	add    %edx,%eax
f0119dd8:	48                   	dec    %eax
f0119dd9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0119ddf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119de5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dea:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0119df0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119df6:	29 d0                	sub    %edx,%eax
f0119df8:	89 c1                	mov    %eax,%ecx
f0119dfa:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119e01:	10 00 00 
f0119e04:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119e09:	0f b6 c0             	movzbl %al,%eax
f0119e0c:	c1 e0 04             	shl    $0x4,%eax
f0119e0f:	89 c2                	mov    %eax,%edx
f0119e11:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119e17:	01 d0                	add    %edx,%eax
f0119e19:	48                   	dec    %eax
f0119e1a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119e20:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119e26:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e2b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119e31:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119e37:	29 d0                	sub    %edx,%eax
f0119e39:	01 c8                	add    %ecx,%eax
f0119e3b:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119e41:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e47:	39 c2                	cmp    %eax,%edx
f0119e49:	74 17                	je     f0119e62 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f0119e4b:	83 ec 04             	sub    $0x4,%esp
f0119e4e:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119e53:	68 4d 01 00 00       	push   $0x14d
f0119e58:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119e5d:	e8 4e 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e62:	e8 51 a4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119e67:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e6a:	74 17                	je     f0119e83 <test_kmalloc_nextfit+0xe0c>
f0119e6c:	83 ec 04             	sub    $0x4,%esp
f0119e6f:	68 08 8d 13 f0       	push   $0xf0138d08
f0119e74:	68 4e 01 00 00       	push   $0x14e
f0119e79:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119e7e:	e8 2d 63 fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119e83:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e86:	e8 87 27 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119e8b:	29 c3                	sub    %eax,%ebx
f0119e8d:	89 d8                	mov    %ebx,%eax
f0119e8f:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119e94:	74 17                	je     f0119ead <test_kmalloc_nextfit+0xe36>
f0119e96:	83 ec 04             	sub    $0x4,%esp
f0119e99:	68 ab 8f 13 f0       	push   $0xf0138fab
f0119e9e:	68 50 01 00 00       	push   $0x150
f0119ea3:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119ea8:	e8 03 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ead:	e8 06 a4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119eb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119eb5:	e8 58 27 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119eba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119ebd:	83 ec 0c             	sub    $0xc,%esp
f0119ec0:	68 00 00 08 00       	push   $0x80000
f0119ec5:	e8 c9 dc fe ff       	call   f0107b93 <kmalloc>
f0119eca:	83 c4 10             	add    $0x10,%esp
f0119ecd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119ed3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119eda:	10 00 00 
f0119edd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119ee2:	0f b6 d0             	movzbl %al,%edx
f0119ee5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119eeb:	01 d0                	add    %edx,%eax
f0119eed:	48                   	dec    %eax
f0119eee:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119ef4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119efa:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eff:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119f05:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119f0b:	29 d0                	sub    %edx,%eax
f0119f0d:	89 c1                	mov    %eax,%ecx
f0119f0f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119f16:	10 00 00 
f0119f19:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119f1e:	0f b6 c0             	movzbl %al,%eax
f0119f21:	c1 e0 04             	shl    $0x4,%eax
f0119f24:	89 c2                	mov    %eax,%edx
f0119f26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119f2c:	01 d0                	add    %edx,%eax
f0119f2e:	48                   	dec    %eax
f0119f2f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119f35:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119f3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f40:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119f46:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119f4c:	29 d0                	sub    %edx,%eax
f0119f4e:	01 c8                	add    %ecx,%eax
f0119f50:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119f56:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119f5c:	39 c2                	cmp    %eax,%edx
f0119f5e:	74 17                	je     f0119f77 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f0119f60:	83 ec 04             	sub    $0x4,%esp
f0119f63:	68 fc 8f 13 f0       	push   $0xf0138ffc
f0119f68:	68 56 01 00 00       	push   $0x156
f0119f6d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119f72:	e8 39 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f77:	e8 3c a3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119f7c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f7f:	74 17                	je     f0119f98 <test_kmalloc_nextfit+0xf21>
f0119f81:	83 ec 04             	sub    $0x4,%esp
f0119f84:	68 08 8d 13 f0       	push   $0xf0138d08
f0119f89:	68 57 01 00 00       	push   $0x157
f0119f8e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119f93:	e8 18 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119f98:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f9b:	e8 72 26 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119fa0:	29 c3                	sub    %eax,%ebx
f0119fa2:	89 d8                	mov    %ebx,%eax
f0119fa4:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119fa9:	74 17                	je     f0119fc2 <test_kmalloc_nextfit+0xf4b>
f0119fab:	83 ec 04             	sub    $0x4,%esp
f0119fae:	68 ab 8f 13 f0       	push   $0xf0138fab
f0119fb3:	68 58 01 00 00       	push   $0x158
f0119fb8:	68 ee 8c 13 f0       	push   $0xf0138cee
f0119fbd:	e8 ee 61 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119fc2:	83 ec 0c             	sub    $0xc,%esp
f0119fc5:	68 1c 90 13 f0       	push   $0xf013901c
f0119fca:	e8 62 6e fe ff       	call   f0100e31 <cprintf>
f0119fcf:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119fd2:	e8 e1 a2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119fd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119fda:	e8 33 26 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119fdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119fe2:	83 ec 0c             	sub    $0xc,%esp
f0119fe5:	68 00 00 38 00       	push   $0x380000
f0119fea:	e8 a4 db fe ff       	call   f0107b93 <kmalloc>
f0119fef:	83 c4 10             	add    $0x10,%esp
f0119ff2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119ff8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119fff:	10 00 00 
f011a002:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a007:	0f b6 d0             	movzbl %al,%edx
f011a00a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a010:	01 d0                	add    %edx,%eax
f011a012:	48                   	dec    %eax
f011a013:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a019:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a01f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a024:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a02a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a030:	29 d0                	sub    %edx,%eax
f011a032:	89 c1                	mov    %eax,%ecx
f011a034:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a03b:	10 00 00 
f011a03e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a043:	0f b6 c0             	movzbl %al,%eax
f011a046:	c1 e0 04             	shl    $0x4,%eax
f011a049:	89 c2                	mov    %eax,%edx
f011a04b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a051:	01 d0                	add    %edx,%eax
f011a053:	48                   	dec    %eax
f011a054:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a05a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a060:	ba 00 00 00 00       	mov    $0x0,%edx
f011a065:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a06b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a071:	29 d0                	sub    %edx,%eax
f011a073:	01 c8                	add    %ecx,%eax
f011a075:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a07b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a081:	39 c2                	cmp    %eax,%edx
f011a083:	74 17                	je     f011a09c <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a085:	83 ec 04             	sub    $0x4,%esp
f011a088:	68 fc 8f 13 f0       	push   $0xf0138ffc
f011a08d:	68 62 01 00 00       	push   $0x162
f011a092:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a097:	e8 14 61 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a09c:	e8 17 a2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a0a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a0a4:	74 17                	je     f011a0bd <test_kmalloc_nextfit+0x1046>
f011a0a6:	83 ec 04             	sub    $0x4,%esp
f011a0a9:	68 08 8d 13 f0       	push   $0xf0138d08
f011a0ae:	68 63 01 00 00       	push   $0x163
f011a0b3:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a0b8:	e8 f3 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a0bd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a0c0:	e8 4d 25 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a0c5:	29 c3                	sub    %eax,%ebx
f011a0c7:	89 d8                	mov    %ebx,%eax
f011a0c9:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a0ce:	74 17                	je     f011a0e7 <test_kmalloc_nextfit+0x1070>
f011a0d0:	83 ec 04             	sub    $0x4,%esp
f011a0d3:	68 ab 8f 13 f0       	push   $0xf0138fab
f011a0d8:	68 64 01 00 00       	push   $0x164
f011a0dd:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a0e2:	e8 c9 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a0e7:	e8 cc a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a0ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a0ef:	e8 1e 25 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a0f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a0f7:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a0fd:	83 ec 0c             	sub    $0xc,%esp
f011a100:	50                   	push   %eax
f011a101:	e8 a7 da fe ff       	call   f0107bad <kfree>
f011a106:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a109:	e8 aa a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a10e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a111:	74 17                	je     f011a12a <test_kmalloc_nextfit+0x10b3>
f011a113:	83 ec 04             	sub    $0x4,%esp
f011a116:	68 08 8d 13 f0       	push   $0xf0138d08
f011a11b:	68 69 01 00 00       	push   $0x169
f011a120:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a125:	e8 86 60 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a12a:	e8 e3 24 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a12f:	89 c2                	mov    %eax,%edx
f011a131:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a134:	29 c2                	sub    %eax,%edx
f011a136:	89 d0                	mov    %edx,%eax
f011a138:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a13d:	74 17                	je     f011a156 <test_kmalloc_nextfit+0x10df>
f011a13f:	83 ec 04             	sub    $0x4,%esp
f011a142:	68 bc 8f 13 f0       	push   $0xf0138fbc
f011a147:	68 6a 01 00 00       	push   $0x16a
f011a14c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a151:	e8 5a 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a156:	e8 5d a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a15b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a15e:	e8 af 24 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a163:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a166:	83 ec 0c             	sub    $0xc,%esp
f011a169:	68 00 fc 3f 00       	push   $0x3ffc00
f011a16e:	e8 20 da fe ff       	call   f0107b93 <kmalloc>
f011a173:	83 c4 10             	add    $0x10,%esp
f011a176:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a17c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a183:	10 00 00 
f011a186:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a18b:	0f b6 d0             	movzbl %al,%edx
f011a18e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a194:	01 d0                	add    %edx,%eax
f011a196:	48                   	dec    %eax
f011a197:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a19d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a1a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1a8:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a1ae:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a1b4:	29 d0                	sub    %edx,%eax
f011a1b6:	89 c1                	mov    %eax,%ecx
f011a1b8:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a1bf:	10 00 00 
f011a1c2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a1c7:	0f b6 c0             	movzbl %al,%eax
f011a1ca:	c1 e0 04             	shl    $0x4,%eax
f011a1cd:	89 c2                	mov    %eax,%edx
f011a1cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a1d5:	01 d0                	add    %edx,%eax
f011a1d7:	48                   	dec    %eax
f011a1d8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a1de:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a1e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1e9:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a1ef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a1f5:	29 d0                	sub    %edx,%eax
f011a1f7:	01 c8                	add    %ecx,%eax
f011a1f9:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a1ff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a205:	39 c2                	cmp    %eax,%edx
f011a207:	74 17                	je     f011a220 <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a209:	83 ec 04             	sub    $0x4,%esp
f011a20c:	68 fc 8f 13 f0       	push   $0xf0138ffc
f011a211:	68 70 01 00 00       	push   $0x170
f011a216:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a21b:	e8 90 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a220:	e8 93 a0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a225:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a228:	74 17                	je     f011a241 <test_kmalloc_nextfit+0x11ca>
f011a22a:	83 ec 04             	sub    $0x4,%esp
f011a22d:	68 08 8d 13 f0       	push   $0xf0138d08
f011a232:	68 71 01 00 00       	push   $0x171
f011a237:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a23c:	e8 6f 5f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a241:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a244:	e8 c9 23 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a249:	29 c3                	sub    %eax,%ebx
f011a24b:	89 d8                	mov    %ebx,%eax
f011a24d:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a252:	74 17                	je     f011a26b <test_kmalloc_nextfit+0x11f4>
f011a254:	83 ec 04             	sub    $0x4,%esp
f011a257:	68 ab 8f 13 f0       	push   $0xf0138fab
f011a25c:	68 72 01 00 00       	push   $0x172
f011a261:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a266:	e8 45 5f fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a26b:	83 ec 0c             	sub    $0xc,%esp
f011a26e:	68 58 90 13 f0       	push   $0xf0139058
f011a273:	e8 b9 6b fe ff       	call   f0100e31 <cprintf>
f011a278:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a27b:	e8 38 a0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a280:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a283:	e8 8a 23 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a288:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a28b:	83 ec 0c             	sub    $0xc,%esp
f011a28e:	68 00 00 60 00       	push   $0x600000
f011a293:	e8 fb d8 fe ff       	call   f0107b93 <kmalloc>
f011a298:	83 c4 10             	add    $0x10,%esp
f011a29b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a2a1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a2a7:	85 c0                	test   %eax,%eax
f011a2a9:	74 17                	je     f011a2c2 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a2ab:	83 ec 04             	sub    $0x4,%esp
f011a2ae:	68 fc 8f 13 f0       	push   $0xf0138ffc
f011a2b3:	68 7c 01 00 00       	push   $0x17c
f011a2b8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a2bd:	e8 ee 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2c2:	e8 f1 9f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a2c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2ca:	74 17                	je     f011a2e3 <test_kmalloc_nextfit+0x126c>
f011a2cc:	83 ec 04             	sub    $0x4,%esp
f011a2cf:	68 08 8d 13 f0       	push   $0xf0138d08
f011a2d4:	68 7d 01 00 00       	push   $0x17d
f011a2d9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a2de:	e8 cd 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a2e3:	e8 2a 23 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a2e8:	89 c2                	mov    %eax,%edx
f011a2ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a2ed:	39 c2                	cmp    %eax,%edx
f011a2ef:	74 17                	je     f011a308 <test_kmalloc_nextfit+0x1291>
f011a2f1:	83 ec 04             	sub    $0x4,%esp
f011a2f4:	68 ab 8f 13 f0       	push   $0xf0138fab
f011a2f9:	68 7e 01 00 00       	push   $0x17e
f011a2fe:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a303:	e8 a8 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a308:	83 ec 0c             	sub    $0xc,%esp
f011a30b:	68 90 90 13 f0       	push   $0xf0139090
f011a310:	e8 1c 6b fe ff       	call   f0100e31 <cprintf>
f011a315:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a318:	83 ec 0c             	sub    $0xc,%esp
f011a31b:	68 cc 90 13 f0       	push   $0xf01390cc
f011a320:	e8 0c 6b fe ff       	call   f0100e31 <cprintf>
f011a325:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a328:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a32d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a330:	5b                   	pop    %ebx
f011a331:	5f                   	pop    %edi
f011a332:	5d                   	pop    %ebp
f011a333:	c3                   	ret    

f011a334 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a334:	55                   	push   %ebp
f011a335:	89 e5                	mov    %esp,%ebp
f011a337:	57                   	push   %edi
f011a338:	53                   	push   %ebx
f011a339:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a33f:	83 ec 0c             	sub    $0xc,%esp
f011a342:	68 30 8c 13 f0       	push   $0xf0138c30
f011a347:	e8 e5 6a fe ff       	call   f0100e31 <cprintf>
f011a34c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a34f:	83 ec 0c             	sub    $0xc,%esp
f011a352:	68 60 8c 13 f0       	push   $0xf0138c60
f011a357:	e8 d5 6a fe ff       	call   f0100e31 <cprintf>
f011a35c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a35f:	83 ec 0c             	sub    $0xc,%esp
f011a362:	68 30 8c 13 f0       	push   $0xf0138c30
f011a367:	e8 c5 6a fe ff       	call   f0100e31 <cprintf>
f011a36c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a36f:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a375:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a37a:	b8 00 00 00 00       	mov    $0x0,%eax
f011a37f:	89 d7                	mov    %edx,%edi
f011a381:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a383:	e8 8a 22 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a388:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a38b:	e8 28 9f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a390:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a393:	83 ec 0c             	sub    $0xc,%esp
f011a396:	68 00 fc 2f 00       	push   $0x2ffc00
f011a39b:	e8 f3 d7 fe ff       	call   f0107b93 <kmalloc>
f011a3a0:	83 c4 10             	add    $0x10,%esp
f011a3a3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a3a9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a3af:	89 c1                	mov    %eax,%ecx
f011a3b1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a3b8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a3bd:	0f b6 d0             	movzbl %al,%edx
f011a3c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a3c3:	01 d0                	add    %edx,%eax
f011a3c5:	48                   	dec    %eax
f011a3c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a3c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3d1:	f7 75 ec             	divl   -0x14(%ebp)
f011a3d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3d7:	29 d0                	sub    %edx,%eax
f011a3d9:	89 c3                	mov    %eax,%ebx
f011a3db:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a3e2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a3e7:	0f b6 c0             	movzbl %al,%eax
f011a3ea:	c1 e0 04             	shl    $0x4,%eax
f011a3ed:	89 c2                	mov    %eax,%edx
f011a3ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a3f2:	01 d0                	add    %edx,%eax
f011a3f4:	48                   	dec    %eax
f011a3f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a3f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a400:	f7 75 e4             	divl   -0x1c(%ebp)
f011a403:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a406:	29 d0                	sub    %edx,%eax
f011a408:	01 d8                	add    %ebx,%eax
f011a40a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a40f:	39 c1                	cmp    %eax,%ecx
f011a411:	74 17                	je     f011a42a <test_kmalloc_bestfit1+0xf6>
f011a413:	83 ec 04             	sub    $0x4,%esp
f011a416:	68 08 91 13 f0       	push   $0xf0139108
f011a41b:	68 98 01 00 00       	push   $0x198
f011a420:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a425:	e8 86 5d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a42a:	e8 89 9e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a42f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a432:	74 17                	je     f011a44b <test_kmalloc_bestfit1+0x117>
f011a434:	83 ec 04             	sub    $0x4,%esp
f011a437:	68 08 8d 13 f0       	push   $0xf0138d08
f011a43c:	68 99 01 00 00       	push   $0x199
f011a441:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a446:	e8 65 5d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a44b:	e8 c2 21 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a450:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a453:	29 c2                	sub    %eax,%edx
f011a455:	89 d0                	mov    %edx,%eax
f011a457:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a45c:	74 17                	je     f011a475 <test_kmalloc_bestfit1+0x141>
f011a45e:	83 ec 04             	sub    $0x4,%esp
f011a461:	68 38 91 13 f0       	push   $0xf0139138
f011a466:	68 9a 01 00 00       	push   $0x19a
f011a46b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a470:	e8 3b 5d fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a475:	e8 98 21 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a47a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a47d:	e8 36 9e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a482:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a485:	83 ec 0c             	sub    $0xc,%esp
f011a488:	68 00 fc 2f 00       	push   $0x2ffc00
f011a48d:	e8 01 d7 fe ff       	call   f0107b93 <kmalloc>
f011a492:	83 c4 10             	add    $0x10,%esp
f011a495:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a49b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a4a1:	89 c1                	mov    %eax,%ecx
f011a4a3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a4aa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a4af:	0f b6 d0             	movzbl %al,%edx
f011a4b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a4b5:	01 d0                	add    %edx,%eax
f011a4b7:	48                   	dec    %eax
f011a4b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a4bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4be:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4c3:	f7 75 dc             	divl   -0x24(%ebp)
f011a4c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a4c9:	29 d0                	sub    %edx,%eax
f011a4cb:	89 c3                	mov    %eax,%ebx
f011a4cd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a4d4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a4d9:	0f b6 c0             	movzbl %al,%eax
f011a4dc:	c1 e0 04             	shl    $0x4,%eax
f011a4df:	89 c2                	mov    %eax,%edx
f011a4e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a4e4:	01 d0                	add    %edx,%eax
f011a4e6:	48                   	dec    %eax
f011a4e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a4ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a4ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4f2:	f7 75 d4             	divl   -0x2c(%ebp)
f011a4f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a4f8:	29 d0                	sub    %edx,%eax
f011a4fa:	01 d8                	add    %ebx,%eax
f011a4fc:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a501:	39 c1                	cmp    %eax,%ecx
f011a503:	74 17                	je     f011a51c <test_kmalloc_bestfit1+0x1e8>
f011a505:	83 ec 04             	sub    $0x4,%esp
f011a508:	68 08 91 13 f0       	push   $0xf0139108
f011a50d:	68 a0 01 00 00       	push   $0x1a0
f011a512:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a517:	e8 94 5c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a51c:	e8 97 9d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a521:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a524:	74 17                	je     f011a53d <test_kmalloc_bestfit1+0x209>
f011a526:	83 ec 04             	sub    $0x4,%esp
f011a529:	68 08 8d 13 f0       	push   $0xf0138d08
f011a52e:	68 a1 01 00 00       	push   $0x1a1
f011a533:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a538:	e8 73 5c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a53d:	e8 d0 20 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a542:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a545:	29 c2                	sub    %eax,%edx
f011a547:	89 d0                	mov    %edx,%eax
f011a549:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a54e:	74 17                	je     f011a567 <test_kmalloc_bestfit1+0x233>
f011a550:	83 ec 04             	sub    $0x4,%esp
f011a553:	68 38 91 13 f0       	push   $0xf0139138
f011a558:	68 a2 01 00 00       	push   $0x1a2
f011a55d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a562:	e8 49 5c fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a567:	e8 a6 20 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a56c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a56f:	e8 44 9d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a574:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a577:	83 ec 0c             	sub    $0xc,%esp
f011a57a:	68 00 fc 1f 00       	push   $0x1ffc00
f011a57f:	e8 0f d6 fe ff       	call   f0107b93 <kmalloc>
f011a584:	83 c4 10             	add    $0x10,%esp
f011a587:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a58d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a593:	89 c1                	mov    %eax,%ecx
f011a595:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a59c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a5a1:	0f b6 d0             	movzbl %al,%edx
f011a5a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a5a7:	01 d0                	add    %edx,%eax
f011a5a9:	48                   	dec    %eax
f011a5aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a5ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5b5:	f7 75 cc             	divl   -0x34(%ebp)
f011a5b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5bb:	29 d0                	sub    %edx,%eax
f011a5bd:	89 c3                	mov    %eax,%ebx
f011a5bf:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a5c6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a5cb:	0f b6 c0             	movzbl %al,%eax
f011a5ce:	c1 e0 04             	shl    $0x4,%eax
f011a5d1:	89 c2                	mov    %eax,%edx
f011a5d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5d6:	01 d0                	add    %edx,%eax
f011a5d8:	48                   	dec    %eax
f011a5d9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a5dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5df:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5e4:	f7 75 c4             	divl   -0x3c(%ebp)
f011a5e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5ea:	29 d0                	sub    %edx,%eax
f011a5ec:	01 d8                	add    %ebx,%eax
f011a5ee:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a5f3:	39 c1                	cmp    %eax,%ecx
f011a5f5:	74 17                	je     f011a60e <test_kmalloc_bestfit1+0x2da>
f011a5f7:	83 ec 04             	sub    $0x4,%esp
f011a5fa:	68 08 91 13 f0       	push   $0xf0139108
f011a5ff:	68 a8 01 00 00       	push   $0x1a8
f011a604:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a609:	e8 a2 5b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a60e:	e8 a5 9c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a613:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a616:	74 17                	je     f011a62f <test_kmalloc_bestfit1+0x2fb>
f011a618:	83 ec 04             	sub    $0x4,%esp
f011a61b:	68 08 8d 13 f0       	push   $0xf0138d08
f011a620:	68 a9 01 00 00       	push   $0x1a9
f011a625:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a62a:	e8 81 5b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a62f:	e8 de 1f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a634:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a637:	29 c2                	sub    %eax,%edx
f011a639:	89 d0                	mov    %edx,%eax
f011a63b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a640:	74 17                	je     f011a659 <test_kmalloc_bestfit1+0x325>
f011a642:	83 ec 04             	sub    $0x4,%esp
f011a645:	68 38 91 13 f0       	push   $0xf0139138
f011a64a:	68 aa 01 00 00       	push   $0x1aa
f011a64f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a654:	e8 57 5b fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a659:	e8 b4 1f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a65e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a661:	e8 52 9c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a666:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a669:	83 ec 0c             	sub    $0xc,%esp
f011a66c:	68 00 fc 1f 00       	push   $0x1ffc00
f011a671:	e8 1d d5 fe ff       	call   f0107b93 <kmalloc>
f011a676:	83 c4 10             	add    $0x10,%esp
f011a679:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a67f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a685:	89 c1                	mov    %eax,%ecx
f011a687:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a68e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a693:	0f b6 d0             	movzbl %al,%edx
f011a696:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a699:	01 d0                	add    %edx,%eax
f011a69b:	48                   	dec    %eax
f011a69c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a69f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6a7:	f7 75 bc             	divl   -0x44(%ebp)
f011a6aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6ad:	29 d0                	sub    %edx,%eax
f011a6af:	89 c3                	mov    %eax,%ebx
f011a6b1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a6b8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a6bd:	0f b6 c0             	movzbl %al,%eax
f011a6c0:	c1 e0 04             	shl    $0x4,%eax
f011a6c3:	89 c2                	mov    %eax,%edx
f011a6c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a6c8:	01 d0                	add    %edx,%eax
f011a6ca:	48                   	dec    %eax
f011a6cb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a6ce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6d6:	f7 75 b4             	divl   -0x4c(%ebp)
f011a6d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a6dc:	29 d0                	sub    %edx,%eax
f011a6de:	01 d8                	add    %ebx,%eax
f011a6e0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a6e5:	39 c1                	cmp    %eax,%ecx
f011a6e7:	74 17                	je     f011a700 <test_kmalloc_bestfit1+0x3cc>
f011a6e9:	83 ec 04             	sub    $0x4,%esp
f011a6ec:	68 08 91 13 f0       	push   $0xf0139108
f011a6f1:	68 b0 01 00 00       	push   $0x1b0
f011a6f6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a6fb:	e8 b0 5a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a700:	e8 b3 9b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a705:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a708:	74 17                	je     f011a721 <test_kmalloc_bestfit1+0x3ed>
f011a70a:	83 ec 04             	sub    $0x4,%esp
f011a70d:	68 08 8d 13 f0       	push   $0xf0138d08
f011a712:	68 b1 01 00 00       	push   $0x1b1
f011a717:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a71c:	e8 8f 5a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a721:	e8 ec 1e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a726:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a729:	29 c2                	sub    %eax,%edx
f011a72b:	89 d0                	mov    %edx,%eax
f011a72d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a732:	74 17                	je     f011a74b <test_kmalloc_bestfit1+0x417>
f011a734:	83 ec 04             	sub    $0x4,%esp
f011a737:	68 38 91 13 f0       	push   $0xf0139138
f011a73c:	68 b2 01 00 00       	push   $0x1b2
f011a741:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a746:	e8 65 5a fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a74b:	e8 c2 1e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a750:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a753:	e8 60 9b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a758:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a75b:	83 ec 0c             	sub    $0xc,%esp
f011a75e:	68 00 fc 0f 00       	push   $0xffc00
f011a763:	e8 2b d4 fe ff       	call   f0107b93 <kmalloc>
f011a768:	83 c4 10             	add    $0x10,%esp
f011a76b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a771:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a777:	89 c1                	mov    %eax,%ecx
f011a779:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a780:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a785:	0f b6 d0             	movzbl %al,%edx
f011a788:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a78b:	01 d0                	add    %edx,%eax
f011a78d:	48                   	dec    %eax
f011a78e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a791:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a794:	ba 00 00 00 00       	mov    $0x0,%edx
f011a799:	f7 75 ac             	divl   -0x54(%ebp)
f011a79c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a79f:	29 d0                	sub    %edx,%eax
f011a7a1:	89 c3                	mov    %eax,%ebx
f011a7a3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a7aa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a7af:	0f b6 c0             	movzbl %al,%eax
f011a7b2:	c1 e0 04             	shl    $0x4,%eax
f011a7b5:	89 c2                	mov    %eax,%edx
f011a7b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7ba:	01 d0                	add    %edx,%eax
f011a7bc:	48                   	dec    %eax
f011a7bd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a7c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7c8:	f7 75 a4             	divl   -0x5c(%ebp)
f011a7cb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7ce:	29 d0                	sub    %edx,%eax
f011a7d0:	01 d8                	add    %ebx,%eax
f011a7d2:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a7d7:	39 c1                	cmp    %eax,%ecx
f011a7d9:	74 17                	je     f011a7f2 <test_kmalloc_bestfit1+0x4be>
f011a7db:	83 ec 04             	sub    $0x4,%esp
f011a7de:	68 08 91 13 f0       	push   $0xf0139108
f011a7e3:	68 b8 01 00 00       	push   $0x1b8
f011a7e8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a7ed:	e8 be 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7f2:	e8 c1 9a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a7f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7fa:	74 17                	je     f011a813 <test_kmalloc_bestfit1+0x4df>
f011a7fc:	83 ec 04             	sub    $0x4,%esp
f011a7ff:	68 08 8d 13 f0       	push   $0xf0138d08
f011a804:	68 b9 01 00 00       	push   $0x1b9
f011a809:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a80e:	e8 9d 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a813:	e8 fa 1d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a818:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a81b:	29 c2                	sub    %eax,%edx
f011a81d:	89 d0                	mov    %edx,%eax
f011a81f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a824:	74 17                	je     f011a83d <test_kmalloc_bestfit1+0x509>
f011a826:	83 ec 04             	sub    $0x4,%esp
f011a829:	68 38 91 13 f0       	push   $0xf0139138
f011a82e:	68 ba 01 00 00       	push   $0x1ba
f011a833:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a838:	e8 73 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a83d:	e8 d0 1d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a842:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a845:	e8 6e 9a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a84a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a84d:	83 ec 0c             	sub    $0xc,%esp
f011a850:	68 00 fc 0f 00       	push   $0xffc00
f011a855:	e8 39 d3 fe ff       	call   f0107b93 <kmalloc>
f011a85a:	83 c4 10             	add    $0x10,%esp
f011a85d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a863:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a869:	89 c1                	mov    %eax,%ecx
f011a86b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a872:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a877:	0f b6 d0             	movzbl %al,%edx
f011a87a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a87d:	01 d0                	add    %edx,%eax
f011a87f:	48                   	dec    %eax
f011a880:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a883:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a886:	ba 00 00 00 00       	mov    $0x0,%edx
f011a88b:	f7 75 9c             	divl   -0x64(%ebp)
f011a88e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a891:	29 d0                	sub    %edx,%eax
f011a893:	89 c3                	mov    %eax,%ebx
f011a895:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a89c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a8a1:	0f b6 c0             	movzbl %al,%eax
f011a8a4:	c1 e0 04             	shl    $0x4,%eax
f011a8a7:	89 c2                	mov    %eax,%edx
f011a8a9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a8ac:	01 d0                	add    %edx,%eax
f011a8ae:	48                   	dec    %eax
f011a8af:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a8b2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a8b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8ba:	f7 75 94             	divl   -0x6c(%ebp)
f011a8bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a8c0:	29 d0                	sub    %edx,%eax
f011a8c2:	01 d8                	add    %ebx,%eax
f011a8c4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a8c9:	39 c1                	cmp    %eax,%ecx
f011a8cb:	74 17                	je     f011a8e4 <test_kmalloc_bestfit1+0x5b0>
f011a8cd:	83 ec 04             	sub    $0x4,%esp
f011a8d0:	68 08 91 13 f0       	push   $0xf0139108
f011a8d5:	68 c0 01 00 00       	push   $0x1c0
f011a8da:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a8df:	e8 cc 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8e4:	e8 cf 99 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a8e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8ec:	74 17                	je     f011a905 <test_kmalloc_bestfit1+0x5d1>
f011a8ee:	83 ec 04             	sub    $0x4,%esp
f011a8f1:	68 08 8d 13 f0       	push   $0xf0138d08
f011a8f6:	68 c1 01 00 00       	push   $0x1c1
f011a8fb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a900:	e8 ab 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a905:	e8 08 1d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a90a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a90d:	29 c2                	sub    %eax,%edx
f011a90f:	89 d0                	mov    %edx,%eax
f011a911:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a916:	74 17                	je     f011a92f <test_kmalloc_bestfit1+0x5fb>
f011a918:	83 ec 04             	sub    $0x4,%esp
f011a91b:	68 38 91 13 f0       	push   $0xf0139138
f011a920:	68 c2 01 00 00       	push   $0x1c2
f011a925:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a92a:	e8 81 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a92f:	e8 de 1c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a934:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a937:	e8 7c 99 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a93c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a93f:	83 ec 0c             	sub    $0xc,%esp
f011a942:	68 00 fc 0f 00       	push   $0xffc00
f011a947:	e8 47 d2 fe ff       	call   f0107b93 <kmalloc>
f011a94c:	83 c4 10             	add    $0x10,%esp
f011a94f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a955:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a95b:	89 c1                	mov    %eax,%ecx
f011a95d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a964:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a969:	0f b6 d0             	movzbl %al,%edx
f011a96c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a96f:	01 d0                	add    %edx,%eax
f011a971:	48                   	dec    %eax
f011a972:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a975:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a978:	ba 00 00 00 00       	mov    $0x0,%edx
f011a97d:	f7 75 8c             	divl   -0x74(%ebp)
f011a980:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a983:	29 d0                	sub    %edx,%eax
f011a985:	89 c3                	mov    %eax,%ebx
f011a987:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a98e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a993:	0f b6 c0             	movzbl %al,%eax
f011a996:	c1 e0 04             	shl    $0x4,%eax
f011a999:	89 c2                	mov    %eax,%edx
f011a99b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a99e:	01 d0                	add    %edx,%eax
f011a9a0:	48                   	dec    %eax
f011a9a1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a9a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a9a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9ac:	f7 75 84             	divl   -0x7c(%ebp)
f011a9af:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a9b2:	29 d0                	sub    %edx,%eax
f011a9b4:	01 d8                	add    %ebx,%eax
f011a9b6:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a9bb:	39 c1                	cmp    %eax,%ecx
f011a9bd:	74 17                	je     f011a9d6 <test_kmalloc_bestfit1+0x6a2>
f011a9bf:	83 ec 04             	sub    $0x4,%esp
f011a9c2:	68 08 91 13 f0       	push   $0xf0139108
f011a9c7:	68 c8 01 00 00       	push   $0x1c8
f011a9cc:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a9d1:	e8 da 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9d6:	e8 dd 98 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a9db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9de:	74 17                	je     f011a9f7 <test_kmalloc_bestfit1+0x6c3>
f011a9e0:	83 ec 04             	sub    $0x4,%esp
f011a9e3:	68 08 8d 13 f0       	push   $0xf0138d08
f011a9e8:	68 c9 01 00 00       	push   $0x1c9
f011a9ed:	68 ee 8c 13 f0       	push   $0xf0138cee
f011a9f2:	e8 b9 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a9f7:	e8 16 1c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a9fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9ff:	29 c2                	sub    %eax,%edx
f011aa01:	89 d0                	mov    %edx,%eax
f011aa03:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa08:	74 17                	je     f011aa21 <test_kmalloc_bestfit1+0x6ed>
f011aa0a:	83 ec 04             	sub    $0x4,%esp
f011aa0d:	68 38 91 13 f0       	push   $0xf0139138
f011aa12:	68 ca 01 00 00       	push   $0x1ca
f011aa17:	68 ee 8c 13 f0       	push   $0xf0138cee
f011aa1c:	e8 8f 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa21:	e8 ec 1b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aa26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa29:	e8 8a 98 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aa2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011aa31:	83 ec 0c             	sub    $0xc,%esp
f011aa34:	68 00 fc 0f 00       	push   $0xffc00
f011aa39:	e8 55 d1 fe ff       	call   f0107b93 <kmalloc>
f011aa3e:	83 c4 10             	add    $0x10,%esp
f011aa41:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011aa47:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011aa4d:	89 c1                	mov    %eax,%ecx
f011aa4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011aa56:	10 00 00 
f011aa59:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aa5e:	0f b6 d0             	movzbl %al,%edx
f011aa61:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011aa67:	01 d0                	add    %edx,%eax
f011aa69:	48                   	dec    %eax
f011aa6a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011aa70:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aa76:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa7b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011aa81:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aa87:	29 d0                	sub    %edx,%eax
f011aa89:	89 c3                	mov    %eax,%ebx
f011aa8b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011aa92:	10 00 00 
f011aa95:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aa9a:	0f b6 c0             	movzbl %al,%eax
f011aa9d:	c1 e0 04             	shl    $0x4,%eax
f011aaa0:	89 c2                	mov    %eax,%edx
f011aaa2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aaa8:	01 d0                	add    %edx,%eax
f011aaaa:	48                   	dec    %eax
f011aaab:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aab1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aab7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aabc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aac2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aac8:	29 d0                	sub    %edx,%eax
f011aaca:	01 d8                	add    %ebx,%eax
f011aacc:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011aad1:	39 c1                	cmp    %eax,%ecx
f011aad3:	74 17                	je     f011aaec <test_kmalloc_bestfit1+0x7b8>
f011aad5:	83 ec 04             	sub    $0x4,%esp
f011aad8:	68 08 91 13 f0       	push   $0xf0139108
f011aadd:	68 d0 01 00 00       	push   $0x1d0
f011aae2:	68 ee 8c 13 f0       	push   $0xf0138cee
f011aae7:	e8 c4 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aaec:	e8 c7 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aaf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aaf4:	74 17                	je     f011ab0d <test_kmalloc_bestfit1+0x7d9>
f011aaf6:	83 ec 04             	sub    $0x4,%esp
f011aaf9:	68 08 8d 13 f0       	push   $0xf0138d08
f011aafe:	68 d1 01 00 00       	push   $0x1d1
f011ab03:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ab08:	e8 a3 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ab0d:	e8 00 1b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ab12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab15:	29 c2                	sub    %eax,%edx
f011ab17:	89 d0                	mov    %edx,%eax
f011ab19:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab1e:	74 17                	je     f011ab37 <test_kmalloc_bestfit1+0x803>
f011ab20:	83 ec 04             	sub    $0x4,%esp
f011ab23:	68 38 91 13 f0       	push   $0xf0139138
f011ab28:	68 d2 01 00 00       	push   $0x1d2
f011ab2d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ab32:	e8 79 56 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ab37:	e8 d6 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ab3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab3f:	e8 74 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ab44:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ab47:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ab4d:	83 ec 0c             	sub    $0xc,%esp
f011ab50:	50                   	push   %eax
f011ab51:	e8 57 d0 fe ff       	call   f0107bad <kfree>
f011ab56:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab59:	e8 5a 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ab5e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab61:	74 17                	je     f011ab7a <test_kmalloc_bestfit1+0x846>
f011ab63:	83 ec 04             	sub    $0x4,%esp
f011ab66:	68 08 8d 13 f0       	push   $0xf0138d08
f011ab6b:	68 db 01 00 00       	push   $0x1db
f011ab70:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ab75:	e8 36 56 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ab7a:	e8 93 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ab7f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab82:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ab87:	74 17                	je     f011aba0 <test_kmalloc_bestfit1+0x86c>
f011ab89:	83 ec 04             	sub    $0x4,%esp
f011ab8c:	68 4b 91 13 f0       	push   $0xf013914b
f011ab91:	68 dc 01 00 00       	push   $0x1dc
f011ab96:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ab9b:	e8 10 56 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aba0:	e8 6d 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aba8:	e8 0b 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011abad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011abb0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011abb6:	83 ec 0c             	sub    $0xc,%esp
f011abb9:	50                   	push   %eax
f011abba:	e8 ee cf fe ff       	call   f0107bad <kfree>
f011abbf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abc2:	e8 f1 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011abc7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abca:	74 17                	je     f011abe3 <test_kmalloc_bestfit1+0x8af>
f011abcc:	83 ec 04             	sub    $0x4,%esp
f011abcf:	68 08 8d 13 f0       	push   $0xf0138d08
f011abd4:	68 e2 01 00 00       	push   $0x1e2
f011abd9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011abde:	e8 cd 55 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011abe3:	e8 2a 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011abe8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011abeb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abf0:	74 17                	je     f011ac09 <test_kmalloc_bestfit1+0x8d5>
f011abf2:	83 ec 04             	sub    $0x4,%esp
f011abf5:	68 4b 91 13 f0       	push   $0xf013914b
f011abfa:	68 e3 01 00 00       	push   $0x1e3
f011abff:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ac04:	e8 a7 55 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ac09:	e8 04 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac11:	e8 a2 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac16:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ac19:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac1f:	83 ec 0c             	sub    $0xc,%esp
f011ac22:	50                   	push   %eax
f011ac23:	e8 85 cf fe ff       	call   f0107bad <kfree>
f011ac28:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac2b:	e8 88 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac30:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac33:	74 17                	je     f011ac4c <test_kmalloc_bestfit1+0x918>
f011ac35:	83 ec 04             	sub    $0x4,%esp
f011ac38:	68 08 8d 13 f0       	push   $0xf0138d08
f011ac3d:	68 e9 01 00 00       	push   $0x1e9
f011ac42:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ac47:	e8 64 55 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ac4c:	e8 c1 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac51:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ac54:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac59:	74 17                	je     f011ac72 <test_kmalloc_bestfit1+0x93e>
f011ac5b:	83 ec 04             	sub    $0x4,%esp
f011ac5e:	68 4b 91 13 f0       	push   $0xf013914b
f011ac63:	68 ea 01 00 00       	push   $0x1ea
f011ac68:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ac6d:	e8 3e 55 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ac72:	e8 9b 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac77:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac7a:	e8 39 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011ac82:	83 ec 0c             	sub    $0xc,%esp
f011ac85:	68 00 00 08 00       	push   $0x80000
f011ac8a:	e8 04 cf fe ff       	call   f0107b93 <kmalloc>
f011ac8f:	83 c4 10             	add    $0x10,%esp
f011ac92:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ac98:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ac9e:	89 c1                	mov    %eax,%ecx
f011aca0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aca7:	10 00 00 
f011acaa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011acaf:	0f b6 d0             	movzbl %al,%edx
f011acb2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011acb8:	01 d0                	add    %edx,%eax
f011acba:	48                   	dec    %eax
f011acbb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011acc1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011acc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011accc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011acd2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011acd8:	29 d0                	sub    %edx,%eax
f011acda:	89 c3                	mov    %eax,%ebx
f011acdc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ace3:	10 00 00 
f011ace6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aceb:	0f b6 c0             	movzbl %al,%eax
f011acee:	c1 e0 04             	shl    $0x4,%eax
f011acf1:	89 c2                	mov    %eax,%edx
f011acf3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011acf9:	01 d0                	add    %edx,%eax
f011acfb:	48                   	dec    %eax
f011acfc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ad02:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad08:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad0d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ad13:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad19:	29 d0                	sub    %edx,%eax
f011ad1b:	01 d8                	add    %ebx,%eax
f011ad1d:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ad22:	39 c1                	cmp    %eax,%ecx
f011ad24:	74 17                	je     f011ad3d <test_kmalloc_bestfit1+0xa09>
f011ad26:	83 ec 04             	sub    $0x4,%esp
f011ad29:	68 08 91 13 f0       	push   $0xf0139108
f011ad2e:	68 f3 01 00 00       	push   $0x1f3
f011ad33:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ad38:	e8 73 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad3d:	e8 76 95 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ad42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad45:	74 17                	je     f011ad5e <test_kmalloc_bestfit1+0xa2a>
f011ad47:	83 ec 04             	sub    $0x4,%esp
f011ad4a:	68 08 8d 13 f0       	push   $0xf0138d08
f011ad4f:	68 f4 01 00 00       	push   $0x1f4
f011ad54:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ad59:	e8 52 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011ad5e:	e8 af 18 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ad63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad66:	29 c2                	sub    %eax,%edx
f011ad68:	89 d0                	mov    %edx,%eax
f011ad6a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ad6f:	74 17                	je     f011ad88 <test_kmalloc_bestfit1+0xa54>
f011ad71:	83 ec 04             	sub    $0x4,%esp
f011ad74:	68 38 91 13 f0       	push   $0xf0139138
f011ad79:	68 f5 01 00 00       	push   $0x1f5
f011ad7e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ad83:	e8 28 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ad88:	e8 85 18 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ad8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad90:	e8 23 95 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ad95:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ad98:	83 ec 0c             	sub    $0xc,%esp
f011ad9b:	68 00 fc 0f 00       	push   $0xffc00
f011ada0:	e8 ee cd fe ff       	call   f0107b93 <kmalloc>
f011ada5:	83 c4 10             	add    $0x10,%esp
f011ada8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011adae:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011adb4:	89 c1                	mov    %eax,%ecx
f011adb6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011adbd:	10 00 00 
f011adc0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011adc5:	0f b6 d0             	movzbl %al,%edx
f011adc8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011adce:	01 d0                	add    %edx,%eax
f011add0:	48                   	dec    %eax
f011add1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011add7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011addd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ade8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011adee:	29 d0                	sub    %edx,%eax
f011adf0:	89 c3                	mov    %eax,%ebx
f011adf2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011adf9:	10 00 00 
f011adfc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ae01:	0f b6 c0             	movzbl %al,%eax
f011ae04:	c1 e0 04             	shl    $0x4,%eax
f011ae07:	89 c2                	mov    %eax,%edx
f011ae09:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ae0f:	01 d0                	add    %edx,%eax
f011ae11:	48                   	dec    %eax
f011ae12:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ae18:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ae1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae23:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ae29:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ae2f:	29 d0                	sub    %edx,%eax
f011ae31:	01 d8                	add    %ebx,%eax
f011ae33:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ae38:	39 c1                	cmp    %eax,%ecx
f011ae3a:	74 17                	je     f011ae53 <test_kmalloc_bestfit1+0xb1f>
f011ae3c:	83 ec 04             	sub    $0x4,%esp
f011ae3f:	68 08 91 13 f0       	push   $0xf0139108
f011ae44:	68 fb 01 00 00       	push   $0x1fb
f011ae49:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ae4e:	e8 5d 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae53:	e8 60 94 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ae58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae5b:	74 17                	je     f011ae74 <test_kmalloc_bestfit1+0xb40>
f011ae5d:	83 ec 04             	sub    $0x4,%esp
f011ae60:	68 08 8d 13 f0       	push   $0xf0138d08
f011ae65:	68 fc 01 00 00       	push   $0x1fc
f011ae6a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ae6f:	e8 3c 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae74:	e8 99 17 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ae79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae7c:	29 c2                	sub    %eax,%edx
f011ae7e:	89 d0                	mov    %edx,%eax
f011ae80:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae85:	74 17                	je     f011ae9e <test_kmalloc_bestfit1+0xb6a>
f011ae87:	83 ec 04             	sub    $0x4,%esp
f011ae8a:	68 38 91 13 f0       	push   $0xf0139138
f011ae8f:	68 fd 01 00 00       	push   $0x1fd
f011ae94:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ae99:	e8 12 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ae9e:	e8 6f 17 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aea6:	e8 0d 94 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aeab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011aeae:	83 ec 0c             	sub    $0xc,%esp
f011aeb1:	68 00 fc 03 00       	push   $0x3fc00
f011aeb6:	e8 d8 cc fe ff       	call   f0107b93 <kmalloc>
f011aebb:	83 c4 10             	add    $0x10,%esp
f011aebe:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011aec4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011aeca:	89 c1                	mov    %eax,%ecx
f011aecc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011aed3:	10 00 00 
f011aed6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aedb:	0f b6 d0             	movzbl %al,%edx
f011aede:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011aee4:	01 d0                	add    %edx,%eax
f011aee6:	48                   	dec    %eax
f011aee7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011aeed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011aef3:	ba 00 00 00 00       	mov    $0x0,%edx
f011aef8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011aefe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af04:	29 d0                	sub    %edx,%eax
f011af06:	89 c3                	mov    %eax,%ebx
f011af08:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011af0f:	10 00 00 
f011af12:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011af17:	0f b6 c0             	movzbl %al,%eax
f011af1a:	c1 e0 04             	shl    $0x4,%eax
f011af1d:	89 c2                	mov    %eax,%edx
f011af1f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011af25:	01 d0                	add    %edx,%eax
f011af27:	48                   	dec    %eax
f011af28:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011af2e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011af34:	ba 00 00 00 00       	mov    $0x0,%edx
f011af39:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011af3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011af45:	29 d0                	sub    %edx,%eax
f011af47:	01 d8                	add    %ebx,%eax
f011af49:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011af4e:	39 c1                	cmp    %eax,%ecx
f011af50:	74 17                	je     f011af69 <test_kmalloc_bestfit1+0xc35>
f011af52:	83 ec 04             	sub    $0x4,%esp
f011af55:	68 08 91 13 f0       	push   $0xf0139108
f011af5a:	68 03 02 00 00       	push   $0x203
f011af5f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011af64:	e8 47 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af69:	e8 4a 93 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011af6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af71:	74 17                	je     f011af8a <test_kmalloc_bestfit1+0xc56>
f011af73:	83 ec 04             	sub    $0x4,%esp
f011af76:	68 08 8d 13 f0       	push   $0xf0138d08
f011af7b:	68 04 02 00 00       	push   $0x204
f011af80:	68 ee 8c 13 f0       	push   $0xf0138cee
f011af85:	e8 26 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011af8a:	e8 83 16 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011af8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af92:	29 c2                	sub    %eax,%edx
f011af94:	89 d0                	mov    %edx,%eax
f011af96:	83 f8 40             	cmp    $0x40,%eax
f011af99:	74 17                	je     f011afb2 <test_kmalloc_bestfit1+0xc7e>
f011af9b:	83 ec 04             	sub    $0x4,%esp
f011af9e:	68 38 91 13 f0       	push   $0xf0139138
f011afa3:	68 05 02 00 00       	push   $0x205
f011afa8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011afad:	e8 fe 51 fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011afb2:	e8 5b 16 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011afb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afba:	e8 f9 92 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011afbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011afc2:	83 ec 0c             	sub    $0xc,%esp
f011afc5:	68 00 fc 3f 00       	push   $0x3ffc00
f011afca:	e8 c4 cb fe ff       	call   f0107b93 <kmalloc>
f011afcf:	83 c4 10             	add    $0x10,%esp
f011afd2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011afd8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011afde:	89 c1                	mov    %eax,%ecx
f011afe0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011afe7:	10 00 00 
f011afea:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011afef:	0f b6 d0             	movzbl %al,%edx
f011aff2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011aff8:	01 d0                	add    %edx,%eax
f011affa:	48                   	dec    %eax
f011affb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b001:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b007:	ba 00 00 00 00       	mov    $0x0,%edx
f011b00c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b012:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b018:	29 d0                	sub    %edx,%eax
f011b01a:	89 c3                	mov    %eax,%ebx
f011b01c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b023:	10 00 00 
f011b026:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b02b:	0f b6 c0             	movzbl %al,%eax
f011b02e:	c1 e0 04             	shl    $0x4,%eax
f011b031:	89 c2                	mov    %eax,%edx
f011b033:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b039:	01 d0                	add    %edx,%eax
f011b03b:	48                   	dec    %eax
f011b03c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b042:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b048:	ba 00 00 00 00       	mov    $0x0,%edx
f011b04d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b053:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b059:	29 d0                	sub    %edx,%eax
f011b05b:	01 d8                	add    %ebx,%eax
f011b05d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b062:	39 c1                	cmp    %eax,%ecx
f011b064:	74 17                	je     f011b07d <test_kmalloc_bestfit1+0xd49>
f011b066:	83 ec 04             	sub    $0x4,%esp
f011b069:	68 08 91 13 f0       	push   $0xf0139108
f011b06e:	68 0b 02 00 00       	push   $0x20b
f011b073:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b078:	e8 33 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b07d:	e8 36 92 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b082:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b085:	74 17                	je     f011b09e <test_kmalloc_bestfit1+0xd6a>
f011b087:	83 ec 04             	sub    $0x4,%esp
f011b08a:	68 08 8d 13 f0       	push   $0xf0138d08
f011b08f:	68 0c 02 00 00       	push   $0x20c
f011b094:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b099:	e8 12 51 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b09e:	e8 6f 15 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b0a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0a6:	29 c2                	sub    %eax,%edx
f011b0a8:	89 d0                	mov    %edx,%eax
f011b0aa:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b0af:	74 17                	je     f011b0c8 <test_kmalloc_bestfit1+0xd94>
f011b0b1:	83 ec 04             	sub    $0x4,%esp
f011b0b4:	68 38 91 13 f0       	push   $0xf0139138
f011b0b9:	68 0d 02 00 00       	push   $0x20d
f011b0be:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b0c3:	e8 e8 50 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b0c8:	e8 45 15 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b0cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0d0:	e8 e3 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b0d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b0d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b0de:	83 ec 0c             	sub    $0xc,%esp
f011b0e1:	50                   	push   %eax
f011b0e2:	e8 c6 ca fe ff       	call   f0107bad <kfree>
f011b0e7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0ea:	e8 c9 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b0ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0f2:	74 17                	je     f011b10b <test_kmalloc_bestfit1+0xdd7>
f011b0f4:	83 ec 04             	sub    $0x4,%esp
f011b0f7:	68 08 8d 13 f0       	push   $0xf0138d08
f011b0fc:	68 16 02 00 00       	push   $0x216
f011b101:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b106:	e8 a5 50 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b10b:	e8 02 15 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b110:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b113:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b118:	74 17                	je     f011b131 <test_kmalloc_bestfit1+0xdfd>
f011b11a:	83 ec 04             	sub    $0x4,%esp
f011b11d:	68 4b 91 13 f0       	push   $0xf013914b
f011b122:	68 17 02 00 00       	push   $0x217
f011b127:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b12c:	e8 7f 50 fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b131:	e8 dc 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b136:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b139:	e8 7a 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b13e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b141:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b147:	83 ec 0c             	sub    $0xc,%esp
f011b14a:	50                   	push   %eax
f011b14b:	e8 5d ca fe ff       	call   f0107bad <kfree>
f011b150:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b153:	e8 60 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b158:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b15b:	74 17                	je     f011b174 <test_kmalloc_bestfit1+0xe40>
f011b15d:	83 ec 04             	sub    $0x4,%esp
f011b160:	68 08 8d 13 f0       	push   $0xf0138d08
f011b165:	68 1d 02 00 00       	push   $0x21d
f011b16a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b16f:	e8 3c 50 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b174:	e8 99 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b179:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b17c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b181:	74 17                	je     f011b19a <test_kmalloc_bestfit1+0xe66>
f011b183:	83 ec 04             	sub    $0x4,%esp
f011b186:	68 4b 91 13 f0       	push   $0xf013914b
f011b18b:	68 1e 02 00 00       	push   $0x21e
f011b190:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b195:	e8 16 50 fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b19a:	e8 73 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b19f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1a2:	e8 11 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b1a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b1aa:	83 ec 0c             	sub    $0xc,%esp
f011b1ad:	68 00 fc 1f 00       	push   $0x1ffc00
f011b1b2:	e8 dc c9 fe ff       	call   f0107b93 <kmalloc>
f011b1b7:	83 c4 10             	add    $0x10,%esp
f011b1ba:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b1c0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b1c6:	89 c1                	mov    %eax,%ecx
f011b1c8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b1cf:	10 00 00 
f011b1d2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b1d7:	0f b6 d0             	movzbl %al,%edx
f011b1da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b1e0:	01 d0                	add    %edx,%eax
f011b1e2:	48                   	dec    %eax
f011b1e3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b1e9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b1ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1f4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b1fa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b200:	29 d0                	sub    %edx,%eax
f011b202:	89 c3                	mov    %eax,%ebx
f011b204:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b20b:	10 00 00 
f011b20e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b213:	0f b6 c0             	movzbl %al,%eax
f011b216:	c1 e0 04             	shl    $0x4,%eax
f011b219:	89 c2                	mov    %eax,%edx
f011b21b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b221:	01 d0                	add    %edx,%eax
f011b223:	48                   	dec    %eax
f011b224:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b22a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b230:	ba 00 00 00 00       	mov    $0x0,%edx
f011b235:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b23b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b241:	29 d0                	sub    %edx,%eax
f011b243:	01 d8                	add    %ebx,%eax
f011b245:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b24a:	39 c1                	cmp    %eax,%ecx
f011b24c:	74 17                	je     f011b265 <test_kmalloc_bestfit1+0xf31>
f011b24e:	83 ec 04             	sub    $0x4,%esp
f011b251:	68 08 91 13 f0       	push   $0xf0139108
f011b256:	68 27 02 00 00       	push   $0x227
f011b25b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b260:	e8 4b 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b265:	e8 4e 90 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b26a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b26d:	74 17                	je     f011b286 <test_kmalloc_bestfit1+0xf52>
f011b26f:	83 ec 04             	sub    $0x4,%esp
f011b272:	68 08 8d 13 f0       	push   $0xf0138d08
f011b277:	68 28 02 00 00       	push   $0x228
f011b27c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b281:	e8 2a 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b286:	e8 87 13 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b28b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b28e:	29 c2                	sub    %eax,%edx
f011b290:	89 d0                	mov    %edx,%eax
f011b292:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b297:	74 17                	je     f011b2b0 <test_kmalloc_bestfit1+0xf7c>
f011b299:	83 ec 04             	sub    $0x4,%esp
f011b29c:	68 38 91 13 f0       	push   $0xf0139138
f011b2a1:	68 29 02 00 00       	push   $0x229
f011b2a6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b2ab:	e8 00 4f fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b2b0:	83 ec 0c             	sub    $0xc,%esp
f011b2b3:	68 58 91 13 f0       	push   $0xf0139158
f011b2b8:	e8 74 5b fe ff       	call   f0100e31 <cprintf>
f011b2bd:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b2c0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b2c5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b2c8:	5b                   	pop    %ebx
f011b2c9:	5f                   	pop    %edi
f011b2ca:	5d                   	pop    %ebp
f011b2cb:	c3                   	ret    

f011b2cc <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b2cc:	55                   	push   %ebp
f011b2cd:	89 e5                	mov    %esp,%ebp
f011b2cf:	57                   	push   %edi
f011b2d0:	53                   	push   %ebx
f011b2d1:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b2d7:	83 ec 0c             	sub    $0xc,%esp
f011b2da:	68 30 8c 13 f0       	push   $0xf0138c30
f011b2df:	e8 4d 5b fe ff       	call   f0100e31 <cprintf>
f011b2e4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b2e7:	83 ec 0c             	sub    $0xc,%esp
f011b2ea:	68 60 8c 13 f0       	push   $0xf0138c60
f011b2ef:	e8 3d 5b fe ff       	call   f0100e31 <cprintf>
f011b2f4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b2f7:	83 ec 0c             	sub    $0xc,%esp
f011b2fa:	68 30 8c 13 f0       	push   $0xf0138c30
f011b2ff:	e8 2d 5b fe ff       	call   f0100e31 <cprintf>
f011b304:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b307:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b30d:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b312:	b8 00 00 00 00       	mov    $0x0,%eax
f011b317:	89 d7                	mov    %edx,%edi
f011b319:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b31b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b322:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b327:	0f b6 d0             	movzbl %al,%edx
f011b32a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b32d:	01 d0                	add    %edx,%eax
f011b32f:	48                   	dec    %eax
f011b330:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b333:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b336:	ba 00 00 00 00       	mov    $0x0,%edx
f011b33b:	f7 75 f4             	divl   -0xc(%ebp)
f011b33e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b341:	29 d0                	sub    %edx,%eax
f011b343:	89 c1                	mov    %eax,%ecx
f011b345:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b34c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b351:	0f b6 c0             	movzbl %al,%eax
f011b354:	c1 e0 04             	shl    $0x4,%eax
f011b357:	89 c2                	mov    %eax,%edx
f011b359:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b35c:	01 d0                	add    %edx,%eax
f011b35e:	48                   	dec    %eax
f011b35f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b362:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b365:	ba 00 00 00 00       	mov    $0x0,%edx
f011b36a:	f7 75 ec             	divl   -0x14(%ebp)
f011b36d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b370:	29 d0                	sub    %edx,%eax
f011b372:	01 c8                	add    %ecx,%eax
f011b374:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b379:	29 c2                	sub    %eax,%edx
f011b37b:	89 d0                	mov    %edx,%eax
f011b37d:	83 ec 0c             	sub    $0xc,%esp
f011b380:	50                   	push   %eax
f011b381:	e8 0d c8 fe ff       	call   f0107b93 <kmalloc>
f011b386:	83 c4 10             	add    $0x10,%esp
f011b389:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b38f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b395:	85 c0                	test   %eax,%eax
f011b397:	74 17                	je     f011b3b0 <test_kmalloc_bestfit2+0xe4>
f011b399:	83 ec 04             	sub    $0x4,%esp
f011b39c:	68 a0 91 13 f0       	push   $0xf01391a0
f011b3a1:	68 3f 02 00 00       	push   $0x23f
f011b3a6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b3ab:	e8 00 4e fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b3b0:	e8 5d 12 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b3b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3b8:	e8 fb 8e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b3bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b3c0:	83 ec 0c             	sub    $0xc,%esp
f011b3c3:	68 00 fc 1f 00       	push   $0x1ffc00
f011b3c8:	e8 c6 c7 fe ff       	call   f0107b93 <kmalloc>
f011b3cd:	83 c4 10             	add    $0x10,%esp
f011b3d0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b3d6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b3dc:	89 c1                	mov    %eax,%ecx
f011b3de:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b3e5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b3ea:	0f b6 d0             	movzbl %al,%edx
f011b3ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b3f0:	01 d0                	add    %edx,%eax
f011b3f2:	48                   	dec    %eax
f011b3f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b3f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b3f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3fe:	f7 75 dc             	divl   -0x24(%ebp)
f011b401:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b404:	29 d0                	sub    %edx,%eax
f011b406:	89 c3                	mov    %eax,%ebx
f011b408:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b40f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b414:	0f b6 c0             	movzbl %al,%eax
f011b417:	c1 e0 04             	shl    $0x4,%eax
f011b41a:	89 c2                	mov    %eax,%edx
f011b41c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b41f:	01 d0                	add    %edx,%eax
f011b421:	48                   	dec    %eax
f011b422:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b425:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b428:	ba 00 00 00 00       	mov    $0x0,%edx
f011b42d:	f7 75 d4             	divl   -0x2c(%ebp)
f011b430:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b433:	29 d0                	sub    %edx,%eax
f011b435:	01 d8                	add    %ebx,%eax
f011b437:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b43c:	39 c1                	cmp    %eax,%ecx
f011b43e:	74 17                	je     f011b457 <test_kmalloc_bestfit2+0x18b>
f011b440:	83 ec 04             	sub    $0x4,%esp
f011b443:	68 08 91 13 f0       	push   $0xf0139108
f011b448:	68 49 02 00 00       	push   $0x249
f011b44d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b452:	e8 59 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b457:	e8 5c 8e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b45c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b45f:	74 17                	je     f011b478 <test_kmalloc_bestfit2+0x1ac>
f011b461:	83 ec 04             	sub    $0x4,%esp
f011b464:	68 08 8d 13 f0       	push   $0xf0138d08
f011b469:	68 4a 02 00 00       	push   $0x24a
f011b46e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b473:	e8 38 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b478:	e8 95 11 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b47d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b480:	29 c2                	sub    %eax,%edx
f011b482:	89 d0                	mov    %edx,%eax
f011b484:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b489:	74 17                	je     f011b4a2 <test_kmalloc_bestfit2+0x1d6>
f011b48b:	83 ec 04             	sub    $0x4,%esp
f011b48e:	68 38 91 13 f0       	push   $0xf0139138
f011b493:	68 4b 02 00 00       	push   $0x24b
f011b498:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b49d:	e8 0e 4d fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b4a2:	e8 6b 11 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b4a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4aa:	e8 09 8e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b4af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b4b2:	83 ec 0c             	sub    $0xc,%esp
f011b4b5:	68 00 fc 1f 00       	push   $0x1ffc00
f011b4ba:	e8 d4 c6 fe ff       	call   f0107b93 <kmalloc>
f011b4bf:	83 c4 10             	add    $0x10,%esp
f011b4c2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b4c8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b4ce:	89 c1                	mov    %eax,%ecx
f011b4d0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b4d7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b4dc:	0f b6 d0             	movzbl %al,%edx
f011b4df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b4e2:	01 d0                	add    %edx,%eax
f011b4e4:	48                   	dec    %eax
f011b4e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b4e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b4eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4f0:	f7 75 cc             	divl   -0x34(%ebp)
f011b4f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b4f6:	29 d0                	sub    %edx,%eax
f011b4f8:	89 c3                	mov    %eax,%ebx
f011b4fa:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b501:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b506:	0f b6 c0             	movzbl %al,%eax
f011b509:	c1 e0 04             	shl    $0x4,%eax
f011b50c:	89 c2                	mov    %eax,%edx
f011b50e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b511:	01 d0                	add    %edx,%eax
f011b513:	48                   	dec    %eax
f011b514:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b517:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b51a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b51f:	f7 75 c4             	divl   -0x3c(%ebp)
f011b522:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b525:	29 d0                	sub    %edx,%eax
f011b527:	01 d8                	add    %ebx,%eax
f011b529:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b52e:	39 c1                	cmp    %eax,%ecx
f011b530:	74 17                	je     f011b549 <test_kmalloc_bestfit2+0x27d>
f011b532:	83 ec 04             	sub    $0x4,%esp
f011b535:	68 08 91 13 f0       	push   $0xf0139108
f011b53a:	68 51 02 00 00       	push   $0x251
f011b53f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b544:	e8 67 4c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b549:	e8 6a 8d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b54e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b551:	74 17                	je     f011b56a <test_kmalloc_bestfit2+0x29e>
f011b553:	83 ec 04             	sub    $0x4,%esp
f011b556:	68 08 8d 13 f0       	push   $0xf0138d08
f011b55b:	68 52 02 00 00       	push   $0x252
f011b560:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b565:	e8 46 4c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b56a:	e8 a3 10 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b56f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b572:	29 c2                	sub    %eax,%edx
f011b574:	89 d0                	mov    %edx,%eax
f011b576:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b57b:	74 17                	je     f011b594 <test_kmalloc_bestfit2+0x2c8>
f011b57d:	83 ec 04             	sub    $0x4,%esp
f011b580:	68 38 91 13 f0       	push   $0xf0139138
f011b585:	68 53 02 00 00       	push   $0x253
f011b58a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b58f:	e8 1c 4c fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b594:	e8 79 10 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b599:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b59c:	e8 17 8d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b5a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b5a4:	83 ec 0c             	sub    $0xc,%esp
f011b5a7:	68 00 08 00 00       	push   $0x800
f011b5ac:	e8 e2 c5 fe ff       	call   f0107b93 <kmalloc>
f011b5b1:	83 c4 10             	add    $0x10,%esp
f011b5b4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b5ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b5c0:	89 c1                	mov    %eax,%ecx
f011b5c2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b5c9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b5ce:	0f b6 d0             	movzbl %al,%edx
f011b5d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b5d4:	01 d0                	add    %edx,%eax
f011b5d6:	48                   	dec    %eax
f011b5d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b5da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b5dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5e2:	f7 75 bc             	divl   -0x44(%ebp)
f011b5e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b5e8:	29 d0                	sub    %edx,%eax
f011b5ea:	89 c3                	mov    %eax,%ebx
f011b5ec:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b5f3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b5f8:	0f b6 c0             	movzbl %al,%eax
f011b5fb:	c1 e0 04             	shl    $0x4,%eax
f011b5fe:	89 c2                	mov    %eax,%edx
f011b600:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b603:	01 d0                	add    %edx,%eax
f011b605:	48                   	dec    %eax
f011b606:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b609:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b60c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b611:	f7 75 b4             	divl   -0x4c(%ebp)
f011b614:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b617:	29 d0                	sub    %edx,%eax
f011b619:	01 d8                	add    %ebx,%eax
f011b61b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b620:	39 c1                	cmp    %eax,%ecx
f011b622:	74 17                	je     f011b63b <test_kmalloc_bestfit2+0x36f>
f011b624:	83 ec 04             	sub    $0x4,%esp
f011b627:	68 08 91 13 f0       	push   $0xf0139108
f011b62c:	68 59 02 00 00       	push   $0x259
f011b631:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b636:	e8 75 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b63b:	e8 78 8c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b640:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b643:	74 17                	je     f011b65c <test_kmalloc_bestfit2+0x390>
f011b645:	83 ec 04             	sub    $0x4,%esp
f011b648:	68 08 8d 13 f0       	push   $0xf0138d08
f011b64d:	68 5a 02 00 00       	push   $0x25a
f011b652:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b657:	e8 54 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b65c:	e8 b1 0f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b661:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b664:	29 c2                	sub    %eax,%edx
f011b666:	89 d0                	mov    %edx,%eax
f011b668:	83 f8 01             	cmp    $0x1,%eax
f011b66b:	74 17                	je     f011b684 <test_kmalloc_bestfit2+0x3b8>
f011b66d:	83 ec 04             	sub    $0x4,%esp
f011b670:	68 38 91 13 f0       	push   $0xf0139138
f011b675:	68 5b 02 00 00       	push   $0x25b
f011b67a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b67f:	e8 2c 4b fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b684:	e8 89 0f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b689:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b68c:	e8 27 8c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b691:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b694:	83 ec 0c             	sub    $0xc,%esp
f011b697:	68 00 08 00 00       	push   $0x800
f011b69c:	e8 f2 c4 fe ff       	call   f0107b93 <kmalloc>
f011b6a1:	83 c4 10             	add    $0x10,%esp
f011b6a4:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b6aa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b6b0:	89 c1                	mov    %eax,%ecx
f011b6b2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b6b9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b6be:	0f b6 d0             	movzbl %al,%edx
f011b6c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b6c4:	01 d0                	add    %edx,%eax
f011b6c6:	48                   	dec    %eax
f011b6c7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b6ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b6cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6d2:	f7 75 ac             	divl   -0x54(%ebp)
f011b6d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b6d8:	29 d0                	sub    %edx,%eax
f011b6da:	89 c3                	mov    %eax,%ebx
f011b6dc:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b6e3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b6e8:	0f b6 c0             	movzbl %al,%eax
f011b6eb:	c1 e0 04             	shl    $0x4,%eax
f011b6ee:	89 c2                	mov    %eax,%edx
f011b6f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b6f3:	01 d0                	add    %edx,%eax
f011b6f5:	48                   	dec    %eax
f011b6f6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b6f9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b701:	f7 75 a4             	divl   -0x5c(%ebp)
f011b704:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b707:	29 d0                	sub    %edx,%eax
f011b709:	01 d8                	add    %ebx,%eax
f011b70b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b710:	39 c1                	cmp    %eax,%ecx
f011b712:	74 17                	je     f011b72b <test_kmalloc_bestfit2+0x45f>
f011b714:	83 ec 04             	sub    $0x4,%esp
f011b717:	68 08 91 13 f0       	push   $0xf0139108
f011b71c:	68 61 02 00 00       	push   $0x261
f011b721:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b726:	e8 85 4a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b72b:	e8 88 8b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b730:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b733:	74 17                	je     f011b74c <test_kmalloc_bestfit2+0x480>
f011b735:	83 ec 04             	sub    $0x4,%esp
f011b738:	68 08 8d 13 f0       	push   $0xf0138d08
f011b73d:	68 62 02 00 00       	push   $0x262
f011b742:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b747:	e8 64 4a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b74c:	e8 c1 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b751:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b754:	29 c2                	sub    %eax,%edx
f011b756:	89 d0                	mov    %edx,%eax
f011b758:	83 f8 01             	cmp    $0x1,%eax
f011b75b:	74 17                	je     f011b774 <test_kmalloc_bestfit2+0x4a8>
f011b75d:	83 ec 04             	sub    $0x4,%esp
f011b760:	68 38 91 13 f0       	push   $0xf0139138
f011b765:	68 63 02 00 00       	push   $0x263
f011b76a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b76f:	e8 3c 4a fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b774:	e8 99 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b779:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b77c:	e8 37 8b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b781:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011b784:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b78a:	83 ec 0c             	sub    $0xc,%esp
f011b78d:	50                   	push   %eax
f011b78e:	e8 1a c4 fe ff       	call   f0107bad <kfree>
f011b793:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b796:	e8 1d 8b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b79b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b79e:	74 17                	je     f011b7b7 <test_kmalloc_bestfit2+0x4eb>
f011b7a0:	83 ec 04             	sub    $0x4,%esp
f011b7a3:	68 08 8d 13 f0       	push   $0xf0138d08
f011b7a8:	68 69 02 00 00       	push   $0x269
f011b7ad:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b7b2:	e8 f9 49 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b7b7:	e8 56 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b7bc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011b7bf:	83 f8 01             	cmp    $0x1,%eax
f011b7c2:	74 17                	je     f011b7db <test_kmalloc_bestfit2+0x50f>
f011b7c4:	83 ec 04             	sub    $0x4,%esp
f011b7c7:	68 38 91 13 f0       	push   $0xf0139138
f011b7cc:	68 6a 02 00 00       	push   $0x26a
f011b7d1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b7d6:	e8 d5 49 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b7db:	e8 32 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b7e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b7e3:	e8 d0 8a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b7e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b7eb:	83 ec 0c             	sub    $0xc,%esp
f011b7ee:	68 00 1c 00 00       	push   $0x1c00
f011b7f3:	e8 9b c3 fe ff       	call   f0107b93 <kmalloc>
f011b7f8:	83 c4 10             	add    $0x10,%esp
f011b7fb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b801:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b807:	89 c1                	mov    %eax,%ecx
f011b809:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b810:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b815:	0f b6 d0             	movzbl %al,%edx
f011b818:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b81b:	01 d0                	add    %edx,%eax
f011b81d:	48                   	dec    %eax
f011b81e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b821:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b824:	ba 00 00 00 00       	mov    $0x0,%edx
f011b829:	f7 75 9c             	divl   -0x64(%ebp)
f011b82c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b82f:	29 d0                	sub    %edx,%eax
f011b831:	89 c3                	mov    %eax,%ebx
f011b833:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b83a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b83f:	0f b6 c0             	movzbl %al,%eax
f011b842:	c1 e0 04             	shl    $0x4,%eax
f011b845:	89 c2                	mov    %eax,%edx
f011b847:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b84a:	01 d0                	add    %edx,%eax
f011b84c:	48                   	dec    %eax
f011b84d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b850:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b853:	ba 00 00 00 00       	mov    $0x0,%edx
f011b858:	f7 75 94             	divl   -0x6c(%ebp)
f011b85b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b85e:	29 d0                	sub    %edx,%eax
f011b860:	01 d8                	add    %ebx,%eax
f011b862:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b867:	39 c1                	cmp    %eax,%ecx
f011b869:	74 17                	je     f011b882 <test_kmalloc_bestfit2+0x5b6>
f011b86b:	83 ec 04             	sub    $0x4,%esp
f011b86e:	68 08 91 13 f0       	push   $0xf0139108
f011b873:	68 70 02 00 00       	push   $0x270
f011b878:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b87d:	e8 2e 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b882:	e8 31 8a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b887:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b88a:	74 17                	je     f011b8a3 <test_kmalloc_bestfit2+0x5d7>
f011b88c:	83 ec 04             	sub    $0x4,%esp
f011b88f:	68 08 8d 13 f0       	push   $0xf0138d08
f011b894:	68 71 02 00 00       	push   $0x271
f011b899:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b89e:	e8 0d 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b8a3:	e8 6a 0d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b8a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b8ab:	29 c2                	sub    %eax,%edx
f011b8ad:	89 d0                	mov    %edx,%eax
f011b8af:	83 f8 02             	cmp    $0x2,%eax
f011b8b2:	74 17                	je     f011b8cb <test_kmalloc_bestfit2+0x5ff>
f011b8b4:	83 ec 04             	sub    $0x4,%esp
f011b8b7:	68 38 91 13 f0       	push   $0xf0139138
f011b8bc:	68 72 02 00 00       	push   $0x272
f011b8c1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b8c6:	e8 e5 48 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b8cb:	e8 42 0d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b8d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8d3:	e8 e0 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b8d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011b8db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b8e1:	83 ec 0c             	sub    $0xc,%esp
f011b8e4:	50                   	push   %eax
f011b8e5:	e8 c3 c2 fe ff       	call   f0107bad <kfree>
f011b8ea:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8ed:	e8 c6 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b8f2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b8f5:	74 17                	je     f011b90e <test_kmalloc_bestfit2+0x642>
f011b8f7:	83 ec 04             	sub    $0x4,%esp
f011b8fa:	68 08 8d 13 f0       	push   $0xf0138d08
f011b8ff:	68 78 02 00 00       	push   $0x278
f011b904:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b909:	e8 a2 48 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b90e:	e8 ff 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b913:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011b916:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b91b:	74 17                	je     f011b934 <test_kmalloc_bestfit2+0x668>
f011b91d:	83 ec 04             	sub    $0x4,%esp
f011b920:	68 bc 8f 13 f0       	push   $0xf0138fbc
f011b925:	68 79 02 00 00       	push   $0x279
f011b92a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b92f:	e8 7c 48 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b934:	e8 d9 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b939:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b93c:	e8 77 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b941:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b944:	83 ec 0c             	sub    $0xc,%esp
f011b947:	68 00 fc 2f 00       	push   $0x2ffc00
f011b94c:	e8 42 c2 fe ff       	call   f0107b93 <kmalloc>
f011b951:	83 c4 10             	add    $0x10,%esp
f011b954:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b95a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b960:	89 c1                	mov    %eax,%ecx
f011b962:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b969:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b96e:	0f b6 d0             	movzbl %al,%edx
f011b971:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b974:	01 d0                	add    %edx,%eax
f011b976:	48                   	dec    %eax
f011b977:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b97a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b97d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b982:	f7 75 8c             	divl   -0x74(%ebp)
f011b985:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b988:	29 d0                	sub    %edx,%eax
f011b98a:	89 c3                	mov    %eax,%ebx
f011b98c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b993:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b998:	0f b6 c0             	movzbl %al,%eax
f011b99b:	c1 e0 04             	shl    $0x4,%eax
f011b99e:	89 c2                	mov    %eax,%edx
f011b9a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b9a3:	01 d0                	add    %edx,%eax
f011b9a5:	48                   	dec    %eax
f011b9a6:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b9a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b9ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9b1:	f7 75 84             	divl   -0x7c(%ebp)
f011b9b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b9b7:	29 d0                	sub    %edx,%eax
f011b9b9:	01 d8                	add    %ebx,%eax
f011b9bb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b9c0:	39 c1                	cmp    %eax,%ecx
f011b9c2:	74 17                	je     f011b9db <test_kmalloc_bestfit2+0x70f>
f011b9c4:	83 ec 04             	sub    $0x4,%esp
f011b9c7:	68 08 91 13 f0       	push   $0xf0139108
f011b9cc:	68 7f 02 00 00       	push   $0x27f
f011b9d1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b9d6:	e8 d5 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9db:	e8 d8 88 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b9e0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b9e3:	74 17                	je     f011b9fc <test_kmalloc_bestfit2+0x730>
f011b9e5:	83 ec 04             	sub    $0x4,%esp
f011b9e8:	68 08 8d 13 f0       	push   $0xf0138d08
f011b9ed:	68 80 02 00 00       	push   $0x280
f011b9f2:	68 ee 8c 13 f0       	push   $0xf0138cee
f011b9f7:	e8 b4 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b9fc:	e8 11 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ba01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba04:	29 c2                	sub    %eax,%edx
f011ba06:	89 d0                	mov    %edx,%eax
f011ba08:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ba0d:	74 17                	je     f011ba26 <test_kmalloc_bestfit2+0x75a>
f011ba0f:	83 ec 04             	sub    $0x4,%esp
f011ba12:	68 38 91 13 f0       	push   $0xf0139138
f011ba17:	68 81 02 00 00       	push   $0x281
f011ba1c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ba21:	e8 8a 47 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba26:	e8 e7 0b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ba2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba2e:	e8 85 88 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ba33:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ba36:	83 ec 0c             	sub    $0xc,%esp
f011ba39:	68 00 18 20 00       	push   $0x201800
f011ba3e:	e8 50 c1 fe ff       	call   f0107b93 <kmalloc>
f011ba43:	83 c4 10             	add    $0x10,%esp
f011ba46:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba4c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ba52:	89 c1                	mov    %eax,%ecx
f011ba54:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ba5b:	10 00 00 
f011ba5e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ba63:	0f b6 d0             	movzbl %al,%edx
f011ba66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ba6c:	01 d0                	add    %edx,%eax
f011ba6e:	48                   	dec    %eax
f011ba6f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ba75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ba7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba80:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ba86:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ba8c:	29 d0                	sub    %edx,%eax
f011ba8e:	89 c3                	mov    %eax,%ebx
f011ba90:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ba97:	10 00 00 
f011ba9a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ba9f:	0f b6 c0             	movzbl %al,%eax
f011baa2:	c1 e0 04             	shl    $0x4,%eax
f011baa5:	89 c2                	mov    %eax,%edx
f011baa7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011baad:	01 d0                	add    %edx,%eax
f011baaf:	48                   	dec    %eax
f011bab0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bab6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011babc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bac1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bac7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bacd:	29 d0                	sub    %edx,%eax
f011bacf:	01 d8                	add    %ebx,%eax
f011bad1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bad6:	39 c1                	cmp    %eax,%ecx
f011bad8:	74 17                	je     f011baf1 <test_kmalloc_bestfit2+0x825>
f011bada:	83 ec 04             	sub    $0x4,%esp
f011badd:	68 08 91 13 f0       	push   $0xf0139108
f011bae2:	68 87 02 00 00       	push   $0x287
f011bae7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011baec:	e8 bf 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011baf1:	e8 c2 87 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011baf6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011baf9:	74 17                	je     f011bb12 <test_kmalloc_bestfit2+0x846>
f011bafb:	83 ec 04             	sub    $0x4,%esp
f011bafe:	68 08 8d 13 f0       	push   $0xf0138d08
f011bb03:	68 88 02 00 00       	push   $0x288
f011bb08:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bb0d:	e8 9e 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bb12:	e8 fb 0a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bb17:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb1a:	29 c2                	sub    %eax,%edx
f011bb1c:	89 d0                	mov    %edx,%eax
f011bb1e:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bb23:	74 17                	je     f011bb3c <test_kmalloc_bestfit2+0x870>
f011bb25:	83 ec 04             	sub    $0x4,%esp
f011bb28:	68 38 91 13 f0       	push   $0xf0139138
f011bb2d:	68 89 02 00 00       	push   $0x289
f011bb32:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bb37:	e8 74 46 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb3c:	e8 d1 0a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bb41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb44:	e8 6f 87 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bb49:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bb4c:	83 ec 0c             	sub    $0xc,%esp
f011bb4f:	68 00 fc 4f 00       	push   $0x4ffc00
f011bb54:	e8 3a c0 fe ff       	call   f0107b93 <kmalloc>
f011bb59:	83 c4 10             	add    $0x10,%esp
f011bb5c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bb62:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bb68:	89 c1                	mov    %eax,%ecx
f011bb6a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bb71:	10 00 00 
f011bb74:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bb79:	0f b6 d0             	movzbl %al,%edx
f011bb7c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bb82:	01 d0                	add    %edx,%eax
f011bb84:	48                   	dec    %eax
f011bb85:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bb8b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bb91:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb96:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bb9c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bba2:	29 d0                	sub    %edx,%eax
f011bba4:	89 c3                	mov    %eax,%ebx
f011bba6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bbad:	10 00 00 
f011bbb0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bbb5:	0f b6 c0             	movzbl %al,%eax
f011bbb8:	c1 e0 04             	shl    $0x4,%eax
f011bbbb:	89 c2                	mov    %eax,%edx
f011bbbd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bbc3:	01 d0                	add    %edx,%eax
f011bbc5:	48                   	dec    %eax
f011bbc6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bbcc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bbd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbd7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bbdd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bbe3:	29 d0                	sub    %edx,%eax
f011bbe5:	01 d8                	add    %ebx,%eax
f011bbe7:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bbec:	39 c1                	cmp    %eax,%ecx
f011bbee:	74 17                	je     f011bc07 <test_kmalloc_bestfit2+0x93b>
f011bbf0:	83 ec 04             	sub    $0x4,%esp
f011bbf3:	68 08 91 13 f0       	push   $0xf0139108
f011bbf8:	68 8f 02 00 00       	push   $0x28f
f011bbfd:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bc02:	e8 a9 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc07:	e8 ac 86 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bc0c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc0f:	74 17                	je     f011bc28 <test_kmalloc_bestfit2+0x95c>
f011bc11:	83 ec 04             	sub    $0x4,%esp
f011bc14:	68 08 8d 13 f0       	push   $0xf0138d08
f011bc19:	68 90 02 00 00       	push   $0x290
f011bc1e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bc23:	e8 88 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bc28:	e8 e5 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bc2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc30:	29 c2                	sub    %eax,%edx
f011bc32:	89 d0                	mov    %edx,%eax
f011bc34:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bc39:	74 17                	je     f011bc52 <test_kmalloc_bestfit2+0x986>
f011bc3b:	83 ec 04             	sub    $0x4,%esp
f011bc3e:	68 38 91 13 f0       	push   $0xf0139138
f011bc43:	68 91 02 00 00       	push   $0x291
f011bc48:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bc4d:	e8 5e 45 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc52:	e8 bb 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bc57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc5a:	e8 59 86 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bc5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011bc62:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bc68:	83 ec 0c             	sub    $0xc,%esp
f011bc6b:	50                   	push   %eax
f011bc6c:	e8 3c bf fe ff       	call   f0107bad <kfree>
f011bc71:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc74:	e8 3f 86 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bc79:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc7c:	74 17                	je     f011bc95 <test_kmalloc_bestfit2+0x9c9>
f011bc7e:	83 ec 04             	sub    $0x4,%esp
f011bc81:	68 08 8d 13 f0       	push   $0xf0138d08
f011bc86:	68 97 02 00 00       	push   $0x297
f011bc8b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bc90:	e8 1b 45 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011bc95:	e8 78 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bc9a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bc9d:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bca2:	74 17                	je     f011bcbb <test_kmalloc_bestfit2+0x9ef>
f011bca4:	83 ec 04             	sub    $0x4,%esp
f011bca7:	68 bc 8f 13 f0       	push   $0xf0138fbc
f011bcac:	68 98 02 00 00       	push   $0x298
f011bcb1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bcb6:	e8 f5 44 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bcbb:	e8 52 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bcc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcc3:	e8 f0 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bcc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011bccb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bcd1:	83 ec 0c             	sub    $0xc,%esp
f011bcd4:	50                   	push   %eax
f011bcd5:	e8 d3 be fe ff       	call   f0107bad <kfree>
f011bcda:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcdd:	e8 d6 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bce2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bce5:	74 17                	je     f011bcfe <test_kmalloc_bestfit2+0xa32>
f011bce7:	83 ec 04             	sub    $0x4,%esp
f011bcea:	68 08 8d 13 f0       	push   $0xf0138d08
f011bcef:	68 9e 02 00 00       	push   $0x29e
f011bcf4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bcf9:	e8 b2 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bcfe:	e8 0f 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bd03:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bd06:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd0b:	74 17                	je     f011bd24 <test_kmalloc_bestfit2+0xa58>
f011bd0d:	83 ec 04             	sub    $0x4,%esp
f011bd10:	68 e8 91 13 f0       	push   $0xf01391e8
f011bd15:	68 9f 02 00 00       	push   $0x29f
f011bd1a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bd1f:	e8 8c 44 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd24:	e8 e9 08 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bd29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd2c:	e8 87 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bd31:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011bd34:	83 ec 0c             	sub    $0xc,%esp
f011bd37:	68 00 fc 1f 00       	push   $0x1ffc00
f011bd3c:	e8 52 be fe ff       	call   f0107b93 <kmalloc>
f011bd41:	83 c4 10             	add    $0x10,%esp
f011bd44:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd4a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bd50:	89 c1                	mov    %eax,%ecx
f011bd52:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bd59:	10 00 00 
f011bd5c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bd61:	0f b6 d0             	movzbl %al,%edx
f011bd64:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bd6a:	01 d0                	add    %edx,%eax
f011bd6c:	48                   	dec    %eax
f011bd6d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bd73:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd79:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bd84:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd8a:	29 d0                	sub    %edx,%eax
f011bd8c:	89 c3                	mov    %eax,%ebx
f011bd8e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bd95:	10 00 00 
f011bd98:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bd9d:	0f b6 c0             	movzbl %al,%eax
f011bda0:	c1 e0 04             	shl    $0x4,%eax
f011bda3:	89 c2                	mov    %eax,%edx
f011bda5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bdab:	01 d0                	add    %edx,%eax
f011bdad:	48                   	dec    %eax
f011bdae:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bdb4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bdba:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdbf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bdc5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bdcb:	29 d0                	sub    %edx,%eax
f011bdcd:	01 d8                	add    %ebx,%eax
f011bdcf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bdd4:	39 c1                	cmp    %eax,%ecx
f011bdd6:	74 17                	je     f011bdef <test_kmalloc_bestfit2+0xb23>
f011bdd8:	83 ec 04             	sub    $0x4,%esp
f011bddb:	68 08 91 13 f0       	push   $0xf0139108
f011bde0:	68 a5 02 00 00       	push   $0x2a5
f011bde5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bdea:	e8 c1 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdef:	e8 c4 84 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bdf4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bdf7:	74 17                	je     f011be10 <test_kmalloc_bestfit2+0xb44>
f011bdf9:	83 ec 04             	sub    $0x4,%esp
f011bdfc:	68 08 8d 13 f0       	push   $0xf0138d08
f011be01:	68 a6 02 00 00       	push   $0x2a6
f011be06:	68 ee 8c 13 f0       	push   $0xf0138cee
f011be0b:	e8 a0 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011be10:	e8 fd 07 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011be15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011be18:	29 c2                	sub    %eax,%edx
f011be1a:	89 d0                	mov    %edx,%eax
f011be1c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011be21:	74 17                	je     f011be3a <test_kmalloc_bestfit2+0xb6e>
f011be23:	83 ec 04             	sub    $0x4,%esp
f011be26:	68 26 92 13 f0       	push   $0xf0139226
f011be2b:	68 a7 02 00 00       	push   $0x2a7
f011be30:	68 ee 8c 13 f0       	push   $0xf0138cee
f011be35:	e8 76 43 fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011be3a:	e8 d3 07 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011be3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be42:	e8 71 84 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011be47:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011be4a:	83 ec 0c             	sub    $0xc,%esp
f011be4d:	68 00 18 00 00       	push   $0x1800
f011be52:	e8 3c bd fe ff       	call   f0107b93 <kmalloc>
f011be57:	83 c4 10             	add    $0x10,%esp
f011be5a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be60:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011be66:	89 c1                	mov    %eax,%ecx
f011be68:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011be6f:	10 00 00 
f011be72:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011be77:	0f b6 d0             	movzbl %al,%edx
f011be7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011be80:	01 d0                	add    %edx,%eax
f011be82:	48                   	dec    %eax
f011be83:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011be89:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011be8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011be94:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011be9a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bea0:	29 d0                	sub    %edx,%eax
f011bea2:	89 c3                	mov    %eax,%ebx
f011bea4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011beab:	10 00 00 
f011beae:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011beb3:	0f b6 c0             	movzbl %al,%eax
f011beb6:	c1 e0 04             	shl    $0x4,%eax
f011beb9:	89 c2                	mov    %eax,%edx
f011bebb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bec1:	01 d0                	add    %edx,%eax
f011bec3:	48                   	dec    %eax
f011bec4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011beca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bed0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bed5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bedb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bee1:	29 d0                	sub    %edx,%eax
f011bee3:	01 d8                	add    %ebx,%eax
f011bee5:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011beea:	39 c1                	cmp    %eax,%ecx
f011beec:	74 17                	je     f011bf05 <test_kmalloc_bestfit2+0xc39>
f011beee:	83 ec 04             	sub    $0x4,%esp
f011bef1:	68 08 91 13 f0       	push   $0xf0139108
f011bef6:	68 ad 02 00 00       	push   $0x2ad
f011befb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bf00:	e8 ab 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf05:	e8 ae 83 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bf0a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf0d:	74 17                	je     f011bf26 <test_kmalloc_bestfit2+0xc5a>
f011bf0f:	83 ec 04             	sub    $0x4,%esp
f011bf12:	68 08 8d 13 f0       	push   $0xf0138d08
f011bf17:	68 ae 02 00 00       	push   $0x2ae
f011bf1c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bf21:	e8 8a 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bf26:	e8 e7 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bf2b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bf2e:	29 c2                	sub    %eax,%edx
f011bf30:	89 d0                	mov    %edx,%eax
f011bf32:	83 f8 02             	cmp    $0x2,%eax
f011bf35:	74 17                	je     f011bf4e <test_kmalloc_bestfit2+0xc82>
f011bf37:	83 ec 04             	sub    $0x4,%esp
f011bf3a:	68 26 92 13 f0       	push   $0xf0139226
f011bf3f:	68 af 02 00 00       	push   $0x2af
f011bf44:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bf49:	e8 62 42 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bf4e:	e8 bf 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bf53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf56:	e8 5d 83 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bf5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011bf5e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bf64:	83 ec 0c             	sub    $0xc,%esp
f011bf67:	50                   	push   %eax
f011bf68:	e8 40 bc fe ff       	call   f0107bad <kfree>
f011bf6d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf70:	e8 43 83 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bf75:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf78:	74 17                	je     f011bf91 <test_kmalloc_bestfit2+0xcc5>
f011bf7a:	83 ec 04             	sub    $0x4,%esp
f011bf7d:	68 08 8d 13 f0       	push   $0xf0138d08
f011bf82:	68 b5 02 00 00       	push   $0x2b5
f011bf87:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bf8c:	e8 1f 42 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bf91:	e8 7c 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bf96:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bf99:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bf9e:	74 17                	je     f011bfb7 <test_kmalloc_bestfit2+0xceb>
f011bfa0:	83 ec 04             	sub    $0x4,%esp
f011bfa3:	68 e8 91 13 f0       	push   $0xf01391e8
f011bfa8:	68 b6 02 00 00       	push   $0x2b6
f011bfad:	68 ee 8c 13 f0       	push   $0xf0138cee
f011bfb2:	e8 f9 41 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bfb7:	e8 56 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bfbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfbf:	e8 f4 82 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bfc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011bfc7:	83 ec 0c             	sub    $0xc,%esp
f011bfca:	68 00 fc 2f 00       	push   $0x2ffc00
f011bfcf:	e8 bf bb fe ff       	call   f0107b93 <kmalloc>
f011bfd4:	83 c4 10             	add    $0x10,%esp
f011bfd7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bfdd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bfe3:	89 c1                	mov    %eax,%ecx
f011bfe5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bfec:	10 00 00 
f011bfef:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bff4:	0f b6 d0             	movzbl %al,%edx
f011bff7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bffd:	01 d0                	add    %edx,%eax
f011bfff:	48                   	dec    %eax
f011c000:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c006:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c00c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c011:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c017:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c01d:	29 d0                	sub    %edx,%eax
f011c01f:	89 c3                	mov    %eax,%ebx
f011c021:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c028:	10 00 00 
f011c02b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c030:	0f b6 c0             	movzbl %al,%eax
f011c033:	c1 e0 04             	shl    $0x4,%eax
f011c036:	89 c2                	mov    %eax,%edx
f011c038:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c03e:	01 d0                	add    %edx,%eax
f011c040:	48                   	dec    %eax
f011c041:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c047:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c04d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c052:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c058:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c05e:	29 d0                	sub    %edx,%eax
f011c060:	01 d8                	add    %ebx,%eax
f011c062:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c067:	39 c1                	cmp    %eax,%ecx
f011c069:	74 17                	je     f011c082 <test_kmalloc_bestfit2+0xdb6>
f011c06b:	83 ec 04             	sub    $0x4,%esp
f011c06e:	68 08 91 13 f0       	push   $0xf0139108
f011c073:	68 bc 02 00 00       	push   $0x2bc
f011c078:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c07d:	e8 2e 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c082:	e8 31 82 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c087:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c08a:	74 17                	je     f011c0a3 <test_kmalloc_bestfit2+0xdd7>
f011c08c:	83 ec 04             	sub    $0x4,%esp
f011c08f:	68 08 8d 13 f0       	push   $0xf0138d08
f011c094:	68 bd 02 00 00       	push   $0x2bd
f011c099:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c09e:	e8 0d 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0a3:	e8 6a 05 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c0a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c0ab:	29 c2                	sub    %eax,%edx
f011c0ad:	89 d0                	mov    %edx,%eax
f011c0af:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c0b4:	74 17                	je     f011c0cd <test_kmalloc_bestfit2+0xe01>
f011c0b6:	83 ec 04             	sub    $0x4,%esp
f011c0b9:	68 e8 91 13 f0       	push   $0xf01391e8
f011c0be:	68 be 02 00 00       	push   $0x2be
f011c0c3:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c0c8:	e8 e3 40 fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0cd:	e8 40 05 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c0d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0d5:	e8 de 81 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c0da:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c0dd:	83 ec 0c             	sub    $0xc,%esp
f011c0e0:	68 00 fc 3f 00       	push   $0x3ffc00
f011c0e5:	e8 a9 ba fe ff       	call   f0107b93 <kmalloc>
f011c0ea:	83 c4 10             	add    $0x10,%esp
f011c0ed:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c0f3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c0f9:	89 c1                	mov    %eax,%ecx
f011c0fb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c102:	10 00 00 
f011c105:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c10a:	0f b6 d0             	movzbl %al,%edx
f011c10d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c113:	01 d0                	add    %edx,%eax
f011c115:	48                   	dec    %eax
f011c116:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c11c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c122:	ba 00 00 00 00       	mov    $0x0,%edx
f011c127:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c12d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c133:	29 d0                	sub    %edx,%eax
f011c135:	89 c3                	mov    %eax,%ebx
f011c137:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c13e:	10 00 00 
f011c141:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c146:	0f b6 c0             	movzbl %al,%eax
f011c149:	c1 e0 04             	shl    $0x4,%eax
f011c14c:	89 c2                	mov    %eax,%edx
f011c14e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c154:	01 d0                	add    %edx,%eax
f011c156:	48                   	dec    %eax
f011c157:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c15d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c163:	ba 00 00 00 00       	mov    $0x0,%edx
f011c168:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c16e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c174:	29 d0                	sub    %edx,%eax
f011c176:	01 d8                	add    %ebx,%eax
f011c178:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c17d:	39 c1                	cmp    %eax,%ecx
f011c17f:	74 17                	je     f011c198 <test_kmalloc_bestfit2+0xecc>
f011c181:	83 ec 04             	sub    $0x4,%esp
f011c184:	68 08 91 13 f0       	push   $0xf0139108
f011c189:	68 c4 02 00 00       	push   $0x2c4
f011c18e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c193:	e8 18 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c198:	e8 1b 81 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c19d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1a0:	74 17                	je     f011c1b9 <test_kmalloc_bestfit2+0xeed>
f011c1a2:	83 ec 04             	sub    $0x4,%esp
f011c1a5:	68 08 8d 13 f0       	push   $0xf0138d08
f011c1aa:	68 c5 02 00 00       	push   $0x2c5
f011c1af:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c1b4:	e8 f7 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c1b9:	e8 54 04 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c1be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c1c1:	29 c2                	sub    %eax,%edx
f011c1c3:	89 d0                	mov    %edx,%eax
f011c1c5:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c1ca:	74 17                	je     f011c1e3 <test_kmalloc_bestfit2+0xf17>
f011c1cc:	83 ec 04             	sub    $0x4,%esp
f011c1cf:	68 e8 91 13 f0       	push   $0xf01391e8
f011c1d4:	68 c6 02 00 00       	push   $0x2c6
f011c1d9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c1de:	e8 cd 3f fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c1e3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c1ea:	10 00 00 
f011c1ed:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c1f2:	0f b6 d0             	movzbl %al,%edx
f011c1f5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c1fb:	01 d0                	add    %edx,%eax
f011c1fd:	48                   	dec    %eax
f011c1fe:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c204:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c20a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c20f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c215:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c21b:	29 d0                	sub    %edx,%eax
f011c21d:	89 c1                	mov    %eax,%ecx
f011c21f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c226:	10 00 00 
f011c229:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c22e:	0f b6 c0             	movzbl %al,%eax
f011c231:	c1 e0 04             	shl    $0x4,%eax
f011c234:	89 c2                	mov    %eax,%edx
f011c236:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c23c:	01 d0                	add    %edx,%eax
f011c23e:	48                   	dec    %eax
f011c23f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c245:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c24b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c250:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c256:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c25c:	29 d0                	sub    %edx,%eax
f011c25e:	01 c8                	add    %ecx,%eax
f011c260:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c265:	29 c2                	sub    %eax,%edx
f011c267:	89 d0                	mov    %edx,%eax
f011c269:	83 ec 0c             	sub    $0xc,%esp
f011c26c:	50                   	push   %eax
f011c26d:	e8 21 b9 fe ff       	call   f0107b93 <kmalloc>
f011c272:	83 c4 10             	add    $0x10,%esp
f011c275:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c27b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c281:	85 c0                	test   %eax,%eax
f011c283:	74 17                	je     f011c29c <test_kmalloc_bestfit2+0xfd0>
f011c285:	83 ec 04             	sub    $0x4,%esp
f011c288:	68 38 92 13 f0       	push   $0xf0139238
f011c28d:	68 ce 02 00 00       	push   $0x2ce
f011c292:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c297:	e8 14 3f fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c29c:	83 ec 0c             	sub    $0xc,%esp
f011c29f:	68 9c 92 13 f0       	push   $0xf013929c
f011c2a4:	e8 88 4b fe ff       	call   f0100e31 <cprintf>
f011c2a9:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c2ac:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c2b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c2b4:	5b                   	pop    %ebx
f011c2b5:	5f                   	pop    %edi
f011c2b6:	5d                   	pop    %ebp
f011c2b7:	c3                   	ret    

f011c2b8 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c2b8:	55                   	push   %ebp
f011c2b9:	89 e5                	mov    %esp,%ebp
f011c2bb:	57                   	push   %edi
f011c2bc:	53                   	push   %ebx
f011c2bd:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c2c3:	83 ec 0c             	sub    $0xc,%esp
f011c2c6:	68 30 8c 13 f0       	push   $0xf0138c30
f011c2cb:	e8 61 4b fe ff       	call   f0100e31 <cprintf>
f011c2d0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c2d3:	83 ec 0c             	sub    $0xc,%esp
f011c2d6:	68 60 8c 13 f0       	push   $0xf0138c60
f011c2db:	e8 51 4b fe ff       	call   f0100e31 <cprintf>
f011c2e0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c2e3:	83 ec 0c             	sub    $0xc,%esp
f011c2e6:	68 30 8c 13 f0       	push   $0xf0138c30
f011c2eb:	e8 41 4b fe ff       	call   f0100e31 <cprintf>
f011c2f0:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c2f3:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c2f9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c2fe:	b8 00 00 00 00       	mov    $0x0,%eax
f011c303:	89 d7                	mov    %edx,%edi
f011c305:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c307:	e8 06 03 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c30c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c30f:	e8 a4 7f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c314:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c317:	83 ec 0c             	sub    $0xc,%esp
f011c31a:	68 00 fc 0f 00       	push   $0xffc00
f011c31f:	e8 6f b8 fe ff       	call   f0107b93 <kmalloc>
f011c324:	83 c4 10             	add    $0x10,%esp
f011c327:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c32d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c333:	89 c1                	mov    %eax,%ecx
f011c335:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c33c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c341:	0f b6 d0             	movzbl %al,%edx
f011c344:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c347:	01 d0                	add    %edx,%eax
f011c349:	48                   	dec    %eax
f011c34a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c34d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c350:	ba 00 00 00 00       	mov    $0x0,%edx
f011c355:	f7 75 ec             	divl   -0x14(%ebp)
f011c358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c35b:	29 d0                	sub    %edx,%eax
f011c35d:	89 c3                	mov    %eax,%ebx
f011c35f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c366:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c36b:	0f b6 c0             	movzbl %al,%eax
f011c36e:	c1 e0 04             	shl    $0x4,%eax
f011c371:	89 c2                	mov    %eax,%edx
f011c373:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c376:	01 d0                	add    %edx,%eax
f011c378:	48                   	dec    %eax
f011c379:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c37c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c37f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c384:	f7 75 e4             	divl   -0x1c(%ebp)
f011c387:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c38a:	29 d0                	sub    %edx,%eax
f011c38c:	01 d8                	add    %ebx,%eax
f011c38e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c393:	39 c1                	cmp    %eax,%ecx
f011c395:	74 17                	je     f011c3ae <test_kmalloc_firstfit1+0xf6>
f011c397:	83 ec 04             	sub    $0x4,%esp
f011c39a:	68 08 91 13 f0       	push   $0xf0139108
f011c39f:	68 e6 02 00 00       	push   $0x2e6
f011c3a4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c3a9:	e8 02 3e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3ae:	e8 05 7f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c3b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3b6:	74 17                	je     f011c3cf <test_kmalloc_firstfit1+0x117>
f011c3b8:	83 ec 04             	sub    $0x4,%esp
f011c3bb:	68 08 8d 13 f0       	push   $0xf0138d08
f011c3c0:	68 e7 02 00 00       	push   $0x2e7
f011c3c5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c3ca:	e8 e1 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c3cf:	e8 3e 02 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c3d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c3d7:	29 c2                	sub    %eax,%edx
f011c3d9:	89 d0                	mov    %edx,%eax
f011c3db:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c3e0:	74 17                	je     f011c3f9 <test_kmalloc_firstfit1+0x141>
f011c3e2:	83 ec 04             	sub    $0x4,%esp
f011c3e5:	68 38 91 13 f0       	push   $0xf0139138
f011c3ea:	68 e8 02 00 00       	push   $0x2e8
f011c3ef:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c3f4:	e8 b7 3d fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3f9:	e8 14 02 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c3fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c401:	e8 b2 7e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c406:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c409:	83 ec 0c             	sub    $0xc,%esp
f011c40c:	68 00 fc 0f 00       	push   $0xffc00
f011c411:	e8 7d b7 fe ff       	call   f0107b93 <kmalloc>
f011c416:	83 c4 10             	add    $0x10,%esp
f011c419:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c41f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c425:	89 c1                	mov    %eax,%ecx
f011c427:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c42e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c433:	0f b6 d0             	movzbl %al,%edx
f011c436:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c439:	01 d0                	add    %edx,%eax
f011c43b:	48                   	dec    %eax
f011c43c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c43f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c442:	ba 00 00 00 00       	mov    $0x0,%edx
f011c447:	f7 75 dc             	divl   -0x24(%ebp)
f011c44a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c44d:	29 d0                	sub    %edx,%eax
f011c44f:	89 c3                	mov    %eax,%ebx
f011c451:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c458:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c45d:	0f b6 c0             	movzbl %al,%eax
f011c460:	c1 e0 04             	shl    $0x4,%eax
f011c463:	89 c2                	mov    %eax,%edx
f011c465:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c468:	01 d0                	add    %edx,%eax
f011c46a:	48                   	dec    %eax
f011c46b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c46e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c471:	ba 00 00 00 00       	mov    $0x0,%edx
f011c476:	f7 75 d4             	divl   -0x2c(%ebp)
f011c479:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c47c:	29 d0                	sub    %edx,%eax
f011c47e:	01 d8                	add    %ebx,%eax
f011c480:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c485:	39 c1                	cmp    %eax,%ecx
f011c487:	74 17                	je     f011c4a0 <test_kmalloc_firstfit1+0x1e8>
f011c489:	83 ec 04             	sub    $0x4,%esp
f011c48c:	68 08 91 13 f0       	push   $0xf0139108
f011c491:	68 ee 02 00 00       	push   $0x2ee
f011c496:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c49b:	e8 10 3d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4a0:	e8 13 7e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c4a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4a8:	74 17                	je     f011c4c1 <test_kmalloc_firstfit1+0x209>
f011c4aa:	83 ec 04             	sub    $0x4,%esp
f011c4ad:	68 08 8d 13 f0       	push   $0xf0138d08
f011c4b2:	68 ef 02 00 00       	push   $0x2ef
f011c4b7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c4bc:	e8 ef 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c4c1:	e8 4c 01 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c4c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c4c9:	29 c2                	sub    %eax,%edx
f011c4cb:	89 d0                	mov    %edx,%eax
f011c4cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c4d2:	74 17                	je     f011c4eb <test_kmalloc_firstfit1+0x233>
f011c4d4:	83 ec 04             	sub    $0x4,%esp
f011c4d7:	68 38 91 13 f0       	push   $0xf0139138
f011c4dc:	68 f0 02 00 00       	push   $0x2f0
f011c4e1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c4e6:	e8 c5 3c fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4eb:	e8 22 01 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4f3:	e8 c0 7d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c4f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c4fb:	83 ec 0c             	sub    $0xc,%esp
f011c4fe:	68 00 fc 0f 00       	push   $0xffc00
f011c503:	e8 8b b6 fe ff       	call   f0107b93 <kmalloc>
f011c508:	83 c4 10             	add    $0x10,%esp
f011c50b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c511:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c517:	89 c1                	mov    %eax,%ecx
f011c519:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c520:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c525:	0f b6 d0             	movzbl %al,%edx
f011c528:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c52b:	01 d0                	add    %edx,%eax
f011c52d:	48                   	dec    %eax
f011c52e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c531:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c534:	ba 00 00 00 00       	mov    $0x0,%edx
f011c539:	f7 75 cc             	divl   -0x34(%ebp)
f011c53c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c53f:	29 d0                	sub    %edx,%eax
f011c541:	89 c3                	mov    %eax,%ebx
f011c543:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c54a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c54f:	0f b6 c0             	movzbl %al,%eax
f011c552:	c1 e0 04             	shl    $0x4,%eax
f011c555:	89 c2                	mov    %eax,%edx
f011c557:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c55a:	01 d0                	add    %edx,%eax
f011c55c:	48                   	dec    %eax
f011c55d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c560:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c563:	ba 00 00 00 00       	mov    $0x0,%edx
f011c568:	f7 75 c4             	divl   -0x3c(%ebp)
f011c56b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c56e:	29 d0                	sub    %edx,%eax
f011c570:	01 d8                	add    %ebx,%eax
f011c572:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c577:	39 c1                	cmp    %eax,%ecx
f011c579:	74 17                	je     f011c592 <test_kmalloc_firstfit1+0x2da>
f011c57b:	83 ec 04             	sub    $0x4,%esp
f011c57e:	68 08 91 13 f0       	push   $0xf0139108
f011c583:	68 f6 02 00 00       	push   $0x2f6
f011c588:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c58d:	e8 1e 3c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c592:	e8 21 7d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c597:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c59a:	74 17                	je     f011c5b3 <test_kmalloc_firstfit1+0x2fb>
f011c59c:	83 ec 04             	sub    $0x4,%esp
f011c59f:	68 08 8d 13 f0       	push   $0xf0138d08
f011c5a4:	68 f7 02 00 00       	push   $0x2f7
f011c5a9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c5ae:	e8 fd 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c5b3:	e8 5a 00 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c5b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5bb:	29 c2                	sub    %eax,%edx
f011c5bd:	89 d0                	mov    %edx,%eax
f011c5bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c5c4:	74 17                	je     f011c5dd <test_kmalloc_firstfit1+0x325>
f011c5c6:	83 ec 04             	sub    $0x4,%esp
f011c5c9:	68 38 91 13 f0       	push   $0xf0139138
f011c5ce:	68 f8 02 00 00       	push   $0x2f8
f011c5d3:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c5d8:	e8 d3 3b fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5dd:	e8 30 00 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c5e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5e5:	e8 ce 7c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c5ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c5ed:	83 ec 0c             	sub    $0xc,%esp
f011c5f0:	68 00 fc 0f 00       	push   $0xffc00
f011c5f5:	e8 99 b5 fe ff       	call   f0107b93 <kmalloc>
f011c5fa:	83 c4 10             	add    $0x10,%esp
f011c5fd:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c603:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c609:	89 c1                	mov    %eax,%ecx
f011c60b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c612:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c617:	0f b6 d0             	movzbl %al,%edx
f011c61a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c61d:	01 d0                	add    %edx,%eax
f011c61f:	48                   	dec    %eax
f011c620:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c623:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c626:	ba 00 00 00 00       	mov    $0x0,%edx
f011c62b:	f7 75 bc             	divl   -0x44(%ebp)
f011c62e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c631:	29 d0                	sub    %edx,%eax
f011c633:	89 c3                	mov    %eax,%ebx
f011c635:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c63c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c641:	0f b6 c0             	movzbl %al,%eax
f011c644:	c1 e0 04             	shl    $0x4,%eax
f011c647:	89 c2                	mov    %eax,%edx
f011c649:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c64c:	01 d0                	add    %edx,%eax
f011c64e:	48                   	dec    %eax
f011c64f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c652:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c655:	ba 00 00 00 00       	mov    $0x0,%edx
f011c65a:	f7 75 b4             	divl   -0x4c(%ebp)
f011c65d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c660:	29 d0                	sub    %edx,%eax
f011c662:	01 d8                	add    %ebx,%eax
f011c664:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c669:	39 c1                	cmp    %eax,%ecx
f011c66b:	74 17                	je     f011c684 <test_kmalloc_firstfit1+0x3cc>
f011c66d:	83 ec 04             	sub    $0x4,%esp
f011c670:	68 08 91 13 f0       	push   $0xf0139108
f011c675:	68 fe 02 00 00       	push   $0x2fe
f011c67a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c67f:	e8 2c 3b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c684:	e8 2f 7c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c689:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c68c:	74 17                	je     f011c6a5 <test_kmalloc_firstfit1+0x3ed>
f011c68e:	83 ec 04             	sub    $0x4,%esp
f011c691:	68 08 8d 13 f0       	push   $0xf0138d08
f011c696:	68 ff 02 00 00       	push   $0x2ff
f011c69b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c6a0:	e8 0b 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c6a5:	e8 68 ff fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c6aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6ad:	29 c2                	sub    %eax,%edx
f011c6af:	89 d0                	mov    %edx,%eax
f011c6b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c6b6:	74 17                	je     f011c6cf <test_kmalloc_firstfit1+0x417>
f011c6b8:	83 ec 04             	sub    $0x4,%esp
f011c6bb:	68 38 91 13 f0       	push   $0xf0139138
f011c6c0:	68 00 03 00 00       	push   $0x300
f011c6c5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c6ca:	e8 e1 3a fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6cf:	e8 3e ff fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c6d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6d7:	e8 dc 7b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c6dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c6df:	83 ec 0c             	sub    $0xc,%esp
f011c6e2:	68 00 fc 1f 00       	push   $0x1ffc00
f011c6e7:	e8 a7 b4 fe ff       	call   f0107b93 <kmalloc>
f011c6ec:	83 c4 10             	add    $0x10,%esp
f011c6ef:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c6f5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c6fb:	89 c1                	mov    %eax,%ecx
f011c6fd:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c704:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c709:	0f b6 d0             	movzbl %al,%edx
f011c70c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c70f:	01 d0                	add    %edx,%eax
f011c711:	48                   	dec    %eax
f011c712:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c715:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c718:	ba 00 00 00 00       	mov    $0x0,%edx
f011c71d:	f7 75 ac             	divl   -0x54(%ebp)
f011c720:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c723:	29 d0                	sub    %edx,%eax
f011c725:	89 c3                	mov    %eax,%ebx
f011c727:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c72e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c733:	0f b6 c0             	movzbl %al,%eax
f011c736:	c1 e0 04             	shl    $0x4,%eax
f011c739:	89 c2                	mov    %eax,%edx
f011c73b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c73e:	01 d0                	add    %edx,%eax
f011c740:	48                   	dec    %eax
f011c741:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c744:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c747:	ba 00 00 00 00       	mov    $0x0,%edx
f011c74c:	f7 75 a4             	divl   -0x5c(%ebp)
f011c74f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c752:	29 d0                	sub    %edx,%eax
f011c754:	01 d8                	add    %ebx,%eax
f011c756:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c75b:	39 c1                	cmp    %eax,%ecx
f011c75d:	74 17                	je     f011c776 <test_kmalloc_firstfit1+0x4be>
f011c75f:	83 ec 04             	sub    $0x4,%esp
f011c762:	68 08 91 13 f0       	push   $0xf0139108
f011c767:	68 06 03 00 00       	push   $0x306
f011c76c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c771:	e8 3a 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c776:	e8 3d 7b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c77b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c77e:	74 17                	je     f011c797 <test_kmalloc_firstfit1+0x4df>
f011c780:	83 ec 04             	sub    $0x4,%esp
f011c783:	68 08 8d 13 f0       	push   $0xf0138d08
f011c788:	68 07 03 00 00       	push   $0x307
f011c78d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c792:	e8 19 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c797:	e8 76 fe fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c79c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c79f:	29 c2                	sub    %eax,%edx
f011c7a1:	89 d0                	mov    %edx,%eax
f011c7a3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7a8:	74 17                	je     f011c7c1 <test_kmalloc_firstfit1+0x509>
f011c7aa:	83 ec 04             	sub    $0x4,%esp
f011c7ad:	68 38 91 13 f0       	push   $0xf0139138
f011c7b2:	68 08 03 00 00       	push   $0x308
f011c7b7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c7bc:	e8 ef 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7c1:	e8 4c fe fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c7c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7c9:	e8 ea 7a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c7ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c7d1:	83 ec 0c             	sub    $0xc,%esp
f011c7d4:	68 00 fc 1f 00       	push   $0x1ffc00
f011c7d9:	e8 b5 b3 fe ff       	call   f0107b93 <kmalloc>
f011c7de:	83 c4 10             	add    $0x10,%esp
f011c7e1:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c7e7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c7ed:	89 c1                	mov    %eax,%ecx
f011c7ef:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c7f6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c7fb:	0f b6 d0             	movzbl %al,%edx
f011c7fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c801:	01 d0                	add    %edx,%eax
f011c803:	48                   	dec    %eax
f011c804:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c807:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c80a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c80f:	f7 75 9c             	divl   -0x64(%ebp)
f011c812:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c815:	29 d0                	sub    %edx,%eax
f011c817:	89 c3                	mov    %eax,%ebx
f011c819:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c820:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c825:	0f b6 c0             	movzbl %al,%eax
f011c828:	c1 e0 04             	shl    $0x4,%eax
f011c82b:	89 c2                	mov    %eax,%edx
f011c82d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c830:	01 d0                	add    %edx,%eax
f011c832:	48                   	dec    %eax
f011c833:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c836:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c839:	ba 00 00 00 00       	mov    $0x0,%edx
f011c83e:	f7 75 94             	divl   -0x6c(%ebp)
f011c841:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c844:	29 d0                	sub    %edx,%eax
f011c846:	01 d8                	add    %ebx,%eax
f011c848:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c84d:	39 c1                	cmp    %eax,%ecx
f011c84f:	74 17                	je     f011c868 <test_kmalloc_firstfit1+0x5b0>
f011c851:	83 ec 04             	sub    $0x4,%esp
f011c854:	68 08 91 13 f0       	push   $0xf0139108
f011c859:	68 0e 03 00 00       	push   $0x30e
f011c85e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c863:	e8 48 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c868:	e8 4b 7a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c86d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c870:	74 17                	je     f011c889 <test_kmalloc_firstfit1+0x5d1>
f011c872:	83 ec 04             	sub    $0x4,%esp
f011c875:	68 08 8d 13 f0       	push   $0xf0138d08
f011c87a:	68 0f 03 00 00       	push   $0x30f
f011c87f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c884:	e8 27 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c889:	e8 84 fd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c88e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c891:	29 c2                	sub    %eax,%edx
f011c893:	89 d0                	mov    %edx,%eax
f011c895:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c89a:	74 17                	je     f011c8b3 <test_kmalloc_firstfit1+0x5fb>
f011c89c:	83 ec 04             	sub    $0x4,%esp
f011c89f:	68 38 91 13 f0       	push   $0xf0139138
f011c8a4:	68 10 03 00 00       	push   $0x310
f011c8a9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c8ae:	e8 fd 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8b3:	e8 5a fd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8bb:	e8 f8 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c8c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c8c3:	83 ec 0c             	sub    $0xc,%esp
f011c8c6:	68 00 fc 2f 00       	push   $0x2ffc00
f011c8cb:	e8 c3 b2 fe ff       	call   f0107b93 <kmalloc>
f011c8d0:	83 c4 10             	add    $0x10,%esp
f011c8d3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c8d9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c8df:	89 c1                	mov    %eax,%ecx
f011c8e1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c8e8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c8ed:	0f b6 d0             	movzbl %al,%edx
f011c8f0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c8f3:	01 d0                	add    %edx,%eax
f011c8f5:	48                   	dec    %eax
f011c8f6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c8f9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c8fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c901:	f7 75 8c             	divl   -0x74(%ebp)
f011c904:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c907:	29 d0                	sub    %edx,%eax
f011c909:	89 c3                	mov    %eax,%ebx
f011c90b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c912:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c917:	0f b6 c0             	movzbl %al,%eax
f011c91a:	c1 e0 04             	shl    $0x4,%eax
f011c91d:	89 c2                	mov    %eax,%edx
f011c91f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c922:	01 d0                	add    %edx,%eax
f011c924:	48                   	dec    %eax
f011c925:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c928:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c92b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c930:	f7 75 84             	divl   -0x7c(%ebp)
f011c933:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c936:	29 d0                	sub    %edx,%eax
f011c938:	01 d8                	add    %ebx,%eax
f011c93a:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c93f:	39 c1                	cmp    %eax,%ecx
f011c941:	74 17                	je     f011c95a <test_kmalloc_firstfit1+0x6a2>
f011c943:	83 ec 04             	sub    $0x4,%esp
f011c946:	68 08 91 13 f0       	push   $0xf0139108
f011c94b:	68 16 03 00 00       	push   $0x316
f011c950:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c955:	e8 56 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c95a:	e8 59 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c95f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c962:	74 17                	je     f011c97b <test_kmalloc_firstfit1+0x6c3>
f011c964:	83 ec 04             	sub    $0x4,%esp
f011c967:	68 08 8d 13 f0       	push   $0xf0138d08
f011c96c:	68 17 03 00 00       	push   $0x317
f011c971:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c976:	e8 35 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c97b:	e8 92 fc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c983:	29 c2                	sub    %eax,%edx
f011c985:	89 d0                	mov    %edx,%eax
f011c987:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c98c:	74 17                	je     f011c9a5 <test_kmalloc_firstfit1+0x6ed>
f011c98e:	83 ec 04             	sub    $0x4,%esp
f011c991:	68 38 91 13 f0       	push   $0xf0139138
f011c996:	68 18 03 00 00       	push   $0x318
f011c99b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011c9a0:	e8 0b 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9a5:	e8 68 fc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c9aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9ad:	e8 06 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c9b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c9b5:	83 ec 0c             	sub    $0xc,%esp
f011c9b8:	68 00 fc 2f 00       	push   $0x2ffc00
f011c9bd:	e8 d1 b1 fe ff       	call   f0107b93 <kmalloc>
f011c9c2:	83 c4 10             	add    $0x10,%esp
f011c9c5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c9cb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c9d1:	89 c1                	mov    %eax,%ecx
f011c9d3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c9da:	10 00 00 
f011c9dd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c9e2:	0f b6 d0             	movzbl %al,%edx
f011c9e5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c9eb:	01 d0                	add    %edx,%eax
f011c9ed:	48                   	dec    %eax
f011c9ee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c9f4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c9fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9ff:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ca05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ca0b:	29 d0                	sub    %edx,%eax
f011ca0d:	89 c3                	mov    %eax,%ebx
f011ca0f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ca16:	10 00 00 
f011ca19:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ca1e:	0f b6 c0             	movzbl %al,%eax
f011ca21:	c1 e0 04             	shl    $0x4,%eax
f011ca24:	89 c2                	mov    %eax,%edx
f011ca26:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ca2c:	01 d0                	add    %edx,%eax
f011ca2e:	48                   	dec    %eax
f011ca2f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ca35:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ca3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca40:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ca46:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ca4c:	29 d0                	sub    %edx,%eax
f011ca4e:	01 d8                	add    %ebx,%eax
f011ca50:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ca55:	39 c1                	cmp    %eax,%ecx
f011ca57:	74 17                	je     f011ca70 <test_kmalloc_firstfit1+0x7b8>
f011ca59:	83 ec 04             	sub    $0x4,%esp
f011ca5c:	68 08 91 13 f0       	push   $0xf0139108
f011ca61:	68 1e 03 00 00       	push   $0x31e
f011ca66:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ca6b:	e8 40 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca70:	e8 43 78 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ca75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca78:	74 17                	je     f011ca91 <test_kmalloc_firstfit1+0x7d9>
f011ca7a:	83 ec 04             	sub    $0x4,%esp
f011ca7d:	68 08 8d 13 f0       	push   $0xf0138d08
f011ca82:	68 1f 03 00 00       	push   $0x31f
f011ca87:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ca8c:	e8 1f 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ca91:	e8 7c fb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ca96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca99:	29 c2                	sub    %eax,%edx
f011ca9b:	89 d0                	mov    %edx,%eax
f011ca9d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011caa2:	74 17                	je     f011cabb <test_kmalloc_firstfit1+0x803>
f011caa4:	83 ec 04             	sub    $0x4,%esp
f011caa7:	68 38 91 13 f0       	push   $0xf0139138
f011caac:	68 20 03 00 00       	push   $0x320
f011cab1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cab6:	e8 f5 36 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cabb:	e8 52 fb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cac3:	e8 f0 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cacb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cad1:	83 ec 0c             	sub    $0xc,%esp
f011cad4:	50                   	push   %eax
f011cad5:	e8 d3 b0 fe ff       	call   f0107bad <kfree>
f011cada:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cadd:	e8 d6 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cae2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cae5:	74 17                	je     f011cafe <test_kmalloc_firstfit1+0x846>
f011cae7:	83 ec 04             	sub    $0x4,%esp
f011caea:	68 08 8d 13 f0       	push   $0xf0138d08
f011caef:	68 29 03 00 00       	push   $0x329
f011caf4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011caf9:	e8 b2 36 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cafe:	e8 0f fb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb03:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb06:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb0b:	74 17                	je     f011cb24 <test_kmalloc_firstfit1+0x86c>
f011cb0d:	83 ec 04             	sub    $0x4,%esp
f011cb10:	68 4b 91 13 f0       	push   $0xf013914b
f011cb15:	68 2a 03 00 00       	push   $0x32a
f011cb1a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cb1f:	e8 8c 36 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb24:	e8 e9 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb2c:	e8 87 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb31:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cb34:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cb3a:	83 ec 0c             	sub    $0xc,%esp
f011cb3d:	50                   	push   %eax
f011cb3e:	e8 6a b0 fe ff       	call   f0107bad <kfree>
f011cb43:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb46:	e8 6d 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb4b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb4e:	74 17                	je     f011cb67 <test_kmalloc_firstfit1+0x8af>
f011cb50:	83 ec 04             	sub    $0x4,%esp
f011cb53:	68 08 8d 13 f0       	push   $0xf0138d08
f011cb58:	68 30 03 00 00       	push   $0x330
f011cb5d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cb62:	e8 49 36 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cb67:	e8 a6 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb6c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb6f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb74:	74 17                	je     f011cb8d <test_kmalloc_firstfit1+0x8d5>
f011cb76:	83 ec 04             	sub    $0x4,%esp
f011cb79:	68 4b 91 13 f0       	push   $0xf013914b
f011cb7e:	68 31 03 00 00       	push   $0x331
f011cb83:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cb88:	e8 23 36 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb8d:	e8 80 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb92:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb95:	e8 1e 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cb9d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cba3:	83 ec 0c             	sub    $0xc,%esp
f011cba6:	50                   	push   %eax
f011cba7:	e8 01 b0 fe ff       	call   f0107bad <kfree>
f011cbac:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbaf:	e8 04 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cbb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbb7:	74 17                	je     f011cbd0 <test_kmalloc_firstfit1+0x918>
f011cbb9:	83 ec 04             	sub    $0x4,%esp
f011cbbc:	68 08 8d 13 f0       	push   $0xf0138d08
f011cbc1:	68 37 03 00 00       	push   $0x337
f011cbc6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cbcb:	e8 e0 35 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cbd0:	e8 3d fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cbd5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cbd8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cbdd:	74 17                	je     f011cbf6 <test_kmalloc_firstfit1+0x93e>
f011cbdf:	83 ec 04             	sub    $0x4,%esp
f011cbe2:	68 4b 91 13 f0       	push   $0xf013914b
f011cbe7:	68 38 03 00 00       	push   $0x338
f011cbec:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cbf1:	e8 ba 35 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cbf6:	e8 17 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cbfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbfe:	e8 b5 76 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cc03:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cc06:	83 ec 0c             	sub    $0xc,%esp
f011cc09:	68 00 fc 07 00       	push   $0x7fc00
f011cc0e:	e8 80 af fe ff       	call   f0107b93 <kmalloc>
f011cc13:	83 c4 10             	add    $0x10,%esp
f011cc16:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cc1c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cc22:	89 c1                	mov    %eax,%ecx
f011cc24:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cc2b:	10 00 00 
f011cc2e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cc33:	0f b6 d0             	movzbl %al,%edx
f011cc36:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cc3c:	01 d0                	add    %edx,%eax
f011cc3e:	48                   	dec    %eax
f011cc3f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cc45:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cc4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc50:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cc56:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cc5c:	29 d0                	sub    %edx,%eax
f011cc5e:	89 c3                	mov    %eax,%ebx
f011cc60:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cc67:	10 00 00 
f011cc6a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cc6f:	0f b6 c0             	movzbl %al,%eax
f011cc72:	c1 e0 04             	shl    $0x4,%eax
f011cc75:	89 c2                	mov    %eax,%edx
f011cc77:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cc7d:	01 d0                	add    %edx,%eax
f011cc7f:	48                   	dec    %eax
f011cc80:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cc86:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cc8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc91:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cc97:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cc9d:	29 d0                	sub    %edx,%eax
f011cc9f:	01 d8                	add    %ebx,%eax
f011cca1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cca6:	39 c1                	cmp    %eax,%ecx
f011cca8:	74 17                	je     f011ccc1 <test_kmalloc_firstfit1+0xa09>
f011ccaa:	83 ec 04             	sub    $0x4,%esp
f011ccad:	68 08 91 13 f0       	push   $0xf0139108
f011ccb2:	68 41 03 00 00       	push   $0x341
f011ccb7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ccbc:	e8 ef 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccc1:	e8 f2 75 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ccc6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccc9:	74 17                	je     f011cce2 <test_kmalloc_firstfit1+0xa2a>
f011cccb:	83 ec 04             	sub    $0x4,%esp
f011ccce:	68 08 8d 13 f0       	push   $0xf0138d08
f011ccd3:	68 42 03 00 00       	push   $0x342
f011ccd8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ccdd:	e8 ce 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cce2:	e8 2b f9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cce7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccea:	29 c2                	sub    %eax,%edx
f011ccec:	89 d0                	mov    %edx,%eax
f011ccee:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ccf3:	74 17                	je     f011cd0c <test_kmalloc_firstfit1+0xa54>
f011ccf5:	83 ec 04             	sub    $0x4,%esp
f011ccf8:	68 38 91 13 f0       	push   $0xf0139138
f011ccfd:	68 43 03 00 00       	push   $0x343
f011cd02:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cd07:	e8 a4 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cd0c:	e8 01 f9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cd11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd14:	e8 9f 75 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cd19:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cd1c:	83 ec 0c             	sub    $0xc,%esp
f011cd1f:	68 00 fc 0f 00       	push   $0xffc00
f011cd24:	e8 6a ae fe ff       	call   f0107b93 <kmalloc>
f011cd29:	83 c4 10             	add    $0x10,%esp
f011cd2c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cd32:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cd38:	89 c1                	mov    %eax,%ecx
f011cd3a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011cd41:	10 00 00 
f011cd44:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cd49:	0f b6 d0             	movzbl %al,%edx
f011cd4c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011cd52:	01 d0                	add    %edx,%eax
f011cd54:	48                   	dec    %eax
f011cd55:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011cd5b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cd61:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd66:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011cd6c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cd72:	29 d0                	sub    %edx,%eax
f011cd74:	89 c3                	mov    %eax,%ebx
f011cd76:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011cd7d:	10 00 00 
f011cd80:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cd85:	0f b6 c0             	movzbl %al,%eax
f011cd88:	c1 e0 04             	shl    $0x4,%eax
f011cd8b:	89 c2                	mov    %eax,%edx
f011cd8d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cd93:	01 d0                	add    %edx,%eax
f011cd95:	48                   	dec    %eax
f011cd96:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cd9c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cda2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cda7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cdad:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cdb3:	29 d0                	sub    %edx,%eax
f011cdb5:	01 d8                	add    %ebx,%eax
f011cdb7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cdbc:	39 c1                	cmp    %eax,%ecx
f011cdbe:	74 17                	je     f011cdd7 <test_kmalloc_firstfit1+0xb1f>
f011cdc0:	83 ec 04             	sub    $0x4,%esp
f011cdc3:	68 08 91 13 f0       	push   $0xf0139108
f011cdc8:	68 49 03 00 00       	push   $0x349
f011cdcd:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cdd2:	e8 d9 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdd7:	e8 dc 74 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cddc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cddf:	74 17                	je     f011cdf8 <test_kmalloc_firstfit1+0xb40>
f011cde1:	83 ec 04             	sub    $0x4,%esp
f011cde4:	68 08 8d 13 f0       	push   $0xf0138d08
f011cde9:	68 4a 03 00 00       	push   $0x34a
f011cdee:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cdf3:	e8 b8 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cdf8:	e8 15 f8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cdfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce00:	29 c2                	sub    %eax,%edx
f011ce02:	89 d0                	mov    %edx,%eax
f011ce04:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce09:	74 17                	je     f011ce22 <test_kmalloc_firstfit1+0xb6a>
f011ce0b:	83 ec 04             	sub    $0x4,%esp
f011ce0e:	68 38 91 13 f0       	push   $0xf0139138
f011ce13:	68 4b 03 00 00       	push   $0x34b
f011ce18:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ce1d:	e8 8e 33 fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ce22:	e8 eb f7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ce27:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce2a:	e8 89 74 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ce2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ce32:	83 ec 0c             	sub    $0xc,%esp
f011ce35:	68 00 fc 03 00       	push   $0x3fc00
f011ce3a:	e8 54 ad fe ff       	call   f0107b93 <kmalloc>
f011ce3f:	83 c4 10             	add    $0x10,%esp
f011ce42:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ce48:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ce4e:	89 c1                	mov    %eax,%ecx
f011ce50:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ce57:	10 00 00 
f011ce5a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ce5f:	0f b6 d0             	movzbl %al,%edx
f011ce62:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ce68:	01 d0                	add    %edx,%eax
f011ce6a:	48                   	dec    %eax
f011ce6b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ce71:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ce77:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce7c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ce82:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ce88:	29 d0                	sub    %edx,%eax
f011ce8a:	89 c3                	mov    %eax,%ebx
f011ce8c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ce93:	10 00 00 
f011ce96:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ce9b:	0f b6 c0             	movzbl %al,%eax
f011ce9e:	c1 e0 04             	shl    $0x4,%eax
f011cea1:	89 c2                	mov    %eax,%edx
f011cea3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011cea9:	01 d0                	add    %edx,%eax
f011ceab:	48                   	dec    %eax
f011ceac:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ceb2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ceb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cebd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011cec3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cec9:	29 d0                	sub    %edx,%eax
f011cecb:	01 d8                	add    %ebx,%eax
f011cecd:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011ced2:	39 c1                	cmp    %eax,%ecx
f011ced4:	74 17                	je     f011ceed <test_kmalloc_firstfit1+0xc35>
f011ced6:	83 ec 04             	sub    $0x4,%esp
f011ced9:	68 08 91 13 f0       	push   $0xf0139108
f011cede:	68 52 03 00 00       	push   $0x352
f011cee3:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cee8:	e8 c3 32 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ceed:	e8 c6 73 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cef2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cef5:	74 17                	je     f011cf0e <test_kmalloc_firstfit1+0xc56>
f011cef7:	83 ec 04             	sub    $0x4,%esp
f011cefa:	68 08 8d 13 f0       	push   $0xf0138d08
f011ceff:	68 53 03 00 00       	push   $0x353
f011cf04:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cf09:	e8 a2 32 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011cf0e:	e8 ff f6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cf13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf16:	29 c2                	sub    %eax,%edx
f011cf18:	89 d0                	mov    %edx,%eax
f011cf1a:	83 f8 40             	cmp    $0x40,%eax
f011cf1d:	74 17                	je     f011cf36 <test_kmalloc_firstfit1+0xc7e>
f011cf1f:	83 ec 04             	sub    $0x4,%esp
f011cf22:	68 38 91 13 f0       	push   $0xf0139138
f011cf27:	68 54 03 00 00       	push   $0x354
f011cf2c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cf31:	e8 7a 32 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011cf36:	e8 d7 f6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cf3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf3e:	e8 75 73 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cf43:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011cf46:	83 ec 0c             	sub    $0xc,%esp
f011cf49:	68 00 00 20 00       	push   $0x200000
f011cf4e:	e8 40 ac fe ff       	call   f0107b93 <kmalloc>
f011cf53:	83 c4 10             	add    $0x10,%esp
f011cf56:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cf5c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cf62:	89 c1                	mov    %eax,%ecx
f011cf64:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011cf6b:	10 00 00 
f011cf6e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cf73:	0f b6 d0             	movzbl %al,%edx
f011cf76:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011cf7c:	01 d0                	add    %edx,%eax
f011cf7e:	48                   	dec    %eax
f011cf7f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011cf85:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cf8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf90:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011cf96:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cf9c:	29 d0                	sub    %edx,%eax
f011cf9e:	89 c3                	mov    %eax,%ebx
f011cfa0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011cfa7:	10 00 00 
f011cfaa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cfaf:	0f b6 c0             	movzbl %al,%eax
f011cfb2:	c1 e0 04             	shl    $0x4,%eax
f011cfb5:	89 c2                	mov    %eax,%edx
f011cfb7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011cfbd:	01 d0                	add    %edx,%eax
f011cfbf:	48                   	dec    %eax
f011cfc0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011cfc6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cfcc:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfd1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011cfd7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cfdd:	29 d0                	sub    %edx,%eax
f011cfdf:	01 d8                	add    %ebx,%eax
f011cfe1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cfe6:	39 c1                	cmp    %eax,%ecx
f011cfe8:	74 17                	je     f011d001 <test_kmalloc_firstfit1+0xd49>
f011cfea:	83 ec 04             	sub    $0x4,%esp
f011cfed:	68 08 91 13 f0       	push   $0xf0139108
f011cff2:	68 5a 03 00 00       	push   $0x35a
f011cff7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011cffc:	e8 af 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d001:	e8 0c f6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d006:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d009:	29 c2                	sub    %eax,%edx
f011d00b:	89 d0                	mov    %edx,%eax
f011d00d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d012:	74 17                	je     f011d02b <test_kmalloc_firstfit1+0xd73>
f011d014:	83 ec 04             	sub    $0x4,%esp
f011d017:	68 38 91 13 f0       	push   $0xf0139138
f011d01c:	68 5b 03 00 00       	push   $0x35b
f011d021:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d026:	e8 85 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d02b:	e8 88 72 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d030:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d033:	74 17                	je     f011d04c <test_kmalloc_firstfit1+0xd94>
f011d035:	83 ec 04             	sub    $0x4,%esp
f011d038:	68 08 8d 13 f0       	push   $0xf0138d08
f011d03d:	68 5c 03 00 00       	push   $0x35c
f011d042:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d047:	e8 64 31 fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d04c:	e8 c1 f5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d051:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d054:	e8 5f 72 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d059:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d05c:	83 ec 0c             	sub    $0xc,%esp
f011d05f:	68 00 fc 3f 00       	push   $0x3ffc00
f011d064:	e8 2a ab fe ff       	call   f0107b93 <kmalloc>
f011d069:	83 c4 10             	add    $0x10,%esp
f011d06c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d072:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d078:	89 c1                	mov    %eax,%ecx
f011d07a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d081:	10 00 00 
f011d084:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d089:	0f b6 d0             	movzbl %al,%edx
f011d08c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d092:	01 d0                	add    %edx,%eax
f011d094:	48                   	dec    %eax
f011d095:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d09b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0a6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d0ac:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0b2:	29 d0                	sub    %edx,%eax
f011d0b4:	89 c3                	mov    %eax,%ebx
f011d0b6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d0bd:	10 00 00 
f011d0c0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d0c5:	0f b6 c0             	movzbl %al,%eax
f011d0c8:	c1 e0 04             	shl    $0x4,%eax
f011d0cb:	89 c2                	mov    %eax,%edx
f011d0cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d0d3:	01 d0                	add    %edx,%eax
f011d0d5:	48                   	dec    %eax
f011d0d6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d0dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d0e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0e7:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d0ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d0f3:	29 d0                	sub    %edx,%eax
f011d0f5:	01 d8                	add    %ebx,%eax
f011d0f7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d0fc:	39 c1                	cmp    %eax,%ecx
f011d0fe:	74 17                	je     f011d117 <test_kmalloc_firstfit1+0xe5f>
f011d100:	83 ec 04             	sub    $0x4,%esp
f011d103:	68 08 91 13 f0       	push   $0xf0139108
f011d108:	68 63 03 00 00       	push   $0x363
f011d10d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d112:	e8 99 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d117:	e8 9c 71 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d11c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d11f:	74 17                	je     f011d138 <test_kmalloc_firstfit1+0xe80>
f011d121:	83 ec 04             	sub    $0x4,%esp
f011d124:	68 08 8d 13 f0       	push   $0xf0138d08
f011d129:	68 64 03 00 00       	push   $0x364
f011d12e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d133:	e8 78 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d138:	e8 d5 f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d13d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d140:	29 c2                	sub    %eax,%edx
f011d142:	89 d0                	mov    %edx,%eax
f011d144:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d149:	74 17                	je     f011d162 <test_kmalloc_firstfit1+0xeaa>
f011d14b:	83 ec 04             	sub    $0x4,%esp
f011d14e:	68 38 91 13 f0       	push   $0xf0139138
f011d153:	68 65 03 00 00       	push   $0x365
f011d158:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d15d:	e8 4e 30 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d162:	e8 ab f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d167:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d16a:	e8 49 71 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d16f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d172:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d178:	83 ec 0c             	sub    $0xc,%esp
f011d17b:	50                   	push   %eax
f011d17c:	e8 2c aa fe ff       	call   f0107bad <kfree>
f011d181:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d184:	e8 2f 71 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d189:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d18c:	74 17                	je     f011d1a5 <test_kmalloc_firstfit1+0xeed>
f011d18e:	83 ec 04             	sub    $0x4,%esp
f011d191:	68 08 8d 13 f0       	push   $0xf0138d08
f011d196:	68 6e 03 00 00       	push   $0x36e
f011d19b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d1a0:	e8 0b 30 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d1a5:	e8 68 f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d1aa:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d1ad:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1b2:	74 17                	je     f011d1cb <test_kmalloc_firstfit1+0xf13>
f011d1b4:	83 ec 04             	sub    $0x4,%esp
f011d1b7:	68 4b 91 13 f0       	push   $0xf013914b
f011d1bc:	68 6f 03 00 00       	push   $0x36f
f011d1c1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d1c6:	e8 e5 2f fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d1cb:	e8 42 f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d1d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1d3:	e8 e0 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d1d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d1db:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d1e1:	83 ec 0c             	sub    $0xc,%esp
f011d1e4:	50                   	push   %eax
f011d1e5:	e8 c3 a9 fe ff       	call   f0107bad <kfree>
f011d1ea:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1ed:	e8 c6 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d1f2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1f5:	74 17                	je     f011d20e <test_kmalloc_firstfit1+0xf56>
f011d1f7:	83 ec 04             	sub    $0x4,%esp
f011d1fa:	68 08 8d 13 f0       	push   $0xf0138d08
f011d1ff:	68 75 03 00 00       	push   $0x375
f011d204:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d209:	e8 a2 2f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d20e:	e8 ff f3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d213:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d216:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d21b:	74 17                	je     f011d234 <test_kmalloc_firstfit1+0xf7c>
f011d21d:	83 ec 04             	sub    $0x4,%esp
f011d220:	68 4b 91 13 f0       	push   $0xf013914b
f011d225:	68 76 03 00 00       	push   $0x376
f011d22a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d22f:	e8 7c 2f fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d234:	e8 d9 f3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d239:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d23c:	e8 77 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d241:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d244:	83 ec 0c             	sub    $0xc,%esp
f011d247:	68 00 00 10 00       	push   $0x100000
f011d24c:	e8 42 a9 fe ff       	call   f0107b93 <kmalloc>
f011d251:	83 c4 10             	add    $0x10,%esp
f011d254:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d25a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d260:	89 c1                	mov    %eax,%ecx
f011d262:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d269:	10 00 00 
f011d26c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d271:	0f b6 d0             	movzbl %al,%edx
f011d274:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d27a:	01 d0                	add    %edx,%eax
f011d27c:	48                   	dec    %eax
f011d27d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d283:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d289:	ba 00 00 00 00       	mov    $0x0,%edx
f011d28e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d294:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d29a:	29 d0                	sub    %edx,%eax
f011d29c:	89 c3                	mov    %eax,%ebx
f011d29e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d2a5:	10 00 00 
f011d2a8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d2ad:	0f b6 c0             	movzbl %al,%eax
f011d2b0:	c1 e0 04             	shl    $0x4,%eax
f011d2b3:	89 c2                	mov    %eax,%edx
f011d2b5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d2bb:	01 d0                	add    %edx,%eax
f011d2bd:	48                   	dec    %eax
f011d2be:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d2c4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d2ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2cf:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d2d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d2db:	29 d0                	sub    %edx,%eax
f011d2dd:	01 d8                	add    %ebx,%eax
f011d2df:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d2e4:	39 c1                	cmp    %eax,%ecx
f011d2e6:	74 17                	je     f011d2ff <test_kmalloc_firstfit1+0x1047>
f011d2e8:	83 ec 04             	sub    $0x4,%esp
f011d2eb:	68 08 91 13 f0       	push   $0xf0139108
f011d2f0:	68 80 03 00 00       	push   $0x380
f011d2f5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d2fa:	e8 b1 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2ff:	e8 b4 6f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d304:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d307:	74 17                	je     f011d320 <test_kmalloc_firstfit1+0x1068>
f011d309:	83 ec 04             	sub    $0x4,%esp
f011d30c:	68 08 8d 13 f0       	push   $0xf0138d08
f011d311:	68 81 03 00 00       	push   $0x381
f011d316:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d31b:	e8 90 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d320:	e8 ed f2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d325:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d328:	29 c2                	sub    %eax,%edx
f011d32a:	89 d0                	mov    %edx,%eax
f011d32c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d331:	74 17                	je     f011d34a <test_kmalloc_firstfit1+0x1092>
f011d333:	83 ec 04             	sub    $0x4,%esp
f011d336:	68 38 91 13 f0       	push   $0xf0139138
f011d33b:	68 82 03 00 00       	push   $0x382
f011d340:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d345:	e8 66 2e fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d34a:	83 ec 0c             	sub    $0xc,%esp
f011d34d:	68 e4 92 13 f0       	push   $0xf01392e4
f011d352:	e8 da 3a fe ff       	call   f0100e31 <cprintf>
f011d357:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d35a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d35f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d362:	5b                   	pop    %ebx
f011d363:	5f                   	pop    %edi
f011d364:	5d                   	pop    %ebp
f011d365:	c3                   	ret    

f011d366 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d366:	55                   	push   %ebp
f011d367:	89 e5                	mov    %esp,%ebp
f011d369:	57                   	push   %edi
f011d36a:	53                   	push   %ebx
f011d36b:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d371:	83 ec 0c             	sub    $0xc,%esp
f011d374:	68 30 8c 13 f0       	push   $0xf0138c30
f011d379:	e8 b3 3a fe ff       	call   f0100e31 <cprintf>
f011d37e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d381:	83 ec 0c             	sub    $0xc,%esp
f011d384:	68 60 8c 13 f0       	push   $0xf0138c60
f011d389:	e8 a3 3a fe ff       	call   f0100e31 <cprintf>
f011d38e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d391:	83 ec 0c             	sub    $0xc,%esp
f011d394:	68 30 8c 13 f0       	push   $0xf0138c30
f011d399:	e8 93 3a fe ff       	call   f0100e31 <cprintf>
f011d39e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d3a1:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d3a7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d3ac:	b8 00 00 00 00       	mov    $0x0,%eax
f011d3b1:	89 d7                	mov    %edx,%edi
f011d3b3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d3b5:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d3bc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d3c1:	0f b6 d0             	movzbl %al,%edx
f011d3c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d3c7:	01 d0                	add    %edx,%eax
f011d3c9:	48                   	dec    %eax
f011d3ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d3cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d3d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3d5:	f7 75 f4             	divl   -0xc(%ebp)
f011d3d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d3db:	29 d0                	sub    %edx,%eax
f011d3dd:	89 c1                	mov    %eax,%ecx
f011d3df:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d3e6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d3eb:	0f b6 c0             	movzbl %al,%eax
f011d3ee:	c1 e0 04             	shl    $0x4,%eax
f011d3f1:	89 c2                	mov    %eax,%edx
f011d3f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d3f6:	01 d0                	add    %edx,%eax
f011d3f8:	48                   	dec    %eax
f011d3f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d3fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d3ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011d404:	f7 75 ec             	divl   -0x14(%ebp)
f011d407:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d40a:	29 d0                	sub    %edx,%eax
f011d40c:	01 c8                	add    %ecx,%eax
f011d40e:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d413:	29 c2                	sub    %eax,%edx
f011d415:	89 d0                	mov    %edx,%eax
f011d417:	83 ec 0c             	sub    $0xc,%esp
f011d41a:	50                   	push   %eax
f011d41b:	e8 73 a7 fe ff       	call   f0107b93 <kmalloc>
f011d420:	83 c4 10             	add    $0x10,%esp
f011d423:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d429:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d42f:	85 c0                	test   %eax,%eax
f011d431:	74 17                	je     f011d44a <test_kmalloc_firstfit2+0xe4>
f011d433:	83 ec 04             	sub    $0x4,%esp
f011d436:	68 30 93 13 f0       	push   $0xf0139330
f011d43b:	68 97 03 00 00       	push   $0x397
f011d440:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d445:	e8 66 2d fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d44a:	e8 c3 f1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d44f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d452:	e8 61 6e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d457:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d45a:	83 ec 0c             	sub    $0xc,%esp
f011d45d:	68 00 fc 1f 00       	push   $0x1ffc00
f011d462:	e8 2c a7 fe ff       	call   f0107b93 <kmalloc>
f011d467:	83 c4 10             	add    $0x10,%esp
f011d46a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d470:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d476:	89 c1                	mov    %eax,%ecx
f011d478:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d47f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d484:	0f b6 d0             	movzbl %al,%edx
f011d487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d48a:	01 d0                	add    %edx,%eax
f011d48c:	48                   	dec    %eax
f011d48d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d490:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d493:	ba 00 00 00 00       	mov    $0x0,%edx
f011d498:	f7 75 dc             	divl   -0x24(%ebp)
f011d49b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d49e:	29 d0                	sub    %edx,%eax
f011d4a0:	89 c3                	mov    %eax,%ebx
f011d4a2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d4a9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d4ae:	0f b6 c0             	movzbl %al,%eax
f011d4b1:	c1 e0 04             	shl    $0x4,%eax
f011d4b4:	89 c2                	mov    %eax,%edx
f011d4b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d4b9:	01 d0                	add    %edx,%eax
f011d4bb:	48                   	dec    %eax
f011d4bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d4bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d4c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4c7:	f7 75 d4             	divl   -0x2c(%ebp)
f011d4ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d4cd:	29 d0                	sub    %edx,%eax
f011d4cf:	01 d8                	add    %ebx,%eax
f011d4d1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d4d6:	39 c1                	cmp    %eax,%ecx
f011d4d8:	74 17                	je     f011d4f1 <test_kmalloc_firstfit2+0x18b>
f011d4da:	83 ec 04             	sub    $0x4,%esp
f011d4dd:	68 08 91 13 f0       	push   $0xf0139108
f011d4e2:	68 a1 03 00 00       	push   $0x3a1
f011d4e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d4ec:	e8 bf 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4f1:	e8 c2 6d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d4f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d4f9:	74 17                	je     f011d512 <test_kmalloc_firstfit2+0x1ac>
f011d4fb:	83 ec 04             	sub    $0x4,%esp
f011d4fe:	68 08 8d 13 f0       	push   $0xf0138d08
f011d503:	68 a2 03 00 00       	push   $0x3a2
f011d508:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d50d:	e8 9e 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d512:	e8 fb f0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d517:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d51a:	29 c2                	sub    %eax,%edx
f011d51c:	89 d0                	mov    %edx,%eax
f011d51e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d523:	74 17                	je     f011d53c <test_kmalloc_firstfit2+0x1d6>
f011d525:	83 ec 04             	sub    $0x4,%esp
f011d528:	68 38 91 13 f0       	push   $0xf0139138
f011d52d:	68 a3 03 00 00       	push   $0x3a3
f011d532:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d537:	e8 74 2c fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d53c:	e8 d1 f0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d541:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d544:	e8 6f 6d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d549:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d54c:	83 ec 0c             	sub    $0xc,%esp
f011d54f:	68 00 fc 1f 00       	push   $0x1ffc00
f011d554:	e8 3a a6 fe ff       	call   f0107b93 <kmalloc>
f011d559:	83 c4 10             	add    $0x10,%esp
f011d55c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d562:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d568:	89 c1                	mov    %eax,%ecx
f011d56a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d571:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d576:	0f b6 d0             	movzbl %al,%edx
f011d579:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d57c:	01 d0                	add    %edx,%eax
f011d57e:	48                   	dec    %eax
f011d57f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d582:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d585:	ba 00 00 00 00       	mov    $0x0,%edx
f011d58a:	f7 75 cc             	divl   -0x34(%ebp)
f011d58d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d590:	29 d0                	sub    %edx,%eax
f011d592:	89 c3                	mov    %eax,%ebx
f011d594:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d59b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d5a0:	0f b6 c0             	movzbl %al,%eax
f011d5a3:	c1 e0 04             	shl    $0x4,%eax
f011d5a6:	89 c2                	mov    %eax,%edx
f011d5a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d5ab:	01 d0                	add    %edx,%eax
f011d5ad:	48                   	dec    %eax
f011d5ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d5b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d5b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5b9:	f7 75 c4             	divl   -0x3c(%ebp)
f011d5bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d5bf:	29 d0                	sub    %edx,%eax
f011d5c1:	01 d8                	add    %ebx,%eax
f011d5c3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d5c8:	39 c1                	cmp    %eax,%ecx
f011d5ca:	74 17                	je     f011d5e3 <test_kmalloc_firstfit2+0x27d>
f011d5cc:	83 ec 04             	sub    $0x4,%esp
f011d5cf:	68 08 91 13 f0       	push   $0xf0139108
f011d5d4:	68 a9 03 00 00       	push   $0x3a9
f011d5d9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d5de:	e8 cd 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5e3:	e8 d0 6c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d5e8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d5eb:	74 17                	je     f011d604 <test_kmalloc_firstfit2+0x29e>
f011d5ed:	83 ec 04             	sub    $0x4,%esp
f011d5f0:	68 08 8d 13 f0       	push   $0xf0138d08
f011d5f5:	68 aa 03 00 00       	push   $0x3aa
f011d5fa:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d5ff:	e8 ac 2b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d604:	e8 09 f0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d609:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d60c:	29 c2                	sub    %eax,%edx
f011d60e:	89 d0                	mov    %edx,%eax
f011d610:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d615:	74 17                	je     f011d62e <test_kmalloc_firstfit2+0x2c8>
f011d617:	83 ec 04             	sub    $0x4,%esp
f011d61a:	68 38 91 13 f0       	push   $0xf0139138
f011d61f:	68 ab 03 00 00       	push   $0x3ab
f011d624:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d629:	e8 82 2b fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d62e:	e8 df ef fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d633:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d636:	e8 7d 6c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d63b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d63e:	83 ec 0c             	sub    $0xc,%esp
f011d641:	68 00 08 00 00       	push   $0x800
f011d646:	e8 48 a5 fe ff       	call   f0107b93 <kmalloc>
f011d64b:	83 c4 10             	add    $0x10,%esp
f011d64e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d654:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d65a:	89 c1                	mov    %eax,%ecx
f011d65c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d663:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d668:	0f b6 d0             	movzbl %al,%edx
f011d66b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d66e:	01 d0                	add    %edx,%eax
f011d670:	48                   	dec    %eax
f011d671:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d674:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d677:	ba 00 00 00 00       	mov    $0x0,%edx
f011d67c:	f7 75 bc             	divl   -0x44(%ebp)
f011d67f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d682:	29 d0                	sub    %edx,%eax
f011d684:	89 c3                	mov    %eax,%ebx
f011d686:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d68d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d692:	0f b6 c0             	movzbl %al,%eax
f011d695:	c1 e0 04             	shl    $0x4,%eax
f011d698:	89 c2                	mov    %eax,%edx
f011d69a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d69d:	01 d0                	add    %edx,%eax
f011d69f:	48                   	dec    %eax
f011d6a0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d6a3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d6a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ab:	f7 75 b4             	divl   -0x4c(%ebp)
f011d6ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d6b1:	29 d0                	sub    %edx,%eax
f011d6b3:	01 d8                	add    %ebx,%eax
f011d6b5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d6ba:	39 c1                	cmp    %eax,%ecx
f011d6bc:	73 17                	jae    f011d6d5 <test_kmalloc_firstfit2+0x36f>
f011d6be:	83 ec 04             	sub    $0x4,%esp
f011d6c1:	68 08 91 13 f0       	push   $0xf0139108
f011d6c6:	68 b1 03 00 00       	push   $0x3b1
f011d6cb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d6d0:	e8 db 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6d5:	e8 de 6b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d6da:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d6dd:	74 17                	je     f011d6f6 <test_kmalloc_firstfit2+0x390>
f011d6df:	83 ec 04             	sub    $0x4,%esp
f011d6e2:	68 08 8d 13 f0       	push   $0xf0138d08
f011d6e7:	68 b2 03 00 00       	push   $0x3b2
f011d6ec:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d6f1:	e8 ba 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d6f6:	e8 17 ef fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d6fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d6fe:	29 c2                	sub    %eax,%edx
f011d700:	89 d0                	mov    %edx,%eax
f011d702:	83 f8 01             	cmp    $0x1,%eax
f011d705:	74 17                	je     f011d71e <test_kmalloc_firstfit2+0x3b8>
f011d707:	83 ec 04             	sub    $0x4,%esp
f011d70a:	68 38 91 13 f0       	push   $0xf0139138
f011d70f:	68 b3 03 00 00       	push   $0x3b3
f011d714:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d719:	e8 92 2a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d71e:	e8 ef ee fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d723:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d726:	e8 8d 6b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d72b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d72e:	83 ec 0c             	sub    $0xc,%esp
f011d731:	68 00 08 00 00       	push   $0x800
f011d736:	e8 58 a4 fe ff       	call   f0107b93 <kmalloc>
f011d73b:	83 c4 10             	add    $0x10,%esp
f011d73e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d744:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d74a:	89 c1                	mov    %eax,%ecx
f011d74c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d753:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d758:	0f b6 d0             	movzbl %al,%edx
f011d75b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d75e:	01 d0                	add    %edx,%eax
f011d760:	48                   	dec    %eax
f011d761:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d764:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d767:	ba 00 00 00 00       	mov    $0x0,%edx
f011d76c:	f7 75 ac             	divl   -0x54(%ebp)
f011d76f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d772:	29 d0                	sub    %edx,%eax
f011d774:	89 c3                	mov    %eax,%ebx
f011d776:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d77d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d782:	0f b6 c0             	movzbl %al,%eax
f011d785:	c1 e0 04             	shl    $0x4,%eax
f011d788:	89 c2                	mov    %eax,%edx
f011d78a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d78d:	01 d0                	add    %edx,%eax
f011d78f:	48                   	dec    %eax
f011d790:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d793:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d796:	ba 00 00 00 00       	mov    $0x0,%edx
f011d79b:	f7 75 a4             	divl   -0x5c(%ebp)
f011d79e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d7a1:	29 d0                	sub    %edx,%eax
f011d7a3:	01 d8                	add    %ebx,%eax
f011d7a5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d7aa:	39 c1                	cmp    %eax,%ecx
f011d7ac:	74 17                	je     f011d7c5 <test_kmalloc_firstfit2+0x45f>
f011d7ae:	83 ec 04             	sub    $0x4,%esp
f011d7b1:	68 08 91 13 f0       	push   $0xf0139108
f011d7b6:	68 b9 03 00 00       	push   $0x3b9
f011d7bb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d7c0:	e8 eb 29 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7c5:	e8 ee 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d7ca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d7cd:	74 17                	je     f011d7e6 <test_kmalloc_firstfit2+0x480>
f011d7cf:	83 ec 04             	sub    $0x4,%esp
f011d7d2:	68 08 8d 13 f0       	push   $0xf0138d08
f011d7d7:	68 ba 03 00 00       	push   $0x3ba
f011d7dc:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d7e1:	e8 ca 29 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d7e6:	e8 27 ee fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d7eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d7ee:	29 c2                	sub    %eax,%edx
f011d7f0:	89 d0                	mov    %edx,%eax
f011d7f2:	83 f8 01             	cmp    $0x1,%eax
f011d7f5:	74 17                	je     f011d80e <test_kmalloc_firstfit2+0x4a8>
f011d7f7:	83 ec 04             	sub    $0x4,%esp
f011d7fa:	68 38 91 13 f0       	push   $0xf0139138
f011d7ff:	68 bb 03 00 00       	push   $0x3bb
f011d804:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d809:	e8 a2 29 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d80e:	e8 ff ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d813:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d816:	e8 9d 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d81b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011d81e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d824:	83 ec 0c             	sub    $0xc,%esp
f011d827:	50                   	push   %eax
f011d828:	e8 80 a3 fe ff       	call   f0107bad <kfree>
f011d82d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d830:	e8 83 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d835:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d838:	74 17                	je     f011d851 <test_kmalloc_firstfit2+0x4eb>
f011d83a:	83 ec 04             	sub    $0x4,%esp
f011d83d:	68 08 8d 13 f0       	push   $0xf0138d08
f011d842:	68 c1 03 00 00       	push   $0x3c1
f011d847:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d84c:	e8 5f 29 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d851:	e8 bc ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d856:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011d859:	83 f8 01             	cmp    $0x1,%eax
f011d85c:	74 17                	je     f011d875 <test_kmalloc_firstfit2+0x50f>
f011d85e:	83 ec 04             	sub    $0x4,%esp
f011d861:	68 4b 91 13 f0       	push   $0xf013914b
f011d866:	68 c2 03 00 00       	push   $0x3c2
f011d86b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d870:	e8 3b 29 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d875:	e8 98 ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d87a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d87d:	e8 36 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d882:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d885:	83 ec 0c             	sub    $0xc,%esp
f011d888:	68 00 1c 00 00       	push   $0x1c00
f011d88d:	e8 01 a3 fe ff       	call   f0107b93 <kmalloc>
f011d892:	83 c4 10             	add    $0x10,%esp
f011d895:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d89b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d8a1:	89 c1                	mov    %eax,%ecx
f011d8a3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d8aa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d8af:	0f b6 d0             	movzbl %al,%edx
f011d8b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d8b5:	01 d0                	add    %edx,%eax
f011d8b7:	48                   	dec    %eax
f011d8b8:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d8bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d8be:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8c3:	f7 75 9c             	divl   -0x64(%ebp)
f011d8c6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d8c9:	29 d0                	sub    %edx,%eax
f011d8cb:	89 c3                	mov    %eax,%ebx
f011d8cd:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d8d4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d8d9:	0f b6 c0             	movzbl %al,%eax
f011d8dc:	c1 e0 04             	shl    $0x4,%eax
f011d8df:	89 c2                	mov    %eax,%edx
f011d8e1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d8e4:	01 d0                	add    %edx,%eax
f011d8e6:	48                   	dec    %eax
f011d8e7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d8ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d8ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f2:	f7 75 94             	divl   -0x6c(%ebp)
f011d8f5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d8f8:	29 d0                	sub    %edx,%eax
f011d8fa:	01 d8                	add    %ebx,%eax
f011d8fc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d901:	39 c1                	cmp    %eax,%ecx
f011d903:	74 17                	je     f011d91c <test_kmalloc_firstfit2+0x5b6>
f011d905:	83 ec 04             	sub    $0x4,%esp
f011d908:	68 08 91 13 f0       	push   $0xf0139108
f011d90d:	68 c8 03 00 00       	push   $0x3c8
f011d912:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d917:	e8 94 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d91c:	e8 97 69 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d921:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d924:	74 17                	je     f011d93d <test_kmalloc_firstfit2+0x5d7>
f011d926:	83 ec 04             	sub    $0x4,%esp
f011d929:	68 08 8d 13 f0       	push   $0xf0138d08
f011d92e:	68 c9 03 00 00       	push   $0x3c9
f011d933:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d938:	e8 73 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d93d:	e8 d0 ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d942:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d945:	29 c2                	sub    %eax,%edx
f011d947:	89 d0                	mov    %edx,%eax
f011d949:	83 f8 02             	cmp    $0x2,%eax
f011d94c:	74 17                	je     f011d965 <test_kmalloc_firstfit2+0x5ff>
f011d94e:	83 ec 04             	sub    $0x4,%esp
f011d951:	68 38 91 13 f0       	push   $0xf0139138
f011d956:	68 ca 03 00 00       	push   $0x3ca
f011d95b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d960:	e8 4b 28 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d965:	e8 a8 ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d96a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d96d:	e8 46 69 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d972:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011d975:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d97b:	83 ec 0c             	sub    $0xc,%esp
f011d97e:	50                   	push   %eax
f011d97f:	e8 29 a2 fe ff       	call   f0107bad <kfree>
f011d984:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d987:	e8 2c 69 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d98c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d98f:	74 17                	je     f011d9a8 <test_kmalloc_firstfit2+0x642>
f011d991:	83 ec 04             	sub    $0x4,%esp
f011d994:	68 08 8d 13 f0       	push   $0xf0138d08
f011d999:	68 d0 03 00 00       	push   $0x3d0
f011d99e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d9a3:	e8 08 28 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d9a8:	e8 65 ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d9ad:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011d9b0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d9b5:	74 17                	je     f011d9ce <test_kmalloc_firstfit2+0x668>
f011d9b7:	83 ec 04             	sub    $0x4,%esp
f011d9ba:	68 4b 91 13 f0       	push   $0xf013914b
f011d9bf:	68 d1 03 00 00       	push   $0x3d1
f011d9c4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011d9c9:	e8 e2 27 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d9ce:	e8 3f ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d9d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9d6:	e8 dd 68 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d9db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d9de:	83 ec 0c             	sub    $0xc,%esp
f011d9e1:	68 00 fc 2f 00       	push   $0x2ffc00
f011d9e6:	e8 a8 a1 fe ff       	call   f0107b93 <kmalloc>
f011d9eb:	83 c4 10             	add    $0x10,%esp
f011d9ee:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d9f4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d9fa:	89 c1                	mov    %eax,%ecx
f011d9fc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011da03:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011da08:	0f b6 d0             	movzbl %al,%edx
f011da0b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011da0e:	01 d0                	add    %edx,%eax
f011da10:	48                   	dec    %eax
f011da11:	89 45 88             	mov    %eax,-0x78(%ebp)
f011da14:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da17:	ba 00 00 00 00       	mov    $0x0,%edx
f011da1c:	f7 75 8c             	divl   -0x74(%ebp)
f011da1f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da22:	29 d0                	sub    %edx,%eax
f011da24:	89 c3                	mov    %eax,%ebx
f011da26:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011da2d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011da32:	0f b6 c0             	movzbl %al,%eax
f011da35:	c1 e0 04             	shl    $0x4,%eax
f011da38:	89 c2                	mov    %eax,%edx
f011da3a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011da3d:	01 d0                	add    %edx,%eax
f011da3f:	48                   	dec    %eax
f011da40:	89 45 80             	mov    %eax,-0x80(%ebp)
f011da43:	8b 45 80             	mov    -0x80(%ebp),%eax
f011da46:	ba 00 00 00 00       	mov    $0x0,%edx
f011da4b:	f7 75 84             	divl   -0x7c(%ebp)
f011da4e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011da51:	29 d0                	sub    %edx,%eax
f011da53:	01 d8                	add    %ebx,%eax
f011da55:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011da5a:	39 c1                	cmp    %eax,%ecx
f011da5c:	74 17                	je     f011da75 <test_kmalloc_firstfit2+0x70f>
f011da5e:	83 ec 04             	sub    $0x4,%esp
f011da61:	68 08 91 13 f0       	push   $0xf0139108
f011da66:	68 d7 03 00 00       	push   $0x3d7
f011da6b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011da70:	e8 3b 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da75:	e8 3e 68 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011da7a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011da7d:	74 17                	je     f011da96 <test_kmalloc_firstfit2+0x730>
f011da7f:	83 ec 04             	sub    $0x4,%esp
f011da82:	68 08 8d 13 f0       	push   $0xf0138d08
f011da87:	68 d8 03 00 00       	push   $0x3d8
f011da8c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011da91:	e8 1a 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011da96:	e8 77 eb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011da9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011da9e:	29 c2                	sub    %eax,%edx
f011daa0:	89 d0                	mov    %edx,%eax
f011daa2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011daa7:	74 17                	je     f011dac0 <test_kmalloc_firstfit2+0x75a>
f011daa9:	83 ec 04             	sub    $0x4,%esp
f011daac:	68 38 91 13 f0       	push   $0xf0139138
f011dab1:	68 d9 03 00 00       	push   $0x3d9
f011dab6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dabb:	e8 f0 26 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011dac0:	e8 4d eb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dac5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dac8:	e8 eb 67 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dacd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011dad0:	83 ec 0c             	sub    $0xc,%esp
f011dad3:	68 00 18 20 00       	push   $0x201800
f011dad8:	e8 b6 a0 fe ff       	call   f0107b93 <kmalloc>
f011dadd:	83 c4 10             	add    $0x10,%esp
f011dae0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dae6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011daec:	89 c1                	mov    %eax,%ecx
f011daee:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011daf5:	10 00 00 
f011daf8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dafd:	0f b6 d0             	movzbl %al,%edx
f011db00:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011db06:	01 d0                	add    %edx,%eax
f011db08:	48                   	dec    %eax
f011db09:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011db0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db15:	ba 00 00 00 00       	mov    $0x0,%edx
f011db1a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011db20:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db26:	29 d0                	sub    %edx,%eax
f011db28:	89 c3                	mov    %eax,%ebx
f011db2a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011db31:	10 00 00 
f011db34:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011db39:	0f b6 c0             	movzbl %al,%eax
f011db3c:	c1 e0 04             	shl    $0x4,%eax
f011db3f:	89 c2                	mov    %eax,%edx
f011db41:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011db47:	01 d0                	add    %edx,%eax
f011db49:	48                   	dec    %eax
f011db4a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011db50:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011db56:	ba 00 00 00 00       	mov    $0x0,%edx
f011db5b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011db61:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011db67:	29 d0                	sub    %edx,%eax
f011db69:	01 d8                	add    %ebx,%eax
f011db6b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011db70:	39 c1                	cmp    %eax,%ecx
f011db72:	74 17                	je     f011db8b <test_kmalloc_firstfit2+0x825>
f011db74:	83 ec 04             	sub    $0x4,%esp
f011db77:	68 08 91 13 f0       	push   $0xf0139108
f011db7c:	68 df 03 00 00       	push   $0x3df
f011db81:	68 ee 8c 13 f0       	push   $0xf0138cee
f011db86:	e8 25 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db8b:	e8 28 67 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011db90:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011db93:	74 17                	je     f011dbac <test_kmalloc_firstfit2+0x846>
f011db95:	83 ec 04             	sub    $0x4,%esp
f011db98:	68 08 8d 13 f0       	push   $0xf0138d08
f011db9d:	68 e0 03 00 00       	push   $0x3e0
f011dba2:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dba7:	e8 04 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dbac:	e8 61 ea fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dbb1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dbb4:	29 c2                	sub    %eax,%edx
f011dbb6:	89 d0                	mov    %edx,%eax
f011dbb8:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dbbd:	74 17                	je     f011dbd6 <test_kmalloc_firstfit2+0x870>
f011dbbf:	83 ec 04             	sub    $0x4,%esp
f011dbc2:	68 38 91 13 f0       	push   $0xf0139138
f011dbc7:	68 e1 03 00 00       	push   $0x3e1
f011dbcc:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dbd1:	e8 da 25 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dbd6:	e8 37 ea fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dbdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbde:	e8 d5 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dbe3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011dbe6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dbec:	83 ec 0c             	sub    $0xc,%esp
f011dbef:	50                   	push   %eax
f011dbf0:	e8 b8 9f fe ff       	call   f0107bad <kfree>
f011dbf5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbf8:	e8 bb 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dbfd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc00:	74 17                	je     f011dc19 <test_kmalloc_firstfit2+0x8b3>
f011dc02:	83 ec 04             	sub    $0x4,%esp
f011dc05:	68 08 8d 13 f0       	push   $0xf0138d08
f011dc0a:	68 e7 03 00 00       	push   $0x3e7
f011dc0f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dc14:	e8 97 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dc19:	e8 f4 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc1e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc21:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dc26:	74 17                	je     f011dc3f <test_kmalloc_firstfit2+0x8d9>
f011dc28:	83 ec 04             	sub    $0x4,%esp
f011dc2b:	68 4b 91 13 f0       	push   $0xf013914b
f011dc30:	68 e8 03 00 00       	push   $0x3e8
f011dc35:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dc3a:	e8 71 25 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dc3f:	e8 ce e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc47:	e8 6c 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dc4c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011dc4f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dc55:	83 ec 0c             	sub    $0xc,%esp
f011dc58:	50                   	push   %eax
f011dc59:	e8 4f 9f fe ff       	call   f0107bad <kfree>
f011dc5e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dc61:	e8 ac e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc66:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc69:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc6e:	74 17                	je     f011dc87 <test_kmalloc_firstfit2+0x921>
f011dc70:	83 ec 04             	sub    $0x4,%esp
f011dc73:	68 4b 91 13 f0       	push   $0xf013914b
f011dc78:	68 ee 03 00 00       	push   $0x3ee
f011dc7d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dc82:	e8 29 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc87:	e8 2c 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dc8c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc8f:	74 17                	je     f011dca8 <test_kmalloc_firstfit2+0x942>
f011dc91:	83 ec 04             	sub    $0x4,%esp
f011dc94:	68 08 8d 13 f0       	push   $0xf0138d08
f011dc99:	68 ef 03 00 00       	push   $0x3ef
f011dc9e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dca3:	e8 08 25 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011dca8:	e8 65 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dcad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcb0:	e8 03 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dcb5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011dcb8:	83 ec 0c             	sub    $0xc,%esp
f011dcbb:	68 00 fc 4f 00       	push   $0x4ffc00
f011dcc0:	e8 ce 9e fe ff       	call   f0107b93 <kmalloc>
f011dcc5:	83 c4 10             	add    $0x10,%esp
f011dcc8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011dcce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dcd4:	89 c1                	mov    %eax,%ecx
f011dcd6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dcdd:	10 00 00 
f011dce0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dce5:	0f b6 d0             	movzbl %al,%edx
f011dce8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dcee:	01 d0                	add    %edx,%eax
f011dcf0:	48                   	dec    %eax
f011dcf1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dcf7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dcfd:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd02:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dd08:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dd0e:	29 d0                	sub    %edx,%eax
f011dd10:	89 c3                	mov    %eax,%ebx
f011dd12:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dd19:	10 00 00 
f011dd1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dd21:	0f b6 c0             	movzbl %al,%eax
f011dd24:	c1 e0 04             	shl    $0x4,%eax
f011dd27:	89 c2                	mov    %eax,%edx
f011dd29:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dd2f:	01 d0                	add    %edx,%eax
f011dd31:	48                   	dec    %eax
f011dd32:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dd38:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dd3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd43:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dd49:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dd4f:	29 d0                	sub    %edx,%eax
f011dd51:	01 d8                	add    %ebx,%eax
f011dd53:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011dd58:	39 c1                	cmp    %eax,%ecx
f011dd5a:	74 17                	je     f011dd73 <test_kmalloc_firstfit2+0xa0d>
f011dd5c:	83 ec 04             	sub    $0x4,%esp
f011dd5f:	68 08 91 13 f0       	push   $0xf0139108
f011dd64:	68 f5 03 00 00       	push   $0x3f5
f011dd69:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dd6e:	e8 3d 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd73:	e8 40 65 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dd78:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd7b:	74 17                	je     f011dd94 <test_kmalloc_firstfit2+0xa2e>
f011dd7d:	83 ec 04             	sub    $0x4,%esp
f011dd80:	68 08 8d 13 f0       	push   $0xf0138d08
f011dd85:	68 f6 03 00 00       	push   $0x3f6
f011dd8a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dd8f:	e8 1c 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dd94:	e8 79 e8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dd99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dd9c:	29 c2                	sub    %eax,%edx
f011dd9e:	89 d0                	mov    %edx,%eax
f011dda0:	3d 00 05 00 00       	cmp    $0x500,%eax
f011dda5:	74 17                	je     f011ddbe <test_kmalloc_firstfit2+0xa58>
f011dda7:	83 ec 04             	sub    $0x4,%esp
f011ddaa:	68 38 91 13 f0       	push   $0xf0139138
f011ddaf:	68 f7 03 00 00       	push   $0x3f7
f011ddb4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ddb9:	e8 f2 23 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddbe:	e8 4f e8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ddc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddc6:	e8 ed 64 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ddcb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ddce:	83 ec 0c             	sub    $0xc,%esp
f011ddd1:	68 00 fc 2f 00       	push   $0x2ffc00
f011ddd6:	e8 b8 9d fe ff       	call   f0107b93 <kmalloc>
f011dddb:	83 c4 10             	add    $0x10,%esp
f011ddde:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011dde4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ddea:	89 c1                	mov    %eax,%ecx
f011ddec:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ddf3:	10 00 00 
f011ddf6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ddfb:	0f b6 d0             	movzbl %al,%edx
f011ddfe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011de04:	01 d0                	add    %edx,%eax
f011de06:	48                   	dec    %eax
f011de07:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011de0d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011de13:	ba 00 00 00 00       	mov    $0x0,%edx
f011de18:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011de1e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011de24:	29 d0                	sub    %edx,%eax
f011de26:	89 c3                	mov    %eax,%ebx
f011de28:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011de2f:	10 00 00 
f011de32:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011de37:	0f b6 c0             	movzbl %al,%eax
f011de3a:	c1 e0 04             	shl    $0x4,%eax
f011de3d:	89 c2                	mov    %eax,%edx
f011de3f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011de45:	01 d0                	add    %edx,%eax
f011de47:	48                   	dec    %eax
f011de48:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011de4e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011de54:	ba 00 00 00 00       	mov    $0x0,%edx
f011de59:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011de5f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011de65:	29 d0                	sub    %edx,%eax
f011de67:	01 d8                	add    %ebx,%eax
f011de69:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011de6e:	39 c1                	cmp    %eax,%ecx
f011de70:	74 17                	je     f011de89 <test_kmalloc_firstfit2+0xb23>
f011de72:	83 ec 04             	sub    $0x4,%esp
f011de75:	68 08 91 13 f0       	push   $0xf0139108
f011de7a:	68 05 04 00 00       	push   $0x405
f011de7f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011de84:	e8 27 23 fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de89:	e8 2a 64 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011de8e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de91:	74 17                	je     f011deaa <test_kmalloc_firstfit2+0xb44>
f011de93:	83 ec 04             	sub    $0x4,%esp
f011de96:	68 08 8d 13 f0       	push   $0xf0138d08
f011de9b:	68 06 04 00 00       	push   $0x406
f011dea0:	68 ee 8c 13 f0       	push   $0xf0138cee
f011dea5:	e8 06 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011deaa:	e8 63 e7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011deaf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011deb2:	29 c2                	sub    %eax,%edx
f011deb4:	89 d0                	mov    %edx,%eax
f011deb6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011debb:	74 17                	je     f011ded4 <test_kmalloc_firstfit2+0xb6e>
f011debd:	83 ec 04             	sub    $0x4,%esp
f011dec0:	68 38 91 13 f0       	push   $0xf0139138
f011dec5:	68 07 04 00 00       	push   $0x407
f011deca:	68 ee 8c 13 f0       	push   $0xf0138cee
f011decf:	e8 dc 22 fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ded4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dedb:	10 00 00 
f011dede:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dee3:	0f b6 d0             	movzbl %al,%edx
f011dee6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011deec:	01 d0                	add    %edx,%eax
f011deee:	48                   	dec    %eax
f011deef:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011def5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011defb:	ba 00 00 00 00       	mov    $0x0,%edx
f011df00:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011df06:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011df0c:	29 d0                	sub    %edx,%eax
f011df0e:	89 c1                	mov    %eax,%ecx
f011df10:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011df17:	10 00 00 
f011df1a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011df1f:	0f b6 c0             	movzbl %al,%eax
f011df22:	c1 e0 04             	shl    $0x4,%eax
f011df25:	89 c2                	mov    %eax,%edx
f011df27:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011df2d:	01 d0                	add    %edx,%eax
f011df2f:	48                   	dec    %eax
f011df30:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011df36:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011df41:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011df47:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df4d:	29 d0                	sub    %edx,%eax
f011df4f:	01 c8                	add    %ecx,%eax
f011df51:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011df56:	29 c2                	sub    %eax,%edx
f011df58:	89 d0                	mov    %edx,%eax
f011df5a:	83 ec 0c             	sub    $0xc,%esp
f011df5d:	50                   	push   %eax
f011df5e:	e8 30 9c fe ff       	call   f0107b93 <kmalloc>
f011df63:	83 c4 10             	add    $0x10,%esp
f011df66:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011df6c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011df72:	85 c0                	test   %eax,%eax
f011df74:	74 17                	je     f011df8d <test_kmalloc_firstfit2+0xc27>
f011df76:	83 ec 04             	sub    $0x4,%esp
f011df79:	68 38 92 13 f0       	push   $0xf0139238
f011df7e:	68 0d 04 00 00       	push   $0x40d
f011df83:	68 ee 8c 13 f0       	push   $0xf0138cee
f011df88:	e8 23 22 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011df8d:	83 ec 0c             	sub    $0xc,%esp
f011df90:	68 78 93 13 f0       	push   $0xf0139378
f011df95:	e8 97 2e fe ff       	call   f0100e31 <cprintf>
f011df9a:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011df9d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dfa2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dfa5:	5b                   	pop    %ebx
f011dfa6:	5f                   	pop    %edi
f011dfa7:	5d                   	pop    %ebp
f011dfa8:	c3                   	ret    

f011dfa9 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011dfa9:	55                   	push   %ebp
f011dfaa:	89 e5                	mov    %esp,%ebp
f011dfac:	57                   	push   %edi
f011dfad:	53                   	push   %ebx
f011dfae:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011dfb4:	83 ec 0c             	sub    $0xc,%esp
f011dfb7:	68 30 8c 13 f0       	push   $0xf0138c30
f011dfbc:	e8 70 2e fe ff       	call   f0100e31 <cprintf>
f011dfc1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dfc4:	83 ec 0c             	sub    $0xc,%esp
f011dfc7:	68 60 8c 13 f0       	push   $0xf0138c60
f011dfcc:	e8 60 2e fe ff       	call   f0100e31 <cprintf>
f011dfd1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dfd4:	83 ec 0c             	sub    $0xc,%esp
f011dfd7:	68 30 8c 13 f0       	push   $0xf0138c30
f011dfdc:	e8 50 2e fe ff       	call   f0100e31 <cprintf>
f011dfe1:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011dfe4:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011dfea:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011dfef:	b8 00 00 00 00       	mov    $0x0,%eax
f011dff4:	89 d7                	mov    %edx,%edi
f011dff6:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011dff8:	e8 15 e6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dffd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e000:	e8 b3 62 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e005:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e008:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e00f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e016:	eb 1f                	jmp    f011e037 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e018:	83 ec 0c             	sub    $0xc,%esp
f011e01b:	68 00 00 20 00       	push   $0x200000
f011e020:	e8 6e 9b fe ff       	call   f0107b93 <kmalloc>
f011e025:	83 c4 10             	add    $0x10,%esp
f011e028:	89 c2                	mov    %eax,%edx
f011e02a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e02d:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e034:	ff 45 f4             	incl   -0xc(%ebp)
f011e037:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e03b:	7e db                	jle    f011e018 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e03d:	83 ec 0c             	sub    $0xc,%esp
f011e040:	68 00 b0 1f 00       	push   $0x1fb000
f011e045:	e8 49 9b fe ff       	call   f0107b93 <kmalloc>
f011e04a:	83 c4 10             	add    $0x10,%esp
f011e04d:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e053:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e059:	89 c1                	mov    %eax,%ecx
f011e05b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e062:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e067:	0f b6 d0             	movzbl %al,%edx
f011e06a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e06d:	01 d0                	add    %edx,%eax
f011e06f:	48                   	dec    %eax
f011e070:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e073:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e076:	ba 00 00 00 00       	mov    $0x0,%edx
f011e07b:	f7 75 e4             	divl   -0x1c(%ebp)
f011e07e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e081:	29 d0                	sub    %edx,%eax
f011e083:	89 c3                	mov    %eax,%ebx
f011e085:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e08c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e091:	0f b6 c0             	movzbl %al,%eax
f011e094:	c1 e0 04             	shl    $0x4,%eax
f011e097:	89 c2                	mov    %eax,%edx
f011e099:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e09c:	01 d0                	add    %edx,%eax
f011e09e:	48                   	dec    %eax
f011e09f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e0a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e0a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0aa:	f7 75 dc             	divl   -0x24(%ebp)
f011e0ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e0b0:	29 d0                	sub    %edx,%eax
f011e0b2:	01 d8                	add    %ebx,%eax
f011e0b4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e0b9:	39 c1                	cmp    %eax,%ecx
f011e0bb:	0f 85 34 03 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e0c1:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e0c7:	89 c1                	mov    %eax,%ecx
f011e0c9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e0d0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e0d5:	0f b6 d0             	movzbl %al,%edx
f011e0d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e0db:	01 d0                	add    %edx,%eax
f011e0dd:	48                   	dec    %eax
f011e0de:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e0e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e0e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0e9:	f7 75 d4             	divl   -0x2c(%ebp)
f011e0ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e0ef:	29 d0                	sub    %edx,%eax
f011e0f1:	89 c3                	mov    %eax,%ebx
f011e0f3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e0fa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e0ff:	0f b6 c0             	movzbl %al,%eax
f011e102:	c1 e0 04             	shl    $0x4,%eax
f011e105:	89 c2                	mov    %eax,%edx
f011e107:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e10a:	01 d0                	add    %edx,%eax
f011e10c:	48                   	dec    %eax
f011e10d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e110:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e113:	ba 00 00 00 00       	mov    $0x0,%edx
f011e118:	f7 75 cc             	divl   -0x34(%ebp)
f011e11b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e11e:	29 d0                	sub    %edx,%eax
f011e120:	01 d8                	add    %ebx,%eax
f011e122:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e127:	39 c1                	cmp    %eax,%ecx
f011e129:	0f 85 c6 02 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e12f:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e135:	89 c1                	mov    %eax,%ecx
f011e137:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e13e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e143:	0f b6 d0             	movzbl %al,%edx
f011e146:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e149:	01 d0                	add    %edx,%eax
f011e14b:	48                   	dec    %eax
f011e14c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e14f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e152:	ba 00 00 00 00       	mov    $0x0,%edx
f011e157:	f7 75 c4             	divl   -0x3c(%ebp)
f011e15a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e15d:	29 d0                	sub    %edx,%eax
f011e15f:	89 c3                	mov    %eax,%ebx
f011e161:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e168:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e16d:	0f b6 c0             	movzbl %al,%eax
f011e170:	c1 e0 04             	shl    $0x4,%eax
f011e173:	89 c2                	mov    %eax,%edx
f011e175:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e178:	01 d0                	add    %edx,%eax
f011e17a:	48                   	dec    %eax
f011e17b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e17e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e181:	ba 00 00 00 00       	mov    $0x0,%edx
f011e186:	f7 75 bc             	divl   -0x44(%ebp)
f011e189:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e18c:	29 d0                	sub    %edx,%eax
f011e18e:	01 d8                	add    %ebx,%eax
f011e190:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e195:	39 c1                	cmp    %eax,%ecx
f011e197:	0f 85 58 02 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e19d:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e1a3:	89 c1                	mov    %eax,%ecx
f011e1a5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e1ac:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e1b1:	0f b6 d0             	movzbl %al,%edx
f011e1b4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e1b7:	01 d0                	add    %edx,%eax
f011e1b9:	48                   	dec    %eax
f011e1ba:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e1bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e1c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1c5:	f7 75 b4             	divl   -0x4c(%ebp)
f011e1c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e1cb:	29 d0                	sub    %edx,%eax
f011e1cd:	89 c3                	mov    %eax,%ebx
f011e1cf:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e1d6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e1db:	0f b6 c0             	movzbl %al,%eax
f011e1de:	c1 e0 04             	shl    $0x4,%eax
f011e1e1:	89 c2                	mov    %eax,%edx
f011e1e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e1e6:	01 d0                	add    %edx,%eax
f011e1e8:	48                   	dec    %eax
f011e1e9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e1ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e1ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1f4:	f7 75 ac             	divl   -0x54(%ebp)
f011e1f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e1fa:	29 d0                	sub    %edx,%eax
f011e1fc:	01 d8                	add    %ebx,%eax
f011e1fe:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e203:	39 c1                	cmp    %eax,%ecx
f011e205:	0f 85 ea 01 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e20b:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e211:	89 c1                	mov    %eax,%ecx
f011e213:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e21a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e21f:	0f b6 d0             	movzbl %al,%edx
f011e222:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e225:	01 d0                	add    %edx,%eax
f011e227:	48                   	dec    %eax
f011e228:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e22b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e22e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e233:	f7 75 a4             	divl   -0x5c(%ebp)
f011e236:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e239:	29 d0                	sub    %edx,%eax
f011e23b:	89 c3                	mov    %eax,%ebx
f011e23d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e244:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e249:	0f b6 c0             	movzbl %al,%eax
f011e24c:	c1 e0 04             	shl    $0x4,%eax
f011e24f:	89 c2                	mov    %eax,%edx
f011e251:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e254:	01 d0                	add    %edx,%eax
f011e256:	48                   	dec    %eax
f011e257:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e25a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e25d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e262:	f7 75 9c             	divl   -0x64(%ebp)
f011e265:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e268:	29 d0                	sub    %edx,%eax
f011e26a:	01 d8                	add    %ebx,%eax
f011e26c:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e271:	39 c1                	cmp    %eax,%ecx
f011e273:	0f 85 7c 01 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e279:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e27f:	89 c1                	mov    %eax,%ecx
f011e281:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e288:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e28d:	0f b6 d0             	movzbl %al,%edx
f011e290:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e293:	01 d0                	add    %edx,%eax
f011e295:	48                   	dec    %eax
f011e296:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e299:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e29c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2a1:	f7 75 94             	divl   -0x6c(%ebp)
f011e2a4:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e2a7:	29 d0                	sub    %edx,%eax
f011e2a9:	89 c3                	mov    %eax,%ebx
f011e2ab:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e2b2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e2b7:	0f b6 c0             	movzbl %al,%eax
f011e2ba:	c1 e0 04             	shl    $0x4,%eax
f011e2bd:	89 c2                	mov    %eax,%edx
f011e2bf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e2c2:	01 d0                	add    %edx,%eax
f011e2c4:	48                   	dec    %eax
f011e2c5:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e2c8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e2cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2d0:	f7 75 8c             	divl   -0x74(%ebp)
f011e2d3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e2d6:	29 d0                	sub    %edx,%eax
f011e2d8:	01 d8                	add    %ebx,%eax
f011e2da:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e2df:	39 c1                	cmp    %eax,%ecx
f011e2e1:	0f 85 0e 01 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e2e7:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e2ed:	89 c1                	mov    %eax,%ecx
f011e2ef:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e2f6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e2fb:	0f b6 d0             	movzbl %al,%edx
f011e2fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e301:	01 d0                	add    %edx,%eax
f011e303:	48                   	dec    %eax
f011e304:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e307:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e30a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e30f:	f7 75 84             	divl   -0x7c(%ebp)
f011e312:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e315:	29 d0                	sub    %edx,%eax
f011e317:	89 c3                	mov    %eax,%ebx
f011e319:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e320:	10 00 00 
f011e323:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e328:	0f b6 c0             	movzbl %al,%eax
f011e32b:	c1 e0 04             	shl    $0x4,%eax
f011e32e:	89 c2                	mov    %eax,%edx
f011e330:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e336:	01 d0                	add    %edx,%eax
f011e338:	48                   	dec    %eax
f011e339:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e33f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e345:	ba 00 00 00 00       	mov    $0x0,%edx
f011e34a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e350:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e356:	29 d0                	sub    %edx,%eax
f011e358:	01 d8                	add    %ebx,%eax
f011e35a:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e35f:	39 c1                	cmp    %eax,%ecx
f011e361:	0f 85 8e 00 00 00    	jne    f011e3f5 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e367:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e36d:	89 c1                	mov    %eax,%ecx
f011e36f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e376:	10 00 00 
f011e379:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e37e:	0f b6 d0             	movzbl %al,%edx
f011e381:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e387:	01 d0                	add    %edx,%eax
f011e389:	48                   	dec    %eax
f011e38a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e390:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e396:	ba 00 00 00 00       	mov    $0x0,%edx
f011e39b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e3a1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3a7:	29 d0                	sub    %edx,%eax
f011e3a9:	89 c3                	mov    %eax,%ebx
f011e3ab:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e3b2:	10 00 00 
f011e3b5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e3ba:	0f b6 c0             	movzbl %al,%eax
f011e3bd:	c1 e0 04             	shl    $0x4,%eax
f011e3c0:	89 c2                	mov    %eax,%edx
f011e3c2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e3c8:	01 d0                	add    %edx,%eax
f011e3ca:	48                   	dec    %eax
f011e3cb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e3d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e3d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3dc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e3e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e3e8:	29 d0                	sub    %edx,%eax
f011e3ea:	01 d8                	add    %ebx,%eax
f011e3ec:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e3f1:	39 c1                	cmp    %eax,%ecx
f011e3f3:	74 17                	je     f011e40c <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e3f5:	83 ec 04             	sub    $0x4,%esp
f011e3f8:	68 c4 93 13 f0       	push   $0xf01393c4
f011e3fd:	68 31 04 00 00       	push   $0x431
f011e402:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e407:	e8 a4 1d fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e40c:	e8 a7 5e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e411:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e414:	74 17                	je     f011e42d <test_kmalloc_worstfit+0x484>
f011e416:	83 ec 04             	sub    $0x4,%esp
f011e419:	68 08 8d 13 f0       	push   $0xf0138d08
f011e41e:	68 33 04 00 00       	push   $0x433
f011e423:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e428:	e8 83 1d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e42d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e430:	e8 dd e1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e435:	29 c3                	sub    %eax,%ebx
f011e437:	89 d8                	mov    %ebx,%eax
f011e439:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e43e:	74 17                	je     f011e457 <test_kmalloc_worstfit+0x4ae>
f011e440:	83 ec 04             	sub    $0x4,%esp
f011e443:	68 ab 8f 13 f0       	push   $0xf0138fab
f011e448:	68 34 04 00 00       	push   $0x434
f011e44d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e452:	e8 59 1d fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e457:	e8 b6 e1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e45c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e45f:	e8 54 5e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e464:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e467:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e46d:	83 ec 0c             	sub    $0xc,%esp
f011e470:	50                   	push   %eax
f011e471:	e8 37 97 fe ff       	call   f0107bad <kfree>
f011e476:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e479:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e47f:	83 ec 0c             	sub    $0xc,%esp
f011e482:	50                   	push   %eax
f011e483:	e8 25 97 fe ff       	call   f0107bad <kfree>
f011e488:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e48b:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e491:	83 ec 0c             	sub    $0xc,%esp
f011e494:	50                   	push   %eax
f011e495:	e8 13 97 fe ff       	call   f0107bad <kfree>
f011e49a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e49d:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e4a3:	83 ec 0c             	sub    $0xc,%esp
f011e4a6:	50                   	push   %eax
f011e4a7:	e8 01 97 fe ff       	call   f0107bad <kfree>
f011e4ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e4af:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e4b5:	83 ec 0c             	sub    $0xc,%esp
f011e4b8:	50                   	push   %eax
f011e4b9:	e8 ef 96 fe ff       	call   f0107bad <kfree>
f011e4be:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e4c1:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e4c7:	83 ec 0c             	sub    $0xc,%esp
f011e4ca:	50                   	push   %eax
f011e4cb:	e8 dd 96 fe ff       	call   f0107bad <kfree>
f011e4d0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e4d3:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e4d9:	83 ec 0c             	sub    $0xc,%esp
f011e4dc:	50                   	push   %eax
f011e4dd:	e8 cb 96 fe ff       	call   f0107bad <kfree>
f011e4e2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e4e5:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e4eb:	83 ec 0c             	sub    $0xc,%esp
f011e4ee:	50                   	push   %eax
f011e4ef:	e8 b9 96 fe ff       	call   f0107bad <kfree>
f011e4f4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e4f7:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e4fd:	83 ec 0c             	sub    $0xc,%esp
f011e500:	50                   	push   %eax
f011e501:	e8 a7 96 fe ff       	call   f0107bad <kfree>
f011e506:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e509:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e50f:	83 ec 0c             	sub    $0xc,%esp
f011e512:	50                   	push   %eax
f011e513:	e8 95 96 fe ff       	call   f0107bad <kfree>
f011e518:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e51b:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e521:	83 ec 0c             	sub    $0xc,%esp
f011e524:	50                   	push   %eax
f011e525:	e8 83 96 fe ff       	call   f0107bad <kfree>
f011e52a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e52d:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e533:	83 ec 0c             	sub    $0xc,%esp
f011e536:	50                   	push   %eax
f011e537:	e8 71 96 fe ff       	call   f0107bad <kfree>
f011e53c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e53f:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e545:	83 ec 0c             	sub    $0xc,%esp
f011e548:	50                   	push   %eax
f011e549:	e8 5f 96 fe ff       	call   f0107bad <kfree>
f011e54e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e551:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e557:	83 ec 0c             	sub    $0xc,%esp
f011e55a:	50                   	push   %eax
f011e55b:	e8 4d 96 fe ff       	call   f0107bad <kfree>
f011e560:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e563:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e569:	83 ec 0c             	sub    $0xc,%esp
f011e56c:	50                   	push   %eax
f011e56d:	e8 3b 96 fe ff       	call   f0107bad <kfree>
f011e572:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e575:	e8 3e 5d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e57a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e57d:	74 17                	je     f011e596 <test_kmalloc_worstfit+0x5ed>
f011e57f:	83 ec 04             	sub    $0x4,%esp
f011e582:	68 08 8d 13 f0       	push   $0xf0138d08
f011e587:	68 4a 04 00 00       	push   $0x44a
f011e58c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e591:	e8 1a 1c fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e596:	e8 77 e0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e59b:	89 c2                	mov    %eax,%edx
f011e59d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e5a0:	29 c2                	sub    %eax,%edx
f011e5a2:	89 d0                	mov    %edx,%eax
f011e5a4:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e5a9:	74 17                	je     f011e5c2 <test_kmalloc_worstfit+0x619>
f011e5ab:	83 ec 04             	sub    $0x4,%esp
f011e5ae:	68 bc 8f 13 f0       	push   $0xf0138fbc
f011e5b3:	68 4b 04 00 00       	push   $0x44b
f011e5b8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e5bd:	e8 ee 1b fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e5c2:	e8 4b e0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e5c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e5ca:	e8 e9 5c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e5cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e5d2:	83 ec 0c             	sub    $0xc,%esp
f011e5d5:	68 00 00 10 00       	push   $0x100000
f011e5da:	e8 b4 95 fe ff       	call   f0107b93 <kmalloc>
f011e5df:	83 c4 10             	add    $0x10,%esp
f011e5e2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e5e8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e5ef:	10 00 00 
f011e5f2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e5f7:	0f b6 d0             	movzbl %al,%edx
f011e5fa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e600:	01 d0                	add    %edx,%eax
f011e602:	48                   	dec    %eax
f011e603:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011e609:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e60f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e614:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011e61a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e620:	29 d0                	sub    %edx,%eax
f011e622:	89 c1                	mov    %eax,%ecx
f011e624:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011e62b:	10 00 00 
f011e62e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e633:	0f b6 c0             	movzbl %al,%eax
f011e636:	c1 e0 04             	shl    $0x4,%eax
f011e639:	89 c2                	mov    %eax,%edx
f011e63b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e641:	01 d0                	add    %edx,%eax
f011e643:	48                   	dec    %eax
f011e644:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011e64a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e650:	ba 00 00 00 00       	mov    $0x0,%edx
f011e655:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011e65b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e661:	29 d0                	sub    %edx,%eax
f011e663:	01 c8                	add    %ecx,%eax
f011e665:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e66b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e671:	39 c2                	cmp    %eax,%edx
f011e673:	74 17                	je     f011e68c <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011e675:	83 ec 04             	sub    $0x4,%esp
f011e678:	68 08 94 13 f0       	push   $0xf0139408
f011e67d:	68 52 04 00 00       	push   $0x452
f011e682:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e687:	e8 24 1b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e68c:	e8 27 5c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e691:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e694:	74 17                	je     f011e6ad <test_kmalloc_worstfit+0x704>
f011e696:	83 ec 04             	sub    $0x4,%esp
f011e699:	68 08 8d 13 f0       	push   $0xf0138d08
f011e69e:	68 53 04 00 00       	push   $0x453
f011e6a3:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e6a8:	e8 03 1b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e6ad:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e6b0:	e8 5d df fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e6b5:	29 c3                	sub    %eax,%ebx
f011e6b7:	89 d8                	mov    %ebx,%eax
f011e6b9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e6be:	74 17                	je     f011e6d7 <test_kmalloc_worstfit+0x72e>
f011e6c0:	83 ec 04             	sub    $0x4,%esp
f011e6c3:	68 26 92 13 f0       	push   $0xf0139226
f011e6c8:	68 54 04 00 00       	push   $0x454
f011e6cd:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e6d2:	e8 d9 1a fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e6d7:	ff 45 e8             	incl   -0x18(%ebp)
f011e6da:	83 ec 08             	sub    $0x8,%esp
f011e6dd:	ff 75 e8             	pushl  -0x18(%ebp)
f011e6e0:	68 28 94 13 f0       	push   $0xf0139428
f011e6e5:	e8 47 27 fe ff       	call   f0100e31 <cprintf>
f011e6ea:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e6ed:	e8 20 df fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e6f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e6f5:	e8 be 5b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e6fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e6fd:	83 ec 0c             	sub    $0xc,%esp
f011e700:	68 00 00 40 00       	push   $0x400000
f011e705:	e8 89 94 fe ff       	call   f0107b93 <kmalloc>
f011e70a:	83 c4 10             	add    $0x10,%esp
f011e70d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e713:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011e71a:	10 00 00 
f011e71d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e722:	0f b6 d0             	movzbl %al,%edx
f011e725:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e72b:	01 d0                	add    %edx,%eax
f011e72d:	48                   	dec    %eax
f011e72e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011e734:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e73a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e73f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011e745:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e74b:	29 d0                	sub    %edx,%eax
f011e74d:	89 c1                	mov    %eax,%ecx
f011e74f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011e756:	10 00 00 
f011e759:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e75e:	0f b6 c0             	movzbl %al,%eax
f011e761:	c1 e0 04             	shl    $0x4,%eax
f011e764:	89 c2                	mov    %eax,%edx
f011e766:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e76c:	01 d0                	add    %edx,%eax
f011e76e:	48                   	dec    %eax
f011e76f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011e775:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e77b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e780:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011e786:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e78c:	29 d0                	sub    %edx,%eax
f011e78e:	01 c8                	add    %ecx,%eax
f011e790:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e796:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e79c:	39 c2                	cmp    %eax,%edx
f011e79e:	74 17                	je     f011e7b7 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011e7a0:	83 ec 04             	sub    $0x4,%esp
f011e7a3:	68 08 94 13 f0       	push   $0xf0139408
f011e7a8:	68 5b 04 00 00       	push   $0x45b
f011e7ad:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e7b2:	e8 f9 19 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7b7:	e8 fc 5a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e7bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7bf:	74 17                	je     f011e7d8 <test_kmalloc_worstfit+0x82f>
f011e7c1:	83 ec 04             	sub    $0x4,%esp
f011e7c4:	68 08 8d 13 f0       	push   $0xf0138d08
f011e7c9:	68 5c 04 00 00       	push   $0x45c
f011e7ce:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e7d3:	e8 d8 19 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e7d8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7db:	e8 32 de fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e7e0:	29 c3                	sub    %eax,%ebx
f011e7e2:	89 d8                	mov    %ebx,%eax
f011e7e4:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e7e9:	74 17                	je     f011e802 <test_kmalloc_worstfit+0x859>
f011e7eb:	83 ec 04             	sub    $0x4,%esp
f011e7ee:	68 26 92 13 f0       	push   $0xf0139226
f011e7f3:	68 5d 04 00 00       	push   $0x45d
f011e7f8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e7fd:	e8 ae 19 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e802:	ff 45 e8             	incl   -0x18(%ebp)
f011e805:	83 ec 08             	sub    $0x8,%esp
f011e808:	ff 75 e8             	pushl  -0x18(%ebp)
f011e80b:	68 28 94 13 f0       	push   $0xf0139428
f011e810:	e8 1c 26 fe ff       	call   f0100e31 <cprintf>
f011e815:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e818:	e8 f5 dd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e81d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e820:	e8 93 5a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e825:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e828:	83 ec 0c             	sub    $0xc,%esp
f011e82b:	68 00 00 60 00       	push   $0x600000
f011e830:	e8 5e 93 fe ff       	call   f0107b93 <kmalloc>
f011e835:	83 c4 10             	add    $0x10,%esp
f011e838:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e83e:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011e845:	10 00 00 
f011e848:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e84d:	0f b6 d0             	movzbl %al,%edx
f011e850:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e856:	01 d0                	add    %edx,%eax
f011e858:	48                   	dec    %eax
f011e859:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011e85f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e865:	ba 00 00 00 00       	mov    $0x0,%edx
f011e86a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011e870:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e876:	29 d0                	sub    %edx,%eax
f011e878:	89 c1                	mov    %eax,%ecx
f011e87a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011e881:	10 00 00 
f011e884:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e889:	0f b6 c0             	movzbl %al,%eax
f011e88c:	c1 e0 04             	shl    $0x4,%eax
f011e88f:	89 c2                	mov    %eax,%edx
f011e891:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e897:	01 d0                	add    %edx,%eax
f011e899:	48                   	dec    %eax
f011e89a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011e8a0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e8a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8ab:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011e8b1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e8b7:	29 d0                	sub    %edx,%eax
f011e8b9:	01 c8                	add    %ecx,%eax
f011e8bb:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e8c1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e8c7:	39 c2                	cmp    %eax,%edx
f011e8c9:	74 17                	je     f011e8e2 <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011e8cb:	83 ec 04             	sub    $0x4,%esp
f011e8ce:	68 08 94 13 f0       	push   $0xf0139408
f011e8d3:	68 64 04 00 00       	push   $0x464
f011e8d8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e8dd:	e8 ce 18 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8e2:	e8 d1 59 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e8e7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e8ea:	74 17                	je     f011e903 <test_kmalloc_worstfit+0x95a>
f011e8ec:	83 ec 04             	sub    $0x4,%esp
f011e8ef:	68 08 8d 13 f0       	push   $0xf0138d08
f011e8f4:	68 65 04 00 00       	push   $0x465
f011e8f9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e8fe:	e8 ad 18 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e903:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e906:	e8 07 dd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e90b:	29 c3                	sub    %eax,%ebx
f011e90d:	89 d8                	mov    %ebx,%eax
f011e90f:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e914:	74 17                	je     f011e92d <test_kmalloc_worstfit+0x984>
f011e916:	83 ec 04             	sub    $0x4,%esp
f011e919:	68 26 92 13 f0       	push   $0xf0139226
f011e91e:	68 66 04 00 00       	push   $0x466
f011e923:	68 ee 8c 13 f0       	push   $0xf0138cee
f011e928:	e8 83 18 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e92d:	ff 45 e8             	incl   -0x18(%ebp)
f011e930:	83 ec 08             	sub    $0x8,%esp
f011e933:	ff 75 e8             	pushl  -0x18(%ebp)
f011e936:	68 28 94 13 f0       	push   $0xf0139428
f011e93b:	e8 f1 24 fe ff       	call   f0100e31 <cprintf>
f011e940:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e943:	e8 ca dc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e948:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e94b:	e8 68 59 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e950:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e953:	83 ec 0c             	sub    $0xc,%esp
f011e956:	68 00 00 50 00       	push   $0x500000
f011e95b:	e8 33 92 fe ff       	call   f0107b93 <kmalloc>
f011e960:	83 c4 10             	add    $0x10,%esp
f011e963:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e969:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011e970:	10 00 00 
f011e973:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e978:	0f b6 d0             	movzbl %al,%edx
f011e97b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e981:	01 d0                	add    %edx,%eax
f011e983:	48                   	dec    %eax
f011e984:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011e98a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e990:	ba 00 00 00 00       	mov    $0x0,%edx
f011e995:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011e99b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e9a1:	29 d0                	sub    %edx,%eax
f011e9a3:	89 c1                	mov    %eax,%ecx
f011e9a5:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011e9ac:	10 00 00 
f011e9af:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e9b4:	0f b6 c0             	movzbl %al,%eax
f011e9b7:	c1 e0 04             	shl    $0x4,%eax
f011e9ba:	89 c2                	mov    %eax,%edx
f011e9bc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e9c2:	01 d0                	add    %edx,%eax
f011e9c4:	48                   	dec    %eax
f011e9c5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011e9cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e9d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d6:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011e9dc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e9e2:	29 d0                	sub    %edx,%eax
f011e9e4:	01 c8                	add    %ecx,%eax
f011e9e6:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011e9ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e9f2:	39 c2                	cmp    %eax,%edx
f011e9f4:	74 17                	je     f011ea0d <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011e9f6:	83 ec 04             	sub    $0x4,%esp
f011e9f9:	68 08 94 13 f0       	push   $0xf0139408
f011e9fe:	68 6d 04 00 00       	push   $0x46d
f011ea03:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ea08:	e8 a3 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea0d:	e8 a6 58 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ea12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea15:	74 17                	je     f011ea2e <test_kmalloc_worstfit+0xa85>
f011ea17:	83 ec 04             	sub    $0x4,%esp
f011ea1a:	68 08 8d 13 f0       	push   $0xf0138d08
f011ea1f:	68 6e 04 00 00       	push   $0x46e
f011ea24:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ea29:	e8 82 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea2e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea31:	e8 dc db fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ea36:	29 c3                	sub    %eax,%ebx
f011ea38:	89 d8                	mov    %ebx,%eax
f011ea3a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ea3f:	74 17                	je     f011ea58 <test_kmalloc_worstfit+0xaaf>
f011ea41:	83 ec 04             	sub    $0x4,%esp
f011ea44:	68 26 92 13 f0       	push   $0xf0139226
f011ea49:	68 6f 04 00 00       	push   $0x46f
f011ea4e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ea53:	e8 58 17 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ea58:	ff 45 e8             	incl   -0x18(%ebp)
f011ea5b:	83 ec 08             	sub    $0x8,%esp
f011ea5e:	ff 75 e8             	pushl  -0x18(%ebp)
f011ea61:	68 28 94 13 f0       	push   $0xf0139428
f011ea66:	e8 c6 23 fe ff       	call   f0100e31 <cprintf>
f011ea6b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ea6e:	e8 9f db fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ea73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ea76:	e8 3d 58 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ea7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ea7e:	83 ec 0c             	sub    $0xc,%esp
f011ea81:	68 00 00 40 00       	push   $0x400000
f011ea86:	e8 08 91 fe ff       	call   f0107b93 <kmalloc>
f011ea8b:	83 c4 10             	add    $0x10,%esp
f011ea8e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ea94:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ea9b:	10 00 00 
f011ea9e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011eaa3:	0f b6 d0             	movzbl %al,%edx
f011eaa6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eaac:	01 d0                	add    %edx,%eax
f011eaae:	48                   	dec    %eax
f011eaaf:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011eab5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eabb:	ba 00 00 00 00       	mov    $0x0,%edx
f011eac0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011eac6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eacc:	29 d0                	sub    %edx,%eax
f011eace:	89 c1                	mov    %eax,%ecx
f011ead0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011ead7:	10 00 00 
f011eada:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011eadf:	0f b6 c0             	movzbl %al,%eax
f011eae2:	c1 e0 04             	shl    $0x4,%eax
f011eae5:	89 c2                	mov    %eax,%edx
f011eae7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011eaed:	01 d0                	add    %edx,%eax
f011eaef:	48                   	dec    %eax
f011eaf0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eaf6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eafc:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb01:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eb07:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eb0d:	29 d0                	sub    %edx,%eax
f011eb0f:	01 c8                	add    %ecx,%eax
f011eb11:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011eb17:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb1d:	39 c2                	cmp    %eax,%edx
f011eb1f:	74 17                	je     f011eb38 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011eb21:	83 ec 04             	sub    $0x4,%esp
f011eb24:	68 08 94 13 f0       	push   $0xf0139408
f011eb29:	68 76 04 00 00       	push   $0x476
f011eb2e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eb33:	e8 78 16 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb38:	e8 7b 57 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eb3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb40:	74 17                	je     f011eb59 <test_kmalloc_worstfit+0xbb0>
f011eb42:	83 ec 04             	sub    $0x4,%esp
f011eb45:	68 08 8d 13 f0       	push   $0xf0138d08
f011eb4a:	68 77 04 00 00       	push   $0x477
f011eb4f:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eb54:	e8 57 16 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eb59:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eb5c:	e8 b1 da fe ff       	call   f010c612 <sys_calculate_free_frames>
f011eb61:	29 c3                	sub    %eax,%ebx
f011eb63:	89 d8                	mov    %ebx,%eax
f011eb65:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eb6a:	74 17                	je     f011eb83 <test_kmalloc_worstfit+0xbda>
f011eb6c:	83 ec 04             	sub    $0x4,%esp
f011eb6f:	68 26 92 13 f0       	push   $0xf0139226
f011eb74:	68 78 04 00 00       	push   $0x478
f011eb79:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eb7e:	e8 2d 16 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eb83:	ff 45 e8             	incl   -0x18(%ebp)
f011eb86:	83 ec 08             	sub    $0x8,%esp
f011eb89:	ff 75 e8             	pushl  -0x18(%ebp)
f011eb8c:	68 28 94 13 f0       	push   $0xf0139428
f011eb91:	e8 9b 22 fe ff       	call   f0100e31 <cprintf>
f011eb96:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eb99:	e8 74 da fe ff       	call   f010c612 <sys_calculate_free_frames>
f011eb9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eba1:	e8 12 57 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eba6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011eba9:	83 ec 0c             	sub    $0xc,%esp
f011ebac:	68 00 00 20 00       	push   $0x200000
f011ebb1:	e8 dd 8f fe ff       	call   f0107b93 <kmalloc>
f011ebb6:	83 c4 10             	add    $0x10,%esp
f011ebb9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011ebbf:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ebc6:	10 00 00 
f011ebc9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ebce:	0f b6 d0             	movzbl %al,%edx
f011ebd1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ebd7:	01 d0                	add    %edx,%eax
f011ebd9:	48                   	dec    %eax
f011ebda:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ebe0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ebe6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebeb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ebf1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ebf7:	29 d0                	sub    %edx,%eax
f011ebf9:	89 c1                	mov    %eax,%ecx
f011ebfb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011ec02:	10 00 00 
f011ec05:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ec0a:	0f b6 c0             	movzbl %al,%eax
f011ec0d:	c1 e0 04             	shl    $0x4,%eax
f011ec10:	89 c2                	mov    %eax,%edx
f011ec12:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ec18:	01 d0                	add    %edx,%eax
f011ec1a:	48                   	dec    %eax
f011ec1b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011ec21:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ec27:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011ec32:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ec38:	29 d0                	sub    %edx,%eax
f011ec3a:	01 c8                	add    %ecx,%eax
f011ec3c:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ec42:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec48:	39 c2                	cmp    %eax,%edx
f011ec4a:	74 17                	je     f011ec63 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011ec4c:	83 ec 04             	sub    $0x4,%esp
f011ec4f:	68 08 94 13 f0       	push   $0xf0139408
f011ec54:	68 7f 04 00 00       	push   $0x47f
f011ec59:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ec5e:	e8 4d 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec63:	e8 50 56 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ec68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec6b:	74 17                	je     f011ec84 <test_kmalloc_worstfit+0xcdb>
f011ec6d:	83 ec 04             	sub    $0x4,%esp
f011ec70:	68 08 8d 13 f0       	push   $0xf0138d08
f011ec75:	68 80 04 00 00       	push   $0x480
f011ec7a:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ec7f:	e8 2c 15 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec84:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec87:	e8 86 d9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ec8c:	29 c3                	sub    %eax,%ebx
f011ec8e:	89 d8                	mov    %ebx,%eax
f011ec90:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ec95:	74 17                	je     f011ecae <test_kmalloc_worstfit+0xd05>
f011ec97:	83 ec 04             	sub    $0x4,%esp
f011ec9a:	68 26 92 13 f0       	push   $0xf0139226
f011ec9f:	68 81 04 00 00       	push   $0x481
f011eca4:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eca9:	e8 02 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ecae:	ff 45 e8             	incl   -0x18(%ebp)
f011ecb1:	83 ec 08             	sub    $0x8,%esp
f011ecb4:	ff 75 e8             	pushl  -0x18(%ebp)
f011ecb7:	68 28 94 13 f0       	push   $0xf0139428
f011ecbc:	e8 70 21 fe ff       	call   f0100e31 <cprintf>
f011ecc1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ecc4:	e8 49 d9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ecc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eccc:	e8 e7 55 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ecd1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ecd4:	83 ec 0c             	sub    $0xc,%esp
f011ecd7:	68 00 00 18 00       	push   $0x180000
f011ecdc:	e8 b2 8e fe ff       	call   f0107b93 <kmalloc>
f011ece1:	83 c4 10             	add    $0x10,%esp
f011ece4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ecea:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011ecf1:	10 00 00 
f011ecf4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ecf9:	0f b6 d0             	movzbl %al,%edx
f011ecfc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ed02:	01 d0                	add    %edx,%eax
f011ed04:	48                   	dec    %eax
f011ed05:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011ed0b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ed11:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed16:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011ed1c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ed22:	29 d0                	sub    %edx,%eax
f011ed24:	89 c1                	mov    %eax,%ecx
f011ed26:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011ed2d:	10 00 00 
f011ed30:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ed35:	0f b6 c0             	movzbl %al,%eax
f011ed38:	c1 e0 04             	shl    $0x4,%eax
f011ed3b:	89 c2                	mov    %eax,%edx
f011ed3d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ed43:	01 d0                	add    %edx,%eax
f011ed45:	48                   	dec    %eax
f011ed46:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ed4c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ed52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed57:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011ed5d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ed63:	29 d0                	sub    %edx,%eax
f011ed65:	01 c8                	add    %ecx,%eax
f011ed67:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011ed6d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ed73:	39 c2                	cmp    %eax,%edx
f011ed75:	74 17                	je     f011ed8e <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011ed77:	83 ec 04             	sub    $0x4,%esp
f011ed7a:	68 08 94 13 f0       	push   $0xf0139408
f011ed7f:	68 88 04 00 00       	push   $0x488
f011ed84:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ed89:	e8 22 14 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed8e:	e8 25 55 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ed93:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed96:	74 17                	je     f011edaf <test_kmalloc_worstfit+0xe06>
f011ed98:	83 ec 04             	sub    $0x4,%esp
f011ed9b:	68 08 8d 13 f0       	push   $0xf0138d08
f011eda0:	68 89 04 00 00       	push   $0x489
f011eda5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011edaa:	e8 01 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011edaf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011edb2:	e8 5b d8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011edb7:	29 c3                	sub    %eax,%ebx
f011edb9:	89 d8                	mov    %ebx,%eax
f011edbb:	3d 80 01 00 00       	cmp    $0x180,%eax
f011edc0:	74 17                	je     f011edd9 <test_kmalloc_worstfit+0xe30>
f011edc2:	83 ec 04             	sub    $0x4,%esp
f011edc5:	68 26 92 13 f0       	push   $0xf0139226
f011edca:	68 8a 04 00 00       	push   $0x48a
f011edcf:	68 ee 8c 13 f0       	push   $0xf0138cee
f011edd4:	e8 d7 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011edd9:	ff 45 e8             	incl   -0x18(%ebp)
f011eddc:	83 ec 08             	sub    $0x8,%esp
f011eddf:	ff 75 e8             	pushl  -0x18(%ebp)
f011ede2:	68 28 94 13 f0       	push   $0xf0139428
f011ede7:	e8 45 20 fe ff       	call   f0100e31 <cprintf>
f011edec:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011edef:	e8 1e d8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011edf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edf7:	e8 bc 54 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011edfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011edff:	83 ec 0c             	sub    $0xc,%esp
f011ee02:	68 00 00 08 00       	push   $0x80000
f011ee07:	e8 87 8d fe ff       	call   f0107b93 <kmalloc>
f011ee0c:	83 c4 10             	add    $0x10,%esp
f011ee0f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011ee15:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ee1c:	10 00 00 
f011ee1f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ee24:	0f b6 d0             	movzbl %al,%edx
f011ee27:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ee2d:	01 d0                	add    %edx,%eax
f011ee2f:	48                   	dec    %eax
f011ee30:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ee36:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee41:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ee47:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee4d:	29 d0                	sub    %edx,%eax
f011ee4f:	89 c1                	mov    %eax,%ecx
f011ee51:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ee58:	10 00 00 
f011ee5b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ee60:	0f b6 c0             	movzbl %al,%eax
f011ee63:	c1 e0 04             	shl    $0x4,%eax
f011ee66:	89 c2                	mov    %eax,%edx
f011ee68:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ee6e:	01 d0                	add    %edx,%eax
f011ee70:	48                   	dec    %eax
f011ee71:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011ee77:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ee7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee82:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ee88:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ee8e:	29 d0                	sub    %edx,%eax
f011ee90:	01 c8                	add    %ecx,%eax
f011ee92:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011ee98:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ee9e:	39 c2                	cmp    %eax,%edx
f011eea0:	74 17                	je     f011eeb9 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011eea2:	83 ec 04             	sub    $0x4,%esp
f011eea5:	68 08 94 13 f0       	push   $0xf0139408
f011eeaa:	68 91 04 00 00       	push   $0x491
f011eeaf:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eeb4:	e8 f7 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eeb9:	e8 fa 53 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eebe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eec1:	74 17                	je     f011eeda <test_kmalloc_worstfit+0xf31>
f011eec3:	83 ec 04             	sub    $0x4,%esp
f011eec6:	68 08 8d 13 f0       	push   $0xf0138d08
f011eecb:	68 92 04 00 00       	push   $0x492
f011eed0:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eed5:	e8 d6 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011eeda:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eedd:	e8 30 d7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011eee2:	29 c3                	sub    %eax,%ebx
f011eee4:	89 d8                	mov    %ebx,%eax
f011eee6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011eeeb:	74 17                	je     f011ef04 <test_kmalloc_worstfit+0xf5b>
f011eeed:	83 ec 04             	sub    $0x4,%esp
f011eef0:	68 26 92 13 f0       	push   $0xf0139226
f011eef5:	68 93 04 00 00       	push   $0x493
f011eefa:	68 ee 8c 13 f0       	push   $0xf0138cee
f011eeff:	e8 ac 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef04:	ff 45 e8             	incl   -0x18(%ebp)
f011ef07:	83 ec 08             	sub    $0x8,%esp
f011ef0a:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef0d:	68 28 94 13 f0       	push   $0xf0139428
f011ef12:	e8 1a 1f fe ff       	call   f0100e31 <cprintf>
f011ef17:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef1a:	e8 f3 d6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ef1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef22:	e8 91 53 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ef27:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011ef2a:	83 ec 0c             	sub    $0xc,%esp
f011ef2d:	68 00 04 00 00       	push   $0x400
f011ef32:	e8 5c 8c fe ff       	call   f0107b93 <kmalloc>
f011ef37:	83 c4 10             	add    $0x10,%esp
f011ef3a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011ef40:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ef47:	10 00 00 
f011ef4a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ef4f:	0f b6 d0             	movzbl %al,%edx
f011ef52:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ef58:	01 d0                	add    %edx,%eax
f011ef5a:	48                   	dec    %eax
f011ef5b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ef61:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ef67:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef6c:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ef72:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ef78:	29 d0                	sub    %edx,%eax
f011ef7a:	89 c1                	mov    %eax,%ecx
f011ef7c:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011ef83:	10 00 00 
f011ef86:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ef8b:	0f b6 c0             	movzbl %al,%eax
f011ef8e:	c1 e0 04             	shl    $0x4,%eax
f011ef91:	89 c2                	mov    %eax,%edx
f011ef93:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ef99:	01 d0                	add    %edx,%eax
f011ef9b:	48                   	dec    %eax
f011ef9c:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011efa2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011efa8:	ba 00 00 00 00       	mov    $0x0,%edx
f011efad:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011efb3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011efb9:	29 d0                	sub    %edx,%eax
f011efbb:	01 c8                	add    %ecx,%eax
f011efbd:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011efc3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011efc9:	39 c2                	cmp    %eax,%edx
f011efcb:	74 17                	je     f011efe4 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011efcd:	83 ec 04             	sub    $0x4,%esp
f011efd0:	68 08 94 13 f0       	push   $0xf0139408
f011efd5:	68 9a 04 00 00       	push   $0x49a
f011efda:	68 ee 8c 13 f0       	push   $0xf0138cee
f011efdf:	e8 cc 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efe4:	e8 cf 52 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011efe9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efec:	74 17                	je     f011f005 <test_kmalloc_worstfit+0x105c>
f011efee:	83 ec 04             	sub    $0x4,%esp
f011eff1:	68 08 8d 13 f0       	push   $0xf0138d08
f011eff6:	68 9b 04 00 00       	push   $0x49b
f011effb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f000:	e8 ab 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f005:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f008:	e8 05 d6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f00d:	29 c3                	sub    %eax,%ebx
f011f00f:	89 d8                	mov    %ebx,%eax
f011f011:	83 f8 01             	cmp    $0x1,%eax
f011f014:	74 17                	je     f011f02d <test_kmalloc_worstfit+0x1084>
f011f016:	83 ec 04             	sub    $0x4,%esp
f011f019:	68 26 92 13 f0       	push   $0xf0139226
f011f01e:	68 9c 04 00 00       	push   $0x49c
f011f023:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f028:	e8 83 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f02d:	ff 45 e8             	incl   -0x18(%ebp)
f011f030:	83 ec 08             	sub    $0x8,%esp
f011f033:	ff 75 e8             	pushl  -0x18(%ebp)
f011f036:	68 28 94 13 f0       	push   $0xf0139428
f011f03b:	e8 f1 1d fe ff       	call   f0100e31 <cprintf>
f011f040:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f043:	e8 ca d5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f048:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f04b:	e8 68 52 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f050:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f053:	83 ec 0c             	sub    $0xc,%esp
f011f056:	68 00 f0 1f 00       	push   $0x1ff000
f011f05b:	e8 33 8b fe ff       	call   f0107b93 <kmalloc>
f011f060:	83 c4 10             	add    $0x10,%esp
f011f063:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f069:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f070:	10 00 00 
f011f073:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f078:	0f b6 d0             	movzbl %al,%edx
f011f07b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f081:	01 d0                	add    %edx,%eax
f011f083:	48                   	dec    %eax
f011f084:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f08a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f090:	ba 00 00 00 00       	mov    $0x0,%edx
f011f095:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f09b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f0a1:	29 d0                	sub    %edx,%eax
f011f0a3:	89 c1                	mov    %eax,%ecx
f011f0a5:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f0ac:	10 00 00 
f011f0af:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f0b4:	0f b6 c0             	movzbl %al,%eax
f011f0b7:	c1 e0 04             	shl    $0x4,%eax
f011f0ba:	89 c2                	mov    %eax,%edx
f011f0bc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f0c2:	01 d0                	add    %edx,%eax
f011f0c4:	48                   	dec    %eax
f011f0c5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f0cb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f0d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0d6:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f0dc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f0e2:	29 d0                	sub    %edx,%eax
f011f0e4:	01 c8                	add    %ecx,%eax
f011f0e6:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f0ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f0f2:	39 c2                	cmp    %eax,%edx
f011f0f4:	74 17                	je     f011f10d <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f0f6:	83 ec 04             	sub    $0x4,%esp
f011f0f9:	68 08 94 13 f0       	push   $0xf0139408
f011f0fe:	68 a3 04 00 00       	push   $0x4a3
f011f103:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f108:	e8 a3 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f10d:	e8 a6 51 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f112:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f115:	74 17                	je     f011f12e <test_kmalloc_worstfit+0x1185>
f011f117:	83 ec 04             	sub    $0x4,%esp
f011f11a:	68 08 8d 13 f0       	push   $0xf0138d08
f011f11f:	68 a4 04 00 00       	push   $0x4a4
f011f124:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f129:	e8 82 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f12e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f131:	e8 dc d4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f136:	29 c3                	sub    %eax,%ebx
f011f138:	89 d8                	mov    %ebx,%eax
f011f13a:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f13f:	74 17                	je     f011f158 <test_kmalloc_worstfit+0x11af>
f011f141:	83 ec 04             	sub    $0x4,%esp
f011f144:	68 26 92 13 f0       	push   $0xf0139226
f011f149:	68 a5 04 00 00       	push   $0x4a5
f011f14e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f153:	e8 58 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f158:	ff 45 e8             	incl   -0x18(%ebp)
f011f15b:	83 ec 08             	sub    $0x8,%esp
f011f15e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f161:	68 28 94 13 f0       	push   $0xf0139428
f011f166:	e8 c6 1c fe ff       	call   f0100e31 <cprintf>
f011f16b:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f16e:	e8 9f d4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f173:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f176:	e8 3d 51 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f17b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f17e:	83 ec 0c             	sub    $0xc,%esp
f011f181:	68 00 00 40 00       	push   $0x400000
f011f186:	e8 08 8a fe ff       	call   f0107b93 <kmalloc>
f011f18b:	83 c4 10             	add    $0x10,%esp
f011f18e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f194:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f19a:	85 c0                	test   %eax,%eax
f011f19c:	74 17                	je     f011f1b5 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f19e:	83 ec 04             	sub    $0x4,%esp
f011f1a1:	68 08 94 13 f0       	push   $0xf0139408
f011f1a6:	68 ad 04 00 00       	push   $0x4ad
f011f1ab:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f1b0:	e8 fb 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1b5:	e8 fe 50 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f1ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1bd:	74 17                	je     f011f1d6 <test_kmalloc_worstfit+0x122d>
f011f1bf:	83 ec 04             	sub    $0x4,%esp
f011f1c2:	68 08 8d 13 f0       	push   $0xf0138d08
f011f1c7:	68 ae 04 00 00       	push   $0x4ae
f011f1cc:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f1d1:	e8 da 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f1d6:	e8 37 d4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f1db:	89 c2                	mov    %eax,%edx
f011f1dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f1e0:	39 c2                	cmp    %eax,%edx
f011f1e2:	74 17                	je     f011f1fb <test_kmalloc_worstfit+0x1252>
f011f1e4:	83 ec 04             	sub    $0x4,%esp
f011f1e7:	68 26 92 13 f0       	push   $0xf0139226
f011f1ec:	68 af 04 00 00       	push   $0x4af
f011f1f1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f1f6:	e8 b5 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1fb:	ff 45 e8             	incl   -0x18(%ebp)
f011f1fe:	83 ec 08             	sub    $0x8,%esp
f011f201:	ff 75 e8             	pushl  -0x18(%ebp)
f011f204:	68 28 94 13 f0       	push   $0xf0139428
f011f209:	e8 23 1c fe ff       	call   f0100e31 <cprintf>
f011f20e:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f211:	83 ec 0c             	sub    $0xc,%esp
f011f214:	68 3c 94 13 f0       	push   $0xf013943c
f011f219:	e8 13 1c fe ff       	call   f0100e31 <cprintf>
f011f21e:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f221:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f226:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f229:	5b                   	pop    %ebx
f011f22a:	5f                   	pop    %edi
f011f22b:	5d                   	pop    %ebp
f011f22c:	c3                   	ret    

f011f22d <test_kfree>:

int test_kfree()
{
f011f22d:	55                   	push   %ebp
f011f22e:	89 e5                	mov    %esp,%ebp
f011f230:	57                   	push   %edi
f011f231:	53                   	push   %ebx
f011f232:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f238:	83 ec 0c             	sub    $0xc,%esp
f011f23b:	68 30 8c 13 f0       	push   $0xf0138c30
f011f240:	e8 ec 1b fe ff       	call   f0100e31 <cprintf>
f011f245:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f248:	83 ec 0c             	sub    $0xc,%esp
f011f24b:	68 60 8c 13 f0       	push   $0xf0138c60
f011f250:	e8 dc 1b fe ff       	call   f0100e31 <cprintf>
f011f255:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f258:	83 ec 0c             	sub    $0xc,%esp
f011f25b:	68 30 8c 13 f0       	push   $0xf0138c30
f011f260:	e8 cc 1b fe ff       	call   f0100e31 <cprintf>
f011f265:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f268:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f26c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f270:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f276:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f27c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f283:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f28a:	e8 83 d3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f28f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f292:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f298:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f29d:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2a2:	89 d7                	mov    %edx,%edi
f011f2a4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f2a6:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f2ac:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2b1:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2b6:	89 d7                	mov    %edx,%edi
f011f2b8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f2ba:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f2c0:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2c5:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2ca:	89 d7                	mov    %edx,%edi
f011f2cc:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f2ce:	e8 3f d3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f2d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f2d6:	e8 dd 4f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f2db:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f2de:	83 ec 0c             	sub    $0xc,%esp
f011f2e1:	68 00 fc 1f 00       	push   $0x1ffc00
f011f2e6:	e8 a8 88 fe ff       	call   f0107b93 <kmalloc>
f011f2eb:	83 c4 10             	add    $0x10,%esp
f011f2ee:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f2f4:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f2fa:	89 c1                	mov    %eax,%ecx
f011f2fc:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f303:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f308:	0f b6 d0             	movzbl %al,%edx
f011f30b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f30e:	01 d0                	add    %edx,%eax
f011f310:	48                   	dec    %eax
f011f311:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f314:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f317:	ba 00 00 00 00       	mov    $0x0,%edx
f011f31c:	f7 75 c8             	divl   -0x38(%ebp)
f011f31f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f322:	29 d0                	sub    %edx,%eax
f011f324:	89 c3                	mov    %eax,%ebx
f011f326:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f32d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f332:	0f b6 c0             	movzbl %al,%eax
f011f335:	c1 e0 04             	shl    $0x4,%eax
f011f338:	89 c2                	mov    %eax,%edx
f011f33a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f33d:	01 d0                	add    %edx,%eax
f011f33f:	48                   	dec    %eax
f011f340:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f343:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f346:	ba 00 00 00 00       	mov    $0x0,%edx
f011f34b:	f7 75 c0             	divl   -0x40(%ebp)
f011f34e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f351:	29 d0                	sub    %edx,%eax
f011f353:	01 d8                	add    %ebx,%eax
f011f355:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f35a:	39 c1                	cmp    %eax,%ecx
f011f35c:	74 17                	je     f011f375 <test_kfree+0x148>
f011f35e:	83 ec 04             	sub    $0x4,%esp
f011f361:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f366:	68 d7 04 00 00       	push   $0x4d7
f011f36b:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f370:	e8 3b 0e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f375:	e8 3e 4f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f37a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f37d:	74 17                	je     f011f396 <test_kfree+0x169>
f011f37f:	83 ec 04             	sub    $0x4,%esp
f011f382:	68 08 8d 13 f0       	push   $0xf0138d08
f011f387:	68 d8 04 00 00       	push   $0x4d8
f011f38c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f391:	e8 1a 0e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f396:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f399:	e8 74 d2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f39e:	29 c3                	sub    %eax,%ebx
f011f3a0:	89 d8                	mov    %ebx,%eax
f011f3a2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f3a7:	74 17                	je     f011f3c0 <test_kfree+0x193>
f011f3a9:	83 ec 04             	sub    $0x4,%esp
f011f3ac:	68 70 8d 13 f0       	push   $0xf0138d70
f011f3b1:	68 d9 04 00 00       	push   $0x4d9
f011f3b6:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f3bb:	e8 f0 0d fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f3c0:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f3c7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f3ca:	e8 43 d2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f3cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f3d2:	e8 e1 4e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f3d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f3da:	83 ec 0c             	sub    $0xc,%esp
f011f3dd:	68 00 fc 1f 00       	push   $0x1ffc00
f011f3e2:	e8 ac 87 fe ff       	call   f0107b93 <kmalloc>
f011f3e7:	83 c4 10             	add    $0x10,%esp
f011f3ea:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f3f0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f3f6:	89 c1                	mov    %eax,%ecx
f011f3f8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f3ff:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f404:	0f b6 d0             	movzbl %al,%edx
f011f407:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f40a:	01 d0                	add    %edx,%eax
f011f40c:	48                   	dec    %eax
f011f40d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f410:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f413:	ba 00 00 00 00       	mov    $0x0,%edx
f011f418:	f7 75 b8             	divl   -0x48(%ebp)
f011f41b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f41e:	29 d0                	sub    %edx,%eax
f011f420:	89 c3                	mov    %eax,%ebx
f011f422:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f429:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f42e:	0f b6 c0             	movzbl %al,%eax
f011f431:	c1 e0 04             	shl    $0x4,%eax
f011f434:	89 c2                	mov    %eax,%edx
f011f436:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f439:	01 d0                	add    %edx,%eax
f011f43b:	48                   	dec    %eax
f011f43c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f43f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f442:	ba 00 00 00 00       	mov    $0x0,%edx
f011f447:	f7 75 b0             	divl   -0x50(%ebp)
f011f44a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f44d:	29 d0                	sub    %edx,%eax
f011f44f:	01 d8                	add    %ebx,%eax
f011f451:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f456:	39 c1                	cmp    %eax,%ecx
f011f458:	74 17                	je     f011f471 <test_kfree+0x244>
f011f45a:	83 ec 04             	sub    $0x4,%esp
f011f45d:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f462:	68 e0 04 00 00       	push   $0x4e0
f011f467:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f46c:	e8 3f 0d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f471:	e8 42 4e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f476:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f479:	74 17                	je     f011f492 <test_kfree+0x265>
f011f47b:	83 ec 04             	sub    $0x4,%esp
f011f47e:	68 08 8d 13 f0       	push   $0xf0138d08
f011f483:	68 e1 04 00 00       	push   $0x4e1
f011f488:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f48d:	e8 1e 0d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f492:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f495:	e8 78 d1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f49a:	29 c3                	sub    %eax,%ebx
f011f49c:	89 d8                	mov    %ebx,%eax
f011f49e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f4a3:	74 17                	je     f011f4bc <test_kfree+0x28f>
f011f4a5:	83 ec 04             	sub    $0x4,%esp
f011f4a8:	68 70 8d 13 f0       	push   $0xf0138d70
f011f4ad:	68 e2 04 00 00       	push   $0x4e2
f011f4b2:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f4b7:	e8 f4 0c fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f4bc:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f4c3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f4c6:	e8 47 d1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f4cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f4ce:	e8 e5 4d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f4d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f4d6:	83 ec 0c             	sub    $0xc,%esp
f011f4d9:	68 00 08 00 00       	push   $0x800
f011f4de:	e8 b0 86 fe ff       	call   f0107b93 <kmalloc>
f011f4e3:	83 c4 10             	add    $0x10,%esp
f011f4e6:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f4ec:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f4f2:	89 c1                	mov    %eax,%ecx
f011f4f4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f4fb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f500:	0f b6 d0             	movzbl %al,%edx
f011f503:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f506:	01 d0                	add    %edx,%eax
f011f508:	48                   	dec    %eax
f011f509:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f50c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f50f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f514:	f7 75 a8             	divl   -0x58(%ebp)
f011f517:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f51a:	29 d0                	sub    %edx,%eax
f011f51c:	89 c3                	mov    %eax,%ebx
f011f51e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f525:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f52a:	0f b6 c0             	movzbl %al,%eax
f011f52d:	c1 e0 04             	shl    $0x4,%eax
f011f530:	89 c2                	mov    %eax,%edx
f011f532:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f535:	01 d0                	add    %edx,%eax
f011f537:	48                   	dec    %eax
f011f538:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f53b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f53e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f543:	f7 75 a0             	divl   -0x60(%ebp)
f011f546:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f549:	29 d0                	sub    %edx,%eax
f011f54b:	01 d8                	add    %ebx,%eax
f011f54d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f552:	39 c1                	cmp    %eax,%ecx
f011f554:	74 17                	je     f011f56d <test_kfree+0x340>
f011f556:	83 ec 04             	sub    $0x4,%esp
f011f559:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f55e:	68 e9 04 00 00       	push   $0x4e9
f011f563:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f568:	e8 43 0c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f56d:	e8 46 4d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f572:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f575:	74 17                	je     f011f58e <test_kfree+0x361>
f011f577:	83 ec 04             	sub    $0x4,%esp
f011f57a:	68 08 8d 13 f0       	push   $0xf0138d08
f011f57f:	68 ea 04 00 00       	push   $0x4ea
f011f584:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f589:	e8 22 0c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f58e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f591:	e8 7c d0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f596:	29 c3                	sub    %eax,%ebx
f011f598:	89 d8                	mov    %ebx,%eax
f011f59a:	83 f8 01             	cmp    $0x1,%eax
f011f59d:	74 17                	je     f011f5b6 <test_kfree+0x389>
f011f59f:	83 ec 04             	sub    $0x4,%esp
f011f5a2:	68 70 8d 13 f0       	push   $0xf0138d70
f011f5a7:	68 eb 04 00 00       	push   $0x4eb
f011f5ac:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f5b1:	e8 fa 0b fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f5b6:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f5bd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f5c0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f5c6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f5c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f5d0:	eb 0e                	jmp    f011f5e0 <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f5d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f5d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f5d8:	01 d0                	add    %edx,%eax
f011f5da:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f5dd:	ff 45 f4             	incl   -0xc(%ebp)
f011f5e0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f5e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f5e9:	7f e7                	jg     f011f5d2 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f5eb:	e8 22 d0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f5f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f5f3:	e8 c0 4c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f5f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f5fb:	83 ec 0c             	sub    $0xc,%esp
f011f5fe:	68 00 08 00 00       	push   $0x800
f011f603:	e8 8b 85 fe ff       	call   f0107b93 <kmalloc>
f011f608:	83 c4 10             	add    $0x10,%esp
f011f60b:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f611:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f617:	89 c1                	mov    %eax,%ecx
f011f619:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f620:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f625:	0f b6 d0             	movzbl %al,%edx
f011f628:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f62b:	01 d0                	add    %edx,%eax
f011f62d:	48                   	dec    %eax
f011f62e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f631:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f634:	ba 00 00 00 00       	mov    $0x0,%edx
f011f639:	f7 75 94             	divl   -0x6c(%ebp)
f011f63c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f63f:	29 d0                	sub    %edx,%eax
f011f641:	89 c3                	mov    %eax,%ebx
f011f643:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f64a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f64f:	0f b6 c0             	movzbl %al,%eax
f011f652:	c1 e0 04             	shl    $0x4,%eax
f011f655:	89 c2                	mov    %eax,%edx
f011f657:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f65a:	01 d0                	add    %edx,%eax
f011f65c:	48                   	dec    %eax
f011f65d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f660:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f663:	ba 00 00 00 00       	mov    $0x0,%edx
f011f668:	f7 75 8c             	divl   -0x74(%ebp)
f011f66b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f66e:	29 d0                	sub    %edx,%eax
f011f670:	01 d8                	add    %ebx,%eax
f011f672:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f677:	39 c1                	cmp    %eax,%ecx
f011f679:	74 17                	je     f011f692 <test_kfree+0x465>
f011f67b:	83 ec 04             	sub    $0x4,%esp
f011f67e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f683:	68 f7 04 00 00       	push   $0x4f7
f011f688:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f68d:	e8 1e 0b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f692:	e8 21 4c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f697:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f69a:	74 17                	je     f011f6b3 <test_kfree+0x486>
f011f69c:	83 ec 04             	sub    $0x4,%esp
f011f69f:	68 08 8d 13 f0       	push   $0xf0138d08
f011f6a4:	68 f8 04 00 00       	push   $0x4f8
f011f6a9:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f6ae:	e8 fd 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f6b3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f6b6:	e8 57 cf fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f6bb:	29 c3                	sub    %eax,%ebx
f011f6bd:	89 d8                	mov    %ebx,%eax
f011f6bf:	83 f8 01             	cmp    $0x1,%eax
f011f6c2:	74 17                	je     f011f6db <test_kfree+0x4ae>
f011f6c4:	83 ec 04             	sub    $0x4,%esp
f011f6c7:	68 70 8d 13 f0       	push   $0xf0138d70
f011f6cc:	68 f9 04 00 00       	push   $0x4f9
f011f6d1:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f6d6:	e8 d5 0a fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f6db:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011f6e2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f6e5:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f6eb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f6ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f6f5:	eb 0e                	jmp    f011f705 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011f6f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f6fa:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f6fd:	01 d0                	add    %edx,%eax
f011f6ff:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f702:	ff 45 f4             	incl   -0xc(%ebp)
f011f705:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f70b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f70e:	7f e7                	jg     f011f6f7 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f710:	e8 fd ce fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f715:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f718:	e8 9b 4b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f71d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f720:	83 ec 0c             	sub    $0xc,%esp
f011f723:	68 00 1c 00 00       	push   $0x1c00
f011f728:	e8 66 84 fe ff       	call   f0107b93 <kmalloc>
f011f72d:	83 c4 10             	add    $0x10,%esp
f011f730:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f736:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f73c:	89 c1                	mov    %eax,%ecx
f011f73e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f745:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f74a:	0f b6 d0             	movzbl %al,%edx
f011f74d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f750:	01 d0                	add    %edx,%eax
f011f752:	48                   	dec    %eax
f011f753:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f756:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f759:	ba 00 00 00 00       	mov    $0x0,%edx
f011f75e:	f7 75 84             	divl   -0x7c(%ebp)
f011f761:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f764:	29 d0                	sub    %edx,%eax
f011f766:	89 c3                	mov    %eax,%ebx
f011f768:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f76f:	10 00 00 
f011f772:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f777:	0f b6 c0             	movzbl %al,%eax
f011f77a:	c1 e0 04             	shl    $0x4,%eax
f011f77d:	89 c2                	mov    %eax,%edx
f011f77f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f785:	01 d0                	add    %edx,%eax
f011f787:	48                   	dec    %eax
f011f788:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f78e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f794:	ba 00 00 00 00       	mov    $0x0,%edx
f011f799:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f79f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f7a5:	29 d0                	sub    %edx,%eax
f011f7a7:	01 d8                	add    %ebx,%eax
f011f7a9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f7ae:	39 c1                	cmp    %eax,%ecx
f011f7b0:	74 17                	je     f011f7c9 <test_kfree+0x59c>
f011f7b2:	83 ec 04             	sub    $0x4,%esp
f011f7b5:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f7ba:	68 05 05 00 00       	push   $0x505
f011f7bf:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f7c4:	e8 e7 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7c9:	e8 ea 4a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f7ce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f7d1:	74 17                	je     f011f7ea <test_kfree+0x5bd>
f011f7d3:	83 ec 04             	sub    $0x4,%esp
f011f7d6:	68 08 8d 13 f0       	push   $0xf0138d08
f011f7db:	68 06 05 00 00       	push   $0x506
f011f7e0:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f7e5:	e8 c6 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f7ed:	e8 20 ce fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f7f2:	29 c3                	sub    %eax,%ebx
f011f7f4:	89 d8                	mov    %ebx,%eax
f011f7f6:	83 f8 02             	cmp    $0x2,%eax
f011f7f9:	74 17                	je     f011f812 <test_kfree+0x5e5>
f011f7fb:	83 ec 04             	sub    $0x4,%esp
f011f7fe:	68 70 8d 13 f0       	push   $0xf0138d70
f011f803:	68 07 05 00 00       	push   $0x507
f011f808:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f80d:	e8 9e 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f812:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011f819:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f81c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f822:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f825:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f82c:	eb 0e                	jmp    f011f83c <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011f82e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f831:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f834:	01 d0                	add    %edx,%eax
f011f836:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f839:	ff 45 f4             	incl   -0xc(%ebp)
f011f83c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f842:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f845:	7f e7                	jg     f011f82e <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f847:	e8 c6 cd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f84c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f84f:	e8 64 4a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f854:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f857:	83 ec 0c             	sub    $0xc,%esp
f011f85a:	68 00 fc 2f 00       	push   $0x2ffc00
f011f85f:	e8 2f 83 fe ff       	call   f0107b93 <kmalloc>
f011f864:	83 c4 10             	add    $0x10,%esp
f011f867:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f86d:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f873:	89 c1                	mov    %eax,%ecx
f011f875:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f87c:	10 00 00 
f011f87f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f884:	0f b6 d0             	movzbl %al,%edx
f011f887:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f88d:	01 d0                	add    %edx,%eax
f011f88f:	48                   	dec    %eax
f011f890:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f896:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f89c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8a1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f8a7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f8ad:	29 d0                	sub    %edx,%eax
f011f8af:	89 c3                	mov    %eax,%ebx
f011f8b1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f8b8:	10 00 00 
f011f8bb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f8c0:	0f b6 c0             	movzbl %al,%eax
f011f8c3:	c1 e0 04             	shl    $0x4,%eax
f011f8c6:	89 c2                	mov    %eax,%edx
f011f8c8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f8ce:	01 d0                	add    %edx,%eax
f011f8d0:	48                   	dec    %eax
f011f8d1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f8d7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f8dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8e2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f8e8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f8ee:	29 d0                	sub    %edx,%eax
f011f8f0:	01 d8                	add    %ebx,%eax
f011f8f2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011f8f7:	39 c1                	cmp    %eax,%ecx
f011f8f9:	74 17                	je     f011f912 <test_kfree+0x6e5>
f011f8fb:	83 ec 04             	sub    $0x4,%esp
f011f8fe:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011f903:	68 13 05 00 00       	push   $0x513
f011f908:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f90d:	e8 9e 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f912:	e8 a1 49 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f917:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f91a:	74 17                	je     f011f933 <test_kfree+0x706>
f011f91c:	83 ec 04             	sub    $0x4,%esp
f011f91f:	68 08 8d 13 f0       	push   $0xf0138d08
f011f924:	68 14 05 00 00       	push   $0x514
f011f929:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f92e:	e8 7d 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f933:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f936:	e8 d7 cc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f93b:	29 c3                	sub    %eax,%ebx
f011f93d:	89 d8                	mov    %ebx,%eax
f011f93f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f944:	74 17                	je     f011f95d <test_kfree+0x730>
f011f946:	83 ec 04             	sub    $0x4,%esp
f011f949:	68 70 8d 13 f0       	push   $0xf0138d70
f011f94e:	68 15 05 00 00       	push   $0x515
f011f953:	68 ee 8c 13 f0       	push   $0xf0138cee
f011f958:	e8 53 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011f95d:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011f964:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011f967:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f96d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f970:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f977:	eb 0e                	jmp    f011f987 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011f979:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f97c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f97f:	01 d0                	add    %edx,%eax
f011f981:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f984:	ff 45 f4             	incl   -0xc(%ebp)
f011f987:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f98d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f990:	7f e7                	jg     f011f979 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f992:	e8 7b cc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f997:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f99a:	e8 19 49 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f99f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011f9a2:	83 ec 0c             	sub    $0xc,%esp
f011f9a5:	68 00 fc 5f 00       	push   $0x5ffc00
f011f9aa:	e8 e4 81 fe ff       	call   f0107b93 <kmalloc>
f011f9af:	83 c4 10             	add    $0x10,%esp
f011f9b2:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9b8:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011f9be:	89 c1                	mov    %eax,%ecx
f011f9c0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f9c7:	10 00 00 
f011f9ca:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f9cf:	0f b6 d0             	movzbl %al,%edx
f011f9d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f9d8:	01 d0                	add    %edx,%eax
f011f9da:	48                   	dec    %eax
f011f9db:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f9e1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f9e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9ec:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f9f2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f9f8:	29 d0                	sub    %edx,%eax
f011f9fa:	89 c3                	mov    %eax,%ebx
f011f9fc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fa03:	10 00 00 
f011fa06:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fa0b:	0f b6 c0             	movzbl %al,%eax
f011fa0e:	c1 e0 04             	shl    $0x4,%eax
f011fa11:	89 c2                	mov    %eax,%edx
f011fa13:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fa19:	01 d0                	add    %edx,%eax
f011fa1b:	48                   	dec    %eax
f011fa1c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fa22:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fa28:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa2d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fa33:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fa39:	29 d0                	sub    %edx,%eax
f011fa3b:	01 d8                	add    %ebx,%eax
f011fa3d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fa42:	39 c1                	cmp    %eax,%ecx
f011fa44:	74 17                	je     f011fa5d <test_kfree+0x830>
f011fa46:	83 ec 04             	sub    $0x4,%esp
f011fa49:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011fa4e:	68 21 05 00 00       	push   $0x521
f011fa53:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fa58:	e8 53 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa5d:	e8 56 48 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fa62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa65:	74 17                	je     f011fa7e <test_kfree+0x851>
f011fa67:	83 ec 04             	sub    $0x4,%esp
f011fa6a:	68 08 8d 13 f0       	push   $0xf0138d08
f011fa6f:	68 22 05 00 00       	push   $0x522
f011fa74:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fa79:	e8 32 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa81:	e8 8c cb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fa86:	29 c3                	sub    %eax,%ebx
f011fa88:	89 d8                	mov    %ebx,%eax
f011fa8a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fa8f:	74 17                	je     f011faa8 <test_kfree+0x87b>
f011fa91:	83 ec 04             	sub    $0x4,%esp
f011fa94:	68 70 8d 13 f0       	push   $0xf0138d70
f011fa99:	68 23 05 00 00       	push   $0x523
f011fa9e:	68 ee 8c 13 f0       	push   $0xf0138cee
f011faa3:	e8 08 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011faa8:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011faaf:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fab2:	e8 5b cb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fab7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011faba:	e8 f9 47 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fabf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fac2:	83 ec 0c             	sub    $0xc,%esp
f011fac5:	68 00 38 00 00       	push   $0x3800
f011faca:	e8 c4 80 fe ff       	call   f0107b93 <kmalloc>
f011facf:	83 c4 10             	add    $0x10,%esp
f011fad2:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fad8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fade:	89 c1                	mov    %eax,%ecx
f011fae0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fae7:	10 00 00 
f011faea:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011faef:	0f b6 d0             	movzbl %al,%edx
f011faf2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011faf8:	01 d0                	add    %edx,%eax
f011fafa:	48                   	dec    %eax
f011fafb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fb01:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fb07:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb0c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fb12:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fb18:	29 d0                	sub    %edx,%eax
f011fb1a:	89 c3                	mov    %eax,%ebx
f011fb1c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fb23:	10 00 00 
f011fb26:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fb2b:	0f b6 c0             	movzbl %al,%eax
f011fb2e:	c1 e0 04             	shl    $0x4,%eax
f011fb31:	89 c2                	mov    %eax,%edx
f011fb33:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fb39:	01 d0                	add    %edx,%eax
f011fb3b:	48                   	dec    %eax
f011fb3c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fb42:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fb48:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb4d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011fb53:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fb59:	29 d0                	sub    %edx,%eax
f011fb5b:	01 d8                	add    %ebx,%eax
f011fb5d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011fb62:	39 c1                	cmp    %eax,%ecx
f011fb64:	74 17                	je     f011fb7d <test_kfree+0x950>
f011fb66:	83 ec 04             	sub    $0x4,%esp
f011fb69:	68 d4 8d 13 f0       	push   $0xf0138dd4
f011fb6e:	68 2a 05 00 00       	push   $0x52a
f011fb73:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fb78:	e8 33 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb7d:	e8 36 47 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fb82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb85:	74 17                	je     f011fb9e <test_kfree+0x971>
f011fb87:	83 ec 04             	sub    $0x4,%esp
f011fb8a:	68 08 8d 13 f0       	push   $0xf0138d08
f011fb8f:	68 2b 05 00 00       	push   $0x52b
f011fb94:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fb99:	e8 12 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb9e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fba1:	e8 6c ca fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fba6:	29 c3                	sub    %eax,%ebx
f011fba8:	89 d8                	mov    %ebx,%eax
f011fbaa:	83 f8 04             	cmp    $0x4,%eax
f011fbad:	74 17                	je     f011fbc6 <test_kfree+0x999>
f011fbaf:	83 ec 04             	sub    $0x4,%esp
f011fbb2:	68 70 8d 13 f0       	push   $0xf0138d70
f011fbb7:	68 2c 05 00 00       	push   $0x52c
f011fbbc:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fbc1:	e8 ea 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011fbc6:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011fbcd:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011fbd0:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fbd6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fbd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbe0:	eb 0e                	jmp    f011fbf0 <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011fbe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fbe5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fbe8:	01 d0                	add    %edx,%eax
f011fbea:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fbed:	ff 45 f4             	incl   -0xc(%ebp)
f011fbf0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fbf6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fbf9:	7f e7                	jg     f011fbe2 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fbfb:	e8 12 ca fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fc00:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fc06:	e8 ad 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fc0b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011fc11:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011fc17:	83 ec 0c             	sub    $0xc,%esp
f011fc1a:	50                   	push   %eax
f011fc1b:	e8 8d 7f fe ff       	call   f0107bad <kfree>
f011fc20:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc23:	e8 90 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fc28:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fc2e:	74 17                	je     f011fc47 <test_kfree+0xa1a>
f011fc30:	83 ec 04             	sub    $0x4,%esp
f011fc33:	68 08 8d 13 f0       	push   $0xf0138d08
f011fc38:	68 3b 05 00 00       	push   $0x53b
f011fc3d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fc42:	e8 69 05 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fc47:	e8 c6 c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fc4c:	89 c2                	mov    %eax,%edx
f011fc4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fc54:	29 c2                	sub    %eax,%edx
f011fc56:	89 d0                	mov    %edx,%eax
f011fc58:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fc5d:	74 17                	je     f011fc76 <test_kfree+0xa49>
f011fc5f:	83 ec 04             	sub    $0x4,%esp
f011fc62:	68 78 94 13 f0       	push   $0xf0139478
f011fc67:	68 3c 05 00 00       	push   $0x53c
f011fc6c:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fc71:	e8 3a 05 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc76:	e8 97 c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fc7b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc81:	e8 32 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fc86:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f011fc8c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fc92:	83 ec 0c             	sub    $0xc,%esp
f011fc95:	50                   	push   %eax
f011fc96:	e8 12 7f fe ff       	call   f0107bad <kfree>
f011fc9b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc9e:	e8 15 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fca3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fca9:	74 17                	je     f011fcc2 <test_kfree+0xa95>
f011fcab:	83 ec 04             	sub    $0x4,%esp
f011fcae:	68 08 8d 13 f0       	push   $0xf0138d08
f011fcb3:	68 42 05 00 00       	push   $0x542
f011fcb8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fcbd:	e8 ee 04 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fcc2:	e8 4b c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fcc7:	89 c2                	mov    %eax,%edx
f011fcc9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fccf:	29 c2                	sub    %eax,%edx
f011fcd1:	89 d0                	mov    %edx,%eax
f011fcd3:	83 f8 01             	cmp    $0x1,%eax
f011fcd6:	74 17                	je     f011fcef <test_kfree+0xac2>
f011fcd8:	83 ec 04             	sub    $0x4,%esp
f011fcdb:	68 78 94 13 f0       	push   $0xf0139478
f011fce0:	68 43 05 00 00       	push   $0x543
f011fce5:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fcea:	e8 c1 04 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fcef:	e8 1e c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fcf4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fcfa:	e8 b9 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fcff:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f011fd05:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011fd0b:	83 ec 0c             	sub    $0xc,%esp
f011fd0e:	50                   	push   %eax
f011fd0f:	e8 99 7e fe ff       	call   f0107bad <kfree>
f011fd14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd17:	e8 9c 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fd1c:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fd22:	74 17                	je     f011fd3b <test_kfree+0xb0e>
f011fd24:	83 ec 04             	sub    $0x4,%esp
f011fd27:	68 08 8d 13 f0       	push   $0xf0138d08
f011fd2c:	68 49 05 00 00       	push   $0x549
f011fd31:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fd36:	e8 75 04 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011fd3b:	e8 d2 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fd40:	89 c2                	mov    %eax,%edx
f011fd42:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fd48:	29 c2                	sub    %eax,%edx
f011fd4a:	89 d0                	mov    %edx,%eax
f011fd4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fd51:	74 17                	je     f011fd6a <test_kfree+0xb3d>
f011fd53:	83 ec 04             	sub    $0x4,%esp
f011fd56:	68 78 94 13 f0       	push   $0xf0139478
f011fd5b:	68 4a 05 00 00       	push   $0x54a
f011fd60:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fd65:	e8 46 04 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd6a:	e8 a3 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fd6f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd75:	e8 3e 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fd7a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f011fd80:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fd86:	83 ec 0c             	sub    $0xc,%esp
f011fd89:	50                   	push   %eax
f011fd8a:	e8 1e 7e fe ff       	call   f0107bad <kfree>
f011fd8f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd92:	e8 21 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fd97:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fd9d:	74 17                	je     f011fdb6 <test_kfree+0xb89>
f011fd9f:	83 ec 04             	sub    $0x4,%esp
f011fda2:	68 08 8d 13 f0       	push   $0xf0138d08
f011fda7:	68 50 05 00 00       	push   $0x550
f011fdac:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fdb1:	e8 fa 03 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011fdb6:	e8 57 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fdbb:	89 c2                	mov    %eax,%edx
f011fdbd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fdc3:	29 c2                	sub    %eax,%edx
f011fdc5:	89 d0                	mov    %edx,%eax
f011fdc7:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fdcc:	74 17                	je     f011fde5 <test_kfree+0xbb8>
f011fdce:	83 ec 04             	sub    $0x4,%esp
f011fdd1:	68 78 94 13 f0       	push   $0xf0139478
f011fdd6:	68 51 05 00 00       	push   $0x551
f011fddb:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fde0:	e8 cb 03 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011fde5:	83 ec 0c             	sub    $0xc,%esp
f011fde8:	68 b0 94 13 f0       	push   $0xf01394b0
f011fded:	e8 3f 10 fe ff       	call   f0100e31 <cprintf>
f011fdf2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011fdf5:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fdfb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fdfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe05:	eb 1e                	jmp    f011fe25 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f011fe07:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011fe0d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fe10:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fe13:	01 c8                	add    %ecx,%eax
f011fe15:	8a 00                	mov    (%eax),%al
f011fe17:	0f be c0             	movsbl %al,%eax
f011fe1a:	01 d0                	add    %edx,%eax
f011fe1c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fe22:	ff 45 f4             	incl   -0xc(%ebp)
f011fe25:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe2b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe2e:	7f d7                	jg     f011fe07 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011fe30:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011fe36:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe3c:	89 c1                	mov    %eax,%ecx
f011fe3e:	01 c9                	add    %ecx,%ecx
f011fe40:	01 c8                	add    %ecx,%eax
f011fe42:	39 c2                	cmp    %eax,%edx
f011fe44:	74 17                	je     f011fe5d <test_kfree+0xc30>
f011fe46:	83 ec 04             	sub    $0x4,%esp
f011fe49:	68 d4 94 13 f0       	push   $0xf01394d4
f011fe4e:	68 5e 05 00 00       	push   $0x55e
f011fe53:	68 ee 8c 13 f0       	push   $0xf0138cee
f011fe58:	e8 53 03 fe ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011fe5d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fe63:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fe66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe6d:	eb 1e                	jmp    f011fe8d <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f011fe6f:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f011fe75:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fe78:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fe7b:	01 c8                	add    %ecx,%eax
f011fe7d:	8a 00                	mov    (%eax),%al
f011fe7f:	0f be c0             	movsbl %al,%eax
f011fe82:	01 d0                	add    %edx,%eax
f011fe84:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fe8a:	ff 45 f4             	incl   -0xc(%ebp)
f011fe8d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fe93:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe96:	7f d7                	jg     f011fe6f <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011fe98:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011fe9e:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f011fea4:	c1 e2 02             	shl    $0x2,%edx
f011fea7:	39 d0                	cmp    %edx,%eax
f011fea9:	74 17                	je     f011fec2 <test_kfree+0xc95>
f011feab:	83 ec 04             	sub    $0x4,%esp
f011feae:	68 d4 94 13 f0       	push   $0xf01394d4
f011feb3:	68 66 05 00 00       	push   $0x566
f011feb8:	68 ee 8c 13 f0       	push   $0xf0138cee
f011febd:	e8 ee 02 fe ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011fec2:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fec8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fecb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fed2:	eb 1e                	jmp    f011fef2 <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f011fed4:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f011feda:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fedd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fee0:	01 c8                	add    %ecx,%eax
f011fee2:	8a 00                	mov    (%eax),%al
f011fee4:	0f be c0             	movsbl %al,%eax
f011fee7:	01 d0                	add    %edx,%eax
f011fee9:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011feef:	ff 45 f4             	incl   -0xc(%ebp)
f011fef2:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fef8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fefb:	7f d7                	jg     f011fed4 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011fefd:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f011ff03:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f011ff09:	89 d0                	mov    %edx,%eax
f011ff0b:	c1 e0 02             	shl    $0x2,%eax
f011ff0e:	01 d0                	add    %edx,%eax
f011ff10:	39 c1                	cmp    %eax,%ecx
f011ff12:	74 17                	je     f011ff2b <test_kfree+0xcfe>
f011ff14:	83 ec 04             	sub    $0x4,%esp
f011ff17:	68 d4 94 13 f0       	push   $0xf01394d4
f011ff1c:	68 6e 05 00 00       	push   $0x56e
f011ff21:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ff26:	e8 85 02 fe ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011ff2b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ff31:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ff34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff3b:	eb 1e                	jmp    f011ff5b <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f011ff3d:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f011ff43:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ff46:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff49:	01 c8                	add    %ecx,%eax
f011ff4b:	8a 00                	mov    (%eax),%al
f011ff4d:	0f be c0             	movsbl %al,%eax
f011ff50:	01 d0                	add    %edx,%eax
f011ff52:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ff58:	ff 45 f4             	incl   -0xc(%ebp)
f011ff5b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ff61:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff64:	7f d7                	jg     f011ff3d <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011ff66:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f011ff6c:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f011ff72:	89 d0                	mov    %edx,%eax
f011ff74:	01 c0                	add    %eax,%eax
f011ff76:	01 d0                	add    %edx,%eax
f011ff78:	01 c0                	add    %eax,%eax
f011ff7a:	01 d0                	add    %edx,%eax
f011ff7c:	39 c1                	cmp    %eax,%ecx
f011ff7e:	74 17                	je     f011ff97 <test_kfree+0xd6a>
f011ff80:	83 ec 04             	sub    $0x4,%esp
f011ff83:	68 d4 94 13 f0       	push   $0xf01394d4
f011ff88:	68 76 05 00 00       	push   $0x576
f011ff8d:	68 ee 8c 13 f0       	push   $0xf0138cee
f011ff92:	e8 19 02 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f011ff97:	83 ec 0c             	sub    $0xc,%esp
f011ff9a:	68 07 95 13 f0       	push   $0xf0139507
f011ff9f:	e8 8d 0e fe ff       	call   f0100e31 <cprintf>
f011ffa4:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011ffa7:	e8 66 c6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ffac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ffaf:	e8 04 43 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ffb4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011ffb7:	83 ec 0c             	sub    $0xc,%esp
f011ffba:	68 00 50 00 00       	push   $0x5000
f011ffbf:	e8 cf 7b fe ff       	call   f0107b93 <kmalloc>
f011ffc4:	83 c4 10             	add    $0x10,%esp
f011ffc7:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ffcd:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011ffd3:	89 c1                	mov    %eax,%ecx
f011ffd5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ffdc:	10 00 00 
f011ffdf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ffe4:	0f b6 d0             	movzbl %al,%edx
f011ffe7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ffed:	01 d0                	add    %edx,%eax
f011ffef:	48                   	dec    %eax
f011fff0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011fff6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fffc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120001:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120007:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012000d:	29 d0                	sub    %edx,%eax
f012000f:	89 c3                	mov    %eax,%ebx
f0120011:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120018:	10 00 00 
f012001b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120020:	0f b6 c0             	movzbl %al,%eax
f0120023:	c1 e0 04             	shl    $0x4,%eax
f0120026:	89 c2                	mov    %eax,%edx
f0120028:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012002e:	01 d0                	add    %edx,%eax
f0120030:	48                   	dec    %eax
f0120031:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120037:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012003d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120042:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120048:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012004e:	29 d0                	sub    %edx,%eax
f0120050:	01 d8                	add    %ebx,%eax
f0120052:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120057:	39 c1                	cmp    %eax,%ecx
f0120059:	74 17                	je     f0120072 <test_kfree+0xe45>
f012005b:	83 ec 04             	sub    $0x4,%esp
f012005e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0120063:	68 80 05 00 00       	push   $0x580
f0120068:	68 ee 8c 13 f0       	push   $0xf0138cee
f012006d:	e8 3e 01 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120072:	e8 41 42 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120077:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012007a:	74 17                	je     f0120093 <test_kfree+0xe66>
f012007c:	83 ec 04             	sub    $0x4,%esp
f012007f:	68 08 8d 13 f0       	push   $0xf0138d08
f0120084:	68 81 05 00 00       	push   $0x581
f0120089:	68 ee 8c 13 f0       	push   $0xf0138cee
f012008e:	e8 1d 01 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120093:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120096:	e8 77 c5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012009b:	29 c3                	sub    %eax,%ebx
f012009d:	89 d8                	mov    %ebx,%eax
f012009f:	83 f8 05             	cmp    $0x5,%eax
f01200a2:	74 17                	je     f01200bb <test_kfree+0xe8e>
f01200a4:	83 ec 04             	sub    $0x4,%esp
f01200a7:	68 70 8d 13 f0       	push   $0xf0138d70
f01200ac:	68 82 05 00 00       	push   $0x582
f01200b1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01200b6:	e8 f5 00 fe ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01200bb:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01200c2:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01200c5:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01200cb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01200ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01200d5:	eb 0e                	jmp    f01200e5 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f01200d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200da:	8b 45 98             	mov    -0x68(%ebp),%eax
f01200dd:	01 d0                	add    %edx,%eax
f01200df:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01200e2:	ff 45 f4             	incl   -0xc(%ebp)
f01200e5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01200eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200ee:	7f e7                	jg     f01200d7 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01200f0:	e8 1d c5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01200f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200f8:	e8 bb 41 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01200fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120100:	83 ec 0c             	sub    $0xc,%esp
f0120103:	68 00 00 10 00       	push   $0x100000
f0120108:	e8 86 7a fe ff       	call   f0107b93 <kmalloc>
f012010d:	83 c4 10             	add    $0x10,%esp
f0120110:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120116:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012011c:	89 c1                	mov    %eax,%ecx
f012011e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120125:	10 00 00 
f0120128:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012012d:	0f b6 d0             	movzbl %al,%edx
f0120130:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120136:	01 d0                	add    %edx,%eax
f0120138:	48                   	dec    %eax
f0120139:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012013f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120145:	ba 00 00 00 00       	mov    $0x0,%edx
f012014a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120150:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120156:	29 d0                	sub    %edx,%eax
f0120158:	89 c3                	mov    %eax,%ebx
f012015a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120161:	10 00 00 
f0120164:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120169:	0f b6 c0             	movzbl %al,%eax
f012016c:	c1 e0 04             	shl    $0x4,%eax
f012016f:	89 c2                	mov    %eax,%edx
f0120171:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120177:	01 d0                	add    %edx,%eax
f0120179:	48                   	dec    %eax
f012017a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120180:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120186:	ba 00 00 00 00       	mov    $0x0,%edx
f012018b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120191:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120197:	29 d0                	sub    %edx,%eax
f0120199:	01 d8                	add    %ebx,%eax
f012019b:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01201a0:	39 c1                	cmp    %eax,%ecx
f01201a2:	74 17                	je     f01201bb <test_kfree+0xf8e>
f01201a4:	83 ec 04             	sub    $0x4,%esp
f01201a7:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01201ac:	68 8e 05 00 00       	push   $0x58e
f01201b1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01201b6:	e8 f5 ff fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201bb:	e8 f8 40 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01201c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201c3:	74 17                	je     f01201dc <test_kfree+0xfaf>
f01201c5:	83 ec 04             	sub    $0x4,%esp
f01201c8:	68 08 8d 13 f0       	push   $0xf0138d08
f01201cd:	68 8f 05 00 00       	push   $0x58f
f01201d2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01201d7:	e8 d4 ff fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201dc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201df:	e8 2e c4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01201e4:	29 c3                	sub    %eax,%ebx
f01201e6:	89 d8                	mov    %ebx,%eax
f01201e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01201ed:	74 17                	je     f0120206 <test_kfree+0xfd9>
f01201ef:	83 ec 04             	sub    $0x4,%esp
f01201f2:	68 70 8d 13 f0       	push   $0xf0138d70
f01201f7:	68 90 05 00 00       	push   $0x590
f01201fc:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120201:	e8 aa ff fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120206:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f012020d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120210:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120216:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120219:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120220:	eb 0e                	jmp    f0120230 <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f0120222:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120225:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120228:	01 d0                	add    %edx,%eax
f012022a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012022d:	ff 45 f4             	incl   -0xc(%ebp)
f0120230:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120236:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120239:	7f e7                	jg     f0120222 <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f012023b:	e8 16 7e ff ff       	call   f0118056 <isKHeapPlacementStrategyNEXTFIT>
f0120240:	84 c0                	test   %al,%al
f0120242:	0f 84 9e 05 00 00    	je     f01207e6 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120248:	e8 c5 c3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012024d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120250:	e8 63 40 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120255:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120258:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012025f:	10 00 00 
f0120262:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120267:	0f b6 d0             	movzbl %al,%edx
f012026a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120270:	01 d0                	add    %edx,%eax
f0120272:	48                   	dec    %eax
f0120273:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120279:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012027f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120284:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012028a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120290:	29 d0                	sub    %edx,%eax
f0120292:	89 c1                	mov    %eax,%ecx
f0120294:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012029b:	10 00 00 
f012029e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01202a3:	0f b6 c0             	movzbl %al,%eax
f01202a6:	c1 e0 04             	shl    $0x4,%eax
f01202a9:	89 c2                	mov    %eax,%edx
f01202ab:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01202b1:	01 d0                	add    %edx,%eax
f01202b3:	48                   	dec    %eax
f01202b4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01202ba:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01202c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01202c5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01202cb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01202d1:	29 d0                	sub    %edx,%eax
f01202d3:	01 c8                	add    %ecx,%eax
f01202d5:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01202da:	29 c2                	sub    %eax,%edx
f01202dc:	89 d0                	mov    %edx,%eax
f01202de:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01202e4:	83 ec 0c             	sub    $0xc,%esp
f01202e7:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f01202ed:	e8 a1 78 fe ff       	call   f0107b93 <kmalloc>
f01202f2:	83 c4 10             	add    $0x10,%esp
f01202f5:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202fb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120301:	89 c1                	mov    %eax,%ecx
f0120303:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012030a:	10 00 00 
f012030d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120312:	0f b6 d0             	movzbl %al,%edx
f0120315:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012031b:	01 d0                	add    %edx,%eax
f012031d:	48                   	dec    %eax
f012031e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0120324:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012032a:	ba 00 00 00 00       	mov    $0x0,%edx
f012032f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0120335:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012033b:	29 d0                	sub    %edx,%eax
f012033d:	89 c3                	mov    %eax,%ebx
f012033f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120346:	10 00 00 
f0120349:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012034e:	0f b6 c0             	movzbl %al,%eax
f0120351:	c1 e0 04             	shl    $0x4,%eax
f0120354:	89 c2                	mov    %eax,%edx
f0120356:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012035c:	01 d0                	add    %edx,%eax
f012035e:	48                   	dec    %eax
f012035f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120365:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012036b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120370:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120376:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012037c:	29 d0                	sub    %edx,%eax
f012037e:	01 d8                	add    %ebx,%eax
f0120380:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120385:	39 c1                	cmp    %eax,%ecx
f0120387:	74 17                	je     f01203a0 <test_kfree+0x1173>
f0120389:	83 ec 04             	sub    $0x4,%esp
f012038c:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0120391:	68 9f 05 00 00       	push   $0x59f
f0120396:	68 ee 8c 13 f0       	push   $0xf0138cee
f012039b:	e8 10 fe fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203a0:	e8 13 3f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01203a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203a8:	74 17                	je     f01203c1 <test_kfree+0x1194>
f01203aa:	83 ec 04             	sub    $0x4,%esp
f01203ad:	68 08 8d 13 f0       	push   $0xf0138d08
f01203b2:	68 a0 05 00 00       	push   $0x5a0
f01203b7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01203bc:	e8 ef fd fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01203c1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01203c4:	e8 49 c2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01203c9:	29 c3                	sub    %eax,%ebx
f01203cb:	89 da                	mov    %ebx,%edx
f01203cd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01203d3:	c1 e8 0c             	shr    $0xc,%eax
f01203d6:	39 c2                	cmp    %eax,%edx
f01203d8:	74 17                	je     f01203f1 <test_kfree+0x11c4>
f01203da:	83 ec 04             	sub    $0x4,%esp
f01203dd:	68 70 8d 13 f0       	push   $0xf0138d70
f01203e2:	68 a1 05 00 00       	push   $0x5a1
f01203e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01203ec:	e8 bf fd fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01203f1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01203f7:	48                   	dec    %eax
f01203f8:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f01203fe:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120404:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120407:	e8 06 c2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012040c:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012040f:	e8 a4 3e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120414:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120417:	83 ec 0c             	sub    $0xc,%esp
f012041a:	68 00 00 30 00       	push   $0x300000
f012041f:	e8 6f 77 fe ff       	call   f0107b93 <kmalloc>
f0120424:	83 c4 10             	add    $0x10,%esp
f0120427:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012042d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120433:	89 c1                	mov    %eax,%ecx
f0120435:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012043c:	10 00 00 
f012043f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120444:	0f b6 d0             	movzbl %al,%edx
f0120447:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012044d:	01 d0                	add    %edx,%eax
f012044f:	48                   	dec    %eax
f0120450:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120456:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012045c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120461:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120467:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012046d:	29 d0                	sub    %edx,%eax
f012046f:	89 c3                	mov    %eax,%ebx
f0120471:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120478:	10 00 00 
f012047b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120480:	0f b6 c0             	movzbl %al,%eax
f0120483:	c1 e0 04             	shl    $0x4,%eax
f0120486:	89 c2                	mov    %eax,%edx
f0120488:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012048e:	01 d0                	add    %edx,%eax
f0120490:	48                   	dec    %eax
f0120491:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120497:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012049d:	ba 00 00 00 00       	mov    $0x0,%edx
f01204a2:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01204a8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01204ae:	29 d0                	sub    %edx,%eax
f01204b0:	01 d8                	add    %ebx,%eax
f01204b2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01204b7:	39 c1                	cmp    %eax,%ecx
f01204b9:	74 17                	je     f01204d2 <test_kfree+0x12a5>
f01204bb:	83 ec 04             	sub    $0x4,%esp
f01204be:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01204c3:	68 ae 05 00 00       	push   $0x5ae
f01204c8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01204cd:	e8 de fc fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204d2:	e8 e1 3d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01204d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01204da:	74 17                	je     f01204f3 <test_kfree+0x12c6>
f01204dc:	83 ec 04             	sub    $0x4,%esp
f01204df:	68 08 8d 13 f0       	push   $0xf0138d08
f01204e4:	68 af 05 00 00       	push   $0x5af
f01204e9:	68 ee 8c 13 f0       	push   $0xf0138cee
f01204ee:	e8 bd fc fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204f3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01204f6:	e8 17 c1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01204fb:	29 c3                	sub    %eax,%ebx
f01204fd:	89 d8                	mov    %ebx,%eax
f01204ff:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120504:	74 17                	je     f012051d <test_kfree+0x12f0>
f0120506:	83 ec 04             	sub    $0x4,%esp
f0120509:	68 70 8d 13 f0       	push   $0xf0138d70
f012050e:	68 b0 05 00 00       	push   $0x5b0
f0120513:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120518:	e8 93 fc fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012051d:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120524:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120527:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012052d:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120530:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120537:	eb 0e                	jmp    f0120547 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120539:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012053c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012053f:	01 d0                	add    %edx,%eax
f0120541:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120544:	ff 45 f4             	incl   -0xc(%ebp)
f0120547:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012054d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120550:	7f e7                	jg     f0120539 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120552:	e8 bb c0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120557:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012055a:	e8 59 3d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012055f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120562:	83 ec 0c             	sub    $0xc,%esp
f0120565:	68 00 08 00 00       	push   $0x800
f012056a:	e8 24 76 fe ff       	call   f0107b93 <kmalloc>
f012056f:	83 c4 10             	add    $0x10,%esp
f0120572:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120578:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012057e:	89 c1                	mov    %eax,%ecx
f0120580:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120587:	10 00 00 
f012058a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012058f:	0f b6 d0             	movzbl %al,%edx
f0120592:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120598:	01 d0                	add    %edx,%eax
f012059a:	48                   	dec    %eax
f012059b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01205a1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01205a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01205ac:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01205b2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01205b8:	29 d0                	sub    %edx,%eax
f01205ba:	89 c3                	mov    %eax,%ebx
f01205bc:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01205c3:	10 00 00 
f01205c6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01205cb:	0f b6 c0             	movzbl %al,%eax
f01205ce:	c1 e0 04             	shl    $0x4,%eax
f01205d1:	89 c2                	mov    %eax,%edx
f01205d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01205d9:	01 d0                	add    %edx,%eax
f01205db:	48                   	dec    %eax
f01205dc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01205e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01205e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01205ed:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01205f3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01205f9:	29 d0                	sub    %edx,%eax
f01205fb:	01 d8                	add    %ebx,%eax
f01205fd:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120602:	39 c1                	cmp    %eax,%ecx
f0120604:	74 17                	je     f012061d <test_kfree+0x13f0>
f0120606:	83 ec 04             	sub    $0x4,%esp
f0120609:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012060e:	68 bc 05 00 00       	push   $0x5bc
f0120613:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120618:	e8 93 fb fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012061d:	e8 96 3c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120622:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120625:	74 17                	je     f012063e <test_kfree+0x1411>
f0120627:	83 ec 04             	sub    $0x4,%esp
f012062a:	68 08 8d 13 f0       	push   $0xf0138d08
f012062f:	68 bd 05 00 00       	push   $0x5bd
f0120634:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120639:	e8 72 fb fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012063e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120641:	e8 cc bf fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120646:	29 c3                	sub    %eax,%ebx
f0120648:	89 d8                	mov    %ebx,%eax
f012064a:	83 f8 01             	cmp    $0x1,%eax
f012064d:	74 17                	je     f0120666 <test_kfree+0x1439>
f012064f:	83 ec 04             	sub    $0x4,%esp
f0120652:	68 70 8d 13 f0       	push   $0xf0138d70
f0120657:	68 be 05 00 00       	push   $0x5be
f012065c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120661:	e8 4a fb fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120666:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f012066d:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120670:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120676:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120679:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120680:	eb 0e                	jmp    f0120690 <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120682:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120685:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120688:	01 d0                	add    %edx,%eax
f012068a:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f012068d:	ff 45 f4             	incl   -0xc(%ebp)
f0120690:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120696:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120699:	7f e7                	jg     f0120682 <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f012069b:	e8 72 bf fe ff       	call   f010c612 <sys_calculate_free_frames>
f01206a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01206a3:	e8 10 3c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01206a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01206ab:	83 ec 0c             	sub    $0xc,%esp
f01206ae:	68 00 00 10 00       	push   $0x100000
f01206b3:	e8 db 74 fe ff       	call   f0107b93 <kmalloc>
f01206b8:	83 c4 10             	add    $0x10,%esp
f01206bb:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206c1:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01206c7:	89 c1                	mov    %eax,%ecx
f01206c9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01206d0:	10 00 00 
f01206d3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01206d8:	0f b6 d0             	movzbl %al,%edx
f01206db:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01206e1:	01 d0                	add    %edx,%eax
f01206e3:	48                   	dec    %eax
f01206e4:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01206ea:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01206f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01206f5:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01206fb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120701:	29 d0                	sub    %edx,%eax
f0120703:	89 c3                	mov    %eax,%ebx
f0120705:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012070c:	10 00 00 
f012070f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120714:	0f b6 c0             	movzbl %al,%eax
f0120717:	c1 e0 04             	shl    $0x4,%eax
f012071a:	89 c2                	mov    %eax,%edx
f012071c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120722:	01 d0                	add    %edx,%eax
f0120724:	48                   	dec    %eax
f0120725:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012072b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120731:	ba 00 00 00 00       	mov    $0x0,%edx
f0120736:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012073c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120742:	29 d0                	sub    %edx,%eax
f0120744:	01 d8                	add    %ebx,%eax
f0120746:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012074b:	39 c1                	cmp    %eax,%ecx
f012074d:	74 17                	je     f0120766 <test_kfree+0x1539>
f012074f:	83 ec 04             	sub    $0x4,%esp
f0120752:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0120757:	68 ca 05 00 00       	push   $0x5ca
f012075c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120761:	e8 4a fa fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120766:	e8 4d 3b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012076b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012076e:	74 17                	je     f0120787 <test_kfree+0x155a>
f0120770:	83 ec 04             	sub    $0x4,%esp
f0120773:	68 08 8d 13 f0       	push   $0xf0138d08
f0120778:	68 cb 05 00 00       	push   $0x5cb
f012077d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120782:	e8 29 fa fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120787:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012078a:	e8 83 be fe ff       	call   f010c612 <sys_calculate_free_frames>
f012078f:	29 c3                	sub    %eax,%ebx
f0120791:	89 d8                	mov    %ebx,%eax
f0120793:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120798:	74 17                	je     f01207b1 <test_kfree+0x1584>
f012079a:	83 ec 04             	sub    $0x4,%esp
f012079d:	68 70 8d 13 f0       	push   $0xf0138d70
f01207a2:	68 cc 05 00 00       	push   $0x5cc
f01207a7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01207ac:	e8 ff f9 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f01207b1:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f01207b8:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01207bb:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01207c1:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01207c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01207cb:	eb 0e                	jmp    f01207db <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f01207cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01207d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01207d3:	01 d0                	add    %edx,%eax
f01207d5:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01207d8:	ff 45 f4             	incl   -0xc(%ebp)
f01207db:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01207e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207e4:	7f e7                	jg     f01207cd <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01207e6:	83 ec 0c             	sub    $0xc,%esp
f01207e9:	68 0e 95 13 f0       	push   $0xf013950e
f01207ee:	e8 3e 06 fe ff       	call   f0100e31 <cprintf>
f01207f3:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01207f6:	e8 17 be fe ff       	call   f010c612 <sys_calculate_free_frames>
f01207fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207fe:	e8 b5 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120803:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120806:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012080c:	83 ec 0c             	sub    $0xc,%esp
f012080f:	50                   	push   %eax
f0120810:	e8 98 73 fe ff       	call   f0107bad <kfree>
f0120815:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120818:	e8 9b 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012081d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120820:	74 17                	je     f0120839 <test_kfree+0x160c>
f0120822:	83 ec 04             	sub    $0x4,%esp
f0120825:	68 08 8d 13 f0       	push   $0xf0138d08
f012082a:	68 dd 05 00 00       	push   $0x5dd
f012082f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120834:	e8 77 f9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120839:	e8 d4 bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f012083e:	89 c2                	mov    %eax,%edx
f0120840:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120843:	29 c2                	sub    %eax,%edx
f0120845:	89 d0                	mov    %edx,%eax
f0120847:	83 f8 02             	cmp    $0x2,%eax
f012084a:	74 17                	je     f0120863 <test_kfree+0x1636>
f012084c:	83 ec 04             	sub    $0x4,%esp
f012084f:	68 78 94 13 f0       	push   $0xf0139478
f0120854:	68 de 05 00 00       	push   $0x5de
f0120859:	68 ee 8c 13 f0       	push   $0xf0138cee
f012085e:	e8 4d f9 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120863:	e8 aa bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120868:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012086b:	e8 48 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120870:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120873:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120879:	83 ec 0c             	sub    $0xc,%esp
f012087c:	50                   	push   %eax
f012087d:	e8 2b 73 fe ff       	call   f0107bad <kfree>
f0120882:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120885:	e8 2e 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012088a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012088d:	74 17                	je     f01208a6 <test_kfree+0x1679>
f012088f:	83 ec 04             	sub    $0x4,%esp
f0120892:	68 08 8d 13 f0       	push   $0xf0138d08
f0120897:	68 e4 05 00 00       	push   $0x5e4
f012089c:	68 ee 8c 13 f0       	push   $0xf0138cee
f01208a1:	e8 0a f9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01208a6:	e8 67 bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f01208ab:	89 c2                	mov    %eax,%edx
f01208ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01208b0:	29 c2                	sub    %eax,%edx
f01208b2:	89 d0                	mov    %edx,%eax
f01208b4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01208b9:	74 17                	je     f01208d2 <test_kfree+0x16a5>
f01208bb:	83 ec 04             	sub    $0x4,%esp
f01208be:	68 78 94 13 f0       	push   $0xf0139478
f01208c3:	68 e5 05 00 00       	push   $0x5e5
f01208c8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01208cd:	e8 de f8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01208d2:	e8 3b bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f01208d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208da:	e8 d9 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01208df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01208e2:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01208e8:	83 ec 0c             	sub    $0xc,%esp
f01208eb:	50                   	push   %eax
f01208ec:	e8 bc 72 fe ff       	call   f0107bad <kfree>
f01208f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208f4:	e8 bf 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01208f9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208fc:	74 17                	je     f0120915 <test_kfree+0x16e8>
f01208fe:	83 ec 04             	sub    $0x4,%esp
f0120901:	68 08 8d 13 f0       	push   $0xf0138d08
f0120906:	68 eb 05 00 00       	push   $0x5eb
f012090b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120910:	e8 9b f8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120915:	e8 f8 bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f012091a:	89 c2                	mov    %eax,%edx
f012091c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012091f:	29 c2                	sub    %eax,%edx
f0120921:	89 d0                	mov    %edx,%eax
f0120923:	83 f8 01             	cmp    $0x1,%eax
f0120926:	74 17                	je     f012093f <test_kfree+0x1712>
f0120928:	83 ec 04             	sub    $0x4,%esp
f012092b:	68 78 94 13 f0       	push   $0xf0139478
f0120930:	68 ec 05 00 00       	push   $0x5ec
f0120935:	68 ee 8c 13 f0       	push   $0xf0138cee
f012093a:	e8 71 f8 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012093f:	e8 ce bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120944:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120947:	e8 6c 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012094c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012094f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120955:	83 ec 0c             	sub    $0xc,%esp
f0120958:	50                   	push   %eax
f0120959:	e8 4f 72 fe ff       	call   f0107bad <kfree>
f012095e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120961:	e8 52 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120966:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120969:	74 17                	je     f0120982 <test_kfree+0x1755>
f012096b:	83 ec 04             	sub    $0x4,%esp
f012096e:	68 08 8d 13 f0       	push   $0xf0138d08
f0120973:	68 f2 05 00 00       	push   $0x5f2
f0120978:	68 ee 8c 13 f0       	push   $0xf0138cee
f012097d:	e8 2e f8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120982:	e8 8b bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120987:	89 c2                	mov    %eax,%edx
f0120989:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012098c:	29 c2                	sub    %eax,%edx
f012098e:	89 d0                	mov    %edx,%eax
f0120990:	83 f8 04             	cmp    $0x4,%eax
f0120993:	74 17                	je     f01209ac <test_kfree+0x177f>
f0120995:	83 ec 04             	sub    $0x4,%esp
f0120998:	68 78 94 13 f0       	push   $0xf0139478
f012099d:	68 f3 05 00 00       	push   $0x5f3
f01209a2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01209a7:	e8 04 f8 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01209ac:	e8 61 bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f01209b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209b4:	e8 ff 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01209b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01209bc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01209c2:	83 ec 0c             	sub    $0xc,%esp
f01209c5:	50                   	push   %eax
f01209c6:	e8 e2 71 fe ff       	call   f0107bad <kfree>
f01209cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209ce:	e8 e5 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01209d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209d6:	74 17                	je     f01209ef <test_kfree+0x17c2>
f01209d8:	83 ec 04             	sub    $0x4,%esp
f01209db:	68 08 8d 13 f0       	push   $0xf0138d08
f01209e0:	68 f9 05 00 00       	push   $0x5f9
f01209e5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01209ea:	e8 c1 f7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01209ef:	e8 1e bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f01209f4:	89 c2                	mov    %eax,%edx
f01209f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01209f9:	29 c2                	sub    %eax,%edx
f01209fb:	89 d0                	mov    %edx,%eax
f01209fd:	83 f8 05             	cmp    $0x5,%eax
f0120a00:	74 17                	je     f0120a19 <test_kfree+0x17ec>
f0120a02:	83 ec 04             	sub    $0x4,%esp
f0120a05:	68 78 94 13 f0       	push   $0xf0139478
f0120a0a:	68 fa 05 00 00       	push   $0x5fa
f0120a0f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120a14:	e8 97 f7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a19:	e8 f4 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120a1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a21:	e8 92 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a26:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120a29:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120a2f:	83 ec 0c             	sub    $0xc,%esp
f0120a32:	50                   	push   %eax
f0120a33:	e8 75 71 fe ff       	call   f0107bad <kfree>
f0120a38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a3b:	e8 78 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a43:	74 17                	je     f0120a5c <test_kfree+0x182f>
f0120a45:	83 ec 04             	sub    $0x4,%esp
f0120a48:	68 08 8d 13 f0       	push   $0xf0138d08
f0120a4d:	68 00 06 00 00       	push   $0x600
f0120a52:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120a57:	e8 54 f7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a5c:	e8 b1 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120a61:	89 c2                	mov    %eax,%edx
f0120a63:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120a66:	29 c2                	sub    %eax,%edx
f0120a68:	89 d0                	mov    %edx,%eax
f0120a6a:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120a6f:	74 17                	je     f0120a88 <test_kfree+0x185b>
f0120a71:	83 ec 04             	sub    $0x4,%esp
f0120a74:	68 78 94 13 f0       	push   $0xf0139478
f0120a79:	68 01 06 00 00       	push   $0x601
f0120a7e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120a83:	e8 28 f7 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120a88:	e8 c9 75 ff ff       	call   f0118056 <isKHeapPlacementStrategyNEXTFIT>
f0120a8d:	84 c0                	test   %al,%al
f0120a8f:	0f 84 4a 02 00 00    	je     f0120cdf <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120a95:	e8 78 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120a9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a9d:	e8 16 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120aa2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120aa5:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120aab:	83 ec 0c             	sub    $0xc,%esp
f0120aae:	50                   	push   %eax
f0120aaf:	e8 f9 70 fe ff       	call   f0107bad <kfree>
f0120ab4:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120ab7:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120abe:	10 00 00 
f0120ac1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120ac6:	0f b6 d0             	movzbl %al,%edx
f0120ac9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120acf:	01 d0                	add    %edx,%eax
f0120ad1:	48                   	dec    %eax
f0120ad2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120ad8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120ade:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ae3:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120ae9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120aef:	29 d0                	sub    %edx,%eax
f0120af1:	89 c1                	mov    %eax,%ecx
f0120af3:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120afa:	10 00 00 
f0120afd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120b02:	0f b6 c0             	movzbl %al,%eax
f0120b05:	c1 e0 04             	shl    $0x4,%eax
f0120b08:	89 c2                	mov    %eax,%edx
f0120b0a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120b10:	01 d0                	add    %edx,%eax
f0120b12:	48                   	dec    %eax
f0120b13:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120b19:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b24:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120b2a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120b30:	29 d0                	sub    %edx,%eax
f0120b32:	01 c8                	add    %ecx,%eax
f0120b34:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120b39:	29 c2                	sub    %eax,%edx
f0120b3b:	89 d0                	mov    %edx,%eax
f0120b3d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b43:	e8 70 37 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120b48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b4b:	74 17                	je     f0120b64 <test_kfree+0x1937>
f0120b4d:	83 ec 04             	sub    $0x4,%esp
f0120b50:	68 08 8d 13 f0       	push   $0xf0138d08
f0120b55:	68 0b 06 00 00       	push   $0x60b
f0120b5a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120b5f:	e8 4c f6 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b64:	e8 a9 ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120b69:	89 c2                	mov    %eax,%edx
f0120b6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b6e:	29 c2                	sub    %eax,%edx
f0120b70:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120b76:	c1 e8 0c             	shr    $0xc,%eax
f0120b79:	39 c2                	cmp    %eax,%edx
f0120b7b:	74 17                	je     f0120b94 <test_kfree+0x1967>
f0120b7d:	83 ec 04             	sub    $0x4,%esp
f0120b80:	68 78 94 13 f0       	push   $0xf0139478
f0120b85:	68 0c 06 00 00       	push   $0x60c
f0120b8a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120b8f:	e8 1c f6 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120b94:	e8 79 ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120b99:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120b9c:	e8 17 37 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120ba1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120ba4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120baa:	83 ec 0c             	sub    $0xc,%esp
f0120bad:	50                   	push   %eax
f0120bae:	e8 fa 6f fe ff       	call   f0107bad <kfree>
f0120bb3:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bb6:	e8 fd 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120bbb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bbe:	74 17                	je     f0120bd7 <test_kfree+0x19aa>
f0120bc0:	83 ec 04             	sub    $0x4,%esp
f0120bc3:	68 08 8d 13 f0       	push   $0xf0138d08
f0120bc8:	68 12 06 00 00       	push   $0x612
f0120bcd:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120bd2:	e8 d9 f5 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bd7:	e8 36 ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120bdc:	89 c2                	mov    %eax,%edx
f0120bde:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120be1:	29 c2                	sub    %eax,%edx
f0120be3:	89 d0                	mov    %edx,%eax
f0120be5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120bea:	74 17                	je     f0120c03 <test_kfree+0x19d6>
f0120bec:	83 ec 04             	sub    $0x4,%esp
f0120bef:	68 78 94 13 f0       	push   $0xf0139478
f0120bf4:	68 13 06 00 00       	push   $0x613
f0120bf9:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120bfe:	e8 ad f5 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120c03:	e8 0a ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c08:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c0b:	e8 a8 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c10:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120c13:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120c19:	83 ec 0c             	sub    $0xc,%esp
f0120c1c:	50                   	push   %eax
f0120c1d:	e8 8b 6f fe ff       	call   f0107bad <kfree>
f0120c22:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c25:	e8 8e 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c2a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c2d:	74 17                	je     f0120c46 <test_kfree+0x1a19>
f0120c2f:	83 ec 04             	sub    $0x4,%esp
f0120c32:	68 08 8d 13 f0       	push   $0xf0138d08
f0120c37:	68 19 06 00 00       	push   $0x619
f0120c3c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120c41:	e8 6a f5 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c46:	e8 c7 b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c4b:	89 c2                	mov    %eax,%edx
f0120c4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c50:	29 c2                	sub    %eax,%edx
f0120c52:	89 d0                	mov    %edx,%eax
f0120c54:	83 f8 01             	cmp    $0x1,%eax
f0120c57:	74 17                	je     f0120c70 <test_kfree+0x1a43>
f0120c59:	83 ec 04             	sub    $0x4,%esp
f0120c5c:	68 78 94 13 f0       	push   $0xf0139478
f0120c61:	68 1a 06 00 00       	push   $0x61a
f0120c66:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120c6b:	e8 40 f5 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c70:	e8 9d b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c75:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c78:	e8 3b 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c7d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120c80:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120c86:	83 ec 0c             	sub    $0xc,%esp
f0120c89:	50                   	push   %eax
f0120c8a:	e8 1e 6f fe ff       	call   f0107bad <kfree>
f0120c8f:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c92:	e8 21 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c97:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c9a:	74 17                	je     f0120cb3 <test_kfree+0x1a86>
f0120c9c:	83 ec 04             	sub    $0x4,%esp
f0120c9f:	68 08 8d 13 f0       	push   $0xf0138d08
f0120ca4:	68 20 06 00 00       	push   $0x620
f0120ca9:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120cae:	e8 fd f4 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cb3:	e8 5a b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120cb8:	89 c2                	mov    %eax,%edx
f0120cba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120cbd:	29 c2                	sub    %eax,%edx
f0120cbf:	89 d0                	mov    %edx,%eax
f0120cc1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120cc6:	74 17                	je     f0120cdf <test_kfree+0x1ab2>
f0120cc8:	83 ec 04             	sub    $0x4,%esp
f0120ccb:	68 78 94 13 f0       	push   $0xf0139478
f0120cd0:	68 21 06 00 00       	push   $0x621
f0120cd5:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120cda:	e8 d1 f4 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0120cdf:	e8 2e b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120ce4:	89 c2                	mov    %eax,%edx
f0120ce6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120ce9:	39 c2                	cmp    %eax,%edx
f0120ceb:	74 17                	je     f0120d04 <test_kfree+0x1ad7>
f0120ced:	83 ec 04             	sub    $0x4,%esp
f0120cf0:	68 18 95 13 f0       	push   $0xf0139518
f0120cf5:	68 24 06 00 00       	push   $0x624
f0120cfa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120cff:	e8 ac f4 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0120d04:	83 ec 0c             	sub    $0xc,%esp
f0120d07:	68 4c 95 13 f0       	push   $0xf013954c
f0120d0c:	e8 20 01 fe ff       	call   f0100e31 <cprintf>
f0120d11:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0120d14:	83 ec 0c             	sub    $0xc,%esp
f0120d17:	6a 03                	push   $0x3
f0120d19:	e8 8f bd fe ff       	call   f010caad <sys_bypassPageFault>
f0120d1e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0120d21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d28:	e9 82 00 00 00       	jmp    f0120daf <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f0120d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d30:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0120d37:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0120d3a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d3d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d40:	e8 56 bd fe ff       	call   f010ca9b <sys_rcr2>
f0120d45:	89 c2                	mov    %eax,%edx
f0120d47:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d4a:	39 c2                	cmp    %eax,%edx
f0120d4c:	74 17                	je     f0120d65 <test_kfree+0x1b38>
f0120d4e:	83 ec 04             	sub    $0x4,%esp
f0120d51:	68 54 95 13 f0       	push   $0xf0139554
f0120d56:	68 33 06 00 00       	push   $0x633
f0120d5b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120d60:	e8 4b f4 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0120d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d68:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0120d6f:	89 c2                	mov    %eax,%edx
f0120d71:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d74:	01 d0                	add    %edx,%eax
f0120d76:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d79:	e8 1d bd fe ff       	call   f010ca9b <sys_rcr2>
f0120d7e:	89 c2                	mov    %eax,%edx
f0120d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d83:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0120d8a:	89 c1                	mov    %eax,%ecx
f0120d8c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d8f:	01 c8                	add    %ecx,%eax
f0120d91:	39 c2                	cmp    %eax,%edx
f0120d93:	74 17                	je     f0120dac <test_kfree+0x1b7f>
f0120d95:	83 ec 04             	sub    $0x4,%esp
f0120d98:	68 54 95 13 f0       	push   $0xf0139554
f0120d9d:	68 35 06 00 00       	push   $0x635
f0120da2:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120da7:	e8 04 f4 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0120dac:	ff 45 f4             	incl   -0xc(%ebp)
f0120daf:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0120db3:	0f 8e 74 ff ff ff    	jle    f0120d2d <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0120db9:	83 ec 0c             	sub    $0xc,%esp
f0120dbc:	6a 00                	push   $0x0
f0120dbe:	e8 ea bc fe ff       	call   f010caad <sys_bypassPageFault>
f0120dc3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0120dc6:	83 ec 0c             	sub    $0xc,%esp
f0120dc9:	68 99 95 13 f0       	push   $0xf0139599
f0120dce:	e8 5e 00 fe ff       	call   f0100e31 <cprintf>
f0120dd3:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120dd6:	e8 37 b8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120ddb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dde:	e8 d5 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120de3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0120de6:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0120dec:	83 ec 0c             	sub    $0xc,%esp
f0120def:	50                   	push   %eax
f0120df0:	e8 b8 6d fe ff       	call   f0107bad <kfree>
f0120df5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120df8:	e8 bb 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120dfd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e00:	74 17                	je     f0120e19 <test_kfree+0x1bec>
f0120e02:	83 ec 04             	sub    $0x4,%esp
f0120e05:	68 08 8d 13 f0       	push   $0xf0138d08
f0120e0a:	68 43 06 00 00       	push   $0x643
f0120e0f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120e14:	e8 97 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e19:	e8 f4 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e1e:	89 c2                	mov    %eax,%edx
f0120e20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e23:	39 c2                	cmp    %eax,%edx
f0120e25:	74 17                	je     f0120e3e <test_kfree+0x1c11>
f0120e27:	83 ec 04             	sub    $0x4,%esp
f0120e2a:	68 a0 95 13 f0       	push   $0xf01395a0
f0120e2f:	68 44 06 00 00       	push   $0x644
f0120e34:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120e39:	e8 72 f3 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e3e:	e8 cf b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e43:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e46:	e8 6d 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120e4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0120e4e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0120e54:	83 ec 0c             	sub    $0xc,%esp
f0120e57:	50                   	push   %eax
f0120e58:	e8 50 6d fe ff       	call   f0107bad <kfree>
f0120e5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e60:	e8 53 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120e65:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e68:	74 17                	je     f0120e81 <test_kfree+0x1c54>
f0120e6a:	83 ec 04             	sub    $0x4,%esp
f0120e6d:	68 08 8d 13 f0       	push   $0xf0138d08
f0120e72:	68 4a 06 00 00       	push   $0x64a
f0120e77:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120e7c:	e8 2f f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e81:	e8 8c b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e86:	89 c2                	mov    %eax,%edx
f0120e88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e8b:	39 c2                	cmp    %eax,%edx
f0120e8d:	74 17                	je     f0120ea6 <test_kfree+0x1c79>
f0120e8f:	83 ec 04             	sub    $0x4,%esp
f0120e92:	68 a0 95 13 f0       	push   $0xf01395a0
f0120e97:	68 4b 06 00 00       	push   $0x64b
f0120e9c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120ea1:	e8 0a f3 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ea6:	e8 67 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120eab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eae:	e8 05 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120eb3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120eb6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120ebc:	83 ec 0c             	sub    $0xc,%esp
f0120ebf:	50                   	push   %eax
f0120ec0:	e8 e8 6c fe ff       	call   f0107bad <kfree>
f0120ec5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec8:	e8 eb 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120ecd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ed0:	74 17                	je     f0120ee9 <test_kfree+0x1cbc>
f0120ed2:	83 ec 04             	sub    $0x4,%esp
f0120ed5:	68 08 8d 13 f0       	push   $0xf0138d08
f0120eda:	68 51 06 00 00       	push   $0x651
f0120edf:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120ee4:	e8 c7 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120ee9:	e8 24 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120eee:	89 c2                	mov    %eax,%edx
f0120ef0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ef3:	39 c2                	cmp    %eax,%edx
f0120ef5:	74 17                	je     f0120f0e <test_kfree+0x1ce1>
f0120ef7:	83 ec 04             	sub    $0x4,%esp
f0120efa:	68 a0 95 13 f0       	push   $0xf01395a0
f0120eff:	68 52 06 00 00       	push   $0x652
f0120f04:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120f09:	e8 a2 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f0e:	e8 ff b6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120f13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f16:	e8 9d 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120f1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120f1e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120f24:	83 ec 0c             	sub    $0xc,%esp
f0120f27:	50                   	push   %eax
f0120f28:	e8 80 6c fe ff       	call   f0107bad <kfree>
f0120f2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f30:	e8 83 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120f35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f38:	74 17                	je     f0120f51 <test_kfree+0x1d24>
f0120f3a:	83 ec 04             	sub    $0x4,%esp
f0120f3d:	68 08 8d 13 f0       	push   $0xf0138d08
f0120f42:	68 58 06 00 00       	push   $0x658
f0120f47:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120f4c:	e8 5f f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f51:	e8 bc b6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120f56:	89 c2                	mov    %eax,%edx
f0120f58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f5b:	39 c2                	cmp    %eax,%edx
f0120f5d:	74 17                	je     f0120f76 <test_kfree+0x1d49>
f0120f5f:	83 ec 04             	sub    $0x4,%esp
f0120f62:	68 a0 95 13 f0       	push   $0xf01395a0
f0120f67:	68 59 06 00 00       	push   $0x659
f0120f6c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120f71:	e8 3a f2 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0120f76:	83 ec 0c             	sub    $0xc,%esp
f0120f79:	68 e7 95 13 f0       	push   $0xf01395e7
f0120f7e:	e8 ae fe fd ff       	call   f0100e31 <cprintf>
f0120f83:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120f86:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0120f8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120f94:	eb 48                	jmp    f0120fde <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0120f96:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0120f99:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0120f9e:	83 ec 04             	sub    $0x4,%esp
f0120fa1:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0120fa7:	51                   	push   %ecx
f0120fa8:	52                   	push   %edx
f0120fa9:	50                   	push   %eax
f0120faa:	e8 6c 61 fe ff       	call   f010711b <get_page_table>
f0120faf:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0120fb2:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0120fb8:	85 c0                	test   %eax,%eax
f0120fba:	75 17                	jne    f0120fd3 <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0120fbc:	83 ec 04             	sub    $0x4,%esp
f0120fbf:	68 f0 95 13 f0       	push   $0xf01395f0
f0120fc4:	68 67 06 00 00       	push   $0x667
f0120fc9:	68 ee 8c 13 f0       	push   $0xf0138cee
f0120fce:	e8 dd f1 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120fd3:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0120fda:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0120fde:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120fe2:	78 b2                	js     f0120f96 <test_kfree+0x1d69>
f0120fe4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120fe8:	7f 09                	jg     f0120ff3 <test_kfree+0x1dc6>
f0120fea:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0120ff1:	76 a3                	jbe    f0120f96 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0120ff3:	83 ec 0c             	sub    $0xc,%esp
f0120ff6:	68 d2 8e 13 f0       	push   $0xf0138ed2
f0120ffb:	e8 31 fe fd ff       	call   f0100e31 <cprintf>
f0121000:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121003:	83 ec 0c             	sub    $0xc,%esp
f0121006:	68 58 96 13 f0       	push   $0xf0139658
f012100b:	e8 21 fe fd ff       	call   f0100e31 <cprintf>
f0121010:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121013:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121018:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012101b:	5b                   	pop    %ebx
f012101c:	5f                   	pop    %edi
f012101d:	5d                   	pop    %ebp
f012101e:	c3                   	ret    

f012101f <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012101f:	55                   	push   %ebp
f0121020:	89 e5                	mov    %esp,%ebp
f0121022:	57                   	push   %edi
f0121023:	53                   	push   %ebx
f0121024:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f012102a:	83 ec 0c             	sub    $0xc,%esp
f012102d:	68 30 8c 13 f0       	push   $0xf0138c30
f0121032:	e8 fa fd fd ff       	call   f0100e31 <cprintf>
f0121037:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012103a:	83 ec 0c             	sub    $0xc,%esp
f012103d:	68 60 8c 13 f0       	push   $0xf0138c60
f0121042:	e8 ea fd fd ff       	call   f0100e31 <cprintf>
f0121047:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012104a:	83 ec 0c             	sub    $0xc,%esp
f012104d:	68 30 8c 13 f0       	push   $0xf0138c30
f0121052:	e8 da fd fd ff       	call   f0100e31 <cprintf>
f0121057:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012105a:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012105e:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121062:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121068:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012106e:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121075:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012107c:	e8 91 b5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121081:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121084:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f012108a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012108f:	b8 00 00 00 00       	mov    $0x0,%eax
f0121094:	89 d7                	mov    %edx,%edi
f0121096:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121098:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f012109e:	b9 14 00 00 00       	mov    $0x14,%ecx
f01210a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01210a8:	89 d7                	mov    %edx,%edi
f01210aa:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01210ac:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f01210b2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01210b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01210bc:	89 d7                	mov    %edx,%edi
f01210be:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01210c0:	e8 4d b5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01210c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210c8:	e8 eb 31 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01210cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01210d0:	83 ec 0c             	sub    $0xc,%esp
f01210d3:	68 00 fc 1f 00       	push   $0x1ffc00
f01210d8:	e8 b6 6a fe ff       	call   f0107b93 <kmalloc>
f01210dd:	83 c4 10             	add    $0x10,%esp
f01210e0:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210e6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01210ec:	89 c1                	mov    %eax,%ecx
f01210ee:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01210f5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01210fa:	0f b6 d0             	movzbl %al,%edx
f01210fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121100:	01 d0                	add    %edx,%eax
f0121102:	48                   	dec    %eax
f0121103:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121106:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121109:	ba 00 00 00 00       	mov    $0x0,%edx
f012110e:	f7 75 c8             	divl   -0x38(%ebp)
f0121111:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121114:	29 d0                	sub    %edx,%eax
f0121116:	89 c3                	mov    %eax,%ebx
f0121118:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012111f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121124:	0f b6 c0             	movzbl %al,%eax
f0121127:	c1 e0 04             	shl    $0x4,%eax
f012112a:	89 c2                	mov    %eax,%edx
f012112c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012112f:	01 d0                	add    %edx,%eax
f0121131:	48                   	dec    %eax
f0121132:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121135:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121138:	ba 00 00 00 00       	mov    $0x0,%edx
f012113d:	f7 75 c0             	divl   -0x40(%ebp)
f0121140:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121143:	29 d0                	sub    %edx,%eax
f0121145:	01 d8                	add    %ebx,%eax
f0121147:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012114c:	39 c1                	cmp    %eax,%ecx
f012114e:	74 17                	je     f0121167 <test_kfree_bestfirstfit+0x148>
f0121150:	83 ec 04             	sub    $0x4,%esp
f0121153:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121158:	68 95 06 00 00       	push   $0x695
f012115d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121162:	e8 49 f0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121167:	e8 4c 31 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012116c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012116f:	74 17                	je     f0121188 <test_kfree_bestfirstfit+0x169>
f0121171:	83 ec 04             	sub    $0x4,%esp
f0121174:	68 08 8d 13 f0       	push   $0xf0138d08
f0121179:	68 96 06 00 00       	push   $0x696
f012117e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121183:	e8 28 f0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121188:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012118b:	e8 82 b4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121190:	29 c3                	sub    %eax,%ebx
f0121192:	89 d8                	mov    %ebx,%eax
f0121194:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121199:	74 17                	je     f01211b2 <test_kfree_bestfirstfit+0x193>
f012119b:	83 ec 04             	sub    $0x4,%esp
f012119e:	68 70 8d 13 f0       	push   $0xf0138d70
f01211a3:	68 97 06 00 00       	push   $0x697
f01211a8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01211ad:	e8 fe ef fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01211b2:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01211b9:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01211bc:	e8 51 b4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01211c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211c4:	e8 ef 30 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01211c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01211cc:	83 ec 0c             	sub    $0xc,%esp
f01211cf:	68 00 fc 1f 00       	push   $0x1ffc00
f01211d4:	e8 ba 69 fe ff       	call   f0107b93 <kmalloc>
f01211d9:	83 c4 10             	add    $0x10,%esp
f01211dc:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211e2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01211e8:	89 c1                	mov    %eax,%ecx
f01211ea:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01211f1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01211f6:	0f b6 d0             	movzbl %al,%edx
f01211f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01211fc:	01 d0                	add    %edx,%eax
f01211fe:	48                   	dec    %eax
f01211ff:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121202:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121205:	ba 00 00 00 00       	mov    $0x0,%edx
f012120a:	f7 75 b8             	divl   -0x48(%ebp)
f012120d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121210:	29 d0                	sub    %edx,%eax
f0121212:	89 c3                	mov    %eax,%ebx
f0121214:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012121b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121220:	0f b6 c0             	movzbl %al,%eax
f0121223:	c1 e0 04             	shl    $0x4,%eax
f0121226:	89 c2                	mov    %eax,%edx
f0121228:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012122b:	01 d0                	add    %edx,%eax
f012122d:	48                   	dec    %eax
f012122e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121231:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121234:	ba 00 00 00 00       	mov    $0x0,%edx
f0121239:	f7 75 b0             	divl   -0x50(%ebp)
f012123c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012123f:	29 d0                	sub    %edx,%eax
f0121241:	01 d8                	add    %ebx,%eax
f0121243:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121248:	39 c1                	cmp    %eax,%ecx
f012124a:	74 17                	je     f0121263 <test_kfree_bestfirstfit+0x244>
f012124c:	83 ec 04             	sub    $0x4,%esp
f012124f:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121254:	68 9e 06 00 00       	push   $0x69e
f0121259:	68 ee 8c 13 f0       	push   $0xf0138cee
f012125e:	e8 4d ef fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121263:	e8 50 30 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121268:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012126b:	74 17                	je     f0121284 <test_kfree_bestfirstfit+0x265>
f012126d:	83 ec 04             	sub    $0x4,%esp
f0121270:	68 08 8d 13 f0       	push   $0xf0138d08
f0121275:	68 9f 06 00 00       	push   $0x69f
f012127a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012127f:	e8 2c ef fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121284:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121287:	e8 86 b3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012128c:	29 c3                	sub    %eax,%ebx
f012128e:	89 d8                	mov    %ebx,%eax
f0121290:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121295:	74 17                	je     f01212ae <test_kfree_bestfirstfit+0x28f>
f0121297:	83 ec 04             	sub    $0x4,%esp
f012129a:	68 70 8d 13 f0       	push   $0xf0138d70
f012129f:	68 a0 06 00 00       	push   $0x6a0
f01212a4:	68 ee 8c 13 f0       	push   $0xf0138cee
f01212a9:	e8 02 ef fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01212ae:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f01212b5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01212b8:	e8 55 b3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01212bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212c0:	e8 f3 2f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01212c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01212c8:	83 ec 0c             	sub    $0xc,%esp
f01212cb:	68 00 08 00 00       	push   $0x800
f01212d0:	e8 be 68 fe ff       	call   f0107b93 <kmalloc>
f01212d5:	83 c4 10             	add    $0x10,%esp
f01212d8:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01212de:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01212e4:	89 c1                	mov    %eax,%ecx
f01212e6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01212ed:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01212f2:	0f b6 d0             	movzbl %al,%edx
f01212f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01212f8:	01 d0                	add    %edx,%eax
f01212fa:	48                   	dec    %eax
f01212fb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01212fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121301:	ba 00 00 00 00       	mov    $0x0,%edx
f0121306:	f7 75 a8             	divl   -0x58(%ebp)
f0121309:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012130c:	29 d0                	sub    %edx,%eax
f012130e:	89 c3                	mov    %eax,%ebx
f0121310:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121317:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012131c:	0f b6 c0             	movzbl %al,%eax
f012131f:	c1 e0 04             	shl    $0x4,%eax
f0121322:	89 c2                	mov    %eax,%edx
f0121324:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121327:	01 d0                	add    %edx,%eax
f0121329:	48                   	dec    %eax
f012132a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012132d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121330:	ba 00 00 00 00       	mov    $0x0,%edx
f0121335:	f7 75 a0             	divl   -0x60(%ebp)
f0121338:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012133b:	29 d0                	sub    %edx,%eax
f012133d:	01 d8                	add    %ebx,%eax
f012133f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121344:	39 c1                	cmp    %eax,%ecx
f0121346:	74 17                	je     f012135f <test_kfree_bestfirstfit+0x340>
f0121348:	83 ec 04             	sub    $0x4,%esp
f012134b:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121350:	68 a7 06 00 00       	push   $0x6a7
f0121355:	68 ee 8c 13 f0       	push   $0xf0138cee
f012135a:	e8 51 ee fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012135f:	e8 54 2f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121364:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121367:	74 17                	je     f0121380 <test_kfree_bestfirstfit+0x361>
f0121369:	83 ec 04             	sub    $0x4,%esp
f012136c:	68 08 8d 13 f0       	push   $0xf0138d08
f0121371:	68 a8 06 00 00       	push   $0x6a8
f0121376:	68 ee 8c 13 f0       	push   $0xf0138cee
f012137b:	e8 30 ee fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121380:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121383:	e8 8a b2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121388:	29 c3                	sub    %eax,%ebx
f012138a:	89 d8                	mov    %ebx,%eax
f012138c:	83 f8 01             	cmp    $0x1,%eax
f012138f:	74 17                	je     f01213a8 <test_kfree_bestfirstfit+0x389>
f0121391:	83 ec 04             	sub    $0x4,%esp
f0121394:	68 70 8d 13 f0       	push   $0xf0138d70
f0121399:	68 a9 06 00 00       	push   $0x6a9
f012139e:	68 ee 8c 13 f0       	push   $0xf0138cee
f01213a3:	e8 08 ee fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01213a8:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01213af:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01213b2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01213b8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01213bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213c2:	eb 0e                	jmp    f01213d2 <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f01213c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01213ca:	01 d0                	add    %edx,%eax
f01213cc:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01213cf:	ff 45 f4             	incl   -0xc(%ebp)
f01213d2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01213d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213db:	7f e7                	jg     f01213c4 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01213dd:	e8 30 b2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01213e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213e5:	e8 ce 2e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01213ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01213ed:	83 ec 0c             	sub    $0xc,%esp
f01213f0:	68 00 08 00 00       	push   $0x800
f01213f5:	e8 99 67 fe ff       	call   f0107b93 <kmalloc>
f01213fa:	83 c4 10             	add    $0x10,%esp
f01213fd:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121403:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121409:	89 c1                	mov    %eax,%ecx
f012140b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0121412:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121417:	0f b6 d0             	movzbl %al,%edx
f012141a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012141d:	01 d0                	add    %edx,%eax
f012141f:	48                   	dec    %eax
f0121420:	89 45 90             	mov    %eax,-0x70(%ebp)
f0121423:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121426:	ba 00 00 00 00       	mov    $0x0,%edx
f012142b:	f7 75 94             	divl   -0x6c(%ebp)
f012142e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121431:	29 d0                	sub    %edx,%eax
f0121433:	89 c3                	mov    %eax,%ebx
f0121435:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012143c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121441:	0f b6 c0             	movzbl %al,%eax
f0121444:	c1 e0 04             	shl    $0x4,%eax
f0121447:	89 c2                	mov    %eax,%edx
f0121449:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012144c:	01 d0                	add    %edx,%eax
f012144e:	48                   	dec    %eax
f012144f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0121452:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121455:	ba 00 00 00 00       	mov    $0x0,%edx
f012145a:	f7 75 8c             	divl   -0x74(%ebp)
f012145d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121460:	29 d0                	sub    %edx,%eax
f0121462:	01 d8                	add    %ebx,%eax
f0121464:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121469:	39 c1                	cmp    %eax,%ecx
f012146b:	74 17                	je     f0121484 <test_kfree_bestfirstfit+0x465>
f012146d:	83 ec 04             	sub    $0x4,%esp
f0121470:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121475:	68 b5 06 00 00       	push   $0x6b5
f012147a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012147f:	e8 2c ed fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121484:	e8 2f 2e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121489:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012148c:	74 17                	je     f01214a5 <test_kfree_bestfirstfit+0x486>
f012148e:	83 ec 04             	sub    $0x4,%esp
f0121491:	68 08 8d 13 f0       	push   $0xf0138d08
f0121496:	68 b6 06 00 00       	push   $0x6b6
f012149b:	68 ee 8c 13 f0       	push   $0xf0138cee
f01214a0:	e8 0b ed fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01214a8:	e8 65 b1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01214ad:	29 c3                	sub    %eax,%ebx
f01214af:	89 d8                	mov    %ebx,%eax
f01214b1:	83 f8 01             	cmp    $0x1,%eax
f01214b4:	74 17                	je     f01214cd <test_kfree_bestfirstfit+0x4ae>
f01214b6:	83 ec 04             	sub    $0x4,%esp
f01214b9:	68 70 8d 13 f0       	push   $0xf0138d70
f01214be:	68 b7 06 00 00       	push   $0x6b7
f01214c3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01214c8:	e8 e3 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01214cd:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01214d4:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01214d7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01214dd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01214e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214e7:	eb 0e                	jmp    f01214f7 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f01214e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01214ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f01214ef:	01 d0                	add    %edx,%eax
f01214f1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01214f4:	ff 45 f4             	incl   -0xc(%ebp)
f01214f7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01214fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121500:	7f e7                	jg     f01214e9 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121502:	e8 0b b1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121507:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012150a:	e8 a9 2d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012150f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121512:	83 ec 0c             	sub    $0xc,%esp
f0121515:	68 00 1c 00 00       	push   $0x1c00
f012151a:	e8 74 66 fe ff       	call   f0107b93 <kmalloc>
f012151f:	83 c4 10             	add    $0x10,%esp
f0121522:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121528:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012152e:	89 c1                	mov    %eax,%ecx
f0121530:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121537:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012153c:	0f b6 d0             	movzbl %al,%edx
f012153f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121542:	01 d0                	add    %edx,%eax
f0121544:	48                   	dec    %eax
f0121545:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121548:	8b 45 80             	mov    -0x80(%ebp),%eax
f012154b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121550:	f7 75 84             	divl   -0x7c(%ebp)
f0121553:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121556:	29 d0                	sub    %edx,%eax
f0121558:	89 c3                	mov    %eax,%ebx
f012155a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121561:	10 00 00 
f0121564:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121569:	0f b6 c0             	movzbl %al,%eax
f012156c:	c1 e0 04             	shl    $0x4,%eax
f012156f:	89 c2                	mov    %eax,%edx
f0121571:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121577:	01 d0                	add    %edx,%eax
f0121579:	48                   	dec    %eax
f012157a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121580:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121586:	ba 00 00 00 00       	mov    $0x0,%edx
f012158b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121591:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121597:	29 d0                	sub    %edx,%eax
f0121599:	01 d8                	add    %ebx,%eax
f012159b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01215a0:	39 c1                	cmp    %eax,%ecx
f01215a2:	74 17                	je     f01215bb <test_kfree_bestfirstfit+0x59c>
f01215a4:	83 ec 04             	sub    $0x4,%esp
f01215a7:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01215ac:	68 c3 06 00 00       	push   $0x6c3
f01215b1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01215b6:	e8 f5 eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215bb:	e8 f8 2c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01215c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215c3:	74 17                	je     f01215dc <test_kfree_bestfirstfit+0x5bd>
f01215c5:	83 ec 04             	sub    $0x4,%esp
f01215c8:	68 08 8d 13 f0       	push   $0xf0138d08
f01215cd:	68 c4 06 00 00       	push   $0x6c4
f01215d2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01215d7:	e8 d4 eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01215dc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01215df:	e8 2e b0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01215e4:	29 c3                	sub    %eax,%ebx
f01215e6:	89 d8                	mov    %ebx,%eax
f01215e8:	83 f8 02             	cmp    $0x2,%eax
f01215eb:	74 17                	je     f0121604 <test_kfree_bestfirstfit+0x5e5>
f01215ed:	83 ec 04             	sub    $0x4,%esp
f01215f0:	68 70 8d 13 f0       	push   $0xf0138d70
f01215f5:	68 c5 06 00 00       	push   $0x6c5
f01215fa:	68 ee 8c 13 f0       	push   $0xf0138cee
f01215ff:	e8 ac eb fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121604:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f012160b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012160e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121614:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012161e:	eb 0e                	jmp    f012162e <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f0121620:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121623:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121626:	01 d0                	add    %edx,%eax
f0121628:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012162b:	ff 45 f4             	incl   -0xc(%ebp)
f012162e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121634:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121637:	7f e7                	jg     f0121620 <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121639:	e8 d4 af fe ff       	call   f010c612 <sys_calculate_free_frames>
f012163e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121641:	e8 72 2c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121646:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121649:	83 ec 0c             	sub    $0xc,%esp
f012164c:	68 00 fc 2f 00       	push   $0x2ffc00
f0121651:	e8 3d 65 fe ff       	call   f0107b93 <kmalloc>
f0121656:	83 c4 10             	add    $0x10,%esp
f0121659:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012165f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121665:	89 c1                	mov    %eax,%ecx
f0121667:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012166e:	10 00 00 
f0121671:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121676:	0f b6 d0             	movzbl %al,%edx
f0121679:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012167f:	01 d0                	add    %edx,%eax
f0121681:	48                   	dec    %eax
f0121682:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121688:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012168e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121693:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121699:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012169f:	29 d0                	sub    %edx,%eax
f01216a1:	89 c3                	mov    %eax,%ebx
f01216a3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01216aa:	10 00 00 
f01216ad:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01216b2:	0f b6 c0             	movzbl %al,%eax
f01216b5:	c1 e0 04             	shl    $0x4,%eax
f01216b8:	89 c2                	mov    %eax,%edx
f01216ba:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01216c0:	01 d0                	add    %edx,%eax
f01216c2:	48                   	dec    %eax
f01216c3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01216c9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01216cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01216d4:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01216da:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01216e0:	29 d0                	sub    %edx,%eax
f01216e2:	01 d8                	add    %ebx,%eax
f01216e4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01216e9:	39 c1                	cmp    %eax,%ecx
f01216eb:	74 17                	je     f0121704 <test_kfree_bestfirstfit+0x6e5>
f01216ed:	83 ec 04             	sub    $0x4,%esp
f01216f0:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01216f5:	68 d1 06 00 00       	push   $0x6d1
f01216fa:	68 ee 8c 13 f0       	push   $0xf0138cee
f01216ff:	e8 ac ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121704:	e8 af 2b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121709:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012170c:	74 17                	je     f0121725 <test_kfree_bestfirstfit+0x706>
f012170e:	83 ec 04             	sub    $0x4,%esp
f0121711:	68 08 8d 13 f0       	push   $0xf0138d08
f0121716:	68 d2 06 00 00       	push   $0x6d2
f012171b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121720:	e8 8b ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121725:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121728:	e8 e5 ae fe ff       	call   f010c612 <sys_calculate_free_frames>
f012172d:	29 c3                	sub    %eax,%ebx
f012172f:	89 d8                	mov    %ebx,%eax
f0121731:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121736:	74 17                	je     f012174f <test_kfree_bestfirstfit+0x730>
f0121738:	83 ec 04             	sub    $0x4,%esp
f012173b:	68 70 8d 13 f0       	push   $0xf0138d70
f0121740:	68 d3 06 00 00       	push   $0x6d3
f0121745:	68 ee 8c 13 f0       	push   $0xf0138cee
f012174a:	e8 61 ea fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012174f:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121756:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121759:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012175f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121762:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121769:	eb 0e                	jmp    f0121779 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f012176b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012176e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121771:	01 d0                	add    %edx,%eax
f0121773:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121776:	ff 45 f4             	incl   -0xc(%ebp)
f0121779:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012177f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121782:	7f e7                	jg     f012176b <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121784:	e8 89 ae fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121789:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012178c:	e8 27 2b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121791:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121794:	83 ec 0c             	sub    $0xc,%esp
f0121797:	68 00 fc 5f 00       	push   $0x5ffc00
f012179c:	e8 f2 63 fe ff       	call   f0107b93 <kmalloc>
f01217a1:	83 c4 10             	add    $0x10,%esp
f01217a4:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217aa:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01217b0:	89 c1                	mov    %eax,%ecx
f01217b2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01217b9:	10 00 00 
f01217bc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01217c1:	0f b6 d0             	movzbl %al,%edx
f01217c4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01217ca:	01 d0                	add    %edx,%eax
f01217cc:	48                   	dec    %eax
f01217cd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01217d3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01217d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01217de:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01217e4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01217ea:	29 d0                	sub    %edx,%eax
f01217ec:	89 c3                	mov    %eax,%ebx
f01217ee:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01217f5:	10 00 00 
f01217f8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01217fd:	0f b6 c0             	movzbl %al,%eax
f0121800:	c1 e0 04             	shl    $0x4,%eax
f0121803:	89 c2                	mov    %eax,%edx
f0121805:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012180b:	01 d0                	add    %edx,%eax
f012180d:	48                   	dec    %eax
f012180e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121814:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012181a:	ba 00 00 00 00       	mov    $0x0,%edx
f012181f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121825:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012182b:	29 d0                	sub    %edx,%eax
f012182d:	01 d8                	add    %ebx,%eax
f012182f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121834:	39 c1                	cmp    %eax,%ecx
f0121836:	74 17                	je     f012184f <test_kfree_bestfirstfit+0x830>
f0121838:	83 ec 04             	sub    $0x4,%esp
f012183b:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121840:	68 df 06 00 00       	push   $0x6df
f0121845:	68 ee 8c 13 f0       	push   $0xf0138cee
f012184a:	e8 61 e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012184f:	e8 64 2a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121854:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121857:	74 17                	je     f0121870 <test_kfree_bestfirstfit+0x851>
f0121859:	83 ec 04             	sub    $0x4,%esp
f012185c:	68 08 8d 13 f0       	push   $0xf0138d08
f0121861:	68 e0 06 00 00       	push   $0x6e0
f0121866:	68 ee 8c 13 f0       	push   $0xf0138cee
f012186b:	e8 40 e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121870:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121873:	e8 9a ad fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121878:	29 c3                	sub    %eax,%ebx
f012187a:	89 d8                	mov    %ebx,%eax
f012187c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121881:	74 17                	je     f012189a <test_kfree_bestfirstfit+0x87b>
f0121883:	83 ec 04             	sub    $0x4,%esp
f0121886:	68 70 8d 13 f0       	push   $0xf0138d70
f012188b:	68 e1 06 00 00       	push   $0x6e1
f0121890:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121895:	e8 16 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012189a:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01218a1:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01218a4:	e8 69 ad fe ff       	call   f010c612 <sys_calculate_free_frames>
f01218a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218ac:	e8 07 2a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01218b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01218b4:	83 ec 0c             	sub    $0xc,%esp
f01218b7:	68 00 38 00 00       	push   $0x3800
f01218bc:	e8 d2 62 fe ff       	call   f0107b93 <kmalloc>
f01218c1:	83 c4 10             	add    $0x10,%esp
f01218c4:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218ca:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01218d0:	89 c1                	mov    %eax,%ecx
f01218d2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01218d9:	10 00 00 
f01218dc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01218e1:	0f b6 d0             	movzbl %al,%edx
f01218e4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01218ea:	01 d0                	add    %edx,%eax
f01218ec:	48                   	dec    %eax
f01218ed:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01218f3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01218f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01218fe:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121904:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012190a:	29 d0                	sub    %edx,%eax
f012190c:	89 c3                	mov    %eax,%ebx
f012190e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121915:	10 00 00 
f0121918:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012191d:	0f b6 c0             	movzbl %al,%eax
f0121920:	c1 e0 04             	shl    $0x4,%eax
f0121923:	89 c2                	mov    %eax,%edx
f0121925:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012192b:	01 d0                	add    %edx,%eax
f012192d:	48                   	dec    %eax
f012192e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121934:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012193a:	ba 00 00 00 00       	mov    $0x0,%edx
f012193f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121945:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012194b:	29 d0                	sub    %edx,%eax
f012194d:	01 d8                	add    %ebx,%eax
f012194f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121954:	39 c1                	cmp    %eax,%ecx
f0121956:	74 17                	je     f012196f <test_kfree_bestfirstfit+0x950>
f0121958:	83 ec 04             	sub    $0x4,%esp
f012195b:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121960:	68 e8 06 00 00       	push   $0x6e8
f0121965:	68 ee 8c 13 f0       	push   $0xf0138cee
f012196a:	e8 41 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012196f:	e8 44 29 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121974:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121977:	74 17                	je     f0121990 <test_kfree_bestfirstfit+0x971>
f0121979:	83 ec 04             	sub    $0x4,%esp
f012197c:	68 08 8d 13 f0       	push   $0xf0138d08
f0121981:	68 e9 06 00 00       	push   $0x6e9
f0121986:	68 ee 8c 13 f0       	push   $0xf0138cee
f012198b:	e8 20 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121990:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121993:	e8 7a ac fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121998:	29 c3                	sub    %eax,%ebx
f012199a:	89 d8                	mov    %ebx,%eax
f012199c:	83 f8 04             	cmp    $0x4,%eax
f012199f:	74 17                	je     f01219b8 <test_kfree_bestfirstfit+0x999>
f01219a1:	83 ec 04             	sub    $0x4,%esp
f01219a4:	68 70 8d 13 f0       	push   $0xf0138d70
f01219a9:	68 ea 06 00 00       	push   $0x6ea
f01219ae:	68 ee 8c 13 f0       	push   $0xf0138cee
f01219b3:	e8 f8 e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01219b8:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f01219bf:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01219c2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01219c8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01219cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219d2:	eb 0e                	jmp    f01219e2 <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f01219d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01219d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01219da:	01 d0                	add    %edx,%eax
f01219dc:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01219df:	ff 45 f4             	incl   -0xc(%ebp)
f01219e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01219e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01219eb:	7f e7                	jg     f01219d4 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01219ed:	e8 20 ac fe ff       	call   f010c612 <sys_calculate_free_frames>
f01219f2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01219f8:	e8 bb 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01219fd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121a03:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121a09:	83 ec 0c             	sub    $0xc,%esp
f0121a0c:	50                   	push   %eax
f0121a0d:	e8 9b 61 fe ff       	call   f0107bad <kfree>
f0121a12:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a15:	e8 9e 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121a1a:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121a20:	74 17                	je     f0121a39 <test_kfree_bestfirstfit+0xa1a>
f0121a22:	83 ec 04             	sub    $0x4,%esp
f0121a25:	68 08 8d 13 f0       	push   $0xf0138d08
f0121a2a:	68 f9 06 00 00       	push   $0x6f9
f0121a2f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121a34:	e8 77 e7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a39:	e8 d4 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121a3e:	89 c2                	mov    %eax,%edx
f0121a40:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121a46:	29 c2                	sub    %eax,%edx
f0121a48:	89 d0                	mov    %edx,%eax
f0121a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121a4f:	74 17                	je     f0121a68 <test_kfree_bestfirstfit+0xa49>
f0121a51:	83 ec 04             	sub    $0x4,%esp
f0121a54:	68 78 94 13 f0       	push   $0xf0139478
f0121a59:	68 fa 06 00 00       	push   $0x6fa
f0121a5e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121a63:	e8 48 e7 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a68:	e8 a5 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121a6d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a73:	e8 40 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121a78:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121a7e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121a84:	83 ec 0c             	sub    $0xc,%esp
f0121a87:	50                   	push   %eax
f0121a88:	e8 20 61 fe ff       	call   f0107bad <kfree>
f0121a8d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a90:	e8 23 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121a95:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121a9b:	74 17                	je     f0121ab4 <test_kfree_bestfirstfit+0xa95>
f0121a9d:	83 ec 04             	sub    $0x4,%esp
f0121aa0:	68 08 8d 13 f0       	push   $0xf0138d08
f0121aa5:	68 00 07 00 00       	push   $0x700
f0121aaa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121aaf:	e8 fc e6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ab4:	e8 59 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121ab9:	89 c2                	mov    %eax,%edx
f0121abb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121ac1:	29 c2                	sub    %eax,%edx
f0121ac3:	89 d0                	mov    %edx,%eax
f0121ac5:	83 f8 01             	cmp    $0x1,%eax
f0121ac8:	74 17                	je     f0121ae1 <test_kfree_bestfirstfit+0xac2>
f0121aca:	83 ec 04             	sub    $0x4,%esp
f0121acd:	68 78 94 13 f0       	push   $0xf0139478
f0121ad2:	68 01 07 00 00       	push   $0x701
f0121ad7:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121adc:	e8 cf e6 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ae1:	e8 2c ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121ae6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121aec:	e8 c7 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121af1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121af7:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121afd:	83 ec 0c             	sub    $0xc,%esp
f0121b00:	50                   	push   %eax
f0121b01:	e8 a7 60 fe ff       	call   f0107bad <kfree>
f0121b06:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b09:	e8 aa 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121b0e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121b14:	74 17                	je     f0121b2d <test_kfree_bestfirstfit+0xb0e>
f0121b16:	83 ec 04             	sub    $0x4,%esp
f0121b19:	68 08 8d 13 f0       	push   $0xf0138d08
f0121b1e:	68 07 07 00 00       	push   $0x707
f0121b23:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121b28:	e8 83 e6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b2d:	e8 e0 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121b32:	89 c2                	mov    %eax,%edx
f0121b34:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121b3a:	29 c2                	sub    %eax,%edx
f0121b3c:	89 d0                	mov    %edx,%eax
f0121b3e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121b43:	74 17                	je     f0121b5c <test_kfree_bestfirstfit+0xb3d>
f0121b45:	83 ec 04             	sub    $0x4,%esp
f0121b48:	68 78 94 13 f0       	push   $0xf0139478
f0121b4d:	68 08 07 00 00       	push   $0x708
f0121b52:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121b57:	e8 54 e6 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b5c:	e8 b1 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121b61:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b67:	e8 4c 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121b6c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121b72:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121b78:	83 ec 0c             	sub    $0xc,%esp
f0121b7b:	50                   	push   %eax
f0121b7c:	e8 2c 60 fe ff       	call   f0107bad <kfree>
f0121b81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b84:	e8 2f 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121b89:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121b8f:	74 17                	je     f0121ba8 <test_kfree_bestfirstfit+0xb89>
f0121b91:	83 ec 04             	sub    $0x4,%esp
f0121b94:	68 08 8d 13 f0       	push   $0xf0138d08
f0121b99:	68 0e 07 00 00       	push   $0x70e
f0121b9e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121ba3:	e8 08 e6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ba8:	e8 65 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121bad:	89 c2                	mov    %eax,%edx
f0121baf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121bb5:	29 c2                	sub    %eax,%edx
f0121bb7:	89 d0                	mov    %edx,%eax
f0121bb9:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121bbe:	74 17                	je     f0121bd7 <test_kfree_bestfirstfit+0xbb8>
f0121bc0:	83 ec 04             	sub    $0x4,%esp
f0121bc3:	68 78 94 13 f0       	push   $0xf0139478
f0121bc8:	68 0f 07 00 00       	push   $0x70f
f0121bcd:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121bd2:	e8 d9 e5 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121bd7:	83 ec 0c             	sub    $0xc,%esp
f0121bda:	68 b0 94 13 f0       	push   $0xf01394b0
f0121bdf:	e8 4d f2 fd ff       	call   f0100e31 <cprintf>
f0121be4:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121be7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121bed:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121bf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121bf7:	eb 1e                	jmp    f0121c17 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121bf9:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121bff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121c02:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c05:	01 c8                	add    %ecx,%eax
f0121c07:	8a 00                	mov    (%eax),%al
f0121c09:	0f be c0             	movsbl %al,%eax
f0121c0c:	01 d0                	add    %edx,%eax
f0121c0e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121c14:	ff 45 f4             	incl   -0xc(%ebp)
f0121c17:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121c1d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c20:	7f d7                	jg     f0121bf9 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121c22:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121c28:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121c2e:	89 c1                	mov    %eax,%ecx
f0121c30:	01 c9                	add    %ecx,%ecx
f0121c32:	01 c8                	add    %ecx,%eax
f0121c34:	39 c2                	cmp    %eax,%edx
f0121c36:	74 17                	je     f0121c4f <test_kfree_bestfirstfit+0xc30>
f0121c38:	83 ec 04             	sub    $0x4,%esp
f0121c3b:	68 d4 94 13 f0       	push   $0xf01394d4
f0121c40:	68 1c 07 00 00       	push   $0x71c
f0121c45:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121c4a:	e8 61 e5 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121c4f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121c55:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121c58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c5f:	eb 1e                	jmp    f0121c7f <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f0121c61:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0121c67:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121c6a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c6d:	01 c8                	add    %ecx,%eax
f0121c6f:	8a 00                	mov    (%eax),%al
f0121c71:	0f be c0             	movsbl %al,%eax
f0121c74:	01 d0                	add    %edx,%eax
f0121c76:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121c7c:	ff 45 f4             	incl   -0xc(%ebp)
f0121c7f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121c85:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c88:	7f d7                	jg     f0121c61 <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121c8a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121c90:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0121c96:	c1 e2 02             	shl    $0x2,%edx
f0121c99:	39 d0                	cmp    %edx,%eax
f0121c9b:	74 17                	je     f0121cb4 <test_kfree_bestfirstfit+0xc95>
f0121c9d:	83 ec 04             	sub    $0x4,%esp
f0121ca0:	68 d4 94 13 f0       	push   $0xf01394d4
f0121ca5:	68 24 07 00 00       	push   $0x724
f0121caa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121caf:	e8 fc e4 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121cb4:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121cba:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121cbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121cc4:	eb 1e                	jmp    f0121ce4 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0121cc6:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0121ccc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121ccf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121cd2:	01 c8                	add    %ecx,%eax
f0121cd4:	8a 00                	mov    (%eax),%al
f0121cd6:	0f be c0             	movsbl %al,%eax
f0121cd9:	01 d0                	add    %edx,%eax
f0121cdb:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121ce1:	ff 45 f4             	incl   -0xc(%ebp)
f0121ce4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121cea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ced:	7f d7                	jg     f0121cc6 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121cef:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0121cf5:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0121cfb:	89 d0                	mov    %edx,%eax
f0121cfd:	c1 e0 02             	shl    $0x2,%eax
f0121d00:	01 d0                	add    %edx,%eax
f0121d02:	39 c1                	cmp    %eax,%ecx
f0121d04:	74 17                	je     f0121d1d <test_kfree_bestfirstfit+0xcfe>
f0121d06:	83 ec 04             	sub    $0x4,%esp
f0121d09:	68 d4 94 13 f0       	push   $0xf01394d4
f0121d0e:	68 2c 07 00 00       	push   $0x72c
f0121d13:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121d18:	e8 93 e4 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121d1d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121d23:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121d26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d2d:	eb 1e                	jmp    f0121d4d <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f0121d2f:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0121d35:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121d38:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d3b:	01 c8                	add    %ecx,%eax
f0121d3d:	8a 00                	mov    (%eax),%al
f0121d3f:	0f be c0             	movsbl %al,%eax
f0121d42:	01 d0                	add    %edx,%eax
f0121d44:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121d4a:	ff 45 f4             	incl   -0xc(%ebp)
f0121d4d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121d53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d56:	7f d7                	jg     f0121d2f <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121d58:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0121d5e:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0121d64:	89 d0                	mov    %edx,%eax
f0121d66:	01 c0                	add    %eax,%eax
f0121d68:	01 d0                	add    %edx,%eax
f0121d6a:	01 c0                	add    %eax,%eax
f0121d6c:	01 d0                	add    %edx,%eax
f0121d6e:	39 c1                	cmp    %eax,%ecx
f0121d70:	74 17                	je     f0121d89 <test_kfree_bestfirstfit+0xd6a>
f0121d72:	83 ec 04             	sub    $0x4,%esp
f0121d75:	68 d4 94 13 f0       	push   $0xf01394d4
f0121d7a:	68 34 07 00 00       	push   $0x734
f0121d7f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121d84:	e8 27 e4 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0121d89:	83 ec 0c             	sub    $0xc,%esp
f0121d8c:	68 07 95 13 f0       	push   $0xf0139507
f0121d91:	e8 9b f0 fd ff       	call   f0100e31 <cprintf>
f0121d96:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121d99:	e8 74 a8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121d9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121da1:	e8 12 25 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121da6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0121da9:	83 ec 0c             	sub    $0xc,%esp
f0121dac:	68 00 00 30 00       	push   $0x300000
f0121db1:	e8 dd 5d fe ff       	call   f0107b93 <kmalloc>
f0121db6:	83 c4 10             	add    $0x10,%esp
f0121db9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121dbf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121dc5:	89 c1                	mov    %eax,%ecx
f0121dc7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121dce:	10 00 00 
f0121dd1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121dd6:	0f b6 d0             	movzbl %al,%edx
f0121dd9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121ddf:	01 d0                	add    %edx,%eax
f0121de1:	48                   	dec    %eax
f0121de2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121de8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121dee:	ba 00 00 00 00       	mov    $0x0,%edx
f0121df3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121df9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121dff:	29 d0                	sub    %edx,%eax
f0121e01:	89 c3                	mov    %eax,%ebx
f0121e03:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0121e0a:	10 00 00 
f0121e0d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121e12:	0f b6 c0             	movzbl %al,%eax
f0121e15:	c1 e0 04             	shl    $0x4,%eax
f0121e18:	89 c2                	mov    %eax,%edx
f0121e1a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0121e20:	01 d0                	add    %edx,%eax
f0121e22:	48                   	dec    %eax
f0121e23:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0121e29:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121e2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e34:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121e3a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121e40:	29 d0                	sub    %edx,%eax
f0121e42:	01 d8                	add    %ebx,%eax
f0121e44:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121e49:	39 c1                	cmp    %eax,%ecx
f0121e4b:	74 17                	je     f0121e64 <test_kfree_bestfirstfit+0xe45>
f0121e4d:	83 ec 04             	sub    $0x4,%esp
f0121e50:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121e55:	68 3f 07 00 00       	push   $0x73f
f0121e5a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121e5f:	e8 4c e3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e64:	e8 4f 24 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121e69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e6c:	74 17                	je     f0121e85 <test_kfree_bestfirstfit+0xe66>
f0121e6e:	83 ec 04             	sub    $0x4,%esp
f0121e71:	68 08 8d 13 f0       	push   $0xf0138d08
f0121e76:	68 40 07 00 00       	push   $0x740
f0121e7b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121e80:	e8 2b e3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e85:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e88:	e8 85 a7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121e8d:	29 c3                	sub    %eax,%ebx
f0121e8f:	89 d8                	mov    %ebx,%eax
f0121e91:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121e96:	74 17                	je     f0121eaf <test_kfree_bestfirstfit+0xe90>
f0121e98:	83 ec 04             	sub    $0x4,%esp
f0121e9b:	68 70 8d 13 f0       	push   $0xf0138d70
f0121ea0:	68 41 07 00 00       	push   $0x741
f0121ea5:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121eaa:	e8 01 e3 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0121eaf:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0121eb6:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0121eb9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121ebf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121ec2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ec9:	eb 0e                	jmp    f0121ed9 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0121ecb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ece:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121ed1:	01 d0                	add    %edx,%eax
f0121ed3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121ed6:	ff 45 f4             	incl   -0xc(%ebp)
f0121ed9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0121edf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ee2:	7f e7                	jg     f0121ecb <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ee4:	e8 29 a7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121ee9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121eec:	e8 c7 23 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121ef1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0121ef4:	83 ec 0c             	sub    $0xc,%esp
f0121ef7:	68 00 08 00 00       	push   $0x800
f0121efc:	e8 92 5c fe ff       	call   f0107b93 <kmalloc>
f0121f01:	83 c4 10             	add    $0x10,%esp
f0121f04:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f0a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121f10:	89 c1                	mov    %eax,%ecx
f0121f12:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121f19:	10 00 00 
f0121f1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121f21:	0f b6 d0             	movzbl %al,%edx
f0121f24:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0121f2a:	01 d0                	add    %edx,%eax
f0121f2c:	48                   	dec    %eax
f0121f2d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121f33:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f3e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121f44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121f4a:	29 d0                	sub    %edx,%eax
f0121f4c:	89 c3                	mov    %eax,%ebx
f0121f4e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121f55:	10 00 00 
f0121f58:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121f5d:	0f b6 c0             	movzbl %al,%eax
f0121f60:	c1 e0 04             	shl    $0x4,%eax
f0121f63:	89 c2                	mov    %eax,%edx
f0121f65:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121f6b:	01 d0                	add    %edx,%eax
f0121f6d:	48                   	dec    %eax
f0121f6e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121f74:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f7f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121f85:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121f8b:	29 d0                	sub    %edx,%eax
f0121f8d:	01 d8                	add    %ebx,%eax
f0121f8f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121f94:	39 c1                	cmp    %eax,%ecx
f0121f96:	74 17                	je     f0121faf <test_kfree_bestfirstfit+0xf90>
f0121f98:	83 ec 04             	sub    $0x4,%esp
f0121f9b:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0121fa0:	68 4d 07 00 00       	push   $0x74d
f0121fa5:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121faa:	e8 01 e2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121faf:	e8 04 23 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121fb4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fb7:	74 17                	je     f0121fd0 <test_kfree_bestfirstfit+0xfb1>
f0121fb9:	83 ec 04             	sub    $0x4,%esp
f0121fbc:	68 08 8d 13 f0       	push   $0xf0138d08
f0121fc1:	68 4e 07 00 00       	push   $0x74e
f0121fc6:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121fcb:	e8 e0 e1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121fd0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121fd3:	e8 3a a6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121fd8:	29 c3                	sub    %eax,%ebx
f0121fda:	89 d8                	mov    %ebx,%eax
f0121fdc:	83 f8 01             	cmp    $0x1,%eax
f0121fdf:	74 17                	je     f0121ff8 <test_kfree_bestfirstfit+0xfd9>
f0121fe1:	83 ec 04             	sub    $0x4,%esp
f0121fe4:	68 70 8d 13 f0       	push   $0xf0138d70
f0121fe9:	68 4f 07 00 00       	push   $0x74f
f0121fee:	68 ee 8c 13 f0       	push   $0xf0138cee
f0121ff3:	e8 b8 e1 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0121ff8:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f0121fff:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122002:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122008:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012200b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122012:	eb 0e                	jmp    f0122022 <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f0122014:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122017:	8b 45 98             	mov    -0x68(%ebp),%eax
f012201a:	01 d0                	add    %edx,%eax
f012201c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012201f:	ff 45 f4             	incl   -0xc(%ebp)
f0122022:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122028:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012202b:	7f e7                	jg     f0122014 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012202d:	e8 e0 a5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122032:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122035:	e8 7e 22 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012203a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012203d:	83 ec 0c             	sub    $0xc,%esp
f0122040:	68 00 00 10 00       	push   $0x100000
f0122045:	e8 49 5b fe ff       	call   f0107b93 <kmalloc>
f012204a:	83 c4 10             	add    $0x10,%esp
f012204d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122053:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122059:	89 c1                	mov    %eax,%ecx
f012205b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122062:	10 00 00 
f0122065:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012206a:	0f b6 d0             	movzbl %al,%edx
f012206d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122073:	01 d0                	add    %edx,%eax
f0122075:	48                   	dec    %eax
f0122076:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012207c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122082:	ba 00 00 00 00       	mov    $0x0,%edx
f0122087:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012208d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122093:	29 d0                	sub    %edx,%eax
f0122095:	89 c3                	mov    %eax,%ebx
f0122097:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012209e:	10 00 00 
f01220a1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01220a6:	0f b6 c0             	movzbl %al,%eax
f01220a9:	c1 e0 04             	shl    $0x4,%eax
f01220ac:	89 c2                	mov    %eax,%edx
f01220ae:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01220b4:	01 d0                	add    %edx,%eax
f01220b6:	48                   	dec    %eax
f01220b7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01220bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01220c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01220c8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01220ce:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01220d4:	29 d0                	sub    %edx,%eax
f01220d6:	01 d8                	add    %ebx,%eax
f01220d8:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01220dd:	39 c1                	cmp    %eax,%ecx
f01220df:	74 17                	je     f01220f8 <test_kfree_bestfirstfit+0x10d9>
f01220e1:	83 ec 04             	sub    $0x4,%esp
f01220e4:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01220e9:	68 5b 07 00 00       	push   $0x75b
f01220ee:	68 ee 8c 13 f0       	push   $0xf0138cee
f01220f3:	e8 b8 e0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220f8:	e8 bb 21 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01220fd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122100:	74 17                	je     f0122119 <test_kfree_bestfirstfit+0x10fa>
f0122102:	83 ec 04             	sub    $0x4,%esp
f0122105:	68 08 8d 13 f0       	push   $0xf0138d08
f012210a:	68 5c 07 00 00       	push   $0x75c
f012210f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122114:	e8 97 e0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122119:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012211c:	e8 f1 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122121:	29 c3                	sub    %eax,%ebx
f0122123:	89 d8                	mov    %ebx,%eax
f0122125:	3d 00 01 00 00       	cmp    $0x100,%eax
f012212a:	74 17                	je     f0122143 <test_kfree_bestfirstfit+0x1124>
f012212c:	83 ec 04             	sub    $0x4,%esp
f012212f:	68 70 8d 13 f0       	push   $0xf0138d70
f0122134:	68 5d 07 00 00       	push   $0x75d
f0122139:	68 ee 8c 13 f0       	push   $0xf0138cee
f012213e:	e8 6d e0 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122143:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f012214a:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012214d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122153:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122156:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012215d:	eb 0e                	jmp    f012216d <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f012215f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122162:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122165:	01 d0                	add    %edx,%eax
f0122167:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012216a:	ff 45 f4             	incl   -0xc(%ebp)
f012216d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122173:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122176:	7f e7                	jg     f012215f <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122178:	83 ec 0c             	sub    $0xc,%esp
f012217b:	68 0e 95 13 f0       	push   $0xf013950e
f0122180:	e8 ac ec fd ff       	call   f0100e31 <cprintf>
f0122185:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122188:	e8 85 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012218d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122190:	e8 23 21 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122195:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122198:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012219e:	83 ec 0c             	sub    $0xc,%esp
f01221a1:	50                   	push   %eax
f01221a2:	e8 06 5a fe ff       	call   f0107bad <kfree>
f01221a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221aa:	e8 09 21 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01221af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221b2:	74 17                	je     f01221cb <test_kfree_bestfirstfit+0x11ac>
f01221b4:	83 ec 04             	sub    $0x4,%esp
f01221b7:	68 08 8d 13 f0       	push   $0xf0138d08
f01221bc:	68 6d 07 00 00       	push   $0x76d
f01221c1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01221c6:	e8 e5 df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01221cb:	e8 42 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01221d0:	89 c2                	mov    %eax,%edx
f01221d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221d5:	29 c2                	sub    %eax,%edx
f01221d7:	89 d0                	mov    %edx,%eax
f01221d9:	83 f8 02             	cmp    $0x2,%eax
f01221dc:	74 17                	je     f01221f5 <test_kfree_bestfirstfit+0x11d6>
f01221de:	83 ec 04             	sub    $0x4,%esp
f01221e1:	68 78 94 13 f0       	push   $0xf0139478
f01221e6:	68 6e 07 00 00       	push   $0x76e
f01221eb:	68 ee 8c 13 f0       	push   $0xf0138cee
f01221f0:	e8 bb df fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01221f5:	e8 18 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01221fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221fd:	e8 b6 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122202:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122205:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012220b:	83 ec 0c             	sub    $0xc,%esp
f012220e:	50                   	push   %eax
f012220f:	e8 99 59 fe ff       	call   f0107bad <kfree>
f0122214:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122217:	e8 9c 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012221c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012221f:	74 17                	je     f0122238 <test_kfree_bestfirstfit+0x1219>
f0122221:	83 ec 04             	sub    $0x4,%esp
f0122224:	68 08 8d 13 f0       	push   $0xf0138d08
f0122229:	68 74 07 00 00       	push   $0x774
f012222e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122233:	e8 78 df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122238:	e8 d5 a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012223d:	89 c2                	mov    %eax,%edx
f012223f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122242:	29 c2                	sub    %eax,%edx
f0122244:	89 d0                	mov    %edx,%eax
f0122246:	3d 00 03 00 00       	cmp    $0x300,%eax
f012224b:	74 17                	je     f0122264 <test_kfree_bestfirstfit+0x1245>
f012224d:	83 ec 04             	sub    $0x4,%esp
f0122250:	68 78 94 13 f0       	push   $0xf0139478
f0122255:	68 75 07 00 00       	push   $0x775
f012225a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012225f:	e8 4c df fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122264:	e8 a9 a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122269:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012226c:	e8 47 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122271:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122274:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012227a:	83 ec 0c             	sub    $0xc,%esp
f012227d:	50                   	push   %eax
f012227e:	e8 2a 59 fe ff       	call   f0107bad <kfree>
f0122283:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122286:	e8 2d 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012228b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012228e:	74 17                	je     f01222a7 <test_kfree_bestfirstfit+0x1288>
f0122290:	83 ec 04             	sub    $0x4,%esp
f0122293:	68 08 8d 13 f0       	push   $0xf0138d08
f0122298:	68 7b 07 00 00       	push   $0x77b
f012229d:	68 ee 8c 13 f0       	push   $0xf0138cee
f01222a2:	e8 09 df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01222a7:	e8 66 a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01222ac:	89 c2                	mov    %eax,%edx
f01222ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222b1:	29 c2                	sub    %eax,%edx
f01222b3:	89 d0                	mov    %edx,%eax
f01222b5:	83 f8 01             	cmp    $0x1,%eax
f01222b8:	74 17                	je     f01222d1 <test_kfree_bestfirstfit+0x12b2>
f01222ba:	83 ec 04             	sub    $0x4,%esp
f01222bd:	68 78 94 13 f0       	push   $0xf0139478
f01222c2:	68 7c 07 00 00       	push   $0x77c
f01222c7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01222cc:	e8 df de fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01222d1:	e8 3c a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01222d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222d9:	e8 da 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01222de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01222e1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01222e7:	83 ec 0c             	sub    $0xc,%esp
f01222ea:	50                   	push   %eax
f01222eb:	e8 bd 58 fe ff       	call   f0107bad <kfree>
f01222f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222f3:	e8 c0 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01222f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222fb:	74 17                	je     f0122314 <test_kfree_bestfirstfit+0x12f5>
f01222fd:	83 ec 04             	sub    $0x4,%esp
f0122300:	68 08 8d 13 f0       	push   $0xf0138d08
f0122305:	68 82 07 00 00       	push   $0x782
f012230a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012230f:	e8 9c de fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122314:	e8 f9 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122319:	89 c2                	mov    %eax,%edx
f012231b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012231e:	29 c2                	sub    %eax,%edx
f0122320:	89 d0                	mov    %edx,%eax
f0122322:	83 f8 04             	cmp    $0x4,%eax
f0122325:	74 17                	je     f012233e <test_kfree_bestfirstfit+0x131f>
f0122327:	83 ec 04             	sub    $0x4,%esp
f012232a:	68 78 94 13 f0       	push   $0xf0139478
f012232f:	68 83 07 00 00       	push   $0x783
f0122334:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122339:	e8 72 de fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012233e:	e8 cf a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122343:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122346:	e8 6d 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012234b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012234e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122354:	83 ec 0c             	sub    $0xc,%esp
f0122357:	50                   	push   %eax
f0122358:	e8 50 58 fe ff       	call   f0107bad <kfree>
f012235d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122360:	e8 53 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122365:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122368:	74 17                	je     f0122381 <test_kfree_bestfirstfit+0x1362>
f012236a:	83 ec 04             	sub    $0x4,%esp
f012236d:	68 08 8d 13 f0       	push   $0xf0138d08
f0122372:	68 89 07 00 00       	push   $0x789
f0122377:	68 ee 8c 13 f0       	push   $0xf0138cee
f012237c:	e8 2f de fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122381:	e8 8c a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122386:	89 c2                	mov    %eax,%edx
f0122388:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012238b:	29 c2                	sub    %eax,%edx
f012238d:	89 d0                	mov    %edx,%eax
f012238f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122394:	74 17                	je     f01223ad <test_kfree_bestfirstfit+0x138e>
f0122396:	83 ec 04             	sub    $0x4,%esp
f0122399:	68 78 94 13 f0       	push   $0xf0139478
f012239e:	68 8a 07 00 00       	push   $0x78a
f01223a3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01223a8:	e8 03 de fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01223ad:	e8 60 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01223b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223b5:	e8 fe 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01223ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01223bd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01223c3:	83 ec 0c             	sub    $0xc,%esp
f01223c6:	50                   	push   %eax
f01223c7:	e8 e1 57 fe ff       	call   f0107bad <kfree>
f01223cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223cf:	e8 e4 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01223d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223d7:	74 17                	je     f01223f0 <test_kfree_bestfirstfit+0x13d1>
f01223d9:	83 ec 04             	sub    $0x4,%esp
f01223dc:	68 08 8d 13 f0       	push   $0xf0138d08
f01223e1:	68 90 07 00 00       	push   $0x790
f01223e6:	68 ee 8c 13 f0       	push   $0xf0138cee
f01223eb:	e8 c0 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01223f0:	e8 1d a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01223f5:	89 c2                	mov    %eax,%edx
f01223f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223fa:	29 c2                	sub    %eax,%edx
f01223fc:	89 d0                	mov    %edx,%eax
f01223fe:	83 f8 01             	cmp    $0x1,%eax
f0122401:	74 17                	je     f012241a <test_kfree_bestfirstfit+0x13fb>
f0122403:	83 ec 04             	sub    $0x4,%esp
f0122406:	68 78 94 13 f0       	push   $0xf0139478
f012240b:	68 91 07 00 00       	push   $0x791
f0122410:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122415:	e8 96 dd fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012241a:	e8 f3 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012241f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122422:	e8 91 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122427:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f012242a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122430:	83 ec 0c             	sub    $0xc,%esp
f0122433:	50                   	push   %eax
f0122434:	e8 74 57 fe ff       	call   f0107bad <kfree>
f0122439:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012243c:	e8 77 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122441:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122444:	74 17                	je     f012245d <test_kfree_bestfirstfit+0x143e>
f0122446:	83 ec 04             	sub    $0x4,%esp
f0122449:	68 08 8d 13 f0       	push   $0xf0138d08
f012244e:	68 97 07 00 00       	push   $0x797
f0122453:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122458:	e8 53 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012245d:	e8 b0 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122462:	89 c2                	mov    %eax,%edx
f0122464:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122467:	29 c2                	sub    %eax,%edx
f0122469:	89 d0                	mov    %edx,%eax
f012246b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122470:	74 17                	je     f0122489 <test_kfree_bestfirstfit+0x146a>
f0122472:	83 ec 04             	sub    $0x4,%esp
f0122475:	68 78 94 13 f0       	push   $0xf0139478
f012247a:	68 98 07 00 00       	push   $0x798
f012247f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122484:	e8 27 dd fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122489:	e8 84 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012248e:	89 c2                	mov    %eax,%edx
f0122490:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122493:	39 c2                	cmp    %eax,%edx
f0122495:	74 17                	je     f01224ae <test_kfree_bestfirstfit+0x148f>
f0122497:	83 ec 04             	sub    $0x4,%esp
f012249a:	68 18 95 13 f0       	push   $0xf0139518
f012249f:	68 9a 07 00 00       	push   $0x79a
f01224a4:	68 ee 8c 13 f0       	push   $0xf0138cee
f01224a9:	e8 02 dd fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01224ae:	83 ec 0c             	sub    $0xc,%esp
f01224b1:	68 4c 95 13 f0       	push   $0xf013954c
f01224b6:	e8 76 e9 fd ff       	call   f0100e31 <cprintf>
f01224bb:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01224be:	83 ec 0c             	sub    $0xc,%esp
f01224c1:	6a 03                	push   $0x3
f01224c3:	e8 e5 a5 fe ff       	call   f010caad <sys_bypassPageFault>
f01224c8:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01224cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224d2:	e9 82 00 00 00       	jmp    f0122559 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f01224d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01224da:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f01224e1:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01224e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01224e7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01224ea:	e8 ac a5 fe ff       	call   f010ca9b <sys_rcr2>
f01224ef:	89 c2                	mov    %eax,%edx
f01224f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01224f4:	39 c2                	cmp    %eax,%edx
f01224f6:	74 17                	je     f012250f <test_kfree_bestfirstfit+0x14f0>
f01224f8:	83 ec 04             	sub    $0x4,%esp
f01224fb:	68 54 95 13 f0       	push   $0xf0139554
f0122500:	68 a9 07 00 00       	push   $0x7a9
f0122505:	68 ee 8c 13 f0       	push   $0xf0138cee
f012250a:	e8 a1 dc fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012250f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122512:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122519:	89 c2                	mov    %eax,%edx
f012251b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012251e:	01 d0                	add    %edx,%eax
f0122520:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122523:	e8 73 a5 fe ff       	call   f010ca9b <sys_rcr2>
f0122528:	89 c2                	mov    %eax,%edx
f012252a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012252d:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122534:	89 c1                	mov    %eax,%ecx
f0122536:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122539:	01 c8                	add    %ecx,%eax
f012253b:	39 c2                	cmp    %eax,%edx
f012253d:	74 17                	je     f0122556 <test_kfree_bestfirstfit+0x1537>
f012253f:	83 ec 04             	sub    $0x4,%esp
f0122542:	68 54 95 13 f0       	push   $0xf0139554
f0122547:	68 ab 07 00 00       	push   $0x7ab
f012254c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122551:	e8 5a dc fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122556:	ff 45 f4             	incl   -0xc(%ebp)
f0122559:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012255d:	0f 8e 74 ff ff ff    	jle    f01224d7 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122563:	83 ec 0c             	sub    $0xc,%esp
f0122566:	6a 00                	push   $0x0
f0122568:	e8 40 a5 fe ff       	call   f010caad <sys_bypassPageFault>
f012256d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122570:	83 ec 0c             	sub    $0xc,%esp
f0122573:	68 99 95 13 f0       	push   $0xf0139599
f0122578:	e8 b4 e8 fd ff       	call   f0100e31 <cprintf>
f012257d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122580:	e8 8d a0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122585:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122588:	e8 2b 1d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012258d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122590:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122596:	83 ec 0c             	sub    $0xc,%esp
f0122599:	50                   	push   %eax
f012259a:	e8 0e 56 fe ff       	call   f0107bad <kfree>
f012259f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225a2:	e8 11 1d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01225a7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225aa:	74 17                	je     f01225c3 <test_kfree_bestfirstfit+0x15a4>
f01225ac:	83 ec 04             	sub    $0x4,%esp
f01225af:	68 08 8d 13 f0       	push   $0xf0138d08
f01225b4:	68 b9 07 00 00       	push   $0x7b9
f01225b9:	68 ee 8c 13 f0       	push   $0xf0138cee
f01225be:	e8 ed db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01225c3:	e8 4a a0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01225c8:	89 c2                	mov    %eax,%edx
f01225ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225cd:	39 c2                	cmp    %eax,%edx
f01225cf:	74 17                	je     f01225e8 <test_kfree_bestfirstfit+0x15c9>
f01225d1:	83 ec 04             	sub    $0x4,%esp
f01225d4:	68 a0 95 13 f0       	push   $0xf01395a0
f01225d9:	68 ba 07 00 00       	push   $0x7ba
f01225de:	68 ee 8c 13 f0       	push   $0xf0138cee
f01225e3:	e8 c8 db fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225e8:	e8 25 a0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01225ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225f0:	e8 c3 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01225f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01225f8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01225fe:	83 ec 0c             	sub    $0xc,%esp
f0122601:	50                   	push   %eax
f0122602:	e8 a6 55 fe ff       	call   f0107bad <kfree>
f0122607:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012260a:	e8 a9 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012260f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122612:	74 17                	je     f012262b <test_kfree_bestfirstfit+0x160c>
f0122614:	83 ec 04             	sub    $0x4,%esp
f0122617:	68 08 8d 13 f0       	push   $0xf0138d08
f012261c:	68 c0 07 00 00       	push   $0x7c0
f0122621:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122626:	e8 85 db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012262b:	e8 e2 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122630:	89 c2                	mov    %eax,%edx
f0122632:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122635:	39 c2                	cmp    %eax,%edx
f0122637:	74 17                	je     f0122650 <test_kfree_bestfirstfit+0x1631>
f0122639:	83 ec 04             	sub    $0x4,%esp
f012263c:	68 a0 95 13 f0       	push   $0xf01395a0
f0122641:	68 c1 07 00 00       	push   $0x7c1
f0122646:	68 ee 8c 13 f0       	push   $0xf0138cee
f012264b:	e8 60 db fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122650:	e8 bd 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122655:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122658:	e8 5b 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012265d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122660:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122666:	83 ec 0c             	sub    $0xc,%esp
f0122669:	50                   	push   %eax
f012266a:	e8 3e 55 fe ff       	call   f0107bad <kfree>
f012266f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122672:	e8 41 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122677:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012267a:	74 17                	je     f0122693 <test_kfree_bestfirstfit+0x1674>
f012267c:	83 ec 04             	sub    $0x4,%esp
f012267f:	68 08 8d 13 f0       	push   $0xf0138d08
f0122684:	68 c7 07 00 00       	push   $0x7c7
f0122689:	68 ee 8c 13 f0       	push   $0xf0138cee
f012268e:	e8 1d db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122693:	e8 7a 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122698:	89 c2                	mov    %eax,%edx
f012269a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012269d:	39 c2                	cmp    %eax,%edx
f012269f:	74 17                	je     f01226b8 <test_kfree_bestfirstfit+0x1699>
f01226a1:	83 ec 04             	sub    $0x4,%esp
f01226a4:	68 a0 95 13 f0       	push   $0xf01395a0
f01226a9:	68 c8 07 00 00       	push   $0x7c8
f01226ae:	68 ee 8c 13 f0       	push   $0xf0138cee
f01226b3:	e8 f8 da fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01226b8:	e8 55 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01226bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226c0:	e8 f3 1b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01226c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01226c8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01226ce:	83 ec 0c             	sub    $0xc,%esp
f01226d1:	50                   	push   %eax
f01226d2:	e8 d6 54 fe ff       	call   f0107bad <kfree>
f01226d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226da:	e8 d9 1b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01226df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226e2:	74 17                	je     f01226fb <test_kfree_bestfirstfit+0x16dc>
f01226e4:	83 ec 04             	sub    $0x4,%esp
f01226e7:	68 08 8d 13 f0       	push   $0xf0138d08
f01226ec:	68 ce 07 00 00       	push   $0x7ce
f01226f1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01226f6:	e8 b5 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01226fb:	e8 12 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122700:	89 c2                	mov    %eax,%edx
f0122702:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122705:	39 c2                	cmp    %eax,%edx
f0122707:	74 17                	je     f0122720 <test_kfree_bestfirstfit+0x1701>
f0122709:	83 ec 04             	sub    $0x4,%esp
f012270c:	68 a0 95 13 f0       	push   $0xf01395a0
f0122711:	68 cf 07 00 00       	push   $0x7cf
f0122716:	68 ee 8c 13 f0       	push   $0xf0138cee
f012271b:	e8 90 da fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122720:	83 ec 0c             	sub    $0xc,%esp
f0122723:	68 e7 95 13 f0       	push   $0xf01395e7
f0122728:	e8 04 e7 fd ff       	call   f0100e31 <cprintf>
f012272d:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122730:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122737:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012273e:	eb 48                	jmp    f0122788 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122740:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122743:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0122748:	83 ec 04             	sub    $0x4,%esp
f012274b:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122751:	51                   	push   %ecx
f0122752:	52                   	push   %edx
f0122753:	50                   	push   %eax
f0122754:	e8 c2 49 fe ff       	call   f010711b <get_page_table>
f0122759:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012275c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122762:	85 c0                	test   %eax,%eax
f0122764:	75 17                	jne    f012277d <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122766:	83 ec 04             	sub    $0x4,%esp
f0122769:	68 f0 95 13 f0       	push   $0xf01395f0
f012276e:	68 dd 07 00 00       	push   $0x7dd
f0122773:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122778:	e8 33 da fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012277d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122784:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012278c:	78 b2                	js     f0122740 <test_kfree_bestfirstfit+0x1721>
f012278e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122792:	7f 09                	jg     f012279d <test_kfree_bestfirstfit+0x177e>
f0122794:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012279b:	76 a3                	jbe    f0122740 <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f012279d:	83 ec 0c             	sub    $0xc,%esp
f01227a0:	68 d2 8e 13 f0       	push   $0xf0138ed2
f01227a5:	e8 87 e6 fd ff       	call   f0100e31 <cprintf>
f01227aa:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01227ad:	83 ec 0c             	sub    $0xc,%esp
f01227b0:	68 58 96 13 f0       	push   $0xf0139658
f01227b5:	e8 77 e6 fd ff       	call   f0100e31 <cprintf>
f01227ba:	83 c4 10             	add    $0x10,%esp

	return 1;
f01227bd:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01227c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01227c5:	5b                   	pop    %ebx
f01227c6:	5f                   	pop    %edi
f01227c7:	5d                   	pop    %ebp
f01227c8:	c3                   	ret    

f01227c9 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01227c9:	55                   	push   %ebp
f01227ca:	89 e5                	mov    %esp,%ebp
f01227cc:	57                   	push   %edi
f01227cd:	56                   	push   %esi
f01227ce:	53                   	push   %ebx
f01227cf:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f01227d5:	83 ec 0c             	sub    $0xc,%esp
f01227d8:	68 30 8c 13 f0       	push   $0xf0138c30
f01227dd:	e8 4f e6 fd ff       	call   f0100e31 <cprintf>
f01227e2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01227e5:	83 ec 0c             	sub    $0xc,%esp
f01227e8:	68 60 8c 13 f0       	push   $0xf0138c60
f01227ed:	e8 3f e6 fd ff       	call   f0100e31 <cprintf>
f01227f2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01227f5:	83 ec 0c             	sub    $0xc,%esp
f01227f8:	68 30 8c 13 f0       	push   $0xf0138c30
f01227fd:	e8 2f e6 fd ff       	call   f0100e31 <cprintf>
f0122802:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122805:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122809:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f012280d:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122813:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122819:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122820:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122827:	e8 e6 9d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012282c:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012282f:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122835:	b9 14 00 00 00       	mov    $0x14,%ecx
f012283a:	b8 00 00 00 00       	mov    $0x0,%eax
f012283f:	89 d7                	mov    %edx,%edi
f0122841:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122843:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122849:	b9 14 00 00 00       	mov    $0x14,%ecx
f012284e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122853:	89 d7                	mov    %edx,%edi
f0122855:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122857:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f012285d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122862:	b8 00 00 00 00       	mov    $0x0,%eax
f0122867:	89 d7                	mov    %edx,%edi
f0122869:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012286b:	e8 a2 9d fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122870:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122873:	e8 40 1a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122878:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012287b:	83 ec 0c             	sub    $0xc,%esp
f012287e:	68 00 fc 1f 00       	push   $0x1ffc00
f0122883:	e8 0b 53 fe ff       	call   f0107b93 <kmalloc>
f0122888:	83 c4 10             	add    $0x10,%esp
f012288b:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122891:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122897:	89 c1                	mov    %eax,%ecx
f0122899:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01228a0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01228a5:	0f b6 d0             	movzbl %al,%edx
f01228a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01228ab:	01 d0                	add    %edx,%eax
f01228ad:	48                   	dec    %eax
f01228ae:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01228b1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01228b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01228b9:	f7 75 a0             	divl   -0x60(%ebp)
f01228bc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01228bf:	29 d0                	sub    %edx,%eax
f01228c1:	89 c3                	mov    %eax,%ebx
f01228c3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01228ca:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01228cf:	0f b6 c0             	movzbl %al,%eax
f01228d2:	c1 e0 04             	shl    $0x4,%eax
f01228d5:	89 c2                	mov    %eax,%edx
f01228d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228da:	01 d0                	add    %edx,%eax
f01228dc:	48                   	dec    %eax
f01228dd:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01228e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01228e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01228e8:	f7 75 98             	divl   -0x68(%ebp)
f01228eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01228ee:	29 d0                	sub    %edx,%eax
f01228f0:	01 d8                	add    %ebx,%eax
f01228f2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01228f7:	39 c1                	cmp    %eax,%ecx
f01228f9:	74 17                	je     f0122912 <test_kheap_phys_addr+0x149>
f01228fb:	83 ec 04             	sub    $0x4,%esp
f01228fe:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122903:	68 0a 08 00 00       	push   $0x80a
f0122908:	68 ee 8c 13 f0       	push   $0xf0138cee
f012290d:	e8 9e d8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122912:	e8 a1 19 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122917:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012291a:	74 17                	je     f0122933 <test_kheap_phys_addr+0x16a>
f012291c:	83 ec 04             	sub    $0x4,%esp
f012291f:	68 08 8d 13 f0       	push   $0xf0138d08
f0122924:	68 0b 08 00 00       	push   $0x80b
f0122929:	68 ee 8c 13 f0       	push   $0xf0138cee
f012292e:	e8 7d d8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122933:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122936:	e8 d7 9c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012293b:	29 c3                	sub    %eax,%ebx
f012293d:	89 d8                	mov    %ebx,%eax
f012293f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122944:	74 17                	je     f012295d <test_kheap_phys_addr+0x194>
f0122946:	83 ec 04             	sub    $0x4,%esp
f0122949:	68 70 8d 13 f0       	push   $0xf0138d70
f012294e:	68 0c 08 00 00       	push   $0x80c
f0122953:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122958:	e8 53 d8 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012295d:	e8 b0 9c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122962:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122965:	e8 4e 19 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012296a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012296d:	83 ec 0c             	sub    $0xc,%esp
f0122970:	68 00 fc 1f 00       	push   $0x1ffc00
f0122975:	e8 19 52 fe ff       	call   f0107b93 <kmalloc>
f012297a:	83 c4 10             	add    $0x10,%esp
f012297d:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122983:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122989:	89 c1                	mov    %eax,%ecx
f012298b:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122992:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122997:	0f b6 d0             	movzbl %al,%edx
f012299a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012299d:	01 d0                	add    %edx,%eax
f012299f:	48                   	dec    %eax
f01229a0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01229a3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01229a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01229ab:	f7 75 90             	divl   -0x70(%ebp)
f01229ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01229b1:	29 d0                	sub    %edx,%eax
f01229b3:	89 c3                	mov    %eax,%ebx
f01229b5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01229bc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01229c1:	0f b6 c0             	movzbl %al,%eax
f01229c4:	c1 e0 04             	shl    $0x4,%eax
f01229c7:	89 c2                	mov    %eax,%edx
f01229c9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01229cc:	01 d0                	add    %edx,%eax
f01229ce:	48                   	dec    %eax
f01229cf:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01229d2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01229d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01229da:	f7 75 88             	divl   -0x78(%ebp)
f01229dd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01229e0:	29 d0                	sub    %edx,%eax
f01229e2:	01 d8                	add    %ebx,%eax
f01229e4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01229e9:	39 c1                	cmp    %eax,%ecx
f01229eb:	74 17                	je     f0122a04 <test_kheap_phys_addr+0x23b>
f01229ed:	83 ec 04             	sub    $0x4,%esp
f01229f0:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01229f5:	68 12 08 00 00       	push   $0x812
f01229fa:	68 ee 8c 13 f0       	push   $0xf0138cee
f01229ff:	e8 ac d7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a04:	e8 af 18 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122a09:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122a0c:	74 17                	je     f0122a25 <test_kheap_phys_addr+0x25c>
f0122a0e:	83 ec 04             	sub    $0x4,%esp
f0122a11:	68 08 8d 13 f0       	push   $0xf0138d08
f0122a16:	68 13 08 00 00       	push   $0x813
f0122a1b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122a20:	e8 8b d7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a25:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122a28:	e8 e5 9b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122a2d:	29 c3                	sub    %eax,%ebx
f0122a2f:	89 d8                	mov    %ebx,%eax
f0122a31:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a36:	74 17                	je     f0122a4f <test_kheap_phys_addr+0x286>
f0122a38:	83 ec 04             	sub    $0x4,%esp
f0122a3b:	68 70 8d 13 f0       	push   $0xf0138d70
f0122a40:	68 14 08 00 00       	push   $0x814
f0122a45:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122a4a:	e8 61 d7 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a4f:	e8 be 9b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122a54:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a57:	e8 5c 18 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122a5c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122a5f:	83 ec 0c             	sub    $0xc,%esp
f0122a62:	68 00 08 00 00       	push   $0x800
f0122a67:	e8 27 51 fe ff       	call   f0107b93 <kmalloc>
f0122a6c:	83 c4 10             	add    $0x10,%esp
f0122a6f:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a75:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122a7b:	89 c1                	mov    %eax,%ecx
f0122a7d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122a84:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122a89:	0f b6 d0             	movzbl %al,%edx
f0122a8c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a8f:	01 d0                	add    %edx,%eax
f0122a91:	48                   	dec    %eax
f0122a92:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122a98:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aa3:	f7 75 80             	divl   -0x80(%ebp)
f0122aa6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122aac:	29 d0                	sub    %edx,%eax
f0122aae:	89 c3                	mov    %eax,%ebx
f0122ab0:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122ab7:	10 00 00 
f0122aba:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122abf:	0f b6 c0             	movzbl %al,%eax
f0122ac2:	c1 e0 04             	shl    $0x4,%eax
f0122ac5:	89 c2                	mov    %eax,%edx
f0122ac7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122acd:	01 d0                	add    %edx,%eax
f0122acf:	48                   	dec    %eax
f0122ad0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122ad6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122adc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ae1:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122ae7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122aed:	29 d0                	sub    %edx,%eax
f0122aef:	01 d8                	add    %ebx,%eax
f0122af1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122af6:	39 c1                	cmp    %eax,%ecx
f0122af8:	74 17                	je     f0122b11 <test_kheap_phys_addr+0x348>
f0122afa:	83 ec 04             	sub    $0x4,%esp
f0122afd:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122b02:	68 1a 08 00 00       	push   $0x81a
f0122b07:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122b0c:	e8 9f d6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b11:	e8 a2 17 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122b16:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122b19:	74 17                	je     f0122b32 <test_kheap_phys_addr+0x369>
f0122b1b:	83 ec 04             	sub    $0x4,%esp
f0122b1e:	68 08 8d 13 f0       	push   $0xf0138d08
f0122b23:	68 1b 08 00 00       	push   $0x81b
f0122b28:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122b2d:	e8 7e d6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b32:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122b35:	e8 d8 9a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122b3a:	29 c3                	sub    %eax,%ebx
f0122b3c:	89 d8                	mov    %ebx,%eax
f0122b3e:	83 f8 01             	cmp    $0x1,%eax
f0122b41:	74 17                	je     f0122b5a <test_kheap_phys_addr+0x391>
f0122b43:	83 ec 04             	sub    $0x4,%esp
f0122b46:	68 70 8d 13 f0       	push   $0xf0138d70
f0122b4b:	68 1c 08 00 00       	push   $0x81c
f0122b50:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122b55:	e8 56 d6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b5a:	e8 b3 9a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122b5f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b62:	e8 51 17 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122b67:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122b6a:	83 ec 0c             	sub    $0xc,%esp
f0122b6d:	68 00 08 00 00       	push   $0x800
f0122b72:	e8 1c 50 fe ff       	call   f0107b93 <kmalloc>
f0122b77:	83 c4 10             	add    $0x10,%esp
f0122b7a:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b80:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122b86:	89 c1                	mov    %eax,%ecx
f0122b88:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122b8f:	10 00 00 
f0122b92:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122b97:	0f b6 d0             	movzbl %al,%edx
f0122b9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122ba0:	01 d0                	add    %edx,%eax
f0122ba2:	48                   	dec    %eax
f0122ba3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122ba9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122baf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bb4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122bba:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122bc0:	29 d0                	sub    %edx,%eax
f0122bc2:	89 c3                	mov    %eax,%ebx
f0122bc4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122bcb:	10 00 00 
f0122bce:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122bd3:	0f b6 c0             	movzbl %al,%eax
f0122bd6:	c1 e0 04             	shl    $0x4,%eax
f0122bd9:	89 c2                	mov    %eax,%edx
f0122bdb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122be1:	01 d0                	add    %edx,%eax
f0122be3:	48                   	dec    %eax
f0122be4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122bea:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bf5:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122bfb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122c01:	29 d0                	sub    %edx,%eax
f0122c03:	01 d8                	add    %ebx,%eax
f0122c05:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122c0a:	39 c1                	cmp    %eax,%ecx
f0122c0c:	74 17                	je     f0122c25 <test_kheap_phys_addr+0x45c>
f0122c0e:	83 ec 04             	sub    $0x4,%esp
f0122c11:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122c16:	68 22 08 00 00       	push   $0x822
f0122c1b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122c20:	e8 8b d5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c25:	e8 8e 16 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122c2a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122c2d:	74 17                	je     f0122c46 <test_kheap_phys_addr+0x47d>
f0122c2f:	83 ec 04             	sub    $0x4,%esp
f0122c32:	68 08 8d 13 f0       	push   $0xf0138d08
f0122c37:	68 23 08 00 00       	push   $0x823
f0122c3c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122c41:	e8 6a d5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c46:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122c49:	e8 c4 99 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122c4e:	29 c3                	sub    %eax,%ebx
f0122c50:	89 d8                	mov    %ebx,%eax
f0122c52:	83 f8 01             	cmp    $0x1,%eax
f0122c55:	74 17                	je     f0122c6e <test_kheap_phys_addr+0x4a5>
f0122c57:	83 ec 04             	sub    $0x4,%esp
f0122c5a:	68 70 8d 13 f0       	push   $0xf0138d70
f0122c5f:	68 24 08 00 00       	push   $0x824
f0122c64:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122c69:	e8 42 d5 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c6e:	e8 9f 99 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122c73:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c76:	e8 3d 16 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122c7b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122c7e:	83 ec 0c             	sub    $0xc,%esp
f0122c81:	68 00 1c 00 00       	push   $0x1c00
f0122c86:	e8 08 4f fe ff       	call   f0107b93 <kmalloc>
f0122c8b:	83 c4 10             	add    $0x10,%esp
f0122c8e:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c94:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0122c9a:	89 c1                	mov    %eax,%ecx
f0122c9c:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0122ca3:	10 00 00 
f0122ca6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122cab:	0f b6 d0             	movzbl %al,%edx
f0122cae:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122cb4:	01 d0                	add    %edx,%eax
f0122cb6:	48                   	dec    %eax
f0122cb7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0122cbd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122cc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cc8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0122cce:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122cd4:	29 d0                	sub    %edx,%eax
f0122cd6:	89 c3                	mov    %eax,%ebx
f0122cd8:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0122cdf:	10 00 00 
f0122ce2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122ce7:	0f b6 c0             	movzbl %al,%eax
f0122cea:	c1 e0 04             	shl    $0x4,%eax
f0122ced:	89 c2                	mov    %eax,%edx
f0122cef:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122cf5:	01 d0                	add    %edx,%eax
f0122cf7:	48                   	dec    %eax
f0122cf8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0122cfe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d09:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0122d0f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122d15:	29 d0                	sub    %edx,%eax
f0122d17:	01 d8                	add    %ebx,%eax
f0122d19:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122d1e:	39 c1                	cmp    %eax,%ecx
f0122d20:	74 17                	je     f0122d39 <test_kheap_phys_addr+0x570>
f0122d22:	83 ec 04             	sub    $0x4,%esp
f0122d25:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122d2a:	68 2a 08 00 00       	push   $0x82a
f0122d2f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122d34:	e8 77 d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d39:	e8 7a 15 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122d3e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122d41:	74 17                	je     f0122d5a <test_kheap_phys_addr+0x591>
f0122d43:	83 ec 04             	sub    $0x4,%esp
f0122d46:	68 08 8d 13 f0       	push   $0xf0138d08
f0122d4b:	68 2b 08 00 00       	push   $0x82b
f0122d50:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122d55:	e8 56 d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d5a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122d5d:	e8 b0 98 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122d62:	29 c3                	sub    %eax,%ebx
f0122d64:	89 d8                	mov    %ebx,%eax
f0122d66:	83 f8 02             	cmp    $0x2,%eax
f0122d69:	74 17                	je     f0122d82 <test_kheap_phys_addr+0x5b9>
f0122d6b:	83 ec 04             	sub    $0x4,%esp
f0122d6e:	68 70 8d 13 f0       	push   $0xf0138d70
f0122d73:	68 2c 08 00 00       	push   $0x82c
f0122d78:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122d7d:	e8 2e d4 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d82:	e8 8b 98 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122d87:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d8a:	e8 29 15 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122d8f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122d92:	83 ec 0c             	sub    $0xc,%esp
f0122d95:	68 00 fc 2f 00       	push   $0x2ffc00
f0122d9a:	e8 f4 4d fe ff       	call   f0107b93 <kmalloc>
f0122d9f:	83 c4 10             	add    $0x10,%esp
f0122da2:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122da8:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0122dae:	89 c1                	mov    %eax,%ecx
f0122db0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0122db7:	10 00 00 
f0122dba:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122dbf:	0f b6 d0             	movzbl %al,%edx
f0122dc2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122dc8:	01 d0                	add    %edx,%eax
f0122dca:	48                   	dec    %eax
f0122dcb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0122dd1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122dd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ddc:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0122de2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122de8:	29 d0                	sub    %edx,%eax
f0122dea:	89 c3                	mov    %eax,%ebx
f0122dec:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0122df3:	10 00 00 
f0122df6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122dfb:	0f b6 c0             	movzbl %al,%eax
f0122dfe:	c1 e0 04             	shl    $0x4,%eax
f0122e01:	89 c2                	mov    %eax,%edx
f0122e03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122e09:	01 d0                	add    %edx,%eax
f0122e0b:	48                   	dec    %eax
f0122e0c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0122e12:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122e18:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e1d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0122e23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122e29:	29 d0                	sub    %edx,%eax
f0122e2b:	01 d8                	add    %ebx,%eax
f0122e2d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122e32:	39 c1                	cmp    %eax,%ecx
f0122e34:	74 17                	je     f0122e4d <test_kheap_phys_addr+0x684>
f0122e36:	83 ec 04             	sub    $0x4,%esp
f0122e39:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122e3e:	68 32 08 00 00       	push   $0x832
f0122e43:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122e48:	e8 63 d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e4d:	e8 66 14 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122e52:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122e55:	74 17                	je     f0122e6e <test_kheap_phys_addr+0x6a5>
f0122e57:	83 ec 04             	sub    $0x4,%esp
f0122e5a:	68 08 8d 13 f0       	push   $0xf0138d08
f0122e5f:	68 33 08 00 00       	push   $0x833
f0122e64:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122e69:	e8 42 d3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e6e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122e71:	e8 9c 97 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122e76:	29 c3                	sub    %eax,%ebx
f0122e78:	89 d8                	mov    %ebx,%eax
f0122e7a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122e7f:	74 17                	je     f0122e98 <test_kheap_phys_addr+0x6cf>
f0122e81:	83 ec 04             	sub    $0x4,%esp
f0122e84:	68 70 8d 13 f0       	push   $0xf0138d70
f0122e89:	68 34 08 00 00       	push   $0x834
f0122e8e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122e93:	e8 18 d3 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e98:	e8 75 97 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122e9d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ea0:	e8 13 14 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122ea5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122ea8:	83 ec 0c             	sub    $0xc,%esp
f0122eab:	68 00 fc 5f 00       	push   $0x5ffc00
f0122eb0:	e8 de 4c fe ff       	call   f0107b93 <kmalloc>
f0122eb5:	83 c4 10             	add    $0x10,%esp
f0122eb8:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ebe:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0122ec4:	89 c1                	mov    %eax,%ecx
f0122ec6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0122ecd:	10 00 00 
f0122ed0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122ed5:	0f b6 d0             	movzbl %al,%edx
f0122ed8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ede:	01 d0                	add    %edx,%eax
f0122ee0:	48                   	dec    %eax
f0122ee1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0122ee7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122eed:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ef2:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0122ef8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122efe:	29 d0                	sub    %edx,%eax
f0122f00:	89 c3                	mov    %eax,%ebx
f0122f02:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0122f09:	10 00 00 
f0122f0c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122f11:	0f b6 c0             	movzbl %al,%eax
f0122f14:	c1 e0 04             	shl    $0x4,%eax
f0122f17:	89 c2                	mov    %eax,%edx
f0122f19:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f1f:	01 d0                	add    %edx,%eax
f0122f21:	48                   	dec    %eax
f0122f22:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0122f28:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122f2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f33:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0122f39:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122f3f:	29 d0                	sub    %edx,%eax
f0122f41:	01 d8                	add    %ebx,%eax
f0122f43:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122f48:	39 c1                	cmp    %eax,%ecx
f0122f4a:	74 17                	je     f0122f63 <test_kheap_phys_addr+0x79a>
f0122f4c:	83 ec 04             	sub    $0x4,%esp
f0122f4f:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0122f54:	68 3a 08 00 00       	push   $0x83a
f0122f59:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122f5e:	e8 4d d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f63:	e8 50 13 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122f68:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f6b:	74 17                	je     f0122f84 <test_kheap_phys_addr+0x7bb>
f0122f6d:	83 ec 04             	sub    $0x4,%esp
f0122f70:	68 08 8d 13 f0       	push   $0xf0138d08
f0122f75:	68 3b 08 00 00       	push   $0x83b
f0122f7a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122f7f:	e8 2c d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f84:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f87:	e8 86 96 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122f8c:	29 c3                	sub    %eax,%ebx
f0122f8e:	89 d8                	mov    %ebx,%eax
f0122f90:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122f95:	74 17                	je     f0122fae <test_kheap_phys_addr+0x7e5>
f0122f97:	83 ec 04             	sub    $0x4,%esp
f0122f9a:	68 70 8d 13 f0       	push   $0xf0138d70
f0122f9f:	68 3c 08 00 00       	push   $0x83c
f0122fa4:	68 ee 8c 13 f0       	push   $0xf0138cee
f0122fa9:	e8 02 d2 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fae:	e8 5f 96 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122fb3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fb6:	e8 fd 12 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122fbb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122fbe:	83 ec 0c             	sub    $0xc,%esp
f0122fc1:	68 00 38 00 00       	push   $0x3800
f0122fc6:	e8 c8 4b fe ff       	call   f0107b93 <kmalloc>
f0122fcb:	83 c4 10             	add    $0x10,%esp
f0122fce:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122fd4:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122fda:	89 c1                	mov    %eax,%ecx
f0122fdc:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0122fe3:	10 00 00 
f0122fe6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122feb:	0f b6 d0             	movzbl %al,%edx
f0122fee:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122ff4:	01 d0                	add    %edx,%eax
f0122ff6:	48                   	dec    %eax
f0122ff7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0122ffd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123003:	ba 00 00 00 00       	mov    $0x0,%edx
f0123008:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012300e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123014:	29 d0                	sub    %edx,%eax
f0123016:	89 c3                	mov    %eax,%ebx
f0123018:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012301f:	10 00 00 
f0123022:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123027:	0f b6 c0             	movzbl %al,%eax
f012302a:	c1 e0 04             	shl    $0x4,%eax
f012302d:	89 c2                	mov    %eax,%edx
f012302f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123035:	01 d0                	add    %edx,%eax
f0123037:	48                   	dec    %eax
f0123038:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012303e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123044:	ba 00 00 00 00       	mov    $0x0,%edx
f0123049:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012304f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123055:	29 d0                	sub    %edx,%eax
f0123057:	01 d8                	add    %ebx,%eax
f0123059:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012305e:	39 c1                	cmp    %eax,%ecx
f0123060:	74 17                	je     f0123079 <test_kheap_phys_addr+0x8b0>
f0123062:	83 ec 04             	sub    $0x4,%esp
f0123065:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012306a:	68 42 08 00 00       	push   $0x842
f012306f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123074:	e8 37 d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123079:	e8 3a 12 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012307e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123081:	74 17                	je     f012309a <test_kheap_phys_addr+0x8d1>
f0123083:	83 ec 04             	sub    $0x4,%esp
f0123086:	68 08 8d 13 f0       	push   $0xf0138d08
f012308b:	68 43 08 00 00       	push   $0x843
f0123090:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123095:	e8 16 d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012309a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012309d:	e8 70 95 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01230a2:	29 c3                	sub    %eax,%ebx
f01230a4:	89 d8                	mov    %ebx,%eax
f01230a6:	83 f8 04             	cmp    $0x4,%eax
f01230a9:	74 17                	je     f01230c2 <test_kheap_phys_addr+0x8f9>
f01230ab:	83 ec 04             	sub    $0x4,%esp
f01230ae:	68 70 8d 13 f0       	push   $0xf0138d70
f01230b3:	68 44 08 00 00       	push   $0x844
f01230b8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01230bd:	e8 ee d0 fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01230c2:	89 e0                	mov    %esp,%eax
f01230c4:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01230c6:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01230cd:	10 00 00 
f01230d0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01230d5:	0f b6 d0             	movzbl %al,%edx
f01230d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230de:	01 d0                	add    %edx,%eax
f01230e0:	48                   	dec    %eax
f01230e1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01230e7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01230ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01230f2:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01230f8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01230fe:	29 d0                	sub    %edx,%eax
f0123100:	89 c1                	mov    %eax,%ecx
f0123102:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123109:	10 00 00 
f012310c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123111:	0f b6 c0             	movzbl %al,%eax
f0123114:	c1 e0 04             	shl    $0x4,%eax
f0123117:	89 c2                	mov    %eax,%edx
f0123119:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012311f:	01 d0                	add    %edx,%eax
f0123121:	48                   	dec    %eax
f0123122:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123128:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012312e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123133:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123139:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012313f:	29 d0                	sub    %edx,%eax
f0123141:	01 c8                	add    %ecx,%eax
f0123143:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123148:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012314e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123155:	10 00 00 
f0123158:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012315d:	0f b6 d0             	movzbl %al,%edx
f0123160:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123166:	01 d0                	add    %edx,%eax
f0123168:	48                   	dec    %eax
f0123169:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012316f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123175:	ba 00 00 00 00       	mov    $0x0,%edx
f012317a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0123180:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123186:	29 d0                	sub    %edx,%eax
f0123188:	89 c1                	mov    %eax,%ecx
f012318a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0123191:	10 00 00 
f0123194:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123199:	0f b6 c0             	movzbl %al,%eax
f012319c:	c1 e0 04             	shl    $0x4,%eax
f012319f:	89 c2                	mov    %eax,%edx
f01231a1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01231a7:	01 d0                	add    %edx,%eax
f01231a9:	48                   	dec    %eax
f01231aa:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01231b0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01231b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01231bb:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01231c1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01231c7:	29 d0                	sub    %edx,%eax
f01231c9:	01 c8                	add    %ecx,%eax
f01231cb:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01231d0:	c1 e8 0c             	shr    $0xc,%eax
f01231d3:	89 c2                	mov    %eax,%edx
f01231d5:	4a                   	dec    %edx
f01231d6:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01231dc:	c1 e0 02             	shl    $0x2,%eax
f01231df:	8d 50 03             	lea    0x3(%eax),%edx
f01231e2:	b8 10 00 00 00       	mov    $0x10,%eax
f01231e7:	48                   	dec    %eax
f01231e8:	01 d0                	add    %edx,%eax
f01231ea:	bf 10 00 00 00       	mov    $0x10,%edi
f01231ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01231f4:	f7 f7                	div    %edi
f01231f6:	6b c0 10             	imul   $0x10,%eax,%eax
f01231f9:	29 c4                	sub    %eax,%esp
f01231fb:	89 e0                	mov    %esp,%eax
f01231fd:	83 c0 03             	add    $0x3,%eax
f0123200:	c1 e8 02             	shr    $0x2,%eax
f0123203:	c1 e0 02             	shl    $0x2,%eax
f0123206:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f012320c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123213:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012321a:	eb 29                	jmp    f0123245 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f012321c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012321f:	8d 43 01             	lea    0x1(%ebx),%eax
f0123222:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123225:	83 ec 0c             	sub    $0xc,%esp
f0123228:	ff 75 e0             	pushl  -0x20(%ebp)
f012322b:	e8 b1 49 fe ff       	call   f0107be1 <kheap_physical_address>
f0123230:	83 c4 10             	add    $0x10,%esp
f0123233:	89 c2                	mov    %eax,%edx
f0123235:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012323b:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012323e:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123245:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123248:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012324e:	72 cc                	jb     f012321c <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123250:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123253:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123259:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123260:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123267:	e9 ab 00 00 00       	jmp    f0123317 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012326c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0123271:	83 ec 04             	sub    $0x4,%esp
f0123274:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f012327a:	52                   	push   %edx
f012327b:	ff 75 e0             	pushl  -0x20(%ebp)
f012327e:	50                   	push   %eax
f012327f:	e8 97 3e fe ff       	call   f010711b <get_page_table>
f0123284:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123287:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012328d:	85 c0                	test   %eax,%eax
f012328f:	75 17                	jne    f01232a8 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123291:	83 ec 04             	sub    $0x4,%esp
f0123294:	68 90 96 13 f0       	push   $0xf0139690
f0123299:	68 59 08 00 00       	push   $0x859
f012329e:	68 ee 8c 13 f0       	push   $0xf0138cee
f01232a3:	e8 08 cf fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01232a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01232ab:	c1 e8 0c             	shr    $0xc,%eax
f01232ae:	25 ff 03 00 00       	and    $0x3ff,%eax
f01232b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01232b6:	eb 4b                	jmp    f0123303 <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01232b8:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01232be:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01232c1:	c1 e2 02             	shl    $0x2,%edx
f01232c4:	01 d0                	add    %edx,%eax
f01232c6:	8b 00                	mov    (%eax),%eax
f01232c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01232cd:	89 c1                	mov    %eax,%ecx
f01232cf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01232d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01232d8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01232db:	39 c1                	cmp    %eax,%ecx
f01232dd:	74 17                	je     f01232f6 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01232df:	83 ec 04             	sub    $0x4,%esp
f01232e2:	68 e9 96 13 f0       	push   $0xf01396e9
f01232e7:	68 60 08 00 00       	push   $0x860
f01232ec:	68 ee 8c 13 f0       	push   $0xf0138cee
f01232f1:	e8 ba ce fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01232f6:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01232fd:	ff 45 dc             	incl   -0x24(%ebp)
f0123300:	ff 45 e4             	incl   -0x1c(%ebp)
f0123303:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123306:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f012330c:	7d 09                	jge    f0123317 <test_kheap_phys_addr+0xb4e>
f012330e:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123315:	7e a1                	jle    f01232b8 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123317:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012331a:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0123320:	0f 82 46 ff ff ff    	jb     f012326c <test_kheap_phys_addr+0xaa3>
f0123326:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123328:	83 ec 0c             	sub    $0xc,%esp
f012332b:	68 08 97 13 f0       	push   $0xf0139708
f0123330:	e8 fc da fd ff       	call   f0100e31 <cprintf>
f0123335:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123338:	e8 d5 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012333d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123343:	e8 70 0f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123348:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012334e:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0123354:	83 ec 0c             	sub    $0xc,%esp
f0123357:	50                   	push   %eax
f0123358:	e8 50 48 fe ff       	call   f0107bad <kfree>
f012335d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123360:	e8 53 0f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123365:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012336b:	74 17                	je     f0123384 <test_kheap_phys_addr+0xbbb>
f012336d:	83 ec 04             	sub    $0x4,%esp
f0123370:	68 08 8d 13 f0       	push   $0xf0138d08
f0123375:	68 6e 08 00 00       	push   $0x86e
f012337a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012337f:	e8 2c ce fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123384:	e8 89 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123389:	89 c2                	mov    %eax,%edx
f012338b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123391:	29 c2                	sub    %eax,%edx
f0123393:	89 d0                	mov    %edx,%eax
f0123395:	3d 00 02 00 00       	cmp    $0x200,%eax
f012339a:	74 17                	je     f01233b3 <test_kheap_phys_addr+0xbea>
f012339c:	83 ec 04             	sub    $0x4,%esp
f012339f:	68 78 94 13 f0       	push   $0xf0139478
f01233a4:	68 6f 08 00 00       	push   $0x86f
f01233a9:	68 ee 8c 13 f0       	push   $0xf0138cee
f01233ae:	e8 fd cd fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233b3:	e8 5a 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01233b8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233be:	e8 f5 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01233c3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01233c9:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01233cf:	83 ec 0c             	sub    $0xc,%esp
f01233d2:	50                   	push   %eax
f01233d3:	e8 d5 47 fe ff       	call   f0107bad <kfree>
f01233d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233db:	e8 d8 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01233e0:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01233e6:	74 17                	je     f01233ff <test_kheap_phys_addr+0xc36>
f01233e8:	83 ec 04             	sub    $0x4,%esp
f01233eb:	68 08 8d 13 f0       	push   $0xf0138d08
f01233f0:	68 75 08 00 00       	push   $0x875
f01233f5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01233fa:	e8 b1 cd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01233ff:	e8 0e 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123404:	89 c2                	mov    %eax,%edx
f0123406:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012340c:	29 c2                	sub    %eax,%edx
f012340e:	89 d0                	mov    %edx,%eax
f0123410:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123415:	74 17                	je     f012342e <test_kheap_phys_addr+0xc65>
f0123417:	83 ec 04             	sub    $0x4,%esp
f012341a:	68 78 94 13 f0       	push   $0xf0139478
f012341f:	68 76 08 00 00       	push   $0x876
f0123424:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123429:	e8 82 cd fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012342e:	e8 df 91 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123433:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123439:	e8 7a 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012343e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123444:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012344a:	83 ec 0c             	sub    $0xc,%esp
f012344d:	50                   	push   %eax
f012344e:	e8 5a 47 fe ff       	call   f0107bad <kfree>
f0123453:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123456:	e8 5d 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012345b:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123461:	74 17                	je     f012347a <test_kheap_phys_addr+0xcb1>
f0123463:	83 ec 04             	sub    $0x4,%esp
f0123466:	68 08 8d 13 f0       	push   $0xf0138d08
f012346b:	68 7c 08 00 00       	push   $0x87c
f0123470:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123475:	e8 36 cd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012347a:	e8 93 91 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012347f:	89 c2                	mov    %eax,%edx
f0123481:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123487:	29 c2                	sub    %eax,%edx
f0123489:	89 d0                	mov    %edx,%eax
f012348b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123490:	74 17                	je     f01234a9 <test_kheap_phys_addr+0xce0>
f0123492:	83 ec 04             	sub    $0x4,%esp
f0123495:	68 78 94 13 f0       	push   $0xf0139478
f012349a:	68 7d 08 00 00       	push   $0x87d
f012349f:	68 ee 8c 13 f0       	push   $0xf0138cee
f01234a4:	e8 07 cd fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01234a9:	89 e0                	mov    %esp,%eax
f01234ab:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01234ad:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01234b4:	10 00 00 
f01234b7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01234bc:	0f b6 d0             	movzbl %al,%edx
f01234bf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01234c5:	01 d0                	add    %edx,%eax
f01234c7:	48                   	dec    %eax
f01234c8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01234ce:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01234d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01234d9:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01234df:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01234e5:	29 d0                	sub    %edx,%eax
f01234e7:	89 c1                	mov    %eax,%ecx
f01234e9:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01234f0:	10 00 00 
f01234f3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01234f8:	0f b6 c0             	movzbl %al,%eax
f01234fb:	c1 e0 04             	shl    $0x4,%eax
f01234fe:	89 c2                	mov    %eax,%edx
f0123500:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123506:	01 d0                	add    %edx,%eax
f0123508:	48                   	dec    %eax
f0123509:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012350f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123515:	ba 00 00 00 00       	mov    $0x0,%edx
f012351a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123520:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123526:	29 d0                	sub    %edx,%eax
f0123528:	01 c8                	add    %ecx,%eax
f012352a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012352f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123535:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012353c:	10 00 00 
f012353f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123544:	0f b6 d0             	movzbl %al,%edx
f0123547:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012354d:	01 d0                	add    %edx,%eax
f012354f:	48                   	dec    %eax
f0123550:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123556:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012355c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123561:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123567:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012356d:	29 d0                	sub    %edx,%eax
f012356f:	89 c1                	mov    %eax,%ecx
f0123571:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123578:	10 00 00 
f012357b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123580:	0f b6 c0             	movzbl %al,%eax
f0123583:	c1 e0 04             	shl    $0x4,%eax
f0123586:	89 c2                	mov    %eax,%edx
f0123588:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012358e:	01 d0                	add    %edx,%eax
f0123590:	48                   	dec    %eax
f0123591:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123597:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012359d:	ba 00 00 00 00       	mov    $0x0,%edx
f01235a2:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01235a8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01235ae:	29 d0                	sub    %edx,%eax
f01235b0:	01 c8                	add    %ecx,%eax
f01235b2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01235b7:	c1 e8 0c             	shr    $0xc,%eax
f01235ba:	89 c2                	mov    %eax,%edx
f01235bc:	4a                   	dec    %edx
f01235bd:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f01235c3:	c1 e0 02             	shl    $0x2,%eax
f01235c6:	8d 50 03             	lea    0x3(%eax),%edx
f01235c9:	b8 10 00 00 00       	mov    $0x10,%eax
f01235ce:	48                   	dec    %eax
f01235cf:	01 d0                	add    %edx,%eax
f01235d1:	bf 10 00 00 00       	mov    $0x10,%edi
f01235d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01235db:	f7 f7                	div    %edi
f01235dd:	6b c0 10             	imul   $0x10,%eax,%eax
f01235e0:	29 c4                	sub    %eax,%esp
f01235e2:	89 e0                	mov    %esp,%eax
f01235e4:	83 c0 03             	add    $0x3,%eax
f01235e7:	c1 e8 02             	shr    $0x2,%eax
f01235ea:	c1 e0 02             	shl    $0x2,%eax
f01235ed:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01235f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01235fa:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123601:	eb 29                	jmp    f012362c <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123603:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123606:	8d 43 01             	lea    0x1(%ebx),%eax
f0123609:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012360c:	83 ec 0c             	sub    $0xc,%esp
f012360f:	ff 75 d8             	pushl  -0x28(%ebp)
f0123612:	e8 ca 45 fe ff       	call   f0107be1 <kheap_physical_address>
f0123617:	83 c4 10             	add    $0x10,%esp
f012361a:	89 c2                	mov    %eax,%edx
f012361c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123622:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123625:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f012362c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012362f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123635:	72 cc                	jb     f0123603 <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012363a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0123640:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123647:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f012364e:	e9 ab 00 00 00       	jmp    f01236fe <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123653:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0123658:	83 ec 04             	sub    $0x4,%esp
f012365b:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123661:	52                   	push   %edx
f0123662:	ff 75 d8             	pushl  -0x28(%ebp)
f0123665:	50                   	push   %eax
f0123666:	e8 b0 3a fe ff       	call   f010711b <get_page_table>
f012366b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012366e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123674:	85 c0                	test   %eax,%eax
f0123676:	75 17                	jne    f012368f <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123678:	83 ec 04             	sub    $0x4,%esp
f012367b:	68 90 96 13 f0       	push   $0xf0139690
f0123680:	68 93 08 00 00       	push   $0x893
f0123685:	68 ee 8c 13 f0       	push   $0xf0138cee
f012368a:	e8 21 cb fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012368f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123692:	c1 e8 0c             	shr    $0xc,%eax
f0123695:	25 ff 03 00 00       	and    $0x3ff,%eax
f012369a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f012369d:	eb 4b                	jmp    f01236ea <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012369f:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01236a5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01236a8:	c1 e2 02             	shl    $0x2,%edx
f01236ab:	01 d0                	add    %edx,%eax
f01236ad:	8b 00                	mov    (%eax),%eax
f01236af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01236b4:	89 c1                	mov    %eax,%ecx
f01236b6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01236bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01236bf:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01236c2:	39 c1                	cmp    %eax,%ecx
f01236c4:	74 17                	je     f01236dd <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01236c6:	83 ec 04             	sub    $0x4,%esp
f01236c9:	68 e9 96 13 f0       	push   $0xf01396e9
f01236ce:	68 9a 08 00 00       	push   $0x89a
f01236d3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01236d8:	e8 d3 ca fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f01236dd:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236e4:	ff 45 d4             	incl   -0x2c(%ebp)
f01236e7:	ff 45 e4             	incl   -0x1c(%ebp)
f01236ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01236ed:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f01236f3:	7d 09                	jge    f01236fe <test_kheap_phys_addr+0xf35>
f01236f5:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01236fc:	7e a1                	jle    f012369f <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01236fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123701:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123707:	0f 82 46 ff ff ff    	jb     f0123653 <test_kheap_phys_addr+0xe8a>
f012370d:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f012370f:	83 ec 0c             	sub    $0xc,%esp
f0123712:	68 79 8e 13 f0       	push   $0xf0138e79
f0123717:	e8 15 d7 fd ff       	call   f0100e31 <cprintf>
f012371c:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f012371f:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123726:	10 00 00 
f0123729:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012372e:	0f b6 d0             	movzbl %al,%edx
f0123731:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123737:	01 d0                	add    %edx,%eax
f0123739:	48                   	dec    %eax
f012373a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123740:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123746:	ba 00 00 00 00       	mov    $0x0,%edx
f012374b:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123751:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123757:	29 d0                	sub    %edx,%eax
f0123759:	89 c1                	mov    %eax,%ecx
f012375b:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123762:	10 00 00 
f0123765:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012376a:	0f b6 c0             	movzbl %al,%eax
f012376d:	c1 e0 04             	shl    $0x4,%eax
f0123770:	89 c2                	mov    %eax,%edx
f0123772:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123778:	01 d0                	add    %edx,%eax
f012377a:	48                   	dec    %eax
f012377b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123781:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123787:	ba 00 00 00 00       	mov    $0x0,%edx
f012378c:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123792:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123798:	29 d0                	sub    %edx,%eax
f012379a:	01 c8                	add    %ecx,%eax
f012379c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01237a1:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01237a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01237ae:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01237b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01237b7:	eb 0a                	jmp    f01237c3 <test_kheap_phys_addr+0xffa>
		{
			i++;
f01237b9:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01237bc:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01237c3:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01237ca:	76 ed                	jbe    f01237b9 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f01237cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01237cf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f01237d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01237dc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01237e2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01237e5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01237ec:	e9 cc 00 00 00       	jmp    f01238bd <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01237f1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01237f4:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01237f9:	83 ec 04             	sub    $0x4,%esp
f01237fc:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123802:	51                   	push   %ecx
f0123803:	52                   	push   %edx
f0123804:	50                   	push   %eax
f0123805:	e8 11 39 fe ff       	call   f010711b <get_page_table>
f012380a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012380d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123813:	85 c0                	test   %eax,%eax
f0123815:	75 17                	jne    f012382e <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123817:	83 ec 04             	sub    $0x4,%esp
f012381a:	68 90 96 13 f0       	push   $0xf0139690
f012381f:	68 b6 08 00 00       	push   $0x8b6
f0123824:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123829:	e8 82 c9 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012382e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123835:	eb 67                	jmp    f012389e <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123837:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012383a:	c1 e0 0c             	shl    $0xc,%eax
f012383d:	89 c2                	mov    %eax,%edx
f012383f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123845:	01 d0                	add    %edx,%eax
f0123847:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f012384d:	83 ec 0c             	sub    $0xc,%esp
f0123850:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123856:	e8 86 43 fe ff       	call   f0107be1 <kheap_physical_address>
f012385b:	83 c4 10             	add    $0x10,%esp
f012385e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123864:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012386a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f012386d:	c1 e2 02             	shl    $0x2,%edx
f0123870:	01 d0                	add    %edx,%eax
f0123872:	8b 00                	mov    (%eax),%eax
f0123874:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123879:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f012387f:	74 17                	je     f0123898 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123881:	83 ec 04             	sub    $0x4,%esp
f0123884:	68 e9 96 13 f0       	push   $0xf01396e9
f0123889:	68 c0 08 00 00       	push   $0x8c0
f012388e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123893:	e8 18 c9 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123898:	ff 45 cc             	incl   -0x34(%ebp)
f012389b:	ff 45 e4             	incl   -0x1c(%ebp)
f012389e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01238a1:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f01238a7:	7d 09                	jge    f01238b2 <test_kheap_phys_addr+0x10e9>
f01238a9:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01238b0:	7e 85                	jle    f0123837 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01238b2:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01238b9:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01238bd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01238c1:	0f 88 2a ff ff ff    	js     f01237f1 <test_kheap_phys_addr+0x1028>
f01238c7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01238cb:	7f 0d                	jg     f01238da <test_kheap_phys_addr+0x1111>
f01238cd:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01238d4:	0f 86 17 ff ff ff    	jbe    f01237f1 <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01238da:	83 ec 0c             	sub    $0xc,%esp
f01238dd:	68 d2 8e 13 f0       	push   $0xf0138ed2
f01238e2:	e8 4a d5 fd ff       	call   f0100e31 <cprintf>
f01238e7:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01238ea:	83 ec 0c             	sub    $0xc,%esp
f01238ed:	68 3c 97 13 f0       	push   $0xf013973c
f01238f2:	e8 3a d5 fd ff       	call   f0100e31 <cprintf>
f01238f7:	83 c4 10             	add    $0x10,%esp

	return 1;
f01238fa:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01238ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123902:	5b                   	pop    %ebx
f0123903:	5e                   	pop    %esi
f0123904:	5f                   	pop    %edi
f0123905:	5d                   	pop    %ebp
f0123906:	c3                   	ret    

f0123907 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123907:	55                   	push   %ebp
f0123908:	89 e5                	mov    %esp,%ebp
f012390a:	57                   	push   %edi
f012390b:	56                   	push   %esi
f012390c:	53                   	push   %ebx
f012390d:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123913:	89 e0                	mov    %esp,%eax
f0123915:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123917:	83 ec 0c             	sub    $0xc,%esp
f012391a:	68 30 8c 13 f0       	push   $0xf0138c30
f012391f:	e8 0d d5 fd ff       	call   f0100e31 <cprintf>
f0123924:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123927:	83 ec 0c             	sub    $0xc,%esp
f012392a:	68 60 8c 13 f0       	push   $0xf0138c60
f012392f:	e8 fd d4 fd ff       	call   f0100e31 <cprintf>
f0123934:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123937:	83 ec 0c             	sub    $0xc,%esp
f012393a:	68 30 8c 13 f0       	push   $0xf0138c30
f012393f:	e8 ed d4 fd ff       	call   f0100e31 <cprintf>
f0123944:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123947:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f012394b:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012394f:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123955:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f012395b:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123962:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123969:	e8 a4 8c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012396e:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123971:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123977:	b9 14 00 00 00       	mov    $0x14,%ecx
f012397c:	b8 00 00 00 00       	mov    $0x0,%eax
f0123981:	89 d7                	mov    %edx,%edi
f0123983:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123985:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f012398b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123990:	b8 00 00 00 00       	mov    $0x0,%eax
f0123995:	89 d7                	mov    %edx,%edi
f0123997:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123999:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f012399f:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239a4:	b8 00 00 00 00       	mov    $0x0,%eax
f01239a9:	89 d7                	mov    %edx,%edi
f01239ab:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01239ad:	e8 60 8c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01239b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239b5:	e8 fe 08 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01239ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01239bd:	83 ec 0c             	sub    $0xc,%esp
f01239c0:	68 00 fc 1f 00       	push   $0x1ffc00
f01239c5:	e8 c9 41 fe ff       	call   f0107b93 <kmalloc>
f01239ca:	83 c4 10             	add    $0x10,%esp
f01239cd:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01239d3:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01239d9:	89 c1                	mov    %eax,%ecx
f01239db:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01239e2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01239e7:	0f b6 d0             	movzbl %al,%edx
f01239ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01239ed:	01 d0                	add    %edx,%eax
f01239ef:	48                   	dec    %eax
f01239f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01239f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01239f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01239fb:	f7 75 b4             	divl   -0x4c(%ebp)
f01239fe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123a01:	29 d0                	sub    %edx,%eax
f0123a03:	89 c3                	mov    %eax,%ebx
f0123a05:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123a0c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123a11:	0f b6 c0             	movzbl %al,%eax
f0123a14:	c1 e0 04             	shl    $0x4,%eax
f0123a17:	89 c2                	mov    %eax,%edx
f0123a19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123a1c:	01 d0                	add    %edx,%eax
f0123a1e:	48                   	dec    %eax
f0123a1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123a22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123a25:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a2a:	f7 75 ac             	divl   -0x54(%ebp)
f0123a2d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123a30:	29 d0                	sub    %edx,%eax
f0123a32:	01 d8                	add    %ebx,%eax
f0123a34:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123a39:	39 c1                	cmp    %eax,%ecx
f0123a3b:	74 17                	je     f0123a54 <test_kheap_virt_addr+0x14d>
f0123a3d:	83 ec 04             	sub    $0x4,%esp
f0123a40:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123a45:	68 ed 08 00 00       	push   $0x8ed
f0123a4a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123a4f:	e8 5c c7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a54:	e8 5f 08 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123a59:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123a5c:	74 17                	je     f0123a75 <test_kheap_virt_addr+0x16e>
f0123a5e:	83 ec 04             	sub    $0x4,%esp
f0123a61:	68 08 8d 13 f0       	push   $0xf0138d08
f0123a66:	68 ee 08 00 00       	push   $0x8ee
f0123a6b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123a70:	e8 3b c7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a75:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123a78:	e8 95 8b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123a7d:	29 c3                	sub    %eax,%ebx
f0123a7f:	89 d8                	mov    %ebx,%eax
f0123a81:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123a86:	74 17                	je     f0123a9f <test_kheap_virt_addr+0x198>
f0123a88:	83 ec 04             	sub    $0x4,%esp
f0123a8b:	68 70 8d 13 f0       	push   $0xf0138d70
f0123a90:	68 ef 08 00 00       	push   $0x8ef
f0123a95:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123a9a:	e8 11 c7 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a9f:	e8 6e 8b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123aa4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123aa7:	e8 0c 08 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123aac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123aaf:	83 ec 0c             	sub    $0xc,%esp
f0123ab2:	68 00 fc 1f 00       	push   $0x1ffc00
f0123ab7:	e8 d7 40 fe ff       	call   f0107b93 <kmalloc>
f0123abc:	83 c4 10             	add    $0x10,%esp
f0123abf:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ac5:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123acb:	89 c1                	mov    %eax,%ecx
f0123acd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123ad4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123ad9:	0f b6 d0             	movzbl %al,%edx
f0123adc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123adf:	01 d0                	add    %edx,%eax
f0123ae1:	48                   	dec    %eax
f0123ae2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123ae5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ae8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123aed:	f7 75 a4             	divl   -0x5c(%ebp)
f0123af0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123af3:	29 d0                	sub    %edx,%eax
f0123af5:	89 c3                	mov    %eax,%ebx
f0123af7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123afe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123b03:	0f b6 c0             	movzbl %al,%eax
f0123b06:	c1 e0 04             	shl    $0x4,%eax
f0123b09:	89 c2                	mov    %eax,%edx
f0123b0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123b0e:	01 d0                	add    %edx,%eax
f0123b10:	48                   	dec    %eax
f0123b11:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123b14:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123b17:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b1c:	f7 75 9c             	divl   -0x64(%ebp)
f0123b1f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123b22:	29 d0                	sub    %edx,%eax
f0123b24:	01 d8                	add    %ebx,%eax
f0123b26:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123b2b:	39 c1                	cmp    %eax,%ecx
f0123b2d:	74 17                	je     f0123b46 <test_kheap_virt_addr+0x23f>
f0123b2f:	83 ec 04             	sub    $0x4,%esp
f0123b32:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123b37:	68 f5 08 00 00       	push   $0x8f5
f0123b3c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123b41:	e8 6a c6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b46:	e8 6d 07 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123b4b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123b4e:	74 17                	je     f0123b67 <test_kheap_virt_addr+0x260>
f0123b50:	83 ec 04             	sub    $0x4,%esp
f0123b53:	68 08 8d 13 f0       	push   $0xf0138d08
f0123b58:	68 f6 08 00 00       	push   $0x8f6
f0123b5d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123b62:	e8 49 c6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b67:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123b6a:	e8 a3 8a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123b6f:	29 c3                	sub    %eax,%ebx
f0123b71:	89 d8                	mov    %ebx,%eax
f0123b73:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123b78:	74 17                	je     f0123b91 <test_kheap_virt_addr+0x28a>
f0123b7a:	83 ec 04             	sub    $0x4,%esp
f0123b7d:	68 70 8d 13 f0       	push   $0xf0138d70
f0123b82:	68 f7 08 00 00       	push   $0x8f7
f0123b87:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123b8c:	e8 1f c6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b91:	e8 7c 8a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123b96:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b99:	e8 1a 07 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123b9e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123ba1:	83 ec 0c             	sub    $0xc,%esp
f0123ba4:	68 00 08 00 00       	push   $0x800
f0123ba9:	e8 e5 3f fe ff       	call   f0107b93 <kmalloc>
f0123bae:	83 c4 10             	add    $0x10,%esp
f0123bb1:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123bb7:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123bbd:	89 c1                	mov    %eax,%ecx
f0123bbf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123bc6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123bcb:	0f b6 d0             	movzbl %al,%edx
f0123bce:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123bd1:	01 d0                	add    %edx,%eax
f0123bd3:	48                   	dec    %eax
f0123bd4:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123bd7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123bda:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bdf:	f7 75 94             	divl   -0x6c(%ebp)
f0123be2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123be5:	29 d0                	sub    %edx,%eax
f0123be7:	89 c3                	mov    %eax,%ebx
f0123be9:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123bf0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123bf5:	0f b6 c0             	movzbl %al,%eax
f0123bf8:	c1 e0 04             	shl    $0x4,%eax
f0123bfb:	89 c2                	mov    %eax,%edx
f0123bfd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123c00:	01 d0                	add    %edx,%eax
f0123c02:	48                   	dec    %eax
f0123c03:	89 45 88             	mov    %eax,-0x78(%ebp)
f0123c06:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123c09:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c0e:	f7 75 8c             	divl   -0x74(%ebp)
f0123c11:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123c14:	29 d0                	sub    %edx,%eax
f0123c16:	01 d8                	add    %ebx,%eax
f0123c18:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123c1d:	39 c1                	cmp    %eax,%ecx
f0123c1f:	74 17                	je     f0123c38 <test_kheap_virt_addr+0x331>
f0123c21:	83 ec 04             	sub    $0x4,%esp
f0123c24:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123c29:	68 fd 08 00 00       	push   $0x8fd
f0123c2e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123c33:	e8 78 c5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c38:	e8 7b 06 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123c3d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123c40:	74 17                	je     f0123c59 <test_kheap_virt_addr+0x352>
f0123c42:	83 ec 04             	sub    $0x4,%esp
f0123c45:	68 08 8d 13 f0       	push   $0xf0138d08
f0123c4a:	68 fe 08 00 00       	push   $0x8fe
f0123c4f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123c54:	e8 57 c5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123c59:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123c5c:	e8 b1 89 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123c61:	29 c3                	sub    %eax,%ebx
f0123c63:	89 d8                	mov    %ebx,%eax
f0123c65:	83 f8 01             	cmp    $0x1,%eax
f0123c68:	74 17                	je     f0123c81 <test_kheap_virt_addr+0x37a>
f0123c6a:	83 ec 04             	sub    $0x4,%esp
f0123c6d:	68 70 8d 13 f0       	push   $0xf0138d70
f0123c72:	68 ff 08 00 00       	push   $0x8ff
f0123c77:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123c7c:	e8 2f c5 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c81:	e8 8c 89 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123c86:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c89:	e8 2a 06 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123c8e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123c91:	83 ec 0c             	sub    $0xc,%esp
f0123c94:	68 00 08 00 00       	push   $0x800
f0123c99:	e8 f5 3e fe ff       	call   f0107b93 <kmalloc>
f0123c9e:	83 c4 10             	add    $0x10,%esp
f0123ca1:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ca7:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0123cad:	89 c1                	mov    %eax,%ecx
f0123caf:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0123cb6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123cbb:	0f b6 d0             	movzbl %al,%edx
f0123cbe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123cc1:	01 d0                	add    %edx,%eax
f0123cc3:	48                   	dec    %eax
f0123cc4:	89 45 80             	mov    %eax,-0x80(%ebp)
f0123cc7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123cca:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ccf:	f7 75 84             	divl   -0x7c(%ebp)
f0123cd2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123cd5:	29 d0                	sub    %edx,%eax
f0123cd7:	89 c3                	mov    %eax,%ebx
f0123cd9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0123ce0:	10 00 00 
f0123ce3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123ce8:	0f b6 c0             	movzbl %al,%eax
f0123ceb:	c1 e0 04             	shl    $0x4,%eax
f0123cee:	89 c2                	mov    %eax,%edx
f0123cf0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123cf6:	01 d0                	add    %edx,%eax
f0123cf8:	48                   	dec    %eax
f0123cf9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0123cff:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123d05:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d0a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0123d10:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123d16:	29 d0                	sub    %edx,%eax
f0123d18:	01 d8                	add    %ebx,%eax
f0123d1a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123d1f:	39 c1                	cmp    %eax,%ecx
f0123d21:	74 17                	je     f0123d3a <test_kheap_virt_addr+0x433>
f0123d23:	83 ec 04             	sub    $0x4,%esp
f0123d26:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123d2b:	68 05 09 00 00       	push   $0x905
f0123d30:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123d35:	e8 76 c4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d3a:	e8 79 05 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123d3f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123d42:	74 17                	je     f0123d5b <test_kheap_virt_addr+0x454>
f0123d44:	83 ec 04             	sub    $0x4,%esp
f0123d47:	68 08 8d 13 f0       	push   $0xf0138d08
f0123d4c:	68 06 09 00 00       	push   $0x906
f0123d51:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123d56:	e8 55 c4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123d5b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123d5e:	e8 af 88 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123d63:	29 c3                	sub    %eax,%ebx
f0123d65:	89 d8                	mov    %ebx,%eax
f0123d67:	83 f8 01             	cmp    $0x1,%eax
f0123d6a:	74 17                	je     f0123d83 <test_kheap_virt_addr+0x47c>
f0123d6c:	83 ec 04             	sub    $0x4,%esp
f0123d6f:	68 70 8d 13 f0       	push   $0xf0138d70
f0123d74:	68 07 09 00 00       	push   $0x907
f0123d79:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123d7e:	e8 2d c4 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d83:	e8 8a 88 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123d88:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d8b:	e8 28 05 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123d90:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123d93:	83 ec 0c             	sub    $0xc,%esp
f0123d96:	68 00 1c 00 00       	push   $0x1c00
f0123d9b:	e8 f3 3d fe ff       	call   f0107b93 <kmalloc>
f0123da0:	83 c4 10             	add    $0x10,%esp
f0123da3:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123da9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123daf:	89 c1                	mov    %eax,%ecx
f0123db1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0123db8:	10 00 00 
f0123dbb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123dc0:	0f b6 d0             	movzbl %al,%edx
f0123dc3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123dc9:	01 d0                	add    %edx,%eax
f0123dcb:	48                   	dec    %eax
f0123dcc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0123dd2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ddd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0123de3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123de9:	29 d0                	sub    %edx,%eax
f0123deb:	89 c3                	mov    %eax,%ebx
f0123ded:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0123df4:	10 00 00 
f0123df7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123dfc:	0f b6 c0             	movzbl %al,%eax
f0123dff:	c1 e0 04             	shl    $0x4,%eax
f0123e02:	89 c2                	mov    %eax,%edx
f0123e04:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123e0a:	01 d0                	add    %edx,%eax
f0123e0c:	48                   	dec    %eax
f0123e0d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0123e13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e1e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0123e24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123e2a:	29 d0                	sub    %edx,%eax
f0123e2c:	01 d8                	add    %ebx,%eax
f0123e2e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123e33:	39 c1                	cmp    %eax,%ecx
f0123e35:	74 17                	je     f0123e4e <test_kheap_virt_addr+0x547>
f0123e37:	83 ec 04             	sub    $0x4,%esp
f0123e3a:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123e3f:	68 0d 09 00 00       	push   $0x90d
f0123e44:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123e49:	e8 62 c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e4e:	e8 65 04 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123e53:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123e56:	74 17                	je     f0123e6f <test_kheap_virt_addr+0x568>
f0123e58:	83 ec 04             	sub    $0x4,%esp
f0123e5b:	68 08 8d 13 f0       	push   $0xf0138d08
f0123e60:	68 0e 09 00 00       	push   $0x90e
f0123e65:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123e6a:	e8 41 c3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e6f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123e72:	e8 9b 87 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123e77:	29 c3                	sub    %eax,%ebx
f0123e79:	89 d8                	mov    %ebx,%eax
f0123e7b:	83 f8 02             	cmp    $0x2,%eax
f0123e7e:	74 17                	je     f0123e97 <test_kheap_virt_addr+0x590>
f0123e80:	83 ec 04             	sub    $0x4,%esp
f0123e83:	68 70 8d 13 f0       	push   $0xf0138d70
f0123e88:	68 0f 09 00 00       	push   $0x90f
f0123e8d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123e92:	e8 19 c3 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e97:	e8 76 87 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123e9c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e9f:	e8 14 04 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123ea4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123ea7:	83 ec 0c             	sub    $0xc,%esp
f0123eaa:	68 00 fc 2f 00       	push   $0x2ffc00
f0123eaf:	e8 df 3c fe ff       	call   f0107b93 <kmalloc>
f0123eb4:	83 c4 10             	add    $0x10,%esp
f0123eb7:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ebd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123ec3:	89 c1                	mov    %eax,%ecx
f0123ec5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0123ecc:	10 00 00 
f0123ecf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123ed4:	0f b6 d0             	movzbl %al,%edx
f0123ed7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123edd:	01 d0                	add    %edx,%eax
f0123edf:	48                   	dec    %eax
f0123ee0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0123ee6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123eec:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ef1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0123ef7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123efd:	29 d0                	sub    %edx,%eax
f0123eff:	89 c3                	mov    %eax,%ebx
f0123f01:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0123f08:	10 00 00 
f0123f0b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123f10:	0f b6 c0             	movzbl %al,%eax
f0123f13:	c1 e0 04             	shl    $0x4,%eax
f0123f16:	89 c2                	mov    %eax,%edx
f0123f18:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123f1e:	01 d0                	add    %edx,%eax
f0123f20:	48                   	dec    %eax
f0123f21:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0123f27:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f32:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0123f38:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123f3e:	29 d0                	sub    %edx,%eax
f0123f40:	01 d8                	add    %ebx,%eax
f0123f42:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123f47:	39 c1                	cmp    %eax,%ecx
f0123f49:	74 17                	je     f0123f62 <test_kheap_virt_addr+0x65b>
f0123f4b:	83 ec 04             	sub    $0x4,%esp
f0123f4e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0123f53:	68 15 09 00 00       	push   $0x915
f0123f58:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123f5d:	e8 4e c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f62:	e8 51 03 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123f67:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123f6a:	74 17                	je     f0123f83 <test_kheap_virt_addr+0x67c>
f0123f6c:	83 ec 04             	sub    $0x4,%esp
f0123f6f:	68 08 8d 13 f0       	push   $0xf0138d08
f0123f74:	68 16 09 00 00       	push   $0x916
f0123f79:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123f7e:	e8 2d c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f83:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123f86:	e8 87 86 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123f8b:	29 c3                	sub    %eax,%ebx
f0123f8d:	89 d8                	mov    %ebx,%eax
f0123f8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123f94:	74 17                	je     f0123fad <test_kheap_virt_addr+0x6a6>
f0123f96:	83 ec 04             	sub    $0x4,%esp
f0123f99:	68 70 8d 13 f0       	push   $0xf0138d70
f0123f9e:	68 17 09 00 00       	push   $0x917
f0123fa3:	68 ee 8c 13 f0       	push   $0xf0138cee
f0123fa8:	e8 03 c2 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123fad:	e8 60 86 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123fb2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fb5:	e8 fe 02 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123fba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123fbd:	83 ec 0c             	sub    $0xc,%esp
f0123fc0:	68 00 fc 5f 00       	push   $0x5ffc00
f0123fc5:	e8 c9 3b fe ff       	call   f0107b93 <kmalloc>
f0123fca:	83 c4 10             	add    $0x10,%esp
f0123fcd:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123fd3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123fd9:	89 c1                	mov    %eax,%ecx
f0123fdb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0123fe2:	10 00 00 
f0123fe5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123fea:	0f b6 d0             	movzbl %al,%edx
f0123fed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123ff3:	01 d0                	add    %edx,%eax
f0123ff5:	48                   	dec    %eax
f0123ff6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0123ffc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124002:	ba 00 00 00 00       	mov    $0x0,%edx
f0124007:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012400d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124013:	29 d0                	sub    %edx,%eax
f0124015:	89 c3                	mov    %eax,%ebx
f0124017:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012401e:	10 00 00 
f0124021:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124026:	0f b6 c0             	movzbl %al,%eax
f0124029:	c1 e0 04             	shl    $0x4,%eax
f012402c:	89 c2                	mov    %eax,%edx
f012402e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124034:	01 d0                	add    %edx,%eax
f0124036:	48                   	dec    %eax
f0124037:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012403d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124043:	ba 00 00 00 00       	mov    $0x0,%edx
f0124048:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012404e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124054:	29 d0                	sub    %edx,%eax
f0124056:	01 d8                	add    %ebx,%eax
f0124058:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012405d:	39 c1                	cmp    %eax,%ecx
f012405f:	74 17                	je     f0124078 <test_kheap_virt_addr+0x771>
f0124061:	83 ec 04             	sub    $0x4,%esp
f0124064:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0124069:	68 1d 09 00 00       	push   $0x91d
f012406e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124073:	e8 38 c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124078:	e8 3b 02 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012407d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124080:	74 17                	je     f0124099 <test_kheap_virt_addr+0x792>
f0124082:	83 ec 04             	sub    $0x4,%esp
f0124085:	68 08 8d 13 f0       	push   $0xf0138d08
f012408a:	68 1e 09 00 00       	push   $0x91e
f012408f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124094:	e8 17 c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124099:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012409c:	e8 71 85 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01240a1:	29 c3                	sub    %eax,%ebx
f01240a3:	89 d8                	mov    %ebx,%eax
f01240a5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01240aa:	74 17                	je     f01240c3 <test_kheap_virt_addr+0x7bc>
f01240ac:	83 ec 04             	sub    $0x4,%esp
f01240af:	68 70 8d 13 f0       	push   $0xf0138d70
f01240b4:	68 1f 09 00 00       	push   $0x91f
f01240b9:	68 ee 8c 13 f0       	push   $0xf0138cee
f01240be:	e8 ed c0 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01240c3:	e8 4a 85 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01240c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240cb:	e8 e8 01 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01240d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01240d3:	83 ec 0c             	sub    $0xc,%esp
f01240d6:	68 00 38 00 00       	push   $0x3800
f01240db:	e8 b3 3a fe ff       	call   f0107b93 <kmalloc>
f01240e0:	83 c4 10             	add    $0x10,%esp
f01240e3:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240e9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01240ef:	89 c1                	mov    %eax,%ecx
f01240f1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01240f8:	10 00 00 
f01240fb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124100:	0f b6 d0             	movzbl %al,%edx
f0124103:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124109:	01 d0                	add    %edx,%eax
f012410b:	48                   	dec    %eax
f012410c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124112:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124118:	ba 00 00 00 00       	mov    $0x0,%edx
f012411d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124123:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124129:	29 d0                	sub    %edx,%eax
f012412b:	89 c3                	mov    %eax,%ebx
f012412d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124134:	10 00 00 
f0124137:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012413c:	0f b6 c0             	movzbl %al,%eax
f012413f:	c1 e0 04             	shl    $0x4,%eax
f0124142:	89 c2                	mov    %eax,%edx
f0124144:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012414a:	01 d0                	add    %edx,%eax
f012414c:	48                   	dec    %eax
f012414d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124153:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124159:	ba 00 00 00 00       	mov    $0x0,%edx
f012415e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124164:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012416a:	29 d0                	sub    %edx,%eax
f012416c:	01 d8                	add    %ebx,%eax
f012416e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124173:	39 c1                	cmp    %eax,%ecx
f0124175:	74 17                	je     f012418e <test_kheap_virt_addr+0x887>
f0124177:	83 ec 04             	sub    $0x4,%esp
f012417a:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012417f:	68 25 09 00 00       	push   $0x925
f0124184:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124189:	e8 22 c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012418e:	e8 25 01 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0124193:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124196:	74 17                	je     f01241af <test_kheap_virt_addr+0x8a8>
f0124198:	83 ec 04             	sub    $0x4,%esp
f012419b:	68 08 8d 13 f0       	push   $0xf0138d08
f01241a0:	68 26 09 00 00       	push   $0x926
f01241a5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01241aa:	e8 01 c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241af:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01241b2:	e8 5b 84 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01241b7:	29 c3                	sub    %eax,%ebx
f01241b9:	89 d8                	mov    %ebx,%eax
f01241bb:	83 f8 04             	cmp    $0x4,%eax
f01241be:	74 17                	je     f01241d7 <test_kheap_virt_addr+0x8d0>
f01241c0:	83 ec 04             	sub    $0x4,%esp
f01241c3:	68 70 8d 13 f0       	push   $0xf0138d70
f01241c8:	68 27 09 00 00       	push   $0x927
f01241cd:	68 ee 8c 13 f0       	push   $0xf0138cee
f01241d2:	e8 d9 bf fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f01241d7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01241de:	10 00 00 
f01241e1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01241e6:	0f b6 d0             	movzbl %al,%edx
f01241e9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01241ef:	01 d0                	add    %edx,%eax
f01241f1:	48                   	dec    %eax
f01241f2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01241f8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01241fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124203:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124209:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012420f:	29 d0                	sub    %edx,%eax
f0124211:	89 c1                	mov    %eax,%ecx
f0124213:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012421a:	10 00 00 
f012421d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124222:	0f b6 c0             	movzbl %al,%eax
f0124225:	c1 e0 04             	shl    $0x4,%eax
f0124228:	89 c2                	mov    %eax,%edx
f012422a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124230:	01 d0                	add    %edx,%eax
f0124232:	48                   	dec    %eax
f0124233:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124239:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012423f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124244:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012424a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124250:	29 d0                	sub    %edx,%eax
f0124252:	01 c8                	add    %ecx,%eax
f0124254:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124259:	c1 e8 0c             	shr    $0xc,%eax
f012425c:	89 c2                	mov    %eax,%edx
f012425e:	4a                   	dec    %edx
f012425f:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124265:	c1 e0 02             	shl    $0x2,%eax
f0124268:	8d 50 03             	lea    0x3(%eax),%edx
f012426b:	b8 10 00 00 00       	mov    $0x10,%eax
f0124270:	48                   	dec    %eax
f0124271:	01 d0                	add    %edx,%eax
f0124273:	bf 10 00 00 00       	mov    $0x10,%edi
f0124278:	ba 00 00 00 00       	mov    $0x0,%edx
f012427d:	f7 f7                	div    %edi
f012427f:	6b c0 10             	imul   $0x10,%eax,%eax
f0124282:	29 c4                	sub    %eax,%esp
f0124284:	89 e0                	mov    %esp,%eax
f0124286:	83 c0 03             	add    $0x3,%eax
f0124289:	c1 e8 02             	shr    $0x2,%eax
f012428c:	c1 e0 02             	shl    $0x2,%eax
f012428f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124295:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012429c:	10 00 00 
f012429f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01242a4:	0f b6 d0             	movzbl %al,%edx
f01242a7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01242ad:	01 d0                	add    %edx,%eax
f01242af:	48                   	dec    %eax
f01242b0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01242b6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01242bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01242c7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01242cd:	29 d0                	sub    %edx,%eax
f01242cf:	89 c1                	mov    %eax,%ecx
f01242d1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01242d8:	10 00 00 
f01242db:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01242e0:	0f b6 c0             	movzbl %al,%eax
f01242e3:	c1 e0 04             	shl    $0x4,%eax
f01242e6:	89 c2                	mov    %eax,%edx
f01242e8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01242ee:	01 d0                	add    %edx,%eax
f01242f0:	48                   	dec    %eax
f01242f1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01242f7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01242fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124302:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124308:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012430e:	29 d0                	sub    %edx,%eax
f0124310:	01 c8                	add    %ecx,%eax
f0124312:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124317:	c1 e8 0c             	shr    $0xc,%eax
f012431a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124320:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124327:	10 00 00 
f012432a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012432f:	0f b6 d0             	movzbl %al,%edx
f0124332:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124338:	01 d0                	add    %edx,%eax
f012433a:	48                   	dec    %eax
f012433b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124341:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124347:	ba 00 00 00 00       	mov    $0x0,%edx
f012434c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124352:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124358:	29 d0                	sub    %edx,%eax
f012435a:	89 c1                	mov    %eax,%ecx
f012435c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124363:	10 00 00 
f0124366:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012436b:	0f b6 c0             	movzbl %al,%eax
f012436e:	c1 e0 04             	shl    $0x4,%eax
f0124371:	89 c2                	mov    %eax,%edx
f0124373:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124379:	01 d0                	add    %edx,%eax
f012437b:	48                   	dec    %eax
f012437c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124382:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124388:	ba 00 00 00 00       	mov    $0x0,%edx
f012438d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124393:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124399:	29 d0                	sub    %edx,%eax
f012439b:	01 c8                	add    %ecx,%eax
f012439d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01243a2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f01243a8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01243af:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f01243b6:	e9 21 01 00 00       	jmp    f01244dc <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01243bb:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01243c0:	83 ec 04             	sub    $0x4,%esp
f01243c3:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01243c9:	52                   	push   %edx
f01243ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f01243cd:	50                   	push   %eax
f01243ce:	e8 48 2d fe ff       	call   f010711b <get_page_table>
f01243d3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01243d6:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01243dc:	85 c0                	test   %eax,%eax
f01243de:	75 17                	jne    f01243f7 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01243e0:	83 ec 04             	sub    $0x4,%esp
f01243e3:	68 90 96 13 f0       	push   $0xf0139690
f01243e8:	68 38 09 00 00       	push   $0x938
f01243ed:	68 ee 8c 13 f0       	push   $0xf0138cee
f01243f2:	e8 b9 bd fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01243f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01243fa:	c1 e8 0c             	shr    $0xc,%eax
f01243fd:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124402:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124405:	e9 ba 00 00 00       	jmp    f01244c4 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012440a:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124410:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124413:	c1 e2 02             	shl    $0x2,%edx
f0124416:	01 d0                	add    %edx,%eax
f0124418:	8b 00                	mov    (%eax),%eax
f012441a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012441f:	89 c1                	mov    %eax,%ecx
f0124421:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124427:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012442a:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012442d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124433:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124436:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124439:	83 ec 0c             	sub    $0xc,%esp
f012443c:	50                   	push   %eax
f012443d:	e8 85 37 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124442:	83 c4 10             	add    $0x10,%esp
f0124445:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f012444b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124451:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124454:	74 61                	je     f01244b7 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124456:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012445c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012445f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124462:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124468:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012446b:	c1 e1 02             	shl    $0x2,%ecx
f012446e:	01 ca                	add    %ecx,%edx
f0124470:	8b 12                	mov    (%edx),%edx
f0124472:	89 d1                	mov    %edx,%ecx
f0124474:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012447a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012447d:	c1 e2 0c             	shl    $0xc,%edx
f0124480:	89 d3                	mov    %edx,%ebx
f0124482:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124485:	01 da                	add    %ebx,%edx
f0124487:	83 ec 0c             	sub    $0xc,%esp
f012448a:	50                   	push   %eax
f012448b:	51                   	push   %ecx
f012448c:	52                   	push   %edx
f012448d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124493:	68 84 97 13 f0       	push   $0xf0139784
f0124498:	e8 94 c9 fd ff       	call   f0100e31 <cprintf>
f012449d:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01244a0:	83 ec 04             	sub    $0x4,%esp
f01244a3:	68 c7 97 13 f0       	push   $0xf01397c7
f01244a8:	68 42 09 00 00       	push   $0x942
f01244ad:	68 ee 8c 13 f0       	push   $0xf0138cee
f01244b2:	e8 f9 bc fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01244b7:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01244be:	ff 45 dc             	incl   -0x24(%ebp)
f01244c1:	ff 45 e0             	incl   -0x20(%ebp)
f01244c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01244c7:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f01244cd:	7d 0d                	jge    f01244dc <test_kheap_virt_addr+0xbd5>
f01244cf:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01244d6:	0f 8e 2e ff ff ff    	jle    f012440a <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01244dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01244df:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f01244e5:	0f 82 d0 fe ff ff    	jb     f01243bb <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01244eb:	83 ec 0c             	sub    $0xc,%esp
f01244ee:	68 e4 97 13 f0       	push   $0xf01397e4
f01244f3:	e8 39 c9 fd ff       	call   f0100e31 <cprintf>
f01244f8:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01244fb:	e8 12 81 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124500:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124506:	e8 ad fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012450b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0124511:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124517:	83 ec 0c             	sub    $0xc,%esp
f012451a:	50                   	push   %eax
f012451b:	e8 8d 36 fe ff       	call   f0107bad <kfree>
f0124520:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124523:	e8 90 fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124528:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012452e:	74 17                	je     f0124547 <test_kheap_virt_addr+0xc40>
f0124530:	83 ec 04             	sub    $0x4,%esp
f0124533:	68 08 8d 13 f0       	push   $0xf0138d08
f0124538:	68 50 09 00 00       	push   $0x950
f012453d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124542:	e8 69 bc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124547:	e8 c6 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012454c:	89 c2                	mov    %eax,%edx
f012454e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124554:	29 c2                	sub    %eax,%edx
f0124556:	89 d0                	mov    %edx,%eax
f0124558:	3d 00 02 00 00       	cmp    $0x200,%eax
f012455d:	74 17                	je     f0124576 <test_kheap_virt_addr+0xc6f>
f012455f:	83 ec 04             	sub    $0x4,%esp
f0124562:	68 78 94 13 f0       	push   $0xf0139478
f0124567:	68 51 09 00 00       	push   $0x951
f012456c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124571:	e8 3a bc fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124576:	e8 97 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012457b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124581:	e8 32 fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124586:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f012458c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124592:	83 ec 0c             	sub    $0xc,%esp
f0124595:	50                   	push   %eax
f0124596:	e8 12 36 fe ff       	call   f0107bad <kfree>
f012459b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012459e:	e8 15 fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01245a3:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01245a9:	74 17                	je     f01245c2 <test_kheap_virt_addr+0xcbb>
f01245ab:	83 ec 04             	sub    $0x4,%esp
f01245ae:	68 08 8d 13 f0       	push   $0xf0138d08
f01245b3:	68 57 09 00 00       	push   $0x957
f01245b8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01245bd:	e8 ee bb fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01245c2:	e8 4b 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01245c7:	89 c2                	mov    %eax,%edx
f01245c9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01245cf:	29 c2                	sub    %eax,%edx
f01245d1:	89 d0                	mov    %edx,%eax
f01245d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01245d8:	74 17                	je     f01245f1 <test_kheap_virt_addr+0xcea>
f01245da:	83 ec 04             	sub    $0x4,%esp
f01245dd:	68 78 94 13 f0       	push   $0xf0139478
f01245e2:	68 58 09 00 00       	push   $0x958
f01245e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01245ec:	e8 bf bb fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01245f1:	e8 1c 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01245f6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01245fc:	e8 b7 fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124601:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124607:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012460d:	83 ec 0c             	sub    $0xc,%esp
f0124610:	50                   	push   %eax
f0124611:	e8 97 35 fe ff       	call   f0107bad <kfree>
f0124616:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124619:	e8 9a fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012461e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124624:	74 17                	je     f012463d <test_kheap_virt_addr+0xd36>
f0124626:	83 ec 04             	sub    $0x4,%esp
f0124629:	68 08 8d 13 f0       	push   $0xf0138d08
f012462e:	68 5e 09 00 00       	push   $0x95e
f0124633:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124638:	e8 73 bb fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012463d:	e8 d0 7f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124642:	89 c2                	mov    %eax,%edx
f0124644:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012464a:	29 c2                	sub    %eax,%edx
f012464c:	89 d0                	mov    %edx,%eax
f012464e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124653:	74 17                	je     f012466c <test_kheap_virt_addr+0xd65>
f0124655:	83 ec 04             	sub    $0x4,%esp
f0124658:	68 78 94 13 f0       	push   $0xf0139478
f012465d:	68 5f 09 00 00       	push   $0x95f
f0124662:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124667:	e8 44 bb fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012466c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124673:	10 00 00 
f0124676:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012467b:	0f b6 d0             	movzbl %al,%edx
f012467e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124684:	01 d0                	add    %edx,%eax
f0124686:	48                   	dec    %eax
f0124687:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012468d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124693:	ba 00 00 00 00       	mov    $0x0,%edx
f0124698:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012469e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01246a4:	29 d0                	sub    %edx,%eax
f01246a6:	89 c1                	mov    %eax,%ecx
f01246a8:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01246af:	10 00 00 
f01246b2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01246b7:	0f b6 c0             	movzbl %al,%eax
f01246ba:	c1 e0 04             	shl    $0x4,%eax
f01246bd:	89 c2                	mov    %eax,%edx
f01246bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01246c5:	01 d0                	add    %edx,%eax
f01246c7:	48                   	dec    %eax
f01246c8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01246ce:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01246d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01246d9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01246df:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01246e5:	29 d0                	sub    %edx,%eax
f01246e7:	01 c8                	add    %ecx,%eax
f01246e9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01246ee:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f01246f4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01246fb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124702:	10 00 00 
f0124705:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012470a:	0f b6 d0             	movzbl %al,%edx
f012470d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124713:	01 d0                	add    %edx,%eax
f0124715:	48                   	dec    %eax
f0124716:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012471c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124722:	ba 00 00 00 00       	mov    $0x0,%edx
f0124727:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012472d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124733:	29 d0                	sub    %edx,%eax
f0124735:	89 c1                	mov    %eax,%ecx
f0124737:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012473e:	10 00 00 
f0124741:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124746:	0f b6 c0             	movzbl %al,%eax
f0124749:	c1 e0 04             	shl    $0x4,%eax
f012474c:	89 c2                	mov    %eax,%edx
f012474e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124754:	01 d0                	add    %edx,%eax
f0124756:	48                   	dec    %eax
f0124757:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012475d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124763:	ba 00 00 00 00       	mov    $0x0,%edx
f0124768:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012476e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124774:	29 d0                	sub    %edx,%eax
f0124776:	01 c8                	add    %ecx,%eax
f0124778:	05 00 40 00 00       	add    $0x4000,%eax
f012477d:	c1 e8 0c             	shr    $0xc,%eax
f0124780:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124786:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012478c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012478f:	eb 41                	jmp    f01247d2 <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124791:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124797:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012479a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012479d:	83 ec 0c             	sub    $0xc,%esp
f01247a0:	50                   	push   %eax
f01247a1:	e8 21 34 fe ff       	call   f0107bc7 <kheap_virtual_address>
f01247a6:	83 c4 10             	add    $0x10,%esp
f01247a9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f01247af:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f01247b6:	74 17                	je     f01247cf <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f01247b8:	83 ec 04             	sub    $0x4,%esp
f01247bb:	68 c7 97 13 f0       	push   $0xf01397c7
f01247c0:	68 70 09 00 00       	push   $0x970
f01247c5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01247ca:	e8 e1 b9 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01247cf:	ff 45 d8             	incl   -0x28(%ebp)
f01247d2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01247d8:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01247de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01247e1:	39 c2                	cmp    %eax,%edx
f01247e3:	77 ac                	ja     f0124791 <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01247e5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01247eb:	05 00 04 00 00       	add    $0x400,%eax
f01247f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01247f3:	eb 4b                	jmp    f0124840 <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01247f5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247fb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01247fe:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124801:	83 ec 0c             	sub    $0xc,%esp
f0124804:	50                   	push   %eax
f0124805:	e8 bd 33 fe ff       	call   f0107bc7 <kheap_virtual_address>
f012480a:	83 c4 10             	add    $0x10,%esp
f012480d:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124813:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124816:	c1 e0 0c             	shl    $0xc,%eax
f0124819:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012481e:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124824:	74 17                	je     f012483d <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124826:	83 ec 04             	sub    $0x4,%esp
f0124829:	68 c7 97 13 f0       	push   $0xf01397c7
f012482e:	68 7a 09 00 00       	push   $0x97a
f0124833:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124838:	e8 73 b9 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012483d:	ff 45 d8             	incl   -0x28(%ebp)
f0124840:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124846:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012484c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012484f:	39 c2                	cmp    %eax,%edx
f0124851:	77 a2                	ja     f01247f5 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124853:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124859:	05 04 07 00 00       	add    $0x704,%eax
f012485e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124861:	eb 41                	jmp    f01248a4 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124863:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124869:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012486c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012486f:	83 ec 0c             	sub    $0xc,%esp
f0124872:	50                   	push   %eax
f0124873:	e8 4f 33 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124878:	83 c4 10             	add    $0x10,%esp
f012487b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124881:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124888:	74 17                	je     f01248a1 <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f012488a:	83 ec 04             	sub    $0x4,%esp
f012488d:	68 c7 97 13 f0       	push   $0xf01397c7
f0124892:	68 83 09 00 00       	push   $0x983
f0124897:	68 ee 8c 13 f0       	push   $0xf0138cee
f012489c:	e8 0f b9 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01248a1:	ff 45 d8             	incl   -0x28(%ebp)
f01248a4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01248aa:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01248b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01248b3:	39 c2                	cmp    %eax,%edx
f01248b5:	77 ac                	ja     f0124863 <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01248b7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01248bd:	05 04 0d 00 00       	add    $0xd04,%eax
f01248c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01248c5:	eb 4b                	jmp    f0124912 <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01248c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01248cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01248d0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01248d3:	83 ec 0c             	sub    $0xc,%esp
f01248d6:	50                   	push   %eax
f01248d7:	e8 eb 32 fe ff       	call   f0107bc7 <kheap_virtual_address>
f01248dc:	83 c4 10             	add    $0x10,%esp
f01248df:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01248e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01248e8:	c1 e0 0c             	shl    $0xc,%eax
f01248eb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01248f0:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f01248f6:	74 17                	je     f012490f <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f01248f8:	83 ec 04             	sub    $0x4,%esp
f01248fb:	68 c7 97 13 f0       	push   $0xf01397c7
f0124900:	68 8c 09 00 00       	push   $0x98c
f0124905:	68 ee 8c 13 f0       	push   $0xf0138cee
f012490a:	e8 a1 b8 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012490f:	ff 45 d8             	incl   -0x28(%ebp)
f0124912:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124918:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f012491e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124921:	39 c2                	cmp    %eax,%edx
f0124923:	77 a2                	ja     f01248c7 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124925:	83 ec 0c             	sub    $0xc,%esp
f0124928:	68 79 8e 13 f0       	push   $0xf0138e79
f012492d:	e8 ff c4 fd ff       	call   f0100e31 <cprintf>
f0124932:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124935:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012493c:	eb 54                	jmp    f0124992 <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f012493e:	83 ec 0c             	sub    $0xc,%esp
f0124941:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124944:	e8 7e 32 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124949:	83 c4 10             	add    $0x10,%esp
f012494c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124952:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124959:	74 30                	je     f012498b <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012495b:	83 ec 04             	sub    $0x4,%esp
f012495e:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124964:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124967:	68 15 98 13 f0       	push   $0xf0139815
f012496c:	e8 c0 c4 fd ff       	call   f0100e31 <cprintf>
f0124971:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124974:	83 ec 04             	sub    $0x4,%esp
f0124977:	68 c7 97 13 f0       	push   $0xf01397c7
f012497c:	68 9c 09 00 00       	push   $0x99c
f0124981:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124986:	e8 25 b8 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012498b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124992:	b8 2c e6 2d 00       	mov    $0x2de62c,%eax
f0124997:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f012499a:	72 a2                	jb     f012493e <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012499c:	83 ec 0c             	sub    $0xc,%esp
f012499f:	68 d2 8e 13 f0       	push   $0xf0138ed2
f01249a4:	e8 88 c4 fd ff       	call   f0100e31 <cprintf>
f01249a9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01249ac:	83 ec 0c             	sub    $0xc,%esp
f01249af:	68 34 98 13 f0       	push   $0xf0139834
f01249b4:	e8 78 c4 fd ff       	call   f0100e31 <cprintf>
f01249b9:	83 c4 10             	add    $0x10,%esp

	return 1;
f01249bc:	b8 01 00 00 00       	mov    $0x1,%eax
f01249c1:	89 f4                	mov    %esi,%esp

}
f01249c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01249c6:	5b                   	pop    %ebx
f01249c7:	5e                   	pop    %esi
f01249c8:	5f                   	pop    %edi
f01249c9:	5d                   	pop    %ebp
f01249ca:	c3                   	ret    

f01249cb <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01249cb:	55                   	push   %ebp
f01249cc:	89 e5                	mov    %esp,%ebp
f01249ce:	57                   	push   %edi
f01249cf:	56                   	push   %esi
f01249d0:	53                   	push   %ebx
f01249d1:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f01249d7:	a0 1d cb 18 f0       	mov    0xf018cb1d,%al
f01249dc:	84 c0                	test   %al,%al
f01249de:	74 56                	je     f0124a36 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01249e0:	c6 05 1d cb 18 f0 00 	movb   $0x0,0xf018cb1d
		initFreeFrames = sys_calculate_free_frames() ;
f01249e7:	e8 26 7c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01249ec:	a3 28 e6 2d f0       	mov    %eax,0xf02de628
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01249f1:	e8 c2 f8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01249f6:	a3 24 e6 2d f0       	mov    %eax,0xf02de624
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01249fb:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124a01:	bb 91 99 13 f0       	mov    $0xf0139991,%ebx
f0124a06:	ba 11 00 00 00       	mov    $0x11,%edx
f0124a0b:	89 c7                	mov    %eax,%edi
f0124a0d:	89 de                	mov    %ebx,%esi
f0124a0f:	89 d1                	mov    %edx,%ecx
f0124a11:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124a13:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124a19:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124a1e:	b0 00                	mov    $0x0,%al
f0124a20:	89 d7                	mov    %edx,%edi
f0124a22:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124a24:	83 ec 0c             	sub    $0xc,%esp
f0124a27:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124a2d:	50                   	push   %eax
f0124a2e:	e8 90 d1 fd ff       	call   f0101bc3 <execute_command>
f0124a33:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124a36:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124a3d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124a44:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0124a49:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a4c:	eb 2b                	jmp    f0124a79 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124a4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a51:	83 c0 5c             	add    $0x5c,%eax
f0124a54:	83 ec 08             	sub    $0x8,%esp
f0124a57:	68 7b 98 13 f0       	push   $0xf013987b
f0124a5c:	50                   	push   %eax
f0124a5d:	e8 ec a0 00 00       	call   f012eb4e <strcmp>
f0124a62:	83 c4 10             	add    $0x10,%esp
f0124a65:	85 c0                	test   %eax,%eax
f0124a67:	75 08                	jne    f0124a71 <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124a69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124a6f:	eb 2f                	jmp    f0124aa0 <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124a71:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0124a76:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124a7d:	74 08                	je     f0124a87 <test_three_creation_functions+0xbc>
f0124a7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a82:	8b 40 44             	mov    0x44(%eax),%eax
f0124a85:	eb 05                	jmp    f0124a8c <test_three_creation_functions+0xc1>
f0124a87:	b8 00 00 00 00       	mov    $0x0,%eax
f0124a8c:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f0124a91:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0124a96:	85 c0                	test   %eax,%eax
f0124a98:	75 b4                	jne    f0124a4e <test_three_creation_functions+0x83>
f0124a9a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124a9e:	75 ae                	jne    f0124a4e <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124aa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124aa3:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124aa9:	85 c0                	test   %eax,%eax
f0124aab:	74 17                	je     f0124ac4 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124aad:	83 ec 04             	sub    $0x4,%esp
f0124ab0:	68 84 98 13 f0       	push   $0xf0139884
f0124ab5:	68 c6 09 00 00       	push   $0x9c6
f0124aba:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124abf:	e8 ec b6 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124ac4:	83 ec 0c             	sub    $0xc,%esp
f0124ac7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124aca:	e8 ba 33 fe ff       	call   f0107e89 <env_page_ws_get_size>
f0124acf:	83 c4 10             	add    $0x10,%esp
f0124ad2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124ad5:	e8 38 7b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124ada:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124add:	e8 d6 f7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124ae2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ae5:	a1 24 e6 2d f0       	mov    0xf02de624,%eax
f0124aea:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124aed:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124af0:	74 17                	je     f0124b09 <test_three_creation_functions+0x13e>
f0124af2:	83 ec 04             	sub    $0x4,%esp
f0124af5:	68 08 8d 13 f0       	push   $0xf0138d08
f0124afa:	68 cc 09 00 00       	push   $0x9cc
f0124aff:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124b04:	e8 a7 b6 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b09:	a1 28 e6 2d f0       	mov    0xf02de628,%eax
f0124b0e:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124b11:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124b14:	83 c2 15             	add    $0x15,%edx
f0124b17:	39 d0                	cmp    %edx,%eax
f0124b19:	74 17                	je     f0124b32 <test_three_creation_functions+0x167>
f0124b1b:	83 ec 04             	sub    $0x4,%esp
f0124b1e:	68 70 8d 13 f0       	push   $0xf0138d70
f0124b23:	68 ce 09 00 00       	push   $0x9ce
f0124b28:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124b2d:	e8 7e b6 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124b32:	83 ec 0c             	sub    $0xc,%esp
f0124b35:	68 00 10 00 00       	push   $0x1000
f0124b3a:	e8 54 30 fe ff       	call   f0107b93 <kmalloc>
f0124b3f:	83 c4 10             	add    $0x10,%esp
f0124b42:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124b45:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124b4c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124b51:	0f b6 d0             	movzbl %al,%edx
f0124b54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124b57:	01 d0                	add    %edx,%eax
f0124b59:	48                   	dec    %eax
f0124b5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124b5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124b60:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b65:	f7 75 cc             	divl   -0x34(%ebp)
f0124b68:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124b6b:	29 d0                	sub    %edx,%eax
f0124b6d:	89 c1                	mov    %eax,%ecx
f0124b6f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124b76:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124b7b:	0f b6 c0             	movzbl %al,%eax
f0124b7e:	c1 e0 04             	shl    $0x4,%eax
f0124b81:	89 c2                	mov    %eax,%edx
f0124b83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124b86:	01 d0                	add    %edx,%eax
f0124b88:	48                   	dec    %eax
f0124b89:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124b8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b94:	f7 75 c4             	divl   -0x3c(%ebp)
f0124b97:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124b9a:	29 d0                	sub    %edx,%eax
f0124b9c:	01 c8                	add    %ecx,%eax
f0124b9e:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124ba4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124ba7:	39 c2                	cmp    %eax,%edx
f0124ba9:	74 17                	je     f0124bc2 <test_three_creation_functions+0x1f7>
f0124bab:	83 ec 04             	sub    $0x4,%esp
f0124bae:	68 d4 98 13 f0       	push   $0xf01398d4
f0124bb3:	68 d2 09 00 00       	push   $0x9d2
f0124bb8:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124bbd:	e8 ee b5 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124bc2:	83 ec 0c             	sub    $0xc,%esp
f0124bc5:	68 44 99 13 f0       	push   $0xf0139944
f0124bca:	e8 62 c2 fd ff       	call   f0100e31 <cprintf>
f0124bcf:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124bd2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124bd7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124bda:	5b                   	pop    %ebx
f0124bdb:	5e                   	pop    %esi
f0124bdc:	5f                   	pop    %edi
f0124bdd:	5d                   	pop    %ebp
f0124bde:	c3                   	ret    

f0124bdf <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124bdf:	55                   	push   %ebp
f0124be0:	89 e5                	mov    %esp,%ebp
f0124be2:	57                   	push   %edi
f0124be3:	53                   	push   %ebx
f0124be4:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124bea:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124bee:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124bf2:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124bf8:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124bfe:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124c05:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124c0c:	e8 01 7a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124c11:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124c14:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0124c1a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c24:	89 d7                	mov    %edx,%edi
f0124c26:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124c28:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0124c2e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c33:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c38:	89 d7                	mov    %edx,%edi
f0124c3a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124c3c:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0124c42:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c47:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c4c:	89 d7                	mov    %edx,%edi
f0124c4e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c50:	e8 bd 79 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124c55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c58:	e8 5b f6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124c5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124c60:	83 ec 0c             	sub    $0xc,%esp
f0124c63:	68 00 fc 1f 00       	push   $0x1ffc00
f0124c68:	e8 26 2f fe ff       	call   f0107b93 <kmalloc>
f0124c6d:	83 c4 10             	add    $0x10,%esp
f0124c70:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c76:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124c7c:	89 c1                	mov    %eax,%ecx
f0124c7e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0124c85:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124c8a:	0f b6 d0             	movzbl %al,%edx
f0124c8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124c90:	01 d0                	add    %edx,%eax
f0124c92:	48                   	dec    %eax
f0124c93:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0124c96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124c99:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c9e:	f7 75 c8             	divl   -0x38(%ebp)
f0124ca1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124ca4:	29 d0                	sub    %edx,%eax
f0124ca6:	89 c3                	mov    %eax,%ebx
f0124ca8:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0124caf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124cb4:	0f b6 c0             	movzbl %al,%eax
f0124cb7:	c1 e0 04             	shl    $0x4,%eax
f0124cba:	89 c2                	mov    %eax,%edx
f0124cbc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124cbf:	01 d0                	add    %edx,%eax
f0124cc1:	48                   	dec    %eax
f0124cc2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0124cc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0124cc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ccd:	f7 75 c0             	divl   -0x40(%ebp)
f0124cd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0124cd3:	29 d0                	sub    %edx,%eax
f0124cd5:	01 d8                	add    %ebx,%eax
f0124cd7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124cdc:	39 c1                	cmp    %eax,%ecx
f0124cde:	74 17                	je     f0124cf7 <test_kfreeall+0x118>
f0124ce0:	83 ec 04             	sub    $0x4,%esp
f0124ce3:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0124ce8:	68 f9 09 00 00       	push   $0x9f9
f0124ced:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124cf2:	e8 b9 b4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124cf7:	e8 bc f5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124cfc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124cff:	74 17                	je     f0124d18 <test_kfreeall+0x139>
f0124d01:	83 ec 04             	sub    $0x4,%esp
f0124d04:	68 08 8d 13 f0       	push   $0xf0138d08
f0124d09:	68 fa 09 00 00       	push   $0x9fa
f0124d0e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124d13:	e8 98 b4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d18:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124d1b:	e8 f2 78 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124d20:	29 c3                	sub    %eax,%ebx
f0124d22:	89 d8                	mov    %ebx,%eax
f0124d24:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124d29:	74 17                	je     f0124d42 <test_kfreeall+0x163>
f0124d2b:	83 ec 04             	sub    $0x4,%esp
f0124d2e:	68 70 8d 13 f0       	push   $0xf0138d70
f0124d33:	68 fb 09 00 00       	push   $0x9fb
f0124d38:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124d3d:	e8 6e b4 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0124d42:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0124d49:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124d4c:	e8 c1 78 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124d51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124d54:	e8 5f f5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124d59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124d5c:	83 ec 0c             	sub    $0xc,%esp
f0124d5f:	68 00 fc 1f 00       	push   $0x1ffc00
f0124d64:	e8 2a 2e fe ff       	call   f0107b93 <kmalloc>
f0124d69:	83 c4 10             	add    $0x10,%esp
f0124d6c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124d72:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124d78:	89 c1                	mov    %eax,%ecx
f0124d7a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0124d81:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124d86:	0f b6 d0             	movzbl %al,%edx
f0124d89:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0124d8c:	01 d0                	add    %edx,%eax
f0124d8e:	48                   	dec    %eax
f0124d8f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0124d92:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124d95:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d9a:	f7 75 b8             	divl   -0x48(%ebp)
f0124d9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124da0:	29 d0                	sub    %edx,%eax
f0124da2:	89 c3                	mov    %eax,%ebx
f0124da4:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0124dab:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124db0:	0f b6 c0             	movzbl %al,%eax
f0124db3:	c1 e0 04             	shl    $0x4,%eax
f0124db6:	89 c2                	mov    %eax,%edx
f0124db8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124dbb:	01 d0                	add    %edx,%eax
f0124dbd:	48                   	dec    %eax
f0124dbe:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0124dc1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124dc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc9:	f7 75 b0             	divl   -0x50(%ebp)
f0124dcc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124dcf:	29 d0                	sub    %edx,%eax
f0124dd1:	01 d8                	add    %ebx,%eax
f0124dd3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124dd8:	39 c1                	cmp    %eax,%ecx
f0124dda:	74 17                	je     f0124df3 <test_kfreeall+0x214>
f0124ddc:	83 ec 04             	sub    $0x4,%esp
f0124ddf:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0124de4:	68 02 0a 00 00       	push   $0xa02
f0124de9:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124dee:	e8 bd b3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124df3:	e8 c0 f4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124df8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124dfb:	74 17                	je     f0124e14 <test_kfreeall+0x235>
f0124dfd:	83 ec 04             	sub    $0x4,%esp
f0124e00:	68 08 8d 13 f0       	push   $0xf0138d08
f0124e05:	68 03 0a 00 00       	push   $0xa03
f0124e0a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124e0f:	e8 9c b3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e14:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124e17:	e8 f6 77 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124e1c:	29 c3                	sub    %eax,%ebx
f0124e1e:	89 d8                	mov    %ebx,%eax
f0124e20:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e25:	74 17                	je     f0124e3e <test_kfreeall+0x25f>
f0124e27:	83 ec 04             	sub    $0x4,%esp
f0124e2a:	68 70 8d 13 f0       	push   $0xf0138d70
f0124e2f:	68 04 0a 00 00       	push   $0xa04
f0124e34:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124e39:	e8 72 b3 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0124e3e:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0124e45:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124e48:	e8 c5 77 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124e4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e50:	e8 63 f4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124e55:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124e58:	83 ec 0c             	sub    $0xc,%esp
f0124e5b:	68 00 08 00 00       	push   $0x800
f0124e60:	e8 2e 2d fe ff       	call   f0107b93 <kmalloc>
f0124e65:	83 c4 10             	add    $0x10,%esp
f0124e68:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124e6e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124e74:	89 c1                	mov    %eax,%ecx
f0124e76:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0124e7d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124e82:	0f b6 d0             	movzbl %al,%edx
f0124e85:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124e88:	01 d0                	add    %edx,%eax
f0124e8a:	48                   	dec    %eax
f0124e8b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0124e8e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124e91:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e96:	f7 75 a8             	divl   -0x58(%ebp)
f0124e99:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124e9c:	29 d0                	sub    %edx,%eax
f0124e9e:	89 c3                	mov    %eax,%ebx
f0124ea0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0124ea7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124eac:	0f b6 c0             	movzbl %al,%eax
f0124eaf:	c1 e0 04             	shl    $0x4,%eax
f0124eb2:	89 c2                	mov    %eax,%edx
f0124eb4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124eb7:	01 d0                	add    %edx,%eax
f0124eb9:	48                   	dec    %eax
f0124eba:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124ebd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124ec0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ec5:	f7 75 a0             	divl   -0x60(%ebp)
f0124ec8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124ecb:	29 d0                	sub    %edx,%eax
f0124ecd:	01 d8                	add    %ebx,%eax
f0124ecf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124ed4:	39 c1                	cmp    %eax,%ecx
f0124ed6:	74 17                	je     f0124eef <test_kfreeall+0x310>
f0124ed8:	83 ec 04             	sub    $0x4,%esp
f0124edb:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0124ee0:	68 0b 0a 00 00       	push   $0xa0b
f0124ee5:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124eea:	e8 c1 b2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124eef:	e8 c4 f3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124ef4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124ef7:	74 17                	je     f0124f10 <test_kfreeall+0x331>
f0124ef9:	83 ec 04             	sub    $0x4,%esp
f0124efc:	68 08 8d 13 f0       	push   $0xf0138d08
f0124f01:	68 0c 0a 00 00       	push   $0xa0c
f0124f06:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124f0b:	e8 a0 b2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124f10:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124f13:	e8 fa 76 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124f18:	29 c3                	sub    %eax,%ebx
f0124f1a:	89 d8                	mov    %ebx,%eax
f0124f1c:	83 f8 01             	cmp    $0x1,%eax
f0124f1f:	74 17                	je     f0124f38 <test_kfreeall+0x359>
f0124f21:	83 ec 04             	sub    $0x4,%esp
f0124f24:	68 70 8d 13 f0       	push   $0xf0138d70
f0124f29:	68 0d 0a 00 00       	push   $0xa0d
f0124f2e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0124f33:	e8 78 b2 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0124f38:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0124f3f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0124f42:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124f48:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0124f4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0124f52:	eb 0e                	jmp    f0124f62 <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f0124f54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0124f57:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124f5a:	01 d0                	add    %edx,%eax
f0124f5c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0124f5f:	ff 45 f4             	incl   -0xc(%ebp)
f0124f62:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124f68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0124f6b:	7f e7                	jg     f0124f54 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124f6d:	e8 a0 76 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124f72:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124f75:	e8 3e f3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124f7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124f7d:	83 ec 0c             	sub    $0xc,%esp
f0124f80:	68 00 08 00 00       	push   $0x800
f0124f85:	e8 09 2c fe ff       	call   f0107b93 <kmalloc>
f0124f8a:	83 c4 10             	add    $0x10,%esp
f0124f8d:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f93:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124f99:	89 c1                	mov    %eax,%ecx
f0124f9b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124fa2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124fa7:	0f b6 d0             	movzbl %al,%edx
f0124faa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124fad:	01 d0                	add    %edx,%eax
f0124faf:	48                   	dec    %eax
f0124fb0:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124fb3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124fb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fbb:	f7 75 94             	divl   -0x6c(%ebp)
f0124fbe:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124fc1:	29 d0                	sub    %edx,%eax
f0124fc3:	89 c3                	mov    %eax,%ebx
f0124fc5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124fcc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124fd1:	0f b6 c0             	movzbl %al,%eax
f0124fd4:	c1 e0 04             	shl    $0x4,%eax
f0124fd7:	89 c2                	mov    %eax,%edx
f0124fd9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124fdc:	01 d0                	add    %edx,%eax
f0124fde:	48                   	dec    %eax
f0124fdf:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124fe2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124fe5:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fea:	f7 75 8c             	divl   -0x74(%ebp)
f0124fed:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124ff0:	29 d0                	sub    %edx,%eax
f0124ff2:	01 d8                	add    %ebx,%eax
f0124ff4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124ff9:	39 c1                	cmp    %eax,%ecx
f0124ffb:	74 17                	je     f0125014 <test_kfreeall+0x435>
f0124ffd:	83 ec 04             	sub    $0x4,%esp
f0125000:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0125005:	68 19 0a 00 00       	push   $0xa19
f012500a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012500f:	e8 9c b1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125014:	e8 9f f2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125019:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012501c:	74 17                	je     f0125035 <test_kfreeall+0x456>
f012501e:	83 ec 04             	sub    $0x4,%esp
f0125021:	68 08 8d 13 f0       	push   $0xf0138d08
f0125026:	68 1a 0a 00 00       	push   $0xa1a
f012502b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125030:	e8 7b b1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125035:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125038:	e8 d5 75 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012503d:	29 c3                	sub    %eax,%ebx
f012503f:	89 d8                	mov    %ebx,%eax
f0125041:	83 f8 01             	cmp    $0x1,%eax
f0125044:	74 17                	je     f012505d <test_kfreeall+0x47e>
f0125046:	83 ec 04             	sub    $0x4,%esp
f0125049:	68 70 8d 13 f0       	push   $0xf0138d70
f012504e:	68 1b 0a 00 00       	push   $0xa1b
f0125053:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125058:	e8 53 b1 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012505d:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0125064:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125067:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012506d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125070:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125077:	eb 0e                	jmp    f0125087 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125079:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012507c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012507f:	01 d0                	add    %edx,%eax
f0125081:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125084:	ff 45 f4             	incl   -0xc(%ebp)
f0125087:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012508d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125090:	7f e7                	jg     f0125079 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125092:	e8 7b 75 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125097:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012509a:	e8 19 f2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012509f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01250a2:	83 ec 0c             	sub    $0xc,%esp
f01250a5:	68 00 1c 00 00       	push   $0x1c00
f01250aa:	e8 e4 2a fe ff       	call   f0107b93 <kmalloc>
f01250af:	83 c4 10             	add    $0x10,%esp
f01250b2:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01250b8:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01250be:	89 c1                	mov    %eax,%ecx
f01250c0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01250c7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01250cc:	0f b6 d0             	movzbl %al,%edx
f01250cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01250d2:	01 d0                	add    %edx,%eax
f01250d4:	48                   	dec    %eax
f01250d5:	89 45 80             	mov    %eax,-0x80(%ebp)
f01250d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01250db:	ba 00 00 00 00       	mov    $0x0,%edx
f01250e0:	f7 75 84             	divl   -0x7c(%ebp)
f01250e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01250e6:	29 d0                	sub    %edx,%eax
f01250e8:	89 c3                	mov    %eax,%ebx
f01250ea:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01250f1:	10 00 00 
f01250f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01250f9:	0f b6 c0             	movzbl %al,%eax
f01250fc:	c1 e0 04             	shl    $0x4,%eax
f01250ff:	89 c2                	mov    %eax,%edx
f0125101:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125107:	01 d0                	add    %edx,%eax
f0125109:	48                   	dec    %eax
f012510a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125110:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125116:	ba 00 00 00 00       	mov    $0x0,%edx
f012511b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125121:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125127:	29 d0                	sub    %edx,%eax
f0125129:	01 d8                	add    %ebx,%eax
f012512b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125130:	39 c1                	cmp    %eax,%ecx
f0125132:	74 17                	je     f012514b <test_kfreeall+0x56c>
f0125134:	83 ec 04             	sub    $0x4,%esp
f0125137:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012513c:	68 27 0a 00 00       	push   $0xa27
f0125141:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125146:	e8 65 b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012514b:	e8 68 f1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125150:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125153:	74 17                	je     f012516c <test_kfreeall+0x58d>
f0125155:	83 ec 04             	sub    $0x4,%esp
f0125158:	68 08 8d 13 f0       	push   $0xf0138d08
f012515d:	68 28 0a 00 00       	push   $0xa28
f0125162:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125167:	e8 44 b0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012516c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012516f:	e8 9e 74 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125174:	29 c3                	sub    %eax,%ebx
f0125176:	89 d8                	mov    %ebx,%eax
f0125178:	83 f8 02             	cmp    $0x2,%eax
f012517b:	74 17                	je     f0125194 <test_kfreeall+0x5b5>
f012517d:	83 ec 04             	sub    $0x4,%esp
f0125180:	68 70 8d 13 f0       	push   $0xf0138d70
f0125185:	68 29 0a 00 00       	push   $0xa29
f012518a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012518f:	e8 1c b0 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125194:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f012519b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012519e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01251a4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01251a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01251ae:	eb 0e                	jmp    f01251be <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f01251b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01251b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01251b6:	01 d0                	add    %edx,%eax
f01251b8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01251bb:	ff 45 f4             	incl   -0xc(%ebp)
f01251be:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01251c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01251c7:	7f e7                	jg     f01251b0 <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01251c9:	e8 44 74 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01251ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251d1:	e8 e2 f0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01251d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01251d9:	83 ec 0c             	sub    $0xc,%esp
f01251dc:	68 00 fc 2f 00       	push   $0x2ffc00
f01251e1:	e8 ad 29 fe ff       	call   f0107b93 <kmalloc>
f01251e6:	83 c4 10             	add    $0x10,%esp
f01251e9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01251ef:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01251f5:	89 c1                	mov    %eax,%ecx
f01251f7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01251fe:	10 00 00 
f0125201:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125206:	0f b6 d0             	movzbl %al,%edx
f0125209:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012520f:	01 d0                	add    %edx,%eax
f0125211:	48                   	dec    %eax
f0125212:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125218:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012521e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125223:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125229:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012522f:	29 d0                	sub    %edx,%eax
f0125231:	89 c3                	mov    %eax,%ebx
f0125233:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012523a:	10 00 00 
f012523d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125242:	0f b6 c0             	movzbl %al,%eax
f0125245:	c1 e0 04             	shl    $0x4,%eax
f0125248:	89 c2                	mov    %eax,%edx
f012524a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125250:	01 d0                	add    %edx,%eax
f0125252:	48                   	dec    %eax
f0125253:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125259:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012525f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125264:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012526a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125270:	29 d0                	sub    %edx,%eax
f0125272:	01 d8                	add    %ebx,%eax
f0125274:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125279:	39 c1                	cmp    %eax,%ecx
f012527b:	74 17                	je     f0125294 <test_kfreeall+0x6b5>
f012527d:	83 ec 04             	sub    $0x4,%esp
f0125280:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0125285:	68 35 0a 00 00       	push   $0xa35
f012528a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012528f:	e8 1c af fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125294:	e8 1f f0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125299:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012529c:	74 17                	je     f01252b5 <test_kfreeall+0x6d6>
f012529e:	83 ec 04             	sub    $0x4,%esp
f01252a1:	68 08 8d 13 f0       	push   $0xf0138d08
f01252a6:	68 36 0a 00 00       	push   $0xa36
f01252ab:	68 ee 8c 13 f0       	push   $0xf0138cee
f01252b0:	e8 fb ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01252b8:	e8 55 73 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01252bd:	29 c3                	sub    %eax,%ebx
f01252bf:	89 d8                	mov    %ebx,%eax
f01252c1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01252c6:	74 17                	je     f01252df <test_kfreeall+0x700>
f01252c8:	83 ec 04             	sub    $0x4,%esp
f01252cb:	68 70 8d 13 f0       	push   $0xf0138d70
f01252d0:	68 37 0a 00 00       	push   $0xa37
f01252d5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01252da:	e8 d1 ae fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01252df:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f01252e6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01252e9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01252ef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01252f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01252f9:	eb 0e                	jmp    f0125309 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f01252fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01252fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125301:	01 d0                	add    %edx,%eax
f0125303:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125306:	ff 45 f4             	incl   -0xc(%ebp)
f0125309:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012530f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125312:	7f e7                	jg     f01252fb <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125314:	e8 f9 72 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125319:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012531c:	e8 97 ef fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125321:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125324:	83 ec 0c             	sub    $0xc,%esp
f0125327:	68 00 fc 5f 00       	push   $0x5ffc00
f012532c:	e8 62 28 fe ff       	call   f0107b93 <kmalloc>
f0125331:	83 c4 10             	add    $0x10,%esp
f0125334:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012533a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125340:	89 c1                	mov    %eax,%ecx
f0125342:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125349:	10 00 00 
f012534c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125351:	0f b6 d0             	movzbl %al,%edx
f0125354:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012535a:	01 d0                	add    %edx,%eax
f012535c:	48                   	dec    %eax
f012535d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125363:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125369:	ba 00 00 00 00       	mov    $0x0,%edx
f012536e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125374:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012537a:	29 d0                	sub    %edx,%eax
f012537c:	89 c3                	mov    %eax,%ebx
f012537e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125385:	10 00 00 
f0125388:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012538d:	0f b6 c0             	movzbl %al,%eax
f0125390:	c1 e0 04             	shl    $0x4,%eax
f0125393:	89 c2                	mov    %eax,%edx
f0125395:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012539b:	01 d0                	add    %edx,%eax
f012539d:	48                   	dec    %eax
f012539e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01253a4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01253aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01253af:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01253b5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01253bb:	29 d0                	sub    %edx,%eax
f01253bd:	01 d8                	add    %ebx,%eax
f01253bf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01253c4:	39 c1                	cmp    %eax,%ecx
f01253c6:	74 17                	je     f01253df <test_kfreeall+0x800>
f01253c8:	83 ec 04             	sub    $0x4,%esp
f01253cb:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01253d0:	68 43 0a 00 00       	push   $0xa43
f01253d5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01253da:	e8 d1 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253df:	e8 d4 ee fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01253e4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01253e7:	74 17                	je     f0125400 <test_kfreeall+0x821>
f01253e9:	83 ec 04             	sub    $0x4,%esp
f01253ec:	68 08 8d 13 f0       	push   $0xf0138d08
f01253f1:	68 44 0a 00 00       	push   $0xa44
f01253f6:	68 ee 8c 13 f0       	push   $0xf0138cee
f01253fb:	e8 b0 ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125400:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125403:	e8 0a 72 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125408:	29 c3                	sub    %eax,%ebx
f012540a:	89 d8                	mov    %ebx,%eax
f012540c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125411:	74 17                	je     f012542a <test_kfreeall+0x84b>
f0125413:	83 ec 04             	sub    $0x4,%esp
f0125416:	68 70 8d 13 f0       	push   $0xf0138d70
f012541b:	68 45 0a 00 00       	push   $0xa45
f0125420:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125425:	e8 86 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012542a:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0125431:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125434:	e8 d9 71 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125439:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012543c:	e8 77 ee fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125441:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125444:	83 ec 0c             	sub    $0xc,%esp
f0125447:	68 00 38 00 00       	push   $0x3800
f012544c:	e8 42 27 fe ff       	call   f0107b93 <kmalloc>
f0125451:	83 c4 10             	add    $0x10,%esp
f0125454:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012545a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125460:	89 c1                	mov    %eax,%ecx
f0125462:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125469:	10 00 00 
f012546c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125471:	0f b6 d0             	movzbl %al,%edx
f0125474:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012547a:	01 d0                	add    %edx,%eax
f012547c:	48                   	dec    %eax
f012547d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125483:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125489:	ba 00 00 00 00       	mov    $0x0,%edx
f012548e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125494:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012549a:	29 d0                	sub    %edx,%eax
f012549c:	89 c3                	mov    %eax,%ebx
f012549e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01254a5:	10 00 00 
f01254a8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01254ad:	0f b6 c0             	movzbl %al,%eax
f01254b0:	c1 e0 04             	shl    $0x4,%eax
f01254b3:	89 c2                	mov    %eax,%edx
f01254b5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01254bb:	01 d0                	add    %edx,%eax
f01254bd:	48                   	dec    %eax
f01254be:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01254c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01254ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01254cf:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01254d5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01254db:	29 d0                	sub    %edx,%eax
f01254dd:	01 d8                	add    %ebx,%eax
f01254df:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01254e4:	39 c1                	cmp    %eax,%ecx
f01254e6:	74 17                	je     f01254ff <test_kfreeall+0x920>
f01254e8:	83 ec 04             	sub    $0x4,%esp
f01254eb:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01254f0:	68 4c 0a 00 00       	push   $0xa4c
f01254f5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01254fa:	e8 b1 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254ff:	e8 b4 ed fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125504:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125507:	74 17                	je     f0125520 <test_kfreeall+0x941>
f0125509:	83 ec 04             	sub    $0x4,%esp
f012550c:	68 08 8d 13 f0       	push   $0xf0138d08
f0125511:	68 4d 0a 00 00       	push   $0xa4d
f0125516:	68 ee 8c 13 f0       	push   $0xf0138cee
f012551b:	e8 90 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125520:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125523:	e8 ea 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125528:	29 c3                	sub    %eax,%ebx
f012552a:	89 d8                	mov    %ebx,%eax
f012552c:	83 f8 04             	cmp    $0x4,%eax
f012552f:	74 17                	je     f0125548 <test_kfreeall+0x969>
f0125531:	83 ec 04             	sub    $0x4,%esp
f0125534:	68 70 8d 13 f0       	push   $0xf0138d70
f0125539:	68 4e 0a 00 00       	push   $0xa4e
f012553e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125543:	e8 68 ac fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125548:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f012554f:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0125552:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125558:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012555b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125562:	eb 0e                	jmp    f0125572 <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125564:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125567:	8b 45 98             	mov    -0x68(%ebp),%eax
f012556a:	01 d0                	add    %edx,%eax
f012556c:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012556f:	ff 45 f4             	incl   -0xc(%ebp)
f0125572:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125578:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012557b:	7f e7                	jg     f0125564 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012557d:	e8 90 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125582:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125588:	e8 2b ed fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012558d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125593:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125599:	83 ec 0c             	sub    $0xc,%esp
f012559c:	50                   	push   %eax
f012559d:	e8 0b 26 fe ff       	call   f0107bad <kfree>
f01255a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255a5:	e8 0e ed fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01255aa:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01255b0:	74 17                	je     f01255c9 <test_kfreeall+0x9ea>
f01255b2:	83 ec 04             	sub    $0x4,%esp
f01255b5:	68 08 8d 13 f0       	push   $0xf0138d08
f01255ba:	68 5d 0a 00 00       	push   $0xa5d
f01255bf:	68 ee 8c 13 f0       	push   $0xf0138cee
f01255c4:	e8 e7 ab fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01255c9:	e8 44 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01255ce:	89 c2                	mov    %eax,%edx
f01255d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01255d6:	29 c2                	sub    %eax,%edx
f01255d8:	89 d0                	mov    %edx,%eax
f01255da:	3d 00 02 00 00       	cmp    $0x200,%eax
f01255df:	74 17                	je     f01255f8 <test_kfreeall+0xa19>
f01255e1:	83 ec 04             	sub    $0x4,%esp
f01255e4:	68 78 94 13 f0       	push   $0xf0139478
f01255e9:	68 5e 0a 00 00       	push   $0xa5e
f01255ee:	68 ee 8c 13 f0       	push   $0xf0138cee
f01255f3:	e8 b8 ab fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01255f8:	e8 15 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01255fd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125603:	e8 b0 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125608:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012560e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125614:	83 ec 0c             	sub    $0xc,%esp
f0125617:	50                   	push   %eax
f0125618:	e8 90 25 fe ff       	call   f0107bad <kfree>
f012561d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125620:	e8 93 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125625:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012562b:	74 17                	je     f0125644 <test_kfreeall+0xa65>
f012562d:	83 ec 04             	sub    $0x4,%esp
f0125630:	68 08 8d 13 f0       	push   $0xf0138d08
f0125635:	68 64 0a 00 00       	push   $0xa64
f012563a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012563f:	e8 6c ab fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125644:	e8 c9 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125649:	89 c2                	mov    %eax,%edx
f012564b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125651:	29 c2                	sub    %eax,%edx
f0125653:	89 d0                	mov    %edx,%eax
f0125655:	3d 00 02 00 00       	cmp    $0x200,%eax
f012565a:	74 17                	je     f0125673 <test_kfreeall+0xa94>
f012565c:	83 ec 04             	sub    $0x4,%esp
f012565f:	68 78 94 13 f0       	push   $0xf0139478
f0125664:	68 65 0a 00 00       	push   $0xa65
f0125669:	68 ee 8c 13 f0       	push   $0xf0138cee
f012566e:	e8 3d ab fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125673:	e8 9a 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125678:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012567e:	e8 35 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125683:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125689:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012568f:	83 ec 0c             	sub    $0xc,%esp
f0125692:	50                   	push   %eax
f0125693:	e8 15 25 fe ff       	call   f0107bad <kfree>
f0125698:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012569b:	e8 18 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01256a0:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01256a6:	74 17                	je     f01256bf <test_kfreeall+0xae0>
f01256a8:	83 ec 04             	sub    $0x4,%esp
f01256ab:	68 08 8d 13 f0       	push   $0xf0138d08
f01256b0:	68 6b 0a 00 00       	push   $0xa6b
f01256b5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01256ba:	e8 f1 aa fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01256bf:	e8 4e 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01256c4:	89 c2                	mov    %eax,%edx
f01256c6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01256cc:	29 c2                	sub    %eax,%edx
f01256ce:	89 d0                	mov    %edx,%eax
f01256d0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01256d5:	74 17                	je     f01256ee <test_kfreeall+0xb0f>
f01256d7:	83 ec 04             	sub    $0x4,%esp
f01256da:	68 78 94 13 f0       	push   $0xf0139478
f01256df:	68 6c 0a 00 00       	push   $0xa6c
f01256e4:	68 ee 8c 13 f0       	push   $0xf0138cee
f01256e9:	e8 c2 aa fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01256ee:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01256f4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01256f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01256fe:	eb 1e                	jmp    f012571e <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125700:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125709:	8b 45 98             	mov    -0x68(%ebp),%eax
f012570c:	01 c8                	add    %ecx,%eax
f012570e:	8a 00                	mov    (%eax),%al
f0125710:	0f be c0             	movsbl %al,%eax
f0125713:	01 d0                	add    %edx,%eax
f0125715:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012571b:	ff 45 f4             	incl   -0xc(%ebp)
f012571e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125724:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125727:	7f d7                	jg     f0125700 <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125729:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012572f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125735:	01 c0                	add    %eax,%eax
f0125737:	39 c2                	cmp    %eax,%edx
f0125739:	74 17                	je     f0125752 <test_kfreeall+0xb73>
f012573b:	83 ec 04             	sub    $0x4,%esp
f012573e:	68 d4 94 13 f0       	push   $0xf01394d4
f0125743:	68 78 0a 00 00       	push   $0xa78
f0125748:	68 ee 8c 13 f0       	push   $0xf0138cee
f012574d:	e8 5e aa fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125752:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125758:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012575b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125762:	eb 1e                	jmp    f0125782 <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125764:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012576a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012576d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125770:	01 c8                	add    %ecx,%eax
f0125772:	8a 00                	mov    (%eax),%al
f0125774:	0f be c0             	movsbl %al,%eax
f0125777:	01 d0                	add    %edx,%eax
f0125779:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012577f:	ff 45 f4             	incl   -0xc(%ebp)
f0125782:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125788:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012578b:	7f d7                	jg     f0125764 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012578d:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125793:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125799:	89 c1                	mov    %eax,%ecx
f012579b:	01 c9                	add    %ecx,%ecx
f012579d:	01 c8                	add    %ecx,%eax
f012579f:	39 c2                	cmp    %eax,%edx
f01257a1:	74 17                	je     f01257ba <test_kfreeall+0xbdb>
f01257a3:	83 ec 04             	sub    $0x4,%esp
f01257a6:	68 d4 94 13 f0       	push   $0xf01394d4
f01257ab:	68 80 0a 00 00       	push   $0xa80
f01257b0:	68 ee 8c 13 f0       	push   $0xf0138cee
f01257b5:	e8 f6 a9 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01257ba:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01257c0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01257c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01257ca:	eb 1e                	jmp    f01257ea <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f01257cc:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f01257d2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01257d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01257d8:	01 c8                	add    %ecx,%eax
f01257da:	8a 00                	mov    (%eax),%al
f01257dc:	0f be c0             	movsbl %al,%eax
f01257df:	01 d0                	add    %edx,%eax
f01257e1:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01257e7:	ff 45 f4             	incl   -0xc(%ebp)
f01257ea:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01257f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01257f3:	7f d7                	jg     f01257cc <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01257f5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01257fb:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125801:	c1 e2 02             	shl    $0x2,%edx
f0125804:	39 d0                	cmp    %edx,%eax
f0125806:	74 17                	je     f012581f <test_kfreeall+0xc40>
f0125808:	83 ec 04             	sub    $0x4,%esp
f012580b:	68 d4 94 13 f0       	push   $0xf01394d4
f0125810:	68 88 0a 00 00       	push   $0xa88
f0125815:	68 ee 8c 13 f0       	push   $0xf0138cee
f012581a:	e8 91 a9 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012581f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125825:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125828:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012582f:	eb 1e                	jmp    f012584f <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125831:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125837:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012583a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012583d:	01 c8                	add    %ecx,%eax
f012583f:	8a 00                	mov    (%eax),%al
f0125841:	0f be c0             	movsbl %al,%eax
f0125844:	01 d0                	add    %edx,%eax
f0125846:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012584c:	ff 45 f4             	incl   -0xc(%ebp)
f012584f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125855:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125858:	7f d7                	jg     f0125831 <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012585a:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125860:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125866:	89 d0                	mov    %edx,%eax
f0125868:	c1 e0 02             	shl    $0x2,%eax
f012586b:	01 d0                	add    %edx,%eax
f012586d:	39 c1                	cmp    %eax,%ecx
f012586f:	74 17                	je     f0125888 <test_kfreeall+0xca9>
f0125871:	83 ec 04             	sub    $0x4,%esp
f0125874:	68 d4 94 13 f0       	push   $0xf01394d4
f0125879:	68 90 0a 00 00       	push   $0xa90
f012587e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125883:	e8 28 a9 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125888:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012588e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125891:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125898:	eb 1e                	jmp    f01258b8 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f012589a:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01258a0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01258a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01258a6:	01 c8                	add    %ecx,%eax
f01258a8:	8a 00                	mov    (%eax),%al
f01258aa:	0f be c0             	movsbl %al,%eax
f01258ad:	01 d0                	add    %edx,%eax
f01258af:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01258b5:	ff 45 f4             	incl   -0xc(%ebp)
f01258b8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01258be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01258c1:	7f d7                	jg     f012589a <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01258c3:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f01258c9:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f01258cf:	89 d0                	mov    %edx,%eax
f01258d1:	01 c0                	add    %eax,%eax
f01258d3:	01 d0                	add    %edx,%eax
f01258d5:	01 c0                	add    %eax,%eax
f01258d7:	01 d0                	add    %edx,%eax
f01258d9:	39 c1                	cmp    %eax,%ecx
f01258db:	74 17                	je     f01258f4 <test_kfreeall+0xd15>
f01258dd:	83 ec 04             	sub    $0x4,%esp
f01258e0:	68 d4 94 13 f0       	push   $0xf01394d4
f01258e5:	68 98 0a 00 00       	push   $0xa98
f01258ea:	68 ee 8c 13 f0       	push   $0xf0138cee
f01258ef:	e8 bc a8 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01258f4:	e8 19 6d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01258f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258fc:	e8 b7 e9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125901:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125904:	83 ec 0c             	sub    $0xc,%esp
f0125907:	68 00 50 00 00       	push   $0x5000
f012590c:	e8 82 22 fe ff       	call   f0107b93 <kmalloc>
f0125911:	83 c4 10             	add    $0x10,%esp
f0125914:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012591a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125920:	89 c1                	mov    %eax,%ecx
f0125922:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125929:	10 00 00 
f012592c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125931:	0f b6 d0             	movzbl %al,%edx
f0125934:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012593a:	01 d0                	add    %edx,%eax
f012593c:	48                   	dec    %eax
f012593d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125943:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125949:	ba 00 00 00 00       	mov    $0x0,%edx
f012594e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125954:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012595a:	29 d0                	sub    %edx,%eax
f012595c:	89 c3                	mov    %eax,%ebx
f012595e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125965:	10 00 00 
f0125968:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012596d:	0f b6 c0             	movzbl %al,%eax
f0125970:	c1 e0 04             	shl    $0x4,%eax
f0125973:	89 c2                	mov    %eax,%edx
f0125975:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012597b:	01 d0                	add    %edx,%eax
f012597d:	48                   	dec    %eax
f012597e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125984:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012598a:	ba 00 00 00 00       	mov    $0x0,%edx
f012598f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125995:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012599b:	29 d0                	sub    %edx,%eax
f012599d:	01 d8                	add    %ebx,%eax
f012599f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01259a4:	39 c1                	cmp    %eax,%ecx
f01259a6:	74 17                	je     f01259bf <test_kfreeall+0xde0>
f01259a8:	83 ec 04             	sub    $0x4,%esp
f01259ab:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01259b0:	68 a1 0a 00 00       	push   $0xaa1
f01259b5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01259ba:	e8 f1 a7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259bf:	e8 f4 e8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01259c4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01259c7:	74 17                	je     f01259e0 <test_kfreeall+0xe01>
f01259c9:	83 ec 04             	sub    $0x4,%esp
f01259cc:	68 08 8d 13 f0       	push   $0xf0138d08
f01259d1:	68 a2 0a 00 00       	push   $0xaa2
f01259d6:	68 ee 8c 13 f0       	push   $0xf0138cee
f01259db:	e8 d0 a7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01259e3:	e8 2a 6c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01259e8:	29 c3                	sub    %eax,%ebx
f01259ea:	89 d8                	mov    %ebx,%eax
f01259ec:	83 f8 05             	cmp    $0x5,%eax
f01259ef:	74 17                	je     f0125a08 <test_kfreeall+0xe29>
f01259f1:	83 ec 04             	sub    $0x4,%esp
f01259f4:	68 70 8d 13 f0       	push   $0xf0138d70
f01259f9:	68 a3 0a 00 00       	push   $0xaa3
f01259fe:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125a03:	e8 a8 a7 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125a08:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125a0f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125a12:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a18:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125a1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125a22:	eb 0e                	jmp    f0125a32 <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125a24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125a27:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125a2a:	01 d0                	add    %edx,%eax
f0125a2c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125a2f:	ff 45 f4             	incl   -0xc(%ebp)
f0125a32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125a38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125a3b:	7f e7                	jg     f0125a24 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a3d:	e8 d0 6b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125a42:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a45:	e8 6e e8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125a4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125a4d:	83 ec 0c             	sub    $0xc,%esp
f0125a50:	68 00 00 10 00       	push   $0x100000
f0125a55:	e8 39 21 fe ff       	call   f0107b93 <kmalloc>
f0125a5a:	83 c4 10             	add    $0x10,%esp
f0125a5d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a63:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125a69:	89 c1                	mov    %eax,%ecx
f0125a6b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125a72:	10 00 00 
f0125a75:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125a7a:	0f b6 d0             	movzbl %al,%edx
f0125a7d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125a83:	01 d0                	add    %edx,%eax
f0125a85:	48                   	dec    %eax
f0125a86:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125a8c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a97:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125a9d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125aa3:	29 d0                	sub    %edx,%eax
f0125aa5:	89 c3                	mov    %eax,%ebx
f0125aa7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125aae:	10 00 00 
f0125ab1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125ab6:	0f b6 c0             	movzbl %al,%eax
f0125ab9:	c1 e0 04             	shl    $0x4,%eax
f0125abc:	89 c2                	mov    %eax,%edx
f0125abe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125ac4:	01 d0                	add    %edx,%eax
f0125ac6:	48                   	dec    %eax
f0125ac7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125acd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ad8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125ade:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125ae4:	29 d0                	sub    %edx,%eax
f0125ae6:	01 d8                	add    %ebx,%eax
f0125ae8:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125aed:	39 c1                	cmp    %eax,%ecx
f0125aef:	74 17                	je     f0125b08 <test_kfreeall+0xf29>
f0125af1:	83 ec 04             	sub    $0x4,%esp
f0125af4:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0125af9:	68 af 0a 00 00       	push   $0xaaf
f0125afe:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125b03:	e8 a8 a6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b08:	e8 ab e7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125b0d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125b10:	74 17                	je     f0125b29 <test_kfreeall+0xf4a>
f0125b12:	83 ec 04             	sub    $0x4,%esp
f0125b15:	68 08 8d 13 f0       	push   $0xf0138d08
f0125b1a:	68 b0 0a 00 00       	push   $0xab0
f0125b1f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125b24:	e8 87 a6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b29:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125b2c:	e8 e1 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125b31:	29 c3                	sub    %eax,%ebx
f0125b33:	89 d8                	mov    %ebx,%eax
f0125b35:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125b3a:	74 17                	je     f0125b53 <test_kfreeall+0xf74>
f0125b3c:	83 ec 04             	sub    $0x4,%esp
f0125b3f:	68 70 8d 13 f0       	push   $0xf0138d70
f0125b44:	68 b1 0a 00 00       	push   $0xab1
f0125b49:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125b4e:	e8 5d a6 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125b53:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125b5a:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125b5d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125b63:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125b66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b6d:	eb 0e                	jmp    f0125b7d <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125b72:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b75:	01 d0                	add    %edx,%eax
f0125b77:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125b7a:	ff 45 f4             	incl   -0xc(%ebp)
f0125b7d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125b83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b86:	7f e7                	jg     f0125b6f <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125b88:	e8 85 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125b8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b90:	e8 23 e7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125b95:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125b98:	e8 5e 20 fe ff       	call   f0107bfb <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b9d:	e8 16 e7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125ba2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ba5:	74 17                	je     f0125bbe <test_kfreeall+0xfdf>
f0125ba7:	83 ec 04             	sub    $0x4,%esp
f0125baa:	68 08 8d 13 f0       	push   $0xf0138d08
f0125baf:	68 c1 0a 00 00       	push   $0xac1
f0125bb4:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125bb9:	e8 f2 a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125bbe:	e8 4f 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125bc3:	89 c2                	mov    %eax,%edx
f0125bc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125bc8:	89 d1                	mov    %edx,%ecx
f0125bca:	29 c1                	sub    %eax,%ecx
f0125bcc:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125bd3:	10 00 00 
f0125bd6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125bdb:	0f b6 d0             	movzbl %al,%edx
f0125bde:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125be4:	01 d0                	add    %edx,%eax
f0125be6:	48                   	dec    %eax
f0125be7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125bed:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125bf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bf8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125bfe:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125c04:	29 d0                	sub    %edx,%eax
f0125c06:	89 c3                	mov    %eax,%ebx
f0125c08:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125c0f:	10 00 00 
f0125c12:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125c17:	0f b6 c0             	movzbl %al,%eax
f0125c1a:	c1 e0 04             	shl    $0x4,%eax
f0125c1d:	89 c2                	mov    %eax,%edx
f0125c1f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125c25:	01 d0                	add    %edx,%eax
f0125c27:	48                   	dec    %eax
f0125c28:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125c2e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125c34:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c39:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125c3f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125c45:	29 d0                	sub    %edx,%eax
f0125c47:	01 d8                	add    %ebx,%eax
f0125c49:	05 00 40 00 00       	add    $0x4000,%eax
f0125c4e:	c1 e8 0c             	shr    $0xc,%eax
f0125c51:	05 0d 04 00 00       	add    $0x40d,%eax
f0125c56:	39 c1                	cmp    %eax,%ecx
f0125c58:	74 17                	je     f0125c71 <test_kfreeall+0x1092>
f0125c5a:	83 ec 04             	sub    $0x4,%esp
f0125c5d:	68 78 94 13 f0       	push   $0xf0139478
f0125c62:	68 c2 0a 00 00       	push   $0xac2
f0125c67:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125c6c:	e8 3f a5 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0125c71:	83 ec 0c             	sub    $0xc,%esp
f0125c74:	6a 03                	push   $0x3
f0125c76:	e8 32 6e fe ff       	call   f010caad <sys_bypassPageFault>
f0125c7b:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0125c7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c85:	e9 82 00 00 00       	jmp    f0125d0c <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0125c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125c8d:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0125c94:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0125c97:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c9a:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0125c9d:	e8 f9 6d fe ff       	call   f010ca9b <sys_rcr2>
f0125ca2:	89 c2                	mov    %eax,%edx
f0125ca4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ca7:	39 c2                	cmp    %eax,%edx
f0125ca9:	74 17                	je     f0125cc2 <test_kfreeall+0x10e3>
f0125cab:	83 ec 04             	sub    $0x4,%esp
f0125cae:	68 54 95 13 f0       	push   $0xf0139554
f0125cb3:	68 d0 0a 00 00       	push   $0xad0
f0125cb8:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125cbd:	e8 ee a4 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0125cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125cc5:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0125ccc:	89 c2                	mov    %eax,%edx
f0125cce:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125cd1:	01 d0                	add    %edx,%eax
f0125cd3:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0125cd6:	e8 c0 6d fe ff       	call   f010ca9b <sys_rcr2>
f0125cdb:	89 c2                	mov    %eax,%edx
f0125cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125ce0:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0125ce7:	89 c1                	mov    %eax,%ecx
f0125ce9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125cec:	01 c8                	add    %ecx,%eax
f0125cee:	39 c2                	cmp    %eax,%edx
f0125cf0:	74 17                	je     f0125d09 <test_kfreeall+0x112a>
f0125cf2:	83 ec 04             	sub    $0x4,%esp
f0125cf5:	68 54 95 13 f0       	push   $0xf0139554
f0125cfa:	68 d2 0a 00 00       	push   $0xad2
f0125cff:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125d04:	e8 a7 a4 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0125d09:	ff 45 f4             	incl   -0xc(%ebp)
f0125d0c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0125d10:	0f 8e 74 ff ff ff    	jle    f0125c8a <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0125d16:	83 ec 0c             	sub    $0xc,%esp
f0125d19:	6a 00                	push   $0x0
f0125d1b:	e8 8d 6d fe ff       	call   f010caad <sys_bypassPageFault>
f0125d20:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d23:	e8 ea 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125d28:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d2b:	e8 88 e5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125d30:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0125d33:	83 ec 0c             	sub    $0xc,%esp
f0125d36:	68 00 00 40 00       	push   $0x400000
f0125d3b:	e8 53 1e fe ff       	call   f0107b93 <kmalloc>
f0125d40:	83 c4 10             	add    $0x10,%esp
f0125d43:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0125d49:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125d4f:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0125d54:	74 17                	je     f0125d6d <test_kfreeall+0x118e>
f0125d56:	83 ec 04             	sub    $0x4,%esp
f0125d59:	68 f8 99 13 f0       	push   $0xf01399f8
f0125d5e:	68 de 0a 00 00       	push   $0xade
f0125d63:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125d68:	e8 43 a4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d6d:	e8 46 e5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125d72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125d75:	74 17                	je     f0125d8e <test_kfreeall+0x11af>
f0125d77:	83 ec 04             	sub    $0x4,%esp
f0125d7a:	68 08 8d 13 f0       	push   $0xf0138d08
f0125d7f:	68 df 0a 00 00       	push   $0xadf
f0125d84:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125d89:	e8 22 a4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d8e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125d91:	e8 7c 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125d96:	29 c3                	sub    %eax,%ebx
f0125d98:	89 d8                	mov    %ebx,%eax
f0125d9a:	3d 00 04 00 00       	cmp    $0x400,%eax
f0125d9f:	74 17                	je     f0125db8 <test_kfreeall+0x11d9>
f0125da1:	83 ec 04             	sub    $0x4,%esp
f0125da4:	68 70 8d 13 f0       	push   $0xf0138d70
f0125da9:	68 e0 0a 00 00       	push   $0xae0
f0125dae:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125db3:	e8 f8 a3 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0125db8:	e8 55 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125dbd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125dc0:	e8 f3 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125dc5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0125dc8:	83 ec 0c             	sub    $0xc,%esp
f0125dcb:	68 00 30 00 00       	push   $0x3000
f0125dd0:	e8 be 1d fe ff       	call   f0107b93 <kmalloc>
f0125dd5:	83 c4 10             	add    $0x10,%esp
f0125dd8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0125dde:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125de4:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0125de9:	74 17                	je     f0125e02 <test_kfreeall+0x1223>
f0125deb:	83 ec 04             	sub    $0x4,%esp
f0125dee:	68 f8 99 13 f0       	push   $0xf01399f8
f0125df3:	68 e6 0a 00 00       	push   $0xae6
f0125df8:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125dfd:	e8 ae a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e02:	e8 b1 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125e07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e0a:	74 17                	je     f0125e23 <test_kfreeall+0x1244>
f0125e0c:	83 ec 04             	sub    $0x4,%esp
f0125e0f:	68 08 8d 13 f0       	push   $0xf0138d08
f0125e14:	68 e7 0a 00 00       	push   $0xae7
f0125e19:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125e1e:	e8 8d a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e23:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e26:	e8 e7 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e2b:	29 c3                	sub    %eax,%ebx
f0125e2d:	89 d8                	mov    %ebx,%eax
f0125e2f:	83 f8 03             	cmp    $0x3,%eax
f0125e32:	74 17                	je     f0125e4b <test_kfreeall+0x126c>
f0125e34:	83 ec 04             	sub    $0x4,%esp
f0125e37:	68 70 8d 13 f0       	push   $0xf0138d70
f0125e3c:	68 e8 0a 00 00       	push   $0xae8
f0125e41:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125e46:	e8 65 a3 fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0125e4b:	e8 c2 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e53:	e8 60 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125e58:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0125e5b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125e61:	83 ec 0c             	sub    $0xc,%esp
f0125e64:	50                   	push   %eax
f0125e65:	e8 43 1d fe ff       	call   f0107bad <kfree>
f0125e6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e6d:	e8 46 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125e72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e75:	74 17                	je     f0125e8e <test_kfreeall+0x12af>
f0125e77:	83 ec 04             	sub    $0x4,%esp
f0125e7a:	68 08 8d 13 f0       	push   $0xf0138d08
f0125e7f:	68 f2 0a 00 00       	push   $0xaf2
f0125e84:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125e89:	e8 22 a3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125e8e:	e8 7f 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e93:	89 c2                	mov    %eax,%edx
f0125e95:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125e98:	29 c2                	sub    %eax,%edx
f0125e9a:	89 d0                	mov    %edx,%eax
f0125e9c:	83 f8 03             	cmp    $0x3,%eax
f0125e9f:	74 17                	je     f0125eb8 <test_kfreeall+0x12d9>
f0125ea1:	83 ec 04             	sub    $0x4,%esp
f0125ea4:	68 a0 95 13 f0       	push   $0xf01395a0
f0125ea9:	68 f3 0a 00 00       	push   $0xaf3
f0125eae:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125eb3:	e8 f8 a2 fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125eb8:	e8 55 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125ebd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ec0:	e8 f3 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125ec5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0125ec8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125ece:	83 ec 0c             	sub    $0xc,%esp
f0125ed1:	50                   	push   %eax
f0125ed2:	e8 d6 1c fe ff       	call   f0107bad <kfree>
f0125ed7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125eda:	e8 d9 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125edf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ee2:	74 17                	je     f0125efb <test_kfreeall+0x131c>
f0125ee4:	83 ec 04             	sub    $0x4,%esp
f0125ee7:	68 08 8d 13 f0       	push   $0xf0138d08
f0125eec:	68 fc 0a 00 00       	push   $0xafc
f0125ef1:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125ef6:	e8 b5 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125efb:	e8 12 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f00:	89 c2                	mov    %eax,%edx
f0125f02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f05:	39 c2                	cmp    %eax,%edx
f0125f07:	74 17                	je     f0125f20 <test_kfreeall+0x1341>
f0125f09:	83 ec 04             	sub    $0x4,%esp
f0125f0c:	68 a0 95 13 f0       	push   $0xf01395a0
f0125f11:	68 fd 0a 00 00       	push   $0xafd
f0125f16:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125f1b:	e8 90 a2 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f20:	e8 ed 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f28:	e8 8b e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0125f30:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125f36:	83 ec 0c             	sub    $0xc,%esp
f0125f39:	50                   	push   %eax
f0125f3a:	e8 6e 1c fe ff       	call   f0107bad <kfree>
f0125f3f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f42:	e8 71 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f47:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f4a:	74 17                	je     f0125f63 <test_kfreeall+0x1384>
f0125f4c:	83 ec 04             	sub    $0x4,%esp
f0125f4f:	68 08 8d 13 f0       	push   $0xf0138d08
f0125f54:	68 03 0b 00 00       	push   $0xb03
f0125f59:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125f5e:	e8 4d a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125f63:	e8 aa 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f68:	89 c2                	mov    %eax,%edx
f0125f6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f6d:	39 c2                	cmp    %eax,%edx
f0125f6f:	74 17                	je     f0125f88 <test_kfreeall+0x13a9>
f0125f71:	83 ec 04             	sub    $0x4,%esp
f0125f74:	68 a0 95 13 f0       	push   $0xf01395a0
f0125f79:	68 04 0b 00 00       	push   $0xb04
f0125f7e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125f83:	e8 28 a2 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125f88:	e8 85 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f90:	e8 23 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0125f98:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125f9e:	83 ec 0c             	sub    $0xc,%esp
f0125fa1:	50                   	push   %eax
f0125fa2:	e8 06 1c fe ff       	call   f0107bad <kfree>
f0125fa7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125faa:	e8 09 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125faf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125fb2:	74 17                	je     f0125fcb <test_kfreeall+0x13ec>
f0125fb4:	83 ec 04             	sub    $0x4,%esp
f0125fb7:	68 08 8d 13 f0       	push   $0xf0138d08
f0125fbc:	68 0a 0b 00 00       	push   $0xb0a
f0125fc1:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125fc6:	e8 e5 a1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125fcb:	e8 42 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125fd0:	89 c2                	mov    %eax,%edx
f0125fd2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125fd5:	39 c2                	cmp    %eax,%edx
f0125fd7:	74 17                	je     f0125ff0 <test_kfreeall+0x1411>
f0125fd9:	83 ec 04             	sub    $0x4,%esp
f0125fdc:	68 a0 95 13 f0       	push   $0xf01395a0
f0125fe1:	68 0b 0b 00 00       	push   $0xb0b
f0125fe6:	68 ee 8c 13 f0       	push   $0xf0138cee
f0125feb:	e8 c0 a1 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0125ff0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0125ff7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0125ffe:	eb 48                	jmp    f0126048 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0126000:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126003:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0126008:	83 ec 04             	sub    $0x4,%esp
f012600b:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0126011:	51                   	push   %ecx
f0126012:	52                   	push   %edx
f0126013:	50                   	push   %eax
f0126014:	e8 02 11 fe ff       	call   f010711b <get_page_table>
f0126019:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012601c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126022:	85 c0                	test   %eax,%eax
f0126024:	75 17                	jne    f012603d <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126026:	83 ec 04             	sub    $0x4,%esp
f0126029:	68 f0 95 13 f0       	push   $0xf01395f0
f012602e:	68 18 0b 00 00       	push   $0xb18
f0126033:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126038:	e8 73 a1 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012603d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126044:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126048:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012604c:	78 b2                	js     f0126000 <test_kfreeall+0x1421>
f012604e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126052:	7f 09                	jg     f012605d <test_kfreeall+0x147e>
f0126054:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012605b:	76 a3                	jbe    f0126000 <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012605d:	83 ec 0c             	sub    $0xc,%esp
f0126060:	68 4c 9a 13 f0       	push   $0xf0139a4c
f0126065:	e8 c7 ad fd ff       	call   f0100e31 <cprintf>
f012606a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012606d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126072:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126075:	5b                   	pop    %ebx
f0126076:	5f                   	pop    %edi
f0126077:	5d                   	pop    %ebp
f0126078:	c3                   	ret    

f0126079 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126079:	55                   	push   %ebp
f012607a:	89 e5                	mov    %esp,%ebp
f012607c:	57                   	push   %edi
f012607d:	53                   	push   %ebx
f012607e:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f0126084:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126088:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012608c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126092:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126098:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012609f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01260a6:	e8 67 65 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01260ab:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01260ae:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f01260b4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01260b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01260be:	89 d7                	mov    %edx,%edi
f01260c0:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01260c2:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f01260c8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01260cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01260d2:	89 d7                	mov    %edx,%edi
f01260d4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01260d6:	e8 37 65 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01260db:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260de:	e8 d5 e1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01260e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01260e6:	83 ec 0c             	sub    $0xc,%esp
f01260e9:	68 00 fc 1f 00       	push   $0x1ffc00
f01260ee:	e8 a0 1a fe ff       	call   f0107b93 <kmalloc>
f01260f3:	83 c4 10             	add    $0x10,%esp
f01260f6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01260fc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0126102:	89 c1                	mov    %eax,%ecx
f0126104:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012610b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126110:	0f b6 d0             	movzbl %al,%edx
f0126113:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126116:	01 d0                	add    %edx,%eax
f0126118:	48                   	dec    %eax
f0126119:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012611c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012611f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126124:	f7 75 d4             	divl   -0x2c(%ebp)
f0126127:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012612a:	29 d0                	sub    %edx,%eax
f012612c:	89 c3                	mov    %eax,%ebx
f012612e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126135:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012613a:	0f b6 c0             	movzbl %al,%eax
f012613d:	c1 e0 04             	shl    $0x4,%eax
f0126140:	89 c2                	mov    %eax,%edx
f0126142:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126145:	01 d0                	add    %edx,%eax
f0126147:	48                   	dec    %eax
f0126148:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012614b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012614e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126153:	f7 75 cc             	divl   -0x34(%ebp)
f0126156:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126159:	29 d0                	sub    %edx,%eax
f012615b:	01 d8                	add    %ebx,%eax
f012615d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126162:	39 c1                	cmp    %eax,%ecx
f0126164:	74 17                	je     f012617d <test_kexpand+0x104>
f0126166:	83 ec 04             	sub    $0x4,%esp
f0126169:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012616e:	68 43 0b 00 00       	push   $0xb43
f0126173:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126178:	e8 33 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012617d:	e8 36 e1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126182:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126185:	74 17                	je     f012619e <test_kexpand+0x125>
f0126187:	83 ec 04             	sub    $0x4,%esp
f012618a:	68 08 8d 13 f0       	push   $0xf0138d08
f012618f:	68 44 0b 00 00       	push   $0xb44
f0126194:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126199:	e8 12 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012619e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01261a1:	e8 6c 64 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01261a6:	29 c3                	sub    %eax,%ebx
f01261a8:	89 d8                	mov    %ebx,%eax
f01261aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261af:	74 17                	je     f01261c8 <test_kexpand+0x14f>
f01261b1:	83 ec 04             	sub    $0x4,%esp
f01261b4:	68 70 8d 13 f0       	push   $0xf0138d70
f01261b9:	68 45 0b 00 00       	push   $0xb45
f01261be:	68 ee 8c 13 f0       	push   $0xf0138cee
f01261c3:	e8 e8 9f fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01261c8:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f01261cf:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01261d2:	e8 3b 64 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01261d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261da:	e8 d9 e0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01261df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01261e2:	83 ec 0c             	sub    $0xc,%esp
f01261e5:	68 00 fc 1f 00       	push   $0x1ffc00
f01261ea:	e8 a4 19 fe ff       	call   f0107b93 <kmalloc>
f01261ef:	83 c4 10             	add    $0x10,%esp
f01261f2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01261f8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01261fe:	89 c1                	mov    %eax,%ecx
f0126200:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126207:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012620c:	0f b6 d0             	movzbl %al,%edx
f012620f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126212:	01 d0                	add    %edx,%eax
f0126214:	48                   	dec    %eax
f0126215:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126218:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012621b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126220:	f7 75 c4             	divl   -0x3c(%ebp)
f0126223:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126226:	29 d0                	sub    %edx,%eax
f0126228:	89 c3                	mov    %eax,%ebx
f012622a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126231:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126236:	0f b6 c0             	movzbl %al,%eax
f0126239:	c1 e0 04             	shl    $0x4,%eax
f012623c:	89 c2                	mov    %eax,%edx
f012623e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126241:	01 d0                	add    %edx,%eax
f0126243:	48                   	dec    %eax
f0126244:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126247:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012624a:	ba 00 00 00 00       	mov    $0x0,%edx
f012624f:	f7 75 bc             	divl   -0x44(%ebp)
f0126252:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126255:	29 d0                	sub    %edx,%eax
f0126257:	01 d8                	add    %ebx,%eax
f0126259:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012625e:	39 c1                	cmp    %eax,%ecx
f0126260:	74 17                	je     f0126279 <test_kexpand+0x200>
f0126262:	83 ec 04             	sub    $0x4,%esp
f0126265:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012626a:	68 4c 0b 00 00       	push   $0xb4c
f012626f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126274:	e8 37 9f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126279:	e8 3a e0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012627e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126281:	74 17                	je     f012629a <test_kexpand+0x221>
f0126283:	83 ec 04             	sub    $0x4,%esp
f0126286:	68 08 8d 13 f0       	push   $0xf0138d08
f012628b:	68 4d 0b 00 00       	push   $0xb4d
f0126290:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126295:	e8 16 9f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012629a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012629d:	e8 70 63 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01262a2:	29 c3                	sub    %eax,%ebx
f01262a4:	89 d8                	mov    %ebx,%eax
f01262a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01262ab:	74 17                	je     f01262c4 <test_kexpand+0x24b>
f01262ad:	83 ec 04             	sub    $0x4,%esp
f01262b0:	68 70 8d 13 f0       	push   $0xf0138d70
f01262b5:	68 4e 0b 00 00       	push   $0xb4e
f01262ba:	68 ee 8c 13 f0       	push   $0xf0138cee
f01262bf:	e8 ec 9e fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01262c4:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f01262cb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01262ce:	e8 3f 63 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01262d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262d6:	e8 dd df fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01262db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01262de:	83 ec 0c             	sub    $0xc,%esp
f01262e1:	68 00 08 00 00       	push   $0x800
f01262e6:	e8 a8 18 fe ff       	call   f0107b93 <kmalloc>
f01262eb:	83 c4 10             	add    $0x10,%esp
f01262ee:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01262f4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01262fa:	89 c1                	mov    %eax,%ecx
f01262fc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126303:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126308:	0f b6 d0             	movzbl %al,%edx
f012630b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012630e:	01 d0                	add    %edx,%eax
f0126310:	48                   	dec    %eax
f0126311:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126314:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126317:	ba 00 00 00 00       	mov    $0x0,%edx
f012631c:	f7 75 b4             	divl   -0x4c(%ebp)
f012631f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126322:	29 d0                	sub    %edx,%eax
f0126324:	89 c3                	mov    %eax,%ebx
f0126326:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012632d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126332:	0f b6 c0             	movzbl %al,%eax
f0126335:	c1 e0 04             	shl    $0x4,%eax
f0126338:	89 c2                	mov    %eax,%edx
f012633a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012633d:	01 d0                	add    %edx,%eax
f012633f:	48                   	dec    %eax
f0126340:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126343:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126346:	ba 00 00 00 00       	mov    $0x0,%edx
f012634b:	f7 75 ac             	divl   -0x54(%ebp)
f012634e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126351:	29 d0                	sub    %edx,%eax
f0126353:	01 d8                	add    %ebx,%eax
f0126355:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012635a:	39 c1                	cmp    %eax,%ecx
f012635c:	74 17                	je     f0126375 <test_kexpand+0x2fc>
f012635e:	83 ec 04             	sub    $0x4,%esp
f0126361:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0126366:	68 55 0b 00 00       	push   $0xb55
f012636b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126370:	e8 3b 9e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126375:	e8 3e df fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012637a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012637d:	74 17                	je     f0126396 <test_kexpand+0x31d>
f012637f:	83 ec 04             	sub    $0x4,%esp
f0126382:	68 08 8d 13 f0       	push   $0xf0138d08
f0126387:	68 56 0b 00 00       	push   $0xb56
f012638c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126391:	e8 1a 9e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126396:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126399:	e8 74 62 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012639e:	29 c3                	sub    %eax,%ebx
f01263a0:	89 d8                	mov    %ebx,%eax
f01263a2:	83 f8 01             	cmp    $0x1,%eax
f01263a5:	74 17                	je     f01263be <test_kexpand+0x345>
f01263a7:	83 ec 04             	sub    $0x4,%esp
f01263aa:	68 70 8d 13 f0       	push   $0xf0138d70
f01263af:	68 57 0b 00 00       	push   $0xb57
f01263b4:	68 ee 8c 13 f0       	push   $0xf0138cee
f01263b9:	e8 f2 9d fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01263be:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f01263c5:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01263c8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01263ce:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01263d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01263d8:	eb 0e                	jmp    f01263e8 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f01263da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01263dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01263e0:	01 d0                	add    %edx,%eax
f01263e2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01263e5:	ff 45 f4             	incl   -0xc(%ebp)
f01263e8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01263ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01263f1:	7f e7                	jg     f01263da <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01263f3:	e8 1a 62 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01263f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01263fb:	e8 b8 de fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126400:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126403:	83 ec 0c             	sub    $0xc,%esp
f0126406:	68 00 08 00 00       	push   $0x800
f012640b:	e8 83 17 fe ff       	call   f0107b93 <kmalloc>
f0126410:	83 c4 10             	add    $0x10,%esp
f0126413:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126419:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012641f:	89 c1                	mov    %eax,%ecx
f0126421:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126428:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012642d:	0f b6 d0             	movzbl %al,%edx
f0126430:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126433:	01 d0                	add    %edx,%eax
f0126435:	48                   	dec    %eax
f0126436:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126439:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012643c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126441:	f7 75 a0             	divl   -0x60(%ebp)
f0126444:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126447:	29 d0                	sub    %edx,%eax
f0126449:	89 c3                	mov    %eax,%ebx
f012644b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126452:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126457:	0f b6 c0             	movzbl %al,%eax
f012645a:	c1 e0 04             	shl    $0x4,%eax
f012645d:	89 c2                	mov    %eax,%edx
f012645f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126462:	01 d0                	add    %edx,%eax
f0126464:	48                   	dec    %eax
f0126465:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126468:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012646b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126470:	f7 75 98             	divl   -0x68(%ebp)
f0126473:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126476:	29 d0                	sub    %edx,%eax
f0126478:	01 d8                	add    %ebx,%eax
f012647a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012647f:	39 c1                	cmp    %eax,%ecx
f0126481:	74 17                	je     f012649a <test_kexpand+0x421>
f0126483:	83 ec 04             	sub    $0x4,%esp
f0126486:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012648b:	68 63 0b 00 00       	push   $0xb63
f0126490:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126495:	e8 16 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012649a:	e8 19 de fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012649f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01264a2:	74 17                	je     f01264bb <test_kexpand+0x442>
f01264a4:	83 ec 04             	sub    $0x4,%esp
f01264a7:	68 08 8d 13 f0       	push   $0xf0138d08
f01264ac:	68 64 0b 00 00       	push   $0xb64
f01264b1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01264b6:	e8 f5 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01264bb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01264be:	e8 4f 61 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01264c3:	29 c3                	sub    %eax,%ebx
f01264c5:	89 d8                	mov    %ebx,%eax
f01264c7:	83 f8 01             	cmp    $0x1,%eax
f01264ca:	74 17                	je     f01264e3 <test_kexpand+0x46a>
f01264cc:	83 ec 04             	sub    $0x4,%esp
f01264cf:	68 70 8d 13 f0       	push   $0xf0138d70
f01264d4:	68 65 0b 00 00       	push   $0xb65
f01264d9:	68 ee 8c 13 f0       	push   $0xf0138cee
f01264de:	e8 cd 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01264e3:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f01264ea:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01264ed:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01264f3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01264f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01264fd:	eb 0e                	jmp    f012650d <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f01264ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126502:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126505:	01 d0                	add    %edx,%eax
f0126507:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012650a:	ff 45 f4             	incl   -0xc(%ebp)
f012650d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126513:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126516:	7f e7                	jg     f01264ff <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126518:	e8 f5 60 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012651d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126520:	e8 93 dd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126525:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126528:	83 ec 0c             	sub    $0xc,%esp
f012652b:	68 00 1c 00 00       	push   $0x1c00
f0126530:	e8 5e 16 fe ff       	call   f0107b93 <kmalloc>
f0126535:	83 c4 10             	add    $0x10,%esp
f0126538:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012653e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126544:	89 c1                	mov    %eax,%ecx
f0126546:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012654d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126552:	0f b6 d0             	movzbl %al,%edx
f0126555:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126558:	01 d0                	add    %edx,%eax
f012655a:	48                   	dec    %eax
f012655b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012655e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126561:	ba 00 00 00 00       	mov    $0x0,%edx
f0126566:	f7 75 90             	divl   -0x70(%ebp)
f0126569:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012656c:	29 d0                	sub    %edx,%eax
f012656e:	89 c3                	mov    %eax,%ebx
f0126570:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126577:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012657c:	0f b6 c0             	movzbl %al,%eax
f012657f:	c1 e0 04             	shl    $0x4,%eax
f0126582:	89 c2                	mov    %eax,%edx
f0126584:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126587:	01 d0                	add    %edx,%eax
f0126589:	48                   	dec    %eax
f012658a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012658d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126590:	ba 00 00 00 00       	mov    $0x0,%edx
f0126595:	f7 75 88             	divl   -0x78(%ebp)
f0126598:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012659b:	29 d0                	sub    %edx,%eax
f012659d:	01 d8                	add    %ebx,%eax
f012659f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01265a4:	39 c1                	cmp    %eax,%ecx
f01265a6:	74 17                	je     f01265bf <test_kexpand+0x546>
f01265a8:	83 ec 04             	sub    $0x4,%esp
f01265ab:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01265b0:	68 71 0b 00 00       	push   $0xb71
f01265b5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01265ba:	e8 f1 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265bf:	e8 f4 dc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01265c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01265c7:	74 17                	je     f01265e0 <test_kexpand+0x567>
f01265c9:	83 ec 04             	sub    $0x4,%esp
f01265cc:	68 08 8d 13 f0       	push   $0xf0138d08
f01265d1:	68 72 0b 00 00       	push   $0xb72
f01265d6:	68 ee 8c 13 f0       	push   $0xf0138cee
f01265db:	e8 d0 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265e0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01265e3:	e8 2a 60 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01265e8:	29 c3                	sub    %eax,%ebx
f01265ea:	89 d8                	mov    %ebx,%eax
f01265ec:	83 f8 02             	cmp    $0x2,%eax
f01265ef:	74 17                	je     f0126608 <test_kexpand+0x58f>
f01265f1:	83 ec 04             	sub    $0x4,%esp
f01265f4:	68 70 8d 13 f0       	push   $0xf0138d70
f01265f9:	68 73 0b 00 00       	push   $0xb73
f01265fe:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126603:	e8 a8 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126608:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f012660f:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126612:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126618:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012661b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126622:	eb 0e                	jmp    f0126632 <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126624:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126627:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012662a:	01 d0                	add    %edx,%eax
f012662c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012662f:	ff 45 f4             	incl   -0xc(%ebp)
f0126632:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126638:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012663b:	7f e7                	jg     f0126624 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012663d:	e8 d0 5f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126642:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126645:	e8 6e dc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012664a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012664d:	83 ec 0c             	sub    $0xc,%esp
f0126650:	68 00 fc 2f 00       	push   $0x2ffc00
f0126655:	e8 39 15 fe ff       	call   f0107b93 <kmalloc>
f012665a:	83 c4 10             	add    $0x10,%esp
f012665d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126663:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126669:	89 c1                	mov    %eax,%ecx
f012666b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126672:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126677:	0f b6 d0             	movzbl %al,%edx
f012667a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012667d:	01 d0                	add    %edx,%eax
f012667f:	48                   	dec    %eax
f0126680:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126686:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012668c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126691:	f7 75 80             	divl   -0x80(%ebp)
f0126694:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012669a:	29 d0                	sub    %edx,%eax
f012669c:	89 c3                	mov    %eax,%ebx
f012669e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01266a5:	10 00 00 
f01266a8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01266ad:	0f b6 c0             	movzbl %al,%eax
f01266b0:	c1 e0 04             	shl    $0x4,%eax
f01266b3:	89 c2                	mov    %eax,%edx
f01266b5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01266bb:	01 d0                	add    %edx,%eax
f01266bd:	48                   	dec    %eax
f01266be:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01266c4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01266ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01266cf:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01266d5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01266db:	29 d0                	sub    %edx,%eax
f01266dd:	01 d8                	add    %ebx,%eax
f01266df:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01266e4:	39 c1                	cmp    %eax,%ecx
f01266e6:	74 17                	je     f01266ff <test_kexpand+0x686>
f01266e8:	83 ec 04             	sub    $0x4,%esp
f01266eb:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01266f0:	68 7f 0b 00 00       	push   $0xb7f
f01266f5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01266fa:	e8 b1 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266ff:	e8 b4 db fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126704:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126707:	74 17                	je     f0126720 <test_kexpand+0x6a7>
f0126709:	83 ec 04             	sub    $0x4,%esp
f012670c:	68 08 8d 13 f0       	push   $0xf0138d08
f0126711:	68 80 0b 00 00       	push   $0xb80
f0126716:	68 ee 8c 13 f0       	push   $0xf0138cee
f012671b:	e8 90 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126720:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126723:	e8 ea 5e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126728:	29 c3                	sub    %eax,%ebx
f012672a:	89 d8                	mov    %ebx,%eax
f012672c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126731:	74 17                	je     f012674a <test_kexpand+0x6d1>
f0126733:	83 ec 04             	sub    $0x4,%esp
f0126736:	68 70 8d 13 f0       	push   $0xf0138d70
f012673b:	68 81 0b 00 00       	push   $0xb81
f0126740:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126745:	e8 66 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012674a:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126751:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126754:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012675a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012675d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126764:	eb 0e                	jmp    f0126774 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126769:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012676c:	01 d0                	add    %edx,%eax
f012676e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126771:	ff 45 f4             	incl   -0xc(%ebp)
f0126774:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012677a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012677d:	7f e7                	jg     f0126766 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012677f:	e8 8e 5e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126784:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126787:	e8 2c db fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012678c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012678f:	83 ec 0c             	sub    $0xc,%esp
f0126792:	68 00 00 60 00       	push   $0x600000
f0126797:	e8 f7 13 fe ff       	call   f0107b93 <kmalloc>
f012679c:	83 c4 10             	add    $0x10,%esp
f012679f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267a5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01267ab:	89 c1                	mov    %eax,%ecx
f01267ad:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01267b4:	10 00 00 
f01267b7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01267bc:	0f b6 d0             	movzbl %al,%edx
f01267bf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01267c5:	01 d0                	add    %edx,%eax
f01267c7:	48                   	dec    %eax
f01267c8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01267ce:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01267d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01267d9:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01267df:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01267e5:	29 d0                	sub    %edx,%eax
f01267e7:	89 c3                	mov    %eax,%ebx
f01267e9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01267f0:	10 00 00 
f01267f3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01267f8:	0f b6 c0             	movzbl %al,%eax
f01267fb:	c1 e0 04             	shl    $0x4,%eax
f01267fe:	89 c2                	mov    %eax,%edx
f0126800:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126806:	01 d0                	add    %edx,%eax
f0126808:	48                   	dec    %eax
f0126809:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012680f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126815:	ba 00 00 00 00       	mov    $0x0,%edx
f012681a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126820:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126826:	29 d0                	sub    %edx,%eax
f0126828:	01 d8                	add    %ebx,%eax
f012682a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012682f:	39 c1                	cmp    %eax,%ecx
f0126831:	74 17                	je     f012684a <test_kexpand+0x7d1>
f0126833:	83 ec 04             	sub    $0x4,%esp
f0126836:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012683b:	68 8d 0b 00 00       	push   $0xb8d
f0126840:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126845:	e8 66 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012684a:	e8 69 da fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012684f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126852:	74 17                	je     f012686b <test_kexpand+0x7f2>
f0126854:	83 ec 04             	sub    $0x4,%esp
f0126857:	68 08 8d 13 f0       	push   $0xf0138d08
f012685c:	68 8e 0b 00 00       	push   $0xb8e
f0126861:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126866:	e8 45 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012686b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012686e:	e8 9f 5d fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126873:	29 c3                	sub    %eax,%ebx
f0126875:	89 d8                	mov    %ebx,%eax
f0126877:	3d 00 06 00 00       	cmp    $0x600,%eax
f012687c:	74 17                	je     f0126895 <test_kexpand+0x81c>
f012687e:	83 ec 04             	sub    $0x4,%esp
f0126881:	68 70 8d 13 f0       	push   $0xf0138d70
f0126886:	68 8f 0b 00 00       	push   $0xb8f
f012688b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126890:	e8 1b 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126895:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f012689c:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012689f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01268a5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01268ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268b2:	eb 1a                	jmp    f01268ce <test_kexpand+0x855>
		{
			arr[i] = i ;
f01268b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01268b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01268be:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01268c4:	01 c2                	add    %eax,%edx
f01268c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01268c9:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01268cb:	ff 45 f4             	incl   -0xc(%ebp)
f01268ce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01268d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01268d7:	7d db                	jge    f01268b4 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f01268d9:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f01268e0:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01268e3:	e8 2a 5d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01268e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268eb:	e8 c8 d9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01268f0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01268f3:	83 ec 0c             	sub    $0xc,%esp
f01268f6:	68 00 00 70 00       	push   $0x700000
f01268fb:	e8 2f 13 fe ff       	call   f0107c2f <kexpand>
f0126900:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126903:	e8 b0 d9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126908:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012690b:	74 19                	je     f0126926 <test_kexpand+0x8ad>
f012690d:	68 88 9a 13 f0       	push   $0xf0139a88
f0126912:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126917:	68 a0 0b 00 00       	push   $0xba0
f012691c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126921:	e8 8a 98 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126926:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126929:	e8 e4 5c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012692e:	29 c3                	sub    %eax,%ebx
f0126930:	89 d8                	mov    %ebx,%eax
f0126932:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126937:	74 19                	je     f0126952 <test_kexpand+0x8d9>
f0126939:	68 d0 9a 13 f0       	push   $0xf0139ad0
f012693e:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126943:	68 a1 0b 00 00       	push   $0xba1
f0126948:	68 ee 8c 13 f0       	push   $0xf0138cee
f012694d:	e8 5e 98 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126952:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126958:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012695b:	eb 1a                	jmp    f0126977 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f012695d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126960:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126967:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012696d:	01 c2                	add    %eax,%edx
f012696f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126972:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126974:	ff 45 f4             	incl   -0xc(%ebp)
f0126977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012697a:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126980:	7c db                	jl     f012695d <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126982:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126989:	eb 37                	jmp    f01269c2 <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f012698b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012698e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126995:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012699b:	01 d0                	add    %edx,%eax
f012699d:	8b 10                	mov    (%eax),%edx
f012699f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269a2:	39 c2                	cmp    %eax,%edx
f01269a4:	74 19                	je     f01269bf <test_kexpand+0x946>
f01269a6:	68 00 9b 13 f0       	push   $0xf0139b00
f01269ab:	68 b9 9a 13 f0       	push   $0xf0139ab9
f01269b0:	68 ad 0b 00 00       	push   $0xbad
f01269b5:	68 ee 8c 13 f0       	push   $0xf0138cee
f01269ba:	e8 f1 97 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01269bf:	ff 45 f4             	incl   -0xc(%ebp)
f01269c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269c5:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01269cb:	7c be                	jl     f012698b <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01269cd:	e8 40 5c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01269d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269d5:	e8 de d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01269da:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01269dd:	83 ec 0c             	sub    $0xc,%esp
f01269e0:	68 00 00 a0 00       	push   $0xa00000
f01269e5:	e8 45 12 fe ff       	call   f0107c2f <kexpand>
f01269ea:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01269ed:	e8 c6 d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01269f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01269f5:	74 19                	je     f0126a10 <test_kexpand+0x997>
f01269f7:	68 88 9a 13 f0       	push   $0xf0139a88
f01269fc:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126a01:	68 b8 0b 00 00       	push   $0xbb8
f0126a06:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126a0b:	e8 a0 97 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126a10:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126a13:	e8 fa 5b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126a18:	29 c3                	sub    %eax,%ebx
f0126a1a:	89 d8                	mov    %ebx,%eax
f0126a1c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126a21:	74 19                	je     f0126a3c <test_kexpand+0x9c3>
f0126a23:	68 0c 9b 13 f0       	push   $0xf0139b0c
f0126a28:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126a2d:	68 b9 0b 00 00       	push   $0xbb9
f0126a32:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126a37:	e8 74 97 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a3c:	e8 d1 5b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126a41:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a44:	e8 6f d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126a49:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126a4c:	83 ec 0c             	sub    $0xc,%esp
f0126a4f:	68 00 00 40 00       	push   $0x400000
f0126a54:	e8 3a 11 fe ff       	call   f0107b93 <kmalloc>
f0126a59:	83 c4 10             	add    $0x10,%esp
f0126a5c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126a62:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126a68:	89 c1                	mov    %eax,%ecx
f0126a6a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126a71:	10 00 00 
f0126a74:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126a79:	0f b6 d0             	movzbl %al,%edx
f0126a7c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126a82:	01 d0                	add    %edx,%eax
f0126a84:	48                   	dec    %eax
f0126a85:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126a8b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126a91:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a96:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126a9c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126aa2:	29 d0                	sub    %edx,%eax
f0126aa4:	89 c3                	mov    %eax,%ebx
f0126aa6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126aad:	10 00 00 
f0126ab0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ab5:	0f b6 c0             	movzbl %al,%eax
f0126ab8:	c1 e0 04             	shl    $0x4,%eax
f0126abb:	89 c2                	mov    %eax,%edx
f0126abd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126ac3:	01 d0                	add    %edx,%eax
f0126ac5:	48                   	dec    %eax
f0126ac6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126acc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126ad2:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ad7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126add:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126ae3:	29 d0                	sub    %edx,%eax
f0126ae5:	01 d8                	add    %ebx,%eax
f0126ae7:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126aec:	39 c1                	cmp    %eax,%ecx
f0126aee:	74 17                	je     f0126b07 <test_kexpand+0xa8e>
f0126af0:	83 ec 04             	sub    $0x4,%esp
f0126af3:	68 3c 9b 13 f0       	push   $0xf0139b3c
f0126af8:	68 c4 0b 00 00       	push   $0xbc4
f0126afd:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126b02:	e8 a9 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b07:	e8 ac d7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126b0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126b0f:	74 17                	je     f0126b28 <test_kexpand+0xaaf>
f0126b11:	83 ec 04             	sub    $0x4,%esp
f0126b14:	68 08 8d 13 f0       	push   $0xf0138d08
f0126b19:	68 c5 0b 00 00       	push   $0xbc5
f0126b1e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126b23:	e8 88 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b28:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126b2b:	e8 e2 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126b30:	29 c3                	sub    %eax,%ebx
f0126b32:	89 d8                	mov    %ebx,%eax
f0126b34:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126b39:	74 17                	je     f0126b52 <test_kexpand+0xad9>
f0126b3b:	83 ec 04             	sub    $0x4,%esp
f0126b3e:	68 70 8d 13 f0       	push   $0xf0138d70
f0126b43:	68 c6 0b 00 00       	push   $0xbc6
f0126b48:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126b4d:	e8 5e 96 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126b52:	e8 bb 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126b57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b5a:	e8 59 d7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126b5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126b62:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126b68:	83 ec 0c             	sub    $0xc,%esp
f0126b6b:	50                   	push   %eax
f0126b6c:	e8 3c 10 fe ff       	call   f0107bad <kfree>
f0126b71:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b74:	e8 3f d7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126b79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126b7c:	74 17                	je     f0126b95 <test_kexpand+0xb1c>
f0126b7e:	83 ec 04             	sub    $0x4,%esp
f0126b81:	68 08 8d 13 f0       	push   $0xf0138d08
f0126b86:	68 cf 0b 00 00       	push   $0xbcf
f0126b8b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126b90:	e8 1b 96 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126b95:	e8 78 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126b9a:	89 c2                	mov    %eax,%edx
f0126b9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126b9f:	29 c2                	sub    %eax,%edx
f0126ba1:	89 d0                	mov    %edx,%eax
f0126ba3:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126ba8:	74 17                	je     f0126bc1 <test_kexpand+0xb48>
f0126baa:	83 ec 04             	sub    $0x4,%esp
f0126bad:	68 a0 95 13 f0       	push   $0xf01395a0
f0126bb2:	68 d0 0b 00 00       	push   $0xbd0
f0126bb7:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126bbc:	e8 ef 95 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126bc1:	e8 4c 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126bc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126bc9:	e8 ea d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126bce:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126bd1:	83 ec 0c             	sub    $0xc,%esp
f0126bd4:	68 00 50 40 00       	push   $0x405000
f0126bd9:	e8 51 10 fe ff       	call   f0107c2f <kexpand>
f0126bde:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126be1:	e8 d2 d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126be6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126be9:	74 19                	je     f0126c04 <test_kexpand+0xb8b>
f0126beb:	68 88 9a 13 f0       	push   $0xf0139a88
f0126bf0:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126bf5:	68 da 0b 00 00       	push   $0xbda
f0126bfa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126bff:	e8 ac 95 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126c04:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c07:	e8 06 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126c0c:	29 c3                	sub    %eax,%ebx
f0126c0e:	89 d8                	mov    %ebx,%eax
f0126c10:	83 f8 05             	cmp    $0x5,%eax
f0126c13:	74 19                	je     f0126c2e <test_kexpand+0xbb5>
f0126c15:	68 64 9b 13 f0       	push   $0xf0139b64
f0126c1a:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0126c1f:	68 db 0b 00 00       	push   $0xbdb
f0126c24:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126c29:	e8 82 95 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126c2e:	83 ec 0c             	sub    $0xc,%esp
f0126c31:	68 4c 9a 13 f0       	push   $0xf0139a4c
f0126c36:	e8 f6 a1 fd ff       	call   f0100e31 <cprintf>
f0126c3b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126c3e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126c43:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126c46:	5b                   	pop    %ebx
f0126c47:	5f                   	pop    %edi
f0126c48:	5d                   	pop    %ebp
f0126c49:	c3                   	ret    

f0126c4a <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0126c4a:	55                   	push   %ebp
f0126c4b:	89 e5                	mov    %esp,%ebp
f0126c4d:	57                   	push   %edi
f0126c4e:	53                   	push   %ebx
f0126c4f:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0126c55:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126c59:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126c5d:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126c63:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126c69:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126c70:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126c77:	e8 96 59 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126c7c:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126c7f:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0126c85:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0126c8f:	89 d7                	mov    %edx,%edi
f0126c91:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126c93:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0126c99:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126c9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0126ca3:	89 d7                	mov    %edx,%edi
f0126ca5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126ca7:	e8 66 59 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126cac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126caf:	e8 04 d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126cb4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126cb7:	83 ec 0c             	sub    $0xc,%esp
f0126cba:	68 00 fc 1f 00       	push   $0x1ffc00
f0126cbf:	e8 cf 0e fe ff       	call   f0107b93 <kmalloc>
f0126cc4:	83 c4 10             	add    $0x10,%esp
f0126cc7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ccd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126cd3:	89 c1                	mov    %eax,%ecx
f0126cd5:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126cdc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ce1:	0f b6 d0             	movzbl %al,%edx
f0126ce4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126ce7:	01 d0                	add    %edx,%eax
f0126ce9:	48                   	dec    %eax
f0126cea:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126ced:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126cf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cf5:	f7 75 d4             	divl   -0x2c(%ebp)
f0126cf8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126cfb:	29 d0                	sub    %edx,%eax
f0126cfd:	89 c3                	mov    %eax,%ebx
f0126cff:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126d06:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126d0b:	0f b6 c0             	movzbl %al,%eax
f0126d0e:	c1 e0 04             	shl    $0x4,%eax
f0126d11:	89 c2                	mov    %eax,%edx
f0126d13:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126d16:	01 d0                	add    %edx,%eax
f0126d18:	48                   	dec    %eax
f0126d19:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126d1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d24:	f7 75 cc             	divl   -0x34(%ebp)
f0126d27:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d2a:	29 d0                	sub    %edx,%eax
f0126d2c:	01 d8                	add    %ebx,%eax
f0126d2e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126d33:	39 c1                	cmp    %eax,%ecx
f0126d35:	74 17                	je     f0126d4e <test_kshrink+0x104>
f0126d37:	83 ec 04             	sub    $0x4,%esp
f0126d3a:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0126d3f:	68 01 0c 00 00       	push   $0xc01
f0126d44:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126d49:	e8 62 94 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d4e:	e8 65 d5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126d53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126d56:	74 17                	je     f0126d6f <test_kshrink+0x125>
f0126d58:	83 ec 04             	sub    $0x4,%esp
f0126d5b:	68 08 8d 13 f0       	push   $0xf0138d08
f0126d60:	68 02 0c 00 00       	push   $0xc02
f0126d65:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126d6a:	e8 41 94 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d6f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126d72:	e8 9b 58 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126d77:	29 c3                	sub    %eax,%ebx
f0126d79:	89 d8                	mov    %ebx,%eax
f0126d7b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126d80:	74 17                	je     f0126d99 <test_kshrink+0x14f>
f0126d82:	83 ec 04             	sub    $0x4,%esp
f0126d85:	68 70 8d 13 f0       	push   $0xf0138d70
f0126d8a:	68 03 0c 00 00       	push   $0xc03
f0126d8f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126d94:	e8 17 94 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126d99:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f0126da0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126da3:	e8 6a 58 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126da8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126dab:	e8 08 d5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126db0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126db3:	83 ec 0c             	sub    $0xc,%esp
f0126db6:	68 00 fc 1f 00       	push   $0x1ffc00
f0126dbb:	e8 d3 0d fe ff       	call   f0107b93 <kmalloc>
f0126dc0:	83 c4 10             	add    $0x10,%esp
f0126dc3:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dc9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0126dcf:	89 c1                	mov    %eax,%ecx
f0126dd1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126dd8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ddd:	0f b6 d0             	movzbl %al,%edx
f0126de0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126de3:	01 d0                	add    %edx,%eax
f0126de5:	48                   	dec    %eax
f0126de6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126de9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126dec:	ba 00 00 00 00       	mov    $0x0,%edx
f0126df1:	f7 75 c4             	divl   -0x3c(%ebp)
f0126df4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126df7:	29 d0                	sub    %edx,%eax
f0126df9:	89 c3                	mov    %eax,%ebx
f0126dfb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126e02:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126e07:	0f b6 c0             	movzbl %al,%eax
f0126e0a:	c1 e0 04             	shl    $0x4,%eax
f0126e0d:	89 c2                	mov    %eax,%edx
f0126e0f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e12:	01 d0                	add    %edx,%eax
f0126e14:	48                   	dec    %eax
f0126e15:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126e18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e20:	f7 75 bc             	divl   -0x44(%ebp)
f0126e23:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e26:	29 d0                	sub    %edx,%eax
f0126e28:	01 d8                	add    %ebx,%eax
f0126e2a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126e2f:	39 c1                	cmp    %eax,%ecx
f0126e31:	74 17                	je     f0126e4a <test_kshrink+0x200>
f0126e33:	83 ec 04             	sub    $0x4,%esp
f0126e36:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0126e3b:	68 0a 0c 00 00       	push   $0xc0a
f0126e40:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126e45:	e8 66 93 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e4a:	e8 69 d4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126e4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126e52:	74 17                	je     f0126e6b <test_kshrink+0x221>
f0126e54:	83 ec 04             	sub    $0x4,%esp
f0126e57:	68 08 8d 13 f0       	push   $0xf0138d08
f0126e5c:	68 0b 0c 00 00       	push   $0xc0b
f0126e61:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126e66:	e8 45 93 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e6b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126e6e:	e8 9f 57 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126e73:	29 c3                	sub    %eax,%ebx
f0126e75:	89 d8                	mov    %ebx,%eax
f0126e77:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126e7c:	74 17                	je     f0126e95 <test_kshrink+0x24b>
f0126e7e:	83 ec 04             	sub    $0x4,%esp
f0126e81:	68 70 8d 13 f0       	push   $0xf0138d70
f0126e86:	68 0c 0c 00 00       	push   $0xc0c
f0126e8b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126e90:	e8 1b 93 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126e95:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f0126e9c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e9f:	e8 6e 57 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126ea4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ea7:	e8 0c d4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126eac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126eaf:	83 ec 0c             	sub    $0xc,%esp
f0126eb2:	68 00 08 00 00       	push   $0x800
f0126eb7:	e8 d7 0c fe ff       	call   f0107b93 <kmalloc>
f0126ebc:	83 c4 10             	add    $0x10,%esp
f0126ebf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ec5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0126ecb:	89 c1                	mov    %eax,%ecx
f0126ecd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126ed4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ed9:	0f b6 d0             	movzbl %al,%edx
f0126edc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126edf:	01 d0                	add    %edx,%eax
f0126ee1:	48                   	dec    %eax
f0126ee2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126ee5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126ee8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eed:	f7 75 b4             	divl   -0x4c(%ebp)
f0126ef0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126ef3:	29 d0                	sub    %edx,%eax
f0126ef5:	89 c3                	mov    %eax,%ebx
f0126ef7:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126efe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126f03:	0f b6 c0             	movzbl %al,%eax
f0126f06:	c1 e0 04             	shl    $0x4,%eax
f0126f09:	89 c2                	mov    %eax,%edx
f0126f0b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f0e:	01 d0                	add    %edx,%eax
f0126f10:	48                   	dec    %eax
f0126f11:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126f14:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f17:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f1c:	f7 75 ac             	divl   -0x54(%ebp)
f0126f1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f22:	29 d0                	sub    %edx,%eax
f0126f24:	01 d8                	add    %ebx,%eax
f0126f26:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126f2b:	39 c1                	cmp    %eax,%ecx
f0126f2d:	74 17                	je     f0126f46 <test_kshrink+0x2fc>
f0126f2f:	83 ec 04             	sub    $0x4,%esp
f0126f32:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0126f37:	68 13 0c 00 00       	push   $0xc13
f0126f3c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126f41:	e8 6a 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f46:	e8 6d d3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126f4b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f4e:	74 17                	je     f0126f67 <test_kshrink+0x31d>
f0126f50:	83 ec 04             	sub    $0x4,%esp
f0126f53:	68 08 8d 13 f0       	push   $0xf0138d08
f0126f58:	68 14 0c 00 00       	push   $0xc14
f0126f5d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126f62:	e8 49 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f67:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f6a:	e8 a3 56 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126f6f:	29 c3                	sub    %eax,%ebx
f0126f71:	89 d8                	mov    %ebx,%eax
f0126f73:	83 f8 01             	cmp    $0x1,%eax
f0126f76:	74 17                	je     f0126f8f <test_kshrink+0x345>
f0126f78:	83 ec 04             	sub    $0x4,%esp
f0126f7b:	68 70 8d 13 f0       	push   $0xf0138d70
f0126f80:	68 15 0c 00 00       	push   $0xc15
f0126f85:	68 ee 8c 13 f0       	push   $0xf0138cee
f0126f8a:	e8 21 92 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126f8f:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0126f96:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126f99:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0126f9f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126fa9:	eb 0e                	jmp    f0126fb9 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0126fab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126fae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126fb1:	01 d0                	add    %edx,%eax
f0126fb3:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126fb6:	ff 45 f4             	incl   -0xc(%ebp)
f0126fb9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126fbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126fc2:	7f e7                	jg     f0126fab <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126fc4:	e8 49 56 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126fc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fcc:	e8 e7 d2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126fd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126fd4:	83 ec 0c             	sub    $0xc,%esp
f0126fd7:	68 00 08 00 00       	push   $0x800
f0126fdc:	e8 b2 0b fe ff       	call   f0107b93 <kmalloc>
f0126fe1:	83 c4 10             	add    $0x10,%esp
f0126fe4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126fea:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0126ff0:	89 c1                	mov    %eax,%ecx
f0126ff2:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126ff9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ffe:	0f b6 d0             	movzbl %al,%edx
f0127001:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127004:	01 d0                	add    %edx,%eax
f0127006:	48                   	dec    %eax
f0127007:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012700a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012700d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127012:	f7 75 a0             	divl   -0x60(%ebp)
f0127015:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127018:	29 d0                	sub    %edx,%eax
f012701a:	89 c3                	mov    %eax,%ebx
f012701c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127023:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127028:	0f b6 c0             	movzbl %al,%eax
f012702b:	c1 e0 04             	shl    $0x4,%eax
f012702e:	89 c2                	mov    %eax,%edx
f0127030:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127033:	01 d0                	add    %edx,%eax
f0127035:	48                   	dec    %eax
f0127036:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127039:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012703c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127041:	f7 75 98             	divl   -0x68(%ebp)
f0127044:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127047:	29 d0                	sub    %edx,%eax
f0127049:	01 d8                	add    %ebx,%eax
f012704b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127050:	39 c1                	cmp    %eax,%ecx
f0127052:	74 17                	je     f012706b <test_kshrink+0x421>
f0127054:	83 ec 04             	sub    $0x4,%esp
f0127057:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012705c:	68 21 0c 00 00       	push   $0xc21
f0127061:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127066:	e8 45 91 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012706b:	e8 48 d2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127070:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127073:	74 17                	je     f012708c <test_kshrink+0x442>
f0127075:	83 ec 04             	sub    $0x4,%esp
f0127078:	68 08 8d 13 f0       	push   $0xf0138d08
f012707d:	68 22 0c 00 00       	push   $0xc22
f0127082:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127087:	e8 24 91 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012708c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012708f:	e8 7e 55 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127094:	29 c3                	sub    %eax,%ebx
f0127096:	89 d8                	mov    %ebx,%eax
f0127098:	83 f8 01             	cmp    $0x1,%eax
f012709b:	74 17                	je     f01270b4 <test_kshrink+0x46a>
f012709d:	83 ec 04             	sub    $0x4,%esp
f01270a0:	68 70 8d 13 f0       	push   $0xf0138d70
f01270a5:	68 23 0c 00 00       	push   $0xc23
f01270aa:	68 ee 8c 13 f0       	push   $0xf0138cee
f01270af:	e8 fc 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01270b4:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f01270bb:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01270be:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01270c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01270c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270ce:	eb 0e                	jmp    f01270de <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f01270d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01270d6:	01 d0                	add    %edx,%eax
f01270d8:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01270db:	ff 45 f4             	incl   -0xc(%ebp)
f01270de:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01270e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270e7:	7f e7                	jg     f01270d0 <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01270e9:	e8 24 55 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01270ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270f1:	e8 c2 d1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01270f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01270f9:	83 ec 0c             	sub    $0xc,%esp
f01270fc:	68 00 1c 00 00       	push   $0x1c00
f0127101:	e8 8d 0a fe ff       	call   f0107b93 <kmalloc>
f0127106:	83 c4 10             	add    $0x10,%esp
f0127109:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012710f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127115:	89 c1                	mov    %eax,%ecx
f0127117:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012711e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127123:	0f b6 d0             	movzbl %al,%edx
f0127126:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127129:	01 d0                	add    %edx,%eax
f012712b:	48                   	dec    %eax
f012712c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012712f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127132:	ba 00 00 00 00       	mov    $0x0,%edx
f0127137:	f7 75 90             	divl   -0x70(%ebp)
f012713a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012713d:	29 d0                	sub    %edx,%eax
f012713f:	89 c3                	mov    %eax,%ebx
f0127141:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127148:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012714d:	0f b6 c0             	movzbl %al,%eax
f0127150:	c1 e0 04             	shl    $0x4,%eax
f0127153:	89 c2                	mov    %eax,%edx
f0127155:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127158:	01 d0                	add    %edx,%eax
f012715a:	48                   	dec    %eax
f012715b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012715e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127161:	ba 00 00 00 00       	mov    $0x0,%edx
f0127166:	f7 75 88             	divl   -0x78(%ebp)
f0127169:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012716c:	29 d0                	sub    %edx,%eax
f012716e:	01 d8                	add    %ebx,%eax
f0127170:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127175:	39 c1                	cmp    %eax,%ecx
f0127177:	74 17                	je     f0127190 <test_kshrink+0x546>
f0127179:	83 ec 04             	sub    $0x4,%esp
f012717c:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127181:	68 2f 0c 00 00       	push   $0xc2f
f0127186:	68 ee 8c 13 f0       	push   $0xf0138cee
f012718b:	e8 20 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127190:	e8 23 d1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127195:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127198:	74 17                	je     f01271b1 <test_kshrink+0x567>
f012719a:	83 ec 04             	sub    $0x4,%esp
f012719d:	68 08 8d 13 f0       	push   $0xf0138d08
f01271a2:	68 30 0c 00 00       	push   $0xc30
f01271a7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01271ac:	e8 ff 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271b1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271b4:	e8 59 54 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01271b9:	29 c3                	sub    %eax,%ebx
f01271bb:	89 d8                	mov    %ebx,%eax
f01271bd:	83 f8 02             	cmp    $0x2,%eax
f01271c0:	74 17                	je     f01271d9 <test_kshrink+0x58f>
f01271c2:	83 ec 04             	sub    $0x4,%esp
f01271c5:	68 70 8d 13 f0       	push   $0xf0138d70
f01271ca:	68 31 0c 00 00       	push   $0xc31
f01271cf:	68 ee 8c 13 f0       	push   $0xf0138cee
f01271d4:	e8 d7 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01271d9:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f01271e0:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01271e3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01271e9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01271ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01271f3:	eb 0e                	jmp    f0127203 <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f01271f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01271f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01271fb:	01 d0                	add    %edx,%eax
f01271fd:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127200:	ff 45 f4             	incl   -0xc(%ebp)
f0127203:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127209:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012720c:	7f e7                	jg     f01271f5 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012720e:	e8 ff 53 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127213:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127216:	e8 9d d0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012721b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012721e:	83 ec 0c             	sub    $0xc,%esp
f0127221:	68 00 fc 2f 00       	push   $0x2ffc00
f0127226:	e8 68 09 fe ff       	call   f0107b93 <kmalloc>
f012722b:	83 c4 10             	add    $0x10,%esp
f012722e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127234:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012723a:	89 c1                	mov    %eax,%ecx
f012723c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127243:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127248:	0f b6 d0             	movzbl %al,%edx
f012724b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012724e:	01 d0                	add    %edx,%eax
f0127250:	48                   	dec    %eax
f0127251:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127257:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012725d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127262:	f7 75 80             	divl   -0x80(%ebp)
f0127265:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012726b:	29 d0                	sub    %edx,%eax
f012726d:	89 c3                	mov    %eax,%ebx
f012726f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127276:	10 00 00 
f0127279:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012727e:	0f b6 c0             	movzbl %al,%eax
f0127281:	c1 e0 04             	shl    $0x4,%eax
f0127284:	89 c2                	mov    %eax,%edx
f0127286:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012728c:	01 d0                	add    %edx,%eax
f012728e:	48                   	dec    %eax
f012728f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127295:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012729b:	ba 00 00 00 00       	mov    $0x0,%edx
f01272a0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01272a6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01272ac:	29 d0                	sub    %edx,%eax
f01272ae:	01 d8                	add    %ebx,%eax
f01272b0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01272b5:	39 c1                	cmp    %eax,%ecx
f01272b7:	74 17                	je     f01272d0 <test_kshrink+0x686>
f01272b9:	83 ec 04             	sub    $0x4,%esp
f01272bc:	68 d4 8d 13 f0       	push   $0xf0138dd4
f01272c1:	68 3d 0c 00 00       	push   $0xc3d
f01272c6:	68 ee 8c 13 f0       	push   $0xf0138cee
f01272cb:	e8 e0 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272d0:	e8 e3 cf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01272d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272d8:	74 17                	je     f01272f1 <test_kshrink+0x6a7>
f01272da:	83 ec 04             	sub    $0x4,%esp
f01272dd:	68 08 8d 13 f0       	push   $0xf0138d08
f01272e2:	68 3e 0c 00 00       	push   $0xc3e
f01272e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01272ec:	e8 bf 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272f1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01272f4:	e8 19 53 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01272f9:	29 c3                	sub    %eax,%ebx
f01272fb:	89 d8                	mov    %ebx,%eax
f01272fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127302:	74 17                	je     f012731b <test_kshrink+0x6d1>
f0127304:	83 ec 04             	sub    $0x4,%esp
f0127307:	68 70 8d 13 f0       	push   $0xf0138d70
f012730c:	68 3f 0c 00 00       	push   $0xc3f
f0127311:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127316:	e8 95 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012731b:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f0127322:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127325:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012732b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012732e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127335:	eb 0e                	jmp    f0127345 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127337:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012733a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012733d:	01 d0                	add    %edx,%eax
f012733f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127342:	ff 45 f4             	incl   -0xc(%ebp)
f0127345:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012734b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012734e:	7f e7                	jg     f0127337 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127350:	e8 bd 52 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127355:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127358:	e8 5b cf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012735d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127360:	83 ec 0c             	sub    $0xc,%esp
f0127363:	68 00 00 60 00       	push   $0x600000
f0127368:	e8 26 08 fe ff       	call   f0107b93 <kmalloc>
f012736d:	83 c4 10             	add    $0x10,%esp
f0127370:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127376:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012737c:	89 c1                	mov    %eax,%ecx
f012737e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127385:	10 00 00 
f0127388:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012738d:	0f b6 d0             	movzbl %al,%edx
f0127390:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127396:	01 d0                	add    %edx,%eax
f0127398:	48                   	dec    %eax
f0127399:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012739f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01273a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01273aa:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01273b0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01273b6:	29 d0                	sub    %edx,%eax
f01273b8:	89 c3                	mov    %eax,%ebx
f01273ba:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01273c1:	10 00 00 
f01273c4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01273c9:	0f b6 c0             	movzbl %al,%eax
f01273cc:	c1 e0 04             	shl    $0x4,%eax
f01273cf:	89 c2                	mov    %eax,%edx
f01273d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01273d7:	01 d0                	add    %edx,%eax
f01273d9:	48                   	dec    %eax
f01273da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01273e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01273e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01273eb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01273f1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01273f7:	29 d0                	sub    %edx,%eax
f01273f9:	01 d8                	add    %ebx,%eax
f01273fb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127400:	39 c1                	cmp    %eax,%ecx
f0127402:	74 17                	je     f012741b <test_kshrink+0x7d1>
f0127404:	83 ec 04             	sub    $0x4,%esp
f0127407:	68 d4 8d 13 f0       	push   $0xf0138dd4
f012740c:	68 4b 0c 00 00       	push   $0xc4b
f0127411:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127416:	e8 95 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012741b:	e8 98 ce fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127420:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127423:	74 17                	je     f012743c <test_kshrink+0x7f2>
f0127425:	83 ec 04             	sub    $0x4,%esp
f0127428:	68 08 8d 13 f0       	push   $0xf0138d08
f012742d:	68 4c 0c 00 00       	push   $0xc4c
f0127432:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127437:	e8 74 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012743c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012743f:	e8 ce 51 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127444:	29 c3                	sub    %eax,%ebx
f0127446:	89 d8                	mov    %ebx,%eax
f0127448:	3d 00 06 00 00       	cmp    $0x600,%eax
f012744d:	74 17                	je     f0127466 <test_kshrink+0x81c>
f012744f:	83 ec 04             	sub    $0x4,%esp
f0127452:	68 70 8d 13 f0       	push   $0xf0138d70
f0127457:	68 4d 0c 00 00       	push   $0xc4d
f012745c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127461:	e8 4a 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127466:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f012746d:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127470:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127476:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012747c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127483:	eb 1a                	jmp    f012749f <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127485:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127488:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012748f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127495:	01 c2                	add    %eax,%edx
f0127497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012749a:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012749c:	ff 45 f4             	incl   -0xc(%ebp)
f012749f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01274a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274a8:	7d db                	jge    f0127485 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01274aa:	e8 63 51 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01274af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274b2:	e8 01 ce fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01274b7:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01274ba:	83 ec 0c             	sub    $0xc,%esp
f01274bd:	68 00 00 50 00       	push   $0x500000
f01274c2:	e8 4e 07 fe ff       	call   f0107c15 <kshrink>
f01274c7:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01274ca:	e8 e9 cd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01274cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01274d2:	74 19                	je     f01274ed <test_kshrink+0x8a3>
f01274d4:	68 88 9a 13 f0       	push   $0xf0139a88
f01274d9:	68 b9 9a 13 f0       	push   $0xf0139ab9
f01274de:	68 5d 0c 00 00       	push   $0xc5d
f01274e3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01274e8:	e8 c3 8c fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01274ed:	e8 20 51 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01274f2:	89 c2                	mov    %eax,%edx
f01274f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01274f7:	29 c2                	sub    %eax,%edx
f01274f9:	89 d0                	mov    %edx,%eax
f01274fb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127500:	74 19                	je     f012751b <test_kshrink+0x8d1>
f0127502:	68 94 9b 13 f0       	push   $0xf0139b94
f0127507:	68 b9 9a 13 f0       	push   $0xf0139ab9
f012750c:	68 5e 0c 00 00       	push   $0xc5e
f0127511:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127516:	e8 95 8c fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f012751b:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f0127522:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127525:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012752c:	eb 37                	jmp    f0127565 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f012752e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127531:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127538:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012753e:	01 d0                	add    %edx,%eax
f0127540:	8b 10                	mov    (%eax),%edx
f0127542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127545:	39 c2                	cmp    %eax,%edx
f0127547:	74 19                	je     f0127562 <test_kshrink+0x918>
f0127549:	68 c4 9b 13 f0       	push   $0xf0139bc4
f012754e:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0127553:	68 66 0c 00 00       	push   $0xc66
f0127558:	68 ee 8c 13 f0       	push   $0xf0138cee
f012755d:	e8 4e 8c fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127562:	ff 45 f4             	incl   -0xc(%ebp)
f0127565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127568:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f012756e:	7e be                	jle    f012752e <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127570:	83 ec 0c             	sub    $0xc,%esp
f0127573:	6a 03                	push   $0x3
f0127575:	e8 33 55 fe ff       	call   f010caad <sys_bypassPageFault>
f012757a:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f012757d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127583:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127586:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127589:	05 00 00 50 00       	add    $0x500000,%eax
f012758e:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0127591:	e8 05 55 fe ff       	call   f010ca9b <sys_rcr2>
f0127596:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127599:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012759f:	39 d0                	cmp    %edx,%eax
f01275a1:	74 19                	je     f01275bc <test_kshrink+0x972>
f01275a3:	68 d0 9b 13 f0       	push   $0xf0139bd0
f01275a8:	68 b9 9a 13 f0       	push   $0xf0139ab9
f01275ad:	68 6f 0c 00 00       	push   $0xc6f
f01275b2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01275b7:	e8 f4 8b fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f01275bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275bf:	05 00 10 50 00       	add    $0x501000,%eax
f01275c4:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01275c7:	e8 cf 54 fe ff       	call   f010ca9b <sys_rcr2>
f01275cc:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01275cf:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01275d5:	39 d0                	cmp    %edx,%eax
f01275d7:	74 19                	je     f01275f2 <test_kshrink+0x9a8>
f01275d9:	68 f8 9b 13 f0       	push   $0xf0139bf8
f01275de:	68 b9 9a 13 f0       	push   $0xf0139ab9
f01275e3:	68 72 0c 00 00       	push   $0xc72
f01275e8:	68 ee 8c 13 f0       	push   $0xf0138cee
f01275ed:	e8 be 8b fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f01275f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275f5:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01275fa:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01275fd:	e8 99 54 fe ff       	call   f010ca9b <sys_rcr2>
f0127602:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127605:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f012760b:	39 d0                	cmp    %edx,%eax
f012760d:	74 19                	je     f0127628 <test_kshrink+0x9de>
f012760f:	68 24 9c 13 f0       	push   $0xf0139c24
f0127614:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0127619:	68 75 0c 00 00       	push   $0xc75
f012761e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127623:	e8 88 8b fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127628:	83 ec 0c             	sub    $0xc,%esp
f012762b:	6a 00                	push   $0x0
f012762d:	e8 7b 54 fe ff       	call   f010caad <sys_bypassPageFault>
f0127632:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127635:	e8 d8 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012763a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012763d:	e8 76 cc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127642:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127645:	83 ec 0c             	sub    $0xc,%esp
f0127648:	68 00 00 20 00       	push   $0x200000
f012764d:	e8 c3 05 fe ff       	call   f0107c15 <kshrink>
f0127652:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127655:	e8 5e cc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012765a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012765d:	74 19                	je     f0127678 <test_kshrink+0xa2e>
f012765f:	68 88 9a 13 f0       	push   $0xf0139a88
f0127664:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0127669:	68 82 0c 00 00       	push   $0xc82
f012766e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127673:	e8 38 8b fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127678:	e8 95 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012767d:	89 c2                	mov    %eax,%edx
f012767f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127682:	29 c2                	sub    %eax,%edx
f0127684:	89 d0                	mov    %edx,%eax
f0127686:	3d 00 03 00 00       	cmp    $0x300,%eax
f012768b:	74 19                	je     f01276a6 <test_kshrink+0xa5c>
f012768d:	68 50 9c 13 f0       	push   $0xf0139c50
f0127692:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0127697:	68 83 0c 00 00       	push   $0xc83
f012769c:	68 ee 8c 13 f0       	push   $0xf0138cee
f01276a1:	e8 0a 8b fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01276a6:	e8 67 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01276ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276ae:	e8 05 cc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01276b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01276b6:	83 ec 0c             	sub    $0xc,%esp
f01276b9:	68 00 00 40 00       	push   $0x400000
f01276be:	e8 d0 04 fe ff       	call   f0107b93 <kmalloc>
f01276c3:	83 c4 10             	add    $0x10,%esp
f01276c6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f01276cc:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01276d3:	10 00 00 
f01276d6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01276db:	0f b6 d0             	movzbl %al,%edx
f01276de:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01276e4:	01 d0                	add    %edx,%eax
f01276e6:	48                   	dec    %eax
f01276e7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01276ed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01276f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01276f8:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01276fe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127704:	29 d0                	sub    %edx,%eax
f0127706:	89 c1                	mov    %eax,%ecx
f0127708:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012770f:	10 00 00 
f0127712:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127717:	0f b6 c0             	movzbl %al,%eax
f012771a:	c1 e0 04             	shl    $0x4,%eax
f012771d:	89 c2                	mov    %eax,%edx
f012771f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127725:	01 d0                	add    %edx,%eax
f0127727:	48                   	dec    %eax
f0127728:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012772e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127734:	ba 00 00 00 00       	mov    $0x0,%edx
f0127739:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012773f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127745:	29 d0                	sub    %edx,%eax
f0127747:	01 c8                	add    %ecx,%eax
f0127749:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f012774f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127755:	83 ec 04             	sub    $0x4,%esp
f0127758:	52                   	push   %edx
f0127759:	50                   	push   %eax
f012775a:	68 80 9c 13 f0       	push   $0xf0139c80
f012775f:	e8 cd 96 fd ff       	call   f0100e31 <cprintf>
f0127764:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127767:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012776d:	89 c1                	mov    %eax,%ecx
f012776f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127776:	10 00 00 
f0127779:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012777e:	0f b6 d0             	movzbl %al,%edx
f0127781:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127787:	01 d0                	add    %edx,%eax
f0127789:	48                   	dec    %eax
f012778a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127790:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127796:	ba 00 00 00 00       	mov    $0x0,%edx
f012779b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01277a1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01277a7:	29 d0                	sub    %edx,%eax
f01277a9:	89 c3                	mov    %eax,%ebx
f01277ab:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01277b2:	10 00 00 
f01277b5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01277ba:	0f b6 c0             	movzbl %al,%eax
f01277bd:	c1 e0 04             	shl    $0x4,%eax
f01277c0:	89 c2                	mov    %eax,%edx
f01277c2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01277c8:	01 d0                	add    %edx,%eax
f01277ca:	48                   	dec    %eax
f01277cb:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01277d1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01277d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01277dc:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01277e2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01277e8:	29 d0                	sub    %edx,%eax
f01277ea:	01 d8                	add    %ebx,%eax
f01277ec:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01277f1:	39 c1                	cmp    %eax,%ecx
f01277f3:	74 17                	je     f012780c <test_kshrink+0xbc2>
f01277f5:	83 ec 04             	sub    $0x4,%esp
f01277f8:	68 9c 9c 13 f0       	push   $0xf0139c9c
f01277fd:	68 8e 0c 00 00       	push   $0xc8e
f0127802:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127807:	e8 a4 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012780c:	e8 a7 ca fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127811:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127814:	74 17                	je     f012782d <test_kshrink+0xbe3>
f0127816:	83 ec 04             	sub    $0x4,%esp
f0127819:	68 08 8d 13 f0       	push   $0xf0138d08
f012781e:	68 8f 0c 00 00       	push   $0xc8f
f0127823:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127828:	e8 83 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012782d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127830:	e8 dd 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127835:	29 c3                	sub    %eax,%ebx
f0127837:	89 d8                	mov    %ebx,%eax
f0127839:	3d 00 04 00 00       	cmp    $0x400,%eax
f012783e:	74 17                	je     f0127857 <test_kshrink+0xc0d>
f0127840:	83 ec 04             	sub    $0x4,%esp
f0127843:	68 70 8d 13 f0       	push   $0xf0138d70
f0127848:	68 90 0c 00 00       	push   $0xc90
f012784d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127852:	e8 59 89 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127857:	e8 b6 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012785c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012785f:	e8 54 ca fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127864:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127867:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012786d:	83 ec 0c             	sub    $0xc,%esp
f0127870:	50                   	push   %eax
f0127871:	e8 37 03 fe ff       	call   f0107bad <kfree>
f0127876:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127879:	e8 3a ca fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012787e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127881:	74 17                	je     f012789a <test_kshrink+0xc50>
f0127883:	83 ec 04             	sub    $0x4,%esp
f0127886:	68 08 8d 13 f0       	push   $0xf0138d08
f012788b:	68 9a 0c 00 00       	push   $0xc9a
f0127890:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127895:	e8 16 89 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012789a:	e8 73 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012789f:	89 c2                	mov    %eax,%edx
f01278a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01278a4:	29 c2                	sub    %eax,%edx
f01278a6:	89 d0                	mov    %edx,%eax
f01278a8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278ad:	74 17                	je     f01278c6 <test_kshrink+0xc7c>
f01278af:	83 ec 04             	sub    $0x4,%esp
f01278b2:	68 a0 95 13 f0       	push   $0xf01395a0
f01278b7:	68 9b 0c 00 00       	push   $0xc9b
f01278bc:	68 ee 8c 13 f0       	push   $0xf0138cee
f01278c1:	e8 ea 88 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01278c6:	e8 47 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01278cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ce:	e8 e5 c9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01278d3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f01278d6:	83 ec 0c             	sub    $0xc,%esp
f01278d9:	68 00 b0 3f 00       	push   $0x3fb000
f01278de:	e8 32 03 fe ff       	call   f0107c15 <kshrink>
f01278e3:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01278e6:	e8 cd c9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01278eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278ee:	74 19                	je     f0127909 <test_kshrink+0xcbf>
f01278f0:	68 88 9a 13 f0       	push   $0xf0139a88
f01278f5:	68 b9 9a 13 f0       	push   $0xf0139ab9
f01278fa:	68 a5 0c 00 00       	push   $0xca5
f01278ff:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127904:	e8 a7 88 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127909:	e8 04 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012790e:	89 c2                	mov    %eax,%edx
f0127910:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127913:	29 c2                	sub    %eax,%edx
f0127915:	89 d0                	mov    %edx,%eax
f0127917:	83 f8 05             	cmp    $0x5,%eax
f012791a:	74 19                	je     f0127935 <test_kshrink+0xceb>
f012791c:	68 f0 9c 13 f0       	push   $0xf0139cf0
f0127921:	68 b9 9a 13 f0       	push   $0xf0139ab9
f0127926:	68 a6 0c 00 00       	push   $0xca6
f012792b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127930:	e8 7b 88 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127935:	83 ec 0c             	sub    $0xc,%esp
f0127938:	68 4c 9a 13 f0       	push   $0xf0139a4c
f012793d:	e8 ef 94 fd ff       	call   f0100e31 <cprintf>
f0127942:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127945:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012794a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012794d:	5b                   	pop    %ebx
f012794e:	5f                   	pop    %edi
f012794f:	5d                   	pop    %ebp
f0127950:	c3                   	ret    

f0127951 <test_kfreelast>:


int test_kfreelast()
{
f0127951:	55                   	push   %ebp
f0127952:	89 e5                	mov    %esp,%ebp
f0127954:	57                   	push   %edi
f0127955:	53                   	push   %ebx
f0127956:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f012795c:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127960:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127964:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012796a:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127970:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127977:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012797e:	e8 8f 4c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127983:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127986:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f012798c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127991:	b8 00 00 00 00       	mov    $0x0,%eax
f0127996:	89 d7                	mov    %edx,%edi
f0127998:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012799a:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f01279a0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01279a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01279aa:	89 d7                	mov    %edx,%edi
f01279ac:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01279ae:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f01279b4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01279b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01279be:	89 d7                	mov    %edx,%edi
f01279c0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01279c2:	e8 4b 4c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01279c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279ca:	e8 e9 c8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01279cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01279d2:	83 ec 0c             	sub    $0xc,%esp
f01279d5:	68 00 fc 1f 00       	push   $0x1ffc00
f01279da:	e8 b4 01 fe ff       	call   f0107b93 <kmalloc>
f01279df:	83 c4 10             	add    $0x10,%esp
f01279e2:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01279e8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01279ee:	89 c1                	mov    %eax,%ecx
f01279f0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01279f7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01279fc:	0f b6 d0             	movzbl %al,%edx
f01279ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127a02:	01 d0                	add    %edx,%eax
f0127a04:	48                   	dec    %eax
f0127a05:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127a08:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a10:	f7 75 cc             	divl   -0x34(%ebp)
f0127a13:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127a16:	29 d0                	sub    %edx,%eax
f0127a18:	89 c3                	mov    %eax,%ebx
f0127a1a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127a21:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127a26:	0f b6 c0             	movzbl %al,%eax
f0127a29:	c1 e0 04             	shl    $0x4,%eax
f0127a2c:	89 c2                	mov    %eax,%edx
f0127a2e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127a31:	01 d0                	add    %edx,%eax
f0127a33:	48                   	dec    %eax
f0127a34:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127a37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127a3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a3f:	f7 75 c4             	divl   -0x3c(%ebp)
f0127a42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127a45:	29 d0                	sub    %edx,%eax
f0127a47:	01 d8                	add    %ebx,%eax
f0127a49:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127a4e:	39 c1                	cmp    %eax,%ecx
f0127a50:	74 17                	je     f0127a69 <test_kfreelast+0x118>
f0127a52:	83 ec 04             	sub    $0x4,%esp
f0127a55:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127a5a:	68 ca 0c 00 00       	push   $0xcca
f0127a5f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127a64:	e8 47 87 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a69:	e8 4a c8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127a6e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127a71:	74 17                	je     f0127a8a <test_kfreelast+0x139>
f0127a73:	83 ec 04             	sub    $0x4,%esp
f0127a76:	68 08 8d 13 f0       	push   $0xf0138d08
f0127a7b:	68 cb 0c 00 00       	push   $0xccb
f0127a80:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127a85:	e8 26 87 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a8a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127a8d:	e8 80 4b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127a92:	29 c3                	sub    %eax,%ebx
f0127a94:	89 d8                	mov    %ebx,%eax
f0127a96:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127a9b:	74 17                	je     f0127ab4 <test_kfreelast+0x163>
f0127a9d:	83 ec 04             	sub    $0x4,%esp
f0127aa0:	68 70 8d 13 f0       	push   $0xf0138d70
f0127aa5:	68 cc 0c 00 00       	push   $0xccc
f0127aaa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127aaf:	e8 fc 86 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127ab4:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127abb:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127abe:	e8 4f 4b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127ac3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ac6:	e8 ed c7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127acb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127ace:	83 ec 0c             	sub    $0xc,%esp
f0127ad1:	68 00 fc 1f 00       	push   $0x1ffc00
f0127ad6:	e8 b8 00 fe ff       	call   f0107b93 <kmalloc>
f0127adb:	83 c4 10             	add    $0x10,%esp
f0127ade:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127ae4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127aea:	89 c1                	mov    %eax,%ecx
f0127aec:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127af3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127af8:	0f b6 d0             	movzbl %al,%edx
f0127afb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127afe:	01 d0                	add    %edx,%eax
f0127b00:	48                   	dec    %eax
f0127b01:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127b04:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127b07:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b0c:	f7 75 bc             	divl   -0x44(%ebp)
f0127b0f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127b12:	29 d0                	sub    %edx,%eax
f0127b14:	89 c3                	mov    %eax,%ebx
f0127b16:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127b1d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127b22:	0f b6 c0             	movzbl %al,%eax
f0127b25:	c1 e0 04             	shl    $0x4,%eax
f0127b28:	89 c2                	mov    %eax,%edx
f0127b2a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127b2d:	01 d0                	add    %edx,%eax
f0127b2f:	48                   	dec    %eax
f0127b30:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127b33:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b3b:	f7 75 b4             	divl   -0x4c(%ebp)
f0127b3e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127b41:	29 d0                	sub    %edx,%eax
f0127b43:	01 d8                	add    %ebx,%eax
f0127b45:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127b4a:	39 c1                	cmp    %eax,%ecx
f0127b4c:	74 17                	je     f0127b65 <test_kfreelast+0x214>
f0127b4e:	83 ec 04             	sub    $0x4,%esp
f0127b51:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127b56:	68 d3 0c 00 00       	push   $0xcd3
f0127b5b:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127b60:	e8 4b 86 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b65:	e8 4e c7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127b6a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127b6d:	74 17                	je     f0127b86 <test_kfreelast+0x235>
f0127b6f:	83 ec 04             	sub    $0x4,%esp
f0127b72:	68 08 8d 13 f0       	push   $0xf0138d08
f0127b77:	68 d4 0c 00 00       	push   $0xcd4
f0127b7c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127b81:	e8 2a 86 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b86:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127b89:	e8 84 4a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127b8e:	29 c3                	sub    %eax,%ebx
f0127b90:	89 d8                	mov    %ebx,%eax
f0127b92:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127b97:	74 17                	je     f0127bb0 <test_kfreelast+0x25f>
f0127b99:	83 ec 04             	sub    $0x4,%esp
f0127b9c:	68 70 8d 13 f0       	push   $0xf0138d70
f0127ba1:	68 d5 0c 00 00       	push   $0xcd5
f0127ba6:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127bab:	e8 00 86 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127bb0:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127bb7:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127bba:	e8 53 4a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127bbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bc2:	e8 f1 c6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127bc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127bca:	83 ec 0c             	sub    $0xc,%esp
f0127bcd:	68 00 08 00 00       	push   $0x800
f0127bd2:	e8 bc ff fd ff       	call   f0107b93 <kmalloc>
f0127bd7:	83 c4 10             	add    $0x10,%esp
f0127bda:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127be0:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127be6:	89 c1                	mov    %eax,%ecx
f0127be8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127bef:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127bf4:	0f b6 d0             	movzbl %al,%edx
f0127bf7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127bfa:	01 d0                	add    %edx,%eax
f0127bfc:	48                   	dec    %eax
f0127bfd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127c00:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c03:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c08:	f7 75 ac             	divl   -0x54(%ebp)
f0127c0b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c0e:	29 d0                	sub    %edx,%eax
f0127c10:	89 c3                	mov    %eax,%ebx
f0127c12:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127c19:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127c1e:	0f b6 c0             	movzbl %al,%eax
f0127c21:	c1 e0 04             	shl    $0x4,%eax
f0127c24:	89 c2                	mov    %eax,%edx
f0127c26:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127c29:	01 d0                	add    %edx,%eax
f0127c2b:	48                   	dec    %eax
f0127c2c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127c2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127c32:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c37:	f7 75 a4             	divl   -0x5c(%ebp)
f0127c3a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127c3d:	29 d0                	sub    %edx,%eax
f0127c3f:	01 d8                	add    %ebx,%eax
f0127c41:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127c46:	39 c1                	cmp    %eax,%ecx
f0127c48:	74 17                	je     f0127c61 <test_kfreelast+0x310>
f0127c4a:	83 ec 04             	sub    $0x4,%esp
f0127c4d:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127c52:	68 dc 0c 00 00       	push   $0xcdc
f0127c57:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127c5c:	e8 4f 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c61:	e8 52 c6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127c66:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127c69:	74 17                	je     f0127c82 <test_kfreelast+0x331>
f0127c6b:	83 ec 04             	sub    $0x4,%esp
f0127c6e:	68 08 8d 13 f0       	push   $0xf0138d08
f0127c73:	68 dd 0c 00 00       	push   $0xcdd
f0127c78:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127c7d:	e8 2e 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c82:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127c85:	e8 88 49 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127c8a:	29 c3                	sub    %eax,%ebx
f0127c8c:	89 d8                	mov    %ebx,%eax
f0127c8e:	83 f8 01             	cmp    $0x1,%eax
f0127c91:	74 17                	je     f0127caa <test_kfreelast+0x359>
f0127c93:	83 ec 04             	sub    $0x4,%esp
f0127c96:	68 70 8d 13 f0       	push   $0xf0138d70
f0127c9b:	68 de 0c 00 00       	push   $0xcde
f0127ca0:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127ca5:	e8 06 85 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127caa:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0127cb1:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127cb4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127cba:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127cbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cc4:	eb 0e                	jmp    f0127cd4 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0127cc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127cc9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127ccc:	01 d0                	add    %edx,%eax
f0127cce:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127cd1:	ff 45 f4             	incl   -0xc(%ebp)
f0127cd4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127cda:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127cdd:	7f e7                	jg     f0127cc6 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cdf:	e8 2e 49 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127ce4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ce7:	e8 cc c5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127cec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127cef:	83 ec 0c             	sub    $0xc,%esp
f0127cf2:	68 00 08 00 00       	push   $0x800
f0127cf7:	e8 97 fe fd ff       	call   f0107b93 <kmalloc>
f0127cfc:	83 c4 10             	add    $0x10,%esp
f0127cff:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d05:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127d0b:	89 c1                	mov    %eax,%ecx
f0127d0d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127d14:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127d19:	0f b6 d0             	movzbl %al,%edx
f0127d1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d1f:	01 d0                	add    %edx,%eax
f0127d21:	48                   	dec    %eax
f0127d22:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127d25:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d28:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d2d:	f7 75 98             	divl   -0x68(%ebp)
f0127d30:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d33:	29 d0                	sub    %edx,%eax
f0127d35:	89 c3                	mov    %eax,%ebx
f0127d37:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127d3e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127d43:	0f b6 c0             	movzbl %al,%eax
f0127d46:	c1 e0 04             	shl    $0x4,%eax
f0127d49:	89 c2                	mov    %eax,%edx
f0127d4b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d4e:	01 d0                	add    %edx,%eax
f0127d50:	48                   	dec    %eax
f0127d51:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127d54:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127d57:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d5c:	f7 75 90             	divl   -0x70(%ebp)
f0127d5f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127d62:	29 d0                	sub    %edx,%eax
f0127d64:	01 d8                	add    %ebx,%eax
f0127d66:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127d6b:	39 c1                	cmp    %eax,%ecx
f0127d6d:	74 17                	je     f0127d86 <test_kfreelast+0x435>
f0127d6f:	83 ec 04             	sub    $0x4,%esp
f0127d72:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127d77:	68 ea 0c 00 00       	push   $0xcea
f0127d7c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127d81:	e8 2a 84 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d86:	e8 2d c5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127d8b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127d8e:	74 17                	je     f0127da7 <test_kfreelast+0x456>
f0127d90:	83 ec 04             	sub    $0x4,%esp
f0127d93:	68 08 8d 13 f0       	push   $0xf0138d08
f0127d98:	68 eb 0c 00 00       	push   $0xceb
f0127d9d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127da2:	e8 09 84 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127da7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127daa:	e8 63 48 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127daf:	29 c3                	sub    %eax,%ebx
f0127db1:	89 d8                	mov    %ebx,%eax
f0127db3:	83 f8 01             	cmp    $0x1,%eax
f0127db6:	74 17                	je     f0127dcf <test_kfreelast+0x47e>
f0127db8:	83 ec 04             	sub    $0x4,%esp
f0127dbb:	68 70 8d 13 f0       	push   $0xf0138d70
f0127dc0:	68 ec 0c 00 00       	push   $0xcec
f0127dc5:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127dca:	e8 e1 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127dcf:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0127dd6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127dd9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127ddf:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127de2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127de9:	eb 0e                	jmp    f0127df9 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0127deb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127dee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127df1:	01 d0                	add    %edx,%eax
f0127df3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127df6:	ff 45 f4             	incl   -0xc(%ebp)
f0127df9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0127dff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e02:	7f e7                	jg     f0127deb <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e04:	e8 09 48 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127e09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e0c:	e8 a7 c4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127e11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127e14:	83 ec 0c             	sub    $0xc,%esp
f0127e17:	68 00 1c 00 00       	push   $0x1c00
f0127e1c:	e8 72 fd fd ff       	call   f0107b93 <kmalloc>
f0127e21:	83 c4 10             	add    $0x10,%esp
f0127e24:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e2a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127e30:	89 c1                	mov    %eax,%ecx
f0127e32:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127e39:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127e3e:	0f b6 d0             	movzbl %al,%edx
f0127e41:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127e44:	01 d0                	add    %edx,%eax
f0127e46:	48                   	dec    %eax
f0127e47:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127e4a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e52:	f7 75 88             	divl   -0x78(%ebp)
f0127e55:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e58:	29 d0                	sub    %edx,%eax
f0127e5a:	89 c3                	mov    %eax,%ebx
f0127e5c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127e63:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127e68:	0f b6 c0             	movzbl %al,%eax
f0127e6b:	c1 e0 04             	shl    $0x4,%eax
f0127e6e:	89 c2                	mov    %eax,%edx
f0127e70:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127e73:	01 d0                	add    %edx,%eax
f0127e75:	48                   	dec    %eax
f0127e76:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127e7c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127e82:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e87:	f7 75 80             	divl   -0x80(%ebp)
f0127e8a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127e90:	29 d0                	sub    %edx,%eax
f0127e92:	01 d8                	add    %ebx,%eax
f0127e94:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127e99:	39 c1                	cmp    %eax,%ecx
f0127e9b:	74 17                	je     f0127eb4 <test_kfreelast+0x563>
f0127e9d:	83 ec 04             	sub    $0x4,%esp
f0127ea0:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127ea5:	68 f8 0c 00 00       	push   $0xcf8
f0127eaa:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127eaf:	e8 fc 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127eb4:	e8 ff c3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127eb9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127ebc:	74 17                	je     f0127ed5 <test_kfreelast+0x584>
f0127ebe:	83 ec 04             	sub    $0x4,%esp
f0127ec1:	68 08 8d 13 f0       	push   $0xf0138d08
f0127ec6:	68 f9 0c 00 00       	push   $0xcf9
f0127ecb:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127ed0:	e8 db 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ed5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127ed8:	e8 35 47 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127edd:	29 c3                	sub    %eax,%ebx
f0127edf:	89 d8                	mov    %ebx,%eax
f0127ee1:	83 f8 02             	cmp    $0x2,%eax
f0127ee4:	74 17                	je     f0127efd <test_kfreelast+0x5ac>
f0127ee6:	83 ec 04             	sub    $0x4,%esp
f0127ee9:	68 70 8d 13 f0       	push   $0xf0138d70
f0127eee:	68 fa 0c 00 00       	push   $0xcfa
f0127ef3:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127ef8:	e8 b3 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127efd:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f0127f04:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127f07:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127f0d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127f10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f17:	eb 0e                	jmp    f0127f27 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f0127f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f1c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127f1f:	01 d0                	add    %edx,%eax
f0127f21:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127f24:	ff 45 f4             	incl   -0xc(%ebp)
f0127f27:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0127f2d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f30:	7f e7                	jg     f0127f19 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f32:	e8 db 46 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127f37:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f3a:	e8 79 c3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127f3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127f42:	83 ec 0c             	sub    $0xc,%esp
f0127f45:	68 00 fc 2f 00       	push   $0x2ffc00
f0127f4a:	e8 44 fc fd ff       	call   f0107b93 <kmalloc>
f0127f4f:	83 c4 10             	add    $0x10,%esp
f0127f52:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f58:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0127f5e:	89 c1                	mov    %eax,%ecx
f0127f60:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127f67:	10 00 00 
f0127f6a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127f6f:	0f b6 d0             	movzbl %al,%edx
f0127f72:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127f78:	01 d0                	add    %edx,%eax
f0127f7a:	48                   	dec    %eax
f0127f7b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127f81:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f8c:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127f92:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127f98:	29 d0                	sub    %edx,%eax
f0127f9a:	89 c3                	mov    %eax,%ebx
f0127f9c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127fa3:	10 00 00 
f0127fa6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127fab:	0f b6 c0             	movzbl %al,%eax
f0127fae:	c1 e0 04             	shl    $0x4,%eax
f0127fb1:	89 c2                	mov    %eax,%edx
f0127fb3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127fb9:	01 d0                	add    %edx,%eax
f0127fbb:	48                   	dec    %eax
f0127fbc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127fc2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fcd:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127fd3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fd9:	29 d0                	sub    %edx,%eax
f0127fdb:	01 d8                	add    %ebx,%eax
f0127fdd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127fe2:	39 c1                	cmp    %eax,%ecx
f0127fe4:	74 17                	je     f0127ffd <test_kfreelast+0x6ac>
f0127fe6:	83 ec 04             	sub    $0x4,%esp
f0127fe9:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0127fee:	68 06 0d 00 00       	push   $0xd06
f0127ff3:	68 ee 8c 13 f0       	push   $0xf0138cee
f0127ff8:	e8 b3 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ffd:	e8 b6 c2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128002:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128005:	74 17                	je     f012801e <test_kfreelast+0x6cd>
f0128007:	83 ec 04             	sub    $0x4,%esp
f012800a:	68 08 8d 13 f0       	push   $0xf0138d08
f012800f:	68 07 0d 00 00       	push   $0xd07
f0128014:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128019:	e8 92 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012801e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128021:	e8 ec 45 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128026:	29 c3                	sub    %eax,%ebx
f0128028:	89 d8                	mov    %ebx,%eax
f012802a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012802f:	74 17                	je     f0128048 <test_kfreelast+0x6f7>
f0128031:	83 ec 04             	sub    $0x4,%esp
f0128034:	68 70 8d 13 f0       	push   $0xf0138d70
f0128039:	68 08 0d 00 00       	push   $0xd08
f012803e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128043:	e8 68 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128048:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f012804f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128052:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128058:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012805b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128062:	eb 0e                	jmp    f0128072 <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f0128064:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128067:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012806a:	01 d0                	add    %edx,%eax
f012806c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012806f:	ff 45 f4             	incl   -0xc(%ebp)
f0128072:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128078:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012807b:	7f e7                	jg     f0128064 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012807d:	e8 90 45 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128082:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128085:	e8 2e c2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012808a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012808d:	83 ec 0c             	sub    $0xc,%esp
f0128090:	68 00 fc 5f 00       	push   $0x5ffc00
f0128095:	e8 f9 fa fd ff       	call   f0107b93 <kmalloc>
f012809a:	83 c4 10             	add    $0x10,%esp
f012809d:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280a3:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01280a9:	89 c1                	mov    %eax,%ecx
f01280ab:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01280b2:	10 00 00 
f01280b5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01280ba:	0f b6 d0             	movzbl %al,%edx
f01280bd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01280c3:	01 d0                	add    %edx,%eax
f01280c5:	48                   	dec    %eax
f01280c6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01280cc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01280d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01280d7:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01280dd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01280e3:	29 d0                	sub    %edx,%eax
f01280e5:	89 c3                	mov    %eax,%ebx
f01280e7:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01280ee:	10 00 00 
f01280f1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01280f6:	0f b6 c0             	movzbl %al,%eax
f01280f9:	c1 e0 04             	shl    $0x4,%eax
f01280fc:	89 c2                	mov    %eax,%edx
f01280fe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128104:	01 d0                	add    %edx,%eax
f0128106:	48                   	dec    %eax
f0128107:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012810d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128113:	ba 00 00 00 00       	mov    $0x0,%edx
f0128118:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012811e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128124:	29 d0                	sub    %edx,%eax
f0128126:	01 d8                	add    %ebx,%eax
f0128128:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012812d:	39 c1                	cmp    %eax,%ecx
f012812f:	74 17                	je     f0128148 <test_kfreelast+0x7f7>
f0128131:	83 ec 04             	sub    $0x4,%esp
f0128134:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128139:	68 14 0d 00 00       	push   $0xd14
f012813e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128143:	e8 68 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128148:	e8 6b c1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012814d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128150:	74 17                	je     f0128169 <test_kfreelast+0x818>
f0128152:	83 ec 04             	sub    $0x4,%esp
f0128155:	68 08 8d 13 f0       	push   $0xf0138d08
f012815a:	68 15 0d 00 00       	push   $0xd15
f012815f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128164:	e8 47 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128169:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012816c:	e8 a1 44 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128171:	29 c3                	sub    %eax,%ebx
f0128173:	89 d8                	mov    %ebx,%eax
f0128175:	3d 00 06 00 00       	cmp    $0x600,%eax
f012817a:	74 17                	je     f0128193 <test_kfreelast+0x842>
f012817c:	83 ec 04             	sub    $0x4,%esp
f012817f:	68 70 8d 13 f0       	push   $0xf0138d70
f0128184:	68 16 0d 00 00       	push   $0xd16
f0128189:	68 ee 8c 13 f0       	push   $0xf0138cee
f012818e:	e8 1d 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0128193:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f012819a:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012819d:	e8 70 44 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01281a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281a5:	e8 0e c1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01281aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01281ad:	83 ec 0c             	sub    $0xc,%esp
f01281b0:	68 00 38 00 00       	push   $0x3800
f01281b5:	e8 d9 f9 fd ff       	call   f0107b93 <kmalloc>
f01281ba:	83 c4 10             	add    $0x10,%esp
f01281bd:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01281c3:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01281c9:	89 c1                	mov    %eax,%ecx
f01281cb:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01281d2:	10 00 00 
f01281d5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01281da:	0f b6 d0             	movzbl %al,%edx
f01281dd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01281e3:	01 d0                	add    %edx,%eax
f01281e5:	48                   	dec    %eax
f01281e6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01281ec:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01281f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01281f7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01281fd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128203:	29 d0                	sub    %edx,%eax
f0128205:	89 c3                	mov    %eax,%ebx
f0128207:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012820e:	10 00 00 
f0128211:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128216:	0f b6 c0             	movzbl %al,%eax
f0128219:	c1 e0 04             	shl    $0x4,%eax
f012821c:	89 c2                	mov    %eax,%edx
f012821e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128224:	01 d0                	add    %edx,%eax
f0128226:	48                   	dec    %eax
f0128227:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012822d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128233:	ba 00 00 00 00       	mov    $0x0,%edx
f0128238:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012823e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128244:	29 d0                	sub    %edx,%eax
f0128246:	01 d8                	add    %ebx,%eax
f0128248:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012824d:	39 c1                	cmp    %eax,%ecx
f012824f:	74 17                	je     f0128268 <test_kfreelast+0x917>
f0128251:	83 ec 04             	sub    $0x4,%esp
f0128254:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128259:	68 1d 0d 00 00       	push   $0xd1d
f012825e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128263:	e8 48 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128268:	e8 4b c0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012826d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128270:	74 17                	je     f0128289 <test_kfreelast+0x938>
f0128272:	83 ec 04             	sub    $0x4,%esp
f0128275:	68 08 8d 13 f0       	push   $0xf0138d08
f012827a:	68 1e 0d 00 00       	push   $0xd1e
f012827f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128284:	e8 27 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128289:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012828c:	e8 81 43 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128291:	29 c3                	sub    %eax,%ebx
f0128293:	89 d8                	mov    %ebx,%eax
f0128295:	83 f8 04             	cmp    $0x4,%eax
f0128298:	74 17                	je     f01282b1 <test_kfreelast+0x960>
f012829a:	83 ec 04             	sub    $0x4,%esp
f012829d:	68 70 8d 13 f0       	push   $0xf0138d70
f01282a2:	68 1f 0d 00 00       	push   $0xd1f
f01282a7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01282ac:	e8 ff 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01282b1:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f01282b8:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01282bb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01282c1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01282c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01282cb:	eb 0e                	jmp    f01282db <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f01282cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01282d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01282d3:	01 d0                	add    %edx,%eax
f01282d5:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01282d8:	ff 45 f4             	incl   -0xc(%ebp)
f01282db:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01282e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01282e4:	7f e7                	jg     f01282cd <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01282e6:	e8 27 43 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01282eb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01282f1:	e8 c2 bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01282f6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f01282fc:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0128302:	83 ec 0c             	sub    $0xc,%esp
f0128305:	50                   	push   %eax
f0128306:	e8 a2 f8 fd ff       	call   f0107bad <kfree>
f012830b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012830e:	e8 a5 bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128313:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128319:	74 17                	je     f0128332 <test_kfreelast+0x9e1>
f012831b:	83 ec 04             	sub    $0x4,%esp
f012831e:	68 08 8d 13 f0       	push   $0xf0138d08
f0128323:	68 2e 0d 00 00       	push   $0xd2e
f0128328:	68 ee 8c 13 f0       	push   $0xf0138cee
f012832d:	e8 7e 7e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0128332:	e8 db 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128337:	89 c2                	mov    %eax,%edx
f0128339:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012833f:	29 c2                	sub    %eax,%edx
f0128341:	89 d0                	mov    %edx,%eax
f0128343:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128348:	74 17                	je     f0128361 <test_kfreelast+0xa10>
f012834a:	83 ec 04             	sub    $0x4,%esp
f012834d:	68 78 94 13 f0       	push   $0xf0139478
f0128352:	68 2f 0d 00 00       	push   $0xd2f
f0128357:	68 ee 8c 13 f0       	push   $0xf0138cee
f012835c:	e8 4f 7e fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128361:	e8 ac 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128366:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012836c:	e8 47 bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128371:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128377:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012837d:	83 ec 0c             	sub    $0xc,%esp
f0128380:	50                   	push   %eax
f0128381:	e8 27 f8 fd ff       	call   f0107bad <kfree>
f0128386:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128389:	e8 2a bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012838e:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128394:	74 17                	je     f01283ad <test_kfreelast+0xa5c>
f0128396:	83 ec 04             	sub    $0x4,%esp
f0128399:	68 08 8d 13 f0       	push   $0xf0138d08
f012839e:	68 35 0d 00 00       	push   $0xd35
f01283a3:	68 ee 8c 13 f0       	push   $0xf0138cee
f01283a8:	e8 03 7e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01283ad:	e8 60 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01283b2:	89 c2                	mov    %eax,%edx
f01283b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01283ba:	29 c2                	sub    %eax,%edx
f01283bc:	89 d0                	mov    %edx,%eax
f01283be:	3d 00 02 00 00       	cmp    $0x200,%eax
f01283c3:	74 17                	je     f01283dc <test_kfreelast+0xa8b>
f01283c5:	83 ec 04             	sub    $0x4,%esp
f01283c8:	68 78 94 13 f0       	push   $0xf0139478
f01283cd:	68 36 0d 00 00       	push   $0xd36
f01283d2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01283d7:	e8 d4 7d fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01283dc:	e8 31 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01283e1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283e7:	e8 cc be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01283ec:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f01283f2:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01283f8:	83 ec 0c             	sub    $0xc,%esp
f01283fb:	50                   	push   %eax
f01283fc:	e8 ac f7 fd ff       	call   f0107bad <kfree>
f0128401:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128404:	e8 af be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128409:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f012840f:	74 17                	je     f0128428 <test_kfreelast+0xad7>
f0128411:	83 ec 04             	sub    $0x4,%esp
f0128414:	68 08 8d 13 f0       	push   $0xf0138d08
f0128419:	68 3c 0d 00 00       	push   $0xd3c
f012841e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128423:	e8 88 7d fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128428:	e8 e5 41 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012842d:	89 c2                	mov    %eax,%edx
f012842f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128435:	29 c2                	sub    %eax,%edx
f0128437:	89 d0                	mov    %edx,%eax
f0128439:	3d 00 06 00 00       	cmp    $0x600,%eax
f012843e:	74 17                	je     f0128457 <test_kfreelast+0xb06>
f0128440:	83 ec 04             	sub    $0x4,%esp
f0128443:	68 78 94 13 f0       	push   $0xf0139478
f0128448:	68 3d 0d 00 00       	push   $0xd3d
f012844d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128452:	e8 59 7d fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128457:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012845d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128460:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128467:	eb 1e                	jmp    f0128487 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128469:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012846f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128472:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128475:	01 c8                	add    %ecx,%eax
f0128477:	8a 00                	mov    (%eax),%al
f0128479:	0f be c0             	movsbl %al,%eax
f012847c:	01 d0                	add    %edx,%eax
f012847e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128484:	ff 45 f4             	incl   -0xc(%ebp)
f0128487:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012848d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128490:	7f d7                	jg     f0128469 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128492:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128498:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012849e:	01 c0                	add    %eax,%eax
f01284a0:	39 c2                	cmp    %eax,%edx
f01284a2:	74 17                	je     f01284bb <test_kfreelast+0xb6a>
f01284a4:	83 ec 04             	sub    $0x4,%esp
f01284a7:	68 d4 94 13 f0       	push   $0xf01394d4
f01284ac:	68 48 0d 00 00       	push   $0xd48
f01284b1:	68 ee 8c 13 f0       	push   $0xf0138cee
f01284b6:	e8 f5 7c fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01284bb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01284c1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01284c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284cb:	eb 1e                	jmp    f01284eb <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f01284cd:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01284d3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01284d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01284d9:	01 c8                	add    %ecx,%eax
f01284db:	8a 00                	mov    (%eax),%al
f01284dd:	0f be c0             	movsbl %al,%eax
f01284e0:	01 d0                	add    %edx,%eax
f01284e2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01284e8:	ff 45 f4             	incl   -0xc(%ebp)
f01284eb:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01284f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284f4:	7f d7                	jg     f01284cd <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01284f6:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01284fc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128502:	89 c1                	mov    %eax,%ecx
f0128504:	01 c9                	add    %ecx,%ecx
f0128506:	01 c8                	add    %ecx,%eax
f0128508:	39 c2                	cmp    %eax,%edx
f012850a:	74 17                	je     f0128523 <test_kfreelast+0xbd2>
f012850c:	83 ec 04             	sub    $0x4,%esp
f012850f:	68 d4 94 13 f0       	push   $0xf01394d4
f0128514:	68 50 0d 00 00       	push   $0xd50
f0128519:	68 ee 8c 13 f0       	push   $0xf0138cee
f012851e:	e8 8d 7c fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0128523:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128529:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012852c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128533:	eb 1e                	jmp    f0128553 <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128535:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012853b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012853e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128541:	01 c8                	add    %ecx,%eax
f0128543:	8a 00                	mov    (%eax),%al
f0128545:	0f be c0             	movsbl %al,%eax
f0128548:	01 d0                	add    %edx,%eax
f012854a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128550:	ff 45 f4             	incl   -0xc(%ebp)
f0128553:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128559:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012855c:	7f d7                	jg     f0128535 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012855e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128564:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f012856a:	c1 e2 02             	shl    $0x2,%edx
f012856d:	39 d0                	cmp    %edx,%eax
f012856f:	74 17                	je     f0128588 <test_kfreelast+0xc37>
f0128571:	83 ec 04             	sub    $0x4,%esp
f0128574:	68 d4 94 13 f0       	push   $0xf01394d4
f0128579:	68 58 0d 00 00       	push   $0xd58
f012857e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128583:	e8 28 7c fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128588:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012858e:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128591:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128598:	eb 1e                	jmp    f01285b8 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f012859a:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f01285a0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01285a3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01285a6:	01 c8                	add    %ecx,%eax
f01285a8:	8a 00                	mov    (%eax),%al
f01285aa:	0f be c0             	movsbl %al,%eax
f01285ad:	01 d0                	add    %edx,%eax
f01285af:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01285b5:	ff 45 f4             	incl   -0xc(%ebp)
f01285b8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01285be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01285c1:	7f d7                	jg     f012859a <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01285c3:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f01285c9:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f01285cf:	89 d0                	mov    %edx,%eax
f01285d1:	c1 e0 02             	shl    $0x2,%eax
f01285d4:	01 d0                	add    %edx,%eax
f01285d6:	39 c1                	cmp    %eax,%ecx
f01285d8:	74 17                	je     f01285f1 <test_kfreelast+0xca0>
f01285da:	83 ec 04             	sub    $0x4,%esp
f01285dd:	68 d4 94 13 f0       	push   $0xf01394d4
f01285e2:	68 60 0d 00 00       	push   $0xd60
f01285e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f01285ec:	e8 bf 7b fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01285f1:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01285f7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01285fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128601:	eb 1e                	jmp    f0128621 <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f0128603:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128609:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012860c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012860f:	01 c8                	add    %ecx,%eax
f0128611:	8a 00                	mov    (%eax),%al
f0128613:	0f be c0             	movsbl %al,%eax
f0128616:	01 d0                	add    %edx,%eax
f0128618:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012861e:	ff 45 f4             	incl   -0xc(%ebp)
f0128621:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128627:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012862a:	7f d7                	jg     f0128603 <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012862c:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f0128632:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128638:	89 d0                	mov    %edx,%eax
f012863a:	01 c0                	add    %eax,%eax
f012863c:	01 d0                	add    %edx,%eax
f012863e:	01 c0                	add    %eax,%eax
f0128640:	01 d0                	add    %edx,%eax
f0128642:	39 c1                	cmp    %eax,%ecx
f0128644:	74 17                	je     f012865d <test_kfreelast+0xd0c>
f0128646:	83 ec 04             	sub    $0x4,%esp
f0128649:	68 d4 94 13 f0       	push   $0xf01394d4
f012864e:	68 68 0d 00 00       	push   $0xd68
f0128653:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128658:	e8 53 7b fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012865d:	e8 b0 3f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128662:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128665:	e8 4e bc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012866a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012866d:	83 ec 0c             	sub    $0xc,%esp
f0128670:	68 00 50 00 00       	push   $0x5000
f0128675:	e8 19 f5 fd ff       	call   f0107b93 <kmalloc>
f012867a:	83 c4 10             	add    $0x10,%esp
f012867d:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128683:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128689:	89 c1                	mov    %eax,%ecx
f012868b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128692:	10 00 00 
f0128695:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012869a:	0f b6 d0             	movzbl %al,%edx
f012869d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01286a3:	01 d0                	add    %edx,%eax
f01286a5:	48                   	dec    %eax
f01286a6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01286ac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01286b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01286b7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01286bd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01286c3:	29 d0                	sub    %edx,%eax
f01286c5:	89 c3                	mov    %eax,%ebx
f01286c7:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01286ce:	10 00 00 
f01286d1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01286d6:	0f b6 c0             	movzbl %al,%eax
f01286d9:	c1 e0 04             	shl    $0x4,%eax
f01286dc:	89 c2                	mov    %eax,%edx
f01286de:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01286e4:	01 d0                	add    %edx,%eax
f01286e6:	48                   	dec    %eax
f01286e7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01286ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01286f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01286f8:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01286fe:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128704:	29 d0                	sub    %edx,%eax
f0128706:	01 d8                	add    %ebx,%eax
f0128708:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012870d:	39 c1                	cmp    %eax,%ecx
f012870f:	74 17                	je     f0128728 <test_kfreelast+0xdd7>
f0128711:	83 ec 04             	sub    $0x4,%esp
f0128714:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128719:	68 71 0d 00 00       	push   $0xd71
f012871e:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128723:	e8 88 7a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128728:	e8 8b bb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012872d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128730:	74 17                	je     f0128749 <test_kfreelast+0xdf8>
f0128732:	83 ec 04             	sub    $0x4,%esp
f0128735:	68 08 8d 13 f0       	push   $0xf0138d08
f012873a:	68 72 0d 00 00       	push   $0xd72
f012873f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128744:	e8 67 7a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128749:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012874c:	e8 c1 3e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128751:	29 c3                	sub    %eax,%ebx
f0128753:	89 d8                	mov    %ebx,%eax
f0128755:	83 f8 05             	cmp    $0x5,%eax
f0128758:	74 17                	je     f0128771 <test_kfreelast+0xe20>
f012875a:	83 ec 04             	sub    $0x4,%esp
f012875d:	68 70 8d 13 f0       	push   $0xf0138d70
f0128762:	68 73 0d 00 00       	push   $0xd73
f0128767:	68 ee 8c 13 f0       	push   $0xf0138cee
f012876c:	e8 3f 7a fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128771:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128778:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012877b:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128781:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128784:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012878b:	eb 0e                	jmp    f012879b <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f012878d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128790:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128793:	01 d0                	add    %edx,%eax
f0128795:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128798:	ff 45 f4             	incl   -0xc(%ebp)
f012879b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01287a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287a4:	7f e7                	jg     f012878d <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01287a6:	e8 67 3e fe ff       	call   f010c612 <sys_calculate_free_frames>
f01287ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287ae:	e8 05 bb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01287b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01287b6:	83 ec 0c             	sub    $0xc,%esp
f01287b9:	68 00 00 10 00       	push   $0x100000
f01287be:	e8 d0 f3 fd ff       	call   f0107b93 <kmalloc>
f01287c3:	83 c4 10             	add    $0x10,%esp
f01287c6:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01287cc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01287d2:	89 c1                	mov    %eax,%ecx
f01287d4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01287db:	10 00 00 
f01287de:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01287e3:	0f b6 d0             	movzbl %al,%edx
f01287e6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01287ec:	01 d0                	add    %edx,%eax
f01287ee:	48                   	dec    %eax
f01287ef:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01287f5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01287fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0128800:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128806:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012880c:	29 d0                	sub    %edx,%eax
f012880e:	89 c3                	mov    %eax,%ebx
f0128810:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128817:	10 00 00 
f012881a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012881f:	0f b6 c0             	movzbl %al,%eax
f0128822:	c1 e0 04             	shl    $0x4,%eax
f0128825:	89 c2                	mov    %eax,%edx
f0128827:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012882d:	01 d0                	add    %edx,%eax
f012882f:	48                   	dec    %eax
f0128830:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128836:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012883c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128841:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128847:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012884d:	29 d0                	sub    %edx,%eax
f012884f:	01 d8                	add    %ebx,%eax
f0128851:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128856:	39 c1                	cmp    %eax,%ecx
f0128858:	74 17                	je     f0128871 <test_kfreelast+0xf20>
f012885a:	83 ec 04             	sub    $0x4,%esp
f012885d:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128862:	68 7f 0d 00 00       	push   $0xd7f
f0128867:	68 ee 8c 13 f0       	push   $0xf0138cee
f012886c:	e8 3f 79 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128871:	e8 42 ba fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128876:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128879:	74 17                	je     f0128892 <test_kfreelast+0xf41>
f012887b:	83 ec 04             	sub    $0x4,%esp
f012887e:	68 08 8d 13 f0       	push   $0xf0138d08
f0128883:	68 80 0d 00 00       	push   $0xd80
f0128888:	68 ee 8c 13 f0       	push   $0xf0138cee
f012888d:	e8 1e 79 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128892:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128895:	e8 78 3d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012889a:	29 c3                	sub    %eax,%ebx
f012889c:	89 d8                	mov    %ebx,%eax
f012889e:	3d 00 01 00 00       	cmp    $0x100,%eax
f01288a3:	74 17                	je     f01288bc <test_kfreelast+0xf6b>
f01288a5:	83 ec 04             	sub    $0x4,%esp
f01288a8:	68 70 8d 13 f0       	push   $0xf0138d70
f01288ad:	68 81 0d 00 00       	push   $0xd81
f01288b2:	68 ee 8c 13 f0       	push   $0xf0138cee
f01288b7:	e8 f4 78 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01288bc:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f01288c3:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01288c6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01288cc:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01288cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288d6:	eb 0e                	jmp    f01288e6 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f01288d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01288db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01288de:	01 d0                	add    %edx,%eax
f01288e0:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01288e3:	ff 45 f4             	incl   -0xc(%ebp)
f01288e6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01288ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288ef:	7f e7                	jg     f01288d8 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f01288f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01288f8:	e8 15 3d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01288fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128900:	e8 b3 b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128905:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128908:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012890e:	83 ec 0c             	sub    $0xc,%esp
f0128911:	50                   	push   %eax
f0128912:	e8 96 f2 fd ff       	call   f0107bad <kfree>
f0128917:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012891a:	e8 99 b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012891f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128922:	74 17                	je     f012893b <test_kfreelast+0xfea>
f0128924:	83 ec 04             	sub    $0x4,%esp
f0128927:	68 08 8d 13 f0       	push   $0xf0138d08
f012892c:	68 91 0d 00 00       	push   $0xd91
f0128931:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128936:	e8 75 78 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012893b:	e8 d2 3c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128940:	89 c2                	mov    %eax,%edx
f0128942:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128945:	29 c2                	sub    %eax,%edx
f0128947:	89 d0                	mov    %edx,%eax
f0128949:	3d 00 01 00 00       	cmp    $0x100,%eax
f012894e:	74 17                	je     f0128967 <test_kfreelast+0x1016>
f0128950:	83 ec 04             	sub    $0x4,%esp
f0128953:	68 78 94 13 f0       	push   $0xf0139478
f0128958:	68 92 0d 00 00       	push   $0xd92
f012895d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128962:	e8 49 78 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128967:	e8 a6 3c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012896c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012896f:	e8 44 b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128974:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128977:	83 ec 0c             	sub    $0xc,%esp
f012897a:	68 00 78 00 00       	push   $0x7800
f012897f:	e8 0f f2 fd ff       	call   f0107b93 <kmalloc>
f0128984:	83 c4 10             	add    $0x10,%esp
f0128987:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012898d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128993:	89 c1                	mov    %eax,%ecx
f0128995:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012899c:	10 00 00 
f012899f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01289a4:	0f b6 d0             	movzbl %al,%edx
f01289a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01289ad:	01 d0                	add    %edx,%eax
f01289af:	48                   	dec    %eax
f01289b0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01289b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01289bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c1:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01289c7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01289cd:	29 d0                	sub    %edx,%eax
f01289cf:	89 c3                	mov    %eax,%ebx
f01289d1:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01289d8:	10 00 00 
f01289db:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01289e0:	0f b6 c0             	movzbl %al,%eax
f01289e3:	c1 e0 04             	shl    $0x4,%eax
f01289e6:	89 c2                	mov    %eax,%edx
f01289e8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01289ee:	01 d0                	add    %edx,%eax
f01289f0:	48                   	dec    %eax
f01289f1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01289f7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01289fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a02:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128a08:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a0e:	29 d0                	sub    %edx,%eax
f0128a10:	01 d8                	add    %ebx,%eax
f0128a12:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128a17:	39 c1                	cmp    %eax,%ecx
f0128a19:	74 17                	je     f0128a32 <test_kfreelast+0x10e1>
f0128a1b:	83 ec 04             	sub    $0x4,%esp
f0128a1e:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128a23:	68 9b 0d 00 00       	push   $0xd9b
f0128a28:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128a2d:	e8 7e 77 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a32:	e8 81 b8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128a37:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a3a:	74 17                	je     f0128a53 <test_kfreelast+0x1102>
f0128a3c:	83 ec 04             	sub    $0x4,%esp
f0128a3f:	68 08 8d 13 f0       	push   $0xf0138d08
f0128a44:	68 9c 0d 00 00       	push   $0xd9c
f0128a49:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128a4e:	e8 5d 77 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a53:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128a56:	e8 b7 3b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128a5b:	29 c3                	sub    %eax,%ebx
f0128a5d:	89 d8                	mov    %ebx,%eax
f0128a5f:	83 f8 08             	cmp    $0x8,%eax
f0128a62:	74 17                	je     f0128a7b <test_kfreelast+0x112a>
f0128a64:	83 ec 04             	sub    $0x4,%esp
f0128a67:	68 70 8d 13 f0       	push   $0xf0138d70
f0128a6c:	68 9d 0d 00 00       	push   $0xd9d
f0128a71:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128a76:	e8 35 77 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128a7b:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128a82:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128a85:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128a8b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128a8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a95:	eb 0e                	jmp    f0128aa5 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128a97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a9a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128a9d:	01 d0                	add    %edx,%eax
f0128a9f:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128aa2:	ff 45 f4             	incl   -0xc(%ebp)
f0128aa5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128aab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128aae:	7f e7                	jg     f0128a97 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ab0:	e8 5d 3b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128ab5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ab8:	e8 fb b7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128abd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128ac0:	83 ec 0c             	sub    $0xc,%esp
f0128ac3:	68 00 00 10 00       	push   $0x100000
f0128ac8:	e8 c6 f0 fd ff       	call   f0107b93 <kmalloc>
f0128acd:	83 c4 10             	add    $0x10,%esp
f0128ad0:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ad6:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128adc:	89 c1                	mov    %eax,%ecx
f0128ade:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128ae5:	10 00 00 
f0128ae8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128aed:	0f b6 d0             	movzbl %al,%edx
f0128af0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128af6:	01 d0                	add    %edx,%eax
f0128af8:	48                   	dec    %eax
f0128af9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128aff:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128b05:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b0a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128b10:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128b16:	29 d0                	sub    %edx,%eax
f0128b18:	89 c3                	mov    %eax,%ebx
f0128b1a:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128b21:	10 00 00 
f0128b24:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128b29:	0f b6 c0             	movzbl %al,%eax
f0128b2c:	c1 e0 04             	shl    $0x4,%eax
f0128b2f:	89 c2                	mov    %eax,%edx
f0128b31:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128b37:	01 d0                	add    %edx,%eax
f0128b39:	48                   	dec    %eax
f0128b3a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128b40:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128b46:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b4b:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128b51:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128b57:	29 d0                	sub    %edx,%eax
f0128b59:	01 d8                	add    %ebx,%eax
f0128b5b:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128b60:	39 c1                	cmp    %eax,%ecx
f0128b62:	74 17                	je     f0128b7b <test_kfreelast+0x122a>
f0128b64:	83 ec 04             	sub    $0x4,%esp
f0128b67:	68 d4 8d 13 f0       	push   $0xf0138dd4
f0128b6c:	68 a9 0d 00 00       	push   $0xda9
f0128b71:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128b76:	e8 35 76 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b7b:	e8 38 b7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128b80:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128b83:	74 17                	je     f0128b9c <test_kfreelast+0x124b>
f0128b85:	83 ec 04             	sub    $0x4,%esp
f0128b88:	68 08 8d 13 f0       	push   $0xf0138d08
f0128b8d:	68 aa 0d 00 00       	push   $0xdaa
f0128b92:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128b97:	e8 14 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b9c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128b9f:	e8 6e 3a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128ba4:	29 c3                	sub    %eax,%ebx
f0128ba6:	89 d8                	mov    %ebx,%eax
f0128ba8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128bad:	74 17                	je     f0128bc6 <test_kfreelast+0x1275>
f0128baf:	83 ec 04             	sub    $0x4,%esp
f0128bb2:	68 70 8d 13 f0       	push   $0xf0138d70
f0128bb7:	68 ab 0d 00 00       	push   $0xdab
f0128bbc:	68 ee 8c 13 f0       	push   $0xf0138cee
f0128bc1:	e8 ea 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128bc6:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128bcd:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128bd0:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128bd6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128bd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128be0:	eb 0e                	jmp    f0128bf0 <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128be2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128be5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128be8:	01 d0                	add    %edx,%eax
f0128bea:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128bed:	ff 45 f4             	incl   -0xc(%ebp)
f0128bf0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128bf6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128bf9:	7f e7                	jg     f0128be2 <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128bfb:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128bff:	83 ec 08             	sub    $0x8,%esp
f0128c02:	ff 75 f0             	pushl  -0x10(%ebp)
f0128c05:	68 20 9d 13 f0       	push   $0xf0139d20
f0128c0a:	e8 22 82 fd ff       	call   f0100e31 <cprintf>
f0128c0f:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0128c12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c19:	e8 f4 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128c1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c21:	e8 92 b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128c26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0128c29:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128c2f:	83 ec 0c             	sub    $0xc,%esp
f0128c32:	50                   	push   %eax
f0128c33:	e8 75 ef fd ff       	call   f0107bad <kfree>
f0128c38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128c3b:	e8 78 b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128c40:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c43:	74 1d                	je     f0128c62 <test_kfreelast+0x1311>
f0128c45:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128c49:	75 17                	jne    f0128c62 <test_kfreelast+0x1311>
f0128c4b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128c52:	83 ec 0c             	sub    $0xc,%esp
f0128c55:	68 48 9d 13 f0       	push   $0xf0139d48
f0128c5a:	e8 d2 81 fd ff       	call   f0100e31 <cprintf>
f0128c5f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128c62:	e8 ab 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128c67:	89 c2                	mov    %eax,%edx
f0128c69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128c6c:	29 c2                	sub    %eax,%edx
f0128c6e:	89 d0                	mov    %edx,%eax
f0128c70:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c75:	74 1d                	je     f0128c94 <test_kfreelast+0x1343>
f0128c77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128c7b:	75 17                	jne    f0128c94 <test_kfreelast+0x1343>
f0128c7d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128c84:	83 ec 0c             	sub    $0xc,%esp
f0128c87:	68 b4 9d 13 f0       	push   $0xf0139db4
f0128c8c:	e8 a0 81 fd ff       	call   f0100e31 <cprintf>
f0128c91:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128c94:	e8 79 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128c99:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c9c:	e8 17 b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128ca1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0128ca4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128caa:	83 ec 0c             	sub    $0xc,%esp
f0128cad:	50                   	push   %eax
f0128cae:	e8 fa ee fd ff       	call   f0107bad <kfree>
f0128cb3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128cb6:	e8 fd b5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128cbb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128cbe:	74 1d                	je     f0128cdd <test_kfreelast+0x138c>
f0128cc0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128cc4:	75 17                	jne    f0128cdd <test_kfreelast+0x138c>
f0128cc6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128ccd:	83 ec 0c             	sub    $0xc,%esp
f0128cd0:	68 48 9d 13 f0       	push   $0xf0139d48
f0128cd5:	e8 57 81 fd ff       	call   f0100e31 <cprintf>
f0128cda:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128cdd:	e8 30 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128ce2:	89 c2                	mov    %eax,%edx
f0128ce4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128ce7:	29 c2                	sub    %eax,%edx
f0128ce9:	89 d0                	mov    %edx,%eax
f0128ceb:	83 f8 08             	cmp    $0x8,%eax
f0128cee:	74 1d                	je     f0128d0d <test_kfreelast+0x13bc>
f0128cf0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128cf4:	75 17                	jne    f0128d0d <test_kfreelast+0x13bc>
f0128cf6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128cfd:	83 ec 0c             	sub    $0xc,%esp
f0128d00:	68 b4 9d 13 f0       	push   $0xf0139db4
f0128d05:	e8 27 81 fd ff       	call   f0100e31 <cprintf>
f0128d0a:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d0d:	e8 00 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128d12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d15:	e8 9e b5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128d1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0128d1d:	83 ec 0c             	sub    $0xc,%esp
f0128d20:	68 00 28 00 00       	push   $0x2800
f0128d25:	e8 69 ee fd ff       	call   f0107b93 <kmalloc>
f0128d2a:	83 c4 10             	add    $0x10,%esp
f0128d2d:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0128d33:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128d39:	89 c1                	mov    %eax,%ecx
f0128d3b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128d42:	10 00 00 
f0128d45:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128d4a:	0f b6 d0             	movzbl %al,%edx
f0128d4d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128d53:	01 d0                	add    %edx,%eax
f0128d55:	48                   	dec    %eax
f0128d56:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128d5c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128d62:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d67:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128d6d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128d73:	29 d0                	sub    %edx,%eax
f0128d75:	89 c3                	mov    %eax,%ebx
f0128d77:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128d7e:	10 00 00 
f0128d81:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128d86:	0f b6 c0             	movzbl %al,%eax
f0128d89:	c1 e0 04             	shl    $0x4,%eax
f0128d8c:	89 c2                	mov    %eax,%edx
f0128d8e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128d94:	01 d0                	add    %edx,%eax
f0128d96:	48                   	dec    %eax
f0128d97:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128d9d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128da8:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128dae:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128db4:	29 d0                	sub    %edx,%eax
f0128db6:	01 d8                	add    %ebx,%eax
f0128db8:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128dbd:	39 c1                	cmp    %eax,%ecx
f0128dbf:	74 1d                	je     f0128dde <test_kfreelast+0x148d>
f0128dc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128dc5:	75 17                	jne    f0128dde <test_kfreelast+0x148d>
f0128dc7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128dce:	83 ec 0c             	sub    $0xc,%esp
f0128dd1:	68 ec 9d 13 f0       	push   $0xf0139dec
f0128dd6:	e8 56 80 fd ff       	call   f0100e31 <cprintf>
f0128ddb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128dde:	e8 d5 b4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128de3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128de6:	74 1d                	je     f0128e05 <test_kfreelast+0x14b4>
f0128de8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128dec:	75 17                	jne    f0128e05 <test_kfreelast+0x14b4>
f0128dee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128df5:	83 ec 0c             	sub    $0xc,%esp
f0128df8:	68 48 9d 13 f0       	push   $0xf0139d48
f0128dfd:	e8 2f 80 fd ff       	call   f0100e31 <cprintf>
f0128e02:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0128e05:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e08:	e8 05 38 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128e0d:	29 c3                	sub    %eax,%ebx
f0128e0f:	89 d8                	mov    %ebx,%eax
f0128e11:	83 f8 03             	cmp    $0x3,%eax
f0128e14:	74 1d                	je     f0128e33 <test_kfreelast+0x14e2>
f0128e16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128e1a:	75 17                	jne    f0128e33 <test_kfreelast+0x14e2>
f0128e1c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128e23:	83 ec 0c             	sub    $0xc,%esp
f0128e26:	68 54 9e 13 f0       	push   $0xf0139e54
f0128e2b:	e8 01 80 fd ff       	call   f0100e31 <cprintf>
f0128e30:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f0128e33:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0128e3a:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0128e3d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128e43:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0128e46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e4d:	eb 0e                	jmp    f0128e5d <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f0128e4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e52:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e55:	01 d0                	add    %edx,%eax
f0128e57:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0128e5a:	ff 45 f4             	incl   -0xc(%ebp)
f0128e5d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128e63:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e66:	7f e7                	jg     f0128e4f <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0128e68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128e6c:	75 17                	jne    f0128e85 <test_kfreelast+0x1534>
f0128e6e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0128e72:	83 ec 08             	sub    $0x8,%esp
f0128e75:	ff 75 f0             	pushl  -0x10(%ebp)
f0128e78:	68 20 9d 13 f0       	push   $0xf0139d20
f0128e7d:	e8 af 7f fd ff       	call   f0100e31 <cprintf>
f0128e82:	83 c4 10             	add    $0x10,%esp
f0128e85:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f0128e8c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128e92:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0128e95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e9c:	eb 1e                	jmp    f0128ebc <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f0128e9e:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0128ea4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128ea7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128eaa:	01 c8                	add    %ecx,%eax
f0128eac:	8a 00                	mov    (%eax),%al
f0128eae:	0f be c0             	movsbl %al,%eax
f0128eb1:	01 d0                	add    %edx,%eax
f0128eb3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0128eb9:	ff 45 f4             	incl   -0xc(%ebp)
f0128ebc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128ec2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ec5:	7f d7                	jg     f0128e9e <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0128ec7:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f0128ecd:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0128ed3:	89 d0                	mov    %edx,%eax
f0128ed5:	01 c0                	add    %eax,%eax
f0128ed7:	01 d0                	add    %edx,%eax
f0128ed9:	c1 e0 02             	shl    $0x2,%eax
f0128edc:	39 c1                	cmp    %eax,%ecx
f0128ede:	74 1d                	je     f0128efd <test_kfreelast+0x15ac>
f0128ee0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128ee4:	75 17                	jne    f0128efd <test_kfreelast+0x15ac>
f0128ee6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128eed:	83 ec 0c             	sub    $0xc,%esp
f0128ef0:	68 98 9e 13 f0       	push   $0xf0139e98
f0128ef5:	e8 37 7f fd ff       	call   f0100e31 <cprintf>
f0128efa:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128efd:	83 ec 0c             	sub    $0xc,%esp
f0128f00:	6a 03                	push   $0x3
f0128f02:	e8 a6 3b fe ff       	call   f010caad <sys_bypassPageFault>
f0128f07:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0128f0a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128f10:	05 00 30 00 00       	add    $0x3000,%eax
f0128f15:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0128f18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f1f:	eb 3c                	jmp    f0128f5d <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f0128f21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f24:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f27:	01 d0                	add    %edx,%eax
f0128f29:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0128f2c:	e8 6a 3b fe ff       	call   f010ca9b <sys_rcr2>
f0128f31:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128f34:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0128f37:	01 ca                	add    %ecx,%edx
f0128f39:	39 d0                	cmp    %edx,%eax
f0128f3b:	74 1d                	je     f0128f5a <test_kfreelast+0x1609>
f0128f3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128f41:	75 17                	jne    f0128f5a <test_kfreelast+0x1609>
f0128f43:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128f4a:	83 ec 0c             	sub    $0xc,%esp
f0128f4d:	68 cc 9e 13 f0       	push   $0xf0139ecc
f0128f52:	e8 da 7e fd ff       	call   f0100e31 <cprintf>
f0128f57:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0128f5a:	ff 45 f4             	incl   -0xc(%ebp)
f0128f5d:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f0128f64:	7e bb                	jle    f0128f21 <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128f66:	83 ec 0c             	sub    $0xc,%esp
f0128f69:	6a 00                	push   $0x0
f0128f6b:	e8 3d 3b fe ff       	call   f010caad <sys_bypassPageFault>
f0128f70:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0128f73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128f77:	75 17                	jne    f0128f90 <test_kfreelast+0x163f>
f0128f79:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0128f7d:	83 ec 08             	sub    $0x8,%esp
f0128f80:	ff 75 f0             	pushl  -0x10(%ebp)
f0128f83:	68 20 9d 13 f0       	push   $0xf0139d20
f0128f88:	e8 a4 7e fd ff       	call   f0100e31 <cprintf>
f0128f8d:	83 c4 10             	add    $0x10,%esp
f0128f90:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0128f97:	e8 76 36 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128f9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f9f:	e8 14 b3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128fa4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0128fa7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128fad:	83 ec 0c             	sub    $0xc,%esp
f0128fb0:	50                   	push   %eax
f0128fb1:	e8 f7 eb fd ff       	call   f0107bad <kfree>
f0128fb6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128fb9:	e8 fa b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128fbe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128fc1:	74 1d                	je     f0128fe0 <test_kfreelast+0x168f>
f0128fc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128fc7:	75 17                	jne    f0128fe0 <test_kfreelast+0x168f>
f0128fc9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128fd0:	83 ec 0c             	sub    $0xc,%esp
f0128fd3:	68 48 9d 13 f0       	push   $0xf0139d48
f0128fd8:	e8 54 7e fd ff       	call   f0100e31 <cprintf>
f0128fdd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128fe0:	e8 2d 36 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128fe5:	89 c2                	mov    %eax,%edx
f0128fe7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128fea:	29 c2                	sub    %eax,%edx
f0128fec:	89 d0                	mov    %edx,%eax
f0128fee:	83 f8 03             	cmp    $0x3,%eax
f0128ff1:	74 1d                	je     f0129010 <test_kfreelast+0x16bf>
f0128ff3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128ff7:	75 17                	jne    f0129010 <test_kfreelast+0x16bf>
f0128ff9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129000:	83 ec 0c             	sub    $0xc,%esp
f0129003:	68 b4 9d 13 f0       	push   $0xf0139db4
f0129008:	e8 24 7e fd ff       	call   f0100e31 <cprintf>
f012900d:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129010:	e8 fd 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129015:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129018:	e8 9b b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012901d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f0129020:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129026:	83 ec 0c             	sub    $0xc,%esp
f0129029:	50                   	push   %eax
f012902a:	e8 7e eb fd ff       	call   f0107bad <kfree>
f012902f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129032:	e8 81 b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129037:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012903a:	74 1d                	je     f0129059 <test_kfreelast+0x1708>
f012903c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129040:	75 17                	jne    f0129059 <test_kfreelast+0x1708>
f0129042:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129049:	83 ec 0c             	sub    $0xc,%esp
f012904c:	68 48 9d 13 f0       	push   $0xf0139d48
f0129051:	e8 db 7d fd ff       	call   f0100e31 <cprintf>
f0129056:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129059:	e8 b4 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012905e:	89 c2                	mov    %eax,%edx
f0129060:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129063:	29 c2                	sub    %eax,%edx
f0129065:	89 d0                	mov    %edx,%eax
f0129067:	83 f8 04             	cmp    $0x4,%eax
f012906a:	74 1d                	je     f0129089 <test_kfreelast+0x1738>
f012906c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129070:	75 17                	jne    f0129089 <test_kfreelast+0x1738>
f0129072:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129079:	83 ec 0c             	sub    $0xc,%esp
f012907c:	68 b4 9d 13 f0       	push   $0xf0139db4
f0129081:	e8 ab 7d fd ff       	call   f0100e31 <cprintf>
f0129086:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129089:	e8 84 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012908e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129091:	e8 22 b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129096:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129099:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012909f:	83 ec 0c             	sub    $0xc,%esp
f01290a2:	50                   	push   %eax
f01290a3:	e8 05 eb fd ff       	call   f0107bad <kfree>
f01290a8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01290ab:	e8 08 b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01290b0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01290b3:	74 1d                	je     f01290d2 <test_kfreelast+0x1781>
f01290b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290b9:	75 17                	jne    f01290d2 <test_kfreelast+0x1781>
f01290bb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290c2:	83 ec 0c             	sub    $0xc,%esp
f01290c5:	68 48 9d 13 f0       	push   $0xf0139d48
f01290ca:	e8 62 7d fd ff       	call   f0100e31 <cprintf>
f01290cf:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01290d2:	e8 3b 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01290d7:	89 c2                	mov    %eax,%edx
f01290d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01290dc:	29 c2                	sub    %eax,%edx
f01290de:	89 d0                	mov    %edx,%eax
f01290e0:	83 f8 05             	cmp    $0x5,%eax
f01290e3:	74 1d                	je     f0129102 <test_kfreelast+0x17b1>
f01290e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290e9:	75 17                	jne    f0129102 <test_kfreelast+0x17b1>
f01290eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290f2:	83 ec 0c             	sub    $0xc,%esp
f01290f5:	68 b4 9d 13 f0       	push   $0xf0139db4
f01290fa:	e8 32 7d fd ff       	call   f0100e31 <cprintf>
f01290ff:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f0129102:	e8 0b 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129107:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012910a:	e8 a9 b1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012910f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f0129112:	83 ec 0c             	sub    $0xc,%esp
f0129115:	68 00 c8 00 00       	push   $0xc800
f012911a:	e8 74 ea fd ff       	call   f0107b93 <kmalloc>
f012911f:	83 c4 10             	add    $0x10,%esp
f0129122:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129128:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012912e:	89 c1                	mov    %eax,%ecx
f0129130:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129137:	10 00 00 
f012913a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012913f:	0f b6 d0             	movzbl %al,%edx
f0129142:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129148:	01 d0                	add    %edx,%eax
f012914a:	48                   	dec    %eax
f012914b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129151:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129157:	ba 00 00 00 00       	mov    $0x0,%edx
f012915c:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129162:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129168:	29 d0                	sub    %edx,%eax
f012916a:	89 c3                	mov    %eax,%ebx
f012916c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129173:	10 00 00 
f0129176:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012917b:	0f b6 c0             	movzbl %al,%eax
f012917e:	c1 e0 04             	shl    $0x4,%eax
f0129181:	89 c2                	mov    %eax,%edx
f0129183:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129189:	01 d0                	add    %edx,%eax
f012918b:	48                   	dec    %eax
f012918c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129192:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129198:	ba 00 00 00 00       	mov    $0x0,%edx
f012919d:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01291a3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01291a9:	29 d0                	sub    %edx,%eax
f01291ab:	01 d8                	add    %ebx,%eax
f01291ad:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01291b2:	39 c1                	cmp    %eax,%ecx
f01291b4:	74 1d                	je     f01291d3 <test_kfreelast+0x1882>
f01291b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291ba:	75 17                	jne    f01291d3 <test_kfreelast+0x1882>
f01291bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291c3:	83 ec 0c             	sub    $0xc,%esp
f01291c6:	68 ec 9d 13 f0       	push   $0xf0139dec
f01291cb:	e8 61 7c fd ff       	call   f0100e31 <cprintf>
f01291d0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01291d3:	e8 e0 b0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01291d8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291db:	74 1d                	je     f01291fa <test_kfreelast+0x18a9>
f01291dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291e1:	75 17                	jne    f01291fa <test_kfreelast+0x18a9>
f01291e3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291ea:	83 ec 0c             	sub    $0xc,%esp
f01291ed:	68 48 9d 13 f0       	push   $0xf0139d48
f01291f2:	e8 3a 7c fd ff       	call   f0100e31 <cprintf>
f01291f7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01291fa:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291fd:	e8 10 34 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129202:	29 c3                	sub    %eax,%ebx
f0129204:	89 d8                	mov    %ebx,%eax
f0129206:	83 f8 0d             	cmp    $0xd,%eax
f0129209:	74 1d                	je     f0129228 <test_kfreelast+0x18d7>
f012920b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012920f:	75 17                	jne    f0129228 <test_kfreelast+0x18d7>
f0129211:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129218:	83 ec 0c             	sub    $0xc,%esp
f012921b:	68 54 9e 13 f0       	push   $0xf0139e54
f0129220:	e8 0c 7c fd ff       	call   f0100e31 <cprintf>
f0129225:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129228:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f012922f:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f0129232:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129238:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012923b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129242:	eb 0e                	jmp    f0129252 <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f0129244:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129247:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012924a:	01 d0                	add    %edx,%eax
f012924c:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012924f:	ff 45 f4             	incl   -0xc(%ebp)
f0129252:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129258:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012925b:	7f e7                	jg     f0129244 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012925d:	e8 b0 33 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129262:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129265:	e8 4e b0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012926a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012926d:	83 ec 0c             	sub    $0xc,%esp
f0129270:	68 00 fc 2f 00       	push   $0x2ffc00
f0129275:	e8 19 e9 fd ff       	call   f0107b93 <kmalloc>
f012927a:	83 c4 10             	add    $0x10,%esp
f012927d:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129283:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129289:	89 c1                	mov    %eax,%ecx
f012928b:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129292:	10 00 00 
f0129295:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012929a:	0f b6 d0             	movzbl %al,%edx
f012929d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01292a3:	01 d0                	add    %edx,%eax
f01292a5:	48                   	dec    %eax
f01292a6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01292ac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01292b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01292b7:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01292bd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01292c3:	29 d0                	sub    %edx,%eax
f01292c5:	89 c3                	mov    %eax,%ebx
f01292c7:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01292ce:	10 00 00 
f01292d1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01292d6:	0f b6 c0             	movzbl %al,%eax
f01292d9:	c1 e0 04             	shl    $0x4,%eax
f01292dc:	89 c2                	mov    %eax,%edx
f01292de:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01292e4:	01 d0                	add    %edx,%eax
f01292e6:	48                   	dec    %eax
f01292e7:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01292ed:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01292f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01292f8:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01292fe:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129304:	29 d0                	sub    %edx,%eax
f0129306:	01 d8                	add    %ebx,%eax
f0129308:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012930d:	39 c1                	cmp    %eax,%ecx
f012930f:	74 1d                	je     f012932e <test_kfreelast+0x19dd>
f0129311:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129315:	75 17                	jne    f012932e <test_kfreelast+0x19dd>
f0129317:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012931e:	83 ec 0c             	sub    $0xc,%esp
f0129321:	68 ec 9d 13 f0       	push   $0xf0139dec
f0129326:	e8 06 7b fd ff       	call   f0100e31 <cprintf>
f012932b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012932e:	e8 85 af fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129333:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129336:	74 1d                	je     f0129355 <test_kfreelast+0x1a04>
f0129338:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012933c:	75 17                	jne    f0129355 <test_kfreelast+0x1a04>
f012933e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129345:	83 ec 0c             	sub    $0xc,%esp
f0129348:	68 48 9d 13 f0       	push   $0xf0139d48
f012934d:	e8 df 7a fd ff       	call   f0100e31 <cprintf>
f0129352:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129355:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129358:	e8 b5 32 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012935d:	29 c3                	sub    %eax,%ebx
f012935f:	89 d8                	mov    %ebx,%eax
f0129361:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129366:	74 1d                	je     f0129385 <test_kfreelast+0x1a34>
f0129368:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012936c:	75 17                	jne    f0129385 <test_kfreelast+0x1a34>
f012936e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129375:	83 ec 0c             	sub    $0xc,%esp
f0129378:	68 54 9e 13 f0       	push   $0xf0139e54
f012937d:	e8 af 7a fd ff       	call   f0100e31 <cprintf>
f0129382:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129385:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f012938c:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012938f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129395:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129398:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012939f:	eb 0e                	jmp    f01293af <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f01293a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293a4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01293a7:	01 d0                	add    %edx,%eax
f01293a9:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01293ac:	ff 45 f4             	incl   -0xc(%ebp)
f01293af:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01293b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01293b8:	7f e7                	jg     f01293a1 <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01293ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293be:	75 17                	jne    f01293d7 <test_kfreelast+0x1a86>
f01293c0:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f01293c4:	83 ec 08             	sub    $0x8,%esp
f01293c7:	ff 75 f0             	pushl  -0x10(%ebp)
f01293ca:	68 20 9d 13 f0       	push   $0xf0139d20
f01293cf:	e8 5d 7a fd ff       	call   f0100e31 <cprintf>
f01293d4:	83 c4 10             	add    $0x10,%esp
f01293d7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f01293de:	e8 2f 32 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01293e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293e6:	e8 cd ae fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01293eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f01293ee:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01293f4:	83 ec 0c             	sub    $0xc,%esp
f01293f7:	50                   	push   %eax
f01293f8:	e8 b0 e7 fd ff       	call   f0107bad <kfree>
f01293fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129400:	e8 b3 ae fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129405:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129408:	74 1d                	je     f0129427 <test_kfreelast+0x1ad6>
f012940a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012940e:	75 17                	jne    f0129427 <test_kfreelast+0x1ad6>
f0129410:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129417:	83 ec 0c             	sub    $0xc,%esp
f012941a:	68 48 9d 13 f0       	push   $0xf0139d48
f012941f:	e8 0d 7a fd ff       	call   f0100e31 <cprintf>
f0129424:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129427:	e8 e6 31 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012942c:	89 c2                	mov    %eax,%edx
f012942e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129431:	29 c2                	sub    %eax,%edx
f0129433:	89 d0                	mov    %edx,%eax
f0129435:	83 f8 0d             	cmp    $0xd,%eax
f0129438:	74 1d                	je     f0129457 <test_kfreelast+0x1b06>
f012943a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012943e:	75 17                	jne    f0129457 <test_kfreelast+0x1b06>
f0129440:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129447:	83 ec 0c             	sub    $0xc,%esp
f012944a:	68 b4 9d 13 f0       	push   $0xf0139db4
f012944f:	e8 dd 79 fd ff       	call   f0100e31 <cprintf>
f0129454:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129457:	83 ec 0c             	sub    $0xc,%esp
f012945a:	6a 03                	push   $0x3
f012945c:	e8 4c 36 fe ff       	call   f010caad <sys_bypassPageFault>
f0129461:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129464:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012946a:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012946d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129474:	eb 3c                	jmp    f01294b2 <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129476:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129479:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012947c:	01 d0                	add    %edx,%eax
f012947e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129481:	e8 15 36 fe ff       	call   f010ca9b <sys_rcr2>
f0129486:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129489:	8b 55 9c             	mov    -0x64(%ebp),%edx
f012948c:	01 ca                	add    %ecx,%edx
f012948e:	39 d0                	cmp    %edx,%eax
f0129490:	74 1d                	je     f01294af <test_kfreelast+0x1b5e>
f0129492:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129496:	75 17                	jne    f01294af <test_kfreelast+0x1b5e>
f0129498:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012949f:	83 ec 0c             	sub    $0xc,%esp
f01294a2:	68 cc 9e 13 f0       	push   $0xf0139ecc
f01294a7:	e8 85 79 fd ff       	call   f0100e31 <cprintf>
f01294ac:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f01294af:	ff 45 f4             	incl   -0xc(%ebp)
f01294b2:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f01294b9:	7e bb                	jle    f0129476 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01294bb:	83 ec 0c             	sub    $0xc,%esp
f01294be:	6a 00                	push   $0x0
f01294c0:	e8 e8 35 fe ff       	call   f010caad <sys_bypassPageFault>
f01294c5:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f01294c8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01294ce:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f01294d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294d8:	eb 1e                	jmp    f01294f8 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f01294da:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f01294e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01294e3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294e6:	01 c8                	add    %ecx,%eax
f01294e8:	8a 00                	mov    (%eax),%al
f01294ea:	0f be c0             	movsbl %al,%eax
f01294ed:	01 d0                	add    %edx,%eax
f01294ef:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01294f5:	ff 45 f4             	incl   -0xc(%ebp)
f01294f8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01294fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129501:	7f d7                	jg     f01294da <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129503:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129509:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f012950f:	89 d0                	mov    %edx,%eax
f0129511:	01 c0                	add    %eax,%eax
f0129513:	01 d0                	add    %edx,%eax
f0129515:	01 c0                	add    %eax,%eax
f0129517:	01 d0                	add    %edx,%eax
f0129519:	01 c0                	add    %eax,%eax
f012951b:	39 c1                	cmp    %eax,%ecx
f012951d:	74 1d                	je     f012953c <test_kfreelast+0x1beb>
f012951f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129523:	75 17                	jne    f012953c <test_kfreelast+0x1beb>
f0129525:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012952c:	83 ec 0c             	sub    $0xc,%esp
f012952f:	68 98 9e 13 f0       	push   $0xf0139e98
f0129534:	e8 f8 78 fd ff       	call   f0100e31 <cprintf>
f0129539:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012953c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129540:	75 17                	jne    f0129559 <test_kfreelast+0x1c08>
f0129542:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129546:	83 ec 08             	sub    $0x8,%esp
f0129549:	ff 75 f0             	pushl  -0x10(%ebp)
f012954c:	68 20 9d 13 f0       	push   $0xf0139d20
f0129551:	e8 db 78 fd ff       	call   f0100e31 <cprintf>
f0129556:	83 c4 10             	add    $0x10,%esp
f0129559:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129560:	e8 ad 30 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129565:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129568:	e8 4b ad fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012956d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f0129570:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129576:	83 ec 0c             	sub    $0xc,%esp
f0129579:	50                   	push   %eax
f012957a:	e8 2e e6 fd ff       	call   f0107bad <kfree>
f012957f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129582:	e8 31 ad fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129587:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012958a:	74 1d                	je     f01295a9 <test_kfreelast+0x1c58>
f012958c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129590:	75 17                	jne    f01295a9 <test_kfreelast+0x1c58>
f0129592:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129599:	83 ec 0c             	sub    $0xc,%esp
f012959c:	68 48 9d 13 f0       	push   $0xf0139d48
f01295a1:	e8 8b 78 fd ff       	call   f0100e31 <cprintf>
f01295a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01295a9:	e8 64 30 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01295ae:	89 c2                	mov    %eax,%edx
f01295b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01295b3:	29 c2                	sub    %eax,%edx
f01295b5:	89 d0                	mov    %edx,%eax
f01295b7:	83 f8 02             	cmp    $0x2,%eax
f01295ba:	74 1d                	je     f01295d9 <test_kfreelast+0x1c88>
f01295bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295c0:	75 17                	jne    f01295d9 <test_kfreelast+0x1c88>
f01295c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295c9:	83 ec 0c             	sub    $0xc,%esp
f01295cc:	68 b4 9d 13 f0       	push   $0xf0139db4
f01295d1:	e8 5b 78 fd ff       	call   f0100e31 <cprintf>
f01295d6:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01295d9:	e8 34 30 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01295de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295e1:	e8 d2 ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01295e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f01295e9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01295ef:	83 ec 0c             	sub    $0xc,%esp
f01295f2:	50                   	push   %eax
f01295f3:	e8 b5 e5 fd ff       	call   f0107bad <kfree>
f01295f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01295fb:	e8 b8 ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129600:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129603:	74 1d                	je     f0129622 <test_kfreelast+0x1cd1>
f0129605:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129609:	75 17                	jne    f0129622 <test_kfreelast+0x1cd1>
f012960b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129612:	83 ec 0c             	sub    $0xc,%esp
f0129615:	68 48 9d 13 f0       	push   $0xf0139d48
f012961a:	e8 12 78 fd ff       	call   f0100e31 <cprintf>
f012961f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129622:	e8 eb 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129627:	89 c2                	mov    %eax,%edx
f0129629:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012962c:	29 c2                	sub    %eax,%edx
f012962e:	89 d0                	mov    %edx,%eax
f0129630:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129635:	74 1d                	je     f0129654 <test_kfreelast+0x1d03>
f0129637:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012963b:	75 17                	jne    f0129654 <test_kfreelast+0x1d03>
f012963d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129644:	83 ec 0c             	sub    $0xc,%esp
f0129647:	68 b4 9d 13 f0       	push   $0xf0139db4
f012964c:	e8 e0 77 fd ff       	call   f0100e31 <cprintf>
f0129651:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129654:	e8 b9 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129659:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012965c:	e8 57 ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129661:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129664:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012966a:	83 ec 0c             	sub    $0xc,%esp
f012966d:	50                   	push   %eax
f012966e:	e8 3a e5 fd ff       	call   f0107bad <kfree>
f0129673:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129676:	e8 3d ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012967b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012967e:	74 1d                	je     f012969d <test_kfreelast+0x1d4c>
f0129680:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129684:	75 17                	jne    f012969d <test_kfreelast+0x1d4c>
f0129686:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012968d:	83 ec 0c             	sub    $0xc,%esp
f0129690:	68 48 9d 13 f0       	push   $0xf0139d48
f0129695:	e8 97 77 fd ff       	call   f0100e31 <cprintf>
f012969a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012969d:	e8 70 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01296a2:	89 c2                	mov    %eax,%edx
f01296a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01296a7:	29 c2                	sub    %eax,%edx
f01296a9:	89 d0                	mov    %edx,%eax
f01296ab:	3d 00 03 00 00       	cmp    $0x300,%eax
f01296b0:	74 1d                	je     f01296cf <test_kfreelast+0x1d7e>
f01296b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296b6:	75 17                	jne    f01296cf <test_kfreelast+0x1d7e>
f01296b8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296bf:	83 ec 0c             	sub    $0xc,%esp
f01296c2:	68 b4 9d 13 f0       	push   $0xf0139db4
f01296c7:	e8 65 77 fd ff       	call   f0100e31 <cprintf>
f01296cc:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01296cf:	e8 3e 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01296d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296d7:	e8 dc ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01296dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f01296df:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01296e5:	83 ec 0c             	sub    $0xc,%esp
f01296e8:	50                   	push   %eax
f01296e9:	e8 bf e4 fd ff       	call   f0107bad <kfree>
f01296ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01296f1:	e8 c2 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01296f6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01296f9:	74 1d                	je     f0129718 <test_kfreelast+0x1dc7>
f01296fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296ff:	75 17                	jne    f0129718 <test_kfreelast+0x1dc7>
f0129701:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129708:	83 ec 0c             	sub    $0xc,%esp
f012970b:	68 48 9d 13 f0       	push   $0xf0139d48
f0129710:	e8 1c 77 fd ff       	call   f0100e31 <cprintf>
f0129715:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129718:	e8 f5 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012971d:	89 c2                	mov    %eax,%edx
f012971f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129722:	29 c2                	sub    %eax,%edx
f0129724:	89 d0                	mov    %edx,%eax
f0129726:	83 f8 01             	cmp    $0x1,%eax
f0129729:	74 1d                	je     f0129748 <test_kfreelast+0x1df7>
f012972b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012972f:	75 17                	jne    f0129748 <test_kfreelast+0x1df7>
f0129731:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129738:	83 ec 0c             	sub    $0xc,%esp
f012973b:	68 b4 9d 13 f0       	push   $0xf0139db4
f0129740:	e8 ec 76 fd ff       	call   f0100e31 <cprintf>
f0129745:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129748:	e8 c5 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012974d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129750:	e8 63 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129755:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129758:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012975e:	83 ec 0c             	sub    $0xc,%esp
f0129761:	50                   	push   %eax
f0129762:	e8 46 e4 fd ff       	call   f0107bad <kfree>
f0129767:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012976a:	e8 49 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012976f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129772:	74 1d                	je     f0129791 <test_kfreelast+0x1e40>
f0129774:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129778:	75 17                	jne    f0129791 <test_kfreelast+0x1e40>
f012977a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129781:	83 ec 0c             	sub    $0xc,%esp
f0129784:	68 48 9d 13 f0       	push   $0xf0139d48
f0129789:	e8 a3 76 fd ff       	call   f0100e31 <cprintf>
f012978e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129791:	e8 7c 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129796:	89 c2                	mov    %eax,%edx
f0129798:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012979b:	29 c2                	sub    %eax,%edx
f012979d:	89 d0                	mov    %edx,%eax
f012979f:	83 f8 01             	cmp    $0x1,%eax
f01297a2:	74 1d                	je     f01297c1 <test_kfreelast+0x1e70>
f01297a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297a8:	75 17                	jne    f01297c1 <test_kfreelast+0x1e70>
f01297aa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297b1:	83 ec 0c             	sub    $0xc,%esp
f01297b4:	68 b4 9d 13 f0       	push   $0xf0139db4
f01297b9:	e8 73 76 fd ff       	call   f0100e31 <cprintf>
f01297be:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f01297c1:	e8 4c 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f01297c6:	89 c2                	mov    %eax,%edx
f01297c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01297cb:	39 c2                	cmp    %eax,%edx
f01297cd:	74 1d                	je     f01297ec <test_kfreelast+0x1e9b>
f01297cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297d3:	75 17                	jne    f01297ec <test_kfreelast+0x1e9b>
f01297d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297dc:	83 ec 0c             	sub    $0xc,%esp
f01297df:	68 14 9f 13 f0       	push   $0xf0139f14
f01297e4:	e8 48 76 fd ff       	call   f0100e31 <cprintf>
f01297e9:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01297ec:	83 ec 0c             	sub    $0xc,%esp
f01297ef:	6a 03                	push   $0x3
f01297f1:	e8 b7 32 fe ff       	call   f010caad <sys_bypassPageFault>
f01297f6:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f01297f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129800:	e9 8e 00 00 00       	jmp    f0129893 <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129808:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f012980f:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129812:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129815:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129818:	e8 7e 32 fe ff       	call   f010ca9b <sys_rcr2>
f012981d:	89 c2                	mov    %eax,%edx
f012981f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129822:	39 c2                	cmp    %eax,%edx
f0129824:	74 1d                	je     f0129843 <test_kfreelast+0x1ef2>
f0129826:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012982a:	75 17                	jne    f0129843 <test_kfreelast+0x1ef2>
f012982c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129833:	83 ec 0c             	sub    $0xc,%esp
f0129836:	68 cc 9e 13 f0       	push   $0xf0139ecc
f012983b:	e8 f1 75 fd ff       	call   f0100e31 <cprintf>
f0129840:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129843:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129846:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f012984d:	89 c2                	mov    %eax,%edx
f012984f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129852:	01 d0                	add    %edx,%eax
f0129854:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129857:	e8 3f 32 fe ff       	call   f010ca9b <sys_rcr2>
f012985c:	89 c2                	mov    %eax,%edx
f012985e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129861:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129868:	89 c1                	mov    %eax,%ecx
f012986a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012986d:	01 c8                	add    %ecx,%eax
f012986f:	39 c2                	cmp    %eax,%edx
f0129871:	74 1d                	je     f0129890 <test_kfreelast+0x1f3f>
f0129873:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129877:	75 17                	jne    f0129890 <test_kfreelast+0x1f3f>
f0129879:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129880:	83 ec 0c             	sub    $0xc,%esp
f0129883:	68 cc 9e 13 f0       	push   $0xf0139ecc
f0129888:	e8 a4 75 fd ff       	call   f0100e31 <cprintf>
f012988d:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129890:	ff 45 f4             	incl   -0xc(%ebp)
f0129893:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129897:	0f 8e 68 ff ff ff    	jle    f0129805 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012989d:	83 ec 0c             	sub    $0xc,%esp
f01298a0:	6a 00                	push   $0x0
f01298a2:	e8 06 32 fe ff       	call   f010caad <sys_bypassPageFault>
f01298a7:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01298aa:	e8 63 2d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01298af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298b2:	e8 01 aa fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01298b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f01298ba:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01298c0:	83 ec 0c             	sub    $0xc,%esp
f01298c3:	50                   	push   %eax
f01298c4:	e8 e4 e2 fd ff       	call   f0107bad <kfree>
f01298c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01298cc:	e8 e7 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01298d1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298d4:	74 1d                	je     f01298f3 <test_kfreelast+0x1fa2>
f01298d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298da:	75 17                	jne    f01298f3 <test_kfreelast+0x1fa2>
f01298dc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01298e3:	83 ec 0c             	sub    $0xc,%esp
f01298e6:	68 48 9d 13 f0       	push   $0xf0139d48
f01298eb:	e8 41 75 fd ff       	call   f0100e31 <cprintf>
f01298f0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f01298f3:	e8 1a 2d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01298f8:	89 c2                	mov    %eax,%edx
f01298fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01298fd:	39 c2                	cmp    %eax,%edx
f01298ff:	74 1d                	je     f012991e <test_kfreelast+0x1fcd>
f0129901:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129905:	75 17                	jne    f012991e <test_kfreelast+0x1fcd>
f0129907:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012990e:	83 ec 0c             	sub    $0xc,%esp
f0129911:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0129916:	e8 16 75 fd ff       	call   f0100e31 <cprintf>
f012991b:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012991e:	e8 ef 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129923:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129926:	e8 8d a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012992b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012992e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129934:	83 ec 0c             	sub    $0xc,%esp
f0129937:	50                   	push   %eax
f0129938:	e8 70 e2 fd ff       	call   f0107bad <kfree>
f012993d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129940:	e8 73 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129945:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129948:	74 1d                	je     f0129967 <test_kfreelast+0x2016>
f012994a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012994e:	75 17                	jne    f0129967 <test_kfreelast+0x2016>
f0129950:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129957:	83 ec 0c             	sub    $0xc,%esp
f012995a:	68 48 9d 13 f0       	push   $0xf0139d48
f012995f:	e8 cd 74 fd ff       	call   f0100e31 <cprintf>
f0129964:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129967:	e8 a6 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012996c:	89 c2                	mov    %eax,%edx
f012996e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129971:	39 c2                	cmp    %eax,%edx
f0129973:	74 1d                	je     f0129992 <test_kfreelast+0x2041>
f0129975:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129979:	75 17                	jne    f0129992 <test_kfreelast+0x2041>
f012997b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129982:	83 ec 0c             	sub    $0xc,%esp
f0129985:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012998a:	e8 a2 74 fd ff       	call   f0100e31 <cprintf>
f012998f:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129992:	e8 7b 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129997:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012999a:	e8 19 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012999f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f01299a2:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01299a8:	83 ec 0c             	sub    $0xc,%esp
f01299ab:	50                   	push   %eax
f01299ac:	e8 fc e1 fd ff       	call   f0107bad <kfree>
f01299b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299b4:	e8 ff a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01299b9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299bc:	74 1d                	je     f01299db <test_kfreelast+0x208a>
f01299be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299c2:	75 17                	jne    f01299db <test_kfreelast+0x208a>
f01299c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299cb:	83 ec 0c             	sub    $0xc,%esp
f01299ce:	68 48 9d 13 f0       	push   $0xf0139d48
f01299d3:	e8 59 74 fd ff       	call   f0100e31 <cprintf>
f01299d8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f01299db:	e8 32 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01299e0:	89 c2                	mov    %eax,%edx
f01299e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299e5:	39 c2                	cmp    %eax,%edx
f01299e7:	74 1d                	je     f0129a06 <test_kfreelast+0x20b5>
f01299e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299ed:	75 17                	jne    f0129a06 <test_kfreelast+0x20b5>
f01299ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299f6:	83 ec 0c             	sub    $0xc,%esp
f01299f9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01299fe:	e8 2e 74 fd ff       	call   f0100e31 <cprintf>
f0129a03:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a06:	e8 07 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129a0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a0e:	e8 a5 a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129a13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129a16:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129a1c:	83 ec 0c             	sub    $0xc,%esp
f0129a1f:	50                   	push   %eax
f0129a20:	e8 88 e1 fd ff       	call   f0107bad <kfree>
f0129a25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a28:	e8 8b a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129a2d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a30:	74 1d                	je     f0129a4f <test_kfreelast+0x20fe>
f0129a32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a36:	75 17                	jne    f0129a4f <test_kfreelast+0x20fe>
f0129a38:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a3f:	83 ec 0c             	sub    $0xc,%esp
f0129a42:	68 48 9d 13 f0       	push   $0xf0139d48
f0129a47:	e8 e5 73 fd ff       	call   f0100e31 <cprintf>
f0129a4c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129a4f:	e8 be 2b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129a54:	89 c2                	mov    %eax,%edx
f0129a56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a59:	39 c2                	cmp    %eax,%edx
f0129a5b:	74 1d                	je     f0129a7a <test_kfreelast+0x2129>
f0129a5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a61:	75 17                	jne    f0129a7a <test_kfreelast+0x2129>
f0129a63:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a6a:	83 ec 0c             	sub    $0xc,%esp
f0129a6d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0129a72:	e8 ba 73 fd ff       	call   f0100e31 <cprintf>
f0129a77:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129a7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a7e:	75 17                	jne    f0129a97 <test_kfreelast+0x2146>
f0129a80:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129a84:	83 ec 08             	sub    $0x8,%esp
f0129a87:	ff 75 f0             	pushl  -0x10(%ebp)
f0129a8a:	68 20 9d 13 f0       	push   $0xf0139d20
f0129a8f:	e8 9d 73 fd ff       	call   f0100e31 <cprintf>
f0129a94:	83 c4 10             	add    $0x10,%esp
f0129a97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129a9e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129aa3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129aa6:	5b                   	pop    %ebx
f0129aa7:	5f                   	pop    %edi
f0129aa8:	5d                   	pop    %ebp
f0129aa9:	c3                   	ret    

f0129aaa <test_krealloc>:

int test_krealloc() {
f0129aaa:	55                   	push   %ebp
f0129aab:	89 e5                	mov    %esp,%ebp
f0129aad:	57                   	push   %edi
f0129aae:	53                   	push   %ebx
f0129aaf:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129ab5:	83 ec 0c             	sub    $0xc,%esp
f0129ab8:	68 30 8c 13 f0       	push   $0xf0138c30
f0129abd:	e8 6f 73 fd ff       	call   f0100e31 <cprintf>
f0129ac2:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129ac5:	83 ec 0c             	sub    $0xc,%esp
f0129ac8:	68 60 8c 13 f0       	push   $0xf0138c60
f0129acd:	e8 5f 73 fd ff       	call   f0100e31 <cprintf>
f0129ad2:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129ad5:	83 ec 0c             	sub    $0xc,%esp
f0129ad8:	68 30 8c 13 f0       	push   $0xf0138c30
f0129add:	e8 4f 73 fd ff       	call   f0100e31 <cprintf>
f0129ae2:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129ae5:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129ae9:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129aed:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129af3:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129af9:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129b00:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129b07:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129b0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b12:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b17:	89 d7                	mov    %edx,%edi
f0129b19:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129b1b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129b22:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129b28:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b2d:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b32:	89 d7                	mov    %edx,%edi
f0129b34:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129b36:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129b3c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b41:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b46:	89 d7                	mov    %edx,%edi
f0129b48:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129b4a:	e8 c3 2a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129b4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129b52:	83 ec 08             	sub    $0x8,%esp
f0129b55:	68 00 fc 0f 00       	push   $0xffc00
f0129b5a:	6a 00                	push   $0x0
f0129b5c:	e8 e8 e0 fd ff       	call   f0107c49 <krealloc>
f0129b61:	83 c4 10             	add    $0x10,%esp
f0129b64:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129b6a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129b70:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129b75:	77 17                	ja     f0129b8e <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129b77:	83 ec 04             	sub    $0x4,%esp
f0129b7a:	68 94 9f 13 f0       	push   $0xf0139f94
f0129b7f:	68 e2 0e 00 00       	push   $0xee2
f0129b84:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129b89:	e8 22 66 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129b8e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129b94:	89 c1                	mov    %eax,%ecx
f0129b96:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129b9d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129ba2:	0f b6 d0             	movzbl %al,%edx
f0129ba5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129ba8:	01 d0                	add    %edx,%eax
f0129baa:	48                   	dec    %eax
f0129bab:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129bae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129bb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bb6:	f7 75 b4             	divl   -0x4c(%ebp)
f0129bb9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129bbc:	29 d0                	sub    %edx,%eax
f0129bbe:	89 c3                	mov    %eax,%ebx
f0129bc0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129bc7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129bcc:	0f b6 c0             	movzbl %al,%eax
f0129bcf:	c1 e0 04             	shl    $0x4,%eax
f0129bd2:	89 c2                	mov    %eax,%edx
f0129bd4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129bd7:	01 d0                	add    %edx,%eax
f0129bd9:	48                   	dec    %eax
f0129bda:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129bdd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129be0:	ba 00 00 00 00       	mov    $0x0,%edx
f0129be5:	f7 75 ac             	divl   -0x54(%ebp)
f0129be8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129beb:	29 d0                	sub    %edx,%eax
f0129bed:	01 d8                	add    %ebx,%eax
f0129bef:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129bf4:	39 c1                	cmp    %eax,%ecx
f0129bf6:	74 17                	je     f0129c0f <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129bf8:	83 ec 04             	sub    $0x4,%esp
f0129bfb:	68 d0 9f 13 f0       	push   $0xf0139fd0
f0129c00:	68 e4 0e 00 00       	push   $0xee4
f0129c05:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129c0a:	e8 a1 65 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129c0f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129c12:	e8 fb 29 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129c17:	29 c3                	sub    %eax,%ebx
f0129c19:	89 d8                	mov    %ebx,%eax
f0129c1b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129c20:	74 17                	je     f0129c39 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f0129c22:	83 ec 04             	sub    $0x4,%esp
f0129c25:	68 02 a0 13 f0       	push   $0xf013a002
f0129c2a:	68 e7 0e 00 00       	push   $0xee7
f0129c2f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129c34:	e8 77 65 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129c39:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f0129c40:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129c43:	e8 ca 29 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129c48:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f0129c4b:	83 ec 08             	sub    $0x8,%esp
f0129c4e:	68 00 fc 0f 00       	push   $0xffc00
f0129c53:	6a 00                	push   $0x0
f0129c55:	e8 ef df fd ff       	call   f0107c49 <krealloc>
f0129c5a:	83 c4 10             	add    $0x10,%esp
f0129c5d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f0129c63:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129c69:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f0129c6e:	77 17                	ja     f0129c87 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129c70:	83 ec 04             	sub    $0x4,%esp
f0129c73:	68 94 9f 13 f0       	push   $0xf0139f94
f0129c78:	68 ef 0e 00 00       	push   $0xeef
f0129c7d:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129c82:	e8 29 65 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f0129c87:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129c8d:	89 c1                	mov    %eax,%ecx
f0129c8f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129c96:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129c9b:	0f b6 d0             	movzbl %al,%edx
f0129c9e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129ca1:	01 d0                	add    %edx,%eax
f0129ca3:	48                   	dec    %eax
f0129ca4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129ca7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129caa:	ba 00 00 00 00       	mov    $0x0,%edx
f0129caf:	f7 75 a4             	divl   -0x5c(%ebp)
f0129cb2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129cb5:	29 d0                	sub    %edx,%eax
f0129cb7:	89 c3                	mov    %eax,%ebx
f0129cb9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129cc0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129cc5:	0f b6 c0             	movzbl %al,%eax
f0129cc8:	c1 e0 04             	shl    $0x4,%eax
f0129ccb:	89 c2                	mov    %eax,%edx
f0129ccd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129cd0:	01 d0                	add    %edx,%eax
f0129cd2:	48                   	dec    %eax
f0129cd3:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129cd6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129cd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cde:	f7 75 9c             	divl   -0x64(%ebp)
f0129ce1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129ce4:	29 d0                	sub    %edx,%eax
f0129ce6:	01 d8                	add    %ebx,%eax
f0129ce8:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0129ced:	39 c1                	cmp    %eax,%ecx
f0129cef:	74 17                	je     f0129d08 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f0129cf1:	83 ec 04             	sub    $0x4,%esp
f0129cf4:	68 d0 9f 13 f0       	push   $0xf0139fd0
f0129cf9:	68 f1 0e 00 00       	push   $0xef1
f0129cfe:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129d03:	e8 a8 64 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129d08:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129d0b:	e8 02 29 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129d10:	29 c3                	sub    %eax,%ebx
f0129d12:	89 d8                	mov    %ebx,%eax
f0129d14:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129d19:	74 17                	je     f0129d32 <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f0129d1b:	83 ec 04             	sub    $0x4,%esp
f0129d1e:	68 02 a0 13 f0       	push   $0xf013a002
f0129d23:	68 f3 0e 00 00       	push   $0xef3
f0129d28:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129d2d:	e8 7e 64 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129d32:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f0129d39:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129d3c:	e8 d1 28 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129d41:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f0129d44:	83 ec 08             	sub    $0x8,%esp
f0129d47:	68 00 fc 0f 00       	push   $0xffc00
f0129d4c:	6a 00                	push   $0x0
f0129d4e:	e8 f6 de fd ff       	call   f0107c49 <krealloc>
f0129d53:	83 c4 10             	add    $0x10,%esp
f0129d56:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f0129d5c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129d62:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f0129d67:	77 17                	ja     f0129d80 <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129d69:	83 ec 04             	sub    $0x4,%esp
f0129d6c:	68 94 9f 13 f0       	push   $0xf0139f94
f0129d71:	68 fb 0e 00 00       	push   $0xefb
f0129d76:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129d7b:	e8 30 64 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f0129d80:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129d86:	89 c1                	mov    %eax,%ecx
f0129d88:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129d8f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129d94:	0f b6 d0             	movzbl %al,%edx
f0129d97:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129d9a:	01 d0                	add    %edx,%eax
f0129d9c:	48                   	dec    %eax
f0129d9d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129da0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129da8:	f7 75 94             	divl   -0x6c(%ebp)
f0129dab:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129dae:	29 d0                	sub    %edx,%eax
f0129db0:	89 c3                	mov    %eax,%ebx
f0129db2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129db9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129dbe:	0f b6 c0             	movzbl %al,%eax
f0129dc1:	c1 e0 04             	shl    $0x4,%eax
f0129dc4:	89 c2                	mov    %eax,%edx
f0129dc6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129dc9:	01 d0                	add    %edx,%eax
f0129dcb:	48                   	dec    %eax
f0129dcc:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129dcf:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129dd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dd7:	f7 75 8c             	divl   -0x74(%ebp)
f0129dda:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129ddd:	29 d0                	sub    %edx,%eax
f0129ddf:	01 d8                	add    %ebx,%eax
f0129de1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129de6:	39 c1                	cmp    %eax,%ecx
f0129de8:	74 17                	je     f0129e01 <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f0129dea:	83 ec 04             	sub    $0x4,%esp
f0129ded:	68 d0 9f 13 f0       	push   $0xf0139fd0
f0129df2:	68 fd 0e 00 00       	push   $0xefd
f0129df7:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129dfc:	e8 af 63 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129e01:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129e04:	e8 09 28 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129e09:	29 c3                	sub    %eax,%ebx
f0129e0b:	89 d8                	mov    %ebx,%eax
f0129e0d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129e12:	74 17                	je     f0129e2b <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f0129e14:	83 ec 04             	sub    $0x4,%esp
f0129e17:	68 02 a0 13 f0       	push   $0xf013a002
f0129e1c:	68 ff 0e 00 00       	push   $0xeff
f0129e21:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129e26:	e8 85 63 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f0129e2b:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f0129e32:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129e35:	e8 d8 27 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129e3a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f0129e3d:	83 ec 08             	sub    $0x8,%esp
f0129e40:	68 00 fc 0f 00       	push   $0xffc00
f0129e45:	6a 00                	push   $0x0
f0129e47:	e8 fd dd fd ff       	call   f0107c49 <krealloc>
f0129e4c:	83 c4 10             	add    $0x10,%esp
f0129e4f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f0129e55:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129e5b:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f0129e60:	77 17                	ja     f0129e79 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129e62:	83 ec 04             	sub    $0x4,%esp
f0129e65:	68 94 9f 13 f0       	push   $0xf0139f94
f0129e6a:	68 06 0f 00 00       	push   $0xf06
f0129e6f:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129e74:	e8 37 63 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f0129e79:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129e7f:	89 c1                	mov    %eax,%ecx
f0129e81:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0129e88:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129e8d:	0f b6 d0             	movzbl %al,%edx
f0129e90:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e93:	01 d0                	add    %edx,%eax
f0129e95:	48                   	dec    %eax
f0129e96:	89 45 80             	mov    %eax,-0x80(%ebp)
f0129e99:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129e9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ea1:	f7 75 84             	divl   -0x7c(%ebp)
f0129ea4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129ea7:	29 d0                	sub    %edx,%eax
f0129ea9:	89 c3                	mov    %eax,%ebx
f0129eab:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0129eb2:	10 00 00 
f0129eb5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129eba:	0f b6 c0             	movzbl %al,%eax
f0129ebd:	c1 e0 04             	shl    $0x4,%eax
f0129ec0:	89 c2                	mov    %eax,%edx
f0129ec2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129ec8:	01 d0                	add    %edx,%eax
f0129eca:	48                   	dec    %eax
f0129ecb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0129ed1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129ed7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129edc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0129ee2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129ee8:	29 d0                	sub    %edx,%eax
f0129eea:	01 d8                	add    %ebx,%eax
f0129eec:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0129ef1:	39 c1                	cmp    %eax,%ecx
f0129ef3:	74 17                	je     f0129f0c <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f0129ef5:	83 ec 04             	sub    $0x4,%esp
f0129ef8:	68 d0 9f 13 f0       	push   $0xf0139fd0
f0129efd:	68 08 0f 00 00       	push   $0xf08
f0129f02:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129f07:	e8 a4 62 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129f0c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129f0f:	e8 fe 26 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129f14:	29 c3                	sub    %eax,%ebx
f0129f16:	89 d8                	mov    %ebx,%eax
f0129f18:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129f1d:	74 17                	je     f0129f36 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f0129f1f:	83 ec 04             	sub    $0x4,%esp
f0129f22:	68 02 a0 13 f0       	push   $0xf013a002
f0129f27:	68 0a 0f 00 00       	push   $0xf0a
f0129f2c:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129f31:	e8 7a 62 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f0129f36:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f0129f3d:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f0129f40:	e8 cd 26 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129f45:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f0129f48:	83 ec 08             	sub    $0x8,%esp
f0129f4b:	68 00 fc 1f 00       	push   $0x1ffc00
f0129f50:	6a 00                	push   $0x0
f0129f52:	e8 f2 dc fd ff       	call   f0107c49 <krealloc>
f0129f57:	83 c4 10             	add    $0x10,%esp
f0129f5a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f0129f60:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129f66:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f0129f6b:	77 17                	ja     f0129f84 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129f6d:	83 ec 04             	sub    $0x4,%esp
f0129f70:	68 94 9f 13 f0       	push   $0xf0139f94
f0129f75:	68 11 0f 00 00       	push   $0xf11
f0129f7a:	68 ee 8c 13 f0       	push   $0xf0138cee
f0129f7f:	e8 2c 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f0129f84:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129f8a:	89 c1                	mov    %eax,%ecx
f0129f8c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0129f93:	10 00 00 
f0129f96:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129f9b:	0f b6 d0             	movzbl %al,%edx
f0129f9e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129fa4:	01 d0                	add    %edx,%eax
f0129fa6:	48                   	dec    %eax
f0129fa7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0129fad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129fb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fb8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0129fbe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129fc4:	29 d0                	sub    %edx,%eax
f0129fc6:	89 c3                	mov    %eax,%ebx
f0129fc8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0129fcf:	10 00 00 
f0129fd2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129fd7:	0f b6 c0             	movzbl %al,%eax
f0129fda:	c1 e0 04             	shl    $0x4,%eax
f0129fdd:	89 c2                	mov    %eax,%edx
f0129fdf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129fe5:	01 d0                	add    %edx,%eax
f0129fe7:	48                   	dec    %eax
f0129fe8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0129fee:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129ff4:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ff9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0129fff:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a005:	29 d0                	sub    %edx,%eax
f012a007:	01 d8                	add    %ebx,%eax
f012a009:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a00e:	39 c1                	cmp    %eax,%ecx
f012a010:	74 17                	je     f012a029 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a012:	83 ec 04             	sub    $0x4,%esp
f012a015:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012a01a:	68 13 0f 00 00       	push   $0xf13
f012a01f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a024:	e8 87 61 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a029:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a02c:	e8 e1 25 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a031:	29 c3                	sub    %eax,%ebx
f012a033:	89 d8                	mov    %ebx,%eax
f012a035:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a03a:	74 17                	je     f012a053 <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a03c:	83 ec 04             	sub    $0x4,%esp
f012a03f:	68 02 a0 13 f0       	push   $0xf013a002
f012a044:	68 15 0f 00 00       	push   $0xf15
f012a049:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a04e:	e8 5d 61 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a053:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a05a:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a05d:	e8 b0 25 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a062:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a065:	83 ec 08             	sub    $0x8,%esp
f012a068:	68 00 fc 1f 00       	push   $0x1ffc00
f012a06d:	6a 00                	push   $0x0
f012a06f:	e8 d5 db fd ff       	call   f0107c49 <krealloc>
f012a074:	83 c4 10             	add    $0x10,%esp
f012a077:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a07d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a083:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a088:	77 17                	ja     f012a0a1 <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a08a:	83 ec 04             	sub    $0x4,%esp
f012a08d:	68 94 9f 13 f0       	push   $0xf0139f94
f012a092:	68 1c 0f 00 00       	push   $0xf1c
f012a097:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a09c:	e8 0f 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a0a1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a0a7:	89 c1                	mov    %eax,%ecx
f012a0a9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a0b0:	10 00 00 
f012a0b3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a0b8:	0f b6 d0             	movzbl %al,%edx
f012a0bb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a0c1:	01 d0                	add    %edx,%eax
f012a0c3:	48                   	dec    %eax
f012a0c4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a0ca:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a0d0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0d5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a0db:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a0e1:	29 d0                	sub    %edx,%eax
f012a0e3:	89 c3                	mov    %eax,%ebx
f012a0e5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a0ec:	10 00 00 
f012a0ef:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a0f4:	0f b6 c0             	movzbl %al,%eax
f012a0f7:	c1 e0 04             	shl    $0x4,%eax
f012a0fa:	89 c2                	mov    %eax,%edx
f012a0fc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a102:	01 d0                	add    %edx,%eax
f012a104:	48                   	dec    %eax
f012a105:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a10b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a111:	ba 00 00 00 00       	mov    $0x0,%edx
f012a116:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a11c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a122:	29 d0                	sub    %edx,%eax
f012a124:	01 d8                	add    %ebx,%eax
f012a126:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a12b:	39 c1                	cmp    %eax,%ecx
f012a12d:	74 17                	je     f012a146 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a12f:	83 ec 04             	sub    $0x4,%esp
f012a132:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012a137:	68 1e 0f 00 00       	push   $0xf1e
f012a13c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a141:	e8 6a 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a146:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a149:	e8 c4 24 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a14e:	29 c3                	sub    %eax,%ebx
f012a150:	89 d8                	mov    %ebx,%eax
f012a152:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a157:	74 17                	je     f012a170 <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a159:	83 ec 04             	sub    $0x4,%esp
f012a15c:	68 02 a0 13 f0       	push   $0xf013a002
f012a161:	68 20 0f 00 00       	push   $0xf20
f012a166:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a16b:	e8 40 60 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a170:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a177:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a17a:	e8 93 24 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a17f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a182:	83 ec 08             	sub    $0x8,%esp
f012a185:	68 00 fc 2f 00       	push   $0x2ffc00
f012a18a:	6a 00                	push   $0x0
f012a18c:	e8 b8 da fd ff       	call   f0107c49 <krealloc>
f012a191:	83 c4 10             	add    $0x10,%esp
f012a194:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a19a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a1a0:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a1a5:	77 17                	ja     f012a1be <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a1a7:	83 ec 04             	sub    $0x4,%esp
f012a1aa:	68 94 9f 13 f0       	push   $0xf0139f94
f012a1af:	68 27 0f 00 00       	push   $0xf27
f012a1b4:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a1b9:	e8 f2 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a1be:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a1c4:	89 c1                	mov    %eax,%ecx
f012a1c6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a1cd:	10 00 00 
f012a1d0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a1d5:	0f b6 d0             	movzbl %al,%edx
f012a1d8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a1de:	01 d0                	add    %edx,%eax
f012a1e0:	48                   	dec    %eax
f012a1e1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a1e7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a1ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1f2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a1f8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a1fe:	29 d0                	sub    %edx,%eax
f012a200:	89 c3                	mov    %eax,%ebx
f012a202:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a209:	10 00 00 
f012a20c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a211:	0f b6 c0             	movzbl %al,%eax
f012a214:	c1 e0 04             	shl    $0x4,%eax
f012a217:	89 c2                	mov    %eax,%edx
f012a219:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a21f:	01 d0                	add    %edx,%eax
f012a221:	48                   	dec    %eax
f012a222:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a228:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a22e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a233:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a239:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a23f:	29 d0                	sub    %edx,%eax
f012a241:	01 d8                	add    %ebx,%eax
f012a243:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a248:	39 c1                	cmp    %eax,%ecx
f012a24a:	74 17                	je     f012a263 <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a24c:	83 ec 04             	sub    $0x4,%esp
f012a24f:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012a254:	68 29 0f 00 00       	push   $0xf29
f012a259:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a25e:	e8 4d 5f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a263:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a266:	e8 a7 23 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a26b:	29 c3                	sub    %eax,%ebx
f012a26d:	89 d8                	mov    %ebx,%eax
f012a26f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a274:	74 17                	je     f012a28d <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a276:	83 ec 04             	sub    $0x4,%esp
f012a279:	68 38 91 13 f0       	push   $0xf0139138
f012a27e:	68 2b 0f 00 00       	push   $0xf2b
f012a283:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a288:	e8 23 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a28d:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a294:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a297:	e8 76 23 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a29c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a29f:	83 ec 08             	sub    $0x8,%esp
f012a2a2:	68 00 fc 2f 00       	push   $0x2ffc00
f012a2a7:	6a 00                	push   $0x0
f012a2a9:	e8 9b d9 fd ff       	call   f0107c49 <krealloc>
f012a2ae:	83 c4 10             	add    $0x10,%esp
f012a2b1:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a2b7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a2bd:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a2c2:	77 17                	ja     f012a2db <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a2c4:	83 ec 04             	sub    $0x4,%esp
f012a2c7:	68 94 9f 13 f0       	push   $0xf0139f94
f012a2cc:	68 32 0f 00 00       	push   $0xf32
f012a2d1:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a2d6:	e8 d5 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a2db:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a2e1:	89 c1                	mov    %eax,%ecx
f012a2e3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a2ea:	10 00 00 
f012a2ed:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a2f2:	0f b6 d0             	movzbl %al,%edx
f012a2f5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a2fb:	01 d0                	add    %edx,%eax
f012a2fd:	48                   	dec    %eax
f012a2fe:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a304:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a30a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a30f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a315:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a31b:	29 d0                	sub    %edx,%eax
f012a31d:	89 c3                	mov    %eax,%ebx
f012a31f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a326:	10 00 00 
f012a329:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a32e:	0f b6 c0             	movzbl %al,%eax
f012a331:	c1 e0 04             	shl    $0x4,%eax
f012a334:	89 c2                	mov    %eax,%edx
f012a336:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a33c:	01 d0                	add    %edx,%eax
f012a33e:	48                   	dec    %eax
f012a33f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a345:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a34b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a350:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a356:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a35c:	29 d0                	sub    %edx,%eax
f012a35e:	01 d8                	add    %ebx,%eax
f012a360:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a365:	39 c1                	cmp    %eax,%ecx
f012a367:	74 17                	je     f012a380 <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a369:	83 ec 04             	sub    $0x4,%esp
f012a36c:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012a371:	68 34 0f 00 00       	push   $0xf34
f012a376:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a37b:	e8 30 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a380:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a383:	e8 8a 22 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a388:	29 c3                	sub    %eax,%ebx
f012a38a:	89 d8                	mov    %ebx,%eax
f012a38c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a391:	74 17                	je     f012a3aa <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a393:	83 ec 04             	sub    $0x4,%esp
f012a396:	68 02 a0 13 f0       	push   $0xf013a002
f012a39b:	68 36 0f 00 00       	push   $0xf36
f012a3a0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a3a5:	e8 06 5e fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a3aa:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a3b1:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a3b4:	e8 59 22 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a3b9:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a3bc:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a3c3:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a3c6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a3cc:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a3d2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a3d8:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a3db:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a3dd:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a3e3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a3e9:	01 c2                	add    %eax,%edx
f012a3eb:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a3ee:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a3f0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a3f6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a3fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a403:	eb 11                	jmp    f012a416 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a405:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a408:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a40e:	01 d0                	add    %edx,%eax
f012a410:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a413:	ff 45 f4             	incl   -0xc(%ebp)
f012a416:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a41c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a41f:	7d e4                	jge    f012a405 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a421:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a427:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a42d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a433:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a439:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a43f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a446:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a44c:	01 d0                	add    %edx,%eax
f012a44e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a454:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a45a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a460:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a467:	eb 1b                	jmp    f012a484 <test_krealloc+0x9da>
			intArr[i] = 4;
f012a469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a46c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a473:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a479:	01 d0                	add    %edx,%eax
f012a47b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a481:	ff 45 f0             	incl   -0x10(%ebp)
f012a484:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a48a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a48d:	7d da                	jge    f012a469 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a48f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a495:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a49b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a4a2:	eb 17                	jmp    f012a4bb <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a4a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a4a7:	01 c0                	add    %eax,%eax
f012a4a9:	89 c2                	mov    %eax,%edx
f012a4ab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a4b1:	01 d0                	add    %edx,%eax
f012a4b3:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a4b8:	ff 45 ec             	incl   -0x14(%ebp)
f012a4bb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a4c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a4c4:	7d de                	jge    f012a4a4 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a4c6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a4cc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a4d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a4d8:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a4dd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a4e3:	01 c0                	add    %eax,%eax
f012a4e5:	89 c2                	mov    %eax,%edx
f012a4e7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a4ed:	01 d0                	add    %edx,%eax
f012a4ef:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a4f4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a4fa:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a500:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a507:	eb 49                	jmp    f012a552 <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a509:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a50c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a513:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a519:	01 d0                	add    %edx,%eax
f012a51b:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a51e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a521:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a528:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a52e:	01 d0                	add    %edx,%eax
f012a530:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a536:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a539:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a540:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a546:	01 d0                	add    %edx,%eax
f012a548:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a54f:	ff 45 e8             	incl   -0x18(%ebp)
f012a552:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a558:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a55b:	7d ac                	jge    f012a509 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a55d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a563:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a569:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a56f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a572:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a578:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a57e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a584:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a58b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a591:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a598:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a59e:	01 d0                	add    %edx,%eax
f012a5a0:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a5a3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a5a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a5b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5b6:	01 d0                	add    %edx,%eax
f012a5b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a5be:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a5c4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a5cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5d1:	01 d0                	add    %edx,%eax
f012a5d3:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a5da:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a5e0:	8a 00                	mov    (%eax),%al
f012a5e2:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a5e5:	75 17                	jne    f012a5fe <test_krealloc+0xb54>
f012a5e7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a5ed:	89 c2                	mov    %eax,%edx
f012a5ef:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a5f5:	01 d0                	add    %edx,%eax
f012a5f7:	8a 00                	mov    (%eax),%al
f012a5f9:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a5fc:	74 17                	je     f012a615 <test_krealloc+0xb6b>
			panic(
f012a5fe:	83 ec 04             	sub    $0x4,%esp
f012a601:	68 20 a0 13 f0       	push   $0xf013a020
f012a606:	68 79 0f 00 00       	push   $0xf79
f012a60b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a610:	e8 9b 5b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012a615:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a61b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012a621:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a627:	8a 00                	mov    (%eax),%al
f012a629:	3c 02                	cmp    $0x2,%al
f012a62b:	75 16                	jne    f012a643 <test_krealloc+0xb99>
f012a62d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a633:	89 c2                	mov    %eax,%edx
f012a635:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a63b:	01 d0                	add    %edx,%eax
f012a63d:	8a 00                	mov    (%eax),%al
f012a63f:	3c 02                	cmp    $0x2,%al
f012a641:	74 20                	je     f012a663 <test_krealloc+0xbb9>
			panic(
f012a643:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a649:	8a 00                	mov    (%eax),%al
f012a64b:	0f be c0             	movsbl %al,%eax
f012a64e:	50                   	push   %eax
f012a64f:	68 60 a0 13 f0       	push   $0xf013a060
f012a654:	68 7f 0f 00 00       	push   $0xf7f
f012a659:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a65e:	e8 4d 5b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012a663:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a669:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012a66f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a675:	8b 00                	mov    (%eax),%eax
f012a677:	83 f8 03             	cmp    $0x3,%eax
f012a67a:	75 1c                	jne    f012a698 <test_krealloc+0xbee>
f012a67c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a682:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a689:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a68f:	01 d0                	add    %edx,%eax
f012a691:	8b 00                	mov    (%eax),%eax
f012a693:	83 f8 03             	cmp    $0x3,%eax
f012a696:	74 17                	je     f012a6af <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012a698:	83 ec 04             	sub    $0x4,%esp
f012a69b:	68 ac a0 13 f0       	push   $0xf013a0ac
f012a6a0:	68 83 0f 00 00       	push   $0xf83
f012a6a5:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a6aa:	e8 01 5b fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012a6af:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a6b5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012a6bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a6c1:	8b 00                	mov    (%eax),%eax
f012a6c3:	83 f8 04             	cmp    $0x4,%eax
f012a6c6:	75 1c                	jne    f012a6e4 <test_krealloc+0xc3a>
f012a6c8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a6ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a6d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a6db:	01 d0                	add    %edx,%eax
f012a6dd:	8b 00                	mov    (%eax),%eax
f012a6df:	83 f8 04             	cmp    $0x4,%eax
f012a6e2:	74 17                	je     f012a6fb <test_krealloc+0xc51>
			panic(
f012a6e4:	83 ec 04             	sub    $0x4,%esp
f012a6e7:	68 20 a0 13 f0       	push   $0xf013a020
f012a6ec:	68 88 0f 00 00       	push   $0xf88
f012a6f1:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a6f6:	e8 b5 5a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012a6fb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a701:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012a707:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a70d:	66 8b 00             	mov    (%eax),%ax
f012a710:	66 83 f8 05          	cmp    $0x5,%ax
f012a714:	75 1b                	jne    f012a731 <test_krealloc+0xc87>
f012a716:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a71c:	01 c0                	add    %eax,%eax
f012a71e:	89 c2                	mov    %eax,%edx
f012a720:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a726:	01 d0                	add    %edx,%eax
f012a728:	66 8b 00             	mov    (%eax),%ax
f012a72b:	66 83 f8 05          	cmp    $0x5,%ax
f012a72f:	74 17                	je     f012a748 <test_krealloc+0xc9e>
			panic(
f012a731:	83 ec 04             	sub    $0x4,%esp
f012a734:	68 20 a0 13 f0       	push   $0xf013a020
f012a739:	68 8d 0f 00 00       	push   $0xf8d
f012a73e:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a743:	e8 68 5a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012a748:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a74e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012a754:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a75a:	66 8b 00             	mov    (%eax),%ax
f012a75d:	66 83 f8 06          	cmp    $0x6,%ax
f012a761:	75 1b                	jne    f012a77e <test_krealloc+0xcd4>
f012a763:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a769:	01 c0                	add    %eax,%eax
f012a76b:	89 c2                	mov    %eax,%edx
f012a76d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a773:	01 d0                	add    %edx,%eax
f012a775:	66 8b 00             	mov    (%eax),%ax
f012a778:	66 83 f8 06          	cmp    $0x6,%ax
f012a77c:	74 17                	je     f012a795 <test_krealloc+0xceb>
			panic(
f012a77e:	83 ec 04             	sub    $0x4,%esp
f012a781:	68 20 a0 13 f0       	push   $0xf013a020
f012a786:	68 92 0f 00 00       	push   $0xf92
f012a78b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a790:	e8 1b 5a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012a795:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a79b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012a7a1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a7a7:	8a 00                	mov    (%eax),%al
f012a7a9:	3c 07                	cmp    $0x7,%al
f012a7ab:	75 1b                	jne    f012a7c8 <test_krealloc+0xd1e>
f012a7ad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a7b3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a7ba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a7c0:	01 d0                	add    %edx,%eax
f012a7c2:	8a 00                	mov    (%eax),%al
f012a7c4:	3c 07                	cmp    $0x7,%al
f012a7c6:	74 17                	je     f012a7df <test_krealloc+0xd35>
			panic(
f012a7c8:	83 ec 04             	sub    $0x4,%esp
f012a7cb:	68 20 a0 13 f0       	push   $0xf013a020
f012a7d0:	68 97 0f 00 00       	push   $0xf97
f012a7d5:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a7da:	e8 d1 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012a7df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a7e5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a7e9:	66 83 f8 07          	cmp    $0x7,%ax
f012a7ed:	75 1f                	jne    f012a80e <test_krealloc+0xd64>
f012a7ef:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a7f5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a7fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a802:	01 d0                	add    %edx,%eax
f012a804:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a808:	66 83 f8 07          	cmp    $0x7,%ax
f012a80c:	74 17                	je     f012a825 <test_krealloc+0xd7b>
			panic(
f012a80e:	83 ec 04             	sub    $0x4,%esp
f012a811:	68 20 a0 13 f0       	push   $0xf013a020
f012a816:	68 9a 0f 00 00       	push   $0xf9a
f012a81b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a820:	e8 8b 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012a825:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a82b:	8b 40 04             	mov    0x4(%eax),%eax
f012a82e:	83 f8 07             	cmp    $0x7,%eax
f012a831:	75 1d                	jne    f012a850 <test_krealloc+0xda6>
f012a833:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a839:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a840:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a846:	01 d0                	add    %edx,%eax
f012a848:	8b 40 04             	mov    0x4(%eax),%eax
f012a84b:	83 f8 07             	cmp    $0x7,%eax
f012a84e:	74 17                	je     f012a867 <test_krealloc+0xdbd>
			panic(
f012a850:	83 ec 04             	sub    $0x4,%esp
f012a853:	68 20 a0 13 f0       	push   $0xf013a020
f012a858:	68 9d 0f 00 00       	push   $0xf9d
f012a85d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a862:	e8 49 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012a867:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a86d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012a873:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a879:	8a 00                	mov    (%eax),%al
f012a87b:	3c 08                	cmp    $0x8,%al
f012a87d:	75 1b                	jne    f012a89a <test_krealloc+0xdf0>
f012a87f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a885:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a88c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a892:	01 d0                	add    %edx,%eax
f012a894:	8a 00                	mov    (%eax),%al
f012a896:	3c 08                	cmp    $0x8,%al
f012a898:	74 17                	je     f012a8b1 <test_krealloc+0xe07>
			panic(
f012a89a:	83 ec 04             	sub    $0x4,%esp
f012a89d:	68 20 a0 13 f0       	push   $0xf013a020
f012a8a2:	68 a2 0f 00 00       	push   $0xfa2
f012a8a7:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a8ac:	e8 ff 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012a8b1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8b7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a8bb:	66 83 f8 08          	cmp    $0x8,%ax
f012a8bf:	75 1f                	jne    f012a8e0 <test_krealloc+0xe36>
f012a8c1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a8c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8d4:	01 d0                	add    %edx,%eax
f012a8d6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a8da:	66 83 f8 08          	cmp    $0x8,%ax
f012a8de:	74 17                	je     f012a8f7 <test_krealloc+0xe4d>
			panic(
f012a8e0:	83 ec 04             	sub    $0x4,%esp
f012a8e3:	68 20 a0 13 f0       	push   $0xf013a020
f012a8e8:	68 a5 0f 00 00       	push   $0xfa5
f012a8ed:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a8f2:	e8 b9 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012a8f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8fd:	8b 40 04             	mov    0x4(%eax),%eax
f012a900:	83 f8 08             	cmp    $0x8,%eax
f012a903:	75 1d                	jne    f012a922 <test_krealloc+0xe78>
f012a905:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a90b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a912:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a918:	01 d0                	add    %edx,%eax
f012a91a:	8b 40 04             	mov    0x4(%eax),%eax
f012a91d:	83 f8 08             	cmp    $0x8,%eax
f012a920:	74 17                	je     f012a939 <test_krealloc+0xe8f>
			panic(
f012a922:	83 ec 04             	sub    $0x4,%esp
f012a925:	68 20 a0 13 f0       	push   $0xf013a020
f012a92a:	68 a8 0f 00 00       	push   $0xfa8
f012a92f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a934:	e8 77 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012a939:	e8 d4 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a93e:	89 c2                	mov    %eax,%edx
f012a940:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a943:	39 c2                	cmp    %eax,%edx
f012a945:	74 17                	je     f012a95e <test_krealloc+0xeb4>
			panic(
f012a947:	83 ec 04             	sub    $0x4,%esp
f012a94a:	68 e0 a0 13 f0       	push   $0xf013a0e0
f012a94f:	68 ac 0f 00 00       	push   $0xfac
f012a954:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a959:	e8 52 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012a95e:	83 ec 0c             	sub    $0xc,%esp
f012a961:	68 2c a1 13 f0       	push   $0xf013a12c
f012a966:	e8 c6 64 fd ff       	call   f0100e31 <cprintf>
f012a96b:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012a96e:	e8 9f 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a973:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012a976:	e8 3d 99 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012a97b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012a981:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a987:	83 ec 08             	sub    $0x8,%esp
f012a98a:	6a 00                	push   $0x0
f012a98c:	50                   	push   %eax
f012a98d:	e8 b7 d2 fd ff       	call   f0107c49 <krealloc>
f012a992:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012a995:	e8 1e 99 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012a99a:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012a9a0:	74 17                	je     f012a9b9 <test_krealloc+0xf0f>
			panic(
f012a9a2:	83 ec 04             	sub    $0x4,%esp
f012a9a5:	68 50 a1 13 f0       	push   $0xf013a150
f012a9aa:	68 b9 0f 00 00       	push   $0xfb9
f012a9af:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a9b4:	e8 f7 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012a9b9:	e8 54 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a9be:	89 c2                	mov    %eax,%edx
f012a9c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a9c3:	29 c2                	sub    %eax,%edx
f012a9c5:	89 d0                	mov    %edx,%eax
f012a9c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a9cc:	74 17                	je     f012a9e5 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012a9ce:	83 ec 04             	sub    $0x4,%esp
f012a9d1:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012a9d6:	68 bb 0f 00 00       	push   $0xfbb
f012a9db:	68 ee 8c 13 f0       	push   $0xf0138cee
f012a9e0:	e8 cb 57 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012a9e5:	e8 28 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a9ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012a9ed:	e8 c6 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012a9f2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012a9f8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a9fe:	83 ec 08             	sub    $0x8,%esp
f012aa01:	6a 00                	push   $0x0
f012aa03:	50                   	push   %eax
f012aa04:	e8 40 d2 fd ff       	call   f0107c49 <krealloc>
f012aa09:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aa0c:	e8 a7 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aa11:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aa17:	74 17                	je     f012aa30 <test_krealloc+0xf86>
			panic(
f012aa19:	83 ec 04             	sub    $0x4,%esp
f012aa1c:	68 50 a1 13 f0       	push   $0xf013a150
f012aa21:	68 c4 0f 00 00       	push   $0xfc4
f012aa26:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aa2b:	e8 80 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012aa30:	e8 dd 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aa35:	89 c2                	mov    %eax,%edx
f012aa37:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aa3a:	29 c2                	sub    %eax,%edx
f012aa3c:	89 d0                	mov    %edx,%eax
f012aa3e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa43:	74 17                	je     f012aa5c <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012aa45:	83 ec 04             	sub    $0x4,%esp
f012aa48:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012aa4d:	68 c6 0f 00 00       	push   $0xfc6
f012aa52:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aa57:	e8 54 57 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012aa5c:	e8 b1 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aa61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aa64:	e8 4f 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aa69:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012aa6f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aa75:	83 ec 08             	sub    $0x8,%esp
f012aa78:	6a 00                	push   $0x0
f012aa7a:	50                   	push   %eax
f012aa7b:	e8 c9 d1 fd ff       	call   f0107c49 <krealloc>
f012aa80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aa83:	e8 30 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aa88:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aa8e:	74 17                	je     f012aaa7 <test_krealloc+0xffd>
			panic(
f012aa90:	83 ec 04             	sub    $0x4,%esp
f012aa93:	68 08 8d 13 f0       	push   $0xf0138d08
f012aa98:	68 ce 0f 00 00       	push   $0xfce
f012aa9d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aaa2:	e8 09 57 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012aaa7:	e8 66 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aaac:	89 c2                	mov    %eax,%edx
f012aaae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aab1:	29 c2                	sub    %eax,%edx
f012aab3:	89 d0                	mov    %edx,%eax
f012aab5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012aaba:	74 17                	je     f012aad3 <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012aabc:	83 ec 04             	sub    $0x4,%esp
f012aabf:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012aac4:	68 d0 0f 00 00       	push   $0xfd0
f012aac9:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aace:	e8 dd 56 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012aad3:	e8 3a 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aad8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aadb:	e8 d8 97 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aae0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012aae6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aaec:	83 ec 08             	sub    $0x8,%esp
f012aaef:	6a 00                	push   $0x0
f012aaf1:	50                   	push   %eax
f012aaf2:	e8 52 d1 fd ff       	call   f0107c49 <krealloc>
f012aaf7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aafa:	e8 b9 97 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aaff:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ab05:	74 17                	je     f012ab1e <test_krealloc+0x1074>
			panic(
f012ab07:	83 ec 04             	sub    $0x4,%esp
f012ab0a:	68 50 a1 13 f0       	push   $0xf013a150
f012ab0f:	68 d8 0f 00 00       	push   $0xfd8
f012ab14:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ab19:	e8 92 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ab1e:	e8 ef 1a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ab23:	89 c2                	mov    %eax,%edx
f012ab25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ab28:	29 c2                	sub    %eax,%edx
f012ab2a:	89 d0                	mov    %edx,%eax
f012ab2c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ab31:	74 17                	je     f012ab4a <test_krealloc+0x10a0>
			panic(
f012ab33:	83 ec 04             	sub    $0x4,%esp
f012ab36:	68 f8 a1 13 f0       	push   $0xf013a1f8
f012ab3b:	68 db 0f 00 00       	push   $0xfdb
f012ab40:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ab45:	e8 66 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ab4a:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ab51:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ab58:	eb 48                	jmp    f012aba2 <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ab5a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ab5d:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012ab62:	83 ec 04             	sub    $0x4,%esp
f012ab65:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012ab6b:	51                   	push   %ecx
f012ab6c:	52                   	push   %edx
f012ab6d:	50                   	push   %eax
f012ab6e:	e8 a8 c5 fd ff       	call   f010711b <get_page_table>
f012ab73:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ab76:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ab7c:	85 c0                	test   %eax,%eax
f012ab7e:	75 17                	jne    f012ab97 <test_krealloc+0x10ed>
					panic(
f012ab80:	83 ec 04             	sub    $0x4,%esp
f012ab83:	68 f0 95 13 f0       	push   $0xf01395f0
f012ab88:	68 e7 0f 00 00       	push   $0xfe7
f012ab8d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ab92:	e8 19 56 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ab97:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ab9e:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012aba2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012aba6:	78 b2                	js     f012ab5a <test_krealloc+0x10b0>
f012aba8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012abac:	7f 09                	jg     f012abb7 <test_krealloc+0x110d>
f012abae:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012abb5:	76 a3                	jbe    f012ab5a <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012abb7:	83 ec 0c             	sub    $0xc,%esp
f012abba:	68 37 a2 13 f0       	push   $0xf013a237
f012abbf:	e8 6d 62 fd ff       	call   f0100e31 <cprintf>
f012abc4:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012abc7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012abcd:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012abd3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012abda:	eb 21                	jmp    f012abfd <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012abdc:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012abe2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012abe5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012abeb:	01 c8                	add    %ecx,%eax
f012abed:	8a 00                	mov    (%eax),%al
f012abef:	0f be c0             	movsbl %al,%eax
f012abf2:	01 d0                	add    %edx,%eax
f012abf4:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012abfa:	ff 45 dc             	incl   -0x24(%ebp)
f012abfd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ac03:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ac06:	7d d4                	jge    f012abdc <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ac08:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ac0e:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012ac14:	42                   	inc    %edx
f012ac15:	01 d2                	add    %edx,%edx
f012ac17:	39 d0                	cmp    %edx,%eax
f012ac19:	74 17                	je     f012ac32 <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012ac1b:	83 ec 04             	sub    $0x4,%esp
f012ac1e:	68 40 a2 13 f0       	push   $0xf013a240
f012ac23:	68 f9 0f 00 00       	push   $0xff9
f012ac28:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ac2d:	e8 7e 55 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ac32:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ac38:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ac3e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ac45:	eb 25                	jmp    f012ac6c <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012ac47:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ac4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ac50:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ac57:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ac5d:	01 c8                	add    %ecx,%eax
f012ac5f:	8b 00                	mov    (%eax),%eax
f012ac61:	01 d0                	add    %edx,%eax
f012ac63:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ac69:	ff 45 dc             	incl   -0x24(%ebp)
f012ac6c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ac72:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ac75:	7d d0                	jge    f012ac47 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ac77:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ac7d:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012ac83:	42                   	inc    %edx
f012ac84:	c1 e2 02             	shl    $0x2,%edx
f012ac87:	39 d0                	cmp    %edx,%eax
f012ac89:	74 17                	je     f012aca2 <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012ac8b:	83 ec 04             	sub    $0x4,%esp
f012ac8e:	68 40 a2 13 f0       	push   $0xf013a240
f012ac93:	68 03 10 00 00       	push   $0x1003
f012ac98:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ac9d:	e8 0e 55 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012aca2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aca8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012acae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012acb5:	eb 24                	jmp    f012acdb <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012acb7:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012acbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012acc0:	01 c0                	add    %eax,%eax
f012acc2:	89 c1                	mov    %eax,%ecx
f012acc4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012acca:	01 c8                	add    %ecx,%eax
f012accc:	66 8b 00             	mov    (%eax),%ax
f012accf:	98                   	cwtl   
f012acd0:	01 d0                	add    %edx,%eax
f012acd2:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012acd8:	ff 45 dc             	incl   -0x24(%ebp)
f012acdb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ace1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ace4:	7d d1                	jge    f012acb7 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ace6:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012acec:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012acf2:	8d 48 01             	lea    0x1(%eax),%ecx
f012acf5:	89 c8                	mov    %ecx,%eax
f012acf7:	c1 e0 02             	shl    $0x2,%eax
f012acfa:	01 c8                	add    %ecx,%eax
f012acfc:	39 c2                	cmp    %eax,%edx
f012acfe:	74 17                	je     f012ad17 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ad00:	83 ec 04             	sub    $0x4,%esp
f012ad03:	68 40 a2 13 f0       	push   $0xf013a240
f012ad08:	68 0d 10 00 00       	push   $0x100d
f012ad0d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ad12:	e8 99 54 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ad17:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ad1d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ad23:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ad2a:	eb 70                	jmp    f012ad9c <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012ad2c:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012ad32:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ad35:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ad3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad42:	01 c8                	add    %ecx,%eax
f012ad44:	8a 00                	mov    (%eax),%al
f012ad46:	0f be c0             	movsbl %al,%eax
f012ad49:	01 d0                	add    %edx,%eax
f012ad4b:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012ad51:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012ad57:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ad5a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ad61:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad67:	01 c8                	add    %ecx,%eax
f012ad69:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ad6d:	98                   	cwtl   
f012ad6e:	01 d0                	add    %edx,%eax
f012ad70:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012ad76:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ad7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ad7f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ad86:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad8c:	01 c8                	add    %ecx,%eax
f012ad8e:	8b 40 04             	mov    0x4(%eax),%eax
f012ad91:	01 d0                	add    %edx,%eax
f012ad93:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ad99:	ff 45 dc             	incl   -0x24(%ebp)
f012ad9c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ada2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ada5:	7d 85                	jge    f012ad2c <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ada7:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012adad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012adb3:	8d 50 01             	lea    0x1(%eax),%edx
f012adb6:	89 d0                	mov    %edx,%eax
f012adb8:	01 c0                	add    %eax,%eax
f012adba:	01 d0                	add    %edx,%eax
f012adbc:	01 c0                	add    %eax,%eax
f012adbe:	01 d0                	add    %edx,%eax
f012adc0:	39 c1                	cmp    %eax,%ecx
f012adc2:	75 3a                	jne    f012adfe <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012adc4:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012adca:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012add0:	8d 50 01             	lea    0x1(%eax),%edx
f012add3:	89 d0                	mov    %edx,%eax
f012add5:	01 c0                	add    %eax,%eax
f012add7:	01 d0                	add    %edx,%eax
f012add9:	01 c0                	add    %eax,%eax
f012addb:	01 d0                	add    %edx,%eax
f012addd:	39 c1                	cmp    %eax,%ecx
f012addf:	75 1d                	jne    f012adfe <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ade1:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012ade7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012aded:	8d 50 01             	lea    0x1(%eax),%edx
f012adf0:	89 d0                	mov    %edx,%eax
f012adf2:	01 c0                	add    %eax,%eax
f012adf4:	01 d0                	add    %edx,%eax
f012adf6:	01 c0                	add    %eax,%eax
f012adf8:	01 d0                	add    %edx,%eax
f012adfa:	39 c1                	cmp    %eax,%ecx
f012adfc:	74 17                	je     f012ae15 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012adfe:	83 ec 04             	sub    $0x4,%esp
f012ae01:	68 40 a2 13 f0       	push   $0xf013a240
f012ae06:	68 1b 10 00 00       	push   $0x101b
f012ae0b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ae10:	e8 9b 53 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ae15:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012ae1c:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ae1f:	e8 ee 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ae24:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ae27:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ae2d:	83 ec 08             	sub    $0x8,%esp
f012ae30:	68 00 3c 00 00       	push   $0x3c00
f012ae35:	50                   	push   %eax
f012ae36:	e8 0e ce fd ff       	call   f0107c49 <krealloc>
f012ae3b:	83 c4 10             	add    $0x10,%esp
f012ae3e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ae44:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ae4a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ae4f:	77 17                	ja     f012ae68 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ae51:	83 ec 04             	sub    $0x4,%esp
f012ae54:	68 94 9f 13 f0       	push   $0xf0139f94
f012ae59:	68 27 10 00 00       	push   $0x1027
f012ae5e:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ae63:	e8 48 53 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012ae68:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ae6e:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012ae74:	74 17                	je     f012ae8d <test_krealloc+0x13e3>
			panic(
f012ae76:	83 ec 04             	sub    $0x4,%esp
f012ae79:	68 78 a2 13 f0       	push   $0xf013a278
f012ae7e:	68 2a 10 00 00       	push   $0x102a
f012ae83:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ae88:	e8 23 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ae8d:	e8 80 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ae92:	89 c2                	mov    %eax,%edx
f012ae94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae97:	39 c2                	cmp    %eax,%edx
f012ae99:	74 17                	je     f012aeb2 <test_krealloc+0x1408>
			panic(
f012ae9b:	83 ec 04             	sub    $0x4,%esp
f012ae9e:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012aea3:	68 2d 10 00 00       	push   $0x102d
f012aea8:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aead:	e8 fe 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012aeb2:	e8 5b 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aeb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012aeba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aec0:	83 ec 08             	sub    $0x8,%esp
f012aec3:	68 00 fc 0f 00       	push   $0xffc00
f012aec8:	50                   	push   %eax
f012aec9:	e8 7b cd fd ff       	call   f0107c49 <krealloc>
f012aece:	83 c4 10             	add    $0x10,%esp
f012aed1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012aed7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012aedd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012aee2:	77 17                	ja     f012aefb <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012aee4:	83 ec 04             	sub    $0x4,%esp
f012aee7:	68 94 9f 13 f0       	push   $0xf0139f94
f012aeec:	68 33 10 00 00       	push   $0x1033
f012aef1:	68 ee 8c 13 f0       	push   $0xf0138cee
f012aef6:	e8 b5 52 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012aefb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012af01:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012af07:	74 17                	je     f012af20 <test_krealloc+0x1476>
			panic(
f012af09:	83 ec 04             	sub    $0x4,%esp
f012af0c:	68 78 a2 13 f0       	push   $0xf013a278
f012af11:	68 36 10 00 00       	push   $0x1036
f012af16:	68 ee 8c 13 f0       	push   $0xf0138cee
f012af1b:	e8 90 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012af20:	e8 ed 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012af25:	89 c2                	mov    %eax,%edx
f012af27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af2a:	39 c2                	cmp    %eax,%edx
f012af2c:	74 17                	je     f012af45 <test_krealloc+0x149b>
			panic(
f012af2e:	83 ec 04             	sub    $0x4,%esp
f012af31:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012af36:	68 39 10 00 00       	push   $0x1039
f012af3b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012af40:	e8 6b 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012af45:	e8 c8 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012af4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012af4d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af53:	83 ec 08             	sub    $0x8,%esp
f012af56:	68 00 fc 0f 00       	push   $0xffc00
f012af5b:	50                   	push   %eax
f012af5c:	e8 e8 cc fd ff       	call   f0107c49 <krealloc>
f012af61:	83 c4 10             	add    $0x10,%esp
f012af64:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012af6a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012af70:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012af75:	77 17                	ja     f012af8e <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012af77:	83 ec 04             	sub    $0x4,%esp
f012af7a:	68 94 9f 13 f0       	push   $0xf0139f94
f012af7f:	68 3f 10 00 00       	push   $0x103f
f012af84:	68 ee 8c 13 f0       	push   $0xf0138cee
f012af89:	e8 22 52 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012af8e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af94:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012af9a:	74 17                	je     f012afb3 <test_krealloc+0x1509>
			panic(
f012af9c:	83 ec 04             	sub    $0x4,%esp
f012af9f:	68 78 a2 13 f0       	push   $0xf013a278
f012afa4:	68 42 10 00 00       	push   $0x1042
f012afa9:	68 ee 8c 13 f0       	push   $0xf0138cee
f012afae:	e8 fd 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012afb3:	e8 5a 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012afb8:	89 c2                	mov    %eax,%edx
f012afba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012afbd:	39 c2                	cmp    %eax,%edx
f012afbf:	74 17                	je     f012afd8 <test_krealloc+0x152e>
			panic(
f012afc1:	83 ec 04             	sub    $0x4,%esp
f012afc4:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012afc9:	68 45 10 00 00       	push   $0x1045
f012afce:	68 ee 8c 13 f0       	push   $0xf0138cee
f012afd3:	e8 d8 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012afd8:	e8 35 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012afdd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012afe0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012afe6:	83 ec 08             	sub    $0x8,%esp
f012afe9:	68 00 fc 0f 00       	push   $0xffc00
f012afee:	50                   	push   %eax
f012afef:	e8 55 cc fd ff       	call   f0107c49 <krealloc>
f012aff4:	83 c4 10             	add    $0x10,%esp
f012aff7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012affd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b003:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b008:	77 17                	ja     f012b021 <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b00a:	83 ec 04             	sub    $0x4,%esp
f012b00d:	68 94 9f 13 f0       	push   $0xf0139f94
f012b012:	68 4d 10 00 00       	push   $0x104d
f012b017:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b01c:	e8 8f 51 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b021:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b027:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b02d:	74 17                	je     f012b046 <test_krealloc+0x159c>
			panic(
f012b02f:	83 ec 04             	sub    $0x4,%esp
f012b032:	68 28 a3 13 f0       	push   $0xf013a328
f012b037:	68 50 10 00 00       	push   $0x1050
f012b03c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b041:	e8 6a 51 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b046:	e8 c7 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b04b:	89 c2                	mov    %eax,%edx
f012b04d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b050:	39 c2                	cmp    %eax,%edx
f012b052:	74 17                	je     f012b06b <test_krealloc+0x15c1>
			panic(
f012b054:	83 ec 04             	sub    $0x4,%esp
f012b057:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012b05c:	68 53 10 00 00       	push   $0x1053
f012b061:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b066:	e8 45 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b06b:	83 ec 0c             	sub    $0xc,%esp
f012b06e:	68 07 95 13 f0       	push   $0xf0139507
f012b073:	e8 b9 5d fd ff       	call   f0100e31 <cprintf>
f012b078:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b07b:	e8 92 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b080:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b083:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b089:	83 ec 08             	sub    $0x8,%esp
f012b08c:	68 00 18 10 00       	push   $0x101800
f012b091:	50                   	push   %eax
f012b092:	e8 b2 cb fd ff       	call   f0107c49 <krealloc>
f012b097:	83 c4 10             	add    $0x10,%esp
f012b09a:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b09d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b0a0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b0a5:	77 17                	ja     f012b0be <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b0a7:	83 ec 04             	sub    $0x4,%esp
f012b0aa:	68 94 9f 13 f0       	push   $0xf0139f94
f012b0af:	68 5c 10 00 00       	push   $0x105c
f012b0b4:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b0b9:	e8 f2 50 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b0be:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b0c4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b0c7:	74 17                	je     f012b0e0 <test_krealloc+0x1636>
			panic(
f012b0c9:	83 ec 04             	sub    $0x4,%esp
f012b0cc:	68 88 a3 13 f0       	push   $0xf013a388
f012b0d1:	68 5f 10 00 00       	push   $0x105f
f012b0d6:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b0db:	e8 d0 50 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b0e0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b0e3:	e8 2a 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b0e8:	29 c3                	sub    %eax,%ebx
f012b0ea:	89 d8                	mov    %ebx,%eax
f012b0ec:	83 f8 02             	cmp    $0x2,%eax
f012b0ef:	74 17                	je     f012b108 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b0f1:	83 ec 04             	sub    $0x4,%esp
f012b0f4:	68 04 a4 13 f0       	push   $0xf013a404
f012b0f9:	68 61 10 00 00       	push   $0x1061
f012b0fe:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b103:	e8 a8 50 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b108:	e8 05 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b10d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b110:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b116:	83 ec 08             	sub    $0x8,%esp
f012b119:	68 00 fc 3f 00       	push   $0x3ffc00
f012b11e:	50                   	push   %eax
f012b11f:	e8 25 cb fd ff       	call   f0107c49 <krealloc>
f012b124:	83 c4 10             	add    $0x10,%esp
f012b127:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b12a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b12d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b132:	77 17                	ja     f012b14b <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b134:	83 ec 04             	sub    $0x4,%esp
f012b137:	68 94 9f 13 f0       	push   $0xf0139f94
f012b13c:	68 67 10 00 00       	push   $0x1067
f012b141:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b146:	e8 65 50 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b14b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b151:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b154:	74 17                	je     f012b16d <test_krealloc+0x16c3>
			panic(
f012b156:	83 ec 04             	sub    $0x4,%esp
f012b159:	68 88 a3 13 f0       	push   $0xf013a388
f012b15e:	68 6a 10 00 00       	push   $0x106a
f012b163:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b168:	e8 43 50 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b16d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b170:	e8 9d 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b175:	29 c3                	sub    %eax,%ebx
f012b177:	89 d8                	mov    %ebx,%eax
f012b179:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b17e:	74 17                	je     f012b197 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b180:	83 ec 04             	sub    $0x4,%esp
f012b183:	68 04 a4 13 f0       	push   $0xf013a404
f012b188:	68 6d 10 00 00       	push   $0x106d
f012b18d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b192:	e8 19 50 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b197:	83 ec 0c             	sub    $0xc,%esp
f012b19a:	68 4c 95 13 f0       	push   $0xf013954c
f012b19f:	e8 8d 5c fd ff       	call   f0100e31 <cprintf>
f012b1a4:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b1a7:	e8 66 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b1ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b1af:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b1b5:	83 ec 08             	sub    $0x8,%esp
f012b1b8:	68 00 fc 9f 00       	push   $0x9ffc00
f012b1bd:	50                   	push   %eax
f012b1be:	e8 86 ca fd ff       	call   f0107c49 <krealloc>
f012b1c3:	83 c4 10             	add    $0x10,%esp
f012b1c6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b1c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b1cc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b1d1:	77 17                	ja     f012b1ea <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b1d3:	83 ec 04             	sub    $0x4,%esp
f012b1d6:	68 94 9f 13 f0       	push   $0xf0139f94
f012b1db:	68 78 10 00 00       	push   $0x1078
f012b1e0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b1e5:	e8 c6 4f fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b1ea:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b1f1:	10 00 00 
f012b1f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b1f9:	0f b6 d0             	movzbl %al,%edx
f012b1fc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b202:	01 d0                	add    %edx,%eax
f012b204:	48                   	dec    %eax
f012b205:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b20b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b211:	ba 00 00 00 00       	mov    $0x0,%edx
f012b216:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b21c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b222:	29 d0                	sub    %edx,%eax
f012b224:	89 c1                	mov    %eax,%ecx
f012b226:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b22d:	10 00 00 
f012b230:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b235:	0f b6 c0             	movzbl %al,%eax
f012b238:	c1 e0 04             	shl    $0x4,%eax
f012b23b:	89 c2                	mov    %eax,%edx
f012b23d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b243:	01 d0                	add    %edx,%eax
f012b245:	48                   	dec    %eax
f012b246:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b24c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b252:	ba 00 00 00 00       	mov    $0x0,%edx
f012b257:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b25d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b263:	29 d0                	sub    %edx,%eax
f012b265:	01 c8                	add    %ecx,%eax
f012b267:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b26d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b270:	39 c2                	cmp    %eax,%edx
f012b272:	74 18                	je     f012b28c <test_krealloc+0x17e2>
			panic(
f012b274:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b277:	50                   	push   %eax
f012b278:	68 38 a4 13 f0       	push   $0xf013a438
f012b27d:	68 7c 10 00 00       	push   $0x107c
f012b282:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b287:	e8 24 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b28c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b292:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b295:	75 17                	jne    f012b2ae <test_krealloc+0x1804>
			panic(
f012b297:	83 ec 04             	sub    $0x4,%esp
f012b29a:	68 7c a4 13 f0       	push   $0xf013a47c
f012b29f:	68 7f 10 00 00       	push   $0x107f
f012b2a4:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b2a9:	e8 02 4f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b2ae:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b2b1:	e8 5c 13 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b2b6:	29 c3                	sub    %eax,%ebx
f012b2b8:	89 d8                	mov    %ebx,%eax
f012b2ba:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b2bf:	74 17                	je     f012b2d8 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b2c1:	83 ec 04             	sub    $0x4,%esp
f012b2c4:	68 04 a4 13 f0       	push   $0xf013a404
f012b2c9:	68 82 10 00 00       	push   $0x1082
f012b2ce:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b2d3:	e8 d8 4e fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b2d8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b2db:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b2e1:	e8 2c 13 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b2e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b2e9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b2ef:	83 ec 08             	sub    $0x8,%esp
f012b2f2:	68 00 fc 5f 00       	push   $0x5ffc00
f012b2f7:	50                   	push   %eax
f012b2f8:	e8 4c c9 fd ff       	call   f0107c49 <krealloc>
f012b2fd:	83 c4 10             	add    $0x10,%esp
f012b300:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b303:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b306:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b30b:	77 17                	ja     f012b324 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b30d:	83 ec 04             	sub    $0x4,%esp
f012b310:	68 94 9f 13 f0       	push   $0xf0139f94
f012b315:	68 8b 10 00 00       	push   $0x108b
f012b31a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b31f:	e8 8c 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b324:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b32a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b32d:	74 17                	je     f012b346 <test_krealloc+0x189c>
			panic(
f012b32f:	83 ec 04             	sub    $0x4,%esp
f012b332:	68 88 a3 13 f0       	push   $0xf013a388
f012b337:	68 8e 10 00 00       	push   $0x108e
f012b33c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b341:	e8 6a 4e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b346:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b349:	e8 c4 12 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b34e:	29 c3                	sub    %eax,%ebx
f012b350:	89 d8                	mov    %ebx,%eax
f012b352:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b357:	74 17                	je     f012b370 <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b359:	83 ec 04             	sub    $0x4,%esp
f012b35c:	68 04 a4 13 f0       	push   $0xf013a404
f012b361:	68 91 10 00 00       	push   $0x1091
f012b366:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b36b:	e8 40 4e fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b370:	e8 9d 12 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b375:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b378:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b37e:	83 ec 08             	sub    $0x8,%esp
f012b381:	68 00 fc 3f 01       	push   $0x13ffc00
f012b386:	50                   	push   %eax
f012b387:	e8 bd c8 fd ff       	call   f0107c49 <krealloc>
f012b38c:	83 c4 10             	add    $0x10,%esp
f012b38f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b392:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b395:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b39a:	77 17                	ja     f012b3b3 <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b39c:	83 ec 04             	sub    $0x4,%esp
f012b39f:	68 94 9f 13 f0       	push   $0xf0139f94
f012b3a4:	68 98 10 00 00       	push   $0x1098
f012b3a9:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b3ae:	e8 fd 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b3b3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b3b9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b3bc:	75 17                	jne    f012b3d5 <test_krealloc+0x192b>
			panic(
f012b3be:	83 ec 04             	sub    $0x4,%esp
f012b3c1:	68 7c a4 13 f0       	push   $0xf013a47c
f012b3c6:	68 9b 10 00 00       	push   $0x109b
f012b3cb:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b3d0:	e8 db 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b3d5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b3dc:	10 00 00 
f012b3df:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b3e4:	0f b6 d0             	movzbl %al,%edx
f012b3e7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b3ed:	01 d0                	add    %edx,%eax
f012b3ef:	48                   	dec    %eax
f012b3f0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b3f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b3fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b401:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b407:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b40d:	29 d0                	sub    %edx,%eax
f012b40f:	89 c1                	mov    %eax,%ecx
f012b411:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b418:	10 00 00 
f012b41b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b420:	0f b6 c0             	movzbl %al,%eax
f012b423:	c1 e0 04             	shl    $0x4,%eax
f012b426:	89 c2                	mov    %eax,%edx
f012b428:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b42e:	01 d0                	add    %edx,%eax
f012b430:	48                   	dec    %eax
f012b431:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b437:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b43d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b442:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b448:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b44e:	29 d0                	sub    %edx,%eax
f012b450:	01 c8                	add    %ecx,%eax
f012b452:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b458:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b45b:	39 c2                	cmp    %eax,%edx
f012b45d:	74 17                	je     f012b476 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b45f:	83 ec 04             	sub    $0x4,%esp
f012b462:	68 00 a5 13 f0       	push   $0xf013a500
f012b467:	68 9d 10 00 00       	push   $0x109d
f012b46c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b471:	e8 3a 4d fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b476:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b479:	e8 94 11 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b47e:	29 c3                	sub    %eax,%ebx
f012b480:	89 d8                	mov    %ebx,%eax
f012b482:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b487:	74 17                	je     f012b4a0 <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b489:	83 ec 04             	sub    $0x4,%esp
f012b48c:	68 04 a4 13 f0       	push   $0xf013a404
f012b491:	68 a0 10 00 00       	push   $0x10a0
f012b496:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b49b:	e8 10 4d fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b4a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b4a3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b4a9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4af:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b4b5:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b4bc:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b4bf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b4c6:	eb 21                	jmp    f012b4e9 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b4c8:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b4ce:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b4d1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b4d7:	01 c8                	add    %ecx,%eax
f012b4d9:	8a 00                	mov    (%eax),%al
f012b4db:	0f be c0             	movsbl %al,%eax
f012b4de:	01 d0                	add    %edx,%eax
f012b4e0:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b4e6:	ff 45 d8             	incl   -0x28(%ebp)
f012b4e9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b4ef:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b4f2:	7d d4                	jge    f012b4c8 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b4f4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b4fa:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b500:	42                   	inc    %edx
f012b501:	01 d2                	add    %edx,%edx
f012b503:	39 d0                	cmp    %edx,%eax
f012b505:	74 17                	je     f012b51e <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b507:	83 ec 04             	sub    $0x4,%esp
f012b50a:	68 34 a5 13 f0       	push   $0xf013a534
f012b50f:	68 ae 10 00 00       	push   $0x10ae
f012b514:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b519:	e8 92 4c fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b51e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b524:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b52a:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b531:	00 00 00 
		sums[1] = 0;
f012b534:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b53b:	00 00 00 
		sums[2] = 0;
f012b53e:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b545:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b548:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b54f:	eb 70                	jmp    f012b5c1 <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b551:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b557:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b55a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b561:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b567:	01 c8                	add    %ecx,%eax
f012b569:	8a 00                	mov    (%eax),%al
f012b56b:	0f be c0             	movsbl %al,%eax
f012b56e:	01 d0                	add    %edx,%eax
f012b570:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b576:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b57c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b57f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b586:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b58c:	01 c8                	add    %ecx,%eax
f012b58e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b592:	98                   	cwtl   
f012b593:	01 d0                	add    %edx,%eax
f012b595:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b59b:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b5a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b5a4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b5ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b5b1:	01 c8                	add    %ecx,%eax
f012b5b3:	8b 40 04             	mov    0x4(%eax),%eax
f012b5b6:	01 d0                	add    %edx,%eax
f012b5b8:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b5be:	ff 45 d8             	incl   -0x28(%ebp)
f012b5c1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b5ca:	7d 85                	jge    f012b551 <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b5cc:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b5d2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5d8:	8d 50 01             	lea    0x1(%eax),%edx
f012b5db:	89 d0                	mov    %edx,%eax
f012b5dd:	01 c0                	add    %eax,%eax
f012b5df:	01 d0                	add    %edx,%eax
f012b5e1:	01 c0                	add    %eax,%eax
f012b5e3:	01 d0                	add    %edx,%eax
f012b5e5:	39 c1                	cmp    %eax,%ecx
f012b5e7:	75 3a                	jne    f012b623 <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b5e9:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b5ef:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5f5:	8d 50 01             	lea    0x1(%eax),%edx
f012b5f8:	89 d0                	mov    %edx,%eax
f012b5fa:	01 c0                	add    %eax,%eax
f012b5fc:	01 d0                	add    %edx,%eax
f012b5fe:	01 c0                	add    %eax,%eax
f012b600:	01 d0                	add    %edx,%eax
f012b602:	39 c1                	cmp    %eax,%ecx
f012b604:	75 1d                	jne    f012b623 <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012b606:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012b60c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b612:	8d 50 01             	lea    0x1(%eax),%edx
f012b615:	89 d0                	mov    %edx,%eax
f012b617:	01 c0                	add    %eax,%eax
f012b619:	01 d0                	add    %edx,%eax
f012b61b:	01 c0                	add    %eax,%eax
f012b61d:	01 d0                	add    %edx,%eax
f012b61f:	39 c1                	cmp    %eax,%ecx
f012b621:	74 17                	je     f012b63a <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012b623:	83 ec 04             	sub    $0x4,%esp
f012b626:	68 34 a5 13 f0       	push   $0xf013a534
f012b62b:	68 c0 10 00 00       	push   $0x10c0
f012b630:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b635:	e8 76 4b fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b63a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b640:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012b646:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b64d:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b650:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b657:	eb 24                	jmp    f012b67d <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012b659:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b65f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b662:	01 c0                	add    %eax,%eax
f012b664:	89 c1                	mov    %eax,%ecx
f012b666:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b66c:	01 c8                	add    %ecx,%eax
f012b66e:	66 8b 00             	mov    (%eax),%ax
f012b671:	98                   	cwtl   
f012b672:	01 d0                	add    %edx,%eax
f012b674:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b67a:	ff 45 d8             	incl   -0x28(%ebp)
f012b67d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b683:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b686:	7d d1                	jge    f012b659 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012b688:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b68e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b694:	8d 48 01             	lea    0x1(%eax),%ecx
f012b697:	89 c8                	mov    %ecx,%eax
f012b699:	c1 e0 02             	shl    $0x2,%eax
f012b69c:	01 c8                	add    %ecx,%eax
f012b69e:	39 c2                	cmp    %eax,%edx
f012b6a0:	74 17                	je     f012b6b9 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012b6a2:	83 ec 04             	sub    $0x4,%esp
f012b6a5:	68 34 a5 13 f0       	push   $0xf013a534
f012b6aa:	68 ca 10 00 00       	push   $0x10ca
f012b6af:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b6b4:	e8 f7 4a fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012b6b9:	e8 54 0f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b6be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b6c1:	e8 f2 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b6c6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012b6cc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6d2:	83 ec 08             	sub    $0x8,%esp
f012b6d5:	6a 00                	push   $0x0
f012b6d7:	50                   	push   %eax
f012b6d8:	e8 6c c5 fd ff       	call   f0107c49 <krealloc>
f012b6dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b6e0:	e8 d3 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b6e5:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b6eb:	74 17                	je     f012b704 <test_krealloc+0x1c5a>
			panic(
f012b6ed:	83 ec 04             	sub    $0x4,%esp
f012b6f0:	68 08 8d 13 f0       	push   $0xf0138d08
f012b6f5:	68 d2 10 00 00       	push   $0x10d2
f012b6fa:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b6ff:	e8 ac 4a fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012b704:	e8 09 0f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b709:	89 c2                	mov    %eax,%edx
f012b70b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b70e:	29 c2                	sub    %eax,%edx
f012b710:	89 d0                	mov    %edx,%eax
f012b712:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012b717:	74 17                	je     f012b730 <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012b719:	83 ec 04             	sub    $0x4,%esp
f012b71c:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012b721:	68 d4 10 00 00       	push   $0x10d4
f012b726:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b72b:	e8 80 4a fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012b730:	e8 dd 0e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b735:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b738:	e8 7b 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b73d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012b743:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b749:	83 ec 0c             	sub    $0xc,%esp
f012b74c:	50                   	push   %eax
f012b74d:	e8 5b c4 fd ff       	call   f0107bad <kfree>
f012b752:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b755:	e8 5e 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b75a:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b760:	74 17                	je     f012b779 <test_krealloc+0x1ccf>
			panic(
f012b762:	83 ec 04             	sub    $0x4,%esp
f012b765:	68 08 8d 13 f0       	push   $0xf0138d08
f012b76a:	68 dc 10 00 00       	push   $0x10dc
f012b76f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b774:	e8 37 4a fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012b779:	e8 94 0e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b77e:	89 c2                	mov    %eax,%edx
f012b780:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b783:	29 c2                	sub    %eax,%edx
f012b785:	89 d0                	mov    %edx,%eax
f012b787:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012b78c:	74 17                	je     f012b7a5 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012b78e:	83 ec 04             	sub    $0x4,%esp
f012b791:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012b796:	68 de 10 00 00       	push   $0x10de
f012b79b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b7a0:	e8 0b 4a fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b7a5:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012b7ac:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012b7b3:	eb 48                	jmp    f012b7fd <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012b7b5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012b7b8:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012b7bd:	83 ec 04             	sub    $0x4,%esp
f012b7c0:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012b7c6:	51                   	push   %ecx
f012b7c7:	52                   	push   %edx
f012b7c8:	50                   	push   %eax
f012b7c9:	e8 4d b9 fd ff       	call   f010711b <get_page_table>
f012b7ce:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012b7d1:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012b7d7:	85 c0                	test   %eax,%eax
f012b7d9:	75 17                	jne    f012b7f2 <test_krealloc+0x1d48>
					panic(
f012b7db:	83 ec 04             	sub    $0x4,%esp
f012b7de:	68 f0 95 13 f0       	push   $0xf01395f0
f012b7e3:	68 eb 10 00 00       	push   $0x10eb
f012b7e8:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b7ed:	e8 be 49 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b7f2:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012b7f9:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012b7fd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012b801:	78 b2                	js     f012b7b5 <test_krealloc+0x1d0b>
f012b803:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012b807:	7f 09                	jg     f012b812 <test_krealloc+0x1d68>
f012b809:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012b810:	76 a3                	jbe    f012b7b5 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012b812:	83 ec 0c             	sub    $0xc,%esp
f012b815:	68 d2 8e 13 f0       	push   $0xf0138ed2
f012b81a:	e8 12 56 fd ff       	call   f0100e31 <cprintf>
f012b81f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012b822:	83 ec 0c             	sub    $0xc,%esp
f012b825:	68 60 a5 13 f0       	push   $0xf013a560
f012b82a:	e8 02 56 fd ff       	call   f0100e31 <cprintf>
f012b82f:	83 c4 10             	add    $0x10,%esp
	return 0;
f012b832:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012b837:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b83a:	5b                   	pop    %ebx
f012b83b:	5f                   	pop    %edi
f012b83c:	5d                   	pop    %ebp
f012b83d:	c3                   	ret    

f012b83e <test_krealloc_BF>:


int test_krealloc_BF() {
f012b83e:	55                   	push   %ebp
f012b83f:	89 e5                	mov    %esp,%ebp
f012b841:	57                   	push   %edi
f012b842:	53                   	push   %ebx
f012b843:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012b849:	83 ec 0c             	sub    $0xc,%esp
f012b84c:	68 30 8c 13 f0       	push   $0xf0138c30
f012b851:	e8 db 55 fd ff       	call   f0100e31 <cprintf>
f012b856:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b859:	83 ec 0c             	sub    $0xc,%esp
f012b85c:	68 60 8c 13 f0       	push   $0xf0138c60
f012b861:	e8 cb 55 fd ff       	call   f0100e31 <cprintf>
f012b866:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b869:	83 ec 0c             	sub    $0xc,%esp
f012b86c:	68 30 8c 13 f0       	push   $0xf0138c30
f012b871:	e8 bb 55 fd ff       	call   f0100e31 <cprintf>
f012b876:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b879:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b87d:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b881:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b887:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b88d:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b894:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b89b:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012b8a1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b8a6:	b8 00 00 00 00       	mov    $0x0,%eax
f012b8ab:	89 d7                	mov    %edx,%edi
f012b8ad:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b8af:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b8b6:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012b8bc:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b8c1:	b8 00 00 00 00       	mov    $0x0,%eax
f012b8c6:	89 d7                	mov    %edx,%edi
f012b8c8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b8ca:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012b8d0:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b8d5:	b8 00 00 00 00       	mov    $0x0,%eax
f012b8da:	89 d7                	mov    %edx,%edi
f012b8dc:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b8de:	e8 2f 0d fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b8e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b8e6:	83 ec 08             	sub    $0x8,%esp
f012b8e9:	68 00 fc 0f 00       	push   $0xffc00
f012b8ee:	6a 00                	push   $0x0
f012b8f0:	e8 54 c3 fd ff       	call   f0107c49 <krealloc>
f012b8f5:	83 c4 10             	add    $0x10,%esp
f012b8f8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b8fe:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b904:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b909:	77 17                	ja     f012b922 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b90b:	83 ec 04             	sub    $0x4,%esp
f012b90e:	68 94 9f 13 f0       	push   $0xf0139f94
f012b913:	68 1a 11 00 00       	push   $0x111a
f012b918:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b91d:	e8 8e 48 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b922:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b928:	89 c1                	mov    %eax,%ecx
f012b92a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b931:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b936:	0f b6 d0             	movzbl %al,%edx
f012b939:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b93c:	01 d0                	add    %edx,%eax
f012b93e:	48                   	dec    %eax
f012b93f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b942:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b945:	ba 00 00 00 00       	mov    $0x0,%edx
f012b94a:	f7 75 b4             	divl   -0x4c(%ebp)
f012b94d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b950:	29 d0                	sub    %edx,%eax
f012b952:	89 c3                	mov    %eax,%ebx
f012b954:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b95b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b960:	0f b6 c0             	movzbl %al,%eax
f012b963:	c1 e0 04             	shl    $0x4,%eax
f012b966:	89 c2                	mov    %eax,%edx
f012b968:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b96b:	01 d0                	add    %edx,%eax
f012b96d:	48                   	dec    %eax
f012b96e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b971:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b974:	ba 00 00 00 00       	mov    $0x0,%edx
f012b979:	f7 75 ac             	divl   -0x54(%ebp)
f012b97c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b97f:	29 d0                	sub    %edx,%eax
f012b981:	01 d8                	add    %ebx,%eax
f012b983:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b988:	39 c1                	cmp    %eax,%ecx
f012b98a:	74 17                	je     f012b9a3 <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012b98c:	83 ec 04             	sub    $0x4,%esp
f012b98f:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012b994:	68 1c 11 00 00       	push   $0x111c
f012b999:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b99e:	e8 0d 48 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b9a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b9a6:	e8 67 0c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b9ab:	29 c3                	sub    %eax,%ebx
f012b9ad:	89 d8                	mov    %ebx,%eax
f012b9af:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b9b4:	74 17                	je     f012b9cd <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012b9b6:	83 ec 04             	sub    $0x4,%esp
f012b9b9:	68 02 a0 13 f0       	push   $0xf013a002
f012b9be:	68 1f 11 00 00       	push   $0x111f
f012b9c3:	68 ee 8c 13 f0       	push   $0xf0138cee
f012b9c8:	e8 e3 47 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b9cd:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012b9d4:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b9d7:	e8 36 0c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b9dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b9df:	83 ec 08             	sub    $0x8,%esp
f012b9e2:	68 00 fc 0f 00       	push   $0xffc00
f012b9e7:	6a 00                	push   $0x0
f012b9e9:	e8 5b c2 fd ff       	call   f0107c49 <krealloc>
f012b9ee:	83 c4 10             	add    $0x10,%esp
f012b9f1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b9f7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b9fd:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012ba02:	77 17                	ja     f012ba1b <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba04:	83 ec 04             	sub    $0x4,%esp
f012ba07:	68 94 9f 13 f0       	push   $0xf0139f94
f012ba0c:	68 27 11 00 00       	push   $0x1127
f012ba11:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ba16:	e8 95 47 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012ba1b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ba21:	89 c1                	mov    %eax,%ecx
f012ba23:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012ba2a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012ba2f:	0f b6 d0             	movzbl %al,%edx
f012ba32:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012ba35:	01 d0                	add    %edx,%eax
f012ba37:	48                   	dec    %eax
f012ba38:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012ba3b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ba3e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba43:	f7 75 a4             	divl   -0x5c(%ebp)
f012ba46:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ba49:	29 d0                	sub    %edx,%eax
f012ba4b:	89 c3                	mov    %eax,%ebx
f012ba4d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012ba54:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012ba59:	0f b6 c0             	movzbl %al,%eax
f012ba5c:	c1 e0 04             	shl    $0x4,%eax
f012ba5f:	89 c2                	mov    %eax,%edx
f012ba61:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012ba64:	01 d0                	add    %edx,%eax
f012ba66:	48                   	dec    %eax
f012ba67:	89 45 98             	mov    %eax,-0x68(%ebp)
f012ba6a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012ba6d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba72:	f7 75 9c             	divl   -0x64(%ebp)
f012ba75:	8b 45 98             	mov    -0x68(%ebp),%eax
f012ba78:	29 d0                	sub    %edx,%eax
f012ba7a:	01 d8                	add    %ebx,%eax
f012ba7c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012ba81:	39 c1                	cmp    %eax,%ecx
f012ba83:	74 17                	je     f012ba9c <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012ba85:	83 ec 04             	sub    $0x4,%esp
f012ba88:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012ba8d:	68 29 11 00 00       	push   $0x1129
f012ba92:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ba97:	e8 14 47 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ba9c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ba9f:	e8 6e 0b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012baa4:	29 c3                	sub    %eax,%ebx
f012baa6:	89 d8                	mov    %ebx,%eax
f012baa8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012baad:	74 17                	je     f012bac6 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012baaf:	83 ec 04             	sub    $0x4,%esp
f012bab2:	68 02 a0 13 f0       	push   $0xf013a002
f012bab7:	68 2b 11 00 00       	push   $0x112b
f012babc:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bac1:	e8 ea 46 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bac6:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012bacd:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bad0:	e8 3d 0b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bad5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bad8:	83 ec 08             	sub    $0x8,%esp
f012badb:	68 00 fc 0f 00       	push   $0xffc00
f012bae0:	6a 00                	push   $0x0
f012bae2:	e8 62 c1 fd ff       	call   f0107c49 <krealloc>
f012bae7:	83 c4 10             	add    $0x10,%esp
f012baea:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012baf0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012baf6:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bafb:	77 17                	ja     f012bb14 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bafd:	83 ec 04             	sub    $0x4,%esp
f012bb00:	68 94 9f 13 f0       	push   $0xf0139f94
f012bb05:	68 33 11 00 00       	push   $0x1133
f012bb0a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bb0f:	e8 9c 46 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bb14:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bb1a:	89 c1                	mov    %eax,%ecx
f012bb1c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bb23:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bb28:	0f b6 d0             	movzbl %al,%edx
f012bb2b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bb2e:	01 d0                	add    %edx,%eax
f012bb30:	48                   	dec    %eax
f012bb31:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bb34:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bb37:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb3c:	f7 75 94             	divl   -0x6c(%ebp)
f012bb3f:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bb42:	29 d0                	sub    %edx,%eax
f012bb44:	89 c3                	mov    %eax,%ebx
f012bb46:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bb4d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bb52:	0f b6 c0             	movzbl %al,%eax
f012bb55:	c1 e0 04             	shl    $0x4,%eax
f012bb58:	89 c2                	mov    %eax,%edx
f012bb5a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bb5d:	01 d0                	add    %edx,%eax
f012bb5f:	48                   	dec    %eax
f012bb60:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bb63:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bb66:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb6b:	f7 75 8c             	divl   -0x74(%ebp)
f012bb6e:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bb71:	29 d0                	sub    %edx,%eax
f012bb73:	01 d8                	add    %ebx,%eax
f012bb75:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bb7a:	39 c1                	cmp    %eax,%ecx
f012bb7c:	74 17                	je     f012bb95 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012bb7e:	83 ec 04             	sub    $0x4,%esp
f012bb81:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012bb86:	68 35 11 00 00       	push   $0x1135
f012bb8b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bb90:	e8 1b 46 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bb95:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bb98:	e8 75 0a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bb9d:	29 c3                	sub    %eax,%ebx
f012bb9f:	89 d8                	mov    %ebx,%eax
f012bba1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bba6:	74 17                	je     f012bbbf <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bba8:	83 ec 04             	sub    $0x4,%esp
f012bbab:	68 02 a0 13 f0       	push   $0xf013a002
f012bbb0:	68 37 11 00 00       	push   $0x1137
f012bbb5:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bbba:	e8 f1 45 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bbbf:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bbc6:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bbc9:	e8 44 0a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bbce:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bbd1:	83 ec 08             	sub    $0x8,%esp
f012bbd4:	68 00 fc 0f 00       	push   $0xffc00
f012bbd9:	6a 00                	push   $0x0
f012bbdb:	e8 69 c0 fd ff       	call   f0107c49 <krealloc>
f012bbe0:	83 c4 10             	add    $0x10,%esp
f012bbe3:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bbe9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bbef:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bbf4:	77 17                	ja     f012bc0d <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bbf6:	83 ec 04             	sub    $0x4,%esp
f012bbf9:	68 94 9f 13 f0       	push   $0xf0139f94
f012bbfe:	68 3e 11 00 00       	push   $0x113e
f012bc03:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bc08:	e8 a3 45 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bc0d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bc13:	89 c1                	mov    %eax,%ecx
f012bc15:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bc1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bc21:	0f b6 d0             	movzbl %al,%edx
f012bc24:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bc27:	01 d0                	add    %edx,%eax
f012bc29:	48                   	dec    %eax
f012bc2a:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bc2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bc30:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc35:	f7 75 84             	divl   -0x7c(%ebp)
f012bc38:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bc3b:	29 d0                	sub    %edx,%eax
f012bc3d:	89 c3                	mov    %eax,%ebx
f012bc3f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bc46:	10 00 00 
f012bc49:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bc4e:	0f b6 c0             	movzbl %al,%eax
f012bc51:	c1 e0 04             	shl    $0x4,%eax
f012bc54:	89 c2                	mov    %eax,%edx
f012bc56:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bc5c:	01 d0                	add    %edx,%eax
f012bc5e:	48                   	dec    %eax
f012bc5f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bc65:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bc6b:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc70:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bc76:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bc7c:	29 d0                	sub    %edx,%eax
f012bc7e:	01 d8                	add    %ebx,%eax
f012bc80:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bc85:	39 c1                	cmp    %eax,%ecx
f012bc87:	74 17                	je     f012bca0 <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012bc89:	83 ec 04             	sub    $0x4,%esp
f012bc8c:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012bc91:	68 40 11 00 00       	push   $0x1140
f012bc96:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bc9b:	e8 10 45 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bca0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bca3:	e8 6a 09 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bca8:	29 c3                	sub    %eax,%ebx
f012bcaa:	89 d8                	mov    %ebx,%eax
f012bcac:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bcb1:	74 17                	je     f012bcca <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012bcb3:	83 ec 04             	sub    $0x4,%esp
f012bcb6:	68 02 a0 13 f0       	push   $0xf013a002
f012bcbb:	68 42 11 00 00       	push   $0x1142
f012bcc0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bcc5:	e8 e6 44 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bcca:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012bcd1:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bcd4:	e8 39 09 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bcd9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bcdc:	83 ec 08             	sub    $0x8,%esp
f012bcdf:	68 00 fc 1f 00       	push   $0x1ffc00
f012bce4:	6a 00                	push   $0x0
f012bce6:	e8 5e bf fd ff       	call   f0107c49 <krealloc>
f012bceb:	83 c4 10             	add    $0x10,%esp
f012bcee:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bcf4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012bcfa:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bcff:	77 17                	ja     f012bd18 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd01:	83 ec 04             	sub    $0x4,%esp
f012bd04:	68 94 9f 13 f0       	push   $0xf0139f94
f012bd09:	68 49 11 00 00       	push   $0x1149
f012bd0e:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bd13:	e8 98 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bd18:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012bd1e:	89 c1                	mov    %eax,%ecx
f012bd20:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bd27:	10 00 00 
f012bd2a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bd2f:	0f b6 d0             	movzbl %al,%edx
f012bd32:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bd38:	01 d0                	add    %edx,%eax
f012bd3a:	48                   	dec    %eax
f012bd3b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bd41:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bd47:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd4c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bd52:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bd58:	29 d0                	sub    %edx,%eax
f012bd5a:	89 c3                	mov    %eax,%ebx
f012bd5c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bd63:	10 00 00 
f012bd66:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bd6b:	0f b6 c0             	movzbl %al,%eax
f012bd6e:	c1 e0 04             	shl    $0x4,%eax
f012bd71:	89 c2                	mov    %eax,%edx
f012bd73:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bd79:	01 d0                	add    %edx,%eax
f012bd7b:	48                   	dec    %eax
f012bd7c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bd82:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bd88:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd8d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bd93:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bd99:	29 d0                	sub    %edx,%eax
f012bd9b:	01 d8                	add    %ebx,%eax
f012bd9d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bda2:	39 c1                	cmp    %eax,%ecx
f012bda4:	74 17                	je     f012bdbd <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012bda6:	83 ec 04             	sub    $0x4,%esp
f012bda9:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012bdae:	68 4b 11 00 00       	push   $0x114b
f012bdb3:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bdb8:	e8 f3 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bdbd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bdc0:	e8 4d 08 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bdc5:	29 c3                	sub    %eax,%ebx
f012bdc7:	89 d8                	mov    %ebx,%eax
f012bdc9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bdce:	74 17                	je     f012bde7 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012bdd0:	83 ec 04             	sub    $0x4,%esp
f012bdd3:	68 02 a0 13 f0       	push   $0xf013a002
f012bdd8:	68 4d 11 00 00       	push   $0x114d
f012bddd:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bde2:	e8 c9 43 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bde7:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012bdee:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bdf1:	e8 1c 08 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bdf6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bdf9:	83 ec 08             	sub    $0x8,%esp
f012bdfc:	68 00 fc 1f 00       	push   $0x1ffc00
f012be01:	6a 00                	push   $0x0
f012be03:	e8 41 be fd ff       	call   f0107c49 <krealloc>
f012be08:	83 c4 10             	add    $0x10,%esp
f012be0b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012be11:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012be17:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012be1c:	77 17                	ja     f012be35 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be1e:	83 ec 04             	sub    $0x4,%esp
f012be21:	68 94 9f 13 f0       	push   $0xf0139f94
f012be26:	68 54 11 00 00       	push   $0x1154
f012be2b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012be30:	e8 7b 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012be35:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012be3b:	89 c1                	mov    %eax,%ecx
f012be3d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012be44:	10 00 00 
f012be47:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012be4c:	0f b6 d0             	movzbl %al,%edx
f012be4f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012be55:	01 d0                	add    %edx,%eax
f012be57:	48                   	dec    %eax
f012be58:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012be5e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012be64:	ba 00 00 00 00       	mov    $0x0,%edx
f012be69:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012be6f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012be75:	29 d0                	sub    %edx,%eax
f012be77:	89 c3                	mov    %eax,%ebx
f012be79:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012be80:	10 00 00 
f012be83:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012be88:	0f b6 c0             	movzbl %al,%eax
f012be8b:	c1 e0 04             	shl    $0x4,%eax
f012be8e:	89 c2                	mov    %eax,%edx
f012be90:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012be96:	01 d0                	add    %edx,%eax
f012be98:	48                   	dec    %eax
f012be99:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012be9f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bea5:	ba 00 00 00 00       	mov    $0x0,%edx
f012beaa:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012beb0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012beb6:	29 d0                	sub    %edx,%eax
f012beb8:	01 d8                	add    %ebx,%eax
f012beba:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bebf:	39 c1                	cmp    %eax,%ecx
f012bec1:	74 17                	je     f012beda <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012bec3:	83 ec 04             	sub    $0x4,%esp
f012bec6:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012becb:	68 56 11 00 00       	push   $0x1156
f012bed0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bed5:	e8 d6 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012beda:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bedd:	e8 30 07 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bee2:	29 c3                	sub    %eax,%ebx
f012bee4:	89 d8                	mov    %ebx,%eax
f012bee6:	3d 00 02 00 00       	cmp    $0x200,%eax
f012beeb:	74 17                	je     f012bf04 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012beed:	83 ec 04             	sub    $0x4,%esp
f012bef0:	68 02 a0 13 f0       	push   $0xf013a002
f012bef5:	68 58 11 00 00       	push   $0x1158
f012befa:	68 ee 8c 13 f0       	push   $0xf0138cee
f012beff:	e8 ac 42 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bf04:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012bf0b:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf0e:	e8 ff 06 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bf13:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bf16:	83 ec 08             	sub    $0x8,%esp
f012bf19:	68 00 fc 2f 00       	push   $0x2ffc00
f012bf1e:	6a 00                	push   $0x0
f012bf20:	e8 24 bd fd ff       	call   f0107c49 <krealloc>
f012bf25:	83 c4 10             	add    $0x10,%esp
f012bf28:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bf2e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012bf34:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bf39:	77 17                	ja     f012bf52 <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf3b:	83 ec 04             	sub    $0x4,%esp
f012bf3e:	68 94 9f 13 f0       	push   $0xf0139f94
f012bf43:	68 5f 11 00 00       	push   $0x115f
f012bf48:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bf4d:	e8 5e 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bf52:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012bf58:	89 c1                	mov    %eax,%ecx
f012bf5a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bf61:	10 00 00 
f012bf64:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bf69:	0f b6 d0             	movzbl %al,%edx
f012bf6c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bf72:	01 d0                	add    %edx,%eax
f012bf74:	48                   	dec    %eax
f012bf75:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bf7b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bf81:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf86:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bf8c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bf92:	29 d0                	sub    %edx,%eax
f012bf94:	89 c3                	mov    %eax,%ebx
f012bf96:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bf9d:	10 00 00 
f012bfa0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bfa5:	0f b6 c0             	movzbl %al,%eax
f012bfa8:	c1 e0 04             	shl    $0x4,%eax
f012bfab:	89 c2                	mov    %eax,%edx
f012bfad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bfb3:	01 d0                	add    %edx,%eax
f012bfb5:	48                   	dec    %eax
f012bfb6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bfbc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bfc2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfc7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bfcd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bfd3:	29 d0                	sub    %edx,%eax
f012bfd5:	01 d8                	add    %ebx,%eax
f012bfd7:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012bfdc:	39 c1                	cmp    %eax,%ecx
f012bfde:	74 17                	je     f012bff7 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012bfe0:	83 ec 04             	sub    $0x4,%esp
f012bfe3:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012bfe8:	68 61 11 00 00       	push   $0x1161
f012bfed:	68 ee 8c 13 f0       	push   $0xf0138cee
f012bff2:	e8 b9 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012bff7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bffa:	e8 13 06 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bfff:	29 c3                	sub    %eax,%ebx
f012c001:	89 d8                	mov    %ebx,%eax
f012c003:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c008:	74 17                	je     f012c021 <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c00a:	83 ec 04             	sub    $0x4,%esp
f012c00d:	68 38 91 13 f0       	push   $0xf0139138
f012c012:	68 63 11 00 00       	push   $0x1163
f012c017:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c01c:	e8 8f 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c021:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c028:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c02b:	e8 e2 05 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c030:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c033:	83 ec 08             	sub    $0x8,%esp
f012c036:	68 00 fc 2f 00       	push   $0x2ffc00
f012c03b:	6a 00                	push   $0x0
f012c03d:	e8 07 bc fd ff       	call   f0107c49 <krealloc>
f012c042:	83 c4 10             	add    $0x10,%esp
f012c045:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c04b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c051:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c056:	77 17                	ja     f012c06f <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c058:	83 ec 04             	sub    $0x4,%esp
f012c05b:	68 94 9f 13 f0       	push   $0xf0139f94
f012c060:	68 6a 11 00 00       	push   $0x116a
f012c065:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c06a:	e8 41 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c06f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c075:	89 c1                	mov    %eax,%ecx
f012c077:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c07e:	10 00 00 
f012c081:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012c086:	0f b6 d0             	movzbl %al,%edx
f012c089:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c08f:	01 d0                	add    %edx,%eax
f012c091:	48                   	dec    %eax
f012c092:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c098:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c09e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0a3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c0a9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c0af:	29 d0                	sub    %edx,%eax
f012c0b1:	89 c3                	mov    %eax,%ebx
f012c0b3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c0ba:	10 00 00 
f012c0bd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012c0c2:	0f b6 c0             	movzbl %al,%eax
f012c0c5:	c1 e0 04             	shl    $0x4,%eax
f012c0c8:	89 c2                	mov    %eax,%edx
f012c0ca:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c0d0:	01 d0                	add    %edx,%eax
f012c0d2:	48                   	dec    %eax
f012c0d3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c0d9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c0df:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0e4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c0ea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c0f0:	29 d0                	sub    %edx,%eax
f012c0f2:	01 d8                	add    %ebx,%eax
f012c0f4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c0f9:	39 c1                	cmp    %eax,%ecx
f012c0fb:	74 17                	je     f012c114 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c0fd:	83 ec 04             	sub    $0x4,%esp
f012c100:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012c105:	68 6c 11 00 00       	push   $0x116c
f012c10a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c10f:	e8 9c 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c114:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c117:	e8 f6 04 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c11c:	29 c3                	sub    %eax,%ebx
f012c11e:	89 d8                	mov    %ebx,%eax
f012c120:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c125:	74 17                	je     f012c13e <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c127:	83 ec 04             	sub    $0x4,%esp
f012c12a:	68 02 a0 13 f0       	push   $0xf013a002
f012c12f:	68 6e 11 00 00       	push   $0x116e
f012c134:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c139:	e8 72 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c13e:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c145:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c148:	e8 c5 04 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c14d:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c150:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c157:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c15a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c160:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c166:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c16c:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c16f:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c171:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c177:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c17d:	01 c2                	add    %eax,%edx
f012c17f:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c182:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c184:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c18a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c190:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c197:	eb 11                	jmp    f012c1aa <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c199:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c19c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c1a2:	01 d0                	add    %edx,%eax
f012c1a4:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c1a7:	ff 45 f4             	incl   -0xc(%ebp)
f012c1aa:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c1b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c1b3:	7d e4                	jge    f012c199 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c1b5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c1bb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c1c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c1c7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c1cd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c1d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c1da:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c1e0:	01 d0                	add    %edx,%eax
f012c1e2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c1e8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c1ee:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c1f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c1fb:	eb 1b                	jmp    f012c218 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c1fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c200:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c207:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c20d:	01 d0                	add    %edx,%eax
f012c20f:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c215:	ff 45 f0             	incl   -0x10(%ebp)
f012c218:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c21e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c221:	7d da                	jge    f012c1fd <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c223:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c229:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c22f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c236:	eb 17                	jmp    f012c24f <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c238:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c23b:	01 c0                	add    %eax,%eax
f012c23d:	89 c2                	mov    %eax,%edx
f012c23f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c245:	01 d0                	add    %edx,%eax
f012c247:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c24c:	ff 45 ec             	incl   -0x14(%ebp)
f012c24f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c255:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c258:	7d de                	jge    f012c238 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c25a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c260:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c266:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c26c:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c271:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c277:	01 c0                	add    %eax,%eax
f012c279:	89 c2                	mov    %eax,%edx
f012c27b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c281:	01 d0                	add    %edx,%eax
f012c283:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c288:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c28e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c294:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c29b:	eb 49                	jmp    f012c2e6 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c29d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c2a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c2a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c2ad:	01 d0                	add    %edx,%eax
f012c2af:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c2b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c2b5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c2bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c2c2:	01 d0                	add    %edx,%eax
f012c2c4:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c2ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c2cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c2d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c2da:	01 d0                	add    %edx,%eax
f012c2dc:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c2e3:	ff 45 e8             	incl   -0x18(%ebp)
f012c2e6:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c2ec:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c2ef:	7d ac                	jge    f012c29d <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c2f1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c2f7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c2fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c303:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c306:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c30c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c312:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c318:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c31f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c325:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c32c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c332:	01 d0                	add    %edx,%eax
f012c334:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c337:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c33d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c344:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c34a:	01 d0                	add    %edx,%eax
f012c34c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c352:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c358:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c35f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c365:	01 d0                	add    %edx,%eax
f012c367:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c36e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c374:	8a 00                	mov    (%eax),%al
f012c376:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c379:	75 17                	jne    f012c392 <test_krealloc_BF+0xb54>
f012c37b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c381:	89 c2                	mov    %eax,%edx
f012c383:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c389:	01 d0                	add    %edx,%eax
f012c38b:	8a 00                	mov    (%eax),%al
f012c38d:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c390:	74 17                	je     f012c3a9 <test_krealloc_BF+0xb6b>
			panic(
f012c392:	83 ec 04             	sub    $0x4,%esp
f012c395:	68 20 a0 13 f0       	push   $0xf013a020
f012c39a:	68 b1 11 00 00       	push   $0x11b1
f012c39f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c3a4:	e8 07 3e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c3a9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c3af:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c3b5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c3bb:	8a 00                	mov    (%eax),%al
f012c3bd:	3c 02                	cmp    $0x2,%al
f012c3bf:	75 16                	jne    f012c3d7 <test_krealloc_BF+0xb99>
f012c3c1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c3c7:	89 c2                	mov    %eax,%edx
f012c3c9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c3cf:	01 d0                	add    %edx,%eax
f012c3d1:	8a 00                	mov    (%eax),%al
f012c3d3:	3c 02                	cmp    $0x2,%al
f012c3d5:	74 20                	je     f012c3f7 <test_krealloc_BF+0xbb9>
			panic(
f012c3d7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c3dd:	8a 00                	mov    (%eax),%al
f012c3df:	0f be c0             	movsbl %al,%eax
f012c3e2:	50                   	push   %eax
f012c3e3:	68 60 a0 13 f0       	push   $0xf013a060
f012c3e8:	68 b7 11 00 00       	push   $0x11b7
f012c3ed:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c3f2:	e8 b9 3d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c3f7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c3fd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c403:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c409:	8b 00                	mov    (%eax),%eax
f012c40b:	83 f8 03             	cmp    $0x3,%eax
f012c40e:	75 1c                	jne    f012c42c <test_krealloc_BF+0xbee>
f012c410:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c416:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c41d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c423:	01 d0                	add    %edx,%eax
f012c425:	8b 00                	mov    (%eax),%eax
f012c427:	83 f8 03             	cmp    $0x3,%eax
f012c42a:	74 17                	je     f012c443 <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c42c:	83 ec 04             	sub    $0x4,%esp
f012c42f:	68 ac a0 13 f0       	push   $0xf013a0ac
f012c434:	68 bb 11 00 00       	push   $0x11bb
f012c439:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c43e:	e8 6d 3d fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c443:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c449:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c44f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c455:	8b 00                	mov    (%eax),%eax
f012c457:	83 f8 04             	cmp    $0x4,%eax
f012c45a:	75 1c                	jne    f012c478 <test_krealloc_BF+0xc3a>
f012c45c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c462:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c469:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c46f:	01 d0                	add    %edx,%eax
f012c471:	8b 00                	mov    (%eax),%eax
f012c473:	83 f8 04             	cmp    $0x4,%eax
f012c476:	74 17                	je     f012c48f <test_krealloc_BF+0xc51>
			panic(
f012c478:	83 ec 04             	sub    $0x4,%esp
f012c47b:	68 20 a0 13 f0       	push   $0xf013a020
f012c480:	68 c0 11 00 00       	push   $0x11c0
f012c485:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c48a:	e8 21 3d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c48f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c495:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c49b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c4a1:	66 8b 00             	mov    (%eax),%ax
f012c4a4:	66 83 f8 05          	cmp    $0x5,%ax
f012c4a8:	75 1b                	jne    f012c4c5 <test_krealloc_BF+0xc87>
f012c4aa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4b0:	01 c0                	add    %eax,%eax
f012c4b2:	89 c2                	mov    %eax,%edx
f012c4b4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c4ba:	01 d0                	add    %edx,%eax
f012c4bc:	66 8b 00             	mov    (%eax),%ax
f012c4bf:	66 83 f8 05          	cmp    $0x5,%ax
f012c4c3:	74 17                	je     f012c4dc <test_krealloc_BF+0xc9e>
			panic(
f012c4c5:	83 ec 04             	sub    $0x4,%esp
f012c4c8:	68 20 a0 13 f0       	push   $0xf013a020
f012c4cd:	68 c5 11 00 00       	push   $0x11c5
f012c4d2:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c4d7:	e8 d4 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c4dc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c4e2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c4e8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c4ee:	66 8b 00             	mov    (%eax),%ax
f012c4f1:	66 83 f8 06          	cmp    $0x6,%ax
f012c4f5:	75 1b                	jne    f012c512 <test_krealloc_BF+0xcd4>
f012c4f7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c4fd:	01 c0                	add    %eax,%eax
f012c4ff:	89 c2                	mov    %eax,%edx
f012c501:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c507:	01 d0                	add    %edx,%eax
f012c509:	66 8b 00             	mov    (%eax),%ax
f012c50c:	66 83 f8 06          	cmp    $0x6,%ax
f012c510:	74 17                	je     f012c529 <test_krealloc_BF+0xceb>
			panic(
f012c512:	83 ec 04             	sub    $0x4,%esp
f012c515:	68 20 a0 13 f0       	push   $0xf013a020
f012c51a:	68 ca 11 00 00       	push   $0x11ca
f012c51f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c524:	e8 87 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c529:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c52f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c535:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c53b:	8a 00                	mov    (%eax),%al
f012c53d:	3c 07                	cmp    $0x7,%al
f012c53f:	75 1b                	jne    f012c55c <test_krealloc_BF+0xd1e>
f012c541:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c547:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c54e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c554:	01 d0                	add    %edx,%eax
f012c556:	8a 00                	mov    (%eax),%al
f012c558:	3c 07                	cmp    $0x7,%al
f012c55a:	74 17                	je     f012c573 <test_krealloc_BF+0xd35>
			panic(
f012c55c:	83 ec 04             	sub    $0x4,%esp
f012c55f:	68 20 a0 13 f0       	push   $0xf013a020
f012c564:	68 cf 11 00 00       	push   $0x11cf
f012c569:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c56e:	e8 3d 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c573:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c579:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c57d:	66 83 f8 07          	cmp    $0x7,%ax
f012c581:	75 1f                	jne    f012c5a2 <test_krealloc_BF+0xd64>
f012c583:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c589:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c590:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c596:	01 d0                	add    %edx,%eax
f012c598:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c59c:	66 83 f8 07          	cmp    $0x7,%ax
f012c5a0:	74 17                	je     f012c5b9 <test_krealloc_BF+0xd7b>
			panic(
f012c5a2:	83 ec 04             	sub    $0x4,%esp
f012c5a5:	68 20 a0 13 f0       	push   $0xf013a020
f012c5aa:	68 d2 11 00 00       	push   $0x11d2
f012c5af:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c5b4:	e8 f7 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c5b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c5bf:	8b 40 04             	mov    0x4(%eax),%eax
f012c5c2:	83 f8 07             	cmp    $0x7,%eax
f012c5c5:	75 1d                	jne    f012c5e4 <test_krealloc_BF+0xda6>
f012c5c7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c5cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c5d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c5da:	01 d0                	add    %edx,%eax
f012c5dc:	8b 40 04             	mov    0x4(%eax),%eax
f012c5df:	83 f8 07             	cmp    $0x7,%eax
f012c5e2:	74 17                	je     f012c5fb <test_krealloc_BF+0xdbd>
			panic(
f012c5e4:	83 ec 04             	sub    $0x4,%esp
f012c5e7:	68 20 a0 13 f0       	push   $0xf013a020
f012c5ec:	68 d5 11 00 00       	push   $0x11d5
f012c5f1:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c5f6:	e8 b5 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c5fb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c601:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c607:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c60d:	8a 00                	mov    (%eax),%al
f012c60f:	3c 08                	cmp    $0x8,%al
f012c611:	75 1b                	jne    f012c62e <test_krealloc_BF+0xdf0>
f012c613:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c619:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c620:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c626:	01 d0                	add    %edx,%eax
f012c628:	8a 00                	mov    (%eax),%al
f012c62a:	3c 08                	cmp    $0x8,%al
f012c62c:	74 17                	je     f012c645 <test_krealloc_BF+0xe07>
			panic(
f012c62e:	83 ec 04             	sub    $0x4,%esp
f012c631:	68 20 a0 13 f0       	push   $0xf013a020
f012c636:	68 da 11 00 00       	push   $0x11da
f012c63b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c640:	e8 6b 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c645:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c64b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c64f:	66 83 f8 08          	cmp    $0x8,%ax
f012c653:	75 1f                	jne    f012c674 <test_krealloc_BF+0xe36>
f012c655:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c65b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c662:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c668:	01 d0                	add    %edx,%eax
f012c66a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c66e:	66 83 f8 08          	cmp    $0x8,%ax
f012c672:	74 17                	je     f012c68b <test_krealloc_BF+0xe4d>
			panic(
f012c674:	83 ec 04             	sub    $0x4,%esp
f012c677:	68 20 a0 13 f0       	push   $0xf013a020
f012c67c:	68 dd 11 00 00       	push   $0x11dd
f012c681:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c686:	e8 25 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c68b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c691:	8b 40 04             	mov    0x4(%eax),%eax
f012c694:	83 f8 08             	cmp    $0x8,%eax
f012c697:	75 1d                	jne    f012c6b6 <test_krealloc_BF+0xe78>
f012c699:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c69f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6ac:	01 d0                	add    %edx,%eax
f012c6ae:	8b 40 04             	mov    0x4(%eax),%eax
f012c6b1:	83 f8 08             	cmp    $0x8,%eax
f012c6b4:	74 17                	je     f012c6cd <test_krealloc_BF+0xe8f>
			panic(
f012c6b6:	83 ec 04             	sub    $0x4,%esp
f012c6b9:	68 20 a0 13 f0       	push   $0xf013a020
f012c6be:	68 e0 11 00 00       	push   $0x11e0
f012c6c3:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c6c8:	e8 e3 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c6cd:	e8 40 ff fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c6d2:	89 c2                	mov    %eax,%edx
f012c6d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c6d7:	39 c2                	cmp    %eax,%edx
f012c6d9:	74 17                	je     f012c6f2 <test_krealloc_BF+0xeb4>
			panic(
f012c6db:	83 ec 04             	sub    $0x4,%esp
f012c6de:	68 e0 a0 13 f0       	push   $0xf013a0e0
f012c6e3:	68 e4 11 00 00       	push   $0x11e4
f012c6e8:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c6ed:	e8 be 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c6f2:	83 ec 0c             	sub    $0xc,%esp
f012c6f5:	68 2c a1 13 f0       	push   $0xf013a12c
f012c6fa:	e8 32 47 fd ff       	call   f0100e31 <cprintf>
f012c6ff:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c702:	e8 0b ff fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c707:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c70a:	e8 a9 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c70f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c715:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c71b:	83 ec 08             	sub    $0x8,%esp
f012c71e:	6a 00                	push   $0x0
f012c720:	50                   	push   %eax
f012c721:	e8 23 b5 fd ff       	call   f0107c49 <krealloc>
f012c726:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c729:	e8 8a 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c72e:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c734:	74 17                	je     f012c74d <test_krealloc_BF+0xf0f>
			panic(
f012c736:	83 ec 04             	sub    $0x4,%esp
f012c739:	68 50 a1 13 f0       	push   $0xf013a150
f012c73e:	68 f1 11 00 00       	push   $0x11f1
f012c743:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c748:	e8 63 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c74d:	e8 c0 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c752:	89 c2                	mov    %eax,%edx
f012c754:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c757:	29 c2                	sub    %eax,%edx
f012c759:	89 d0                	mov    %edx,%eax
f012c75b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c760:	74 17                	je     f012c779 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012c762:	83 ec 04             	sub    $0x4,%esp
f012c765:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012c76a:	68 f3 11 00 00       	push   $0x11f3
f012c76f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c774:	e8 37 3a fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c779:	e8 94 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c77e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c781:	e8 32 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c786:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c78c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c792:	83 ec 08             	sub    $0x8,%esp
f012c795:	6a 00                	push   $0x0
f012c797:	50                   	push   %eax
f012c798:	e8 ac b4 fd ff       	call   f0107c49 <krealloc>
f012c79d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c7a0:	e8 13 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c7a5:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c7ab:	74 17                	je     f012c7c4 <test_krealloc_BF+0xf86>
			panic(
f012c7ad:	83 ec 04             	sub    $0x4,%esp
f012c7b0:	68 50 a1 13 f0       	push   $0xf013a150
f012c7b5:	68 fc 11 00 00       	push   $0x11fc
f012c7ba:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c7bf:	e8 ec 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c7c4:	e8 49 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c7c9:	89 c2                	mov    %eax,%edx
f012c7cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7ce:	29 c2                	sub    %eax,%edx
f012c7d0:	89 d0                	mov    %edx,%eax
f012c7d2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7d7:	74 17                	je     f012c7f0 <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012c7d9:	83 ec 04             	sub    $0x4,%esp
f012c7dc:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012c7e1:	68 fe 11 00 00       	push   $0x11fe
f012c7e6:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c7eb:	e8 c0 39 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c7f0:	e8 1d fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c7f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c7f8:	e8 bb 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c7fd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c803:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c809:	83 ec 08             	sub    $0x8,%esp
f012c80c:	6a 00                	push   $0x0
f012c80e:	50                   	push   %eax
f012c80f:	e8 35 b4 fd ff       	call   f0107c49 <krealloc>
f012c814:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c817:	e8 9c 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c81c:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c822:	74 17                	je     f012c83b <test_krealloc_BF+0xffd>
			panic(
f012c824:	83 ec 04             	sub    $0x4,%esp
f012c827:	68 08 8d 13 f0       	push   $0xf0138d08
f012c82c:	68 06 12 00 00       	push   $0x1206
f012c831:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c836:	e8 75 39 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c83b:	e8 d2 fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c840:	89 c2                	mov    %eax,%edx
f012c842:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c845:	29 c2                	sub    %eax,%edx
f012c847:	89 d0                	mov    %edx,%eax
f012c849:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c84e:	74 17                	je     f012c867 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012c850:	83 ec 04             	sub    $0x4,%esp
f012c853:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012c858:	68 08 12 00 00       	push   $0x1208
f012c85d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c862:	e8 49 39 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c867:	e8 a6 fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c86c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c86f:	e8 44 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c874:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c87a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c880:	83 ec 08             	sub    $0x8,%esp
f012c883:	6a 00                	push   $0x0
f012c885:	50                   	push   %eax
f012c886:	e8 be b3 fd ff       	call   f0107c49 <krealloc>
f012c88b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c88e:	e8 25 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c893:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c899:	74 17                	je     f012c8b2 <test_krealloc_BF+0x1074>
			panic(
f012c89b:	83 ec 04             	sub    $0x4,%esp
f012c89e:	68 50 a1 13 f0       	push   $0xf013a150
f012c8a3:	68 10 12 00 00       	push   $0x1210
f012c8a8:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c8ad:	e8 fe 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c8b2:	e8 5b fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c8b7:	89 c2                	mov    %eax,%edx
f012c8b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8bc:	29 c2                	sub    %eax,%edx
f012c8be:	89 d0                	mov    %edx,%eax
f012c8c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c8c5:	74 17                	je     f012c8de <test_krealloc_BF+0x10a0>
			panic(
f012c8c7:	83 ec 04             	sub    $0x4,%esp
f012c8ca:	68 f8 a1 13 f0       	push   $0xf013a1f8
f012c8cf:	68 13 12 00 00       	push   $0x1213
f012c8d4:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c8d9:	e8 d2 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c8de:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c8e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c8ec:	eb 48                	jmp    f012c936 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c8ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c8f1:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012c8f6:	83 ec 04             	sub    $0x4,%esp
f012c8f9:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012c8ff:	51                   	push   %ecx
f012c900:	52                   	push   %edx
f012c901:	50                   	push   %eax
f012c902:	e8 14 a8 fd ff       	call   f010711b <get_page_table>
f012c907:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c90a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012c910:	85 c0                	test   %eax,%eax
f012c912:	75 17                	jne    f012c92b <test_krealloc_BF+0x10ed>
					panic(
f012c914:	83 ec 04             	sub    $0x4,%esp
f012c917:	68 f0 95 13 f0       	push   $0xf01395f0
f012c91c:	68 1f 12 00 00       	push   $0x121f
f012c921:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c926:	e8 85 38 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c92b:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c932:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c936:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c93a:	78 b2                	js     f012c8ee <test_krealloc_BF+0x10b0>
f012c93c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c940:	7f 09                	jg     f012c94b <test_krealloc_BF+0x110d>
f012c942:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c949:	76 a3                	jbe    f012c8ee <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c94b:	83 ec 0c             	sub    $0xc,%esp
f012c94e:	68 37 a2 13 f0       	push   $0xf013a237
f012c953:	e8 d9 44 fd ff       	call   f0100e31 <cprintf>
f012c958:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c95b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c961:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c967:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c96e:	eb 21                	jmp    f012c991 <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012c970:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012c976:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c979:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c97f:	01 c8                	add    %ecx,%eax
f012c981:	8a 00                	mov    (%eax),%al
f012c983:	0f be c0             	movsbl %al,%eax
f012c986:	01 d0                	add    %edx,%eax
f012c988:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c98e:	ff 45 dc             	incl   -0x24(%ebp)
f012c991:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c997:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c99a:	7d d4                	jge    f012c970 <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c99c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012c9a2:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012c9a8:	42                   	inc    %edx
f012c9a9:	01 d2                	add    %edx,%edx
f012c9ab:	39 d0                	cmp    %edx,%eax
f012c9ad:	74 17                	je     f012c9c6 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012c9af:	83 ec 04             	sub    $0x4,%esp
f012c9b2:	68 40 a2 13 f0       	push   $0xf013a240
f012c9b7:	68 31 12 00 00       	push   $0x1231
f012c9bc:	68 ee 8c 13 f0       	push   $0xf0138cee
f012c9c1:	e8 ea 37 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c9c6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c9cc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c9d2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c9d9:	eb 25                	jmp    f012ca00 <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012c9db:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012c9e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c9e4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c9eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c9f1:	01 c8                	add    %ecx,%eax
f012c9f3:	8b 00                	mov    (%eax),%eax
f012c9f5:	01 d0                	add    %edx,%eax
f012c9f7:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c9fd:	ff 45 dc             	incl   -0x24(%ebp)
f012ca00:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ca06:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca09:	7d d0                	jge    f012c9db <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ca0b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ca11:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012ca17:	42                   	inc    %edx
f012ca18:	c1 e2 02             	shl    $0x2,%edx
f012ca1b:	39 d0                	cmp    %edx,%eax
f012ca1d:	74 17                	je     f012ca36 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012ca1f:	83 ec 04             	sub    $0x4,%esp
f012ca22:	68 40 a2 13 f0       	push   $0xf013a240
f012ca27:	68 3b 12 00 00       	push   $0x123b
f012ca2c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ca31:	e8 7a 37 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ca36:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ca3c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ca42:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca49:	eb 24                	jmp    f012ca6f <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012ca4b:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ca51:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ca54:	01 c0                	add    %eax,%eax
f012ca56:	89 c1                	mov    %eax,%ecx
f012ca58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ca5e:	01 c8                	add    %ecx,%eax
f012ca60:	66 8b 00             	mov    (%eax),%ax
f012ca63:	98                   	cwtl   
f012ca64:	01 d0                	add    %edx,%eax
f012ca66:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ca6c:	ff 45 dc             	incl   -0x24(%ebp)
f012ca6f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ca75:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca78:	7d d1                	jge    f012ca4b <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ca7a:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ca80:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ca86:	8d 48 01             	lea    0x1(%eax),%ecx
f012ca89:	89 c8                	mov    %ecx,%eax
f012ca8b:	c1 e0 02             	shl    $0x2,%eax
f012ca8e:	01 c8                	add    %ecx,%eax
f012ca90:	39 c2                	cmp    %eax,%edx
f012ca92:	74 17                	je     f012caab <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ca94:	83 ec 04             	sub    $0x4,%esp
f012ca97:	68 40 a2 13 f0       	push   $0xf013a240
f012ca9c:	68 45 12 00 00       	push   $0x1245
f012caa1:	68 ee 8c 13 f0       	push   $0xf0138cee
f012caa6:	e8 05 37 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012caab:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cab1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cab7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cabe:	eb 70                	jmp    f012cb30 <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012cac0:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012cac6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cac9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cad0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cad6:	01 c8                	add    %ecx,%eax
f012cad8:	8a 00                	mov    (%eax),%al
f012cada:	0f be c0             	movsbl %al,%eax
f012cadd:	01 d0                	add    %edx,%eax
f012cadf:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012cae5:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012caeb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012caee:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012caf5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cafb:	01 c8                	add    %ecx,%eax
f012cafd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb01:	98                   	cwtl   
f012cb02:	01 d0                	add    %edx,%eax
f012cb04:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012cb0a:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cb10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb13:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb20:	01 c8                	add    %ecx,%eax
f012cb22:	8b 40 04             	mov    0x4(%eax),%eax
f012cb25:	01 d0                	add    %edx,%eax
f012cb27:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb2d:	ff 45 dc             	incl   -0x24(%ebp)
f012cb30:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb36:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cb39:	7d 85                	jge    f012cac0 <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cb3b:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012cb41:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb47:	8d 50 01             	lea    0x1(%eax),%edx
f012cb4a:	89 d0                	mov    %edx,%eax
f012cb4c:	01 c0                	add    %eax,%eax
f012cb4e:	01 d0                	add    %edx,%eax
f012cb50:	01 c0                	add    %eax,%eax
f012cb52:	01 d0                	add    %edx,%eax
f012cb54:	39 c1                	cmp    %eax,%ecx
f012cb56:	75 3a                	jne    f012cb92 <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cb58:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cb5e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb64:	8d 50 01             	lea    0x1(%eax),%edx
f012cb67:	89 d0                	mov    %edx,%eax
f012cb69:	01 c0                	add    %eax,%eax
f012cb6b:	01 d0                	add    %edx,%eax
f012cb6d:	01 c0                	add    %eax,%eax
f012cb6f:	01 d0                	add    %edx,%eax
f012cb71:	39 c1                	cmp    %eax,%ecx
f012cb73:	75 1d                	jne    f012cb92 <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cb75:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cb7b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb81:	8d 50 01             	lea    0x1(%eax),%edx
f012cb84:	89 d0                	mov    %edx,%eax
f012cb86:	01 c0                	add    %eax,%eax
f012cb88:	01 d0                	add    %edx,%eax
f012cb8a:	01 c0                	add    %eax,%eax
f012cb8c:	01 d0                	add    %edx,%eax
f012cb8e:	39 c1                	cmp    %eax,%ecx
f012cb90:	74 17                	je     f012cba9 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cb92:	83 ec 04             	sub    $0x4,%esp
f012cb95:	68 40 a2 13 f0       	push   $0xf013a240
f012cb9a:	68 53 12 00 00       	push   $0x1253
f012cb9f:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cba4:	e8 07 36 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cba9:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cbb0:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cbb3:	e8 5a fa fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cbb8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cbbb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cbc1:	83 ec 08             	sub    $0x8,%esp
f012cbc4:	68 00 3c 00 00       	push   $0x3c00
f012cbc9:	50                   	push   %eax
f012cbca:	e8 7a b0 fd ff       	call   f0107c49 <krealloc>
f012cbcf:	83 c4 10             	add    $0x10,%esp
f012cbd2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cbd8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cbde:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cbe3:	77 17                	ja     f012cbfc <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cbe5:	83 ec 04             	sub    $0x4,%esp
f012cbe8:	68 94 9f 13 f0       	push   $0xf0139f94
f012cbed:	68 5f 12 00 00       	push   $0x125f
f012cbf2:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cbf7:	e8 b4 35 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cbfc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cc02:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cc08:	74 17                	je     f012cc21 <test_krealloc_BF+0x13e3>
			panic(
f012cc0a:	83 ec 04             	sub    $0x4,%esp
f012cc0d:	68 78 a2 13 f0       	push   $0xf013a278
f012cc12:	68 62 12 00 00       	push   $0x1262
f012cc17:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cc1c:	e8 8f 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cc21:	e8 ec f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cc26:	89 c2                	mov    %eax,%edx
f012cc28:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc2b:	39 c2                	cmp    %eax,%edx
f012cc2d:	74 17                	je     f012cc46 <test_krealloc_BF+0x1408>
			panic(
f012cc2f:	83 ec 04             	sub    $0x4,%esp
f012cc32:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012cc37:	68 65 12 00 00       	push   $0x1265
f012cc3c:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cc41:	e8 6a 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cc46:	e8 c7 f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cc4b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cc4e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cc54:	83 ec 08             	sub    $0x8,%esp
f012cc57:	68 00 fc 0f 00       	push   $0xffc00
f012cc5c:	50                   	push   %eax
f012cc5d:	e8 e7 af fd ff       	call   f0107c49 <krealloc>
f012cc62:	83 c4 10             	add    $0x10,%esp
f012cc65:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc6b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cc71:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc76:	77 17                	ja     f012cc8f <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc78:	83 ec 04             	sub    $0x4,%esp
f012cc7b:	68 94 9f 13 f0       	push   $0xf0139f94
f012cc80:	68 6b 12 00 00       	push   $0x126b
f012cc85:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cc8a:	e8 21 35 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012cc8f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cc95:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cc9b:	74 17                	je     f012ccb4 <test_krealloc_BF+0x1476>
			panic(
f012cc9d:	83 ec 04             	sub    $0x4,%esp
f012cca0:	68 78 a2 13 f0       	push   $0xf013a278
f012cca5:	68 6e 12 00 00       	push   $0x126e
f012ccaa:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ccaf:	e8 fc 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ccb4:	e8 59 f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ccb9:	89 c2                	mov    %eax,%edx
f012ccbb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ccbe:	39 c2                	cmp    %eax,%edx
f012ccc0:	74 17                	je     f012ccd9 <test_krealloc_BF+0x149b>
			panic(
f012ccc2:	83 ec 04             	sub    $0x4,%esp
f012ccc5:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012ccca:	68 71 12 00 00       	push   $0x1271
f012cccf:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ccd4:	e8 d7 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ccd9:	e8 34 f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ccde:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cce1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cce7:	83 ec 08             	sub    $0x8,%esp
f012ccea:	68 00 fc 0f 00       	push   $0xffc00
f012ccef:	50                   	push   %eax
f012ccf0:	e8 54 af fd ff       	call   f0107c49 <krealloc>
f012ccf5:	83 c4 10             	add    $0x10,%esp
f012ccf8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ccfe:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cd04:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd09:	77 17                	ja     f012cd22 <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd0b:	83 ec 04             	sub    $0x4,%esp
f012cd0e:	68 94 9f 13 f0       	push   $0xf0139f94
f012cd13:	68 77 12 00 00       	push   $0x1277
f012cd18:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cd1d:	e8 8e 34 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cd22:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd28:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cd2e:	74 17                	je     f012cd47 <test_krealloc_BF+0x1509>
			panic(
f012cd30:	83 ec 04             	sub    $0x4,%esp
f012cd33:	68 78 a2 13 f0       	push   $0xf013a278
f012cd38:	68 7a 12 00 00       	push   $0x127a
f012cd3d:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cd42:	e8 69 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd47:	e8 c6 f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cd4c:	89 c2                	mov    %eax,%edx
f012cd4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd51:	39 c2                	cmp    %eax,%edx
f012cd53:	74 17                	je     f012cd6c <test_krealloc_BF+0x152e>
			panic(
f012cd55:	83 ec 04             	sub    $0x4,%esp
f012cd58:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012cd5d:	68 7d 12 00 00       	push   $0x127d
f012cd62:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cd67:	e8 44 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cd6c:	e8 a1 f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cd71:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cd74:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cd7a:	83 ec 08             	sub    $0x8,%esp
f012cd7d:	68 00 fc 0f 00       	push   $0xffc00
f012cd82:	50                   	push   %eax
f012cd83:	e8 c1 ae fd ff       	call   f0107c49 <krealloc>
f012cd88:	83 c4 10             	add    $0x10,%esp
f012cd8b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd91:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cd97:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd9c:	77 17                	ja     f012cdb5 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd9e:	83 ec 04             	sub    $0x4,%esp
f012cda1:	68 94 9f 13 f0       	push   $0xf0139f94
f012cda6:	68 85 12 00 00       	push   $0x1285
f012cdab:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cdb0:	e8 fb 33 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012cdb5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cdbb:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cdc1:	74 17                	je     f012cdda <test_krealloc_BF+0x159c>
			panic(
f012cdc3:	83 ec 04             	sub    $0x4,%esp
f012cdc6:	68 28 a3 13 f0       	push   $0xf013a328
f012cdcb:	68 88 12 00 00       	push   $0x1288
f012cdd0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cdd5:	e8 d6 33 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cdda:	e8 33 f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cddf:	89 c2                	mov    %eax,%edx
f012cde1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cde4:	39 c2                	cmp    %eax,%edx
f012cde6:	74 17                	je     f012cdff <test_krealloc_BF+0x15c1>
			panic(
f012cde8:	83 ec 04             	sub    $0x4,%esp
f012cdeb:	68 e4 a2 13 f0       	push   $0xf013a2e4
f012cdf0:	68 8b 12 00 00       	push   $0x128b
f012cdf5:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cdfa:	e8 b1 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012cdff:	83 ec 0c             	sub    $0xc,%esp
f012ce02:	68 07 95 13 f0       	push   $0xf0139507
f012ce07:	e8 25 40 fd ff       	call   f0100e31 <cprintf>
f012ce0c:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ce0f:	e8 fe f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ce14:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012ce17:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ce1d:	83 ec 08             	sub    $0x8,%esp
f012ce20:	68 00 18 10 00       	push   $0x101800
f012ce25:	50                   	push   %eax
f012ce26:	e8 1e ae fd ff       	call   f0107c49 <krealloc>
f012ce2b:	83 c4 10             	add    $0x10,%esp
f012ce2e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce31:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce34:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce39:	77 17                	ja     f012ce52 <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce3b:	83 ec 04             	sub    $0x4,%esp
f012ce3e:	68 94 9f 13 f0       	push   $0xf0139f94
f012ce43:	68 93 12 00 00       	push   $0x1293
f012ce48:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ce4d:	e8 5e 33 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012ce52:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ce58:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ce5b:	74 17                	je     f012ce74 <test_krealloc_BF+0x1636>
			panic(
f012ce5d:	83 ec 04             	sub    $0x4,%esp
f012ce60:	68 88 a3 13 f0       	push   $0xf013a388
f012ce65:	68 96 12 00 00       	push   $0x1296
f012ce6a:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ce6f:	e8 3c 33 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ce74:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce77:	e8 96 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ce7c:	29 c3                	sub    %eax,%ebx
f012ce7e:	89 d8                	mov    %ebx,%eax
f012ce80:	83 f8 02             	cmp    $0x2,%eax
f012ce83:	74 17                	je     f012ce9c <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012ce85:	83 ec 04             	sub    $0x4,%esp
f012ce88:	68 04 a4 13 f0       	push   $0xf013a404
f012ce8d:	68 98 12 00 00       	push   $0x1298
f012ce92:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ce97:	e8 14 33 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012ce9c:	e8 71 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cea1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cea4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ceaa:	83 ec 08             	sub    $0x8,%esp
f012cead:	68 00 fc 3f 00       	push   $0x3ffc00
f012ceb2:	50                   	push   %eax
f012ceb3:	e8 91 ad fd ff       	call   f0107c49 <krealloc>
f012ceb8:	83 c4 10             	add    $0x10,%esp
f012cebb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cebe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cec1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cec6:	77 17                	ja     f012cedf <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cec8:	83 ec 04             	sub    $0x4,%esp
f012cecb:	68 94 9f 13 f0       	push   $0xf0139f94
f012ced0:	68 9e 12 00 00       	push   $0x129e
f012ced5:	68 ee 8c 13 f0       	push   $0xf0138cee
f012ceda:	e8 d1 32 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012cedf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cee5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cee8:	74 17                	je     f012cf01 <test_krealloc_BF+0x16c3>
			panic(
f012ceea:	83 ec 04             	sub    $0x4,%esp
f012ceed:	68 88 a3 13 f0       	push   $0xf013a388
f012cef2:	68 a1 12 00 00       	push   $0x12a1
f012cef7:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cefc:	e8 af 32 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cf01:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf04:	e8 09 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cf09:	29 c3                	sub    %eax,%ebx
f012cf0b:	89 d8                	mov    %ebx,%eax
f012cf0d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cf12:	74 17                	je     f012cf2b <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf14:	83 ec 04             	sub    $0x4,%esp
f012cf17:	68 04 a4 13 f0       	push   $0xf013a404
f012cf1c:	68 a4 12 00 00       	push   $0x12a4
f012cf21:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cf26:	e8 85 32 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012cf2b:	83 ec 0c             	sub    $0xc,%esp
f012cf2e:	68 4c 95 13 f0       	push   $0xf013954c
f012cf33:	e8 f9 3e fd ff       	call   f0100e31 <cprintf>
f012cf38:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012cf3b:	e8 d2 f6 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cf40:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012cf43:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cf49:	83 ec 08             	sub    $0x8,%esp
f012cf4c:	68 00 fc 9f 00       	push   $0x9ffc00
f012cf51:	50                   	push   %eax
f012cf52:	e8 f2 ac fd ff       	call   f0107c49 <krealloc>
f012cf57:	83 c4 10             	add    $0x10,%esp
f012cf5a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf60:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf65:	77 17                	ja     f012cf7e <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf67:	83 ec 04             	sub    $0x4,%esp
f012cf6a:	68 94 9f 13 f0       	push   $0xf0139f94
f012cf6f:	68 af 12 00 00       	push   $0x12af
f012cf74:	68 ee 8c 13 f0       	push   $0xf0138cee
f012cf79:	e8 32 32 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012cf7e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cf85:	10 00 00 
f012cf88:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012cf8d:	0f b6 d0             	movzbl %al,%edx
f012cf90:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012cf96:	01 d0                	add    %edx,%eax
f012cf98:	48                   	dec    %eax
f012cf99:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012cf9f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cfa5:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfaa:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012cfb0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cfb6:	29 d0                	sub    %edx,%eax
f012cfb8:	89 c1                	mov    %eax,%ecx
f012cfba:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cfc1:	10 00 00 
f012cfc4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012cfc9:	0f b6 c0             	movzbl %al,%eax
f012cfcc:	c1 e0 04             	shl    $0x4,%eax
f012cfcf:	89 c2                	mov    %eax,%edx
f012cfd1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cfd7:	01 d0                	add    %edx,%eax
f012cfd9:	48                   	dec    %eax
f012cfda:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cfe0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cfe6:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfeb:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cff1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cff7:	29 d0                	sub    %edx,%eax
f012cff9:	01 c8                	add    %ecx,%eax
f012cffb:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d001:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d004:	39 c2                	cmp    %eax,%edx
f012d006:	74 18                	je     f012d020 <test_krealloc_BF+0x17e2>
			panic(
f012d008:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d00b:	50                   	push   %eax
f012d00c:	68 38 a4 13 f0       	push   $0xf013a438
f012d011:	68 b3 12 00 00       	push   $0x12b3
f012d016:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d01b:	e8 90 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d020:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d026:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d029:	75 17                	jne    f012d042 <test_krealloc_BF+0x1804>
			panic(
f012d02b:	83 ec 04             	sub    $0x4,%esp
f012d02e:	68 7c a4 13 f0       	push   $0xf013a47c
f012d033:	68 b6 12 00 00       	push   $0x12b6
f012d038:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d03d:	e8 6e 31 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d042:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d045:	e8 c8 f5 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d04a:	29 c3                	sub    %eax,%ebx
f012d04c:	89 d8                	mov    %ebx,%eax
f012d04e:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d053:	74 17                	je     f012d06c <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d055:	83 ec 04             	sub    $0x4,%esp
f012d058:	68 04 a4 13 f0       	push   $0xf013a404
f012d05d:	68 b9 12 00 00       	push   $0x12b9
f012d062:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d067:	e8 44 31 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d06c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d06f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d075:	e8 98 f5 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d07a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d07d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d083:	83 ec 08             	sub    $0x8,%esp
f012d086:	68 00 fc 3f 00       	push   $0x3ffc00
f012d08b:	50                   	push   %eax
f012d08c:	e8 b8 ab fd ff       	call   f0107c49 <krealloc>
f012d091:	83 c4 10             	add    $0x10,%esp
f012d094:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d097:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d09a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d09f:	77 17                	ja     f012d0b8 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0a1:	83 ec 04             	sub    $0x4,%esp
f012d0a4:	68 94 9f 13 f0       	push   $0xf0139f94
f012d0a9:	68 c2 12 00 00       	push   $0x12c2
f012d0ae:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d0b3:	e8 f8 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d0b8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d0be:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d0c1:	75 17                	jne    f012d0da <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d0c3:	83 ec 04             	sub    $0x4,%esp
f012d0c6:	68 7c a4 13 f0       	push   $0xf013a47c
f012d0cb:	68 c4 12 00 00       	push   $0x12c4
f012d0d0:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d0d5:	e8 d6 30 fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d0da:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d0e1:	10 00 00 
f012d0e4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d0e9:	0f b6 d0             	movzbl %al,%edx
f012d0ec:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d0f2:	01 d0                	add    %edx,%eax
f012d0f4:	48                   	dec    %eax
f012d0f5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d0fb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d101:	ba 00 00 00 00       	mov    $0x0,%edx
f012d106:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d10c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d112:	29 d0                	sub    %edx,%eax
f012d114:	89 c1                	mov    %eax,%ecx
f012d116:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d11d:	10 00 00 
f012d120:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d125:	0f b6 c0             	movzbl %al,%eax
f012d128:	c1 e0 04             	shl    $0x4,%eax
f012d12b:	89 c2                	mov    %eax,%edx
f012d12d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d133:	01 d0                	add    %edx,%eax
f012d135:	48                   	dec    %eax
f012d136:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d13c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d142:	ba 00 00 00 00       	mov    $0x0,%edx
f012d147:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d14d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d153:	29 d0                	sub    %edx,%eax
f012d155:	01 c8                	add    %ecx,%eax
f012d157:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d15d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d160:	39 c2                	cmp    %eax,%edx
f012d162:	74 17                	je     f012d17b <test_krealloc_BF+0x193d>
f012d164:	83 ec 04             	sub    $0x4,%esp
f012d167:	68 d0 9f 13 f0       	push   $0xf0139fd0
f012d16c:	68 c5 12 00 00       	push   $0x12c5
f012d171:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d176:	e8 35 30 fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d17b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d17e:	e8 8f f4 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d183:	29 c3                	sub    %eax,%ebx
f012d185:	89 d8                	mov    %ebx,%eax
f012d187:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d18c:	74 17                	je     f012d1a5 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d18e:	83 ec 04             	sub    $0x4,%esp
f012d191:	68 04 a4 13 f0       	push   $0xf013a404
f012d196:	68 c9 12 00 00       	push   $0x12c9
f012d19b:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d1a0:	e8 0b 30 fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d1a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1a8:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d1ae:	e8 5f f4 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d1b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d1b6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d1bc:	83 ec 08             	sub    $0x8,%esp
f012d1bf:	68 00 fc 3f 01       	push   $0x13ffc00
f012d1c4:	50                   	push   %eax
f012d1c5:	e8 7f aa fd ff       	call   f0107c49 <krealloc>
f012d1ca:	83 c4 10             	add    $0x10,%esp
f012d1cd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1d3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1d8:	77 17                	ja     f012d1f1 <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1da:	83 ec 04             	sub    $0x4,%esp
f012d1dd:	68 94 9f 13 f0       	push   $0xf0139f94
f012d1e2:	68 cf 12 00 00       	push   $0x12cf
f012d1e7:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d1ec:	e8 bf 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d1f1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d1f7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d1fa:	75 17                	jne    f012d213 <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d1fc:	83 ec 04             	sub    $0x4,%esp
f012d1ff:	68 7c a4 13 f0       	push   $0xf013a47c
f012d204:	68 d1 12 00 00       	push   $0x12d1
f012d209:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d20e:	e8 9d 2f fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d213:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d21a:	10 00 00 
f012d21d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d222:	0f b6 d0             	movzbl %al,%edx
f012d225:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d22b:	01 d0                	add    %edx,%eax
f012d22d:	48                   	dec    %eax
f012d22e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d234:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d23a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d23f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d245:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d24b:	29 d0                	sub    %edx,%eax
f012d24d:	89 c1                	mov    %eax,%ecx
f012d24f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d256:	10 00 00 
f012d259:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d25e:	0f b6 c0             	movzbl %al,%eax
f012d261:	c1 e0 04             	shl    $0x4,%eax
f012d264:	89 c2                	mov    %eax,%edx
f012d266:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d26c:	01 d0                	add    %edx,%eax
f012d26e:	48                   	dec    %eax
f012d26f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d275:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d27b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d280:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d286:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d28c:	29 d0                	sub    %edx,%eax
f012d28e:	01 c8                	add    %ecx,%eax
f012d290:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d296:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d299:	39 c2                	cmp    %eax,%edx
f012d29b:	74 17                	je     f012d2b4 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d29d:	83 ec 04             	sub    $0x4,%esp
f012d2a0:	68 9c a5 13 f0       	push   $0xf013a59c
f012d2a5:	68 d3 12 00 00       	push   $0x12d3
f012d2aa:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d2af:	e8 fc 2e fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d2b4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2b7:	e8 56 f3 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d2bc:	29 c3                	sub    %eax,%ebx
f012d2be:	89 d8                	mov    %ebx,%eax
f012d2c0:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d2c5:	74 17                	je     f012d2de <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d2c7:	83 ec 04             	sub    $0x4,%esp
f012d2ca:	68 04 a4 13 f0       	push   $0xf013a404
f012d2cf:	68 d6 12 00 00       	push   $0x12d6
f012d2d4:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d2d9:	e8 d2 2e fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d2de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2e1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d2e7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d2ed:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d2f3:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d2fa:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d2fd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d304:	eb 21                	jmp    f012d327 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d306:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d30c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d30f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d315:	01 c8                	add    %ecx,%eax
f012d317:	8a 00                	mov    (%eax),%al
f012d319:	0f be c0             	movsbl %al,%eax
f012d31c:	01 d0                	add    %edx,%eax
f012d31e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d324:	ff 45 d8             	incl   -0x28(%ebp)
f012d327:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d32d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d330:	7d d4                	jge    f012d306 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d332:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d338:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d33e:	42                   	inc    %edx
f012d33f:	01 d2                	add    %edx,%edx
f012d341:	39 d0                	cmp    %edx,%eax
f012d343:	74 17                	je     f012d35c <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d345:	83 ec 04             	sub    $0x4,%esp
f012d348:	68 34 a5 13 f0       	push   $0xf013a534
f012d34d:	68 e4 12 00 00       	push   $0x12e4
f012d352:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d357:	e8 54 2e fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d35c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d362:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d368:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d36f:	00 00 00 
		sums[1] = 0;
f012d372:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d379:	00 00 00 
		sums[2] = 0;
f012d37c:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d383:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d386:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d38d:	eb 70                	jmp    f012d3ff <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d38f:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d395:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d398:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d39f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d3a5:	01 c8                	add    %ecx,%eax
f012d3a7:	8a 00                	mov    (%eax),%al
f012d3a9:	0f be c0             	movsbl %al,%eax
f012d3ac:	01 d0                	add    %edx,%eax
f012d3ae:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d3b4:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d3ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3bd:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3c4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d3ca:	01 c8                	add    %ecx,%eax
f012d3cc:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3d0:	98                   	cwtl   
f012d3d1:	01 d0                	add    %edx,%eax
f012d3d3:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d3d9:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d3df:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3e2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d3ef:	01 c8                	add    %ecx,%eax
f012d3f1:	8b 40 04             	mov    0x4(%eax),%eax
f012d3f4:	01 d0                	add    %edx,%eax
f012d3f6:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d3fc:	ff 45 d8             	incl   -0x28(%ebp)
f012d3ff:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d405:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d408:	7d 85                	jge    f012d38f <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d40a:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d410:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d416:	8d 50 01             	lea    0x1(%eax),%edx
f012d419:	89 d0                	mov    %edx,%eax
f012d41b:	01 c0                	add    %eax,%eax
f012d41d:	01 d0                	add    %edx,%eax
f012d41f:	01 c0                	add    %eax,%eax
f012d421:	01 d0                	add    %edx,%eax
f012d423:	39 c1                	cmp    %eax,%ecx
f012d425:	75 3a                	jne    f012d461 <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d427:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d42d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d433:	8d 50 01             	lea    0x1(%eax),%edx
f012d436:	89 d0                	mov    %edx,%eax
f012d438:	01 c0                	add    %eax,%eax
f012d43a:	01 d0                	add    %edx,%eax
f012d43c:	01 c0                	add    %eax,%eax
f012d43e:	01 d0                	add    %edx,%eax
f012d440:	39 c1                	cmp    %eax,%ecx
f012d442:	75 1d                	jne    f012d461 <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d444:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d44a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d450:	8d 50 01             	lea    0x1(%eax),%edx
f012d453:	89 d0                	mov    %edx,%eax
f012d455:	01 c0                	add    %eax,%eax
f012d457:	01 d0                	add    %edx,%eax
f012d459:	01 c0                	add    %eax,%eax
f012d45b:	01 d0                	add    %edx,%eax
f012d45d:	39 c1                	cmp    %eax,%ecx
f012d45f:	74 17                	je     f012d478 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d461:	83 ec 04             	sub    $0x4,%esp
f012d464:	68 34 a5 13 f0       	push   $0xf013a534
f012d469:	68 f6 12 00 00       	push   $0x12f6
f012d46e:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d473:	e8 38 2d fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d478:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d47e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d484:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d48b:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d48e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d495:	eb 24                	jmp    f012d4bb <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d497:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d49d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d4a0:	01 c0                	add    %eax,%eax
f012d4a2:	89 c1                	mov    %eax,%ecx
f012d4a4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d4aa:	01 c8                	add    %ecx,%eax
f012d4ac:	66 8b 00             	mov    (%eax),%ax
f012d4af:	98                   	cwtl   
f012d4b0:	01 d0                	add    %edx,%eax
f012d4b2:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4b8:	ff 45 d8             	incl   -0x28(%ebp)
f012d4bb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d4c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d4c4:	7d d1                	jge    f012d497 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d4c6:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d4cc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d4d2:	8d 48 01             	lea    0x1(%eax),%ecx
f012d4d5:	89 c8                	mov    %ecx,%eax
f012d4d7:	c1 e0 02             	shl    $0x2,%eax
f012d4da:	01 c8                	add    %ecx,%eax
f012d4dc:	39 c2                	cmp    %eax,%edx
f012d4de:	74 17                	je     f012d4f7 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d4e0:	83 ec 04             	sub    $0x4,%esp
f012d4e3:	68 34 a5 13 f0       	push   $0xf013a534
f012d4e8:	68 00 13 00 00       	push   $0x1300
f012d4ed:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d4f2:	e8 b9 2c fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d4f7:	e8 16 f1 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d4fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d4ff:	e8 b4 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d504:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d50a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d510:	83 ec 08             	sub    $0x8,%esp
f012d513:	6a 00                	push   $0x0
f012d515:	50                   	push   %eax
f012d516:	e8 2e a7 fd ff       	call   f0107c49 <krealloc>
f012d51b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d51e:	e8 95 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d523:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d529:	74 17                	je     f012d542 <test_krealloc_BF+0x1d04>
			panic(
f012d52b:	83 ec 04             	sub    $0x4,%esp
f012d52e:	68 08 8d 13 f0       	push   $0xf0138d08
f012d533:	68 08 13 00 00       	push   $0x1308
f012d538:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d53d:	e8 6e 2c fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d542:	e8 cb f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d547:	89 c2                	mov    %eax,%edx
f012d549:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d54c:	29 c2                	sub    %eax,%edx
f012d54e:	89 d0                	mov    %edx,%eax
f012d550:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d555:	74 17                	je     f012d56e <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d557:	83 ec 04             	sub    $0x4,%esp
f012d55a:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012d55f:	68 0a 13 00 00       	push   $0x130a
f012d564:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d569:	e8 42 2c fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d56e:	e8 9f f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d573:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d576:	e8 3d 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d57b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d581:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d587:	83 ec 0c             	sub    $0xc,%esp
f012d58a:	50                   	push   %eax
f012d58b:	e8 1d a6 fd ff       	call   f0107bad <kfree>
f012d590:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d593:	e8 20 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d598:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d59e:	74 17                	je     f012d5b7 <test_krealloc_BF+0x1d79>
			panic(
f012d5a0:	83 ec 04             	sub    $0x4,%esp
f012d5a3:	68 08 8d 13 f0       	push   $0xf0138d08
f012d5a8:	68 12 13 00 00       	push   $0x1312
f012d5ad:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d5b2:	e8 f9 2b fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d5b7:	e8 56 f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d5bc:	89 c2                	mov    %eax,%edx
f012d5be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5c1:	29 c2                	sub    %eax,%edx
f012d5c3:	89 d0                	mov    %edx,%eax
f012d5c5:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d5ca:	74 17                	je     f012d5e3 <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d5cc:	83 ec 04             	sub    $0x4,%esp
f012d5cf:	68 c4 a1 13 f0       	push   $0xf013a1c4
f012d5d4:	68 14 13 00 00       	push   $0x1314
f012d5d9:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d5de:	e8 cd 2b fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d5e3:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d5ea:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d5f1:	eb 48                	jmp    f012d63b <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d5f3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d5f6:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012d5fb:	83 ec 04             	sub    $0x4,%esp
f012d5fe:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d604:	51                   	push   %ecx
f012d605:	52                   	push   %edx
f012d606:	50                   	push   %eax
f012d607:	e8 0f 9b fd ff       	call   f010711b <get_page_table>
f012d60c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d60f:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012d615:	85 c0                	test   %eax,%eax
f012d617:	75 17                	jne    f012d630 <test_krealloc_BF+0x1df2>
					panic(
f012d619:	83 ec 04             	sub    $0x4,%esp
f012d61c:	68 f0 95 13 f0       	push   $0xf01395f0
f012d621:	68 21 13 00 00       	push   $0x1321
f012d626:	68 ee 8c 13 f0       	push   $0xf0138cee
f012d62b:	e8 80 2b fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d630:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d637:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d63b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d63f:	78 b2                	js     f012d5f3 <test_krealloc_BF+0x1db5>
f012d641:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d645:	7f 09                	jg     f012d650 <test_krealloc_BF+0x1e12>
f012d647:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d64e:	76 a3                	jbe    f012d5f3 <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d650:	83 ec 0c             	sub    $0xc,%esp
f012d653:	68 d2 8e 13 f0       	push   $0xf0138ed2
f012d658:	e8 d4 37 fd ff       	call   f0100e31 <cprintf>
f012d65d:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012d660:	83 ec 0c             	sub    $0xc,%esp
f012d663:	68 d4 a5 13 f0       	push   $0xf013a5d4
f012d668:	e8 c4 37 fd ff       	call   f0100e31 <cprintf>
f012d66d:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d670:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d675:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d678:	5b                   	pop    %ebx
f012d679:	5f                   	pop    %edi
f012d67a:	5d                   	pop    %ebp
f012d67b:	c3                   	ret    

f012d67c <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012d67c:	55                   	push   %ebp
f012d67d:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012d67f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d684:	5d                   	pop    %ebp
f012d685:	c3                   	ret    

f012d686 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012d686:	55                   	push   %ebp
f012d687:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012d689:	c7 05 14 3b 25 f0 00 	movl   $0x0,0xf0253b14
f012d690:	00 00 00 
}
f012d693:	90                   	nop
f012d694:	5d                   	pop    %ebp
f012d695:	c3                   	ret    

f012d696 <inctst>:
void inctst()
{
f012d696:	55                   	push   %ebp
f012d697:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012d699:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d69e:	40                   	inc    %eax
f012d69f:	a3 14 3b 25 f0       	mov    %eax,0xf0253b14
}
f012d6a4:	90                   	nop
f012d6a5:	5d                   	pop    %ebp
f012d6a6:	c3                   	ret    

f012d6a7 <gettst>:
uint32 gettst()
{
f012d6a7:	55                   	push   %ebp
f012d6a8:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012d6aa:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
}
f012d6af:	5d                   	pop    %ebp
f012d6b0:	c3                   	ret    

f012d6b1 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012d6b1:	55                   	push   %ebp
f012d6b2:	89 e5                	mov    %esp,%ebp
f012d6b4:	83 ec 28             	sub    $0x28,%esp
f012d6b7:	8b 45 14             	mov    0x14(%ebp),%eax
f012d6ba:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012d6bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012d6c4:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012d6c8:	83 f8 65             	cmp    $0x65,%eax
f012d6cb:	74 5d                	je     f012d72a <tst+0x79>
f012d6cd:	83 f8 65             	cmp    $0x65,%eax
f012d6d0:	7f 0a                	jg     f012d6dc <tst+0x2b>
f012d6d2:	83 f8 62             	cmp    $0x62,%eax
f012d6d5:	74 73                	je     f012d74a <tst+0x99>
f012d6d7:	e9 91 00 00 00       	jmp    f012d76d <tst+0xbc>
f012d6dc:	83 f8 67             	cmp    $0x67,%eax
f012d6df:	74 29                	je     f012d70a <tst+0x59>
f012d6e1:	83 f8 6c             	cmp    $0x6c,%eax
f012d6e4:	0f 85 83 00 00 00    	jne    f012d76d <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012d6ea:	8b 45 08             	mov    0x8(%ebp),%eax
f012d6ed:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d6f0:	73 09                	jae    f012d6fb <tst+0x4a>
			chk = 1;
f012d6f2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d6f9:	eb 68                	jmp    f012d763 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012d6fb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d6ff:	74 62                	je     f012d763 <tst+0xb2>
			chk = 1;
f012d701:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d708:	eb 59                	jmp    f012d763 <tst+0xb2>
	case 'g':
		if (n > v1)
f012d70a:	8b 45 08             	mov    0x8(%ebp),%eax
f012d70d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d710:	76 09                	jbe    f012d71b <tst+0x6a>
			chk = 1;
f012d712:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d719:	eb 4b                	jmp    f012d766 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012d71b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d71f:	74 45                	je     f012d766 <tst+0xb5>
			chk = 1;
f012d721:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d728:	eb 3c                	jmp    f012d766 <tst+0xb5>
	case 'e':
		if (n == v1)
f012d72a:	8b 45 08             	mov    0x8(%ebp),%eax
f012d72d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d730:	75 09                	jne    f012d73b <tst+0x8a>
			chk = 1;
f012d732:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d739:	eb 2e                	jmp    f012d769 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012d73b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d73f:	74 28                	je     f012d769 <tst+0xb8>
			chk = 1;
f012d741:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d748:	eb 1f                	jmp    f012d769 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012d74a:	8b 45 08             	mov    0x8(%ebp),%eax
f012d74d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d750:	72 1a                	jb     f012d76c <tst+0xbb>
f012d752:	8b 45 08             	mov    0x8(%ebp),%eax
f012d755:	3b 45 10             	cmp    0x10(%ebp),%eax
f012d758:	77 12                	ja     f012d76c <tst+0xbb>
			chk = 1;
f012d75a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d761:	eb 09                	jmp    f012d76c <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d763:	90                   	nop
f012d764:	eb 07                	jmp    f012d76d <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d766:	90                   	nop
f012d767:	eb 04                	jmp    f012d76d <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d769:	90                   	nop
f012d76a:	eb 01                	jmp    f012d76d <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012d76c:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012d76d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012d771:	75 14                	jne    f012d787 <tst+0xd6>
f012d773:	83 ec 04             	sub    $0x4,%esp
f012d776:	68 14 a6 13 f0       	push   $0xf013a614
f012d77b:	6a 3c                	push   $0x3c
f012d77d:	68 27 a6 13 f0       	push   $0xf013a627
f012d782:	e8 29 2a fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012d787:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d78c:	40                   	inc    %eax
f012d78d:	a3 14 3b 25 f0       	mov    %eax,0xf0253b14
	return;
f012d792:	90                   	nop
}
f012d793:	c9                   	leave  
f012d794:	c3                   	ret    

f012d795 <chktst>:

void chktst(uint32 n)
{
f012d795:	55                   	push   %ebp
f012d796:	89 e5                	mov    %esp,%ebp
f012d798:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012d79b:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d7a0:	3b 45 08             	cmp    0x8(%ebp),%eax
f012d7a3:	75 12                	jne    f012d7b7 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012d7a5:	83 ec 0c             	sub    $0xc,%esp
f012d7a8:	68 40 a6 13 f0       	push   $0xf013a640
f012d7ad:	e8 7f 36 fd ff       	call   f0100e31 <cprintf>
f012d7b2:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012d7b5:	eb 14                	jmp    f012d7cb <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012d7b7:	83 ec 04             	sub    $0x4,%esp
f012d7ba:	68 6c a6 13 f0       	push   $0xf013a66c
f012d7bf:	6a 46                	push   $0x46
f012d7c1:	68 27 a6 13 f0       	push   $0xf013a627
f012d7c6:	e8 e5 29 fd ff       	call   f01001b0 <_panic>
}
f012d7cb:	c9                   	leave  
f012d7cc:	c3                   	ret    

f012d7cd <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012d7cd:	55                   	push   %ebp
f012d7ce:	89 e5                	mov    %esp,%ebp
f012d7d0:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012d7d3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d7d7:	77 07                	ja     f012d7e0 <nearest_pow2_ceil+0x13>
f012d7d9:	b8 01 00 00 00       	mov    $0x1,%eax
f012d7de:	eb 20                	jmp    f012d800 <nearest_pow2_ceil+0x33>
    int power = 2;
f012d7e0:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012d7e7:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012d7ea:	eb 08                	jmp    f012d7f4 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012d7ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012d7ef:	01 c0                	add    %eax,%eax
f012d7f1:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012d7f4:	d1 6d 08             	shrl   0x8(%ebp)
f012d7f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012d7fb:	75 ef                	jne    f012d7ec <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012d7fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012d800:	c9                   	leave  
f012d801:	c3                   	ret    

f012d802 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012d802:	55                   	push   %ebp
f012d803:	89 e5                	mov    %esp,%ebp
f012d805:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012d808:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d80c:	77 07                	ja     f012d815 <log2_ceil+0x13>
f012d80e:	b8 01 00 00 00       	mov    $0x1,%eax
f012d813:	eb 1b                	jmp    f012d830 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012d815:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012d81c:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012d81f:	eb 03                	jmp    f012d824 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012d821:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012d824:	d1 6d 08             	shrl   0x8(%ebp)
f012d827:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012d82b:	75 f4                	jne    f012d821 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012d82d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012d830:	c9                   	leave  
f012d831:	c3                   	ret    

f012d832 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012d832:	55                   	push   %ebp
f012d833:	89 e5                	mov    %esp,%ebp
f012d835:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012d838:	8b 45 08             	mov    0x8(%ebp),%eax
f012d83b:	8b 00                	mov    (%eax),%eax
f012d83d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012d840:	8b 45 08             	mov    0x8(%ebp),%eax
f012d843:	8b 00                	mov    (%eax),%eax
f012d845:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012d848:	eb 52                	jmp    f012d89c <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012d84a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d84d:	8b 00                	mov    (%eax),%eax
f012d84f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012d852:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d855:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d858:	75 12                	jne    f012d86c <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012d85a:	83 ec 0c             	sub    $0xc,%esp
f012d85d:	68 88 a6 13 f0       	push   $0xf013a688
f012d862:	e8 ca 35 fd ff       	call   f0100e31 <cprintf>
f012d867:	83 c4 10             	add    $0x10,%esp
			break;
f012d86a:	eb 3f                	jmp    f012d8ab <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012d86c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012d870:	74 38                	je     f012d8aa <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012d872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d875:	8b 00                	mov    (%eax),%eax
f012d877:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012d87a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d87d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d880:	75 12                	jne    f012d894 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012d882:	83 ec 0c             	sub    $0xc,%esp
f012d885:	68 a4 a6 13 f0       	push   $0xf013a6a4
f012d88a:	e8 a2 35 fd ff       	call   f0100e31 <cprintf>
f012d88f:	83 c4 10             	add    $0x10,%esp
			break;
f012d892:	eb 17                	jmp    f012d8ab <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012d894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012d897:	8b 00                	mov    (%eax),%eax
f012d899:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012d89c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012d8a0:	74 09                	je     f012d8ab <detect_loop_in_FrameInfo_list+0x79>
f012d8a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012d8a6:	75 a2                	jne    f012d84a <detect_loop_in_FrameInfo_list+0x18>
f012d8a8:	eb 01                	jmp    f012d8ab <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012d8aa:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012d8ab:	83 ec 0c             	sub    $0xc,%esp
f012d8ae:	68 bb a6 13 f0       	push   $0xf013a6bb
f012d8b3:	e8 79 35 fd ff       	call   f0100e31 <cprintf>
f012d8b8:	83 c4 10             	add    $0x10,%esp
}
f012d8bb:	90                   	nop
f012d8bc:	c9                   	leave  
f012d8bd:	c3                   	ret    

f012d8be <scarce_memory>:

void scarce_memory()
{
f012d8be:	55                   	push   %ebp
f012d8bf:	89 e5                	mov    %esp,%ebp
f012d8c1:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012d8c4:	a1 80 9a 2b f0       	mov    0xf02b9a80,%eax
f012d8c9:	ba 64 00 00 00       	mov    $0x64,%edx
f012d8ce:	29 c2                	sub    %eax,%edx
f012d8d0:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012d8d5:	0f af c2             	imul   %edx,%eax
f012d8d8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012d8dd:	f7 e2                	mul    %edx
f012d8df:	89 d0                	mov    %edx,%eax
f012d8e1:	c1 e8 05             	shr    $0x5,%eax
f012d8e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012d8e7:	a1 80 9a 2b f0       	mov    0xf02b9a80,%eax
f012d8ec:	ba 64 00 00 00       	mov    $0x64,%edx
f012d8f1:	29 c2                	sub    %eax,%edx
f012d8f3:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012d8f8:	89 d1                	mov    %edx,%ecx
f012d8fa:	0f af c8             	imul   %eax,%ecx
f012d8fd:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012d902:	f7 e1                	mul    %ecx
f012d904:	c1 ea 05             	shr    $0x5,%edx
f012d907:	89 d0                	mov    %edx,%eax
f012d909:	c1 e0 02             	shl    $0x2,%eax
f012d90c:	01 d0                	add    %edx,%eax
f012d90e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d915:	01 d0                	add    %edx,%eax
f012d917:	c1 e0 02             	shl    $0x2,%eax
f012d91a:	29 c1                	sub    %eax,%ecx
f012d91c:	89 ca                	mov    %ecx,%edx
f012d91e:	85 d2                	test   %edx,%edx
f012d920:	74 03                	je     f012d925 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012d922:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012d925:	8b 15 90 be 2b f0    	mov    0xf02bbe90,%edx
f012d92b:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f012d930:	29 c2                	sub    %eax,%edx
f012d932:	89 d0                	mov    %edx,%eax
f012d934:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012d937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012d93a:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012d93d:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012d940:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012d947:	eb 12                	jmp    f012d95b <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012d949:	83 ec 0c             	sub    $0xc,%esp
f012d94c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012d94f:	50                   	push   %eax
f012d950:	e8 04 96 fd ff       	call   f0106f59 <allocate_frame>
f012d955:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012d958:	ff 45 f0             	incl   -0x10(%ebp)
f012d95b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d95e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d961:	76 e6                	jbe    f012d949 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012d963:	90                   	nop
f012d964:	c9                   	leave  
f012d965:	c3                   	ret    

f012d966 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012d966:	55                   	push   %ebp
f012d967:	89 e5                	mov    %esp,%ebp
f012d969:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012d96c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012d973:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012d97a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012d981:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d985:	0f 85 d3 01 00 00    	jne    f012db5e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012d98b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d992:	e9 e1 00 00 00       	jmp    f012da78 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012d997:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012d99e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d9a1:	c1 e0 04             	shl    $0x4,%eax
f012d9a4:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012d9a9:	8b 00                	mov    (%eax),%eax
f012d9ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012d9ae:	e9 82 00 00 00       	jmp    f012da35 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012d9b3:	83 ec 0c             	sub    $0xc,%esp
f012d9b6:	ff 75 e4             	pushl  -0x1c(%ebp)
f012d9b9:	e8 cb a4 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012d9be:	83 c4 10             	add    $0x10,%esp
f012d9c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012d9c4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012d9c9:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012d9cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012d9d2:	0f af c2             	imul   %edx,%eax
f012d9d5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012d9da:	f7 e2                	mul    %edx
f012d9dc:	89 d0                	mov    %edx,%eax
f012d9de:	c1 e8 05             	shr    $0x5,%eax
f012d9e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012d9e4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012d9e9:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012d9ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012d9f2:	89 d1                	mov    %edx,%ecx
f012d9f4:	0f af c8             	imul   %eax,%ecx
f012d9f7:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012d9fc:	f7 e1                	mul    %ecx
f012d9fe:	c1 ea 05             	shr    $0x5,%edx
f012da01:	89 d0                	mov    %edx,%eax
f012da03:	c1 e0 02             	shl    $0x2,%eax
f012da06:	01 d0                	add    %edx,%eax
f012da08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012da0f:	01 d0                	add    %edx,%eax
f012da11:	c1 e0 02             	shl    $0x2,%eax
f012da14:	29 c1                	sub    %eax,%ecx
f012da16:	89 ca                	mov    %ecx,%edx
f012da18:	85 d2                	test   %edx,%edx
f012da1a:	74 03                	je     f012da1f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012da1c:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012da1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012da22:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012da25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012da28:	c1 e0 04             	shl    $0x4,%eax
f012da2b:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f012da30:	8b 00                	mov    (%eax),%eax
f012da32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012da35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012da39:	74 08                	je     f012da43 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012da3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012da3e:	8b 40 44             	mov    0x44(%eax),%eax
f012da41:	eb 05                	jmp    f012da48 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012da43:	b8 00 00 00 00       	mov    $0x0,%eax
f012da48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012da4b:	c1 e2 04             	shl    $0x4,%edx
f012da4e:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f012da54:	89 02                	mov    %eax,(%edx)
f012da56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012da59:	c1 e0 04             	shl    $0x4,%eax
f012da5c:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f012da61:	8b 00                	mov    (%eax),%eax
f012da63:	85 c0                	test   %eax,%eax
f012da65:	0f 85 48 ff ff ff    	jne    f012d9b3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012da6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012da6f:	0f 85 3e ff ff ff    	jne    f012d9b3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012da75:	ff 45 e8             	incl   -0x18(%ebp)
f012da78:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012da7d:	0f b6 c0             	movzbl %al,%eax
f012da80:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012da83:	0f 8f 0e ff ff ff    	jg     f012d997 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012da89:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012da90:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f012da95:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012da98:	eb 19                	jmp    f012dab3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012da9a:	83 ec 0c             	sub    $0xc,%esp
f012da9d:	ff 75 dc             	pushl  -0x24(%ebp)
f012daa0:	e8 e4 a3 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012daa5:	83 c4 10             	add    $0x10,%esp
f012daa8:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012daab:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f012dab0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012dab3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012dab7:	74 08                	je     f012dac1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012dab9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012dabc:	8b 40 44             	mov    0x44(%eax),%eax
f012dabf:	eb 05                	jmp    f012dac6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012dac1:	b8 00 00 00 00       	mov    $0x0,%eax
f012dac6:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f012dacb:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f012dad0:	85 c0                	test   %eax,%eax
f012dad2:	75 c6                	jne    f012da9a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012dad4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012dad8:	75 c0                	jne    f012da9a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012dada:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dadf:	85 c0                	test   %eax,%eax
f012dae1:	0f 84 ec 00 00 00    	je     f012dbd3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012dae7:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012daec:	83 ec 0c             	sub    $0xc,%esp
f012daef:	50                   	push   %eax
f012daf0:	e8 94 a3 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012daf5:	83 c4 10             	add    $0x10,%esp
f012daf8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dafb:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db00:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db06:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012db09:	0f af c2             	imul   %edx,%eax
f012db0c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012db11:	f7 e2                	mul    %edx
f012db13:	89 d0                	mov    %edx,%eax
f012db15:	c1 e8 05             	shr    $0x5,%eax
f012db18:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012db1b:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db20:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012db29:	89 d1                	mov    %edx,%ecx
f012db2b:	0f af c8             	imul   %eax,%ecx
f012db2e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012db33:	f7 e1                	mul    %ecx
f012db35:	c1 ea 05             	shr    $0x5,%edx
f012db38:	89 d0                	mov    %edx,%eax
f012db3a:	c1 e0 02             	shl    $0x2,%eax
f012db3d:	01 d0                	add    %edx,%eax
f012db3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012db46:	01 d0                	add    %edx,%eax
f012db48:	c1 e0 02             	shl    $0x2,%eax
f012db4b:	29 c1                	sub    %eax,%ecx
f012db4d:	89 ca                	mov    %ecx,%edx
f012db4f:	85 d2                	test   %edx,%edx
f012db51:	74 03                	je     f012db56 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012db53:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012db56:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012db59:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012db5c:	eb 75                	jmp    f012dbd3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012db5e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db63:	83 ec 0c             	sub    $0xc,%esp
f012db66:	50                   	push   %eax
f012db67:	e8 1d a3 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012db6c:	83 c4 10             	add    $0x10,%esp
f012db6f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012db72:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db77:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db7d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012db80:	0f af c2             	imul   %edx,%eax
f012db83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012db88:	f7 e2                	mul    %edx
f012db8a:	89 d0                	mov    %edx,%eax
f012db8c:	c1 e8 05             	shr    $0x5,%eax
f012db8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012db92:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db97:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012dba0:	89 d1                	mov    %edx,%ecx
f012dba2:	0f af c8             	imul   %eax,%ecx
f012dba5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dbaa:	f7 e1                	mul    %ecx
f012dbac:	c1 ea 05             	shr    $0x5,%edx
f012dbaf:	89 d0                	mov    %edx,%eax
f012dbb1:	c1 e0 02             	shl    $0x2,%eax
f012dbb4:	01 d0                	add    %edx,%eax
f012dbb6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dbbd:	01 d0                	add    %edx,%eax
f012dbbf:	c1 e0 02             	shl    $0x2,%eax
f012dbc2:	29 c1                	sub    %eax,%ecx
f012dbc4:	89 ca                	mov    %ecx,%edx
f012dbc6:	85 d2                	test   %edx,%edx
f012dbc8:	74 03                	je     f012dbcd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012dbca:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012dbcd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012dbd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012dbd3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012dbd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dbd9:	01 c2                	add    %eax,%edx
f012dbdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dbde:	01 d0                	add    %edx,%eax
}
f012dbe0:	c9                   	leave  
f012dbe1:	c3                   	ret    

f012dbe2 <schenv>:


void schenv()
{
f012dbe2:	55                   	push   %ebp
f012dbe3:	89 e5                	mov    %esp,%ebp
f012dbe5:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012dbe8:	c6 05 1c bf 2b f0 00 	movb   $0x0,0xf02bbf1c
	__ne = NULL;
f012dbef:	c7 05 b4 be 2b f0 00 	movl   $0x0,0xf02bbeb4
f012dbf6:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dbf9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dc00:	eb 3a                	jmp    f012dc3c <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012dc02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc05:	c1 e0 04             	shl    $0x4,%eax
f012dc08:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012dc0d:	83 ec 0c             	sub    $0xc,%esp
f012dc10:	50                   	push   %eax
f012dc11:	e8 cb 6d fd ff       	call   f01049e1 <queue_size>
f012dc16:	83 c4 10             	add    $0x10,%esp
f012dc19:	85 c0                	test   %eax,%eax
f012dc1b:	74 1c                	je     f012dc39 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012dc1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc20:	c1 e0 04             	shl    $0x4,%eax
f012dc23:	05 24 3b 25 f0       	add    $0xf0253b24,%eax
f012dc28:	8b 00                	mov    (%eax),%eax
f012dc2a:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
			__nl = i;
f012dc2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc32:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
			break;
f012dc37:	eb 10                	jmp    f012dc49 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dc39:	ff 45 f4             	incl   -0xc(%ebp)
f012dc3c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012dc41:	0f b6 c0             	movzbl %al,%eax
f012dc44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc47:	7f b9                	jg     f012dc02 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012dc49:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dc4e:	85 c0                	test   %eax,%eax
f012dc50:	0f 84 86 00 00 00    	je     f012dcdc <schenv+0xfa>
	{
		if (__ne != NULL)
f012dc56:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012dc5b:	85 c0                	test   %eax,%eax
f012dc5d:	74 4b                	je     f012dcaa <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012dc5f:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dc64:	0f b6 c0             	movzbl %al,%eax
f012dc67:	8d 50 01             	lea    0x1(%eax),%edx
f012dc6a:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012dc6f:	0f b6 c0             	movzbl %al,%eax
f012dc72:	39 c2                	cmp    %eax,%edx
f012dc74:	7d 66                	jge    f012dcdc <schenv+0xfa>
			{
				__ne = curenv;
f012dc76:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dc7b:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012dc80:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dc85:	0f b6 c0             	movzbl %al,%eax
f012dc88:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012dc8e:	0f b6 d2             	movzbl %dl,%edx
f012dc91:	4a                   	dec    %edx
f012dc92:	39 d0                	cmp    %edx,%eax
f012dc94:	7d 08                	jge    f012dc9e <schenv+0xbc>
f012dc96:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dc9b:	40                   	inc    %eax
f012dc9c:	eb 05                	jmp    f012dca3 <schenv+0xc1>
f012dc9e:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dca3:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012dca8:	eb 32                	jmp    f012dcdc <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012dcaa:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dcaf:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012dcb4:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dcb9:	0f b6 c0             	movzbl %al,%eax
f012dcbc:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012dcc2:	0f b6 d2             	movzbl %dl,%edx
f012dcc5:	4a                   	dec    %edx
f012dcc6:	39 d0                	cmp    %edx,%eax
f012dcc8:	7d 08                	jge    f012dcd2 <schenv+0xf0>
f012dcca:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dccf:	40                   	inc    %eax
f012dcd0:	eb 05                	jmp    f012dcd7 <schenv+0xf5>
f012dcd2:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dcd7:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
		}
	}
}
f012dcdc:	90                   	nop
f012dcdd:	c9                   	leave  
f012dcde:	c3                   	ret    

f012dcdf <chksch>:

void chksch(uint8 onoff)
{
f012dcdf:	55                   	push   %ebp
f012dce0:	89 e5                	mov    %esp,%ebp
f012dce2:	83 ec 04             	sub    $0x4,%esp
f012dce5:	8b 45 08             	mov    0x8(%ebp),%eax
f012dce8:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012dceb:	c7 05 18 bf 2b f0 00 	movl   $0x0,0xf02bbf18
f012dcf2:	00 00 00 
	__ne = NULL;
f012dcf5:	c7 05 b4 be 2b f0 00 	movl   $0x0,0xf02bbeb4
f012dcfc:	00 00 00 
	__pl = 0 ;
f012dcff:	c6 05 18 3b 25 f0 00 	movb   $0x0,0xf0253b18
	__nl = 0 ;
f012dd06:	c6 05 1c bf 2b f0 00 	movb   $0x0,0xf02bbf1c
	__chkstatus = onoff;
f012dd0d:	8a 45 fc             	mov    -0x4(%ebp),%al
f012dd10:	a2 b0 be 2b f0       	mov    %al,0xf02bbeb0
}
f012dd15:	90                   	nop
f012dd16:	c9                   	leave  
f012dd17:	c3                   	ret    

f012dd18 <chk1>:
void chk1()
{
f012dd18:	55                   	push   %ebp
f012dd19:	89 e5                	mov    %esp,%ebp
f012dd1b:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012dd1e:	a0 b0 be 2b f0       	mov    0xf02bbeb0,%al
f012dd23:	84 c0                	test   %al,%al
f012dd25:	74 2b                	je     f012dd52 <chk1+0x3a>
		return ;
	__pe = curenv;
f012dd27:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dd2c:	a3 18 bf 2b f0       	mov    %eax,0xf02bbf18
	__pl = __nl ;
f012dd31:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012dd36:	a2 18 3b 25 f0       	mov    %al,0xf0253b18
	if (__pe == NULL)
f012dd3b:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012dd40:	85 c0                	test   %eax,%eax
f012dd42:	75 07                	jne    f012dd4b <chk1+0x33>
	{
		__pl = 0;
f012dd44:	c6 05 18 3b 25 f0 00 	movb   $0x0,0xf0253b18
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012dd4b:	e8 92 fe ff ff       	call   f012dbe2 <schenv>
f012dd50:	eb 01                	jmp    f012dd53 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012dd52:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012dd53:	c9                   	leave  
f012dd54:	c3                   	ret    

f012dd55 <chk2>:
void chk2(struct Env* __se)
{
f012dd55:	55                   	push   %ebp
f012dd56:	89 e5                	mov    %esp,%ebp
f012dd58:	53                   	push   %ebx
f012dd59:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012dd5c:	a0 b0 be 2b f0       	mov    0xf02bbeb0,%al
f012dd61:	84 c0                	test   %al,%al
f012dd63:	0f 84 35 02 00 00    	je     f012df9e <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012dd69:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012dd6e:	39 45 08             	cmp    %eax,0x8(%ebp)
f012dd71:	74 19                	je     f012dd8c <chk2+0x37>
f012dd73:	68 d5 a6 13 f0       	push   $0xf013a6d5
f012dd78:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012dd7d:	68 f8 00 00 00       	push   $0xf8
f012dd82:	68 27 a6 13 f0       	push   $0xf013a627
f012dd87:	e8 da 24 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012dd8c:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012dd91:	85 c0                	test   %eax,%eax
f012dd93:	0f 84 1b 01 00 00    	je     f012deb4 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012dd99:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012dd9e:	0f b6 c0             	movzbl %al,%eax
f012dda1:	8a 80 a8 be 2b f0    	mov    -0xfd44158(%eax),%al
f012dda7:	0f b6 d8             	movzbl %al,%ebx
f012ddaa:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012ddaf:	99                   	cltd   
f012ddb0:	f7 fb                	idiv   %ebx
f012ddb2:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012ddb8:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012ddbd:	0f b6 c0             	movzbl %al,%eax
f012ddc0:	8a 80 a8 be 2b f0    	mov    -0xfd44158(%eax),%al
f012ddc6:	0f b6 d8             	movzbl %al,%ebx
f012ddc9:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012ddce:	99                   	cltd   
f012ddcf:	f7 fb                	idiv   %ebx
f012ddd1:	89 c3                	mov    %eax,%ebx
f012ddd3:	89 c8                	mov    %ecx,%eax
f012ddd5:	99                   	cltd   
f012ddd6:	f7 fb                	idiv   %ebx
f012ddd8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012dddc:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012dde0:	83 e0 01             	and    $0x1,%eax
f012dde3:	66 85 c0             	test   %ax,%ax
f012dde6:	74 07                	je     f012ddef <chk2+0x9a>
f012dde8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ddec:	40                   	inc    %eax
f012dded:	eb 04                	jmp    f012ddf3 <chk2+0x9e>
f012ddef:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ddf3:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012ddf7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012ddfb:	89 d0                	mov    %edx,%eax
f012ddfd:	c1 e0 02             	shl    $0x2,%eax
f012de00:	01 d0                	add    %edx,%eax
f012de02:	01 c0                	add    %eax,%eax
f012de04:	01 d0                	add    %edx,%eax
f012de06:	c1 e0 02             	shl    $0x2,%eax
f012de09:	01 d0                	add    %edx,%eax
f012de0b:	01 c0                	add    %eax,%eax
f012de0d:	89 c1                	mov    %eax,%ecx
f012de0f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012de14:	f7 e9                	imul   %ecx
f012de16:	c1 fa 05             	sar    $0x5,%edx
f012de19:	89 c8                	mov    %ecx,%eax
f012de1b:	c1 f8 1f             	sar    $0x1f,%eax
f012de1e:	29 c2                	sub    %eax,%edx
f012de20:	89 d0                	mov    %edx,%eax
f012de22:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012de26:	e8 bc 6a fd ff       	call   f01048e7 <kclock_read_cnt0>
f012de2b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012de2f:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012de33:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012de37:	76 0a                	jbe    f012de43 <chk2+0xee>
f012de39:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012de3d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012de41:	76 19                	jbe    f012de5c <chk2+0x107>
f012de43:	68 f8 a6 13 f0       	push   $0xf013a6f8
f012de48:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012de4d:	68 02 01 00 00       	push   $0x102
f012de52:	68 27 a6 13 f0       	push   $0xf013a627
f012de57:	e8 0a 24 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012de5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012de63:	eb 42                	jmp    f012dea7 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012de65:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012de6a:	8b 40 4c             	mov    0x4c(%eax),%eax
f012de6d:	89 c2                	mov    %eax,%edx
f012de6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012de72:	c1 e0 04             	shl    $0x4,%eax
f012de75:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012de7a:	83 ec 08             	sub    $0x8,%esp
f012de7d:	52                   	push   %edx
f012de7e:	50                   	push   %eax
f012de7f:	e8 77 6d fd ff       	call   f0104bfb <find_env_in_queue>
f012de84:	83 c4 10             	add    $0x10,%esp
f012de87:	85 c0                	test   %eax,%eax
f012de89:	74 19                	je     f012dea4 <chk2+0x14f>
f012de8b:	68 1c a7 13 f0       	push   $0xf013a71c
f012de90:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012de95:	68 06 01 00 00       	push   $0x106
f012de9a:	68 27 a6 13 f0       	push   $0xf013a627
f012de9f:	e8 c2 23 fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012dea4:	ff 45 f4             	incl   -0xc(%ebp)
f012dea7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012deac:	0f b6 c0             	movzbl %al,%eax
f012deaf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012deb2:	7f b1                	jg     f012de65 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012deb4:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012deb9:	85 c0                	test   %eax,%eax
f012debb:	0f 84 de 00 00 00    	je     f012df9f <chk2+0x24a>
f012dec1:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f012dec7:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012decc:	39 c2                	cmp    %eax,%edx
f012dece:	0f 84 cb 00 00 00    	je     f012df9f <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012ded4:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012ded9:	0f b6 c0             	movzbl %al,%eax
f012dedc:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012dee2:	0f b6 d2             	movzbl %dl,%edx
f012dee5:	4a                   	dec    %edx
f012dee6:	39 d0                	cmp    %edx,%eax
f012dee8:	74 08                	je     f012def2 <chk2+0x19d>
f012deea:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012deef:	40                   	inc    %eax
f012def0:	eb 05                	jmp    f012def7 <chk2+0x1a2>
f012def2:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012def7:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012defa:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012deff:	8b 40 4c             	mov    0x4c(%eax),%eax
f012df02:	89 c2                	mov    %eax,%edx
f012df04:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012df08:	c1 e0 04             	shl    $0x4,%eax
f012df0b:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012df10:	83 ec 08             	sub    $0x8,%esp
f012df13:	52                   	push   %edx
f012df14:	50                   	push   %eax
f012df15:	e8 e1 6c fd ff       	call   f0104bfb <find_env_in_queue>
f012df1a:	83 c4 10             	add    $0x10,%esp
f012df1d:	85 c0                	test   %eax,%eax
f012df1f:	75 19                	jne    f012df3a <chk2+0x1e5>
f012df21:	68 5c a7 13 f0       	push   $0xf013a75c
f012df26:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012df2b:	68 0c 01 00 00       	push   $0x10c
f012df30:	68 27 a6 13 f0       	push   $0xf013a627
f012df35:	e8 2c 23 fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012df3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012df41:	eb 4c                	jmp    f012df8f <chk2+0x23a>
		{
			if (i == __tl) continue;
f012df43:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012df47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012df4a:	74 3f                	je     f012df8b <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012df4c:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012df51:	8b 40 4c             	mov    0x4c(%eax),%eax
f012df54:	89 c2                	mov    %eax,%edx
f012df56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012df59:	c1 e0 04             	shl    $0x4,%eax
f012df5c:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012df61:	83 ec 08             	sub    $0x8,%esp
f012df64:	52                   	push   %edx
f012df65:	50                   	push   %eax
f012df66:	e8 90 6c fd ff       	call   f0104bfb <find_env_in_queue>
f012df6b:	83 c4 10             	add    $0x10,%esp
f012df6e:	85 c0                	test   %eax,%eax
f012df70:	74 1a                	je     f012df8c <chk2+0x237>
f012df72:	68 a0 a7 13 f0       	push   $0xf013a7a0
f012df77:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012df7c:	68 10 01 00 00       	push   $0x110
f012df81:	68 27 a6 13 f0       	push   $0xf013a627
f012df86:	e8 db 22 fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012df8b:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012df8c:	ff 45 f0             	incl   -0x10(%ebp)
f012df8f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012df94:	0f b6 c0             	movzbl %al,%eax
f012df97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012df9a:	7f a7                	jg     f012df43 <chk2+0x1ee>
f012df9c:	eb 01                	jmp    f012df9f <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012df9e:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012df9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012dfa2:	c9                   	leave  
f012dfa3:	c3                   	ret    

f012dfa4 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012dfa4:	55                   	push   %ebp
f012dfa5:	89 e5                	mov    %esp,%ebp
f012dfa7:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012dfaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dfb1:	eb 40                	jmp    f012dff3 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012dfb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfb6:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012dfbc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012dfc1:	83 ec 08             	sub    $0x8,%esp
f012dfc4:	52                   	push   %edx
f012dfc5:	50                   	push   %eax
f012dfc6:	e8 92 01 00 00       	call   f012e15d <check_va2pa>
f012dfcb:	83 c4 10             	add    $0x10,%esp
f012dfce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dfd1:	74 19                	je     f012dfec <check_boot_pgdir+0x48>
f012dfd3:	68 e0 a7 13 f0       	push   $0xf013a7e0
f012dfd8:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012dfdd:	68 37 01 00 00       	push   $0x137
f012dfe2:	68 27 a6 13 f0       	push   $0xf013a627
f012dfe7:	e8 c4 21 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012dfec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012dff3:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012dffa:	75 b7                	jne    f012dfb3 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012dffc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e003:	eb 74                	jmp    f012e079 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e005:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e008:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e00e:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e013:	83 ec 08             	sub    $0x8,%esp
f012e016:	52                   	push   %edx
f012e017:	50                   	push   %eax
f012e018:	e8 40 01 00 00       	call   f012e15d <check_va2pa>
f012e01d:	83 c4 10             	add    $0x10,%esp
f012e020:	c7 45 f0 00 40 18 f0 	movl   $0xf0184000,-0x10(%ebp)
f012e027:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e02e:	77 17                	ja     f012e047 <check_boot_pgdir+0xa3>
f012e030:	ff 75 f0             	pushl  -0x10(%ebp)
f012e033:	68 18 a8 13 f0       	push   $0xf013a818
f012e038:	68 3c 01 00 00       	push   $0x13c
f012e03d:	68 27 a6 13 f0       	push   $0xf013a627
f012e042:	e8 69 21 fd ff       	call   f01001b0 <_panic>
f012e047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e04a:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e050:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e053:	01 ca                	add    %ecx,%edx
f012e055:	39 d0                	cmp    %edx,%eax
f012e057:	74 19                	je     f012e072 <check_boot_pgdir+0xce>
f012e059:	68 4c a8 13 f0       	push   $0xf013a84c
f012e05e:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012e063:	68 3c 01 00 00       	push   $0x13c
f012e068:	68 27 a6 13 f0       	push   $0xf013a627
f012e06d:	e8 3e 21 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e072:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e079:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e080:	76 83                	jbe    f012e005 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e082:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e089:	e9 af 00 00 00       	jmp    f012e13d <check_boot_pgdir+0x199>
		switch (i) {
f012e08e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e091:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e096:	74 11                	je     f012e0a9 <check_boot_pgdir+0x105>
f012e098:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e09d:	72 36                	jb     f012e0d5 <check_boot_pgdir+0x131>
f012e09f:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e0a4:	83 f8 02             	cmp    $0x2,%eax
f012e0a7:	77 2c                	ja     f012e0d5 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e0a9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e0ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e0b1:	c1 e2 02             	shl    $0x2,%edx
f012e0b4:	01 d0                	add    %edx,%eax
f012e0b6:	8b 00                	mov    (%eax),%eax
f012e0b8:	85 c0                	test   %eax,%eax
f012e0ba:	75 7a                	jne    f012e136 <check_boot_pgdir+0x192>
f012e0bc:	68 ce a8 13 f0       	push   $0xf013a8ce
f012e0c1:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012e0c6:	68 47 01 00 00       	push   $0x147
f012e0cb:	68 27 a6 13 f0       	push   $0xf013a627
f012e0d0:	e8 db 20 fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e0d5:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e0dc:	76 2c                	jbe    f012e10a <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e0de:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e0e6:	c1 e2 02             	shl    $0x2,%edx
f012e0e9:	01 d0                	add    %edx,%eax
f012e0eb:	8b 00                	mov    (%eax),%eax
f012e0ed:	85 c0                	test   %eax,%eax
f012e0ef:	75 48                	jne    f012e139 <check_boot_pgdir+0x195>
f012e0f1:	68 ce a8 13 f0       	push   $0xf013a8ce
f012e0f6:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012e0fb:	68 4b 01 00 00       	push   $0x14b
f012e100:	68 27 a6 13 f0       	push   $0xf013a627
f012e105:	e8 a6 20 fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e10a:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e10f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e112:	c1 e2 02             	shl    $0x2,%edx
f012e115:	01 d0                	add    %edx,%eax
f012e117:	8b 00                	mov    (%eax),%eax
f012e119:	85 c0                	test   %eax,%eax
f012e11b:	74 1c                	je     f012e139 <check_boot_pgdir+0x195>
f012e11d:	68 e4 a8 13 f0       	push   $0xf013a8e4
f012e122:	68 e2 a6 13 f0       	push   $0xf013a6e2
f012e127:	68 4d 01 00 00       	push   $0x14d
f012e12c:	68 27 a6 13 f0       	push   $0xf013a627
f012e131:	e8 7a 20 fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e136:	90                   	nop
f012e137:	eb 01                	jmp    f012e13a <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e139:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e13a:	ff 45 f4             	incl   -0xc(%ebp)
f012e13d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e144:	0f 86 44 ff ff ff    	jbe    f012e08e <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e14a:	83 ec 0c             	sub    $0xc,%esp
f012e14d:	68 00 a9 13 f0       	push   $0xf013a900
f012e152:	e8 da 2c fd ff       	call   f0100e31 <cprintf>
f012e157:	83 c4 10             	add    $0x10,%esp
}
f012e15a:	90                   	nop
f012e15b:	c9                   	leave  
f012e15c:	c3                   	ret    

f012e15d <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e15d:	55                   	push   %ebp
f012e15e:	89 e5                	mov    %esp,%ebp
f012e160:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e163:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e166:	c1 e8 16             	shr    $0x16,%eax
f012e169:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e170:	8b 45 08             	mov    0x8(%ebp),%eax
f012e173:	01 d0                	add    %edx,%eax
f012e175:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e178:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e17b:	8b 00                	mov    (%eax),%eax
f012e17d:	83 e0 01             	and    $0x1,%eax
f012e180:	85 c0                	test   %eax,%eax
f012e182:	75 0a                	jne    f012e18e <check_va2pa+0x31>
		return ~0;
f012e184:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e189:	e9 87 00 00 00       	jmp    f012e215 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e18e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e191:	8b 00                	mov    (%eax),%eax
f012e193:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e198:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e19b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e19e:	c1 e8 0c             	shr    $0xc,%eax
f012e1a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e1a4:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012e1a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e1ac:	72 17                	jb     f012e1c5 <check_va2pa+0x68>
f012e1ae:	ff 75 f0             	pushl  -0x10(%ebp)
f012e1b1:	68 20 a9 13 f0       	push   $0xf013a920
f012e1b6:	68 63 01 00 00       	push   $0x163
f012e1bb:	68 27 a6 13 f0       	push   $0xf013a627
f012e1c0:	e8 eb 1f fd ff       	call   f01001b0 <_panic>
f012e1c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e1c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e1cd:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e1d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e1d3:	c1 e8 0c             	shr    $0xc,%eax
f012e1d6:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e1db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e1e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e1e5:	01 d0                	add    %edx,%eax
f012e1e7:	8b 00                	mov    (%eax),%eax
f012e1e9:	83 e0 01             	and    $0x1,%eax
f012e1ec:	85 c0                	test   %eax,%eax
f012e1ee:	75 07                	jne    f012e1f7 <check_va2pa+0x9a>
		return ~0;
f012e1f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e1f5:	eb 1e                	jmp    f012e215 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e1f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e1fa:	c1 e8 0c             	shr    $0xc,%eax
f012e1fd:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e202:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e209:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e20c:	01 d0                	add    %edx,%eax
f012e20e:	8b 00                	mov    (%eax),%eax
f012e210:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e215:	c9                   	leave  
f012e216:	c3                   	ret    

f012e217 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e217:	55                   	push   %ebp
f012e218:	89 e5                	mov    %esp,%ebp
f012e21a:	53                   	push   %ebx
f012e21b:	83 ec 14             	sub    $0x14,%esp
f012e21e:	8b 45 10             	mov    0x10(%ebp),%eax
f012e221:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e224:	8b 45 14             	mov    0x14(%ebp),%eax
f012e227:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e22a:	8b 45 18             	mov    0x18(%ebp),%eax
f012e22d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e232:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e235:	77 55                	ja     f012e28c <printnum+0x75>
f012e237:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e23a:	72 05                	jb     f012e241 <printnum+0x2a>
f012e23c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e23f:	77 4b                	ja     f012e28c <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e241:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e244:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e247:	8b 45 18             	mov    0x18(%ebp),%eax
f012e24a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e24f:	52                   	push   %edx
f012e250:	50                   	push   %eax
f012e251:	ff 75 f4             	pushl  -0xc(%ebp)
f012e254:	ff 75 f0             	pushl  -0x10(%ebp)
f012e257:	e8 40 14 00 00       	call   f012f69c <__udivdi3>
f012e25c:	83 c4 10             	add    $0x10,%esp
f012e25f:	83 ec 04             	sub    $0x4,%esp
f012e262:	ff 75 20             	pushl  0x20(%ebp)
f012e265:	53                   	push   %ebx
f012e266:	ff 75 18             	pushl  0x18(%ebp)
f012e269:	52                   	push   %edx
f012e26a:	50                   	push   %eax
f012e26b:	ff 75 0c             	pushl  0xc(%ebp)
f012e26e:	ff 75 08             	pushl  0x8(%ebp)
f012e271:	e8 a1 ff ff ff       	call   f012e217 <printnum>
f012e276:	83 c4 20             	add    $0x20,%esp
f012e279:	eb 1a                	jmp    f012e295 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e27b:	83 ec 08             	sub    $0x8,%esp
f012e27e:	ff 75 0c             	pushl  0xc(%ebp)
f012e281:	ff 75 20             	pushl  0x20(%ebp)
f012e284:	8b 45 08             	mov    0x8(%ebp),%eax
f012e287:	ff d0                	call   *%eax
f012e289:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e28c:	ff 4d 1c             	decl   0x1c(%ebp)
f012e28f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e293:	7f e6                	jg     f012e27b <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e295:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e298:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e29d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e2a3:	53                   	push   %ebx
f012e2a4:	51                   	push   %ecx
f012e2a5:	52                   	push   %edx
f012e2a6:	50                   	push   %eax
f012e2a7:	e8 00 15 00 00       	call   f012f7ac <__umoddi3>
f012e2ac:	83 c4 10             	add    $0x10,%esp
f012e2af:	05 74 ab 13 f0       	add    $0xf013ab74,%eax
f012e2b4:	8a 00                	mov    (%eax),%al
f012e2b6:	0f be c0             	movsbl %al,%eax
f012e2b9:	83 ec 08             	sub    $0x8,%esp
f012e2bc:	ff 75 0c             	pushl  0xc(%ebp)
f012e2bf:	50                   	push   %eax
f012e2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2c3:	ff d0                	call   *%eax
f012e2c5:	83 c4 10             	add    $0x10,%esp
}
f012e2c8:	90                   	nop
f012e2c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e2cc:	c9                   	leave  
f012e2cd:	c3                   	ret    

f012e2ce <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e2ce:	55                   	push   %ebp
f012e2cf:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e2d1:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e2d5:	7e 1c                	jle    f012e2f3 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2da:	8b 00                	mov    (%eax),%eax
f012e2dc:	8d 50 08             	lea    0x8(%eax),%edx
f012e2df:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2e2:	89 10                	mov    %edx,(%eax)
f012e2e4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2e7:	8b 00                	mov    (%eax),%eax
f012e2e9:	83 e8 08             	sub    $0x8,%eax
f012e2ec:	8b 50 04             	mov    0x4(%eax),%edx
f012e2ef:	8b 00                	mov    (%eax),%eax
f012e2f1:	eb 40                	jmp    f012e333 <getuint+0x65>
	else if (lflag)
f012e2f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e2f7:	74 1e                	je     f012e317 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e2f9:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2fc:	8b 00                	mov    (%eax),%eax
f012e2fe:	8d 50 04             	lea    0x4(%eax),%edx
f012e301:	8b 45 08             	mov    0x8(%ebp),%eax
f012e304:	89 10                	mov    %edx,(%eax)
f012e306:	8b 45 08             	mov    0x8(%ebp),%eax
f012e309:	8b 00                	mov    (%eax),%eax
f012e30b:	83 e8 04             	sub    $0x4,%eax
f012e30e:	8b 00                	mov    (%eax),%eax
f012e310:	ba 00 00 00 00       	mov    $0x0,%edx
f012e315:	eb 1c                	jmp    f012e333 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e317:	8b 45 08             	mov    0x8(%ebp),%eax
f012e31a:	8b 00                	mov    (%eax),%eax
f012e31c:	8d 50 04             	lea    0x4(%eax),%edx
f012e31f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e322:	89 10                	mov    %edx,(%eax)
f012e324:	8b 45 08             	mov    0x8(%ebp),%eax
f012e327:	8b 00                	mov    (%eax),%eax
f012e329:	83 e8 04             	sub    $0x4,%eax
f012e32c:	8b 00                	mov    (%eax),%eax
f012e32e:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e333:	5d                   	pop    %ebp
f012e334:	c3                   	ret    

f012e335 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e335:	55                   	push   %ebp
f012e336:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e338:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e33c:	7e 1c                	jle    f012e35a <getint+0x25>
		return va_arg(*ap, long long);
f012e33e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e341:	8b 00                	mov    (%eax),%eax
f012e343:	8d 50 08             	lea    0x8(%eax),%edx
f012e346:	8b 45 08             	mov    0x8(%ebp),%eax
f012e349:	89 10                	mov    %edx,(%eax)
f012e34b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e34e:	8b 00                	mov    (%eax),%eax
f012e350:	83 e8 08             	sub    $0x8,%eax
f012e353:	8b 50 04             	mov    0x4(%eax),%edx
f012e356:	8b 00                	mov    (%eax),%eax
f012e358:	eb 38                	jmp    f012e392 <getint+0x5d>
	else if (lflag)
f012e35a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e35e:	74 1a                	je     f012e37a <getint+0x45>
		return va_arg(*ap, long);
f012e360:	8b 45 08             	mov    0x8(%ebp),%eax
f012e363:	8b 00                	mov    (%eax),%eax
f012e365:	8d 50 04             	lea    0x4(%eax),%edx
f012e368:	8b 45 08             	mov    0x8(%ebp),%eax
f012e36b:	89 10                	mov    %edx,(%eax)
f012e36d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e370:	8b 00                	mov    (%eax),%eax
f012e372:	83 e8 04             	sub    $0x4,%eax
f012e375:	8b 00                	mov    (%eax),%eax
f012e377:	99                   	cltd   
f012e378:	eb 18                	jmp    f012e392 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e37a:	8b 45 08             	mov    0x8(%ebp),%eax
f012e37d:	8b 00                	mov    (%eax),%eax
f012e37f:	8d 50 04             	lea    0x4(%eax),%edx
f012e382:	8b 45 08             	mov    0x8(%ebp),%eax
f012e385:	89 10                	mov    %edx,(%eax)
f012e387:	8b 45 08             	mov    0x8(%ebp),%eax
f012e38a:	8b 00                	mov    (%eax),%eax
f012e38c:	83 e8 04             	sub    $0x4,%eax
f012e38f:	8b 00                	mov    (%eax),%eax
f012e391:	99                   	cltd   
}
f012e392:	5d                   	pop    %ebp
f012e393:	c3                   	ret    

f012e394 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e394:	55                   	push   %ebp
f012e395:	89 e5                	mov    %esp,%ebp
f012e397:	56                   	push   %esi
f012e398:	53                   	push   %ebx
f012e399:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e39c:	eb 17                	jmp    f012e3b5 <vprintfmt+0x21>
			if (ch == '\0')
f012e39e:	85 db                	test   %ebx,%ebx
f012e3a0:	0f 84 af 03 00 00    	je     f012e755 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e3a6:	83 ec 08             	sub    $0x8,%esp
f012e3a9:	ff 75 0c             	pushl  0xc(%ebp)
f012e3ac:	53                   	push   %ebx
f012e3ad:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3b0:	ff d0                	call   *%eax
f012e3b2:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e3b5:	8b 45 10             	mov    0x10(%ebp),%eax
f012e3b8:	8d 50 01             	lea    0x1(%eax),%edx
f012e3bb:	89 55 10             	mov    %edx,0x10(%ebp)
f012e3be:	8a 00                	mov    (%eax),%al
f012e3c0:	0f b6 d8             	movzbl %al,%ebx
f012e3c3:	83 fb 25             	cmp    $0x25,%ebx
f012e3c6:	75 d6                	jne    f012e39e <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e3c8:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e3cc:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e3d3:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e3da:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e3e1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e3e8:	8b 45 10             	mov    0x10(%ebp),%eax
f012e3eb:	8d 50 01             	lea    0x1(%eax),%edx
f012e3ee:	89 55 10             	mov    %edx,0x10(%ebp)
f012e3f1:	8a 00                	mov    (%eax),%al
f012e3f3:	0f b6 d8             	movzbl %al,%ebx
f012e3f6:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e3f9:	83 f8 55             	cmp    $0x55,%eax
f012e3fc:	0f 87 2b 03 00 00    	ja     f012e72d <vprintfmt+0x399>
f012e402:	8b 04 85 98 ab 13 f0 	mov    -0xfec5468(,%eax,4),%eax
f012e409:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e40b:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e40f:	eb d7                	jmp    f012e3e8 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e411:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e415:	eb d1                	jmp    f012e3e8 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e417:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e41e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e421:	89 d0                	mov    %edx,%eax
f012e423:	c1 e0 02             	shl    $0x2,%eax
f012e426:	01 d0                	add    %edx,%eax
f012e428:	01 c0                	add    %eax,%eax
f012e42a:	01 d8                	add    %ebx,%eax
f012e42c:	83 e8 30             	sub    $0x30,%eax
f012e42f:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e432:	8b 45 10             	mov    0x10(%ebp),%eax
f012e435:	8a 00                	mov    (%eax),%al
f012e437:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e43a:	83 fb 2f             	cmp    $0x2f,%ebx
f012e43d:	7e 3e                	jle    f012e47d <vprintfmt+0xe9>
f012e43f:	83 fb 39             	cmp    $0x39,%ebx
f012e442:	7f 39                	jg     f012e47d <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e444:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e447:	eb d5                	jmp    f012e41e <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e449:	8b 45 14             	mov    0x14(%ebp),%eax
f012e44c:	83 c0 04             	add    $0x4,%eax
f012e44f:	89 45 14             	mov    %eax,0x14(%ebp)
f012e452:	8b 45 14             	mov    0x14(%ebp),%eax
f012e455:	83 e8 04             	sub    $0x4,%eax
f012e458:	8b 00                	mov    (%eax),%eax
f012e45a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e45d:	eb 1f                	jmp    f012e47e <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e45f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e463:	79 83                	jns    f012e3e8 <vprintfmt+0x54>
				width = 0;
f012e465:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e46c:	e9 77 ff ff ff       	jmp    f012e3e8 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e471:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e478:	e9 6b ff ff ff       	jmp    f012e3e8 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e47d:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e47e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e482:	0f 89 60 ff ff ff    	jns    f012e3e8 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e488:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e48b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e48e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e495:	e9 4e ff ff ff       	jmp    f012e3e8 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e49a:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e49d:	e9 46 ff ff ff       	jmp    f012e3e8 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e4a2:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4a5:	83 c0 04             	add    $0x4,%eax
f012e4a8:	89 45 14             	mov    %eax,0x14(%ebp)
f012e4ab:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4ae:	83 e8 04             	sub    $0x4,%eax
f012e4b1:	8b 00                	mov    (%eax),%eax
f012e4b3:	83 ec 08             	sub    $0x8,%esp
f012e4b6:	ff 75 0c             	pushl  0xc(%ebp)
f012e4b9:	50                   	push   %eax
f012e4ba:	8b 45 08             	mov    0x8(%ebp),%eax
f012e4bd:	ff d0                	call   *%eax
f012e4bf:	83 c4 10             	add    $0x10,%esp
			break;
f012e4c2:	e9 89 02 00 00       	jmp    f012e750 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e4c7:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4ca:	83 c0 04             	add    $0x4,%eax
f012e4cd:	89 45 14             	mov    %eax,0x14(%ebp)
f012e4d0:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4d3:	83 e8 04             	sub    $0x4,%eax
f012e4d6:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e4d8:	85 db                	test   %ebx,%ebx
f012e4da:	79 02                	jns    f012e4de <vprintfmt+0x14a>
				err = -err;
f012e4dc:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e4de:	83 fb 64             	cmp    $0x64,%ebx
f012e4e1:	7f 0b                	jg     f012e4ee <vprintfmt+0x15a>
f012e4e3:	8b 34 9d e0 a9 13 f0 	mov    -0xfec5620(,%ebx,4),%esi
f012e4ea:	85 f6                	test   %esi,%esi
f012e4ec:	75 19                	jne    f012e507 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e4ee:	53                   	push   %ebx
f012e4ef:	68 85 ab 13 f0       	push   $0xf013ab85
f012e4f4:	ff 75 0c             	pushl  0xc(%ebp)
f012e4f7:	ff 75 08             	pushl  0x8(%ebp)
f012e4fa:	e8 5e 02 00 00       	call   f012e75d <printfmt>
f012e4ff:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e502:	e9 49 02 00 00       	jmp    f012e750 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e507:	56                   	push   %esi
f012e508:	68 8e ab 13 f0       	push   $0xf013ab8e
f012e50d:	ff 75 0c             	pushl  0xc(%ebp)
f012e510:	ff 75 08             	pushl  0x8(%ebp)
f012e513:	e8 45 02 00 00       	call   f012e75d <printfmt>
f012e518:	83 c4 10             	add    $0x10,%esp
			break;
f012e51b:	e9 30 02 00 00       	jmp    f012e750 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e520:	8b 45 14             	mov    0x14(%ebp),%eax
f012e523:	83 c0 04             	add    $0x4,%eax
f012e526:	89 45 14             	mov    %eax,0x14(%ebp)
f012e529:	8b 45 14             	mov    0x14(%ebp),%eax
f012e52c:	83 e8 04             	sub    $0x4,%eax
f012e52f:	8b 30                	mov    (%eax),%esi
f012e531:	85 f6                	test   %esi,%esi
f012e533:	75 05                	jne    f012e53a <vprintfmt+0x1a6>
				p = "(null)";
f012e535:	be 91 ab 13 f0       	mov    $0xf013ab91,%esi
			if (width > 0 && padc != '-')
f012e53a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e53e:	7e 6d                	jle    f012e5ad <vprintfmt+0x219>
f012e540:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e544:	74 67                	je     f012e5ad <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e546:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e549:	83 ec 08             	sub    $0x8,%esp
f012e54c:	50                   	push   %eax
f012e54d:	56                   	push   %esi
f012e54e:	e8 12 05 00 00       	call   f012ea65 <strnlen>
f012e553:	83 c4 10             	add    $0x10,%esp
f012e556:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e559:	eb 16                	jmp    f012e571 <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e55b:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e55f:	83 ec 08             	sub    $0x8,%esp
f012e562:	ff 75 0c             	pushl  0xc(%ebp)
f012e565:	50                   	push   %eax
f012e566:	8b 45 08             	mov    0x8(%ebp),%eax
f012e569:	ff d0                	call   *%eax
f012e56b:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e56e:	ff 4d e4             	decl   -0x1c(%ebp)
f012e571:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e575:	7f e4                	jg     f012e55b <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e577:	eb 34                	jmp    f012e5ad <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e579:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e57d:	74 1c                	je     f012e59b <vprintfmt+0x207>
f012e57f:	83 fb 1f             	cmp    $0x1f,%ebx
f012e582:	7e 05                	jle    f012e589 <vprintfmt+0x1f5>
f012e584:	83 fb 7e             	cmp    $0x7e,%ebx
f012e587:	7e 12                	jle    f012e59b <vprintfmt+0x207>
					putch('?', putdat);
f012e589:	83 ec 08             	sub    $0x8,%esp
f012e58c:	ff 75 0c             	pushl  0xc(%ebp)
f012e58f:	6a 3f                	push   $0x3f
f012e591:	8b 45 08             	mov    0x8(%ebp),%eax
f012e594:	ff d0                	call   *%eax
f012e596:	83 c4 10             	add    $0x10,%esp
f012e599:	eb 0f                	jmp    f012e5aa <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e59b:	83 ec 08             	sub    $0x8,%esp
f012e59e:	ff 75 0c             	pushl  0xc(%ebp)
f012e5a1:	53                   	push   %ebx
f012e5a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5a5:	ff d0                	call   *%eax
f012e5a7:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e5aa:	ff 4d e4             	decl   -0x1c(%ebp)
f012e5ad:	89 f0                	mov    %esi,%eax
f012e5af:	8d 70 01             	lea    0x1(%eax),%esi
f012e5b2:	8a 00                	mov    (%eax),%al
f012e5b4:	0f be d8             	movsbl %al,%ebx
f012e5b7:	85 db                	test   %ebx,%ebx
f012e5b9:	74 24                	je     f012e5df <vprintfmt+0x24b>
f012e5bb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e5bf:	78 b8                	js     f012e579 <vprintfmt+0x1e5>
f012e5c1:	ff 4d e0             	decl   -0x20(%ebp)
f012e5c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e5c8:	79 af                	jns    f012e579 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e5ca:	eb 13                	jmp    f012e5df <vprintfmt+0x24b>
				putch(' ', putdat);
f012e5cc:	83 ec 08             	sub    $0x8,%esp
f012e5cf:	ff 75 0c             	pushl  0xc(%ebp)
f012e5d2:	6a 20                	push   $0x20
f012e5d4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5d7:	ff d0                	call   *%eax
f012e5d9:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e5dc:	ff 4d e4             	decl   -0x1c(%ebp)
f012e5df:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e5e3:	7f e7                	jg     f012e5cc <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e5e5:	e9 66 01 00 00       	jmp    f012e750 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e5ea:	83 ec 08             	sub    $0x8,%esp
f012e5ed:	ff 75 e8             	pushl  -0x18(%ebp)
f012e5f0:	8d 45 14             	lea    0x14(%ebp),%eax
f012e5f3:	50                   	push   %eax
f012e5f4:	e8 3c fd ff ff       	call   f012e335 <getint>
f012e5f9:	83 c4 10             	add    $0x10,%esp
f012e5fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e5ff:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e602:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e605:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e608:	85 d2                	test   %edx,%edx
f012e60a:	79 23                	jns    f012e62f <vprintfmt+0x29b>
				putch('-', putdat);
f012e60c:	83 ec 08             	sub    $0x8,%esp
f012e60f:	ff 75 0c             	pushl  0xc(%ebp)
f012e612:	6a 2d                	push   $0x2d
f012e614:	8b 45 08             	mov    0x8(%ebp),%eax
f012e617:	ff d0                	call   *%eax
f012e619:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012e61c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e61f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e622:	f7 d8                	neg    %eax
f012e624:	83 d2 00             	adc    $0x0,%edx
f012e627:	f7 da                	neg    %edx
f012e629:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e62c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012e62f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e636:	e9 bc 00 00 00       	jmp    f012e6f7 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012e63b:	83 ec 08             	sub    $0x8,%esp
f012e63e:	ff 75 e8             	pushl  -0x18(%ebp)
f012e641:	8d 45 14             	lea    0x14(%ebp),%eax
f012e644:	50                   	push   %eax
f012e645:	e8 84 fc ff ff       	call   f012e2ce <getuint>
f012e64a:	83 c4 10             	add    $0x10,%esp
f012e64d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e650:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012e653:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e65a:	e9 98 00 00 00       	jmp    f012e6f7 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012e65f:	83 ec 08             	sub    $0x8,%esp
f012e662:	ff 75 0c             	pushl  0xc(%ebp)
f012e665:	6a 58                	push   $0x58
f012e667:	8b 45 08             	mov    0x8(%ebp),%eax
f012e66a:	ff d0                	call   *%eax
f012e66c:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e66f:	83 ec 08             	sub    $0x8,%esp
f012e672:	ff 75 0c             	pushl  0xc(%ebp)
f012e675:	6a 58                	push   $0x58
f012e677:	8b 45 08             	mov    0x8(%ebp),%eax
f012e67a:	ff d0                	call   *%eax
f012e67c:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e67f:	83 ec 08             	sub    $0x8,%esp
f012e682:	ff 75 0c             	pushl  0xc(%ebp)
f012e685:	6a 58                	push   $0x58
f012e687:	8b 45 08             	mov    0x8(%ebp),%eax
f012e68a:	ff d0                	call   *%eax
f012e68c:	83 c4 10             	add    $0x10,%esp
			break;
f012e68f:	e9 bc 00 00 00       	jmp    f012e750 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012e694:	83 ec 08             	sub    $0x8,%esp
f012e697:	ff 75 0c             	pushl  0xc(%ebp)
f012e69a:	6a 30                	push   $0x30
f012e69c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e69f:	ff d0                	call   *%eax
f012e6a1:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012e6a4:	83 ec 08             	sub    $0x8,%esp
f012e6a7:	ff 75 0c             	pushl  0xc(%ebp)
f012e6aa:	6a 78                	push   $0x78
f012e6ac:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6af:	ff d0                	call   *%eax
f012e6b1:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012e6b4:	8b 45 14             	mov    0x14(%ebp),%eax
f012e6b7:	83 c0 04             	add    $0x4,%eax
f012e6ba:	89 45 14             	mov    %eax,0x14(%ebp)
f012e6bd:	8b 45 14             	mov    0x14(%ebp),%eax
f012e6c0:	83 e8 04             	sub    $0x4,%eax
f012e6c3:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012e6c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e6c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012e6cf:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012e6d6:	eb 1f                	jmp    f012e6f7 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012e6d8:	83 ec 08             	sub    $0x8,%esp
f012e6db:	ff 75 e8             	pushl  -0x18(%ebp)
f012e6de:	8d 45 14             	lea    0x14(%ebp),%eax
f012e6e1:	50                   	push   %eax
f012e6e2:	e8 e7 fb ff ff       	call   f012e2ce <getuint>
f012e6e7:	83 c4 10             	add    $0x10,%esp
f012e6ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e6ed:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012e6f0:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012e6f7:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012e6fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e6fe:	83 ec 04             	sub    $0x4,%esp
f012e701:	52                   	push   %edx
f012e702:	ff 75 e4             	pushl  -0x1c(%ebp)
f012e705:	50                   	push   %eax
f012e706:	ff 75 f4             	pushl  -0xc(%ebp)
f012e709:	ff 75 f0             	pushl  -0x10(%ebp)
f012e70c:	ff 75 0c             	pushl  0xc(%ebp)
f012e70f:	ff 75 08             	pushl  0x8(%ebp)
f012e712:	e8 00 fb ff ff       	call   f012e217 <printnum>
f012e717:	83 c4 20             	add    $0x20,%esp
			break;
f012e71a:	eb 34                	jmp    f012e750 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012e71c:	83 ec 08             	sub    $0x8,%esp
f012e71f:	ff 75 0c             	pushl  0xc(%ebp)
f012e722:	53                   	push   %ebx
f012e723:	8b 45 08             	mov    0x8(%ebp),%eax
f012e726:	ff d0                	call   *%eax
f012e728:	83 c4 10             	add    $0x10,%esp
			break;
f012e72b:	eb 23                	jmp    f012e750 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012e72d:	83 ec 08             	sub    $0x8,%esp
f012e730:	ff 75 0c             	pushl  0xc(%ebp)
f012e733:	6a 25                	push   $0x25
f012e735:	8b 45 08             	mov    0x8(%ebp),%eax
f012e738:	ff d0                	call   *%eax
f012e73a:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012e73d:	ff 4d 10             	decl   0x10(%ebp)
f012e740:	eb 03                	jmp    f012e745 <vprintfmt+0x3b1>
f012e742:	ff 4d 10             	decl   0x10(%ebp)
f012e745:	8b 45 10             	mov    0x10(%ebp),%eax
f012e748:	48                   	dec    %eax
f012e749:	8a 00                	mov    (%eax),%al
f012e74b:	3c 25                	cmp    $0x25,%al
f012e74d:	75 f3                	jne    f012e742 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012e74f:	90                   	nop
		}
	}
f012e750:	e9 47 fc ff ff       	jmp    f012e39c <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012e755:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012e756:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e759:	5b                   	pop    %ebx
f012e75a:	5e                   	pop    %esi
f012e75b:	5d                   	pop    %ebp
f012e75c:	c3                   	ret    

f012e75d <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012e75d:	55                   	push   %ebp
f012e75e:	89 e5                	mov    %esp,%ebp
f012e760:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012e763:	8d 45 10             	lea    0x10(%ebp),%eax
f012e766:	83 c0 04             	add    $0x4,%eax
f012e769:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012e76c:	8b 45 10             	mov    0x10(%ebp),%eax
f012e76f:	ff 75 f4             	pushl  -0xc(%ebp)
f012e772:	50                   	push   %eax
f012e773:	ff 75 0c             	pushl  0xc(%ebp)
f012e776:	ff 75 08             	pushl  0x8(%ebp)
f012e779:	e8 16 fc ff ff       	call   f012e394 <vprintfmt>
f012e77e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012e781:	90                   	nop
f012e782:	c9                   	leave  
f012e783:	c3                   	ret    

f012e784 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012e784:	55                   	push   %ebp
f012e785:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012e787:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e78a:	8b 40 08             	mov    0x8(%eax),%eax
f012e78d:	8d 50 01             	lea    0x1(%eax),%edx
f012e790:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e793:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012e796:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e799:	8b 10                	mov    (%eax),%edx
f012e79b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e79e:	8b 40 04             	mov    0x4(%eax),%eax
f012e7a1:	39 c2                	cmp    %eax,%edx
f012e7a3:	73 12                	jae    f012e7b7 <sprintputch+0x33>
		*b->buf++ = ch;
f012e7a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7a8:	8b 00                	mov    (%eax),%eax
f012e7aa:	8d 48 01             	lea    0x1(%eax),%ecx
f012e7ad:	8b 55 0c             	mov    0xc(%ebp),%edx
f012e7b0:	89 0a                	mov    %ecx,(%edx)
f012e7b2:	8b 55 08             	mov    0x8(%ebp),%edx
f012e7b5:	88 10                	mov    %dl,(%eax)
}
f012e7b7:	90                   	nop
f012e7b8:	5d                   	pop    %ebp
f012e7b9:	c3                   	ret    

f012e7ba <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012e7ba:	55                   	push   %ebp
f012e7bb:	89 e5                	mov    %esp,%ebp
f012e7bd:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012e7c0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e7c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e7c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7c9:	8d 50 ff             	lea    -0x1(%eax),%edx
f012e7cc:	8b 45 08             	mov    0x8(%ebp),%eax
f012e7cf:	01 d0                	add    %edx,%eax
f012e7d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e7d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012e7db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e7df:	74 06                	je     f012e7e7 <vsnprintf+0x2d>
f012e7e1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e7e5:	7f 07                	jg     f012e7ee <vsnprintf+0x34>
		return -E_INVAL;
f012e7e7:	b8 03 00 00 00       	mov    $0x3,%eax
f012e7ec:	eb 20                	jmp    f012e80e <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012e7ee:	ff 75 14             	pushl  0x14(%ebp)
f012e7f1:	ff 75 10             	pushl  0x10(%ebp)
f012e7f4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012e7f7:	50                   	push   %eax
f012e7f8:	68 84 e7 12 f0       	push   $0xf012e784
f012e7fd:	e8 92 fb ff ff       	call   f012e394 <vprintfmt>
f012e802:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012e805:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e808:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012e80b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012e80e:	c9                   	leave  
f012e80f:	c3                   	ret    

f012e810 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012e810:	55                   	push   %ebp
f012e811:	89 e5                	mov    %esp,%ebp
f012e813:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012e816:	8d 45 10             	lea    0x10(%ebp),%eax
f012e819:	83 c0 04             	add    $0x4,%eax
f012e81c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012e81f:	8b 45 10             	mov    0x10(%ebp),%eax
f012e822:	ff 75 f4             	pushl  -0xc(%ebp)
f012e825:	50                   	push   %eax
f012e826:	ff 75 0c             	pushl  0xc(%ebp)
f012e829:	ff 75 08             	pushl  0x8(%ebp)
f012e82c:	e8 89 ff ff ff       	call   f012e7ba <vsnprintf>
f012e831:	83 c4 10             	add    $0x10,%esp
f012e834:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012e837:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012e83a:	c9                   	leave  
f012e83b:	c3                   	ret    

f012e83c <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012e83c:	55                   	push   %ebp
f012e83d:	89 e5                	mov    %esp,%ebp
f012e83f:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012e842:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e846:	74 13                	je     f012e85b <readline+0x1f>
		cprintf("%s", prompt);
f012e848:	83 ec 08             	sub    $0x8,%esp
f012e84b:	ff 75 08             	pushl  0x8(%ebp)
f012e84e:	68 f0 ac 13 f0       	push   $0xf013acf0
f012e853:	e8 d9 25 fd ff       	call   f0100e31 <cprintf>
f012e858:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012e85b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012e862:	83 ec 0c             	sub    $0xc,%esp
f012e865:	6a 00                	push   $0x0
f012e867:	e8 6e 25 fd ff       	call   f0100dda <iscons>
f012e86c:	83 c4 10             	add    $0x10,%esp
f012e86f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012e872:	e8 4a 25 fd ff       	call   f0100dc1 <getchar>
f012e877:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012e87a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012e87e:	79 22                	jns    f012e8a2 <readline+0x66>
			if (c != -E_EOF)
f012e880:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012e884:	0f 84 ad 00 00 00    	je     f012e937 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012e88a:	83 ec 08             	sub    $0x8,%esp
f012e88d:	ff 75 ec             	pushl  -0x14(%ebp)
f012e890:	68 f3 ac 13 f0       	push   $0xf013acf3
f012e895:	e8 97 25 fd ff       	call   f0100e31 <cprintf>
f012e89a:	83 c4 10             	add    $0x10,%esp
			return;
f012e89d:	e9 95 00 00 00       	jmp    f012e937 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012e8a2:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012e8a6:	7e 34                	jle    f012e8dc <readline+0xa0>
f012e8a8:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012e8af:	7f 2b                	jg     f012e8dc <readline+0xa0>
			if (echoing)
f012e8b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e8b5:	74 0e                	je     f012e8c5 <readline+0x89>
				cputchar(c);
f012e8b7:	83 ec 0c             	sub    $0xc,%esp
f012e8ba:	ff 75 ec             	pushl  -0x14(%ebp)
f012e8bd:	e8 e8 24 fd ff       	call   f0100daa <cputchar>
f012e8c2:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012e8c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e8c8:	8d 50 01             	lea    0x1(%eax),%edx
f012e8cb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012e8ce:	89 c2                	mov    %eax,%edx
f012e8d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e8d3:	01 d0                	add    %edx,%eax
f012e8d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e8d8:	88 10                	mov    %dl,(%eax)
f012e8da:	eb 56                	jmp    f012e932 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012e8dc:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012e8e0:	75 1f                	jne    f012e901 <readline+0xc5>
f012e8e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012e8e6:	7e 19                	jle    f012e901 <readline+0xc5>
			if (echoing)
f012e8e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e8ec:	74 0e                	je     f012e8fc <readline+0xc0>
				cputchar(c);
f012e8ee:	83 ec 0c             	sub    $0xc,%esp
f012e8f1:	ff 75 ec             	pushl  -0x14(%ebp)
f012e8f4:	e8 b1 24 fd ff       	call   f0100daa <cputchar>
f012e8f9:	83 c4 10             	add    $0x10,%esp

			i--;
f012e8fc:	ff 4d f4             	decl   -0xc(%ebp)
f012e8ff:	eb 31                	jmp    f012e932 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012e901:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012e905:	74 0a                	je     f012e911 <readline+0xd5>
f012e907:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012e90b:	0f 85 61 ff ff ff    	jne    f012e872 <readline+0x36>
			if (echoing)
f012e911:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e915:	74 0e                	je     f012e925 <readline+0xe9>
				cputchar(c);
f012e917:	83 ec 0c             	sub    $0xc,%esp
f012e91a:	ff 75 ec             	pushl  -0x14(%ebp)
f012e91d:	e8 88 24 fd ff       	call   f0100daa <cputchar>
f012e922:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012e925:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e928:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e92b:	01 d0                	add    %edx,%eax
f012e92d:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012e930:	eb 06                	jmp    f012e938 <readline+0xfc>
		}
	}
f012e932:	e9 3b ff ff ff       	jmp    f012e872 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012e937:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012e938:	c9                   	leave  
f012e939:	c3                   	ret    

f012e93a <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012e93a:	55                   	push   %ebp
f012e93b:	89 e5                	mov    %esp,%ebp
f012e93d:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012e940:	e8 51 de fd ff       	call   f010c796 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012e945:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e949:	74 13                	je     f012e95e <atomic_readline+0x24>
		cprintf("%s", prompt);
f012e94b:	83 ec 08             	sub    $0x8,%esp
f012e94e:	ff 75 08             	pushl  0x8(%ebp)
f012e951:	68 f0 ac 13 f0       	push   $0xf013acf0
f012e956:	e8 d6 24 fd ff       	call   f0100e31 <cprintf>
f012e95b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012e95e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012e965:	83 ec 0c             	sub    $0xc,%esp
f012e968:	6a 00                	push   $0x0
f012e96a:	e8 6b 24 fd ff       	call   f0100dda <iscons>
f012e96f:	83 c4 10             	add    $0x10,%esp
f012e972:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012e975:	e8 47 24 fd ff       	call   f0100dc1 <getchar>
f012e97a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012e97d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012e981:	79 23                	jns    f012e9a6 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012e983:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012e987:	74 13                	je     f012e99c <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012e989:	83 ec 08             	sub    $0x8,%esp
f012e98c:	ff 75 ec             	pushl  -0x14(%ebp)
f012e98f:	68 f3 ac 13 f0       	push   $0xf013acf3
f012e994:	e8 98 24 fd ff       	call   f0100e31 <cprintf>
f012e999:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012e99c:	e8 0f de fd ff       	call   f010c7b0 <sys_enable_interrupt>
			return;
f012e9a1:	e9 9a 00 00 00       	jmp    f012ea40 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012e9a6:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012e9aa:	7e 34                	jle    f012e9e0 <atomic_readline+0xa6>
f012e9ac:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012e9b3:	7f 2b                	jg     f012e9e0 <atomic_readline+0xa6>
			if (echoing)
f012e9b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e9b9:	74 0e                	je     f012e9c9 <atomic_readline+0x8f>
				cputchar(c);
f012e9bb:	83 ec 0c             	sub    $0xc,%esp
f012e9be:	ff 75 ec             	pushl  -0x14(%ebp)
f012e9c1:	e8 e4 23 fd ff       	call   f0100daa <cputchar>
f012e9c6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012e9c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e9cc:	8d 50 01             	lea    0x1(%eax),%edx
f012e9cf:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012e9d2:	89 c2                	mov    %eax,%edx
f012e9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e9d7:	01 d0                	add    %edx,%eax
f012e9d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e9dc:	88 10                	mov    %dl,(%eax)
f012e9de:	eb 5b                	jmp    f012ea3b <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012e9e0:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012e9e4:	75 1f                	jne    f012ea05 <atomic_readline+0xcb>
f012e9e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012e9ea:	7e 19                	jle    f012ea05 <atomic_readline+0xcb>
			if (echoing)
f012e9ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e9f0:	74 0e                	je     f012ea00 <atomic_readline+0xc6>
				cputchar(c);
f012e9f2:	83 ec 0c             	sub    $0xc,%esp
f012e9f5:	ff 75 ec             	pushl  -0x14(%ebp)
f012e9f8:	e8 ad 23 fd ff       	call   f0100daa <cputchar>
f012e9fd:	83 c4 10             	add    $0x10,%esp
			i--;
f012ea00:	ff 4d f4             	decl   -0xc(%ebp)
f012ea03:	eb 36                	jmp    f012ea3b <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012ea05:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ea09:	74 0a                	je     f012ea15 <atomic_readline+0xdb>
f012ea0b:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ea0f:	0f 85 60 ff ff ff    	jne    f012e975 <atomic_readline+0x3b>
			if (echoing)
f012ea15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ea19:	74 0e                	je     f012ea29 <atomic_readline+0xef>
				cputchar(c);
f012ea1b:	83 ec 0c             	sub    $0xc,%esp
f012ea1e:	ff 75 ec             	pushl  -0x14(%ebp)
f012ea21:	e8 84 23 fd ff       	call   f0100daa <cputchar>
f012ea26:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012ea29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ea2f:	01 d0                	add    %edx,%eax
f012ea31:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012ea34:	e8 77 dd fd ff       	call   f010c7b0 <sys_enable_interrupt>
			return;
f012ea39:	eb 05                	jmp    f012ea40 <atomic_readline+0x106>
		}
	}
f012ea3b:	e9 35 ff ff ff       	jmp    f012e975 <atomic_readline+0x3b>
}
f012ea40:	c9                   	leave  
f012ea41:	c3                   	ret    

f012ea42 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012ea42:	55                   	push   %ebp
f012ea43:	89 e5                	mov    %esp,%ebp
f012ea45:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012ea48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ea4f:	eb 06                	jmp    f012ea57 <strlen+0x15>
		n++;
f012ea51:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012ea54:	ff 45 08             	incl   0x8(%ebp)
f012ea57:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea5a:	8a 00                	mov    (%eax),%al
f012ea5c:	84 c0                	test   %al,%al
f012ea5e:	75 f1                	jne    f012ea51 <strlen+0xf>
		n++;
	return n;
f012ea60:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ea63:	c9                   	leave  
f012ea64:	c3                   	ret    

f012ea65 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012ea65:	55                   	push   %ebp
f012ea66:	89 e5                	mov    %esp,%ebp
f012ea68:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ea6b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ea72:	eb 09                	jmp    f012ea7d <strnlen+0x18>
		n++;
f012ea74:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ea77:	ff 45 08             	incl   0x8(%ebp)
f012ea7a:	ff 4d 0c             	decl   0xc(%ebp)
f012ea7d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ea81:	74 09                	je     f012ea8c <strnlen+0x27>
f012ea83:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea86:	8a 00                	mov    (%eax),%al
f012ea88:	84 c0                	test   %al,%al
f012ea8a:	75 e8                	jne    f012ea74 <strnlen+0xf>
		n++;
	return n;
f012ea8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ea8f:	c9                   	leave  
f012ea90:	c3                   	ret    

f012ea91 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012ea91:	55                   	push   %ebp
f012ea92:	89 e5                	mov    %esp,%ebp
f012ea94:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012ea97:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012ea9d:	90                   	nop
f012ea9e:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaa1:	8d 50 01             	lea    0x1(%eax),%edx
f012eaa4:	89 55 08             	mov    %edx,0x8(%ebp)
f012eaa7:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eaaa:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eaad:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eab0:	8a 12                	mov    (%edx),%dl
f012eab2:	88 10                	mov    %dl,(%eax)
f012eab4:	8a 00                	mov    (%eax),%al
f012eab6:	84 c0                	test   %al,%al
f012eab8:	75 e4                	jne    f012ea9e <strcpy+0xd>
		/* do nothing */;
	return ret;
f012eaba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012eabd:	c9                   	leave  
f012eabe:	c3                   	ret    

f012eabf <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012eabf:	55                   	push   %ebp
f012eac0:	89 e5                	mov    %esp,%ebp
f012eac2:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012eac5:	8b 45 08             	mov    0x8(%ebp),%eax
f012eac8:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012eacb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ead2:	eb 1f                	jmp    f012eaf3 <strncpy+0x34>
		*dst++ = *src;
f012ead4:	8b 45 08             	mov    0x8(%ebp),%eax
f012ead7:	8d 50 01             	lea    0x1(%eax),%edx
f012eada:	89 55 08             	mov    %edx,0x8(%ebp)
f012eadd:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eae0:	8a 12                	mov    (%edx),%dl
f012eae2:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012eae4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eae7:	8a 00                	mov    (%eax),%al
f012eae9:	84 c0                	test   %al,%al
f012eaeb:	74 03                	je     f012eaf0 <strncpy+0x31>
			src++;
f012eaed:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012eaf0:	ff 45 fc             	incl   -0x4(%ebp)
f012eaf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eaf6:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eaf9:	72 d9                	jb     f012ead4 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012eafb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eafe:	c9                   	leave  
f012eaff:	c3                   	ret    

f012eb00 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012eb00:	55                   	push   %ebp
f012eb01:	89 e5                	mov    %esp,%ebp
f012eb03:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012eb06:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb09:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012eb0c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eb10:	74 30                	je     f012eb42 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012eb12:	eb 16                	jmp    f012eb2a <strlcpy+0x2a>
			*dst++ = *src++;
f012eb14:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb17:	8d 50 01             	lea    0x1(%eax),%edx
f012eb1a:	89 55 08             	mov    %edx,0x8(%ebp)
f012eb1d:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb20:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eb23:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eb26:	8a 12                	mov    (%edx),%dl
f012eb28:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012eb2a:	ff 4d 10             	decl   0x10(%ebp)
f012eb2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eb31:	74 09                	je     f012eb3c <strlcpy+0x3c>
f012eb33:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb36:	8a 00                	mov    (%eax),%al
f012eb38:	84 c0                	test   %al,%al
f012eb3a:	75 d8                	jne    f012eb14 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012eb3c:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb3f:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012eb42:	8b 55 08             	mov    0x8(%ebp),%edx
f012eb45:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eb48:	29 c2                	sub    %eax,%edx
f012eb4a:	89 d0                	mov    %edx,%eax
}
f012eb4c:	c9                   	leave  
f012eb4d:	c3                   	ret    

f012eb4e <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012eb4e:	55                   	push   %ebp
f012eb4f:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012eb51:	eb 06                	jmp    f012eb59 <strcmp+0xb>
		p++, q++;
f012eb53:	ff 45 08             	incl   0x8(%ebp)
f012eb56:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012eb59:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb5c:	8a 00                	mov    (%eax),%al
f012eb5e:	84 c0                	test   %al,%al
f012eb60:	74 0e                	je     f012eb70 <strcmp+0x22>
f012eb62:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb65:	8a 10                	mov    (%eax),%dl
f012eb67:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb6a:	8a 00                	mov    (%eax),%al
f012eb6c:	38 c2                	cmp    %al,%dl
f012eb6e:	74 e3                	je     f012eb53 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012eb70:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb73:	8a 00                	mov    (%eax),%al
f012eb75:	0f b6 d0             	movzbl %al,%edx
f012eb78:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb7b:	8a 00                	mov    (%eax),%al
f012eb7d:	0f b6 c0             	movzbl %al,%eax
f012eb80:	29 c2                	sub    %eax,%edx
f012eb82:	89 d0                	mov    %edx,%eax
}
f012eb84:	5d                   	pop    %ebp
f012eb85:	c3                   	ret    

f012eb86 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012eb86:	55                   	push   %ebp
f012eb87:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012eb89:	eb 09                	jmp    f012eb94 <strncmp+0xe>
		n--, p++, q++;
f012eb8b:	ff 4d 10             	decl   0x10(%ebp)
f012eb8e:	ff 45 08             	incl   0x8(%ebp)
f012eb91:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012eb94:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eb98:	74 17                	je     f012ebb1 <strncmp+0x2b>
f012eb9a:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb9d:	8a 00                	mov    (%eax),%al
f012eb9f:	84 c0                	test   %al,%al
f012eba1:	74 0e                	je     f012ebb1 <strncmp+0x2b>
f012eba3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eba6:	8a 10                	mov    (%eax),%dl
f012eba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebab:	8a 00                	mov    (%eax),%al
f012ebad:	38 c2                	cmp    %al,%dl
f012ebaf:	74 da                	je     f012eb8b <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012ebb1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ebb5:	75 07                	jne    f012ebbe <strncmp+0x38>
		return 0;
f012ebb7:	b8 00 00 00 00       	mov    $0x0,%eax
f012ebbc:	eb 14                	jmp    f012ebd2 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012ebbe:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebc1:	8a 00                	mov    (%eax),%al
f012ebc3:	0f b6 d0             	movzbl %al,%edx
f012ebc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebc9:	8a 00                	mov    (%eax),%al
f012ebcb:	0f b6 c0             	movzbl %al,%eax
f012ebce:	29 c2                	sub    %eax,%edx
f012ebd0:	89 d0                	mov    %edx,%eax
}
f012ebd2:	5d                   	pop    %ebp
f012ebd3:	c3                   	ret    

f012ebd4 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012ebd4:	55                   	push   %ebp
f012ebd5:	89 e5                	mov    %esp,%ebp
f012ebd7:	83 ec 04             	sub    $0x4,%esp
f012ebda:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebdd:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ebe0:	eb 12                	jmp    f012ebf4 <strchr+0x20>
		if (*s == c)
f012ebe2:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebe5:	8a 00                	mov    (%eax),%al
f012ebe7:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ebea:	75 05                	jne    f012ebf1 <strchr+0x1d>
			return (char *) s;
f012ebec:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebef:	eb 11                	jmp    f012ec02 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012ebf1:	ff 45 08             	incl   0x8(%ebp)
f012ebf4:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebf7:	8a 00                	mov    (%eax),%al
f012ebf9:	84 c0                	test   %al,%al
f012ebfb:	75 e5                	jne    f012ebe2 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012ebfd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ec02:	c9                   	leave  
f012ec03:	c3                   	ret    

f012ec04 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012ec04:	55                   	push   %ebp
f012ec05:	89 e5                	mov    %esp,%ebp
f012ec07:	83 ec 04             	sub    $0x4,%esp
f012ec0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec0d:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ec10:	eb 0d                	jmp    f012ec1f <strfind+0x1b>
		if (*s == c)
f012ec12:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec15:	8a 00                	mov    (%eax),%al
f012ec17:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ec1a:	74 0e                	je     f012ec2a <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012ec1c:	ff 45 08             	incl   0x8(%ebp)
f012ec1f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec22:	8a 00                	mov    (%eax),%al
f012ec24:	84 c0                	test   %al,%al
f012ec26:	75 ea                	jne    f012ec12 <strfind+0xe>
f012ec28:	eb 01                	jmp    f012ec2b <strfind+0x27>
		if (*s == c)
			break;
f012ec2a:	90                   	nop
	return (char *) s;
f012ec2b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ec2e:	c9                   	leave  
f012ec2f:	c3                   	ret    

f012ec30 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012ec30:	55                   	push   %ebp
f012ec31:	89 e5                	mov    %esp,%ebp
f012ec33:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012ec36:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec39:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012ec3c:	8b 45 10             	mov    0x10(%ebp),%eax
f012ec3f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012ec42:	eb 0e                	jmp    f012ec52 <memset+0x22>
		*p++ = c;
f012ec44:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ec47:	8d 50 01             	lea    0x1(%eax),%edx
f012ec4a:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012ec4d:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ec50:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012ec52:	ff 4d f8             	decl   -0x8(%ebp)
f012ec55:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012ec59:	79 e9                	jns    f012ec44 <memset+0x14>
		*p++ = c;

	return v;
f012ec5b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ec5e:	c9                   	leave  
f012ec5f:	c3                   	ret    

f012ec60 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012ec60:	55                   	push   %ebp
f012ec61:	89 e5                	mov    %esp,%ebp
f012ec63:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012ec66:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec69:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012ec6c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec6f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012ec72:	eb 16                	jmp    f012ec8a <memcpy+0x2a>
		*d++ = *s++;
f012ec74:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ec77:	8d 50 01             	lea    0x1(%eax),%edx
f012ec7a:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ec7d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012ec80:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ec83:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012ec86:	8a 12                	mov    (%edx),%dl
f012ec88:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012ec8a:	8b 45 10             	mov    0x10(%ebp),%eax
f012ec8d:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ec90:	89 55 10             	mov    %edx,0x10(%ebp)
f012ec93:	85 c0                	test   %eax,%eax
f012ec95:	75 dd                	jne    f012ec74 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012ec97:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ec9a:	c9                   	leave  
f012ec9b:	c3                   	ret    

f012ec9c <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012ec9c:	55                   	push   %ebp
f012ec9d:	89 e5                	mov    %esp,%ebp
f012ec9f:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012eca2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eca5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012eca8:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecab:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012ecae:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ecb1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012ecb4:	73 50                	jae    f012ed06 <memmove+0x6a>
f012ecb6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012ecb9:	8b 45 10             	mov    0x10(%ebp),%eax
f012ecbc:	01 d0                	add    %edx,%eax
f012ecbe:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012ecc1:	76 43                	jbe    f012ed06 <memmove+0x6a>
		s += n;
f012ecc3:	8b 45 10             	mov    0x10(%ebp),%eax
f012ecc6:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012ecc9:	8b 45 10             	mov    0x10(%ebp),%eax
f012eccc:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012eccf:	eb 10                	jmp    f012ece1 <memmove+0x45>
			*--d = *--s;
f012ecd1:	ff 4d f8             	decl   -0x8(%ebp)
f012ecd4:	ff 4d fc             	decl   -0x4(%ebp)
f012ecd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ecda:	8a 10                	mov    (%eax),%dl
f012ecdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ecdf:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012ece1:	8b 45 10             	mov    0x10(%ebp),%eax
f012ece4:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ece7:	89 55 10             	mov    %edx,0x10(%ebp)
f012ecea:	85 c0                	test   %eax,%eax
f012ecec:	75 e3                	jne    f012ecd1 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012ecee:	eb 23                	jmp    f012ed13 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012ecf0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ecf3:	8d 50 01             	lea    0x1(%eax),%edx
f012ecf6:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ecf9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012ecfc:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ecff:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012ed02:	8a 12                	mov    (%edx),%dl
f012ed04:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012ed06:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed09:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ed0c:	89 55 10             	mov    %edx,0x10(%ebp)
f012ed0f:	85 c0                	test   %eax,%eax
f012ed11:	75 dd                	jne    f012ecf0 <memmove+0x54>
			*d++ = *s++;

	return dst;
f012ed13:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ed16:	c9                   	leave  
f012ed17:	c3                   	ret    

f012ed18 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012ed18:	55                   	push   %ebp
f012ed19:	89 e5                	mov    %esp,%ebp
f012ed1b:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012ed1e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed21:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012ed24:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed27:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012ed2a:	eb 2a                	jmp    f012ed56 <memcmp+0x3e>
		if (*s1 != *s2)
f012ed2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ed2f:	8a 10                	mov    (%eax),%dl
f012ed31:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed34:	8a 00                	mov    (%eax),%al
f012ed36:	38 c2                	cmp    %al,%dl
f012ed38:	74 16                	je     f012ed50 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012ed3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ed3d:	8a 00                	mov    (%eax),%al
f012ed3f:	0f b6 d0             	movzbl %al,%edx
f012ed42:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed45:	8a 00                	mov    (%eax),%al
f012ed47:	0f b6 c0             	movzbl %al,%eax
f012ed4a:	29 c2                	sub    %eax,%edx
f012ed4c:	89 d0                	mov    %edx,%eax
f012ed4e:	eb 18                	jmp    f012ed68 <memcmp+0x50>
		s1++, s2++;
f012ed50:	ff 45 fc             	incl   -0x4(%ebp)
f012ed53:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012ed56:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed59:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ed5c:	89 55 10             	mov    %edx,0x10(%ebp)
f012ed5f:	85 c0                	test   %eax,%eax
f012ed61:	75 c9                	jne    f012ed2c <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012ed63:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ed68:	c9                   	leave  
f012ed69:	c3                   	ret    

f012ed6a <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012ed6a:	55                   	push   %ebp
f012ed6b:	89 e5                	mov    %esp,%ebp
f012ed6d:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012ed70:	8b 55 08             	mov    0x8(%ebp),%edx
f012ed73:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed76:	01 d0                	add    %edx,%eax
f012ed78:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012ed7b:	eb 15                	jmp    f012ed92 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012ed7d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed80:	8a 00                	mov    (%eax),%al
f012ed82:	0f b6 d0             	movzbl %al,%edx
f012ed85:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed88:	0f b6 c0             	movzbl %al,%eax
f012ed8b:	39 c2                	cmp    %eax,%edx
f012ed8d:	74 0d                	je     f012ed9c <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012ed8f:	ff 45 08             	incl   0x8(%ebp)
f012ed92:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed95:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012ed98:	72 e3                	jb     f012ed7d <memfind+0x13>
f012ed9a:	eb 01                	jmp    f012ed9d <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012ed9c:	90                   	nop
	return (void *) s;
f012ed9d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012eda0:	c9                   	leave  
f012eda1:	c3                   	ret    

f012eda2 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012eda2:	55                   	push   %ebp
f012eda3:	89 e5                	mov    %esp,%ebp
f012eda5:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012eda8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012edaf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012edb6:	eb 03                	jmp    f012edbb <strtol+0x19>
		s++;
f012edb8:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012edbb:	8b 45 08             	mov    0x8(%ebp),%eax
f012edbe:	8a 00                	mov    (%eax),%al
f012edc0:	3c 20                	cmp    $0x20,%al
f012edc2:	74 f4                	je     f012edb8 <strtol+0x16>
f012edc4:	8b 45 08             	mov    0x8(%ebp),%eax
f012edc7:	8a 00                	mov    (%eax),%al
f012edc9:	3c 09                	cmp    $0x9,%al
f012edcb:	74 eb                	je     f012edb8 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012edcd:	8b 45 08             	mov    0x8(%ebp),%eax
f012edd0:	8a 00                	mov    (%eax),%al
f012edd2:	3c 2b                	cmp    $0x2b,%al
f012edd4:	75 05                	jne    f012eddb <strtol+0x39>
		s++;
f012edd6:	ff 45 08             	incl   0x8(%ebp)
f012edd9:	eb 13                	jmp    f012edee <strtol+0x4c>
	else if (*s == '-')
f012eddb:	8b 45 08             	mov    0x8(%ebp),%eax
f012edde:	8a 00                	mov    (%eax),%al
f012ede0:	3c 2d                	cmp    $0x2d,%al
f012ede2:	75 0a                	jne    f012edee <strtol+0x4c>
		s++, neg = 1;
f012ede4:	ff 45 08             	incl   0x8(%ebp)
f012ede7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012edee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012edf2:	74 06                	je     f012edfa <strtol+0x58>
f012edf4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012edf8:	75 20                	jne    f012ee1a <strtol+0x78>
f012edfa:	8b 45 08             	mov    0x8(%ebp),%eax
f012edfd:	8a 00                	mov    (%eax),%al
f012edff:	3c 30                	cmp    $0x30,%al
f012ee01:	75 17                	jne    f012ee1a <strtol+0x78>
f012ee03:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee06:	40                   	inc    %eax
f012ee07:	8a 00                	mov    (%eax),%al
f012ee09:	3c 78                	cmp    $0x78,%al
f012ee0b:	75 0d                	jne    f012ee1a <strtol+0x78>
		s += 2, base = 16;
f012ee0d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012ee11:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012ee18:	eb 28                	jmp    f012ee42 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012ee1a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee1e:	75 15                	jne    f012ee35 <strtol+0x93>
f012ee20:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee23:	8a 00                	mov    (%eax),%al
f012ee25:	3c 30                	cmp    $0x30,%al
f012ee27:	75 0c                	jne    f012ee35 <strtol+0x93>
		s++, base = 8;
f012ee29:	ff 45 08             	incl   0x8(%ebp)
f012ee2c:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012ee33:	eb 0d                	jmp    f012ee42 <strtol+0xa0>
	else if (base == 0)
f012ee35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee39:	75 07                	jne    f012ee42 <strtol+0xa0>
		base = 10;
f012ee3b:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012ee42:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee45:	8a 00                	mov    (%eax),%al
f012ee47:	3c 2f                	cmp    $0x2f,%al
f012ee49:	7e 19                	jle    f012ee64 <strtol+0xc2>
f012ee4b:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee4e:	8a 00                	mov    (%eax),%al
f012ee50:	3c 39                	cmp    $0x39,%al
f012ee52:	7f 10                	jg     f012ee64 <strtol+0xc2>
			dig = *s - '0';
f012ee54:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee57:	8a 00                	mov    (%eax),%al
f012ee59:	0f be c0             	movsbl %al,%eax
f012ee5c:	83 e8 30             	sub    $0x30,%eax
f012ee5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012ee62:	eb 42                	jmp    f012eea6 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012ee64:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee67:	8a 00                	mov    (%eax),%al
f012ee69:	3c 60                	cmp    $0x60,%al
f012ee6b:	7e 19                	jle    f012ee86 <strtol+0xe4>
f012ee6d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee70:	8a 00                	mov    (%eax),%al
f012ee72:	3c 7a                	cmp    $0x7a,%al
f012ee74:	7f 10                	jg     f012ee86 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012ee76:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee79:	8a 00                	mov    (%eax),%al
f012ee7b:	0f be c0             	movsbl %al,%eax
f012ee7e:	83 e8 57             	sub    $0x57,%eax
f012ee81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012ee84:	eb 20                	jmp    f012eea6 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012ee86:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee89:	8a 00                	mov    (%eax),%al
f012ee8b:	3c 40                	cmp    $0x40,%al
f012ee8d:	7e 39                	jle    f012eec8 <strtol+0x126>
f012ee8f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee92:	8a 00                	mov    (%eax),%al
f012ee94:	3c 5a                	cmp    $0x5a,%al
f012ee96:	7f 30                	jg     f012eec8 <strtol+0x126>
			dig = *s - 'A' + 10;
f012ee98:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee9b:	8a 00                	mov    (%eax),%al
f012ee9d:	0f be c0             	movsbl %al,%eax
f012eea0:	83 e8 37             	sub    $0x37,%eax
f012eea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012eea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eea9:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eeac:	7d 19                	jge    f012eec7 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012eeae:	ff 45 08             	incl   0x8(%ebp)
f012eeb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012eeb4:	0f af 45 10          	imul   0x10(%ebp),%eax
f012eeb8:	89 c2                	mov    %eax,%edx
f012eeba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eebd:	01 d0                	add    %edx,%eax
f012eebf:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012eec2:	e9 7b ff ff ff       	jmp    f012ee42 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012eec7:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012eec8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012eecc:	74 08                	je     f012eed6 <strtol+0x134>
		*endptr = (char *) s;
f012eece:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eed1:	8b 55 08             	mov    0x8(%ebp),%edx
f012eed4:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012eed6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012eeda:	74 07                	je     f012eee3 <strtol+0x141>
f012eedc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012eedf:	f7 d8                	neg    %eax
f012eee1:	eb 03                	jmp    f012eee6 <strtol+0x144>
f012eee3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eee6:	c9                   	leave  
f012eee7:	c3                   	ret    

f012eee8 <ltostr>:

void
ltostr(long value, char *str)
{
f012eee8:	55                   	push   %ebp
f012eee9:	89 e5                	mov    %esp,%ebp
f012eeeb:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012eeee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012eef5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012eefc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ef00:	79 13                	jns    f012ef15 <ltostr+0x2d>
	{
		neg = 1;
f012ef02:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012ef09:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef0c:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012ef0f:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012ef12:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012ef15:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef18:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012ef1d:	99                   	cltd   
f012ef1e:	f7 f9                	idiv   %ecx
f012ef20:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012ef23:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ef26:	8d 50 01             	lea    0x1(%eax),%edx
f012ef29:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ef2c:	89 c2                	mov    %eax,%edx
f012ef2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef31:	01 d0                	add    %edx,%eax
f012ef33:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ef36:	83 c2 30             	add    $0x30,%edx
f012ef39:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012ef3b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012ef3e:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012ef43:	f7 e9                	imul   %ecx
f012ef45:	c1 fa 02             	sar    $0x2,%edx
f012ef48:	89 c8                	mov    %ecx,%eax
f012ef4a:	c1 f8 1f             	sar    $0x1f,%eax
f012ef4d:	29 c2                	sub    %eax,%edx
f012ef4f:	89 d0                	mov    %edx,%eax
f012ef51:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012ef54:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012ef57:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012ef5c:	f7 e9                	imul   %ecx
f012ef5e:	c1 fa 02             	sar    $0x2,%edx
f012ef61:	89 c8                	mov    %ecx,%eax
f012ef63:	c1 f8 1f             	sar    $0x1f,%eax
f012ef66:	29 c2                	sub    %eax,%edx
f012ef68:	89 d0                	mov    %edx,%eax
f012ef6a:	c1 e0 02             	shl    $0x2,%eax
f012ef6d:	01 d0                	add    %edx,%eax
f012ef6f:	01 c0                	add    %eax,%eax
f012ef71:	29 c1                	sub    %eax,%ecx
f012ef73:	89 ca                	mov    %ecx,%edx
f012ef75:	85 d2                	test   %edx,%edx
f012ef77:	75 9c                	jne    f012ef15 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012ef79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012ef80:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ef83:	48                   	dec    %eax
f012ef84:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012ef87:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012ef8b:	74 3d                	je     f012efca <ltostr+0xe2>
		start = 1 ;
f012ef8d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012ef94:	eb 34                	jmp    f012efca <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012ef96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ef99:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef9c:	01 d0                	add    %edx,%eax
f012ef9e:	8a 00                	mov    (%eax),%al
f012efa0:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012efa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efa6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efa9:	01 c2                	add    %eax,%edx
f012efab:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012efae:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efb1:	01 c8                	add    %ecx,%eax
f012efb3:	8a 00                	mov    (%eax),%al
f012efb5:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012efb7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012efba:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efbd:	01 c2                	add    %eax,%edx
f012efbf:	8a 45 eb             	mov    -0x15(%ebp),%al
f012efc2:	88 02                	mov    %al,(%edx)
		start++ ;
f012efc4:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012efc7:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012efca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012efcd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012efd0:	7c c4                	jl     f012ef96 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012efd2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012efd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efd8:	01 d0                	add    %edx,%eax
f012efda:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012efdd:	90                   	nop
f012efde:	c9                   	leave  
f012efdf:	c3                   	ret    

f012efe0 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012efe0:	55                   	push   %ebp
f012efe1:	89 e5                	mov    %esp,%ebp
f012efe3:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012efe6:	ff 75 08             	pushl  0x8(%ebp)
f012efe9:	e8 54 fa ff ff       	call   f012ea42 <strlen>
f012efee:	83 c4 04             	add    $0x4,%esp
f012eff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012eff4:	ff 75 0c             	pushl  0xc(%ebp)
f012eff7:	e8 46 fa ff ff       	call   f012ea42 <strlen>
f012effc:	83 c4 04             	add    $0x4,%esp
f012efff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f002:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f009:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f010:	eb 17                	jmp    f012f029 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f012:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f015:	8b 45 10             	mov    0x10(%ebp),%eax
f012f018:	01 c2                	add    %eax,%edx
f012f01a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f01d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f020:	01 c8                	add    %ecx,%eax
f012f022:	8a 00                	mov    (%eax),%al
f012f024:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f026:	ff 45 fc             	incl   -0x4(%ebp)
f012f029:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f02c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f02f:	7c e1                	jl     f012f012 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f031:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f038:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f03f:	eb 1f                	jmp    f012f060 <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f041:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f044:	8d 50 01             	lea    0x1(%eax),%edx
f012f047:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f04a:	89 c2                	mov    %eax,%edx
f012f04c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f04f:	01 c2                	add    %eax,%edx
f012f051:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f054:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f057:	01 c8                	add    %ecx,%eax
f012f059:	8a 00                	mov    (%eax),%al
f012f05b:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f05d:	ff 45 f8             	incl   -0x8(%ebp)
f012f060:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f063:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f066:	7c d9                	jl     f012f041 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f068:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f06b:	8b 45 10             	mov    0x10(%ebp),%eax
f012f06e:	01 d0                	add    %edx,%eax
f012f070:	c6 00 00             	movb   $0x0,(%eax)
}
f012f073:	90                   	nop
f012f074:	c9                   	leave  
f012f075:	c3                   	ret    

f012f076 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f076:	55                   	push   %ebp
f012f077:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f079:	8b 45 14             	mov    0x14(%ebp),%eax
f012f07c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f082:	8b 45 14             	mov    0x14(%ebp),%eax
f012f085:	8b 00                	mov    (%eax),%eax
f012f087:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f08e:	8b 45 10             	mov    0x10(%ebp),%eax
f012f091:	01 d0                	add    %edx,%eax
f012f093:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f099:	eb 0c                	jmp    f012f0a7 <strsplit+0x31>
			*string++ = 0;
f012f09b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f09e:	8d 50 01             	lea    0x1(%eax),%edx
f012f0a1:	89 55 08             	mov    %edx,0x8(%ebp)
f012f0a4:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f0a7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0aa:	8a 00                	mov    (%eax),%al
f012f0ac:	84 c0                	test   %al,%al
f012f0ae:	74 18                	je     f012f0c8 <strsplit+0x52>
f012f0b0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0b3:	8a 00                	mov    (%eax),%al
f012f0b5:	0f be c0             	movsbl %al,%eax
f012f0b8:	50                   	push   %eax
f012f0b9:	ff 75 0c             	pushl  0xc(%ebp)
f012f0bc:	e8 13 fb ff ff       	call   f012ebd4 <strchr>
f012f0c1:	83 c4 08             	add    $0x8,%esp
f012f0c4:	85 c0                	test   %eax,%eax
f012f0c6:	75 d3                	jne    f012f09b <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f0c8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0cb:	8a 00                	mov    (%eax),%al
f012f0cd:	84 c0                	test   %al,%al
f012f0cf:	74 5a                	je     f012f12b <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f0d1:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0d4:	8b 00                	mov    (%eax),%eax
f012f0d6:	83 f8 0f             	cmp    $0xf,%eax
f012f0d9:	75 07                	jne    f012f0e2 <strsplit+0x6c>
		{
			return 0;
f012f0db:	b8 00 00 00 00       	mov    $0x0,%eax
f012f0e0:	eb 66                	jmp    f012f148 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f0e2:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0e5:	8b 00                	mov    (%eax),%eax
f012f0e7:	8d 48 01             	lea    0x1(%eax),%ecx
f012f0ea:	8b 55 14             	mov    0x14(%ebp),%edx
f012f0ed:	89 0a                	mov    %ecx,(%edx)
f012f0ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f0f6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0f9:	01 c2                	add    %eax,%edx
f012f0fb:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0fe:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f100:	eb 03                	jmp    f012f105 <strsplit+0x8f>
			string++;
f012f102:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f105:	8b 45 08             	mov    0x8(%ebp),%eax
f012f108:	8a 00                	mov    (%eax),%al
f012f10a:	84 c0                	test   %al,%al
f012f10c:	74 8b                	je     f012f099 <strsplit+0x23>
f012f10e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f111:	8a 00                	mov    (%eax),%al
f012f113:	0f be c0             	movsbl %al,%eax
f012f116:	50                   	push   %eax
f012f117:	ff 75 0c             	pushl  0xc(%ebp)
f012f11a:	e8 b5 fa ff ff       	call   f012ebd4 <strchr>
f012f11f:	83 c4 08             	add    $0x8,%esp
f012f122:	85 c0                	test   %eax,%eax
f012f124:	74 dc                	je     f012f102 <strsplit+0x8c>
			string++;
	}
f012f126:	e9 6e ff ff ff       	jmp    f012f099 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f12b:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f12c:	8b 45 14             	mov    0x14(%ebp),%eax
f012f12f:	8b 00                	mov    (%eax),%eax
f012f131:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f138:	8b 45 10             	mov    0x10(%ebp),%eax
f012f13b:	01 d0                	add    %edx,%eax
f012f13d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f143:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f148:	c9                   	leave  
f012f149:	c3                   	ret    

f012f14a <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f14a:	55                   	push   %ebp
f012f14b:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL){
f012f14d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f151:	75 3a                	jne    f012f18d <str2lower+0x43>
	return NULL;
f012f153:	b8 00 00 00 00       	mov    $0x0,%eax
f012f158:	eb 3f                	jmp    f012f199 <str2lower+0x4f>
	}
	while(*src!='\0'){
		if(*src>=65&&*src<=90){
f012f15a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f15d:	8a 00                	mov    (%eax),%al
f012f15f:	3c 40                	cmp    $0x40,%al
f012f161:	7e 1a                	jle    f012f17d <str2lower+0x33>
f012f163:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f166:	8a 00                	mov    (%eax),%al
f012f168:	3c 5a                	cmp    $0x5a,%al
f012f16a:	7f 11                	jg     f012f17d <str2lower+0x33>
			*dst=*src+32;
f012f16c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f16f:	8a 00                	mov    (%eax),%al
f012f171:	83 c0 20             	add    $0x20,%eax
f012f174:	88 c2                	mov    %al,%dl
f012f176:	8b 45 08             	mov    0x8(%ebp),%eax
f012f179:	88 10                	mov    %dl,(%eax)
f012f17b:	eb 0a                	jmp    f012f187 <str2lower+0x3d>
		}
		else{
			*dst=*src;
f012f17d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f180:	8a 10                	mov    (%eax),%dl
f012f182:	8b 45 08             	mov    0x8(%ebp),%eax
f012f185:	88 10                	mov    %dl,(%eax)
		}
		src++;
f012f187:	ff 45 0c             	incl   0xc(%ebp)
		dst++;
f012f18a:	ff 45 08             	incl   0x8(%ebp)
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL){
	return NULL;
	}
	while(*src!='\0'){
f012f18d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f190:	8a 00                	mov    (%eax),%al
f012f192:	84 c0                	test   %al,%al
f012f194:	75 c4                	jne    f012f15a <str2lower+0x10>
			*dst=*src;
		}
		src++;
		dst++;
	}
	return dst;
f012f196:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f199:	5d                   	pop    %ebp
f012f19a:	c3                   	ret    

f012f19b <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f19b:	55                   	push   %ebp
f012f19c:	89 e5                	mov    %esp,%ebp
f012f19e:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f1a1:	90                   	nop
f012f1a2:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f1a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f1ac:	89 c2                	mov    %eax,%edx
f012f1ae:	ec                   	in     (%dx),%al
f012f1af:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f1b2:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f1b5:	0f b6 c0             	movzbl %al,%eax
f012f1b8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f1bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1be:	25 c0 00 00 00       	and    $0xc0,%eax
f012f1c3:	83 f8 40             	cmp    $0x40,%eax
f012f1c6:	75 da                	jne    f012f1a2 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f1c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f1cc:	74 11                	je     f012f1df <ide_wait_ready+0x44>
f012f1ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1d1:	83 e0 21             	and    $0x21,%eax
f012f1d4:	85 c0                	test   %eax,%eax
f012f1d6:	74 07                	je     f012f1df <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f1d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f1dd:	eb 05                	jmp    f012f1e4 <ide_wait_ready+0x49>
	}
	return 0;
f012f1df:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f1e4:	c9                   	leave  
f012f1e5:	c3                   	ret    

f012f1e6 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f1e6:	55                   	push   %ebp
f012f1e7:	89 e5                	mov    %esp,%ebp
f012f1e9:	57                   	push   %edi
f012f1ea:	53                   	push   %ebx
f012f1eb:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f1ee:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f1f5:	76 16                	jbe    f012f20d <ide_read+0x27>
f012f1f7:	68 03 ad 13 f0       	push   $0xf013ad03
f012f1fc:	68 10 ad 13 f0       	push   $0xf013ad10
f012f201:	6a 25                	push   $0x25
f012f203:	68 25 ad 13 f0       	push   $0xf013ad25
f012f208:	e8 a3 0f fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f20d:	83 ec 0c             	sub    $0xc,%esp
f012f210:	6a 00                	push   $0x0
f012f212:	e8 84 ff ff ff       	call   f012f19b <ide_wait_ready>
f012f217:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f21a:	8b 45 10             	mov    0x10(%ebp),%eax
f012f21d:	0f b6 c0             	movzbl %al,%eax
f012f220:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f227:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f22a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f22d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f230:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f231:	8b 45 08             	mov    0x8(%ebp),%eax
f012f234:	0f b6 c0             	movzbl %al,%eax
f012f237:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f23e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f241:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f244:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f247:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f248:	8b 45 08             	mov    0x8(%ebp),%eax
f012f24b:	c1 e8 08             	shr    $0x8,%eax
f012f24e:	0f b6 c0             	movzbl %al,%eax
f012f251:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f258:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f25b:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f25e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f261:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f262:	8b 45 08             	mov    0x8(%ebp),%eax
f012f265:	c1 e8 10             	shr    $0x10,%eax
f012f268:	0f b6 c0             	movzbl %al,%eax
f012f26b:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f272:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f275:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f278:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f27b:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f27c:	a1 ec 3a 25 f0       	mov    0xf0253aec,%eax
f012f281:	83 e0 01             	and    $0x1,%eax
f012f284:	c1 e0 04             	shl    $0x4,%eax
f012f287:	88 c2                	mov    %al,%dl
f012f289:	8b 45 08             	mov    0x8(%ebp),%eax
f012f28c:	c1 e8 18             	shr    $0x18,%eax
f012f28f:	83 e0 0f             	and    $0xf,%eax
f012f292:	09 d0                	or     %edx,%eax
f012f294:	83 c8 e0             	or     $0xffffffe0,%eax
f012f297:	0f b6 c0             	movzbl %al,%eax
f012f29a:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f2a1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f2a4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f2a7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f2aa:	ee                   	out    %al,(%dx)
f012f2ab:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f2b2:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f2b6:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f2b9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f2bc:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f2bd:	eb 55                	jmp    f012f314 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f2bf:	83 ec 0c             	sub    $0xc,%esp
f012f2c2:	6a 01                	push   $0x1
f012f2c4:	e8 d2 fe ff ff       	call   f012f19b <ide_wait_ready>
f012f2c9:	83 c4 10             	add    $0x10,%esp
f012f2cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f2cf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f2d3:	79 05                	jns    f012f2da <ide_read+0xf4>
			return r;
f012f2d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f2d8:	eb 45                	jmp    f012f31f <ide_read+0x139>
f012f2da:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f2e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f2e7:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f2ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f2f1:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f2f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f2f7:	89 cb                	mov    %ecx,%ebx
f012f2f9:	89 df                	mov    %ebx,%edi
f012f2fb:	89 c1                	mov    %eax,%ecx
f012f2fd:	fc                   	cld    
f012f2fe:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f300:	89 c8                	mov    %ecx,%eax
f012f302:	89 fb                	mov    %edi,%ebx
f012f304:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f307:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f30a:	ff 4d 10             	decl   0x10(%ebp)
f012f30d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f314:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f318:	75 a5                	jne    f012f2bf <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f31a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f31f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f322:	5b                   	pop    %ebx
f012f323:	5f                   	pop    %edi
f012f324:	5d                   	pop    %ebp
f012f325:	c3                   	ret    

f012f326 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f326:	55                   	push   %ebp
f012f327:	89 e5                	mov    %esp,%ebp
f012f329:	56                   	push   %esi
f012f32a:	53                   	push   %ebx
f012f32b:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f32e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f335:	76 16                	jbe    f012f34d <ide_write+0x27>
f012f337:	68 03 ad 13 f0       	push   $0xf013ad03
f012f33c:	68 10 ad 13 f0       	push   $0xf013ad10
f012f341:	6a 3f                	push   $0x3f
f012f343:	68 25 ad 13 f0       	push   $0xf013ad25
f012f348:	e8 63 0e fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f34d:	83 ec 0c             	sub    $0xc,%esp
f012f350:	6a 00                	push   $0x0
f012f352:	e8 44 fe ff ff       	call   f012f19b <ide_wait_ready>
f012f357:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f35a:	8b 45 10             	mov    0x10(%ebp),%eax
f012f35d:	0f b6 c0             	movzbl %al,%eax
f012f360:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f367:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f36a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f36d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f370:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f371:	8b 45 08             	mov    0x8(%ebp),%eax
f012f374:	0f b6 c0             	movzbl %al,%eax
f012f377:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f37e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f381:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f384:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f387:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f388:	8b 45 08             	mov    0x8(%ebp),%eax
f012f38b:	c1 e8 08             	shr    $0x8,%eax
f012f38e:	0f b6 c0             	movzbl %al,%eax
f012f391:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f398:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f39b:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f39e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f3a1:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f3a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3a5:	c1 e8 10             	shr    $0x10,%eax
f012f3a8:	0f b6 c0             	movzbl %al,%eax
f012f3ab:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f3b2:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f3b5:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f3b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f3bb:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f3bc:	a1 ec 3a 25 f0       	mov    0xf0253aec,%eax
f012f3c1:	83 e0 01             	and    $0x1,%eax
f012f3c4:	c1 e0 04             	shl    $0x4,%eax
f012f3c7:	88 c2                	mov    %al,%dl
f012f3c9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3cc:	c1 e8 18             	shr    $0x18,%eax
f012f3cf:	83 e0 0f             	and    $0xf,%eax
f012f3d2:	09 d0                	or     %edx,%eax
f012f3d4:	83 c8 e0             	or     $0xffffffe0,%eax
f012f3d7:	0f b6 c0             	movzbl %al,%eax
f012f3da:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f3e1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f3e4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f3e7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f3ea:	ee                   	out    %al,(%dx)
f012f3eb:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f3f2:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f3f6:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f3f9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f3fc:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f3fd:	eb 55                	jmp    f012f454 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f3ff:	83 ec 0c             	sub    $0xc,%esp
f012f402:	6a 01                	push   $0x1
f012f404:	e8 92 fd ff ff       	call   f012f19b <ide_wait_ready>
f012f409:	83 c4 10             	add    $0x10,%esp
f012f40c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f40f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f413:	79 05                	jns    f012f41a <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f415:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f418:	eb 45                	jmp    f012f45f <ide_write+0x139>
f012f41a:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f421:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f424:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f427:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f42e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f431:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f434:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f437:	89 cb                	mov    %ecx,%ebx
f012f439:	89 de                	mov    %ebx,%esi
f012f43b:	89 c1                	mov    %eax,%ecx
f012f43d:	fc                   	cld    
f012f43e:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f440:	89 c8                	mov    %ecx,%eax
f012f442:	89 f3                	mov    %esi,%ebx
f012f444:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f447:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f44a:	ff 4d 10             	decl   0x10(%ebp)
f012f44d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f454:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f458:	75 a5                	jne    f012f3ff <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f45a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f45f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f462:	5b                   	pop    %ebx
f012f463:	5e                   	pop    %esi
f012f464:	5d                   	pop    %ebp
f012f465:	c3                   	ret    

f012f466 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f012f466:	55                   	push   %ebp
f012f467:	89 e5                	mov    %esp,%ebp
f012f469:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f46c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f46f:	83 e8 10             	sub    $0x10,%eax
f012f472:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f012f475:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f478:	8b 00                	mov    (%eax),%eax
}
f012f47a:	c9                   	leave  
f012f47b:	c3                   	ret    

f012f47c <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f012f47c:	55                   	push   %ebp
f012f47d:	89 e5                	mov    %esp,%ebp
f012f47f:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f482:	8b 45 08             	mov    0x8(%ebp),%eax
f012f485:	83 e8 10             	sub    $0x10,%eax
f012f488:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f012f48b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f48e:	8a 40 04             	mov    0x4(%eax),%al
}
f012f491:	c9                   	leave  
f012f492:	c3                   	ret    

f012f493 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012f493:	55                   	push   %ebp
f012f494:	89 e5                	mov    %esp,%ebp
f012f496:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f499:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012f4a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f4a3:	83 f8 02             	cmp    $0x2,%eax
f012f4a6:	74 2b                	je     f012f4d3 <alloc_block+0x40>
f012f4a8:	83 f8 02             	cmp    $0x2,%eax
f012f4ab:	7f 07                	jg     f012f4b4 <alloc_block+0x21>
f012f4ad:	83 f8 01             	cmp    $0x1,%eax
f012f4b0:	74 0e                	je     f012f4c0 <alloc_block+0x2d>
f012f4b2:	eb 58                	jmp    f012f50c <alloc_block+0x79>
f012f4b4:	83 f8 03             	cmp    $0x3,%eax
f012f4b7:	74 2d                	je     f012f4e6 <alloc_block+0x53>
f012f4b9:	83 f8 04             	cmp    $0x4,%eax
f012f4bc:	74 3b                	je     f012f4f9 <alloc_block+0x66>
f012f4be:	eb 4c                	jmp    f012f50c <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012f4c0:	83 ec 0c             	sub    $0xc,%esp
f012f4c3:	ff 75 08             	pushl  0x8(%ebp)
f012f4c6:	e8 04 01 00 00       	call   f012f5cf <alloc_block_FF>
f012f4cb:	83 c4 10             	add    $0x10,%esp
f012f4ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f4d1:	eb 4a                	jmp    f012f51d <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f4d3:	83 ec 0c             	sub    $0xc,%esp
f012f4d6:	ff 75 08             	pushl  0x8(%ebp)
f012f4d9:	e8 3f 01 00 00       	call   f012f61d <alloc_block_NF>
f012f4de:	83 c4 10             	add    $0x10,%esp
f012f4e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f4e4:	eb 37                	jmp    f012f51d <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f4e6:	83 ec 0c             	sub    $0xc,%esp
f012f4e9:	ff 75 08             	pushl  0x8(%ebp)
f012f4ec:	e8 f8 00 00 00       	call   f012f5e9 <alloc_block_BF>
f012f4f1:	83 c4 10             	add    $0x10,%esp
f012f4f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f4f7:	eb 24                	jmp    f012f51d <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f4f9:	83 ec 0c             	sub    $0xc,%esp
f012f4fc:	ff 75 08             	pushl  0x8(%ebp)
f012f4ff:	e8 ff 00 00 00       	call   f012f603 <alloc_block_WF>
f012f504:	83 c4 10             	add    $0x10,%esp
f012f507:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f50a:	eb 11                	jmp    f012f51d <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f50c:	83 ec 0c             	sub    $0xc,%esp
f012f50f:	68 30 ad 13 f0       	push   $0xf013ad30
f012f514:	e8 18 19 fd ff       	call   f0100e31 <cprintf>
f012f519:	83 c4 10             	add    $0x10,%esp
		break;
f012f51c:	90                   	nop
	}
	return va;
f012f51d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f520:	c9                   	leave  
f012f521:	c3                   	ret    

f012f522 <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012f522:	55                   	push   %ebp
f012f523:	89 e5                	mov    %esp,%ebp
f012f525:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f528:	83 ec 0c             	sub    $0xc,%esp
f012f52b:	68 50 ad 13 f0       	push   $0xf013ad50
f012f530:	e8 fc 18 fd ff       	call   f0100e31 <cprintf>
f012f535:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f012f538:	83 ec 0c             	sub    $0xc,%esp
f012f53b:	68 7b ad 13 f0       	push   $0xf013ad7b
f012f540:	e8 ec 18 fd ff       	call   f0100e31 <cprintf>
f012f545:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f548:	8b 45 08             	mov    0x8(%ebp),%eax
f012f54b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f54e:	eb 26                	jmp    f012f576 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012f550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f553:	8a 40 04             	mov    0x4(%eax),%al
f012f556:	0f b6 d0             	movzbl %al,%edx
f012f559:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f55c:	8b 00                	mov    (%eax),%eax
f012f55e:	83 ec 04             	sub    $0x4,%esp
f012f561:	52                   	push   %edx
f012f562:	50                   	push   %eax
f012f563:	68 93 ad 13 f0       	push   $0xf013ad93
f012f568:	e8 c4 18 fd ff       	call   f0100e31 <cprintf>
f012f56d:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f570:	8b 45 10             	mov    0x10(%ebp),%eax
f012f573:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f576:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f57a:	74 08                	je     f012f584 <print_blocks_list+0x62>
f012f57c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f57f:	8b 40 08             	mov    0x8(%eax),%eax
f012f582:	eb 05                	jmp    f012f589 <print_blocks_list+0x67>
f012f584:	b8 00 00 00 00       	mov    $0x0,%eax
f012f589:	89 45 10             	mov    %eax,0x10(%ebp)
f012f58c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f58f:	85 c0                	test   %eax,%eax
f012f591:	75 bd                	jne    f012f550 <print_blocks_list+0x2e>
f012f593:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f597:	75 b7                	jne    f012f550 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f012f599:	83 ec 0c             	sub    $0xc,%esp
f012f59c:	68 50 ad 13 f0       	push   $0xf013ad50
f012f5a1:	e8 8b 18 fd ff       	call   f0100e31 <cprintf>
f012f5a6:	83 c4 10             	add    $0x10,%esp

}
f012f5a9:	90                   	nop
f012f5aa:	c9                   	leave  
f012f5ab:	c3                   	ret    

f012f5ac <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f012f5ac:	55                   	push   %ebp
f012f5ad:	89 e5                	mov    %esp,%ebp
f012f5af:	83 ec 08             	sub    $0x8,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f5b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f5b6:	74 14                	je     f012f5cc <initialize_dynamic_allocator+0x20>
		return ;
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	panic("initialize_dynamic_allocator is not implemented yet");
f012f5b8:	83 ec 04             	sub    $0x4,%esp
f012f5bb:	68 ac ad 13 f0       	push   $0xf013adac
f012f5c0:	6a 62                	push   $0x62
f012f5c2:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f5c7:	e8 e4 0b fd ff       	call   f01001b0 <_panic>
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return ;
f012f5cc:	90                   	nop
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	panic("initialize_dynamic_allocator is not implemented yet");
}
f012f5cd:	c9                   	leave  
f012f5ce:	c3                   	ret    

f012f5cf <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012f5cf:	55                   	push   %ebp
f012f5d0:	89 e5                	mov    %esp,%ebp
f012f5d2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	panic("alloc_block_FF is not implemented yet");
f012f5d5:	83 ec 04             	sub    $0x4,%esp
f012f5d8:	68 f8 ad 13 f0       	push   $0xf013adf8
f012f5dd:	6a 6b                	push   $0x6b
f012f5df:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f5e4:	e8 c7 0b fd ff       	call   f01001b0 <_panic>

f012f5e9 <alloc_block_BF>:
}
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f012f5e9:	55                   	push   %ebp
f012f5ea:	89 e5                	mov    %esp,%ebp
f012f5ec:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	panic("alloc_block_BF is not implemented yet");
f012f5ef:	83 ec 04             	sub    $0x4,%esp
f012f5f2:	68 20 ae 13 f0       	push   $0xf013ae20
f012f5f7:	6a 74                	push   $0x74
f012f5f9:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f5fe:	e8 ad 0b fd ff       	call   f01001b0 <_panic>

f012f603 <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f012f603:	55                   	push   %ebp
f012f604:	89 e5                	mov    %esp,%ebp
f012f606:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012f609:	83 ec 04             	sub    $0x4,%esp
f012f60c:	68 48 ae 13 f0       	push   $0xf013ae48
f012f611:	6a 7d                	push   $0x7d
f012f613:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f618:	e8 93 0b fd ff       	call   f01001b0 <_panic>

f012f61d <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f012f61d:	55                   	push   %ebp
f012f61e:	89 e5                	mov    %esp,%ebp
f012f620:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012f623:	83 ec 04             	sub    $0x4,%esp
f012f626:	68 70 ae 13 f0       	push   $0xf013ae70
f012f62b:	68 86 00 00 00       	push   $0x86
f012f630:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f635:	e8 76 0b fd ff       	call   f01001b0 <_panic>

f012f63a <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012f63a:	55                   	push   %ebp
f012f63b:	89 e5                	mov    %esp,%ebp
f012f63d:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//panic("free_block is not implemented yet");
	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
f012f640:	8b 45 08             	mov    0x8(%ebp),%eax
f012f643:	83 e8 10             	sub    $0x10,%eax
f012f646:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if(va==NULL){
f012f649:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f64d:	74 27                	je     f012f676 <free_block+0x3c>
		//cpritf("Enter a valid address");
		return;
	}
	else if(is_free_block(va)){
f012f64f:	ff 75 08             	pushl  0x8(%ebp)
f012f652:	e8 25 fe ff ff       	call   f012f47c <is_free_block>
f012f657:	83 c4 04             	add    $0x4,%esp
f012f65a:	84 c0                	test   %al,%al
f012f65c:	75 1b                	jne    f012f679 <free_block+0x3f>
		//cpritf("block is already free");
		return;
	}
	else if (!is_free_block(va)){
f012f65e:	ff 75 08             	pushl  0x8(%ebp)
f012f661:	e8 16 fe ff ff       	call   f012f47c <is_free_block>
f012f666:	83 c4 04             	add    $0x4,%esp
f012f669:	84 c0                	test   %al,%al
f012f66b:	75 0d                	jne    f012f67a <free_block+0x40>
		currBlock->is_free=1;
f012f66d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f670:	c6 40 04 01          	movb   $0x1,0x4(%eax)
f012f674:	eb 04                	jmp    f012f67a <free_block+0x40>
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//panic("free_block is not implemented yet");
	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
	if(va==NULL){
		//cpritf("Enter a valid address");
		return;
f012f676:	90                   	nop
f012f677:	eb 01                	jmp    f012f67a <free_block+0x40>
	}
	else if(is_free_block(va)){
		//cpritf("block is already free");
		return;
f012f679:	90                   	nop
	}

	//struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;


}
f012f67a:	c9                   	leave  
f012f67b:	c3                   	ret    

f012f67c <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012f67c:	55                   	push   %ebp
f012f67d:	89 e5                	mov    %esp,%ebp
f012f67f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	panic("realloc_block_FF is not implemented yet");
f012f682:	83 ec 04             	sub    $0x4,%esp
f012f685:	68 98 ae 13 f0       	push   $0xf013ae98
f012f68a:	68 a9 00 00 00       	push   $0xa9
f012f68f:	68 e0 ad 13 f0       	push   $0xf013ade0
f012f694:	e8 17 0b fd ff       	call   f01001b0 <_panic>
f012f699:	66 90                	xchg   %ax,%ax
f012f69b:	90                   	nop

f012f69c <__udivdi3>:
f012f69c:	55                   	push   %ebp
f012f69d:	57                   	push   %edi
f012f69e:	56                   	push   %esi
f012f69f:	53                   	push   %ebx
f012f6a0:	83 ec 1c             	sub    $0x1c,%esp
f012f6a3:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012f6a7:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012f6ab:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012f6af:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012f6b3:	89 ca                	mov    %ecx,%edx
f012f6b5:	89 f8                	mov    %edi,%eax
f012f6b7:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012f6bb:	85 f6                	test   %esi,%esi
f012f6bd:	75 2d                	jne    f012f6ec <__udivdi3+0x50>
f012f6bf:	39 cf                	cmp    %ecx,%edi
f012f6c1:	77 65                	ja     f012f728 <__udivdi3+0x8c>
f012f6c3:	89 fd                	mov    %edi,%ebp
f012f6c5:	85 ff                	test   %edi,%edi
f012f6c7:	75 0b                	jne    f012f6d4 <__udivdi3+0x38>
f012f6c9:	b8 01 00 00 00       	mov    $0x1,%eax
f012f6ce:	31 d2                	xor    %edx,%edx
f012f6d0:	f7 f7                	div    %edi
f012f6d2:	89 c5                	mov    %eax,%ebp
f012f6d4:	31 d2                	xor    %edx,%edx
f012f6d6:	89 c8                	mov    %ecx,%eax
f012f6d8:	f7 f5                	div    %ebp
f012f6da:	89 c1                	mov    %eax,%ecx
f012f6dc:	89 d8                	mov    %ebx,%eax
f012f6de:	f7 f5                	div    %ebp
f012f6e0:	89 cf                	mov    %ecx,%edi
f012f6e2:	89 fa                	mov    %edi,%edx
f012f6e4:	83 c4 1c             	add    $0x1c,%esp
f012f6e7:	5b                   	pop    %ebx
f012f6e8:	5e                   	pop    %esi
f012f6e9:	5f                   	pop    %edi
f012f6ea:	5d                   	pop    %ebp
f012f6eb:	c3                   	ret    
f012f6ec:	39 ce                	cmp    %ecx,%esi
f012f6ee:	77 28                	ja     f012f718 <__udivdi3+0x7c>
f012f6f0:	0f bd fe             	bsr    %esi,%edi
f012f6f3:	83 f7 1f             	xor    $0x1f,%edi
f012f6f6:	75 40                	jne    f012f738 <__udivdi3+0x9c>
f012f6f8:	39 ce                	cmp    %ecx,%esi
f012f6fa:	72 0a                	jb     f012f706 <__udivdi3+0x6a>
f012f6fc:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012f700:	0f 87 9e 00 00 00    	ja     f012f7a4 <__udivdi3+0x108>
f012f706:	b8 01 00 00 00       	mov    $0x1,%eax
f012f70b:	89 fa                	mov    %edi,%edx
f012f70d:	83 c4 1c             	add    $0x1c,%esp
f012f710:	5b                   	pop    %ebx
f012f711:	5e                   	pop    %esi
f012f712:	5f                   	pop    %edi
f012f713:	5d                   	pop    %ebp
f012f714:	c3                   	ret    
f012f715:	8d 76 00             	lea    0x0(%esi),%esi
f012f718:	31 ff                	xor    %edi,%edi
f012f71a:	31 c0                	xor    %eax,%eax
f012f71c:	89 fa                	mov    %edi,%edx
f012f71e:	83 c4 1c             	add    $0x1c,%esp
f012f721:	5b                   	pop    %ebx
f012f722:	5e                   	pop    %esi
f012f723:	5f                   	pop    %edi
f012f724:	5d                   	pop    %ebp
f012f725:	c3                   	ret    
f012f726:	66 90                	xchg   %ax,%ax
f012f728:	89 d8                	mov    %ebx,%eax
f012f72a:	f7 f7                	div    %edi
f012f72c:	31 ff                	xor    %edi,%edi
f012f72e:	89 fa                	mov    %edi,%edx
f012f730:	83 c4 1c             	add    $0x1c,%esp
f012f733:	5b                   	pop    %ebx
f012f734:	5e                   	pop    %esi
f012f735:	5f                   	pop    %edi
f012f736:	5d                   	pop    %ebp
f012f737:	c3                   	ret    
f012f738:	bd 20 00 00 00       	mov    $0x20,%ebp
f012f73d:	89 eb                	mov    %ebp,%ebx
f012f73f:	29 fb                	sub    %edi,%ebx
f012f741:	89 f9                	mov    %edi,%ecx
f012f743:	d3 e6                	shl    %cl,%esi
f012f745:	89 c5                	mov    %eax,%ebp
f012f747:	88 d9                	mov    %bl,%cl
f012f749:	d3 ed                	shr    %cl,%ebp
f012f74b:	89 e9                	mov    %ebp,%ecx
f012f74d:	09 f1                	or     %esi,%ecx
f012f74f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012f753:	89 f9                	mov    %edi,%ecx
f012f755:	d3 e0                	shl    %cl,%eax
f012f757:	89 c5                	mov    %eax,%ebp
f012f759:	89 d6                	mov    %edx,%esi
f012f75b:	88 d9                	mov    %bl,%cl
f012f75d:	d3 ee                	shr    %cl,%esi
f012f75f:	89 f9                	mov    %edi,%ecx
f012f761:	d3 e2                	shl    %cl,%edx
f012f763:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f767:	88 d9                	mov    %bl,%cl
f012f769:	d3 e8                	shr    %cl,%eax
f012f76b:	09 c2                	or     %eax,%edx
f012f76d:	89 d0                	mov    %edx,%eax
f012f76f:	89 f2                	mov    %esi,%edx
f012f771:	f7 74 24 0c          	divl   0xc(%esp)
f012f775:	89 d6                	mov    %edx,%esi
f012f777:	89 c3                	mov    %eax,%ebx
f012f779:	f7 e5                	mul    %ebp
f012f77b:	39 d6                	cmp    %edx,%esi
f012f77d:	72 19                	jb     f012f798 <__udivdi3+0xfc>
f012f77f:	74 0b                	je     f012f78c <__udivdi3+0xf0>
f012f781:	89 d8                	mov    %ebx,%eax
f012f783:	31 ff                	xor    %edi,%edi
f012f785:	e9 58 ff ff ff       	jmp    f012f6e2 <__udivdi3+0x46>
f012f78a:	66 90                	xchg   %ax,%ax
f012f78c:	8b 54 24 08          	mov    0x8(%esp),%edx
f012f790:	89 f9                	mov    %edi,%ecx
f012f792:	d3 e2                	shl    %cl,%edx
f012f794:	39 c2                	cmp    %eax,%edx
f012f796:	73 e9                	jae    f012f781 <__udivdi3+0xe5>
f012f798:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012f79b:	31 ff                	xor    %edi,%edi
f012f79d:	e9 40 ff ff ff       	jmp    f012f6e2 <__udivdi3+0x46>
f012f7a2:	66 90                	xchg   %ax,%ax
f012f7a4:	31 c0                	xor    %eax,%eax
f012f7a6:	e9 37 ff ff ff       	jmp    f012f6e2 <__udivdi3+0x46>
f012f7ab:	90                   	nop

f012f7ac <__umoddi3>:
f012f7ac:	55                   	push   %ebp
f012f7ad:	57                   	push   %edi
f012f7ae:	56                   	push   %esi
f012f7af:	53                   	push   %ebx
f012f7b0:	83 ec 1c             	sub    $0x1c,%esp
f012f7b3:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012f7b7:	8b 74 24 34          	mov    0x34(%esp),%esi
f012f7bb:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012f7bf:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012f7c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012f7c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012f7cb:	89 f3                	mov    %esi,%ebx
f012f7cd:	89 fa                	mov    %edi,%edx
f012f7cf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012f7d3:	89 34 24             	mov    %esi,(%esp)
f012f7d6:	85 c0                	test   %eax,%eax
f012f7d8:	75 1a                	jne    f012f7f4 <__umoddi3+0x48>
f012f7da:	39 f7                	cmp    %esi,%edi
f012f7dc:	0f 86 a2 00 00 00    	jbe    f012f884 <__umoddi3+0xd8>
f012f7e2:	89 c8                	mov    %ecx,%eax
f012f7e4:	89 f2                	mov    %esi,%edx
f012f7e6:	f7 f7                	div    %edi
f012f7e8:	89 d0                	mov    %edx,%eax
f012f7ea:	31 d2                	xor    %edx,%edx
f012f7ec:	83 c4 1c             	add    $0x1c,%esp
f012f7ef:	5b                   	pop    %ebx
f012f7f0:	5e                   	pop    %esi
f012f7f1:	5f                   	pop    %edi
f012f7f2:	5d                   	pop    %ebp
f012f7f3:	c3                   	ret    
f012f7f4:	39 f0                	cmp    %esi,%eax
f012f7f6:	0f 87 ac 00 00 00    	ja     f012f8a8 <__umoddi3+0xfc>
f012f7fc:	0f bd e8             	bsr    %eax,%ebp
f012f7ff:	83 f5 1f             	xor    $0x1f,%ebp
f012f802:	0f 84 ac 00 00 00    	je     f012f8b4 <__umoddi3+0x108>
f012f808:	bf 20 00 00 00       	mov    $0x20,%edi
f012f80d:	29 ef                	sub    %ebp,%edi
f012f80f:	89 fe                	mov    %edi,%esi
f012f811:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012f815:	89 e9                	mov    %ebp,%ecx
f012f817:	d3 e0                	shl    %cl,%eax
f012f819:	89 d7                	mov    %edx,%edi
f012f81b:	89 f1                	mov    %esi,%ecx
f012f81d:	d3 ef                	shr    %cl,%edi
f012f81f:	09 c7                	or     %eax,%edi
f012f821:	89 e9                	mov    %ebp,%ecx
f012f823:	d3 e2                	shl    %cl,%edx
f012f825:	89 14 24             	mov    %edx,(%esp)
f012f828:	89 d8                	mov    %ebx,%eax
f012f82a:	d3 e0                	shl    %cl,%eax
f012f82c:	89 c2                	mov    %eax,%edx
f012f82e:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f832:	d3 e0                	shl    %cl,%eax
f012f834:	89 44 24 04          	mov    %eax,0x4(%esp)
f012f838:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f83c:	89 f1                	mov    %esi,%ecx
f012f83e:	d3 e8                	shr    %cl,%eax
f012f840:	09 d0                	or     %edx,%eax
f012f842:	d3 eb                	shr    %cl,%ebx
f012f844:	89 da                	mov    %ebx,%edx
f012f846:	f7 f7                	div    %edi
f012f848:	89 d3                	mov    %edx,%ebx
f012f84a:	f7 24 24             	mull   (%esp)
f012f84d:	89 c6                	mov    %eax,%esi
f012f84f:	89 d1                	mov    %edx,%ecx
f012f851:	39 d3                	cmp    %edx,%ebx
f012f853:	0f 82 87 00 00 00    	jb     f012f8e0 <__umoddi3+0x134>
f012f859:	0f 84 91 00 00 00    	je     f012f8f0 <__umoddi3+0x144>
f012f85f:	8b 54 24 04          	mov    0x4(%esp),%edx
f012f863:	29 f2                	sub    %esi,%edx
f012f865:	19 cb                	sbb    %ecx,%ebx
f012f867:	89 d8                	mov    %ebx,%eax
f012f869:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012f86d:	d3 e0                	shl    %cl,%eax
f012f86f:	89 e9                	mov    %ebp,%ecx
f012f871:	d3 ea                	shr    %cl,%edx
f012f873:	09 d0                	or     %edx,%eax
f012f875:	89 e9                	mov    %ebp,%ecx
f012f877:	d3 eb                	shr    %cl,%ebx
f012f879:	89 da                	mov    %ebx,%edx
f012f87b:	83 c4 1c             	add    $0x1c,%esp
f012f87e:	5b                   	pop    %ebx
f012f87f:	5e                   	pop    %esi
f012f880:	5f                   	pop    %edi
f012f881:	5d                   	pop    %ebp
f012f882:	c3                   	ret    
f012f883:	90                   	nop
f012f884:	89 fd                	mov    %edi,%ebp
f012f886:	85 ff                	test   %edi,%edi
f012f888:	75 0b                	jne    f012f895 <__umoddi3+0xe9>
f012f88a:	b8 01 00 00 00       	mov    $0x1,%eax
f012f88f:	31 d2                	xor    %edx,%edx
f012f891:	f7 f7                	div    %edi
f012f893:	89 c5                	mov    %eax,%ebp
f012f895:	89 f0                	mov    %esi,%eax
f012f897:	31 d2                	xor    %edx,%edx
f012f899:	f7 f5                	div    %ebp
f012f89b:	89 c8                	mov    %ecx,%eax
f012f89d:	f7 f5                	div    %ebp
f012f89f:	89 d0                	mov    %edx,%eax
f012f8a1:	e9 44 ff ff ff       	jmp    f012f7ea <__umoddi3+0x3e>
f012f8a6:	66 90                	xchg   %ax,%ax
f012f8a8:	89 c8                	mov    %ecx,%eax
f012f8aa:	89 f2                	mov    %esi,%edx
f012f8ac:	83 c4 1c             	add    $0x1c,%esp
f012f8af:	5b                   	pop    %ebx
f012f8b0:	5e                   	pop    %esi
f012f8b1:	5f                   	pop    %edi
f012f8b2:	5d                   	pop    %ebp
f012f8b3:	c3                   	ret    
f012f8b4:	3b 04 24             	cmp    (%esp),%eax
f012f8b7:	72 06                	jb     f012f8bf <__umoddi3+0x113>
f012f8b9:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012f8bd:	77 0f                	ja     f012f8ce <__umoddi3+0x122>
f012f8bf:	89 f2                	mov    %esi,%edx
f012f8c1:	29 f9                	sub    %edi,%ecx
f012f8c3:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012f8c7:	89 14 24             	mov    %edx,(%esp)
f012f8ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012f8ce:	8b 44 24 04          	mov    0x4(%esp),%eax
f012f8d2:	8b 14 24             	mov    (%esp),%edx
f012f8d5:	83 c4 1c             	add    $0x1c,%esp
f012f8d8:	5b                   	pop    %ebx
f012f8d9:	5e                   	pop    %esi
f012f8da:	5f                   	pop    %edi
f012f8db:	5d                   	pop    %ebp
f012f8dc:	c3                   	ret    
f012f8dd:	8d 76 00             	lea    0x0(%esi),%esi
f012f8e0:	2b 04 24             	sub    (%esp),%eax
f012f8e3:	19 fa                	sbb    %edi,%edx
f012f8e5:	89 d1                	mov    %edx,%ecx
f012f8e7:	89 c6                	mov    %eax,%esi
f012f8e9:	e9 71 ff ff ff       	jmp    f012f85f <__umoddi3+0xb3>
f012f8ee:	66 90                	xchg   %ax,%ax
f012f8f0:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012f8f4:	72 ea                	jb     f012f8e0 <__umoddi3+0x134>
f012f8f6:	89 d9                	mov    %ebx,%ecx
f012f8f8:	e9 62 ff ff ff       	jmp    f012f85f <__umoddi3+0xb3>
