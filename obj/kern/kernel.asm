
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 18 00 	lgdtl  0x18c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 18 f0       	mov    $0xf018bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ac be 2b f0 01 	movl   $0x1,0xf02bbeac
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 2c e6 2d f0       	mov    $0xf02de62c,%edx
f010006a:	b8 d2 2f 25 f0       	mov    $0xf0252fd2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 d2 2f 25 f0       	push   $0xf0252fd2
f010007e:	e8 f9 eb 02 00       	call   f012ec7c <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 d4 be 2b f0 ff 	movl   $0xffffffff,0xf02bbed4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 0a 67 00 00       	call   f01067a9 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 e3 62 00 00       	call   f0106387 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 5e 6a 00 00       	call   f0106b07 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 4b 96 00 00       	call   f01096f9 <env_init>
	idt_init();
f01000ae:	e8 84 ab 00 00       	call   f010ac37 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 d0 d2 00 00       	call   f010d388 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 0d 76 00 00       	call   f01076d9 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 99 d4 00 00       	call   f010d572 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 9f d3 00 00       	call   f010d485 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 7a d3 00 00       	call   f010d46d <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 9a d3 00 00       	call   f010d49d <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 f6 60 00 00       	call   f0106201 <pic_init>
	sched_init() ;
f010010b:	e8 f3 5c 00 00       	call   f0105e03 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 00 f9 12 f0       	push   $0xf012f900
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 2c f9 12 f0       	push   $0xf012f92c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 51 f9 12 f0       	push   $0xf012f951
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 58 f9 12 f0       	push   $0xf012f958
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 a0 f9 12 f0       	push   $0xf012f9a0
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 e8 f9 12 f0       	push   $0xf012f9e8
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 a0 f9 12 f0       	push   $0xf012f9a0
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 58 f9 12 f0       	push   $0xf012f958
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 2d fa 12 f0       	push   $0xf012fa2d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 32 fa 12 f0       	push   $0xf012fa32
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 4b fa 12 f0       	push   $0xf012fa4b
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 c9 93 00 00       	call   f01095e3 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 4d fa 12 f0       	push   $0xf012fa4d
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 0e 5c 00 00       	call   f0105e4d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 32 fa 12 f0       	push   $0xf012fa32
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 4b fa 12 f0       	push   $0xf012fa4b
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 00 59 00 00       	call   f0105bc4 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 27 4d 00 00       	call   f0105005 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 67 5b 00 00       	call   f0105e4d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 e0 2f 25 f0       	mov    %eax,0xf0252fe0

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 32 fa 12 f0       	push   $0xf012fa32
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 4b fa 12 f0       	push   $0xf012fa4b
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 ff 4a 00 00       	call   f0104e7f <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 62 fa 12 f0       	push   $0xf012fa62
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 4b fa 12 f0       	push   $0xf012fa4b
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 04 30 25 f0       	mov    %eax,0xf0253004
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 08 30 25 f0 b4 	movl   $0x3b4,0xf0253008
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 08 30 25 f0 d4 	movl   $0x3d4,0xf0253008
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 0c 30 25 f0       	mov    %eax,0xf025300c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f0100732:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		text_length = 0;
f010075e:	c7 05 00 30 25 f0 00 	movl   $0x0,0xf0253000
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 10 30 25 f0 	mov    0xf0253010,%cx
f010076f:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 0c 30 25 f0    	mov    0xf025300c,%ecx
f010082a:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 10 30 25 f0 	mov    %dx,0xf0253010
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 00 30 25 f0    	mov    0xf0253000,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 00 30 25 f0       	mov    %eax,0xf0253000
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 09 e4 02 00       	call   f012ecac <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 10 30 25 f0    	mov    %ax,0xf0253010
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 08 30 25 f0    	mov    0xf0253008,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 08 30 25 f0       	mov    0xf0253008,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 08 30 25 f0    	mov    0xf0253008,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 28 32 25 f0       	mov    %eax,0xf0253228
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 28 32 25 f0       	mov    %eax,0xf0253228
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 28 32 25 f0       	mov    %eax,0xf0253228
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 28 32 25 f0       	mov    %eax,0xf0253228
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 c1 18 f0    	mov    -0xfe73ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 28 32 25 f0       	mov    %eax,0xf0253228

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 c5 18 f0 	mov    -0xfe73ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 00 30 25 f0    	mov    0xf0253000,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 00 30 25 f0       	mov    %eax,0xf0253000
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 10 30 25 f0    	mov    0xf0253010,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 0c 30 25 f0    	mov    0xf025300c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 0c 30 25 f0       	mov    0xf025300c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 00 30 25 f0       	mov    0xf0253000,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 28 32 25 f0       	mov    0xf0253228,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 7d fa 12 f0       	push   $0xf012fa7d
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 20 32 25 f0    	mov    0xf0253220,%edx
f0100c22:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 20 32 25 f0    	mov    %edx,0xf0253220
f0100c39:	8a 80 20 30 25 f0    	mov    -0xfdacfe0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 20 32 25 f0 00 	movl   $0x0,0xf0253220
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 24 32 25 f0    	mov    %edx,0xf0253224
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 20 30 25 f0    	mov    %dl,-0xfdacfe0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 24 32 25 f0 00 	movl   $0x0,0xf0253224
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 20 32 25 f0    	mov    0xf0253220,%edx
f0100d12:	a1 24 32 25 f0       	mov    0xf0253224,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 20 32 25 f0    	mov    %edx,0xf0253220
f0100d29:	8a 80 20 30 25 f0    	mov    -0xfdacfe0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 20 32 25 f0       	mov    0xf0253220,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 20 32 25 f0 00 	movl   $0x0,0xf0253220
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 04 30 25 f0       	mov    0xf0253004,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 89 fa 12 f0       	push   $0xf012fa89
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 b7 d5 02 00       	call   f012e3e0 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 fa db 02 00       	call   f012ea8e <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 40 9f 2d f0       	push   $0xf02d9f40
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 fd dd 02 00       	call   f012ecac <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 38 db 02 00       	call   f012ea8e <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 40 9f 2d f0       	push   $0xf02d9f40
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 3b dd 02 00       	call   f012ecac <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 78 dc 02 00       	call   f012ec7c <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 a8 fa 12 f0       	push   $0xf012faa8
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 ab fa 12 f0       	push   $0xf012faab
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 40 bf 2b f0       	push   $0xf02bbf40
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 1d d9 02 00       	call   f012ea8e <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 32 d9 02 00       	call   f012eadd <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 d5 d8 02 00       	call   f012ea8e <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 bb fa 12 f0       	push   $0xf012fabb
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 cf de 02 00       	call   f012f0c2 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 c0 fa 12 f0       	push   $0xf012fac0
f010121a:	50                   	push   %eax
f010121b:	e8 7a d9 02 00       	call   f012eb9a <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 c4 fa 12 f0       	push   $0xf012fac4
f0101235:	50                   	push   %eax
f0101236:	e8 5f d9 02 00       	call   f012eb9a <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 c9 fa 12 f0       	push   $0xf012fac9
f0101250:	50                   	push   %eax
f0101251:	e8 44 d9 02 00       	call   f012eb9a <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 c9 fa 12 f0       	push   $0xf012fac9
f0101271:	50                   	push   %eax
f0101272:	e8 23 d9 02 00       	call   f012eb9a <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 cb d7 02 00       	call   f012ea8e <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 cd d7 02 00       	call   f012eadd <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 ac d7 02 00       	call   f012eadd <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 29 d7 02 00       	call   f012ea8e <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 44 d8 02 00       	call   f012ebd2 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 79 d6 02 00       	call   f012ea8e <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 44 d8 02 00       	call   f012ec7c <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 af d6 02 00       	call   f012eb0b <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 ef d5 02 00       	call   f012ea8e <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 07 d7 02 00       	call   f012ebd2 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 52 d5 02 00       	call   f012ea8e <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 f2 d4 02 00       	call   f012ea8e <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 bd d6 02 00       	call   f012ec7c <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 28 d5 02 00       	call   f012eb0b <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 6a d4 02 00       	call   f012ea8e <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 85 d5 02 00       	call   f012ebd2 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 d0 d3 02 00       	call   f012ea8e <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 76 d3 02 00       	call   f012ea8e <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 41 d5 02 00       	call   f012ec7c <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 40 bf 2b f0    	add    $0xf02bbf40,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 ac d3 02 00       	call   f012eb0b <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 40 bf 2b f0       	push   $0xf02bbf40
f01017c5:	e8 c4 d2 02 00       	call   f012ea8e <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 6b d2 02 00       	call   f012ea8e <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 58 d2 02 00       	call   f012ea8e <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 40 bf 2b f0    	lea    -0xfd440c0(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 40 bf 2b f0       	add    $0xf02bbf40,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 fd d1 02 00       	call   f012ea8e <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 40 4f 2d f0    	lea    -0xfd2b0c0(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 f2 d1 02 00       	call   f012ecac <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 40 9b 2d f0       	push   $0xf02d9b40
f0101ad6:	e8 d1 d1 02 00       	call   f012ecac <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 a1 d0 02 00       	call   f012eb9a <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 c5 18 f0       	mov    %eax,0xf018c530
f0101b0b:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 40 4f 2d f0       	add    $0xf02d4f40,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 83 d1 02 00       	call   f012ecac <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 00 bf 2b f0 00 	movl   $0x0,0xf02bbf00
f0101b60:	00 00 00 
f0101b63:	c7 05 04 bf 2b f0 00 	movl   $0x0,0xf02bbf04
f0101b6a:	00 00 00 
f0101b6d:	c7 05 0c bf 2b f0 00 	movl   $0x0,0xf02bbf0c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 ef d0 02 00       	call   f012ec7c <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 cd fa 12 f0       	push   $0xf012facd
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 bb fa 12 f0       	push   $0xf012fabb
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 e4 d4 02 00       	call   f012f0c2 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 96 02 00 00       	call   f0101e98 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 d3 fa 12 f0       	push   $0xf012fad3
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 ec fa 12 f0       	push   $0xf012faec
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 58 fb 12 f0       	push   $0xf012fb58
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 88 fb 12 f0       	push   $0xf012fb88
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 b2 fb 12 f0       	push   $0xf012fbb2
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 08 bf 2b f0       	mov    %eax,0xf02bbf08
f0101d03:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 bc fb 12 f0       	push   $0xf012fbbc
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 1f fc 12 f0       	push   $0xf012fc1f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 28 fc 12 f0       	push   $0xf012fc28
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 08 bf 2b f0       	mov    %eax,0xf02bbf08
f0101e53:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 c5 18 f0       	add    $0xf018c548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <process_command>:


int process_command(int number_of_arguments, char** arguments)
{
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	panic("process_command is not implemented yet");
f0101e9e:	83 ec 04             	sub    $0x4,%esp
f0101ea1:	68 30 fc 12 f0       	push   $0xf012fc30
f0101ea6:	68 7e 01 00 00       	push   $0x17e
f0101eab:	68 3d fb 12 f0       	push   $0xf012fb3d
f0101eb0:	e8 fb e2 ff ff       	call   f01001b0 <_panic>

f0101eb5 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0101eb5:	55                   	push   %ebp
f0101eb6:	89 e5                	mov    %esp,%ebp
f0101eb8:	c7 05 d8 be 2b f0 00 	movl   $0x0,0xf02bbed8
f0101ebf:	00 00 00 
f0101ec2:	90                   	nop
f0101ec3:	5d                   	pop    %ebp
f0101ec4:	c3                   	ret    

f0101ec5 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0101ec5:	55                   	push   %ebp
f0101ec6:	89 e5                	mov    %esp,%ebp
f0101ec8:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f0101ecf:	00 00 00 
f0101ed2:	90                   	nop
f0101ed3:	5d                   	pop    %ebp
f0101ed4:	c3                   	ret    

f0101ed5 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0101ed5:	55                   	push   %ebp
f0101ed6:	89 e5                	mov    %esp,%ebp
f0101ed8:	c7 05 d8 be 2b f0 02 	movl   $0x2,0xf02bbed8
f0101edf:	00 00 00 
f0101ee2:	90                   	nop
f0101ee3:	5d                   	pop    %ebp
f0101ee4:	c3                   	ret    

f0101ee5 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0101ee5:	55                   	push   %ebp
f0101ee6:	89 e5                	mov    %esp,%ebp
f0101ee8:	c7 05 d8 be 2b f0 03 	movl   $0x3,0xf02bbed8
f0101eef:	00 00 00 
f0101ef2:	90                   	nop
f0101ef3:	5d                   	pop    %ebp
f0101ef4:	c3                   	ret    

f0101ef5 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0101ef5:	55                   	push   %ebp
f0101ef6:	89 e5                	mov    %esp,%ebp
f0101ef8:	c7 05 d8 be 2b f0 04 	movl   $0x4,0xf02bbed8
f0101eff:	00 00 00 
f0101f02:	90                   	nop
f0101f03:	5d                   	pop    %ebp
f0101f04:	c3                   	ret    

f0101f05 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0101f05:	55                   	push   %ebp
f0101f06:	89 e5                	mov    %esp,%ebp
f0101f08:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f0d:	85 c0                	test   %eax,%eax
f0101f0f:	75 04                	jne    f0101f15 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0101f11:	b0 01                	mov    $0x1,%al
f0101f13:	eb 02                	jmp    f0101f17 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0101f15:	b0 00                	mov    $0x0,%al
f0101f17:	5d                   	pop    %ebp
f0101f18:	c3                   	ret    

f0101f19 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0101f19:	55                   	push   %ebp
f0101f1a:	89 e5                	mov    %esp,%ebp
f0101f1c:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f21:	83 f8 01             	cmp    $0x1,%eax
f0101f24:	75 04                	jne    f0101f2a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0101f26:	b0 01                	mov    $0x1,%al
f0101f28:	eb 02                	jmp    f0101f2c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0101f2a:	b0 00                	mov    $0x0,%al
f0101f2c:	5d                   	pop    %ebp
f0101f2d:	c3                   	ret    

f0101f2e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0101f2e:	55                   	push   %ebp
f0101f2f:	89 e5                	mov    %esp,%ebp
f0101f31:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f36:	83 f8 02             	cmp    $0x2,%eax
f0101f39:	75 04                	jne    f0101f3f <isKHeapPlacementStrategyBESTFIT+0x11>
f0101f3b:	b0 01                	mov    $0x1,%al
f0101f3d:	eb 02                	jmp    f0101f41 <isKHeapPlacementStrategyBESTFIT+0x13>
f0101f3f:	b0 00                	mov    $0x0,%al
f0101f41:	5d                   	pop    %ebp
f0101f42:	c3                   	ret    

f0101f43 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0101f43:	55                   	push   %ebp
f0101f44:	89 e5                	mov    %esp,%ebp
f0101f46:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f4b:	83 f8 03             	cmp    $0x3,%eax
f0101f4e:	75 04                	jne    f0101f54 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0101f50:	b0 01                	mov    $0x1,%al
f0101f52:	eb 02                	jmp    f0101f56 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0101f54:	b0 00                	mov    $0x0,%al
f0101f56:	5d                   	pop    %ebp
f0101f57:	c3                   	ret    

f0101f58 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0101f58:	55                   	push   %ebp
f0101f59:	89 e5                	mov    %esp,%ebp
f0101f5b:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0101f60:	83 f8 04             	cmp    $0x4,%eax
f0101f63:	75 04                	jne    f0101f69 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0101f65:	b0 01                	mov    $0x1,%al
f0101f67:	eb 02                	jmp    f0101f6b <isKHeapPlacementStrategyWORSTFIT+0x13>
f0101f69:	b0 00                	mov    $0x0,%al
f0101f6b:	5d                   	pop    %ebp
f0101f6c:	c3                   	ret    

f0101f6d <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0101f6d:	55                   	push   %ebp
f0101f6e:	89 e5                	mov    %esp,%ebp
f0101f70:	c7 05 ac be 2b f0 01 	movl   $0x1,0xf02bbeac
f0101f77:	00 00 00 
f0101f7a:	90                   	nop
f0101f7b:	5d                   	pop    %ebp
f0101f7c:	c3                   	ret    

f0101f7d <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	c7 05 ac be 2b f0 02 	movl   $0x2,0xf02bbeac
f0101f87:	00 00 00 
f0101f8a:	90                   	nop
f0101f8b:	5d                   	pop    %ebp
f0101f8c:	c3                   	ret    

f0101f8d <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0101f8d:	55                   	push   %ebp
f0101f8e:	89 e5                	mov    %esp,%ebp
f0101f90:	c7 05 ac be 2b f0 03 	movl   $0x3,0xf02bbeac
f0101f97:	00 00 00 
f0101f9a:	90                   	nop
f0101f9b:	5d                   	pop    %ebp
f0101f9c:	c3                   	ret    

f0101f9d <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0101f9d:	55                   	push   %ebp
f0101f9e:	89 e5                	mov    %esp,%ebp
f0101fa0:	c7 05 ac be 2b f0 04 	movl   $0x4,0xf02bbeac
f0101fa7:	00 00 00 
f0101faa:	90                   	nop
f0101fab:	5d                   	pop    %ebp
f0101fac:	c3                   	ret    

f0101fad <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0101fad:	55                   	push   %ebp
f0101fae:	89 e5                	mov    %esp,%ebp
f0101fb0:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fb5:	83 f8 01             	cmp    $0x1,%eax
f0101fb8:	75 04                	jne    f0101fbe <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0101fba:	b0 01                	mov    $0x1,%al
f0101fbc:	eb 02                	jmp    f0101fc0 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0101fbe:	b0 00                	mov    $0x0,%al
f0101fc0:	5d                   	pop    %ebp
f0101fc1:	c3                   	ret    

f0101fc2 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0101fc2:	55                   	push   %ebp
f0101fc3:	89 e5                	mov    %esp,%ebp
f0101fc5:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fca:	83 f8 02             	cmp    $0x2,%eax
f0101fcd:	75 04                	jne    f0101fd3 <isUHeapPlacementStrategyBESTFIT+0x11>
f0101fcf:	b0 01                	mov    $0x1,%al
f0101fd1:	eb 02                	jmp    f0101fd5 <isUHeapPlacementStrategyBESTFIT+0x13>
f0101fd3:	b0 00                	mov    $0x0,%al
f0101fd5:	5d                   	pop    %ebp
f0101fd6:	c3                   	ret    

f0101fd7 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0101fd7:	55                   	push   %ebp
f0101fd8:	89 e5                	mov    %esp,%ebp
f0101fda:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101fdf:	83 f8 03             	cmp    $0x3,%eax
f0101fe2:	75 04                	jne    f0101fe8 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0101fe4:	b0 01                	mov    $0x1,%al
f0101fe6:	eb 02                	jmp    f0101fea <isUHeapPlacementStrategyNEXTFIT+0x13>
f0101fe8:	b0 00                	mov    $0x0,%al
f0101fea:	5d                   	pop    %ebp
f0101feb:	c3                   	ret    

f0101fec <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101fec:	55                   	push   %ebp
f0101fed:	89 e5                	mov    %esp,%ebp
f0101fef:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
f0101ff4:	83 f8 04             	cmp    $0x4,%eax
f0101ff7:	75 04                	jne    f0101ffd <isUHeapPlacementStrategyWORSTFIT+0x11>
f0101ff9:	b0 01                	mov    $0x1,%al
f0101ffb:	eb 02                	jmp    f0101fff <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101ffd:	b0 00                	mov    $0x0,%al
f0101fff:	5d                   	pop    %ebp
f0102000:	c3                   	ret    

f0102001 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102001:	55                   	push   %ebp
f0102002:	89 e5                	mov    %esp,%ebp
f0102004:	53                   	push   %ebx
f0102005:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102008:	8b 45 08             	mov    0x8(%ebp),%eax
f010200b:	c1 e8 0c             	shr    $0xc,%eax
f010200e:	89 c2                	mov    %eax,%edx
f0102010:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0102015:	39 c2                	cmp    %eax,%edx
f0102017:	72 14                	jb     f010202d <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0102019:	83 ec 04             	sub    $0x4,%esp
f010201c:	68 58 fc 12 f0       	push   $0xf012fc58
f0102021:	6a 55                	push   $0x55
f0102023:	68 80 fc 12 f0       	push   $0xf012fc80
f0102028:	e8 83 e1 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010202d:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0102033:	8b 45 08             	mov    0x8(%ebp),%eax
f0102036:	c1 e8 0c             	shr    $0xc,%eax
f0102039:	89 c2                	mov    %eax,%edx
f010203b:	89 d0                	mov    %edx,%eax
f010203d:	01 c0                	add    %eax,%eax
f010203f:	01 d0                	add    %edx,%eax
f0102041:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0102048:	01 d8                	add    %ebx,%eax
f010204a:	01 d0                	add    %edx,%eax
f010204c:	01 c8                	add    %ecx,%eax
}
f010204e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102051:	c9                   	leave  
f0102052:	c3                   	ret    

f0102053 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102053:	55                   	push   %ebp
f0102054:	89 e5                	mov    %esp,%ebp
f0102056:	53                   	push   %ebx
f0102057:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010205a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102061:	eb 3b                	jmp    f010209e <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0102063:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102066:	89 d0                	mov    %edx,%eax
f0102068:	01 c0                	add    %eax,%eax
f010206a:	01 d0                	add    %edx,%eax
f010206c:	c1 e0 03             	shl    $0x3,%eax
f010206f:	05 44 c5 18 f0       	add    $0xf018c544,%eax
f0102074:	8b 10                	mov    (%eax),%edx
f0102076:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102079:	89 c8                	mov    %ecx,%eax
f010207b:	01 c0                	add    %eax,%eax
f010207d:	01 c8                	add    %ecx,%eax
f010207f:	c1 e0 03             	shl    $0x3,%eax
f0102082:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102087:	8b 00                	mov    (%eax),%eax
f0102089:	83 ec 04             	sub    $0x4,%esp
f010208c:	52                   	push   %edx
f010208d:	50                   	push   %eax
f010208e:	68 03 05 13 f0       	push   $0xf0130503
f0102093:	e8 99 ed ff ff       	call   f0100e31 <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010209b:	ff 45 f4             	incl   -0xc(%ebp)
f010209e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01020a1:	a1 48 c9 18 f0       	mov    0xf018c948,%eax
f01020a6:	39 c2                	cmp    %eax,%edx
f01020a8:	72 b9                	jb     f0102063 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01020aa:	83 ec 0c             	sub    $0xc,%esp
f01020ad:	68 0c 05 13 f0       	push   $0xf013050c
f01020b2:	e8 7a ed ff ff       	call   f0100e31 <cprintf>
f01020b7:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01020ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020c1:	eb 42                	jmp    f0102105 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01020c3:	8b 0d 48 ca 18 f0    	mov    0xf018ca48,%ecx
f01020c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01020cc:	89 d0                	mov    %edx,%eax
f01020ce:	01 c0                	add    %eax,%eax
f01020d0:	01 d0                	add    %edx,%eax
f01020d2:	c1 e0 02             	shl    $0x2,%eax
f01020d5:	01 c8                	add    %ecx,%eax
f01020d7:	8b 50 04             	mov    0x4(%eax),%edx
f01020da:	8b 1d 48 ca 18 f0    	mov    0xf018ca48,%ebx
f01020e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01020e3:	89 c8                	mov    %ecx,%eax
f01020e5:	01 c0                	add    %eax,%eax
f01020e7:	01 c8                	add    %ecx,%eax
f01020e9:	c1 e0 02             	shl    $0x2,%eax
f01020ec:	01 d8                	add    %ebx,%eax
f01020ee:	8b 00                	mov    (%eax),%eax
f01020f0:	83 ec 04             	sub    $0x4,%esp
f01020f3:	52                   	push   %edx
f01020f4:	50                   	push   %eax
f01020f5:	68 21 05 13 f0       	push   $0xf0130521
f01020fa:	e8 32 ed ff ff       	call   f0100e31 <cprintf>
f01020ff:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102102:	ff 45 f4             	incl   -0xc(%ebp)
f0102105:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010210a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010210d:	7c b4                	jl     f01020c3 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010210f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102114:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102117:	c9                   	leave  
f0102118:	c3                   	ret    

f0102119 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0102119:	55                   	push   %ebp
f010211a:	89 e5                	mov    %esp,%ebp
f010211c:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f010211f:	83 ec 0c             	sub    $0xc,%esp
f0102122:	68 3d 05 13 f0       	push   $0xf013053d
f0102127:	e8 05 ed ff ff       	call   f0100e31 <cprintf>
f010212c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f010212f:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102134:	83 ec 04             	sub    $0x4,%esp
f0102137:	50                   	push   %eax
f0102138:	68 0c 00 10 f0       	push   $0xf010000c
f010213d:	68 58 05 13 f0       	push   $0xf0130558
f0102142:	e8 ea ec ff ff       	call   f0100e31 <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010214a:	b8 ed f8 12 00       	mov    $0x12f8ed,%eax
f010214f:	83 ec 04             	sub    $0x4,%esp
f0102152:	50                   	push   %eax
f0102153:	68 ed f8 12 f0       	push   $0xf012f8ed
f0102158:	68 94 05 13 f0       	push   $0xf0130594
f010215d:	e8 cf ec ff ff       	call   f0100e31 <cprintf>
f0102162:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102165:	b8 d2 2f 25 00       	mov    $0x252fd2,%eax
f010216a:	83 ec 04             	sub    $0x4,%esp
f010216d:	50                   	push   %eax
f010216e:	68 d2 2f 25 f0       	push   $0xf0252fd2
f0102173:	68 d0 05 13 f0       	push   $0xf01305d0
f0102178:	e8 b4 ec ff ff       	call   f0100e31 <cprintf>
f010217d:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0102180:	b8 2c e6 2d 00       	mov    $0x2de62c,%eax
f0102185:	83 ec 04             	sub    $0x4,%esp
f0102188:	50                   	push   %eax
f0102189:	68 2c e6 2d f0       	push   $0xf02de62c
f010218e:	68 18 06 13 f0       	push   $0xf0130618
f0102193:	e8 99 ec ff ff       	call   f0100e31 <cprintf>
f0102198:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f010219b:	b8 2c e6 2d f0       	mov    $0xf02de62c,%eax
f01021a0:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01021a6:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01021ab:	29 c2                	sub    %eax,%edx
f01021ad:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01021af:	85 c0                	test   %eax,%eax
f01021b1:	79 05                	jns    f01021b8 <command_kernel_info+0x9f>
f01021b3:	05 ff 03 00 00       	add    $0x3ff,%eax
f01021b8:	c1 f8 0a             	sar    $0xa,%eax
f01021bb:	83 ec 08             	sub    $0x8,%esp
f01021be:	50                   	push   %eax
f01021bf:	68 54 06 13 f0       	push   $0xf0130654
f01021c4:	e8 68 ec ff ff       	call   f0100e31 <cprintf>
f01021c9:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01021cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021d1:	c9                   	leave  
f01021d2:	c3                   	ret    

f01021d3 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01021d3:	55                   	push   %ebp
f01021d4:	89 e5                	mov    %esp,%ebp
f01021d6:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01021d9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01021dd:	75 37                	jne    f0102216 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01021df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021e2:	83 c0 04             	add    $0x4,%eax
f01021e5:	8b 00                	mov    (%eax),%eax
f01021e7:	83 ec 04             	sub    $0x4,%esp
f01021ea:	6a 10                	push   $0x10
f01021ec:	6a 00                	push   $0x0
f01021ee:	50                   	push   %eax
f01021ef:	e8 fa cb 02 00       	call   f012edee <strtol>
f01021f4:	83 c4 10             	add    $0x10,%esp
f01021f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01021fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01021fd:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102200:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102203:	83 c0 08             	add    $0x8,%eax
f0102206:	8b 00                	mov    (%eax),%eax
f0102208:	8a 00                	mov    (%eax),%al
f010220a:	88 c2                	mov    %al,%dl
f010220c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010220f:	88 10                	mov    %dl,(%eax)
f0102211:	e9 bc 00 00 00       	jmp    f01022d2 <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102216:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010221a:	0f 85 a2 00 00 00    	jne    f01022c2 <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102220:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102223:	83 c0 04             	add    $0x4,%eax
f0102226:	8b 00                	mov    (%eax),%eax
f0102228:	83 ec 04             	sub    $0x4,%esp
f010222b:	6a 0a                	push   $0xa
f010222d:	6a 00                	push   $0x0
f010222f:	50                   	push   %eax
f0102230:	e8 b9 cb 02 00       	call   f012edee <strtol>
f0102235:	83 c4 10             	add    $0x10,%esp
f0102238:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010223b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102242:	83 ec 04             	sub    $0x4,%esp
f0102245:	6a 00                	push   $0x0
f0102247:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010224a:	50                   	push   %eax
f010224b:	ff 75 f4             	pushl  -0xc(%ebp)
f010224e:	e8 af 73 00 00       	call   f0109602 <envid2env>
f0102253:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102256:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102259:	83 c0 08             	add    $0x8,%eax
f010225c:	8b 00                	mov    (%eax),%eax
f010225e:	83 ec 04             	sub    $0x4,%esp
f0102261:	6a 10                	push   $0x10
f0102263:	6a 00                	push   $0x0
f0102265:	50                   	push   %eax
f0102266:	e8 83 cb 02 00       	call   f012edee <strtol>
f010226b:	83 c4 10             	add    $0x10,%esp
f010226e:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102271:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102274:	85 c0                	test   %eax,%eax
f0102276:	75 07                	jne    f010227f <command_writeusermem+0xac>
f0102278:	b8 00 00 00 00       	mov    $0x0,%eax
f010227d:	eb 58                	jmp    f01022d7 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010227f:	0f 20 d8             	mov    %cr3,%eax
f0102282:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102285:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102288:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f010228b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010228e:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102294:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102297:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010229a:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010229d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01022a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01022a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022a6:	83 c0 0c             	add    $0xc,%eax
f01022a9:	8b 00                	mov    (%eax),%eax
f01022ab:	8a 00                	mov    (%eax),%al
f01022ad:	88 c2                	mov    %al,%dl
f01022af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01022b2:	88 10                	mov    %dl,(%eax)
f01022b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01022b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01022ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01022bd:	0f 22 d8             	mov    %eax,%cr3
f01022c0:	eb 10                	jmp    f01022d2 <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01022c2:	83 ec 0c             	sub    $0xc,%esp
f01022c5:	68 80 06 13 f0       	push   $0xf0130680
f01022ca:	e8 62 eb ff ff       	call   f0100e31 <cprintf>
f01022cf:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d7:	c9                   	leave  
f01022d8:	c3                   	ret    

f01022d9 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01022d9:	55                   	push   %ebp
f01022da:	89 e5                	mov    %esp,%ebp
f01022dc:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01022df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022e2:	83 c0 04             	add    $0x4,%eax
f01022e5:	8b 00                	mov    (%eax),%eax
f01022e7:	83 ec 04             	sub    $0x4,%esp
f01022ea:	6a 10                	push   $0x10
f01022ec:	6a 00                	push   $0x0
f01022ee:	50                   	push   %eax
f01022ef:	e8 fa ca 02 00       	call   f012edee <strtol>
f01022f4:	83 c4 10             	add    $0x10,%esp
f01022f7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01022fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01022ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102306:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102309:	83 c0 08             	add    $0x8,%eax
f010230c:	8b 00                	mov    (%eax),%eax
f010230e:	83 ec 0c             	sub    $0xc,%esp
f0102311:	50                   	push   %eax
f0102312:	e8 77 c7 02 00       	call   f012ea8e <strlen>
f0102317:	83 c4 10             	add    $0x10,%esp
f010231a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010231d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102324:	eb 1c                	jmp    f0102342 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102326:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102329:	83 c0 08             	add    $0x8,%eax
f010232c:	8b 10                	mov    (%eax),%edx
f010232e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102331:	01 d0                	add    %edx,%eax
f0102333:	8a 00                	mov    (%eax),%al
f0102335:	88 c2                	mov    %al,%dl
f0102337:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010233a:	88 10                	mov    %dl,(%eax)
		address++;
f010233c:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010233f:	ff 45 f0             	incl   -0x10(%ebp)
f0102342:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102345:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102348:	7c dc                	jl     f0102326 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f010234a:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010234f:	c9                   	leave  
f0102350:	c3                   	ret    

f0102351 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102351:	55                   	push   %ebp
f0102352:	89 e5                	mov    %esp,%ebp
f0102354:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102357:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010235b:	75 42                	jne    f010239f <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010235d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102360:	83 c0 04             	add    $0x4,%eax
f0102363:	8b 00                	mov    (%eax),%eax
f0102365:	83 ec 04             	sub    $0x4,%esp
f0102368:	6a 10                	push   $0x10
f010236a:	6a 00                	push   $0x0
f010236c:	50                   	push   %eax
f010236d:	e8 7c ca 02 00       	call   f012edee <strtol>
f0102372:	83 c4 10             	add    $0x10,%esp
f0102375:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102378:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010237b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010237e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102381:	8a 00                	mov    (%eax),%al
f0102383:	0f b6 c0             	movzbl %al,%eax
f0102386:	83 ec 04             	sub    $0x4,%esp
f0102389:	50                   	push   %eax
f010238a:	ff 75 d8             	pushl  -0x28(%ebp)
f010238d:	68 aa 06 13 f0       	push   $0xf01306aa
f0102392:	e8 9a ea ff ff       	call   f0100e31 <cprintf>
f0102397:	83 c4 10             	add    $0x10,%esp
f010239a:	e9 c7 00 00 00       	jmp    f0102466 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010239f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01023a3:	0f 85 ad 00 00 00    	jne    f0102456 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01023a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023ac:	83 c0 04             	add    $0x4,%eax
f01023af:	8b 00                	mov    (%eax),%eax
f01023b1:	83 ec 04             	sub    $0x4,%esp
f01023b4:	6a 0a                	push   $0xa
f01023b6:	6a 00                	push   $0x0
f01023b8:	50                   	push   %eax
f01023b9:	e8 30 ca 02 00       	call   f012edee <strtol>
f01023be:	83 c4 10             	add    $0x10,%esp
f01023c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01023c4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01023cb:	83 ec 04             	sub    $0x4,%esp
f01023ce:	6a 00                	push   $0x0
f01023d0:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01023d3:	50                   	push   %eax
f01023d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01023d7:	e8 26 72 00 00       	call   f0109602 <envid2env>
f01023dc:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01023df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023e2:	83 c0 08             	add    $0x8,%eax
f01023e5:	8b 00                	mov    (%eax),%eax
f01023e7:	83 ec 04             	sub    $0x4,%esp
f01023ea:	6a 10                	push   $0x10
f01023ec:	6a 00                	push   $0x0
f01023ee:	50                   	push   %eax
f01023ef:	e8 fa c9 02 00       	call   f012edee <strtol>
f01023f4:	83 c4 10             	add    $0x10,%esp
f01023f7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01023fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01023fd:	85 c0                	test   %eax,%eax
f01023ff:	75 07                	jne    f0102408 <command_readusermem+0xb7>
f0102401:	b8 00 00 00 00       	mov    $0x0,%eax
f0102406:	eb 63                	jmp    f010246b <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102408:	0f 20 d8             	mov    %cr3,%eax
f010240b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010240e:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102411:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102414:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102417:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010241d:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102420:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102423:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102426:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102429:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010242c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010242f:	8a 00                	mov    (%eax),%al
f0102431:	0f b6 c0             	movzbl %al,%eax
f0102434:	83 ec 04             	sub    $0x4,%esp
f0102437:	50                   	push   %eax
f0102438:	ff 75 f0             	pushl  -0x10(%ebp)
f010243b:	68 aa 06 13 f0       	push   $0xf01306aa
f0102440:	e8 ec e9 ff ff       	call   f0100e31 <cprintf>
f0102445:	83 c4 10             	add    $0x10,%esp
f0102448:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010244b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010244e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102451:	0f 22 d8             	mov    %eax,%cr3
f0102454:	eb 10                	jmp    f0102466 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102456:	83 ec 0c             	sub    $0xc,%esp
f0102459:	68 c4 06 13 f0       	push   $0xf01306c4
f010245e:	e8 ce e9 ff ff       	call   f0100e31 <cprintf>
f0102463:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102466:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010246b:	c9                   	leave  
f010246c:	c3                   	ret    

f010246d <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010246d:	55                   	push   %ebp
f010246e:	89 e5                	mov    %esp,%ebp
f0102470:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102473:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102476:	83 c0 04             	add    $0x4,%eax
f0102479:	8b 00                	mov    (%eax),%eax
f010247b:	83 ec 04             	sub    $0x4,%esp
f010247e:	6a 10                	push   $0x10
f0102480:	6a 00                	push   $0x0
f0102482:	50                   	push   %eax
f0102483:	e8 66 c9 02 00       	call   f012edee <strtol>
f0102488:	83 c4 10             	add    $0x10,%esp
f010248b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102490:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102493:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f010249a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010249d:	8a 00                	mov    (%eax),%al
f010249f:	0f b6 c0             	movzbl %al,%eax
f01024a2:	83 ec 08             	sub    $0x8,%esp
f01024a5:	50                   	push   %eax
f01024a6:	68 ee 06 13 f0       	push   $0xf01306ee
f01024ab:	e8 81 e9 ff ff       	call   f0100e31 <cprintf>
f01024b0:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01024b3:	83 ec 0c             	sub    $0xc,%esp
f01024b6:	68 f1 06 13 f0       	push   $0xf01306f1
f01024bb:	e8 71 e9 ff ff       	call   f0100e31 <cprintf>
f01024c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024c8:	c9                   	leave  
f01024c9:	c3                   	ret    

f01024ca <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01024ca:	55                   	push   %ebp
f01024cb:	89 e5                	mov    %esp,%ebp
f01024cd:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01024d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024d3:	83 c0 04             	add    $0x4,%eax
f01024d6:	8b 00                	mov    (%eax),%eax
f01024d8:	83 ec 04             	sub    $0x4,%esp
f01024db:	6a 0a                	push   $0xa
f01024dd:	6a 00                	push   $0x0
f01024df:	50                   	push   %eax
f01024e0:	e8 09 c9 02 00       	call   f012edee <strtol>
f01024e5:	83 c4 10             	add    $0x10,%esp
f01024e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01024eb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01024f2:	83 ec 04             	sub    $0x4,%esp
f01024f5:	6a 00                	push   $0x0
f01024f7:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01024fa:	50                   	push   %eax
f01024fb:	ff 75 ec             	pushl  -0x14(%ebp)
f01024fe:	e8 ff 70 00 00       	call   f0109602 <envid2env>
f0102503:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102509:	83 c0 08             	add    $0x8,%eax
f010250c:	8b 00                	mov    (%eax),%eax
f010250e:	83 ec 04             	sub    $0x4,%esp
f0102511:	6a 10                	push   $0x10
f0102513:	6a 00                	push   $0x0
f0102515:	50                   	push   %eax
f0102516:	e8 d3 c8 02 00       	call   f012edee <strtol>
f010251b:	83 c4 10             	add    $0x10,%esp
f010251e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102521:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102524:	83 c0 0c             	add    $0xc,%eax
f0102527:	8b 00                	mov    (%eax),%eax
f0102529:	83 ec 04             	sub    $0x4,%esp
f010252c:	6a 0a                	push   $0xa
f010252e:	6a 00                	push   $0x0
f0102530:	50                   	push   %eax
f0102531:	e8 b8 c8 02 00       	call   f012edee <strtol>
f0102536:	83 c4 10             	add    $0x10,%esp
f0102539:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f010253c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010253f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102542:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102545:	85 c0                	test   %eax,%eax
f0102547:	75 07                	jne    f0102550 <command_readuserblock+0x86>
f0102549:	b8 00 00 00 00       	mov    $0x0,%eax
f010254e:	eb 68                	jmp    f01025b8 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102550:	0f 20 d8             	mov    %cr3,%eax
f0102553:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102556:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102559:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f010255c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010255f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102565:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102568:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010256b:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010256e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102575:	eb 28                	jmp    f010259f <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010257a:	8a 00                	mov    (%eax),%al
f010257c:	0f b6 d0             	movzbl %al,%edx
f010257f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102582:	8a 00                	mov    (%eax),%al
f0102584:	0f b6 c0             	movzbl %al,%eax
f0102587:	52                   	push   %edx
f0102588:	50                   	push   %eax
f0102589:	ff 75 f4             	pushl  -0xc(%ebp)
f010258c:	68 f3 06 13 f0       	push   $0xf01306f3
f0102591:	e8 9b e8 ff ff       	call   f0100e31 <cprintf>
f0102596:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102599:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010259c:	ff 45 f0             	incl   -0x10(%ebp)
f010259f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01025a2:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01025a5:	7c d0                	jl     f0102577 <command_readuserblock+0xad>
f01025a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01025ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01025b0:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01025b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025b8:	c9                   	leave  
f01025b9:	c3                   	ret    

f01025ba <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01025ba:	55                   	push   %ebp
f01025bb:	89 e5                	mov    %esp,%ebp
f01025bd:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01025c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025c3:	83 c0 04             	add    $0x4,%eax
f01025c6:	8b 00                	mov    (%eax),%eax
f01025c8:	83 ec 04             	sub    $0x4,%esp
f01025cb:	6a 0a                	push   $0xa
f01025cd:	6a 00                	push   $0x0
f01025cf:	50                   	push   %eax
f01025d0:	e8 19 c8 02 00       	call   f012edee <strtol>
f01025d5:	83 c4 10             	add    $0x10,%esp
f01025d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01025db:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01025e2:	83 ec 04             	sub    $0x4,%esp
f01025e5:	6a 00                	push   $0x0
f01025e7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01025ea:	50                   	push   %eax
f01025eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01025ee:	e8 0f 70 00 00       	call   f0109602 <envid2env>
f01025f3:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01025f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025f9:	85 c0                	test   %eax,%eax
f01025fb:	75 0a                	jne    f0102607 <command_remove_table+0x4d>
f01025fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0102602:	e9 aa 00 00 00       	jmp    f01026b1 <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102607:	8b 45 0c             	mov    0xc(%ebp),%eax
f010260a:	83 c0 08             	add    $0x8,%eax
f010260d:	8b 00                	mov    (%eax),%eax
f010260f:	83 ec 04             	sub    $0x4,%esp
f0102612:	6a 10                	push   $0x10
f0102614:	6a 00                	push   $0x0
f0102616:	50                   	push   %eax
f0102617:	e8 d2 c7 02 00       	call   f012edee <strtol>
f010261c:	83 c4 10             	add    $0x10,%esp
f010261f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102622:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102625:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102628:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010262b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102631:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102634:	c1 ea 16             	shr    $0x16,%edx
f0102637:	c1 e2 02             	shl    $0x2,%edx
f010263a:	01 d0                	add    %edx,%eax
f010263c:	8b 00                	mov    (%eax),%eax
f010263e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102643:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102646:	83 ec 0c             	sub    $0xc,%esp
f0102649:	ff 75 e8             	pushl  -0x18(%ebp)
f010264c:	e8 b0 f9 ff ff       	call   f0102001 <to_frame_info>
f0102651:	83 c4 10             	add    $0x10,%esp
f0102654:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102657:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010265a:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102660:	83 ec 0c             	sub    $0xc,%esp
f0102663:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102666:	e8 06 4a 00 00       	call   f0107071 <free_frame>
f010266b:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010266e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102671:	c1 e8 16             	shr    $0x16,%eax
f0102674:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102677:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010267a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102680:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102683:	c1 e2 02             	shl    $0x2,%edx
f0102686:	01 c2                	add    %eax,%edx
f0102688:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010268b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102691:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102694:	c1 e1 02             	shl    $0x2,%ecx
f0102697:	01 c8                	add    %ecx,%eax
f0102699:	8b 00                	mov    (%eax),%eax
f010269b:	83 e0 fe             	and    $0xfffffffe,%eax
f010269e:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01026a0:	0f 20 d8             	mov    %cr3,%eax
f01026a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01026a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01026a9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01026ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026b1:	c9                   	leave  
f01026b2:	c3                   	ret    

f01026b3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01026b3:	55                   	push   %ebp
f01026b4:	89 e5                	mov    %esp,%ebp
f01026b6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01026b9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01026bd:	7e 06                	jle    f01026c5 <command_allocuserpage+0x12>
f01026bf:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01026c3:	7e 1a                	jle    f01026df <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01026c5:	83 ec 0c             	sub    $0xc,%esp
f01026c8:	68 04 07 13 f0       	push   $0xf0130704
f01026cd:	e8 5f e7 ff ff       	call   f0100e31 <cprintf>
f01026d2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01026d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01026da:	e9 4c 01 00 00       	jmp    f010282b <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01026df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026e2:	83 c0 04             	add    $0x4,%eax
f01026e5:	8b 00                	mov    (%eax),%eax
f01026e7:	83 ec 04             	sub    $0x4,%esp
f01026ea:	6a 0a                	push   $0xa
f01026ec:	6a 00                	push   $0x0
f01026ee:	50                   	push   %eax
f01026ef:	e8 fa c6 02 00       	call   f012edee <strtol>
f01026f4:	83 c4 10             	add    $0x10,%esp
f01026f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f01026fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102701:	83 ec 04             	sub    $0x4,%esp
f0102704:	6a 00                	push   $0x0
f0102706:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102709:	50                   	push   %eax
f010270a:	ff 75 f0             	pushl  -0x10(%ebp)
f010270d:	e8 f0 6e 00 00       	call   f0109602 <envid2env>
f0102712:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102715:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102718:	85 c0                	test   %eax,%eax
f010271a:	75 0a                	jne    f0102726 <command_allocuserpage+0x73>
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	e9 05 01 00 00       	jmp    f010282b <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102726:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102729:	83 c0 08             	add    $0x8,%eax
f010272c:	8b 00                	mov    (%eax),%eax
f010272e:	83 ec 04             	sub    $0x4,%esp
f0102731:	6a 10                	push   $0x10
f0102733:	6a 00                	push   $0x0
f0102735:	50                   	push   %eax
f0102736:	e8 b3 c6 02 00       	call   f012edee <strtol>
f010273b:	83 c4 10             	add    $0x10,%esp
f010273e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102741:	83 ec 0c             	sub    $0xc,%esp
f0102744:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102747:	50                   	push   %eax
f0102748:	e8 0c 48 00 00       	call   f0106f59 <allocate_frame>
f010274d:	83 c4 10             	add    $0x10,%esp
f0102750:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102753:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102757:	75 1a                	jne    f0102773 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 2e 07 13 f0       	push   $0xf013072e
f0102761:	e8 cb e6 ff ff       	call   f0100e31 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	e9 b8 00 00 00       	jmp    f010282b <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102773:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102777:	75 20                	jne    f0102799 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102779:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010277c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010277f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102785:	6a 06                	push   $0x6
f0102787:	ff 75 ec             	pushl  -0x14(%ebp)
f010278a:	52                   	push   %edx
f010278b:	50                   	push   %eax
f010278c:	e8 63 4b 00 00       	call   f01072f4 <map_frame>
f0102791:	83 c4 10             	add    $0x10,%esp
f0102794:	e9 8d 00 00 00       	jmp    f0102826 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102799:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010279d:	0f 85 83 00 00 00    	jne    f0102826 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01027a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a6:	83 c0 0c             	add    $0xc,%eax
f01027a9:	8b 00                	mov    (%eax),%eax
f01027ab:	8a 00                	mov    (%eax),%al
f01027ad:	3c 72                	cmp    $0x72,%al
f01027af:	74 0e                	je     f01027bf <command_allocuserpage+0x10c>
f01027b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027b4:	83 c0 0c             	add    $0xc,%eax
f01027b7:	8b 00                	mov    (%eax),%eax
f01027b9:	8a 00                	mov    (%eax),%al
f01027bb:	3c 52                	cmp    $0x52,%al
f01027bd:	75 09                	jne    f01027c8 <command_allocuserpage+0x115>
			rw = 0 ;
f01027bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01027c6:	eb 3c                	jmp    f0102804 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01027c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027cb:	83 c0 0c             	add    $0xc,%eax
f01027ce:	8b 00                	mov    (%eax),%eax
f01027d0:	8a 00                	mov    (%eax),%al
f01027d2:	3c 77                	cmp    $0x77,%al
f01027d4:	74 0e                	je     f01027e4 <command_allocuserpage+0x131>
f01027d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027d9:	83 c0 0c             	add    $0xc,%eax
f01027dc:	8b 00                	mov    (%eax),%eax
f01027de:	8a 00                	mov    (%eax),%al
f01027e0:	3c 57                	cmp    $0x57,%al
f01027e2:	75 09                	jne    f01027ed <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f01027e4:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01027eb:	eb 17                	jmp    f0102804 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f01027ed:	83 ec 0c             	sub    $0xc,%esp
f01027f0:	68 48 07 13 f0       	push   $0xf0130748
f01027f5:	e8 37 e6 ff ff       	call   f0100e31 <cprintf>
f01027fa:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f01027fd:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102807:	83 c8 04             	or     $0x4,%eax
f010280a:	89 c1                	mov    %eax,%ecx
f010280c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010280f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102812:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102818:	51                   	push   %ecx
f0102819:	ff 75 ec             	pushl  -0x14(%ebp)
f010281c:	52                   	push   %edx
f010281d:	50                   	push   %eax
f010281e:	e8 d1 4a 00 00       	call   f01072f4 <map_frame>
f0102823:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102826:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010282b:	c9                   	leave  
f010282c:	c3                   	ret    

f010282d <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f010282d:	55                   	push   %ebp
f010282e:	89 e5                	mov    %esp,%ebp
f0102830:	56                   	push   %esi
f0102831:	53                   	push   %ebx
f0102832:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102835:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102838:	83 ec 0c             	sub    $0xc,%esp
f010283b:	50                   	push   %eax
f010283c:	e8 23 4d 00 00       	call   f0107564 <calculate_available_frames>
f0102841:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102844:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102847:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010284a:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f010284d:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102850:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102853:	01 de                	add    %ebx,%esi
f0102855:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102858:	01 f3                	add    %esi,%ebx
f010285a:	83 ec 0c             	sub    $0xc,%esp
f010285d:	51                   	push   %ecx
f010285e:	52                   	push   %edx
f010285f:	50                   	push   %eax
f0102860:	53                   	push   %ebx
f0102861:	68 8c 07 13 f0       	push   $0xf013078c
f0102866:	e8 c6 e5 ff ff       	call   f0100e31 <cprintf>
f010286b:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f010286e:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0102873:	83 ec 08             	sub    $0x8,%esp
f0102876:	50                   	push   %eax
f0102877:	68 e4 07 13 f0       	push   $0xf01307e4
f010287c:	e8 b0 e5 ff ff       	call   f0100e31 <cprintf>
f0102881:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102884:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102889:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010288c:	5b                   	pop    %ebx
f010288d:	5e                   	pop    %esi
f010288e:	5d                   	pop    %ebp
f010288f:	c3                   	ret    

f0102890 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102890:	55                   	push   %ebp
f0102891:	89 e5                	mov    %esp,%ebp
f0102893:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102896:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f010289d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01028a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01028ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01028ae:	83 f8 02             	cmp    $0x2,%eax
f01028b1:	74 39                	je     f01028ec <CreateEnv+0x5c>
f01028b3:	83 f8 03             	cmp    $0x3,%eax
f01028b6:	75 1d                	jne    f01028d5 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01028b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bb:	83 c0 08             	add    $0x8,%eax
f01028be:	8b 00                	mov    (%eax),%eax
f01028c0:	83 ec 04             	sub    $0x4,%esp
f01028c3:	6a 0a                	push   $0xa
f01028c5:	6a 00                	push   $0x0
f01028c7:	50                   	push   %eax
f01028c8:	e8 21 c5 02 00       	call   f012edee <strtol>
f01028cd:	83 c4 10             	add    $0x10,%esp
f01028d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f01028d3:	eb 18                	jmp    f01028ed <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01028d5:	83 ec 0c             	sub    $0xc,%esp
f01028d8:	68 20 08 13 f0       	push   $0xf0130820
f01028dd:	e8 4f e5 ff ff       	call   f0100e31 <cprintf>
f01028e2:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01028e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01028ea:	eb 58                	jmp    f0102944 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f01028ec:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01028ed:	83 ec 0c             	sub    $0xc,%esp
f01028f0:	6a 02                	push   $0x2
f01028f2:	e8 d9 aa 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f01028f7:	83 c4 10             	add    $0x10,%esp
f01028fa:	85 c0                	test   %eax,%eax
f01028fc:	74 07                	je     f0102905 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f01028fe:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102905:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102909:	76 19                	jbe    f0102924 <CreateEnv+0x94>
f010290b:	68 90 08 13 f0       	push   $0xf0130890
f0102910:	68 d5 08 13 f0       	push   $0xf01308d5
f0102915:	68 b6 01 00 00       	push   $0x1b6
f010291a:	68 ea 08 13 f0       	push   $0xf01308ea
f010291f:	e8 8c d8 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102924:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102927:	83 c0 04             	add    $0x4,%eax
f010292a:	8b 00                	mov    (%eax),%eax
f010292c:	ff 75 f0             	pushl  -0x10(%ebp)
f010292f:	ff 75 f4             	pushl  -0xc(%ebp)
f0102932:	ff 75 ec             	pushl  -0x14(%ebp)
f0102935:	50                   	push   %eax
f0102936:	e8 c4 5f 00 00       	call   f01088ff <env_create>
f010293b:	83 c4 10             	add    $0x10,%esp
f010293e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102941:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102944:	c9                   	leave  
f0102945:	c3                   	ret    

f0102946 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102946:	55                   	push   %ebp
f0102947:	89 e5                	mov    %esp,%ebp
f0102949:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f010294c:	83 ec 08             	sub    $0x8,%esp
f010294f:	ff 75 0c             	pushl  0xc(%ebp)
f0102952:	ff 75 08             	pushl  0x8(%ebp)
f0102955:	e8 36 ff ff ff       	call   f0102890 <CreateEnv>
f010295a:	83 c4 10             	add    $0x10,%esp
f010295d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102960:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102964:	75 07                	jne    f010296d <command_run_program+0x27>
f0102966:	b8 00 00 00 00       	mov    $0x0,%eax
f010296b:	eb 46                	jmp    f01029b3 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f010296d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102970:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102973:	83 ec 08             	sub    $0x8,%esp
f0102976:	50                   	push   %eax
f0102977:	68 fe 08 13 f0       	push   $0xf01308fe
f010297c:	e8 b0 e4 ff ff       	call   f0100e31 <cprintf>
f0102981:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102984:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f010298b:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f010298e:	83 ec 0c             	sub    $0xc,%esp
f0102991:	ff 75 f4             	pushl  -0xc(%ebp)
f0102994:	e8 ce 25 00 00       	call   f0104f67 <sched_new_env>
f0102999:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f010299c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010299f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01029a2:	83 ec 0c             	sub    $0xc,%esp
f01029a5:	50                   	push   %eax
f01029a6:	e8 d9 25 00 00       	call   f0104f84 <sched_run_env>
f01029ab:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029b3:	c9                   	leave  
f01029b4:	c3                   	ret    

f01029b5 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f01029b5:	55                   	push   %ebp
f01029b6:	89 e5                	mov    %esp,%ebp
f01029b8:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 04             	sub    $0x4,%esp
f01029c6:	6a 0a                	push   $0xa
f01029c8:	6a 00                	push   $0x0
f01029ca:	50                   	push   %eax
f01029cb:	e8 1e c4 02 00       	call   f012edee <strtol>
f01029d0:	83 c4 10             	add    $0x10,%esp
f01029d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f01029d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029d9:	83 ec 0c             	sub    $0xc,%esp
f01029dc:	50                   	push   %eax
f01029dd:	e8 63 28 00 00       	call   f0105245 <sched_kill_env>
f01029e2:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029ea:	c9                   	leave  
f01029eb:	c3                   	ret    

f01029ec <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f01029ec:	55                   	push   %ebp
f01029ed:	89 e5                	mov    %esp,%ebp
f01029ef:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f01029f2:	83 ec 08             	sub    $0x8,%esp
f01029f5:	ff 75 0c             	pushl  0xc(%ebp)
f01029f8:	ff 75 08             	pushl  0x8(%ebp)
f01029fb:	e8 90 fe ff ff       	call   f0102890 <CreateEnv>
f0102a00:	83 c4 10             	add    $0x10,%esp
f0102a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a0a:	75 07                	jne    f0102a13 <commnad_load_env+0x27>
		return 0 ;
f0102a0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a11:	eb 2a                	jmp    f0102a3d <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102a13:	83 ec 0c             	sub    $0xc,%esp
f0102a16:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a19:	e8 49 25 00 00       	call   f0104f67 <sched_new_env>
f0102a1e:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102a24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	50                   	push   %eax
f0102a2b:	68 fe 08 13 f0       	push   $0xf01308fe
f0102a30:	e8 fc e3 ff ff       	call   f0100e31 <cprintf>
f0102a35:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a38:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a3d:	c9                   	leave  
f0102a3e:	c3                   	ret    

f0102a3f <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102a3f:	55                   	push   %ebp
f0102a40:	89 e5                	mov    %esp,%ebp
f0102a42:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102a45:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f0102a4c:	00 00 00 
	sched_run_all();
f0102a4f:	e8 ba 2d 00 00       	call   f010580e <sched_run_all>

	return 0 ;
f0102a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a59:	c9                   	leave  
f0102a5a:	c3                   	ret    

f0102a5b <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102a5b:	55                   	push   %ebp
f0102a5c:	89 e5                	mov    %esp,%ebp
f0102a5e:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102a61:	e8 a6 2b 00 00       	call   f010560c <sched_print_all>

	return 0 ;
f0102a66:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a6b:	c9                   	leave  
f0102a6c:	c3                   	ret    

f0102a6d <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102a6d:	55                   	push   %ebp
f0102a6e:	89 e5                	mov    %esp,%ebp
f0102a70:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102a73:	e8 09 2e 00 00       	call   f0105881 <sched_kill_all>

	return 0 ;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102a85:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102a89:	7f 1a                	jg     f0102aa5 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102a8b:	83 ec 0c             	sub    $0xc,%esp
f0102a8e:	68 14 09 13 f0       	push   $0xf0130914
f0102a93:	e8 99 e3 ff ff       	call   f0100e31 <cprintf>
f0102a98:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa0:	e9 83 00 00 00       	jmp    f0102b28 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa8:	83 c0 04             	add    $0x4,%eax
f0102aab:	8b 00                	mov    (%eax),%eax
f0102aad:	83 ec 04             	sub    $0x4,%esp
f0102ab0:	6a 0a                	push   $0xa
f0102ab2:	6a 00                	push   $0x0
f0102ab4:	50                   	push   %eax
f0102ab5:	e8 34 c3 02 00       	call   f012edee <strtol>
f0102aba:	83 c4 10             	add    $0x10,%esp
f0102abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102ac0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ac4:	75 20                	jne    f0102ae6 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102ac6:	83 ec 0c             	sub    $0xc,%esp
f0102ac9:	ff 75 f4             	pushl  -0xc(%ebp)
f0102acc:	e8 74 a8 00 00       	call   f010d345 <setPageReplacmentAlgorithmLRU>
f0102ad1:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ad4:	83 ec 0c             	sub    $0xc,%esp
f0102ad7:	68 74 09 13 f0       	push   $0xf0130974
f0102adc:	e8 50 e3 ff ff       	call   f0100e31 <cprintf>
f0102ae1:	83 c4 10             	add    $0x10,%esp
f0102ae4:	eb 3d                	jmp    f0102b23 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102ae6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102aea:	75 20                	jne    f0102b0c <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102aec:	83 ec 0c             	sub    $0xc,%esp
f0102aef:	ff 75 f4             	pushl  -0xc(%ebp)
f0102af2:	e8 4e a8 00 00       	call   f010d345 <setPageReplacmentAlgorithmLRU>
f0102af7:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102afa:	83 ec 0c             	sub    $0xc,%esp
f0102afd:	68 b8 09 13 f0       	push   $0xf01309b8
f0102b02:	e8 2a e3 ff ff       	call   f0100e31 <cprintf>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	eb 17                	jmp    f0102b23 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102b0c:	83 ec 0c             	sub    $0xc,%esp
f0102b0f:	68 f8 09 13 f0       	push   $0xf01309f8
f0102b14:	e8 18 e3 ff ff       	call   f0100e31 <cprintf>
f0102b19:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b21:	eb 05                	jmp    f0102b28 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102b23:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b28:	c9                   	leave  
f0102b29:	c3                   	ret    

f0102b2a <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102b2a:	55                   	push   %ebp
f0102b2b:	89 e5                	mov    %esp,%ebp
f0102b2d:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102b30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b33:	83 c0 04             	add    $0x4,%eax
f0102b36:	8b 00                	mov    (%eax),%eax
f0102b38:	83 ec 04             	sub    $0x4,%esp
f0102b3b:	6a 0a                	push   $0xa
f0102b3d:	6a 00                	push   $0x0
f0102b3f:	50                   	push   %eax
f0102b40:	e8 a9 c2 02 00       	call   f012edee <strtol>
f0102b45:	83 c4 10             	add    $0x10,%esp
f0102b48:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102b4b:	83 ec 0c             	sub    $0xc,%esp
f0102b4e:	ff 75 f4             	pushl  -0xc(%ebp)
f0102b51:	e8 62 a8 00 00       	call   f010d3b8 <setPageReplacmentAlgorithmNchanceCLOCK>
f0102b56:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102b59:	83 ec 0c             	sub    $0xc,%esp
f0102b5c:	68 4c 0a 13 f0       	push   $0xf0130a4c
f0102b61:	e8 cb e2 ff ff       	call   f0100e31 <cprintf>
f0102b66:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b69:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b6e:	c9                   	leave  
f0102b6f:	c3                   	ret    

f0102b70 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102b70:	55                   	push   %ebp
f0102b71:	89 e5                	mov    %esp,%ebp
f0102b73:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102b76:	e8 fd a7 00 00       	call   f010d378 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102b7b:	83 ec 0c             	sub    $0xc,%esp
f0102b7e:	68 80 0a 13 f0       	push   $0xf0130a80
f0102b83:	e8 a9 e2 ff ff       	call   f0100e31 <cprintf>
f0102b88:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b90:	c9                   	leave  
f0102b91:	c3                   	ret    

f0102b92 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102b92:	55                   	push   %ebp
f0102b93:	89 e5                	mov    %esp,%ebp
f0102b95:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102b98:	e8 eb a7 00 00       	call   f010d388 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102b9d:	83 ec 0c             	sub    $0xc,%esp
f0102ba0:	68 ac 0a 13 f0       	push   $0xf0130aac
f0102ba5:	e8 87 e2 ff ff       	call   f0100e31 <cprintf>
f0102baa:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb2:	c9                   	leave  
f0102bb3:	c3                   	ret    

f0102bb4 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102bb4:	55                   	push   %ebp
f0102bb5:	89 e5                	mov    %esp,%ebp
f0102bb7:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102bba:	e8 d9 a7 00 00       	call   f010d398 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102bbf:	83 ec 0c             	sub    $0xc,%esp
f0102bc2:	68 d4 0a 13 f0       	push   $0xf0130ad4
f0102bc7:	e8 65 e2 ff ff       	call   f0100e31 <cprintf>
f0102bcc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bd4:	c9                   	leave  
f0102bd5:	c3                   	ret    

f0102bd6 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102bd6:	55                   	push   %ebp
f0102bd7:	89 e5                	mov    %esp,%ebp
f0102bd9:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bdf:	83 c0 04             	add    $0x4,%eax
f0102be2:	8b 00                	mov    (%eax),%eax
f0102be4:	83 ec 04             	sub    $0x4,%esp
f0102be7:	6a 0a                	push   $0xa
f0102be9:	6a 00                	push   $0x0
f0102beb:	50                   	push   %eax
f0102bec:	e8 fd c1 02 00       	call   f012edee <strtol>
f0102bf1:	83 c4 10             	add    $0x10,%esp
f0102bf4:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102bf7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102bfb:	83 ec 0c             	sub    $0xc,%esp
f0102bfe:	50                   	push   %eax
f0102bff:	e8 44 33 00 00       	call   f0105f48 <sched_init_RR>
f0102c04:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102c07:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102c0c:	0f b6 c0             	movzbl %al,%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	50                   	push   %eax
f0102c13:	68 08 0b 13 f0       	push   $0xf0130b08
f0102c18:	e8 14 e2 ff ff       	call   f0100e31 <cprintf>
f0102c1d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102c20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c25:	c9                   	leave  
f0102c26:	c3                   	ret    

f0102c27 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102c27:	55                   	push   %ebp
f0102c28:	89 e5                	mov    %esp,%ebp
f0102c2a:	53                   	push   %ebx
f0102c2b:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 04             	sub    $0x4,%esp
f0102c39:	6a 0a                	push   $0xa
f0102c3b:	6a 00                	push   $0x0
f0102c3d:	50                   	push   %eax
f0102c3e:	e8 ab c1 02 00       	call   f012edee <strtol>
f0102c43:	83 c4 10             	add    $0x10,%esp
f0102c46:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102c49:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102c50:	eb 2e                	jmp    f0102c80 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c55:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c65:	01 d0                	add    %edx,%eax
f0102c67:	8b 00                	mov    (%eax),%eax
f0102c69:	83 ec 04             	sub    $0x4,%esp
f0102c6c:	6a 0a                	push   $0xa
f0102c6e:	6a 00                	push   $0x0
f0102c70:	50                   	push   %eax
f0102c71:	e8 78 c1 02 00       	call   f012edee <strtol>
f0102c76:	83 c4 10             	add    $0x10,%esp
f0102c79:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102c7d:	ff 45 f4             	incl   -0xc(%ebp)
f0102c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c83:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102c86:	7c ca                	jl     f0102c52 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102c88:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102c92:	52                   	push   %edx
f0102c93:	50                   	push   %eax
f0102c94:	e8 05 33 00 00       	call   f0105f9e <sched_init_MLFQ>
f0102c99:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102c9c:	83 ec 0c             	sub    $0xc,%esp
f0102c9f:	68 40 0b 13 f0       	push   $0xf0130b40
f0102ca4:	e8 88 e1 ff ff       	call   f0100e31 <cprintf>
f0102ca9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102cb3:	eb 21                	jmp    f0102cd6 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0102cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102cb8:	05 a8 be 2b f0       	add    $0xf02bbea8,%eax
f0102cbd:	8a 00                	mov    (%eax),%al
f0102cbf:	0f b6 c0             	movzbl %al,%eax
f0102cc2:	83 ec 08             	sub    $0x8,%esp
f0102cc5:	50                   	push   %eax
f0102cc6:	68 6d 0b 13 f0       	push   $0xf0130b6d
f0102ccb:	e8 61 e1 ff ff       	call   f0100e31 <cprintf>
f0102cd0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102cd3:	ff 45 f0             	incl   -0x10(%ebp)
f0102cd6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102cdb:	0f b6 c0             	movzbl %al,%eax
f0102cde:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102ce1:	7f d2                	jg     f0102cb5 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102ce3:	83 ec 0c             	sub    $0xc,%esp
f0102ce6:	68 f1 06 13 f0       	push   $0xf01306f1
f0102ceb:	e8 41 e1 ff ff       	call   f0100e31 <cprintf>
f0102cf0:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102cf3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cf8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102cfb:	c9                   	leave  
f0102cfc:	c3                   	ret    

f0102cfd <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0102cfd:	55                   	push   %ebp
f0102cfe:	89 e5                	mov    %esp,%ebp
f0102d00:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102d03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d06:	83 c0 04             	add    $0x4,%eax
f0102d09:	8b 00                	mov    (%eax),%eax
f0102d0b:	83 ec 04             	sub    $0x4,%esp
f0102d0e:	6a 0a                	push   $0xa
f0102d10:	6a 00                	push   $0x0
f0102d12:	50                   	push   %eax
f0102d13:	e8 d6 c0 02 00       	call   f012edee <strtol>
f0102d18:	83 c4 10             	add    $0x10,%esp
f0102d1b:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f0102d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d21:	83 c0 08             	add    $0x8,%eax
f0102d24:	8b 00                	mov    (%eax),%eax
f0102d26:	83 ec 04             	sub    $0x4,%esp
f0102d29:	6a 0a                	push   $0xa
f0102d2b:	6a 00                	push   $0x0
f0102d2d:	50                   	push   %eax
f0102d2e:	e8 bb c0 02 00       	call   f012edee <strtol>
f0102d33:	83 c4 10             	add    $0x10,%esp
f0102d36:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0102d39:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0102d3d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102d41:	83 ec 08             	sub    $0x8,%esp
f0102d44:	52                   	push   %edx
f0102d45:	50                   	push   %eax
f0102d46:	e8 62 32 00 00       	call   f0105fad <sched_init_BSD>
f0102d4b:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f0102d4e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0102d52:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102d56:	83 ec 04             	sub    $0x4,%esp
f0102d59:	52                   	push   %edx
f0102d5a:	50                   	push   %eax
f0102d5b:	68 74 0b 13 f0       	push   $0xf0130b74
f0102d60:	e8 cc e0 ff ff       	call   f0100e31 <cprintf>
f0102d65:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102d68:	83 ec 0c             	sub    $0xc,%esp
f0102d6b:	68 f1 06 13 f0       	push   $0xf01306f1
f0102d70:	e8 bc e0 ff ff       	call   f0100e31 <cprintf>
f0102d75:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102d78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7d:	c9                   	leave  
f0102d7e:	c3                   	ret    

f0102d7f <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102d7f:	55                   	push   %ebp
f0102d80:	89 e5                	mov    %esp,%ebp
f0102d82:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102d85:	e8 43 30 00 00       	call   f0105dcd <isSchedMethodMLFQ>
f0102d8a:	85 c0                	test   %eax,%eax
f0102d8c:	74 59                	je     f0102de7 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0102d8e:	83 ec 0c             	sub    $0xc,%esp
f0102d91:	68 b0 0b 13 f0       	push   $0xf0130bb0
f0102d96:	e8 96 e0 ff ff       	call   f0100e31 <cprintf>
f0102d9b:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102d9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102da5:	eb 21                	jmp    f0102dc8 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0102da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102daa:	05 a8 be 2b f0       	add    $0xf02bbea8,%eax
f0102daf:	8a 00                	mov    (%eax),%al
f0102db1:	0f b6 c0             	movzbl %al,%eax
f0102db4:	83 ec 08             	sub    $0x8,%esp
f0102db7:	50                   	push   %eax
f0102db8:	68 6d 0b 13 f0       	push   $0xf0130b6d
f0102dbd:	e8 6f e0 ff ff       	call   f0100e31 <cprintf>
f0102dc2:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102dc5:	ff 45 f4             	incl   -0xc(%ebp)
f0102dc8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102dcd:	0f b6 c0             	movzbl %al,%eax
f0102dd0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102dd3:	7f d2                	jg     f0102da7 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102dd5:	83 ec 0c             	sub    $0xc,%esp
f0102dd8:	68 f1 06 13 f0       	push   $0xf01306f1
f0102ddd:	e8 4f e0 ff ff       	call   f0100e31 <cprintf>
f0102de2:	83 c4 10             	add    $0x10,%esp
f0102de5:	eb 61                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f0102de7:	e8 c7 2f 00 00       	call   f0105db3 <isSchedMethodRR>
f0102dec:	85 c0                	test   %eax,%eax
f0102dee:	74 1b                	je     f0102e0b <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102df0:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102df5:	0f b6 c0             	movzbl %al,%eax
f0102df8:	83 ec 08             	sub    $0x8,%esp
f0102dfb:	50                   	push   %eax
f0102dfc:	68 e4 0b 13 f0       	push   $0xf0130be4
f0102e01:	e8 2b e0 ff ff       	call   f0100e31 <cprintf>
f0102e06:	83 c4 10             	add    $0x10,%esp
f0102e09:	eb 3d                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f0102e0b:	e8 d8 2f 00 00       	call   f0105de8 <isSchedMethodBSD>
f0102e10:	85 c0                	test   %eax,%eax
f0102e12:	74 24                	je     f0102e38 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0102e14:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0102e19:	0f b6 d0             	movzbl %al,%edx
f0102e1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0102e21:	0f b6 c0             	movzbl %al,%eax
f0102e24:	83 ec 04             	sub    $0x4,%esp
f0102e27:	52                   	push   %edx
f0102e28:	50                   	push   %eax
f0102e29:	68 74 0b 13 f0       	push   $0xf0130b74
f0102e2e:	e8 fe df ff ff       	call   f0100e31 <cprintf>
f0102e33:	83 c4 10             	add    $0x10,%esp
f0102e36:	eb 10                	jmp    f0102e48 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102e38:	83 ec 0c             	sub    $0xc,%esp
f0102e3b:	68 20 0c 13 f0       	push   $0xf0130c20
f0102e40:	e8 ec df ff ff       	call   f0100e31 <cprintf>
f0102e45:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e4d:	c9                   	leave  
f0102e4e:	c3                   	ret    

f0102e4f <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102e4f:	55                   	push   %ebp
f0102e50:	89 e5                	mov    %esp,%ebp
f0102e52:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102e55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e58:	83 c0 04             	add    $0x4,%eax
f0102e5b:	8b 00                	mov    (%eax),%eax
f0102e5d:	83 ec 04             	sub    $0x4,%esp
f0102e60:	6a 0a                	push   $0xa
f0102e62:	6a 00                	push   $0x0
f0102e64:	50                   	push   %eax
f0102e65:	e8 84 bf 02 00       	call   f012edee <strtol>
f0102e6a:	83 c4 10             	add    $0x10,%esp
f0102e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e73:	0f b6 c0             	movzbl %al,%eax
f0102e76:	83 ec 0c             	sub    $0xc,%esp
f0102e79:	50                   	push   %eax
f0102e7a:	e8 ac ae 02 00       	call   f012dd2b <chksch>
f0102e7f:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102e82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102e86:	75 12                	jne    f0102e9a <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0102e88:	83 ec 0c             	sub    $0xc,%esp
f0102e8b:	68 48 0c 13 f0       	push   $0xf0130c48
f0102e90:	e8 9c df ff ff       	call   f0100e31 <cprintf>
f0102e95:	83 c4 10             	add    $0x10,%esp
f0102e98:	eb 16                	jmp    f0102eb0 <command_sch_test+0x61>
	else if (status == 1)
f0102e9a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e9e:	75 10                	jne    f0102eb0 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 70 0c 13 f0       	push   $0xf0130c70
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102eb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb5:	c9                   	leave  
f0102eb6:	c3                   	ret    

f0102eb7 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0102eb7:	55                   	push   %ebp
f0102eb8:	89 e5                	mov    %esp,%ebp
f0102eba:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102ebd:	e8 24 a5 00 00       	call   f010d3e6 <isPageReplacmentAlgorithmCLOCK>
f0102ec2:	85 c0                	test   %eax,%eax
f0102ec4:	74 15                	je     f0102edb <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 94 0c 13 f0       	push   $0xf0130c94
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	e9 8c 00 00 00       	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102edb:	83 ec 0c             	sub    $0xc,%esp
f0102ede:	6a 01                	push   $0x1
f0102ee0:	e8 eb a4 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f0102ee5:	83 c4 10             	add    $0x10,%esp
f0102ee8:	85 c0                	test   %eax,%eax
f0102eea:	74 12                	je     f0102efe <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102eec:	83 ec 0c             	sub    $0xc,%esp
f0102eef:	68 bc 0c 13 f0       	push   $0xf0130cbc
f0102ef4:	e8 38 df ff ff       	call   f0100e31 <cprintf>
f0102ef9:	83 c4 10             	add    $0x10,%esp
f0102efc:	eb 69                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102efe:	83 ec 0c             	sub    $0xc,%esp
f0102f01:	6a 02                	push   $0x2
f0102f03:	e8 c8 a4 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f0102f08:	83 c4 10             	add    $0x10,%esp
f0102f0b:	85 c0                	test   %eax,%eax
f0102f0d:	74 12                	je     f0102f21 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102f0f:	83 ec 0c             	sub    $0xc,%esp
f0102f12:	68 fc 0c 13 f0       	push   $0xf0130cfc
f0102f17:	e8 15 df ff ff       	call   f0100e31 <cprintf>
f0102f1c:	83 c4 10             	add    $0x10,%esp
f0102f1f:	eb 46                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102f21:	e8 db a4 00 00       	call   f010d401 <isPageReplacmentAlgorithmFIFO>
f0102f26:	85 c0                	test   %eax,%eax
f0102f28:	74 12                	je     f0102f3c <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0102f2a:	83 ec 0c             	sub    $0xc,%esp
f0102f2d:	68 38 0d 13 f0       	push   $0xf0130d38
f0102f32:	e8 fa de ff ff       	call   f0100e31 <cprintf>
f0102f37:	83 c4 10             	add    $0x10,%esp
f0102f3a:	eb 2b                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102f3c:	e8 db a4 00 00       	call   f010d41c <isPageReplacmentAlgorithmModifiedCLOCK>
f0102f41:	85 c0                	test   %eax,%eax
f0102f43:	74 12                	je     f0102f57 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102f45:	83 ec 0c             	sub    $0xc,%esp
f0102f48:	68 5c 0d 13 f0       	push   $0xf0130d5c
f0102f4d:	e8 df de ff ff       	call   f0100e31 <cprintf>
f0102f52:	83 c4 10             	add    $0x10,%esp
f0102f55:	eb 10                	jmp    f0102f67 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102f57:	83 ec 0c             	sub    $0xc,%esp
f0102f5a:	68 8c 0d 13 f0       	push   $0xf0130d8c
f0102f5f:	e8 cd de ff ff       	call   f0100e31 <cprintf>
f0102f64:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102f67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f6c:	c9                   	leave  
f0102f6d:	c3                   	ret    

f0102f6e <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102f6e:	55                   	push   %ebp
f0102f6f:	89 e5                	mov    %esp,%ebp
f0102f71:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102f74:	e8 f4 ef ff ff       	call   f0101f6d <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102f79:	83 ec 0c             	sub    $0xc,%esp
f0102f7c:	68 b8 0d 13 f0       	push   $0xf0130db8
f0102f81:	e8 ab de ff ff       	call   f0100e31 <cprintf>
f0102f86:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f89:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f8e:	c9                   	leave  
f0102f8f:	c3                   	ret    

f0102f90 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102f90:	55                   	push   %ebp
f0102f91:	89 e5                	mov    %esp,%ebp
f0102f93:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102f96:	e8 e2 ef ff ff       	call   f0101f7d <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102f9b:	83 ec 0c             	sub    $0xc,%esp
f0102f9e:	68 e8 0d 13 f0       	push   $0xf0130de8
f0102fa3:	e8 89 de ff ff       	call   f0100e31 <cprintf>
f0102fa8:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fb0:	c9                   	leave  
f0102fb1:	c3                   	ret    

f0102fb2 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102fb2:	55                   	push   %ebp
f0102fb3:	89 e5                	mov    %esp,%ebp
f0102fb5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102fb8:	e8 d0 ef ff ff       	call   f0101f8d <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102fbd:	83 ec 0c             	sub    $0xc,%esp
f0102fc0:	68 18 0e 13 f0       	push   $0xf0130e18
f0102fc5:	e8 67 de ff ff       	call   f0100e31 <cprintf>
f0102fca:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fd2:	c9                   	leave  
f0102fd3:	c3                   	ret    

f0102fd4 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102fd4:	55                   	push   %ebp
f0102fd5:	89 e5                	mov    %esp,%ebp
f0102fd7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102fda:	e8 be ef ff ff       	call   f0101f9d <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102fdf:	83 ec 0c             	sub    $0xc,%esp
f0102fe2:	68 48 0e 13 f0       	push   $0xf0130e48
f0102fe7:	e8 45 de ff ff       	call   f0100e31 <cprintf>
f0102fec:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff4:	c9                   	leave  
f0102ff5:	c3                   	ret    

f0102ff6 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102ff6:	55                   	push   %ebp
f0102ff7:	89 e5                	mov    %esp,%ebp
f0102ff9:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102ffc:	e8 ac ef ff ff       	call   f0101fad <isUHeapPlacementStrategyFIRSTFIT>
f0103001:	84 c0                	test   %al,%al
f0103003:	74 12                	je     f0103017 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103005:	83 ec 0c             	sub    $0xc,%esp
f0103008:	68 78 0e 13 f0       	push   $0xf0130e78
f010300d:	e8 1f de ff ff       	call   f0100e31 <cprintf>
f0103012:	83 c4 10             	add    $0x10,%esp
f0103015:	eb 61                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0103017:	e8 a6 ef ff ff       	call   f0101fc2 <isUHeapPlacementStrategyBESTFIT>
f010301c:	84 c0                	test   %al,%al
f010301e:	74 12                	je     f0103032 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0103020:	83 ec 0c             	sub    $0xc,%esp
f0103023:	68 a4 0e 13 f0       	push   $0xf0130ea4
f0103028:	e8 04 de ff ff       	call   f0100e31 <cprintf>
f010302d:	83 c4 10             	add    $0x10,%esp
f0103030:	eb 46                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0103032:	e8 a0 ef ff ff       	call   f0101fd7 <isUHeapPlacementStrategyNEXTFIT>
f0103037:	84 c0                	test   %al,%al
f0103039:	74 12                	je     f010304d <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010303b:	83 ec 0c             	sub    $0xc,%esp
f010303e:	68 d0 0e 13 f0       	push   $0xf0130ed0
f0103043:	e8 e9 dd ff ff       	call   f0100e31 <cprintf>
f0103048:	83 c4 10             	add    $0x10,%esp
f010304b:	eb 2b                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010304d:	e8 9a ef ff ff       	call   f0101fec <isUHeapPlacementStrategyWORSTFIT>
f0103052:	84 c0                	test   %al,%al
f0103054:	74 12                	je     f0103068 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103056:	83 ec 0c             	sub    $0xc,%esp
f0103059:	68 fc 0e 13 f0       	push   $0xf0130efc
f010305e:	e8 ce dd ff ff       	call   f0100e31 <cprintf>
f0103063:	83 c4 10             	add    $0x10,%esp
f0103066:	eb 10                	jmp    f0103078 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 28 0f 13 f0       	push   $0xf0130f28
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010307d:	c9                   	leave  
f010307e:	c3                   	ret    

f010307f <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010307f:	55                   	push   %ebp
f0103080:	89 e5                	mov    %esp,%ebp
f0103082:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103085:	e8 2b ee ff ff       	call   f0101eb5 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010308a:	83 ec 0c             	sub    $0xc,%esp
f010308d:	68 54 0f 13 f0       	push   $0xf0130f54
f0103092:	e8 9a dd ff ff       	call   f0100e31 <cprintf>
f0103097:	83 c4 10             	add    $0x10,%esp
	return 0;
f010309a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010309f:	c9                   	leave  
f01030a0:	c3                   	ret    

f01030a1 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01030a1:	55                   	push   %ebp
f01030a2:	89 e5                	mov    %esp,%ebp
f01030a4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01030a7:	e8 19 ee ff ff       	call   f0101ec5 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01030ac:	83 ec 0c             	sub    $0xc,%esp
f01030af:	68 54 0f 13 f0       	push   $0xf0130f54
f01030b4:	e8 78 dd ff ff       	call   f0100e31 <cprintf>
f01030b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c1:	c9                   	leave  
f01030c2:	c3                   	ret    

f01030c3 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01030c3:	55                   	push   %ebp
f01030c4:	89 e5                	mov    %esp,%ebp
f01030c6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01030c9:	e8 07 ee ff ff       	call   f0101ed5 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01030ce:	83 ec 0c             	sub    $0xc,%esp
f01030d1:	68 88 0f 13 f0       	push   $0xf0130f88
f01030d6:	e8 56 dd ff ff       	call   f0100e31 <cprintf>
f01030db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030e3:	c9                   	leave  
f01030e4:	c3                   	ret    

f01030e5 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01030e5:	55                   	push   %ebp
f01030e6:	89 e5                	mov    %esp,%ebp
f01030e8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01030eb:	e8 f5 ed ff ff       	call   f0101ee5 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01030f0:	83 ec 0c             	sub    $0xc,%esp
f01030f3:	68 b8 0f 13 f0       	push   $0xf0130fb8
f01030f8:	e8 34 dd ff ff       	call   f0100e31 <cprintf>
f01030fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103100:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103105:	c9                   	leave  
f0103106:	c3                   	ret    

f0103107 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103107:	55                   	push   %ebp
f0103108:	89 e5                	mov    %esp,%ebp
f010310a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010310d:	e8 e3 ed ff ff       	call   f0101ef5 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103112:	83 ec 0c             	sub    $0xc,%esp
f0103115:	68 e8 0f 13 f0       	push   $0xf0130fe8
f010311a:	e8 12 dd ff ff       	call   f0100e31 <cprintf>
f010311f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103122:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103127:	c9                   	leave  
f0103128:	c3                   	ret    

f0103129 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0103129:	55                   	push   %ebp
f010312a:	89 e5                	mov    %esp,%ebp
f010312c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010312f:	e8 d1 ed ff ff       	call   f0101f05 <isKHeapPlacementStrategyCONTALLOC>
f0103134:	84 c0                	test   %al,%al
f0103136:	74 12                	je     f010314a <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103138:	83 ec 0c             	sub    $0xc,%esp
f010313b:	68 1c 10 13 f0       	push   $0xf013101c
f0103140:	e8 ec dc ff ff       	call   f0100e31 <cprintf>
f0103145:	83 c4 10             	add    $0x10,%esp
f0103148:	eb 7c                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010314a:	e8 ca ed ff ff       	call   f0101f19 <isKHeapPlacementStrategyFIRSTFIT>
f010314f:	84 c0                	test   %al,%al
f0103151:	74 12                	je     f0103165 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0103153:	83 ec 0c             	sub    $0xc,%esp
f0103156:	68 58 10 13 f0       	push   $0xf0131058
f010315b:	e8 d1 dc ff ff       	call   f0100e31 <cprintf>
f0103160:	83 c4 10             	add    $0x10,%esp
f0103163:	eb 61                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103165:	e8 c4 ed ff ff       	call   f0101f2e <isKHeapPlacementStrategyBESTFIT>
f010316a:	84 c0                	test   %al,%al
f010316c:	74 12                	je     f0103180 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010316e:	83 ec 0c             	sub    $0xc,%esp
f0103171:	68 88 10 13 f0       	push   $0xf0131088
f0103176:	e8 b6 dc ff ff       	call   f0100e31 <cprintf>
f010317b:	83 c4 10             	add    $0x10,%esp
f010317e:	eb 46                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103180:	e8 be ed ff ff       	call   f0101f43 <isKHeapPlacementStrategyNEXTFIT>
f0103185:	84 c0                	test   %al,%al
f0103187:	74 12                	je     f010319b <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103189:	83 ec 0c             	sub    $0xc,%esp
f010318c:	68 b4 10 13 f0       	push   $0xf01310b4
f0103191:	e8 9b dc ff ff       	call   f0100e31 <cprintf>
f0103196:	83 c4 10             	add    $0x10,%esp
f0103199:	eb 2b                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010319b:	e8 b8 ed ff ff       	call   f0101f58 <isKHeapPlacementStrategyWORSTFIT>
f01031a0:	84 c0                	test   %al,%al
f01031a2:	74 12                	je     f01031b6 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01031a4:	83 ec 0c             	sub    $0xc,%esp
f01031a7:	68 e0 10 13 f0       	push   $0xf01310e0
f01031ac:	e8 80 dc ff ff       	call   f0100e31 <cprintf>
f01031b1:	83 c4 10             	add    $0x10,%esp
f01031b4:	eb 10                	jmp    f01031c6 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01031b6:	83 ec 0c             	sub    $0xc,%esp
f01031b9:	68 10 11 13 f0       	push   $0xf0131110
f01031be:	e8 6e dc ff ff       	call   f0100e31 <cprintf>
f01031c3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01031c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031cb:	c9                   	leave  
f01031cc:	c3                   	ret    

f01031cd <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01031cd:	55                   	push   %ebp
f01031ce:	89 e5                	mov    %esp,%ebp
f01031d0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01031d3:	e8 bb a2 00 00       	call   f010d493 <isBufferingEnabled>
f01031d8:	84 c0                	test   %al,%al
f01031da:	75 12                	jne    f01031ee <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 40 11 13 f0       	push   $0xf0131140
f01031e4:	e8 48 dc ff ff       	call   f0100e31 <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
f01031ec:	eb 1d                	jmp    f010320b <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01031ee:	83 ec 0c             	sub    $0xc,%esp
f01031f1:	6a 00                	push   $0x0
f01031f3:	e8 75 a2 00 00       	call   f010d46d <enableModifiedBuffer>
f01031f8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01031fb:	83 ec 0c             	sub    $0xc,%esp
f01031fe:	68 7c 11 13 f0       	push   $0xf013117c
f0103203:	e8 29 dc ff ff       	call   f0100e31 <cprintf>
f0103208:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010320b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103210:	c9                   	leave  
f0103211:	c3                   	ret    

f0103212 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103212:	55                   	push   %ebp
f0103213:	89 e5                	mov    %esp,%ebp
f0103215:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103218:	e8 76 a2 00 00       	call   f010d493 <isBufferingEnabled>
f010321d:	84 c0                	test   %al,%al
f010321f:	75 12                	jne    f0103233 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0103221:	83 ec 0c             	sub    $0xc,%esp
f0103224:	68 40 11 13 f0       	push   $0xf0131140
f0103229:	e8 03 dc ff ff       	call   f0100e31 <cprintf>
f010322e:	83 c4 10             	add    $0x10,%esp
f0103231:	eb 1d                	jmp    f0103250 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0103233:	83 ec 0c             	sub    $0xc,%esp
f0103236:	6a 01                	push   $0x1
f0103238:	e8 30 a2 00 00       	call   f010d46d <enableModifiedBuffer>
f010323d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0103240:	83 ec 0c             	sub    $0xc,%esp
f0103243:	68 a0 11 13 f0       	push   $0xf01311a0
f0103248:	e8 e4 db ff ff       	call   f0100e31 <cprintf>
f010324d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0103250:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103255:	c9                   	leave  
f0103256:	c3                   	ret    

f0103257 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103257:	55                   	push   %ebp
f0103258:	89 e5                	mov    %esp,%ebp
f010325a:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010325d:	83 ec 0c             	sub    $0xc,%esp
f0103260:	6a 00                	push   $0x0
f0103262:	e8 1e a2 00 00       	call   f010d485 <enableBuffering>
f0103267:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010326a:	83 ec 0c             	sub    $0xc,%esp
f010326d:	6a 00                	push   $0x0
f010326f:	e8 f9 a1 00 00       	call   f010d46d <enableModifiedBuffer>
f0103274:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103277:	83 ec 0c             	sub    $0xc,%esp
f010327a:	68 c0 11 13 f0       	push   $0xf01311c0
f010327f:	e8 ad db ff ff       	call   f0100e31 <cprintf>
f0103284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010328c:	c9                   	leave  
f010328d:	c3                   	ret    

f010328e <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010328e:	55                   	push   %ebp
f010328f:	89 e5                	mov    %esp,%ebp
f0103291:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103294:	83 ec 0c             	sub    $0xc,%esp
f0103297:	6a 01                	push   $0x1
f0103299:	e8 e7 a1 00 00       	call   f010d485 <enableBuffering>
f010329e:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01032a1:	83 ec 0c             	sub    $0xc,%esp
f01032a4:	6a 01                	push   $0x1
f01032a6:	e8 c2 a1 00 00       	call   f010d46d <enableModifiedBuffer>
f01032ab:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01032ae:	e8 f8 a1 00 00       	call   f010d4ab <getModifiedBufferLength>
f01032b3:	85 c0                	test   %eax,%eax
f01032b5:	75 59                	jne    f0103310 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01032b7:	83 ec 0c             	sub    $0xc,%esp
f01032ba:	68 dc 11 13 f0       	push   $0xf01311dc
f01032bf:	e8 6d db ff ff       	call   f0100e31 <cprintf>
f01032c4:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01032c7:	83 ec 08             	sub    $0x8,%esp
f01032ca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01032cd:	50                   	push   %eax
f01032ce:	68 0c 12 13 f0       	push   $0xf013120c
f01032d3:	e8 b0 b5 02 00       	call   f012e888 <readline>
f01032d8:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01032db:	83 ec 04             	sub    $0x4,%esp
f01032de:	6a 0a                	push   $0xa
f01032e0:	6a 00                	push   $0x0
f01032e2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01032e5:	50                   	push   %eax
f01032e6:	e8 03 bb 02 00       	call   f012edee <strtol>
f01032eb:	83 c4 10             	add    $0x10,%esp
f01032ee:	83 ec 0c             	sub    $0xc,%esp
f01032f1:	50                   	push   %eax
f01032f2:	e8 a6 a1 00 00       	call   f010d49d <setModifiedBufferLength>
f01032f7:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01032fa:	e8 ac a1 00 00       	call   f010d4ab <getModifiedBufferLength>
f01032ff:	83 ec 08             	sub    $0x8,%esp
f0103302:	50                   	push   %eax
f0103303:	68 38 12 13 f0       	push   $0xf0131238
f0103308:	e8 24 db ff ff       	call   f0100e31 <cprintf>
f010330d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103310:	83 ec 0c             	sub    $0xc,%esp
f0103313:	68 5d 12 13 f0       	push   $0xf013125d
f0103318:	e8 14 db ff ff       	call   f0100e31 <cprintf>
f010331d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103320:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103325:	c9                   	leave  
f0103326:	c3                   	ret    

f0103327 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103327:	55                   	push   %ebp
f0103328:	89 e5                	mov    %esp,%ebp
f010332a:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010332d:	e8 61 a1 00 00       	call   f010d493 <isBufferingEnabled>
f0103332:	84 c0                	test   %al,%al
f0103334:	75 12                	jne    f0103348 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103336:	83 ec 0c             	sub    $0xc,%esp
f0103339:	68 78 12 13 f0       	push   $0xf0131278
f010333e:	e8 ee da ff ff       	call   f0100e31 <cprintf>
f0103343:	83 c4 10             	add    $0x10,%esp
f0103346:	eb 19                	jmp    f0103361 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103348:	e8 2e a1 00 00       	call   f010d47b <isModifiedBufferEnabled>
f010334d:	84 c0                	test   %al,%al
f010334f:	75 10                	jne    f0103361 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103351:	83 ec 0c             	sub    $0xc,%esp
f0103354:	68 c8 12 13 f0       	push   $0xf01312c8
f0103359:	e8 d3 da ff ff       	call   f0100e31 <cprintf>
f010335e:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0103361:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103364:	83 c0 04             	add    $0x4,%eax
f0103367:	8b 00                	mov    (%eax),%eax
f0103369:	83 ec 04             	sub    $0x4,%esp
f010336c:	6a 0a                	push   $0xa
f010336e:	6a 00                	push   $0x0
f0103370:	50                   	push   %eax
f0103371:	e8 78 ba 02 00       	call   f012edee <strtol>
f0103376:	83 c4 10             	add    $0x10,%esp
f0103379:	83 ec 0c             	sub    $0xc,%esp
f010337c:	50                   	push   %eax
f010337d:	e8 1b a1 00 00       	call   f010d49d <setModifiedBufferLength>
f0103382:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103385:	e8 21 a1 00 00       	call   f010d4ab <getModifiedBufferLength>
f010338a:	83 ec 08             	sub    $0x8,%esp
f010338d:	50                   	push   %eax
f010338e:	68 38 12 13 f0       	push   $0xf0131238
f0103393:	e8 99 da ff ff       	call   f0100e31 <cprintf>
f0103398:	83 c4 10             	add    $0x10,%esp
	return 0;
f010339b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033a0:	c9                   	leave  
f01033a1:	c3                   	ret    

f01033a2 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01033a2:	55                   	push   %ebp
f01033a3:	89 e5                	mov    %esp,%ebp
f01033a5:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01033a8:	e8 e6 a0 00 00       	call   f010d493 <isBufferingEnabled>
f01033ad:	84 c0                	test   %al,%al
f01033af:	75 12                	jne    f01033c3 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01033b1:	83 ec 0c             	sub    $0xc,%esp
f01033b4:	68 78 12 13 f0       	push   $0xf0131278
f01033b9:	e8 73 da ff ff       	call   f0100e31 <cprintf>
f01033be:	83 c4 10             	add    $0x10,%esp
f01033c1:	eb 19                	jmp    f01033dc <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01033c3:	e8 b3 a0 00 00       	call   f010d47b <isModifiedBufferEnabled>
f01033c8:	84 c0                	test   %al,%al
f01033ca:	75 10                	jne    f01033dc <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01033cc:	83 ec 0c             	sub    $0xc,%esp
f01033cf:	68 c8 12 13 f0       	push   $0xf01312c8
f01033d4:	e8 58 da ff ff       	call   f0100e31 <cprintf>
f01033d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01033dc:	e8 ca a0 00 00       	call   f010d4ab <getModifiedBufferLength>
f01033e1:	83 ec 08             	sub    $0x8,%esp
f01033e4:	50                   	push   %eax
f01033e5:	68 0e 13 13 f0       	push   $0xf013130e
f01033ea:	e8 42 da ff ff       	call   f0100e31 <cprintf>
f01033ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033f7:	c9                   	leave  
f01033f8:	c3                   	ret    

f01033f9 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01033f9:	55                   	push   %ebp
f01033fa:	89 e5                	mov    %esp,%ebp
f01033fc:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01033ff:	83 ec 08             	sub    $0x8,%esp
f0103402:	ff 75 0c             	pushl  0xc(%ebp)
f0103405:	ff 75 08             	pushl  0x8(%ebp)
f0103408:	e8 e4 a4 00 00       	call   f010d8f1 <tst_handler>
f010340d:	83 c4 10             	add    $0x10,%esp
}
f0103410:	c9                   	leave  
f0103411:	c3                   	ret    

f0103412 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103412:	55                   	push   %ebp
f0103413:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103415:	8b 45 08             	mov    0x8(%ebp),%eax
f0103418:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f010341e:	29 d0                	sub    %edx,%eax
f0103420:	c1 f8 02             	sar    $0x2,%eax
f0103423:	89 c2                	mov    %eax,%edx
f0103425:	89 d0                	mov    %edx,%eax
f0103427:	c1 e0 03             	shl    $0x3,%eax
f010342a:	01 d0                	add    %edx,%eax
f010342c:	c1 e0 03             	shl    $0x3,%eax
f010342f:	01 d0                	add    %edx,%eax
f0103431:	c1 e0 03             	shl    $0x3,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 d0                	add    %edx,%eax
f010343b:	89 c1                	mov    %eax,%ecx
f010343d:	c1 e1 0f             	shl    $0xf,%ecx
f0103440:	01 c8                	add    %ecx,%eax
f0103442:	c1 e0 03             	shl    $0x3,%eax
f0103445:	01 d0                	add    %edx,%eax
f0103447:	f7 d8                	neg    %eax
}
f0103449:	5d                   	pop    %ebp
f010344a:	c3                   	ret    

f010344b <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010344e:	ff 75 08             	pushl  0x8(%ebp)
f0103451:	e8 bc ff ff ff       	call   f0103412 <to_frame_number>
f0103456:	83 c4 04             	add    $0x4,%esp
f0103459:	c1 e0 0c             	shl    $0xc,%eax
}
f010345c:	c9                   	leave  
f010345d:	c3                   	ret    

f010345e <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010345e:	55                   	push   %ebp
f010345f:	89 e5                	mov    %esp,%ebp
f0103461:	53                   	push   %ebx
f0103462:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103465:	8b 45 08             	mov    0x8(%ebp),%eax
f0103468:	c1 e8 0c             	shr    $0xc,%eax
f010346b:	89 c2                	mov    %eax,%edx
f010346d:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103472:	39 c2                	cmp    %eax,%edx
f0103474:	72 14                	jb     f010348a <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103476:	83 ec 04             	sub    $0x4,%esp
f0103479:	68 2c 13 13 f0       	push   $0xf013132c
f010347e:	6a 55                	push   $0x55
f0103480:	68 54 13 13 f0       	push   $0xf0131354
f0103485:	e8 26 cd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f010348a:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0103490:	8b 45 08             	mov    0x8(%ebp),%eax
f0103493:	c1 e8 0c             	shr    $0xc,%eax
f0103496:	89 c2                	mov    %eax,%edx
f0103498:	89 d0                	mov    %edx,%eax
f010349a:	01 c0                	add    %eax,%eax
f010349c:	01 d0                	add    %edx,%eax
f010349e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01034a5:	01 d8                	add    %ebx,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	01 c8                	add    %ecx,%eax
}
f01034ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034ae:	c9                   	leave  
f01034af:	c3                   	ret    

f01034b0 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01034b0:	55                   	push   %ebp
f01034b1:	89 e5                	mov    %esp,%ebp
f01034b3:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01034b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b9:	05 00 14 00 00       	add    $0x1400,%eax
f01034be:	c1 e0 03             	shl    $0x3,%eax
f01034c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01034c4:	83 ec 04             	sub    $0x4,%esp
f01034c7:	6a 08                	push   $0x8
f01034c9:	ff 75 0c             	pushl  0xc(%ebp)
f01034cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01034cf:	e8 2a bd 02 00       	call   f012f1fe <ide_read>
f01034d4:	83 c4 10             	add    $0x10,%esp
f01034d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01034da:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01034dd:	c9                   	leave  
f01034de:	c3                   	ret    

f01034df <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01034df:	55                   	push   %ebp
f01034e0:	89 e5                	mov    %esp,%ebp
f01034e2:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01034e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01034e8:	05 00 14 00 00       	add    $0x1400,%eax
f01034ed:	c1 e0 03             	shl    $0x3,%eax
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01034f3:	83 ec 04             	sub    $0x4,%esp
f01034f6:	6a 08                	push   $0x8
f01034f8:	ff 75 0c             	pushl  0xc(%ebp)
f01034fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01034fe:	e8 3b be 02 00       	call   f012f33e <ide_write>
f0103503:	83 c4 10             	add    $0x10,%esp
f0103506:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103509:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010350d:	74 14                	je     f0103523 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010350f:	83 ec 04             	sub    $0x4,%esp
f0103512:	68 76 13 13 f0       	push   $0xf0131376
f0103517:	6a 2e                	push   $0x2e
f0103519:	68 8d 13 13 f0       	push   $0xf013138d
f010351e:	e8 8d cc ff ff       	call   f01001b0 <_panic>
	return success;
f0103523:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103526:	c9                   	leave  
f0103527:	c3                   	ret    

f0103528 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103528:	55                   	push   %ebp
f0103529:	89 e5                	mov    %esp,%ebp
f010352b:	56                   	push   %esi
f010352c:	53                   	push   %ebx
f010352d:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103530:	c7 05 44 a3 2d f0 00 	movl   $0x0,0xf02da344
f0103537:	00 00 00 
f010353a:	c7 05 48 a3 2d f0 00 	movl   $0x0,0xf02da348
f0103541:	00 00 00 
f0103544:	c7 05 50 a3 2d f0 00 	movl   $0x0,0xf02da350
f010354b:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010354e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103555:	e9 20 01 00 00       	jmp    f010367a <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010355a:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f0103560:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103563:	89 d0                	mov    %edx,%eax
f0103565:	01 c0                	add    %eax,%eax
f0103567:	01 d0                	add    %edx,%eax
f0103569:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103570:	01 d8                	add    %ebx,%eax
f0103572:	01 d0                	add    %edx,%eax
f0103574:	01 c8                	add    %ecx,%eax
f0103576:	83 ec 0c             	sub    $0xc,%esp
f0103579:	50                   	push   %eax
f010357a:	e8 bf 39 00 00       	call   f0106f3e <initialize_frame_info>
f010357f:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103582:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f0103588:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010358b:	89 d0                	mov    %edx,%eax
f010358d:	01 c0                	add    %eax,%eax
f010358f:	01 d0                	add    %edx,%eax
f0103591:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103598:	01 d8                	add    %ebx,%eax
f010359a:	01 d0                	add    %edx,%eax
f010359c:	01 c8                	add    %ecx,%eax
f010359e:	85 c0                	test   %eax,%eax
f01035a0:	75 14                	jne    f01035b6 <initialize_disk_page_file+0x8e>
f01035a2:	83 ec 04             	sub    $0x4,%esp
f01035a5:	68 ac 13 13 f0       	push   $0xf01313ac
f01035aa:	6a 59                	push   $0x59
f01035ac:	68 8d 13 13 f0       	push   $0xf013138d
f01035b1:	e8 fa cb ff ff       	call   f01001b0 <_panic>
f01035b6:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01035bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01035bf:	89 d0                	mov    %edx,%eax
f01035c1:	01 c0                	add    %eax,%eax
f01035c3:	01 d0                	add    %edx,%eax
f01035c5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01035cc:	01 d8                	add    %ebx,%eax
f01035ce:	01 d0                	add    %edx,%eax
f01035d0:	01 c8                	add    %ecx,%eax
f01035d2:	8b 15 44 a3 2d f0    	mov    0xf02da344,%edx
f01035d8:	89 10                	mov    %edx,(%eax)
f01035da:	8b 00                	mov    (%eax),%eax
f01035dc:	85 c0                	test   %eax,%eax
f01035de:	74 27                	je     f0103607 <initialize_disk_page_file+0xdf>
f01035e0:	8b 0d 44 a3 2d f0    	mov    0xf02da344,%ecx
f01035e6:	8b 1d 10 3b 25 f0    	mov    0xf0253b10,%ebx
f01035ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01035ef:	89 d0                	mov    %edx,%eax
f01035f1:	01 c0                	add    %eax,%eax
f01035f3:	01 d0                	add    %edx,%eax
f01035f5:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01035fc:	01 f0                	add    %esi,%eax
f01035fe:	01 d0                	add    %edx,%eax
f0103600:	01 d8                	add    %ebx,%eax
f0103602:	89 41 04             	mov    %eax,0x4(%ecx)
f0103605:	eb 21                	jmp    f0103628 <initialize_disk_page_file+0x100>
f0103607:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010360d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103610:	89 d0                	mov    %edx,%eax
f0103612:	01 c0                	add    %eax,%eax
f0103614:	01 d0                	add    %edx,%eax
f0103616:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010361d:	01 d8                	add    %ebx,%eax
f010361f:	01 d0                	add    %edx,%eax
f0103621:	01 c8                	add    %ecx,%eax
f0103623:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103628:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010362e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103631:	89 d0                	mov    %edx,%eax
f0103633:	01 c0                	add    %eax,%eax
f0103635:	01 d0                	add    %edx,%eax
f0103637:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010363e:	01 d8                	add    %ebx,%eax
f0103640:	01 d0                	add    %edx,%eax
f0103642:	01 c8                	add    %ecx,%eax
f0103644:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103649:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010364f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103652:	89 d0                	mov    %edx,%eax
f0103654:	01 c0                	add    %eax,%eax
f0103656:	01 d0                	add    %edx,%eax
f0103658:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010365f:	01 d8                	add    %ebx,%eax
f0103661:	01 d0                	add    %edx,%eax
f0103663:	01 c8                	add    %ecx,%eax
f0103665:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010366c:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f0103671:	40                   	inc    %eax
f0103672:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103677:	ff 45 f4             	incl   -0xc(%ebp)
f010367a:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103681:	0f 8e d3 fe ff ff    	jle    f010355a <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103687:	90                   	nop
f0103688:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010368b:	5b                   	pop    %ebx
f010368c:	5e                   	pop    %esi
f010368d:	5d                   	pop    %ebp
f010368e:	c3                   	ret    

f010368f <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010368f:	55                   	push   %ebp
f0103690:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103692:	8b 45 08             	mov    0x8(%ebp),%eax
f0103695:	8b 15 10 3b 25 f0    	mov    0xf0253b10,%edx
f010369b:	29 d0                	sub    %edx,%eax
f010369d:	c1 f8 02             	sar    $0x2,%eax
f01036a0:	89 c2                	mov    %eax,%edx
f01036a2:	89 d0                	mov    %edx,%eax
f01036a4:	c1 e0 03             	shl    $0x3,%eax
f01036a7:	01 d0                	add    %edx,%eax
f01036a9:	c1 e0 03             	shl    $0x3,%eax
f01036ac:	01 d0                	add    %edx,%eax
f01036ae:	c1 e0 03             	shl    $0x3,%eax
f01036b1:	01 d0                	add    %edx,%eax
f01036b3:	c1 e0 03             	shl    $0x3,%eax
f01036b6:	01 d0                	add    %edx,%eax
f01036b8:	89 c1                	mov    %eax,%ecx
f01036ba:	c1 e1 0f             	shl    $0xf,%ecx
f01036bd:	01 c8                	add    %ecx,%eax
f01036bf:	c1 e0 03             	shl    $0x3,%eax
f01036c2:	01 d0                	add    %edx,%eax
f01036c4:	f7 d8                	neg    %eax
}
f01036c6:	5d                   	pop    %ebp
f01036c7:	c3                   	ret    

f01036c8 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f01036c8:	55                   	push   %ebp
f01036c9:	89 e5                	mov    %esp,%ebp
f01036cb:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f01036ce:	a1 44 a3 2d f0       	mov    0xf02da344,%eax
f01036d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01036d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01036da:	75 0a                	jne    f01036e6 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01036dc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036e1:	e9 a7 00 00 00       	jmp    f010378d <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01036e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01036ea:	75 14                	jne    f0103700 <allocate_disk_frame+0x38>
f01036ec:	83 ec 04             	sub    $0x4,%esp
f01036ef:	68 cf 13 13 f0       	push   $0xf01313cf
f01036f4:	6a 78                	push   $0x78
f01036f6:	68 8d 13 13 f0       	push   $0xf013138d
f01036fb:	e8 b0 ca ff ff       	call   f01001b0 <_panic>
f0103700:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103703:	8b 00                	mov    (%eax),%eax
f0103705:	85 c0                	test   %eax,%eax
f0103707:	74 10                	je     f0103719 <allocate_disk_frame+0x51>
f0103709:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010370c:	8b 00                	mov    (%eax),%eax
f010370e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103711:	8b 52 04             	mov    0x4(%edx),%edx
f0103714:	89 50 04             	mov    %edx,0x4(%eax)
f0103717:	eb 0b                	jmp    f0103724 <allocate_disk_frame+0x5c>
f0103719:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010371c:	8b 40 04             	mov    0x4(%eax),%eax
f010371f:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103724:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103727:	8b 40 04             	mov    0x4(%eax),%eax
f010372a:	85 c0                	test   %eax,%eax
f010372c:	74 0f                	je     f010373d <allocate_disk_frame+0x75>
f010372e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103731:	8b 40 04             	mov    0x4(%eax),%eax
f0103734:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103737:	8b 12                	mov    (%edx),%edx
f0103739:	89 10                	mov    %edx,(%eax)
f010373b:	eb 0a                	jmp    f0103747 <allocate_disk_frame+0x7f>
f010373d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103740:	8b 00                	mov    (%eax),%eax
f0103742:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010374a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103753:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010375a:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f010375f:	48                   	dec    %eax
f0103760:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
	initialize_frame_info(ptr_frame_info);
f0103765:	83 ec 0c             	sub    $0xc,%esp
f0103768:	ff 75 f4             	pushl  -0xc(%ebp)
f010376b:	e8 ce 37 00 00       	call   f0106f3e <initialize_frame_info>
f0103770:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	ff 75 f4             	pushl  -0xc(%ebp)
f0103779:	e8 11 ff ff ff       	call   f010368f <to_disk_frame_number>
f010377e:	83 c4 10             	add    $0x10,%esp
f0103781:	89 c2                	mov    %eax,%edx
f0103783:	8b 45 08             	mov    0x8(%ebp),%eax
f0103786:	89 10                	mov    %edx,(%eax)
	return 0;
f0103788:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010378d:	c9                   	leave  
f010378e:	c3                   	ret    

f010378f <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010378f:	55                   	push   %ebp
f0103790:	89 e5                	mov    %esp,%ebp
f0103792:	56                   	push   %esi
f0103793:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103794:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103798:	0f 84 fa 00 00 00    	je     f0103898 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010379e:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01037a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01037a7:	89 d0                	mov    %edx,%eax
f01037a9:	01 c0                	add    %eax,%eax
f01037ab:	01 d0                	add    %edx,%eax
f01037ad:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01037b4:	01 d8                	add    %ebx,%eax
f01037b6:	01 d0                	add    %edx,%eax
f01037b8:	01 c8                	add    %ecx,%eax
f01037ba:	85 c0                	test   %eax,%eax
f01037bc:	75 17                	jne    f01037d5 <free_disk_frame+0x46>
f01037be:	83 ec 04             	sub    $0x4,%esp
f01037c1:	68 ac 13 13 f0       	push   $0xf01313ac
f01037c6:	68 85 00 00 00       	push   $0x85
f01037cb:	68 8d 13 13 f0       	push   $0xf013138d
f01037d0:	e8 db c9 ff ff       	call   f01001b0 <_panic>
f01037d5:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f01037db:	8b 55 08             	mov    0x8(%ebp),%edx
f01037de:	89 d0                	mov    %edx,%eax
f01037e0:	01 c0                	add    %eax,%eax
f01037e2:	01 d0                	add    %edx,%eax
f01037e4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01037eb:	01 d8                	add    %ebx,%eax
f01037ed:	01 d0                	add    %edx,%eax
f01037ef:	01 c8                	add    %ecx,%eax
f01037f1:	8b 15 44 a3 2d f0    	mov    0xf02da344,%edx
f01037f7:	89 10                	mov    %edx,(%eax)
f01037f9:	8b 00                	mov    (%eax),%eax
f01037fb:	85 c0                	test   %eax,%eax
f01037fd:	74 27                	je     f0103826 <free_disk_frame+0x97>
f01037ff:	8b 0d 44 a3 2d f0    	mov    0xf02da344,%ecx
f0103805:	8b 1d 10 3b 25 f0    	mov    0xf0253b10,%ebx
f010380b:	8b 55 08             	mov    0x8(%ebp),%edx
f010380e:	89 d0                	mov    %edx,%eax
f0103810:	01 c0                	add    %eax,%eax
f0103812:	01 d0                	add    %edx,%eax
f0103814:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010381b:	01 f0                	add    %esi,%eax
f010381d:	01 d0                	add    %edx,%eax
f010381f:	01 d8                	add    %ebx,%eax
f0103821:	89 41 04             	mov    %eax,0x4(%ecx)
f0103824:	eb 21                	jmp    f0103847 <free_disk_frame+0xb8>
f0103826:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010382c:	8b 55 08             	mov    0x8(%ebp),%edx
f010382f:	89 d0                	mov    %edx,%eax
f0103831:	01 c0                	add    %eax,%eax
f0103833:	01 d0                	add    %edx,%eax
f0103835:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010383c:	01 d8                	add    %ebx,%eax
f010383e:	01 d0                	add    %edx,%eax
f0103840:	01 c8                	add    %ecx,%eax
f0103842:	a3 48 a3 2d f0       	mov    %eax,0xf02da348
f0103847:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010384d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103850:	89 d0                	mov    %edx,%eax
f0103852:	01 c0                	add    %eax,%eax
f0103854:	01 d0                	add    %edx,%eax
f0103856:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010385d:	01 d8                	add    %ebx,%eax
f010385f:	01 d0                	add    %edx,%eax
f0103861:	01 c8                	add    %ecx,%eax
f0103863:	a3 44 a3 2d f0       	mov    %eax,0xf02da344
f0103868:	8b 0d 10 3b 25 f0    	mov    0xf0253b10,%ecx
f010386e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103871:	89 d0                	mov    %edx,%eax
f0103873:	01 c0                	add    %eax,%eax
f0103875:	01 d0                	add    %edx,%eax
f0103877:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010387e:	01 d8                	add    %ebx,%eax
f0103880:	01 d0                	add    %edx,%eax
f0103882:	01 c8                	add    %ecx,%eax
f0103884:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010388b:	a1 50 a3 2d f0       	mov    0xf02da350,%eax
f0103890:	40                   	inc    %eax
f0103891:	a3 50 a3 2d f0       	mov    %eax,0xf02da350
f0103896:	eb 01                	jmp    f0103899 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103898:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103899:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010389c:	5b                   	pop    %ebx
f010389d:	5e                   	pop    %esi
f010389e:	5d                   	pop    %ebp
f010389f:	c3                   	ret    

f01038a0 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01038a0:	55                   	push   %ebp
f01038a1:	89 e5                	mov    %esp,%ebp
f01038a3:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01038a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038a9:	c1 e8 16             	shr    $0x16,%eax
f01038ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01038b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b6:	01 d0                	add    %edx,%eax
f01038b8:	8b 00                	mov    (%eax),%eax
f01038ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01038bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01038c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01038c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01038c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038cb:	c1 e8 0c             	shr    $0xc,%eax
f01038ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01038d1:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01038d6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01038d9:	72 17                	jb     f01038f2 <get_disk_page_table+0x52>
f01038db:	ff 75 f0             	pushl  -0x10(%ebp)
f01038de:	68 f0 13 13 f0       	push   $0xf01313f0
f01038e3:	68 92 00 00 00       	push   $0x92
f01038e8:	68 8d 13 13 f0       	push   $0xf013138d
f01038ed:	e8 be c8 ff ff       	call   f01001b0 <_panic>
f01038f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038f5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01038fa:	89 c2                	mov    %eax,%edx
f01038fc:	8b 45 14             	mov    0x14(%ebp),%eax
f01038ff:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103901:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103905:	0f 85 b7 00 00 00    	jne    f01039c2 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010390b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010390f:	0f 84 9d 00 00 00    	je     f01039b2 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103915:	83 ec 0c             	sub    $0xc,%esp
f0103918:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010391b:	50                   	push   %eax
f010391c:	e8 38 36 00 00       	call   f0106f59 <allocate_frame>
f0103921:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103924:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103927:	83 ec 0c             	sub    $0xc,%esp
f010392a:	50                   	push   %eax
f010392b:	e8 1b fb ff ff       	call   f010344b <to_physical_address>
f0103930:	83 c4 10             	add    $0x10,%esp
f0103933:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103936:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103939:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010393c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010393f:	c1 e8 0c             	shr    $0xc,%eax
f0103942:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103945:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010394a:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010394d:	72 17                	jb     f0103966 <get_disk_page_table+0xc6>
f010394f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103952:	68 f0 13 13 f0       	push   $0xf01313f0
f0103957:	68 ae 00 00 00       	push   $0xae
f010395c:	68 8d 13 13 f0       	push   $0xf013138d
f0103961:	e8 4a c8 ff ff       	call   f01001b0 <_panic>
f0103966:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103969:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010396e:	89 c2                	mov    %eax,%edx
f0103970:	8b 45 14             	mov    0x14(%ebp),%eax
f0103973:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103975:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103978:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f010397e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103981:	c1 e8 16             	shr    $0x16,%eax
f0103984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	01 d0                	add    %edx,%eax
f0103990:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103993:	83 ca 01             	or     $0x1,%edx
f0103996:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103998:	8b 45 14             	mov    0x14(%ebp),%eax
f010399b:	8b 00                	mov    (%eax),%eax
f010399d:	83 ec 04             	sub    $0x4,%esp
f01039a0:	68 00 10 00 00       	push   $0x1000
f01039a5:	6a 00                	push   $0x0
f01039a7:	50                   	push   %eax
f01039a8:	e8 cf b2 02 00       	call   f012ec7c <memset>
f01039ad:	83 c4 10             	add    $0x10,%esp
f01039b0:	eb 10                	jmp    f01039c2 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01039b2:	8b 45 14             	mov    0x14(%ebp),%eax
f01039b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01039bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01039c0:	eb 05                	jmp    f01039c7 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01039c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039c7:	c9                   	leave  
f01039c8:	c3                   	ret    

f01039c9 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01039c9:	55                   	push   %ebp
f01039ca:	89 e5                	mov    %esp,%ebp
f01039cc:	83 ec 28             	sub    $0x28,%esp
f01039cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01039d2:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01039d5:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01039d9:	74 75                	je     f0103a50 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01039db:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01039e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039e5:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01039ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01039ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01039f5:	f7 75 f4             	divl   -0xc(%ebp)
f01039f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fb:	29 d0                	sub    %edx,%eax
f01039fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103a00:	73 32                	jae    f0103a34 <pf_add_empty_env_page+0x6b>
f0103a02:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a05:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103a0b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103a10:	29 d0                	sub    %edx,%eax
f0103a12:	c1 e0 0c             	shl    $0xc,%eax
f0103a15:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103a1a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103a1d:	76 15                	jbe    f0103a34 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103a1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a22:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103a28:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2e:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103a34:	a1 dc be 2b f0       	mov    0xf02bbedc,%eax
f0103a39:	83 ec 04             	sub    $0x4,%esp
f0103a3c:	50                   	push   %eax
f0103a3d:	ff 75 0c             	pushl  0xc(%ebp)
f0103a40:	ff 75 08             	pushl  0x8(%ebp)
f0103a43:	e8 b7 00 00 00       	call   f0103aff <pf_add_env_page>
f0103a48:	83 c4 10             	add    $0x10,%esp
f0103a4b:	e9 ad 00 00 00       	jmp    f0103afd <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103a50:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103a57:	76 19                	jbe    f0103a72 <pf_add_empty_env_page+0xa9>
f0103a59:	68 20 14 13 f0       	push   $0xf0131420
f0103a5e:	68 46 14 13 f0       	push   $0xf0131446
f0103a63:	68 d1 00 00 00       	push   $0xd1
f0103a68:	68 8d 13 13 f0       	push   $0xf013138d
f0103a6d:	e8 3e c7 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103a72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a75:	05 a8 00 00 00       	add    $0xa8,%eax
f0103a7a:	83 ec 08             	sub    $0x8,%esp
f0103a7d:	50                   	push   %eax
f0103a7e:	ff 75 08             	pushl  0x8(%ebp)
f0103a81:	e8 86 06 00 00       	call   f010410c <get_disk_page_directory>
f0103a86:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103a92:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103a95:	52                   	push   %edx
f0103a96:	6a 01                	push   $0x1
f0103a98:	ff 75 0c             	pushl  0xc(%ebp)
f0103a9b:	50                   	push   %eax
f0103a9c:	e8 ff fd ff ff       	call   f01038a0 <get_disk_page_table>
f0103aa1:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103aa7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aaa:	c1 ea 0c             	shr    $0xc,%edx
f0103aad:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ab3:	c1 e2 02             	shl    $0x2,%edx
f0103ab6:	01 d0                	add    %edx,%eax
f0103ab8:	8b 00                	mov    (%eax),%eax
f0103aba:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103abd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ac0:	85 c0                	test   %eax,%eax
f0103ac2:	75 34                	jne    f0103af8 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ac4:	83 ec 0c             	sub    $0xc,%esp
f0103ac7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103aca:	50                   	push   %eax
f0103acb:	e8 f8 fb ff ff       	call   f01036c8 <allocate_disk_frame>
f0103ad0:	83 c4 10             	add    $0x10,%esp
f0103ad3:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ad6:	75 07                	jne    f0103adf <pf_add_empty_env_page+0x116>
f0103ad8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103add:	eb 1e                	jmp    f0103afd <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103adf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ae2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ae5:	c1 ea 0c             	shr    $0xc,%edx
f0103ae8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aee:	c1 e2 02             	shl    $0x2,%edx
f0103af1:	01 c2                	add    %eax,%edx
f0103af3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103af6:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103af8:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103afd:	c9                   	leave  
f0103afe:	c3                   	ret    

f0103aff <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103aff:	55                   	push   %ebp
f0103b00:	89 e5                	mov    %esp,%ebp
f0103b02:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103b05:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103b0c:	76 19                	jbe    f0103b27 <pf_add_env_page+0x28>
f0103b0e:	68 20 14 13 f0       	push   $0xf0131420
f0103b13:	68 46 14 13 f0       	push   $0xf0131446
f0103b18:	68 e6 00 00 00       	push   $0xe6
f0103b1d:	68 8d 13 13 f0       	push   $0xf013138d
f0103b22:	e8 89 c6 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103b27:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2a:	05 a8 00 00 00       	add    $0xa8,%eax
f0103b2f:	83 ec 08             	sub    $0x8,%esp
f0103b32:	50                   	push   %eax
f0103b33:	ff 75 08             	pushl  0x8(%ebp)
f0103b36:	e8 d1 05 00 00       	call   f010410c <get_disk_page_directory>
f0103b3b:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b41:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103b47:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b4a:	52                   	push   %edx
f0103b4b:	6a 01                	push   $0x1
f0103b4d:	ff 75 0c             	pushl  0xc(%ebp)
f0103b50:	50                   	push   %eax
f0103b51:	e8 4a fd ff ff       	call   f01038a0 <get_disk_page_table>
f0103b56:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b5f:	c1 ea 0c             	shr    $0xc,%edx
f0103b62:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b68:	c1 e2 02             	shl    $0x2,%edx
f0103b6b:	01 d0                	add    %edx,%eax
f0103b6d:	8b 00                	mov    (%eax),%eax
f0103b6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103b72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103b75:	85 c0                	test   %eax,%eax
f0103b77:	75 34                	jne    f0103bad <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103b79:	83 ec 0c             	sub    $0xc,%esp
f0103b7c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103b7f:	50                   	push   %eax
f0103b80:	e8 43 fb ff ff       	call   f01036c8 <allocate_disk_frame>
f0103b85:	83 c4 10             	add    $0x10,%esp
f0103b88:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103b8b:	75 07                	jne    f0103b94 <pf_add_env_page+0x95>
f0103b8d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103b92:	eb 31                	jmp    f0103bc5 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103b94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b9a:	c1 ea 0c             	shr    $0xc,%edx
f0103b9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ba3:	c1 e2 02             	shl    $0x2,%edx
f0103ba6:	01 c2                	add    %eax,%edx
f0103ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103bab:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103bad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103bb0:	83 ec 08             	sub    $0x8,%esp
f0103bb3:	ff 75 10             	pushl  0x10(%ebp)
f0103bb6:	50                   	push   %eax
f0103bb7:	e8 23 f9 ff ff       	call   f01034df <write_disk_page>
f0103bbc:	83 c4 10             	add    $0x10,%esp
f0103bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103bc5:	c9                   	leave  
f0103bc6:	c3                   	ret    

f0103bc7 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103bc7:	55                   	push   %ebp
f0103bc8:	89 e5                	mov    %esp,%ebp
f0103bca:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103bcd:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103bd4:	76 19                	jbe    f0103bef <pf_update_env_page+0x28>
f0103bd6:	68 20 14 13 f0       	push   $0xf0131420
f0103bdb:	68 46 14 13 f0       	push   $0xf0131446
f0103be0:	68 08 01 00 00       	push   $0x108
f0103be5:	68 8d 13 13 f0       	push   $0xf013138d
f0103bea:	e8 c1 c5 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	05 a8 00 00 00       	add    $0xa8,%eax
f0103bf7:	83 ec 08             	sub    $0x8,%esp
f0103bfa:	50                   	push   %eax
f0103bfb:	ff 75 08             	pushl  0x8(%ebp)
f0103bfe:	e8 09 05 00 00       	call   f010410c <get_disk_page_directory>
f0103c03:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103c06:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c09:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103c0f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103c12:	52                   	push   %edx
f0103c13:	6a 00                	push   $0x0
f0103c15:	ff 75 0c             	pushl  0xc(%ebp)
f0103c18:	50                   	push   %eax
f0103c19:	e8 82 fc ff ff       	call   f01038a0 <get_disk_page_table>
f0103c1e:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103c21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c24:	85 c0                	test   %eax,%eax
f0103c26:	74 29                	je     f0103c51 <pf_update_env_page+0x8a>
f0103c28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c2b:	85 c0                	test   %eax,%eax
f0103c2d:	0f 84 46 01 00 00    	je     f0103d79 <pf_update_env_page+0x1b2>
f0103c33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103c36:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103c39:	c1 ea 0c             	shr    $0xc,%edx
f0103c3c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103c42:	c1 e2 02             	shl    $0x2,%edx
f0103c45:	01 d0                	add    %edx,%eax
f0103c47:	8b 00                	mov    (%eax),%eax
f0103c49:	85 c0                	test   %eax,%eax
f0103c4b:	0f 85 28 01 00 00    	jne    f0103d79 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f0103c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c5a:	85 c0                	test   %eax,%eax
f0103c5c:	79 09                	jns    f0103c67 <pf_update_env_page+0xa0>
f0103c5e:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103c65:	76 38                	jbe    f0103c9f <pf_update_env_page+0xd8>
f0103c67:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103c6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c71:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0103c81:	f7 75 f0             	divl   -0x10(%ebp)
f0103c84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c87:	29 d0                	sub    %edx,%eax
f0103c89:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103c8c:	0f 87 d0 00 00 00    	ja     f0103d62 <pf_update_env_page+0x19b>
f0103c92:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103c99:	0f 87 c3 00 00 00    	ja     f0103d62 <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f0103c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0103ca8:	83 ec 04             	sub    $0x4,%esp
f0103cab:	8d 55 d0             	lea    -0x30(%ebp),%edx
f0103cae:	52                   	push   %edx
f0103caf:	ff 75 0c             	pushl  0xc(%ebp)
f0103cb2:	50                   	push   %eax
f0103cb3:	e8 fb 36 00 00       	call   f01073b3 <get_frame_info>
f0103cb8:	83 c4 10             	add    $0x10,%esp
f0103cbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f0103cbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103cc1:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103cc4:	75 52                	jne    f0103d18 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc9:	83 ec 04             	sub    $0x4,%esp
f0103ccc:	50                   	push   %eax
f0103ccd:	ff 75 f4             	pushl  -0xc(%ebp)
f0103cd0:	ff 75 08             	pushl  0x8(%ebp)
f0103cd3:	e8 27 fe ff ff       	call   f0103aff <pf_add_env_page>
f0103cd8:	83 c4 10             	add    $0x10,%esp
f0103cdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103cde:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103ce2:	75 17                	jne    f0103cfb <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103ce4:	83 ec 04             	sub    $0x4,%esp
f0103ce7:	68 5c 14 13 f0       	push   $0xf013145c
f0103cec:	68 1d 01 00 00       	push   $0x11d
f0103cf1:	68 8d 13 13 f0       	push   $0xf013138d
f0103cf6:	e8 b5 c4 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103cfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cfe:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103d04:	8d 50 01             	lea    0x1(%eax),%edx
f0103d07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d0a:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f0103d10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d13:	e9 02 01 00 00       	jmp    f0103e1a <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103d18:	83 ec 04             	sub    $0x4,%esp
f0103d1b:	6a 00                	push   $0x0
f0103d1d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103d20:	ff 75 08             	pushl  0x8(%ebp)
f0103d23:	e8 a1 fc ff ff       	call   f01039c9 <pf_add_empty_env_page>
f0103d28:	83 c4 10             	add    $0x10,%esp
f0103d2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103d2e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103d32:	75 17                	jne    f0103d4b <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103d34:	83 ec 04             	sub    $0x4,%esp
f0103d37:	68 88 14 13 f0       	push   $0xf0131488
f0103d3c:	68 28 01 00 00       	push   $0x128
f0103d41:	68 8d 13 13 f0       	push   $0xf013138d
f0103d46:	e8 65 c4 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d4e:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103d54:	8d 50 01             	lea    0x1(%eax),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103d60:	eb 17                	jmp    f0103d79 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103d62:	83 ec 04             	sub    $0x4,%esp
f0103d65:	68 d4 14 13 f0       	push   $0xf01314d4
f0103d6a:	68 2f 01 00 00       	push   $0x12f
f0103d6f:	68 8d 13 13 f0       	push   $0xf013138d
f0103d74:	e8 37 c4 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103d79:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103d82:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103d85:	52                   	push   %edx
f0103d86:	6a 00                	push   $0x0
f0103d88:	ff 75 0c             	pushl  0xc(%ebp)
f0103d8b:	50                   	push   %eax
f0103d8c:	e8 0f fb ff ff       	call   f01038a0 <get_disk_page_table>
f0103d91:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103d94:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103d97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d9a:	c1 ea 0c             	shr    $0xc,%edx
f0103d9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103da3:	c1 e2 02             	shl    $0x2,%edx
f0103da6:	01 d0                	add    %edx,%eax
f0103da8:	8b 00                	mov    (%eax),%eax
f0103daa:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0103dad:	83 ec 0c             	sub    $0xc,%esp
f0103db0:	ff 75 10             	pushl  0x10(%ebp)
f0103db3:	e8 93 f6 ff ff       	call   f010344b <to_physical_address>
f0103db8:	83 c4 10             	add    $0x10,%esp
f0103dbb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103dbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103dc1:	c1 e8 0c             	shr    $0xc,%eax
f0103dc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0103dc7:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103dcc:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f0103dcf:	72 17                	jb     f0103de8 <pf_update_env_page+0x221>
f0103dd1:	ff 75 dc             	pushl  -0x24(%ebp)
f0103dd4:	68 f0 13 13 f0       	push   $0xf01313f0
f0103dd9:	68 47 01 00 00       	push   $0x147
f0103dde:	68 8d 13 13 f0       	push   $0xf013138d
f0103de3:	e8 c8 c3 ff ff       	call   f01001b0 <_panic>
f0103de8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103deb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103df0:	83 ec 08             	sub    $0x8,%esp
f0103df3:	50                   	push   %eax
f0103df4:	ff 75 e0             	pushl  -0x20(%ebp)
f0103df7:	e8 e3 f6 ff ff       	call   f01034df <write_disk_page>
f0103dfc:	83 c4 10             	add    $0x10,%esp
f0103dff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e05:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f0103e0b:	8d 50 01             	lea    0x1(%eax),%edx
f0103e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e11:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f0103e17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103e1a:	c9                   	leave  
f0103e1b:	c3                   	ret    

f0103e1c <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103e1c:	55                   	push   %ebp
f0103e1d:	89 e5                	mov    %esp,%ebp
f0103e1f:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e30:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e33:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e36:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e3c:	85 c0                	test   %eax,%eax
f0103e3e:	75 0a                	jne    f0103e4a <pf_read_env_page+0x2e>
f0103e40:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e45:	e9 96 00 00 00       	jmp    f0103ee0 <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103e4a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e50:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e56:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103e59:	51                   	push   %ecx
f0103e5a:	6a 00                	push   $0x0
f0103e5c:	52                   	push   %edx
f0103e5d:	50                   	push   %eax
f0103e5e:	e8 3d fa ff ff       	call   f01038a0 <get_disk_page_table>
f0103e63:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e69:	85 c0                	test   %eax,%eax
f0103e6b:	75 07                	jne    f0103e74 <pf_read_env_page+0x58>
f0103e6d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e72:	eb 6c                	jmp    f0103ee0 <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e77:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e7a:	c1 ea 0c             	shr    $0xc,%edx
f0103e7d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 d0                	add    %edx,%eax
f0103e88:	8b 00                	mov    (%eax),%eax
f0103e8a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103e8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103e91:	75 07                	jne    f0103e9a <pf_read_env_page+0x7e>
f0103e93:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103e98:	eb 46                	jmp    f0103ee0 <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103e9a:	83 ec 08             	sub    $0x8,%esp
f0103e9d:	ff 75 0c             	pushl  0xc(%ebp)
f0103ea0:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ea3:	e8 08 f6 ff ff       	call   f01034b0 <read_disk_page>
f0103ea8:	83 c4 10             	add    $0x10,%esp
f0103eab:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0103eba:	6a 40                	push   $0x40
f0103ebc:	6a 00                	push   $0x0
f0103ebe:	52                   	push   %edx
f0103ebf:	50                   	push   %eax
f0103ec0:	e8 8e 3d 00 00       	call   f0107c53 <pt_set_page_permissions>
f0103ec5:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103ec8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecb:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f0103ed1:	8d 50 01             	lea    0x1(%eax),%edx
f0103ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ed7:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f0103edd:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103ee0:	c9                   	leave  
f0103ee1:	c3                   	ret    

f0103ee2 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103ee2:	55                   	push   %ebp
f0103ee3:	89 e5                	mov    %esp,%ebp
f0103ee5:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103ee8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eeb:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103ef1:	85 c0                	test   %eax,%eax
f0103ef3:	74 65                	je     f0103f5a <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef8:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103efe:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f01:	52                   	push   %edx
f0103f02:	6a 00                	push   $0x0
f0103f04:	ff 75 0c             	pushl  0xc(%ebp)
f0103f07:	50                   	push   %eax
f0103f08:	e8 93 f9 ff ff       	call   f01038a0 <get_disk_page_table>
f0103f0d:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103f10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f13:	85 c0                	test   %eax,%eax
f0103f15:	74 46                	je     f0103f5d <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f1d:	c1 ea 0c             	shr    $0xc,%edx
f0103f20:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f26:	c1 e2 02             	shl    $0x2,%edx
f0103f29:	01 d0                	add    %edx,%eax
f0103f2b:	8b 00                	mov    (%eax),%eax
f0103f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f36:	c1 ea 0c             	shr    $0xc,%edx
f0103f39:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f3f:	c1 e2 02             	shl    $0x2,%edx
f0103f42:	01 d0                	add    %edx,%eax
f0103f44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f4a:	83 ec 0c             	sub    $0xc,%esp
f0103f4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f50:	e8 3a f8 ff ff       	call   f010378f <free_disk_frame>
f0103f55:	83 c4 10             	add    $0x10,%esp
f0103f58:	eb 04                	jmp    f0103f5e <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103f5a:	90                   	nop
f0103f5b:	eb 01                	jmp    f0103f5e <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103f5d:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f5e:	c9                   	leave  
f0103f5f:	c3                   	ret    

f0103f60 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103f60:	55                   	push   %ebp
f0103f61:	89 e5                	mov    %esp,%ebp
f0103f63:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f6d:	e9 f7 00 00 00       	jmp    f0104069 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f75:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f7e:	c1 e2 02             	shl    $0x2,%edx
f0103f81:	01 d0                	add    %edx,%eax
f0103f83:	8b 00                	mov    (%eax),%eax
f0103f85:	83 e0 01             	and    $0x1,%eax
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	0f 84 d5 00 00 00    	je     f0104065 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f93:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f9c:	c1 e2 02             	shl    $0x2,%edx
f0103f9f:	01 d0                	add    %edx,%eax
f0103fa1:	8b 00                	mov    (%eax),%eax
f0103fa3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103fa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103fab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fae:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103fb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103fb4:	c1 e8 0c             	shr    $0xc,%eax
f0103fb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103fba:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0103fbf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103fc2:	72 17                	jb     f0103fdb <pf_free_env+0x7b>
f0103fc4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103fc7:	68 f0 13 13 f0       	push   $0xf01313f0
f0103fcc:	68 a7 01 00 00       	push   $0x1a7
f0103fd1:	68 8d 13 13 f0       	push   $0xf013138d
f0103fd6:	e8 d5 c1 ff ff       	call   f01001b0 <_panic>
f0103fdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103fde:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fe3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103fe6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103fed:	eb 3a                	jmp    f0104029 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103fef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ff2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ff9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103ffc:	01 d0                	add    %edx,%eax
f0103ffe:	8b 00                	mov    (%eax),%eax
f0104000:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f0104003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104006:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010400d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104010:	01 d0                	add    %edx,%eax
f0104012:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0104018:	83 ec 0c             	sub    $0xc,%esp
f010401b:	ff 75 dc             	pushl  -0x24(%ebp)
f010401e:	e8 6c f7 ff ff       	call   f010378f <free_disk_frame>
f0104023:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104026:	ff 45 f0             	incl   -0x10(%ebp)
f0104029:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0104030:	76 bd                	jbe    f0103fef <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0104032:	8b 45 08             	mov    0x8(%ebp),%eax
f0104035:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010403b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010403e:	c1 e2 02             	shl    $0x2,%edx
f0104041:	01 d0                	add    %edx,%eax
f0104043:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104049:	83 ec 0c             	sub    $0xc,%esp
f010404c:	ff 75 ec             	pushl  -0x14(%ebp)
f010404f:	e8 0a f4 ff ff       	call   f010345e <to_frame_info>
f0104054:	83 c4 10             	add    $0x10,%esp
f0104057:	83 ec 0c             	sub    $0xc,%esp
f010405a:	50                   	push   %eax
f010405b:	e8 8b 30 00 00       	call   f01070eb <decrement_references>
f0104060:	83 c4 10             	add    $0x10,%esp
f0104063:	eb 01                	jmp    f0104066 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104065:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104066:	ff 45 f4             	incl   -0xc(%ebp)
f0104069:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104070:	0f 86 fc fe ff ff    	jbe    f0103f72 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104076:	8b 45 08             	mov    0x8(%ebp),%eax
f0104079:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010407f:	83 ec 0c             	sub    $0xc,%esp
f0104082:	50                   	push   %eax
f0104083:	e8 d6 f3 ff ff       	call   f010345e <to_frame_info>
f0104088:	83 c4 10             	add    $0x10,%esp
f010408b:	83 ec 0c             	sub    $0xc,%esp
f010408e:	50                   	push   %eax
f010408f:	e8 57 30 00 00       	call   f01070eb <decrement_references>
f0104094:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104097:	8b 45 08             	mov    0x8(%ebp),%eax
f010409a:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f01040a1:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f01040a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01040a7:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f01040ae:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f01040b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01040b4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01040ba:	85 c0                	test   %eax,%eax
f01040bc:	74 4b                	je     f0104109 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f01040be:	83 ec 0c             	sub    $0xc,%esp
f01040c1:	ff 75 08             	pushl  0x8(%ebp)
f01040c4:	e8 17 04 00 00       	call   f01044e0 <__pf_remove_env_all_tables>
f01040c9:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f01040cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01040cf:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01040d5:	83 ec 0c             	sub    $0xc,%esp
f01040d8:	50                   	push   %eax
f01040d9:	e8 80 f3 ff ff       	call   f010345e <to_frame_info>
f01040de:	83 c4 10             	add    $0x10,%esp
f01040e1:	83 ec 0c             	sub    $0xc,%esp
f01040e4:	50                   	push   %eax
f01040e5:	e8 01 30 00 00       	call   f01070eb <decrement_references>
f01040ea:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01040ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01040f0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01040f7:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01040fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fd:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0104104:	00 00 00 
f0104107:	eb 01                	jmp    f010410a <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0104109:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010410a:	c9                   	leave  
f010410b:	c3                   	ret    

f010410c <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010410c:	55                   	push   %ebp
f010410d:	89 e5                	mov    %esp,%ebp
f010410f:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0104112:	8b 45 08             	mov    0x8(%ebp),%eax
f0104115:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f010411b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010411e:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0104120:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104123:	8b 00                	mov    (%eax),%eax
f0104125:	85 c0                	test   %eax,%eax
f0104127:	0f 85 ad 00 00 00    	jne    f01041da <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f010412d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104134:	83 ec 0c             	sub    $0xc,%esp
f0104137:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010413a:	50                   	push   %eax
f010413b:	e8 19 2e 00 00       	call   f0106f59 <allocate_frame>
f0104140:	83 c4 10             	add    $0x10,%esp
f0104143:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010414a:	79 08                	jns    f0104154 <get_disk_page_directory+0x48>
				return r;
f010414c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010414f:	e9 8b 00 00 00       	jmp    f01041df <get_disk_page_directory+0xd3>
			p->references = 1;
f0104154:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104157:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010415d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104160:	83 ec 0c             	sub    $0xc,%esp
f0104163:	50                   	push   %eax
f0104164:	e8 e2 f2 ff ff       	call   f010344b <to_physical_address>
f0104169:	83 c4 10             	add    $0x10,%esp
f010416c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010416f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104172:	c1 e8 0c             	shr    $0xc,%eax
f0104175:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104178:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010417d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104180:	72 17                	jb     f0104199 <get_disk_page_directory+0x8d>
f0104182:	ff 75 f0             	pushl  -0x10(%ebp)
f0104185:	68 f0 13 13 f0       	push   $0xf01313f0
f010418a:	68 ff 01 00 00       	push   $0x1ff
f010418f:	68 8d 13 13 f0       	push   $0xf013138d
f0104194:	e8 17 c0 ff ff       	call   f01001b0 <_panic>
f0104199:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010419c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041a1:	89 c2                	mov    %eax,%edx
f01041a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041a6:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f01041a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01041ab:	83 ec 0c             	sub    $0xc,%esp
f01041ae:	50                   	push   %eax
f01041af:	e8 97 f2 ff ff       	call   f010344b <to_physical_address>
f01041b4:	83 c4 10             	add    $0x10,%esp
f01041b7:	89 c2                	mov    %eax,%edx
f01041b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041bc:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f01041c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041c5:	8b 00                	mov    (%eax),%eax
f01041c7:	83 ec 04             	sub    $0x4,%esp
f01041ca:	68 00 10 00 00       	push   $0x1000
f01041cf:	6a 00                	push   $0x0
f01041d1:	50                   	push   %eax
f01041d2:	e8 a5 aa 02 00       	call   f012ec7c <memset>
f01041d7:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01041da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01041df:	c9                   	leave  
f01041e0:	c3                   	ret    

f01041e1 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01041e1:	55                   	push   %ebp
f01041e2:	89 e5                	mov    %esp,%ebp
f01041e4:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01041e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01041ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01041f5:	e9 ac 00 00 00       	jmp    f01042a6 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01041fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01041fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104203:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104206:	c1 e2 02             	shl    $0x2,%edx
f0104209:	01 d0                	add    %edx,%eax
f010420b:	8b 00                	mov    (%eax),%eax
f010420d:	83 e0 01             	and    $0x1,%eax
f0104210:	85 c0                	test   %eax,%eax
f0104212:	0f 84 8a 00 00 00    	je     f01042a2 <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0104218:	8b 45 08             	mov    0x8(%ebp),%eax
f010421b:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104224:	c1 e2 02             	shl    $0x2,%edx
f0104227:	01 d0                	add    %edx,%eax
f0104229:	8b 00                	mov    (%eax),%eax
f010422b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104230:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104236:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104239:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010423c:	c1 e8 0c             	shr    $0xc,%eax
f010423f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104242:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0104247:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010424a:	72 17                	jb     f0104263 <pf_calculate_allocated_pages+0x82>
f010424c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010424f:	68 f0 13 13 f0       	push   $0xf01313f0
f0104254:	68 1f 02 00 00       	push   $0x21f
f0104259:	68 8d 13 13 f0       	push   $0xf013138d
f010425e:	e8 4d bf ff ff       	call   f01001b0 <_panic>
f0104263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104266:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010426b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010426e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104275:	eb 20                	jmp    f0104297 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104277:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010427a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104281:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f010428b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010428f:	74 03                	je     f0104294 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f0104291:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104294:	ff 45 ec             	incl   -0x14(%ebp)
f0104297:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010429e:	76 d7                	jbe    f0104277 <pf_calculate_allocated_pages+0x96>
f01042a0:	eb 01                	jmp    f01042a3 <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f01042a2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01042a3:	ff 45 f4             	incl   -0xc(%ebp)
f01042a6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01042ad:	0f 86 47 ff ff ff    	jbe    f01041fa <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f01042b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01042b6:	c9                   	leave  
f01042b7:	c3                   	ret    

f01042b8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f01042b8:	55                   	push   %ebp
f01042b9:	89 e5                	mov    %esp,%ebp
f01042bb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f01042be:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01042c5:	a1 44 a3 2d f0       	mov    0xf02da344,%eax
f01042ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01042cd:	eb 0b                	jmp    f01042da <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f01042cf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01042d2:	a1 4c a3 2d f0       	mov    0xf02da34c,%eax
f01042d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01042da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01042de:	74 07                	je     f01042e7 <pf_calculate_free_frames+0x2f>
f01042e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01042e3:	8b 00                	mov    (%eax),%eax
f01042e5:	eb 05                	jmp    f01042ec <pf_calculate_free_frames+0x34>
f01042e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01042ec:	a3 4c a3 2d f0       	mov    %eax,0xf02da34c
f01042f1:	a1 4c a3 2d f0       	mov    0xf02da34c,%eax
f01042f6:	85 c0                	test   %eax,%eax
f01042f8:	75 d5                	jne    f01042cf <pf_calculate_free_frames+0x17>
f01042fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01042fe:	75 cf                	jne    f01042cf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0104300:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104303:	c9                   	leave  
f0104304:	c3                   	ret    

f0104305 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104305:	55                   	push   %ebp
f0104306:	89 e5                	mov    %esp,%ebp
f0104308:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010430b:	8b 45 08             	mov    0x8(%ebp),%eax
f010430e:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f0104314:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104317:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104319:	8b 45 0c             	mov    0xc(%ebp),%eax
f010431c:	8b 00                	mov    (%eax),%eax
f010431e:	85 c0                	test   %eax,%eax
f0104320:	0f 85 ad 00 00 00    	jne    f01043d3 <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104326:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010432d:	83 ec 0c             	sub    $0xc,%esp
f0104330:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104333:	50                   	push   %eax
f0104334:	e8 20 2c 00 00       	call   f0106f59 <allocate_frame>
f0104339:	83 c4 10             	add    $0x10,%esp
f010433c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010433f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104343:	79 08                	jns    f010434d <get_disk_table_directory+0x48>
				return r;
f0104345:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104348:	e9 8b 00 00 00       	jmp    f01043d8 <get_disk_table_directory+0xd3>
			p->references = 1;
f010434d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104350:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104356:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104359:	83 ec 0c             	sub    $0xc,%esp
f010435c:	50                   	push   %eax
f010435d:	e8 e9 f0 ff ff       	call   f010344b <to_physical_address>
f0104362:	83 c4 10             	add    $0x10,%esp
f0104365:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010436b:	c1 e8 0c             	shr    $0xc,%eax
f010436e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104371:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0104376:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104379:	72 17                	jb     f0104392 <get_disk_table_directory+0x8d>
f010437b:	ff 75 f0             	pushl  -0x10(%ebp)
f010437e:	68 f0 13 13 f0       	push   $0xf01313f0
f0104383:	68 5d 02 00 00       	push   $0x25d
f0104388:	68 8d 13 13 f0       	push   $0xf013138d
f010438d:	e8 1e be ff ff       	call   f01001b0 <_panic>
f0104392:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104395:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010439a:	89 c2                	mov    %eax,%edx
f010439c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010439f:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f01043a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043a4:	83 ec 0c             	sub    $0xc,%esp
f01043a7:	50                   	push   %eax
f01043a8:	e8 9e f0 ff ff       	call   f010344b <to_physical_address>
f01043ad:	83 c4 10             	add    $0x10,%esp
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043b5:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f01043bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043be:	8b 00                	mov    (%eax),%eax
f01043c0:	83 ec 04             	sub    $0x4,%esp
f01043c3:	68 00 10 00 00       	push   $0x1000
f01043c8:	6a 00                	push   $0x0
f01043ca:	50                   	push   %eax
f01043cb:	e8 ac a8 02 00       	call   f012ec7c <memset>
f01043d0:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01043d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01043d8:	c9                   	leave  
f01043d9:	c3                   	ret    

f01043da <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01043da:	55                   	push   %ebp
f01043db:	89 e5                	mov    %esp,%ebp
f01043dd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01043e0:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01043e7:	76 19                	jbe    f0104402 <__pf_write_env_table+0x28>
f01043e9:	68 20 14 13 f0       	push   $0xf0131420
f01043ee:	68 46 14 13 f0       	push   $0xf0131446
f01043f3:	68 6b 02 00 00       	push   $0x26b
f01043f8:	68 8d 13 13 f0       	push   $0xf013138d
f01043fd:	e8 ae bd ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	05 b0 00 00 00       	add    $0xb0,%eax
f010440a:	83 ec 08             	sub    $0x8,%esp
f010440d:	50                   	push   %eax
f010440e:	ff 75 08             	pushl  0x8(%ebp)
f0104411:	e8 ef fe ff ff       	call   f0104305 <get_disk_table_directory>
f0104416:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104419:	8b 45 08             	mov    0x8(%ebp),%eax
f010441c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104422:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104425:	c1 ea 16             	shr    $0x16,%edx
f0104428:	c1 e2 02             	shl    $0x2,%edx
f010442b:	01 d0                	add    %edx,%eax
f010442d:	8b 00                	mov    (%eax),%eax
f010442f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104432:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104435:	85 c0                	test   %eax,%eax
f0104437:	75 34                	jne    f010446d <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104439:	83 ec 0c             	sub    $0xc,%esp
f010443c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010443f:	50                   	push   %eax
f0104440:	e8 83 f2 ff ff       	call   f01036c8 <allocate_disk_frame>
f0104445:	83 c4 10             	add    $0x10,%esp
f0104448:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010444b:	75 07                	jne    f0104454 <__pf_write_env_table+0x7a>
f010444d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104452:	eb 31                	jmp    f0104485 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104454:	8b 45 08             	mov    0x8(%ebp),%eax
f0104457:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010445d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104460:	c1 ea 16             	shr    $0x16,%edx
f0104463:	c1 e2 02             	shl    $0x2,%edx
f0104466:	01 c2                	add    %eax,%edx
f0104468:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010446b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010446d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104470:	83 ec 08             	sub    $0x8,%esp
f0104473:	ff 75 10             	pushl  0x10(%ebp)
f0104476:	50                   	push   %eax
f0104477:	e8 63 f0 ff ff       	call   f01034df <write_disk_page>
f010447c:	83 c4 10             	add    $0x10,%esp
f010447f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0104482:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104485:	c9                   	leave  
f0104486:	c3                   	ret    

f0104487 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104487:	55                   	push   %ebp
f0104488:	89 e5                	mov    %esp,%ebp
f010448a:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010448d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104490:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104496:	85 c0                	test   %eax,%eax
f0104498:	75 07                	jne    f01044a1 <__pf_read_env_table+0x1a>
f010449a:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010449f:	eb 3d                	jmp    f01044de <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01044a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01044aa:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ad:	c1 ea 16             	shr    $0x16,%edx
f01044b0:	c1 e2 02             	shl    $0x2,%edx
f01044b3:	01 d0                	add    %edx,%eax
f01044b5:	8b 00                	mov    (%eax),%eax
f01044b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01044ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044be:	75 07                	jne    f01044c7 <__pf_read_env_table+0x40>
f01044c0:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01044c5:	eb 17                	jmp    f01044de <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f01044c7:	83 ec 08             	sub    $0x8,%esp
f01044ca:	ff 75 10             	pushl  0x10(%ebp)
f01044cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01044d0:	e8 db ef ff ff       	call   f01034b0 <read_disk_page>
f01044d5:	83 c4 10             	add    $0x10,%esp
f01044d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01044db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01044de:	c9                   	leave  
f01044df:	c3                   	ret    

f01044e0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01044e0:	55                   	push   %ebp
f01044e1:	89 e5                	mov    %esp,%ebp
f01044e3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01044e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e9:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01044ef:	85 c0                	test   %eax,%eax
f01044f1:	74 52                	je     f0104545 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01044f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01044fa:	eb 3e                	jmp    f010453a <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01044fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01044ff:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104505:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104508:	c1 e2 02             	shl    $0x2,%edx
f010450b:	01 d0                	add    %edx,%eax
f010450d:	8b 00                	mov    (%eax),%eax
f010450f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104512:	8b 45 08             	mov    0x8(%ebp),%eax
f0104515:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010451b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010451e:	c1 e2 02             	shl    $0x2,%edx
f0104521:	01 d0                	add    %edx,%eax
f0104523:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104529:	83 ec 0c             	sub    $0xc,%esp
f010452c:	ff 75 f0             	pushl  -0x10(%ebp)
f010452f:	e8 5b f2 ff ff       	call   f010378f <free_disk_frame>
f0104534:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104537:	ff 45 f4             	incl   -0xc(%ebp)
f010453a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104541:	76 b9                	jbe    f01044fc <__pf_remove_env_all_tables+0x1c>
f0104543:	eb 01                	jmp    f0104546 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104545:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104546:	c9                   	leave  
f0104547:	c3                   	ret    

f0104548 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104548:	55                   	push   %ebp
f0104549:	89 e5                	mov    %esp,%ebp
f010454b:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010454e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104552:	75 10                	jne    f0104564 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104554:	83 ec 0c             	sub    $0xc,%esp
f0104557:	68 50 15 13 f0       	push   $0xf0131550
f010455c:	e8 d0 c8 ff ff       	call   f0100e31 <cprintf>
f0104561:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104564:	8b 45 08             	mov    0x8(%ebp),%eax
f0104567:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010456d:	85 c0                	test   %eax,%eax
f010456f:	74 43                	je     f01045b4 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104571:	8b 45 08             	mov    0x8(%ebp),%eax
f0104574:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010457a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010457d:	c1 ea 16             	shr    $0x16,%edx
f0104580:	c1 e2 02             	shl    $0x2,%edx
f0104583:	01 d0                	add    %edx,%eax
f0104585:	8b 00                	mov    (%eax),%eax
f0104587:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010458a:	8b 45 08             	mov    0x8(%ebp),%eax
f010458d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104596:	c1 ea 16             	shr    $0x16,%edx
f0104599:	c1 e2 02             	shl    $0x2,%edx
f010459c:	01 d0                	add    %edx,%eax
f010459e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01045a4:	83 ec 0c             	sub    $0xc,%esp
f01045a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01045aa:	e8 e0 f1 ff ff       	call   f010378f <free_disk_frame>
f01045af:	83 c4 10             	add    $0x10,%esp
f01045b2:	eb 01                	jmp    f01045b5 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f01045b4:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f01045b5:	c9                   	leave  
f01045b6:	c3                   	ret    

f01045b7 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f01045b7:	55                   	push   %ebp
f01045b8:	89 e5                	mov    %esp,%ebp
f01045ba:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f01045bd:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f01045c4:	eb 1f                	jmp    f01045e5 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f01045c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c9:	83 ec 04             	sub    $0x4,%esp
f01045cc:	6a 08                	push   $0x8
f01045ce:	ff 75 08             	pushl  0x8(%ebp)
f01045d1:	50                   	push   %eax
f01045d2:	e8 67 ad 02 00       	call   f012f33e <ide_write>
f01045d7:	83 c4 10             	add    $0x10,%esp
f01045da:	85 c0                	test   %eax,%eax
f01045dc:	75 12                	jne    f01045f0 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01045de:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01045e5:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01045ec:	7e d8                	jle    f01045c6 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01045ee:	eb 01                	jmp    f01045f1 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01045f0:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01045f1:	90                   	nop
f01045f2:	c9                   	leave  
f01045f3:	c3                   	ret    

f01045f4 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01045f4:	55                   	push   %ebp
f01045f5:	89 e5                	mov    %esp,%ebp
f01045f7:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01045fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01045fd:	0f b6 c0             	movzbl %al,%eax
f0104600:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104607:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010460a:	8a 45 f6             	mov    -0xa(%ebp),%al
f010460d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104610:	ee                   	out    %al,(%dx)
f0104611:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104618:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010461b:	89 c2                	mov    %eax,%edx
f010461d:	ec                   	in     (%dx),%al
f010461e:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104621:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104624:	0f b6 c0             	movzbl %al,%eax
}
f0104627:	c9                   	leave  
f0104628:	c3                   	ret    

f0104629 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104629:	55                   	push   %ebp
f010462a:	89 e5                	mov    %esp,%ebp
f010462c:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010462f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104632:	0f b6 c0             	movzbl %al,%eax
f0104635:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010463c:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010463f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104642:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104645:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104646:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104649:	0f b6 c0             	movzbl %al,%eax
f010464c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104653:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104656:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104659:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010465c:	ee                   	out    %al,(%dx)
}
f010465d:	90                   	nop
f010465e:	c9                   	leave  
f010465f:	c3                   	ret    

f0104660 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104660:	55                   	push   %ebp
f0104661:	89 e5                	mov    %esp,%ebp
f0104663:	53                   	push   %ebx
f0104664:	83 ec 24             	sub    $0x24,%esp
f0104667:	8b 45 08             	mov    0x8(%ebp),%eax
f010466a:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010466d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104674:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104678:	8a 45 ef             	mov    -0x11(%ebp),%al
f010467b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010467e:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010467f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104683:	77 48                	ja     f01046cd <kclock_start+0x6d>
f0104685:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010468c:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104690:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104693:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104696:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104697:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010469b:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01046a0:	99                   	cltd   
f01046a1:	f7 fb                	idiv   %ebx
f01046a3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01046a9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01046ad:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01046b2:	99                   	cltd   
f01046b3:	f7 fb                	idiv   %ebx
f01046b5:	89 c3                	mov    %eax,%ebx
f01046b7:	89 c8                	mov    %ecx,%eax
f01046b9:	99                   	cltd   
f01046ba:	f7 fb                	idiv   %ebx
f01046bc:	0f b7 c0             	movzwl %ax,%eax
f01046bf:	83 ec 0c             	sub    $0xc,%esp
f01046c2:	50                   	push   %eax
f01046c3:	e8 dd 01 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f01046c8:	83 c4 10             	add    $0x10,%esp
f01046cb:	eb 13                	jmp    f01046e0 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01046cd:	6a 35                	push   $0x35
f01046cf:	68 74 15 13 f0       	push   $0xf0131574
f01046d4:	6a 33                	push   $0x33
f01046d6:	68 d0 15 13 f0       	push   $0xf01315d0
f01046db:	e8 d0 ba ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01046e0:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f01046e6:	0f b7 c0             	movzwl %ax,%eax
f01046e9:	25 fe ff 00 00       	and    $0xfffe,%eax
f01046ee:	83 ec 0c             	sub    $0xc,%esp
f01046f1:	50                   	push   %eax
f01046f2:	e8 3a 1c 00 00       	call   f0106331 <irq_setmask_8259A>
f01046f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01046fa:	90                   	nop
f01046fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01046fe:	c9                   	leave  
f01046ff:	c3                   	ret    

f0104700 <kclock_stop>:

void
kclock_stop(void)
{
f0104700:	55                   	push   %ebp
f0104701:	89 e5                	mov    %esp,%ebp
f0104703:	83 ec 18             	sub    $0x18,%esp
f0104706:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010470d:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104711:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104714:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104717:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104718:	83 ec 0c             	sub    $0xc,%esp
f010471b:	68 ff ff 00 00       	push   $0xffff
f0104720:	e8 0c 1c 00 00       	call   f0106331 <irq_setmask_8259A>
f0104725:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104728:	90                   	nop
f0104729:	c9                   	leave  
f010472a:	c3                   	ret    

f010472b <kclock_resume>:

void
kclock_resume(void)
{
f010472b:	55                   	push   %ebp
f010472c:	89 e5                	mov    %esp,%ebp
f010472e:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104731:	e8 b1 01 00 00       	call   f01048e7 <kclock_read_cnt0>
f0104736:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f010473a:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f010473f:	77 06                	ja     f0104747 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104741:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104747:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010474b:	83 e0 01             	and    $0x1,%eax
f010474e:	66 85 c0             	test   %ax,%ax
f0104751:	74 09                	je     f010475c <kclock_resume+0x31>
		cnt0++;
f0104753:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104757:	40                   	inc    %eax
f0104758:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010475c:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104763:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104767:	8a 45 ef             	mov    -0x11(%ebp),%al
f010476a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010476d:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010476e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104772:	83 ec 0c             	sub    $0xc,%esp
f0104775:	50                   	push   %eax
f0104776:	e8 2a 01 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f010477b:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010477e:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0104784:	0f b7 c0             	movzwl %ax,%eax
f0104787:	25 fe ff 00 00       	and    $0xfffe,%eax
f010478c:	83 ec 0c             	sub    $0xc,%esp
f010478f:	50                   	push   %eax
f0104790:	e8 9c 1b 00 00       	call   f0106331 <irq_setmask_8259A>
f0104795:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104798:	90                   	nop
f0104799:	c9                   	leave  
f010479a:	c3                   	ret    

f010479b <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010479b:	55                   	push   %ebp
f010479c:	89 e5                	mov    %esp,%ebp
f010479e:	83 ec 28             	sub    $0x28,%esp
f01047a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a4:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01047a7:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01047ae:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01047b2:	8a 45 f3             	mov    -0xd(%ebp),%al
f01047b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047b8:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01047b9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01047bd:	83 ec 0c             	sub    $0xc,%esp
f01047c0:	50                   	push   %eax
f01047c1:	e8 df 00 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f01047c6:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01047c9:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f01047cf:	0f b7 c0             	movzwl %ax,%eax
f01047d2:	25 fe ff 00 00       	and    $0xfffe,%eax
f01047d7:	83 ec 0c             	sub    $0xc,%esp
f01047da:	50                   	push   %eax
f01047db:	e8 51 1b 00 00       	call   f0106331 <irq_setmask_8259A>
f01047e0:	83 c4 10             	add    $0x10,%esp

}
f01047e3:	90                   	nop
f01047e4:	c9                   	leave  
f01047e5:	c3                   	ret    

f01047e6 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01047e6:	55                   	push   %ebp
f01047e7:	89 e5                	mov    %esp,%ebp
f01047e9:	56                   	push   %esi
f01047ea:	53                   	push   %ebx
f01047eb:	83 ec 20             	sub    $0x20,%esp
f01047ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01047f1:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01047f4:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01047f8:	0f 87 8a 00 00 00    	ja     f0104888 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f01047fe:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104802:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104807:	99                   	cltd   
f0104808:	f7 fe                	idiv   %esi
f010480a:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104810:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104814:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104819:	99                   	cltd   
f010481a:	f7 fb                	idiv   %ebx
f010481c:	89 c6                	mov    %eax,%esi
f010481e:	89 c8                	mov    %ecx,%eax
f0104820:	99                   	cltd   
f0104821:	f7 fe                	idiv   %esi
f0104823:	89 c3                	mov    %eax,%ebx
f0104825:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104829:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010482e:	99                   	cltd   
f010482f:	f7 f9                	idiv   %ecx
f0104831:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104837:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f010483b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104840:	99                   	cltd   
f0104841:	f7 fe                	idiv   %esi
f0104843:	89 c6                	mov    %eax,%esi
f0104845:	89 c8                	mov    %ecx,%eax
f0104847:	99                   	cltd   
f0104848:	f7 fe                	idiv   %esi
f010484a:	25 01 00 00 80       	and    $0x80000001,%eax
f010484f:	85 c0                	test   %eax,%eax
f0104851:	79 05                	jns    f0104858 <kclock_set_quantum+0x72>
f0104853:	48                   	dec    %eax
f0104854:	83 c8 fe             	or     $0xfffffffe,%eax
f0104857:	40                   	inc    %eax
f0104858:	01 d8                	add    %ebx,%eax
f010485a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010485d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104864:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104868:	8a 45 ef             	mov    -0x11(%ebp),%al
f010486b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010486e:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f010486f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104872:	0f b7 c0             	movzwl %ax,%eax
f0104875:	83 ec 0c             	sub    $0xc,%esp
f0104878:	50                   	push   %eax
f0104879:	e8 27 00 00 00       	call   f01048a5 <kclock_write_cnt0_LSB_first>
f010487e:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104881:	e8 7a fe ff ff       	call   f0104700 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104886:	eb 16                	jmp    f010489e <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104888:	6a 35                	push   $0x35
f010488a:	68 74 15 13 f0       	push   $0xf0131574
f010488f:	68 cc 00 00 00       	push   $0xcc
f0104894:	68 d0 15 13 f0       	push   $0xf01315d0
f0104899:	e8 12 b9 ff ff       	call   f01001b0 <_panic>
	}
}
f010489e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01048a1:	5b                   	pop    %ebx
f01048a2:	5e                   	pop    %esi
f01048a3:	5d                   	pop    %ebp
f01048a4:	c3                   	ret    

f01048a5 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f01048a5:	55                   	push   %ebp
f01048a6:	89 e5                	mov    %esp,%ebp
f01048a8:	83 ec 14             	sub    $0x14,%esp
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f01048b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048b5:	0f b6 c0             	movzbl %al,%eax
f01048b8:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01048bf:	88 45 f6             	mov    %al,-0xa(%ebp)
f01048c2:	8a 45 f6             	mov    -0xa(%ebp),%al
f01048c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01048c8:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01048c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048cc:	66 c1 e8 08          	shr    $0x8,%ax
f01048d0:	0f b6 c0             	movzbl %al,%eax
f01048d3:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01048da:	88 45 f7             	mov    %al,-0x9(%ebp)
f01048dd:	8a 45 f7             	mov    -0x9(%ebp),%al
f01048e0:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01048e3:	ee                   	out    %al,(%dx)
}
f01048e4:	90                   	nop
f01048e5:	c9                   	leave  
f01048e6:	c3                   	ret    

f01048e7 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01048e7:	55                   	push   %ebp
f01048e8:	89 e5                	mov    %esp,%ebp
f01048ea:	83 ec 20             	sub    $0x20,%esp
f01048ed:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01048f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01048f7:	89 c2                	mov    %eax,%edx
f01048f9:	ec                   	in     (%dx),%al
f01048fa:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01048fd:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104900:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104903:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010490a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010490d:	89 c2                	mov    %eax,%edx
f010490f:	ec                   	in     (%dx),%al
f0104910:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104913:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104916:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104919:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010491d:	c1 e0 08             	shl    $0x8,%eax
f0104920:	89 c2                	mov    %eax,%edx
f0104922:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104926:	09 d0                	or     %edx,%eax
f0104928:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010492c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010492f:	c9                   	leave  
f0104930:	c3                   	ret    

f0104931 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104931:	55                   	push   %ebp
f0104932:	89 e5                	mov    %esp,%ebp
f0104934:	83 ec 30             	sub    $0x30,%esp
f0104937:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010493e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104941:	89 c2                	mov    %eax,%edx
f0104943:	ec                   	in     (%dx),%al
f0104944:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104947:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010494a:	88 45 ff             	mov    %al,-0x1(%ebp)
f010494d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104954:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104958:	8a 45 dc             	mov    -0x24(%ebp),%al
f010495b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495e:	ee                   	out    %al,(%dx)
f010495f:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104966:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104969:	89 c2                	mov    %eax,%edx
f010496b:	ec                   	in     (%dx),%al
f010496c:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010496f:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104972:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104975:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010497c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010497f:	89 c2                	mov    %eax,%edx
f0104981:	ec                   	in     (%dx),%al
f0104982:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104985:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104988:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010498b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010498f:	c1 e0 08             	shl    $0x8,%eax
f0104992:	89 c2                	mov    %eax,%edx
f0104994:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104998:	09 d0                	or     %edx,%eax
f010499a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010499e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01049a2:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f01049a9:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049ac:	8a 45 df             	mov    -0x21(%ebp),%al
f01049af:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01049b2:	ee                   	out    %al,(%dx)

	return cnt0 ;
f01049b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01049b6:	c9                   	leave  
f01049b7:	c3                   	ret    

f01049b8 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f01049b8:	55                   	push   %ebp
f01049b9:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01049bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bf:	74 1d                	je     f01049de <init_queue+0x26>
	{
		LIST_INIT(queue);
f01049c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01049ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01049cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01049d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01049d7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01049de:	90                   	nop
f01049df:	5d                   	pop    %ebp
f01049e0:	c3                   	ret    

f01049e1 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f01049e1:	55                   	push   %ebp
f01049e2:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	74 08                	je     f01049f2 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01049ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ed:	8b 40 0c             	mov    0xc(%eax),%eax
f01049f0:	eb 05                	jmp    f01049f7 <queue_size+0x16>
	}
	else
	{
		return 0;
f01049f2:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01049f7:	5d                   	pop    %ebp
f01049f8:	c3                   	ret    

f01049f9 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01049f9:	55                   	push   %ebp
f01049fa:	89 e5                	mov    %esp,%ebp
f01049fc:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01049ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a03:	75 16                	jne    f0104a1b <enqueue+0x22>
f0104a05:	68 e4 15 13 f0       	push   $0xf01315e4
f0104a0a:	68 f2 15 13 f0       	push   $0xf01315f2
f0104a0f:	6a 33                	push   $0x33
f0104a11:	68 07 16 13 f0       	push   $0xf0131607
f0104a16:	e8 95 b7 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104a1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104a1f:	74 66                	je     f0104a87 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104a21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104a25:	75 14                	jne    f0104a3b <enqueue+0x42>
f0104a27:	83 ec 04             	sub    $0x4,%esp
f0104a2a:	68 20 16 13 f0       	push   $0xf0131620
f0104a2f:	6a 36                	push   $0x36
f0104a31:	68 07 16 13 f0       	push   $0xf0131607
f0104a36:	e8 75 b7 ff ff       	call   f01001b0 <_panic>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 10                	mov    (%eax),%edx
f0104a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a43:	89 50 44             	mov    %edx,0x44(%eax)
f0104a46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a49:	8b 40 44             	mov    0x44(%eax),%eax
f0104a4c:	85 c0                	test   %eax,%eax
f0104a4e:	74 0d                	je     f0104a5d <enqueue+0x64>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 00                	mov    (%eax),%eax
f0104a55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a58:	89 50 48             	mov    %edx,0x48(%eax)
f0104a5b:	eb 09                	jmp    f0104a66 <enqueue+0x6d>
f0104a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a60:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a63:	89 50 04             	mov    %edx,0x4(%eax)
f0104a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a6c:	89 10                	mov    %edx,(%eax)
f0104a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a71:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a7b:	8b 40 0c             	mov    0xc(%eax),%eax
f0104a7e:	8d 50 01             	lea    0x1(%eax),%edx
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104a87:	90                   	nop
f0104a88:	c9                   	leave  
f0104a89:	c3                   	ret    

f0104a8a <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104a8a:	55                   	push   %ebp
f0104a8b:	89 e5                	mov    %esp,%ebp
f0104a8d:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104a90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a94:	75 0a                	jne    f0104aa0 <dequeue+0x16>
f0104a96:	b8 00 00 00 00       	mov    $0x0,%eax
f0104a9b:	e9 a0 00 00 00       	jmp    f0104b40 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	8b 40 04             	mov    0x4(%eax),%eax
f0104aa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104aa9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104aad:	0f 84 8a 00 00 00    	je     f0104b3d <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104ab3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ab7:	75 14                	jne    f0104acd <dequeue+0x43>
f0104ab9:	83 ec 04             	sub    $0x4,%esp
f0104abc:	68 43 16 13 f0       	push   $0xf0131643
f0104ac1:	6a 43                	push   $0x43
f0104ac3:	68 07 16 13 f0       	push   $0xf0131607
f0104ac8:	e8 e3 b6 ff ff       	call   f01001b0 <_panic>
f0104acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad0:	8b 40 44             	mov    0x44(%eax),%eax
f0104ad3:	85 c0                	test   %eax,%eax
f0104ad5:	74 11                	je     f0104ae8 <dequeue+0x5e>
f0104ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ada:	8b 40 44             	mov    0x44(%eax),%eax
f0104add:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae0:	8b 52 48             	mov    0x48(%edx),%edx
f0104ae3:	89 50 48             	mov    %edx,0x48(%eax)
f0104ae6:	eb 0c                	jmp    f0104af4 <dequeue+0x6a>
f0104ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104aeb:	8b 50 48             	mov    0x48(%eax),%edx
f0104aee:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af1:	89 50 04             	mov    %edx,0x4(%eax)
f0104af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104af7:	8b 40 48             	mov    0x48(%eax),%eax
f0104afa:	85 c0                	test   %eax,%eax
f0104afc:	74 11                	je     f0104b0f <dequeue+0x85>
f0104afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b01:	8b 40 48             	mov    0x48(%eax),%eax
f0104b04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b07:	8b 52 44             	mov    0x44(%edx),%edx
f0104b0a:	89 50 44             	mov    %edx,0x44(%eax)
f0104b0d:	eb 0b                	jmp    f0104b1a <dequeue+0x90>
f0104b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b12:	8b 50 44             	mov    0x44(%eax),%edx
f0104b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b18:	89 10                	mov    %edx,(%eax)
f0104b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b1d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b27:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	8b 40 0c             	mov    0xc(%eax),%eax
f0104b34:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3a:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104b40:	c9                   	leave  
f0104b41:	c3                   	ret    

f0104b42 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104b42:	55                   	push   %ebp
f0104b43:	89 e5                	mov    %esp,%ebp
f0104b45:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104b48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b4c:	75 16                	jne    f0104b64 <remove_from_queue+0x22>
f0104b4e:	68 e4 15 13 f0       	push   $0xf01315e4
f0104b53:	68 f2 15 13 f0       	push   $0xf01315f2
f0104b58:	6a 4d                	push   $0x4d
f0104b5a:	68 07 16 13 f0       	push   $0xf0131607
f0104b5f:	e8 4c b6 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104b64:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104b68:	0f 84 8a 00 00 00    	je     f0104bf8 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104b6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104b72:	75 14                	jne    f0104b88 <remove_from_queue+0x46>
f0104b74:	83 ec 04             	sub    $0x4,%esp
f0104b77:	68 43 16 13 f0       	push   $0xf0131643
f0104b7c:	6a 51                	push   $0x51
f0104b7e:	68 07 16 13 f0       	push   $0xf0131607
f0104b83:	e8 28 b6 ff ff       	call   f01001b0 <_panic>
f0104b88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b8b:	8b 40 44             	mov    0x44(%eax),%eax
f0104b8e:	85 c0                	test   %eax,%eax
f0104b90:	74 11                	je     f0104ba3 <remove_from_queue+0x61>
f0104b92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b95:	8b 40 44             	mov    0x44(%eax),%eax
f0104b98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b9b:	8b 52 48             	mov    0x48(%edx),%edx
f0104b9e:	89 50 48             	mov    %edx,0x48(%eax)
f0104ba1:	eb 0c                	jmp    f0104baf <remove_from_queue+0x6d>
f0104ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ba6:	8b 50 48             	mov    0x48(%eax),%edx
f0104ba9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bac:	89 50 04             	mov    %edx,0x4(%eax)
f0104baf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bb2:	8b 40 48             	mov    0x48(%eax),%eax
f0104bb5:	85 c0                	test   %eax,%eax
f0104bb7:	74 11                	je     f0104bca <remove_from_queue+0x88>
f0104bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bbc:	8b 40 48             	mov    0x48(%eax),%eax
f0104bbf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bc2:	8b 52 44             	mov    0x44(%edx),%edx
f0104bc5:	89 50 44             	mov    %edx,0x44(%eax)
f0104bc8:	eb 0b                	jmp    f0104bd5 <remove_from_queue+0x93>
f0104bca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bcd:	8b 50 44             	mov    0x44(%eax),%edx
f0104bd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd3:	89 10                	mov    %edx,(%eax)
f0104bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bd8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104be2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bec:	8b 40 0c             	mov    0xc(%eax),%eax
f0104bef:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104bf8:	90                   	nop
f0104bf9:	c9                   	leave  
f0104bfa:	c3                   	ret    

f0104bfb <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104bfb:	55                   	push   %ebp
f0104bfc:	89 e5                	mov    %esp,%ebp
f0104bfe:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104c01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104c05:	75 07                	jne    f0104c0e <find_env_in_queue+0x13>
f0104c07:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c0c:	eb 58                	jmp    f0104c66 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104c0e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104c15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c18:	8b 00                	mov    (%eax),%eax
f0104c1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104c1d:	eb 19                	jmp    f0104c38 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104c1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c22:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c25:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104c28:	75 05                	jne    f0104c2f <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c2d:	eb 37                	jmp    f0104c66 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c32:	8b 40 08             	mov    0x8(%eax),%eax
f0104c35:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104c38:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104c3c:	74 08                	je     f0104c46 <find_env_in_queue+0x4b>
f0104c3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c41:	8b 40 44             	mov    0x44(%eax),%eax
f0104c44:	eb 05                	jmp    f0104c4b <find_env_in_queue+0x50>
f0104c46:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c4b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c4e:	89 42 08             	mov    %eax,0x8(%edx)
f0104c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c54:	8b 40 08             	mov    0x8(%eax),%eax
f0104c57:	85 c0                	test   %eax,%eax
f0104c59:	75 c4                	jne    f0104c1f <find_env_in_queue+0x24>
f0104c5b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104c5f:	75 be                	jne    f0104c1f <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104c61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104c66:	c9                   	leave  
f0104c67:	c3                   	ret    

f0104c68 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0104c68:	55                   	push   %ebp
f0104c69:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0104c6b:	90                   	nop
f0104c6c:	5d                   	pop    %ebp
f0104c6d:	c3                   	ret    

f0104c6e <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f0104c6e:	55                   	push   %ebp
f0104c6f:	89 e5                	mov    %esp,%ebp
f0104c71:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104c78:	74 1d                	je     f0104c97 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0104c7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7d:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104c84:	83 ec 08             	sub    $0x8,%esp
f0104c87:	ff 75 08             	pushl  0x8(%ebp)
f0104c8a:	68 20 3b 25 f0       	push   $0xf0253b20
f0104c8f:	e8 65 fd ff ff       	call   f01049f9 <enqueue>
f0104c94:	83 c4 10             	add    $0x10,%esp
	}
}
f0104c97:	90                   	nop
f0104c98:	c9                   	leave  
f0104c99:	c3                   	ret    

f0104c9a <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0104c9a:	55                   	push   %ebp
f0104c9b:	89 e5                	mov    %esp,%ebp
f0104c9d:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f0104ca0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ca4:	0f 84 02 01 00 00    	je     f0104dac <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104caa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104cb1:	e9 e5 00 00 00       	jmp    f0104d9b <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104cb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cb9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104cbc:	89 c2                	mov    %eax,%edx
f0104cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cc1:	c1 e0 04             	shl    $0x4,%eax
f0104cc4:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0104cc9:	52                   	push   %edx
f0104cca:	50                   	push   %eax
f0104ccb:	e8 2b ff ff ff       	call   f0104bfb <find_env_in_queue>
f0104cd0:	83 c4 08             	add    $0x8,%esp
f0104cd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104cda:	0f 84 b8 00 00 00    	je     f0104d98 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104ce0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ce4:	75 17                	jne    f0104cfd <sched_remove_ready+0x63>
f0104ce6:	83 ec 04             	sub    $0x4,%esp
f0104ce9:	68 43 16 13 f0       	push   $0xf0131643
f0104cee:	68 90 00 00 00       	push   $0x90
f0104cf3:	68 07 16 13 f0       	push   $0xf0131607
f0104cf8:	e8 b3 b4 ff ff       	call   f01001b0 <_panic>
f0104cfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d00:	8b 40 44             	mov    0x44(%eax),%eax
f0104d03:	85 c0                	test   %eax,%eax
f0104d05:	74 11                	je     f0104d18 <sched_remove_ready+0x7e>
f0104d07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d0a:	8b 40 44             	mov    0x44(%eax),%eax
f0104d0d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104d10:	8b 52 48             	mov    0x48(%edx),%edx
f0104d13:	89 50 48             	mov    %edx,0x48(%eax)
f0104d16:	eb 14                	jmp    f0104d2c <sched_remove_ready+0x92>
f0104d18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1b:	8b 40 48             	mov    0x48(%eax),%eax
f0104d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d21:	c1 e2 04             	shl    $0x4,%edx
f0104d24:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0104d2a:	89 02                	mov    %eax,(%edx)
f0104d2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d2f:	8b 40 48             	mov    0x48(%eax),%eax
f0104d32:	85 c0                	test   %eax,%eax
f0104d34:	74 11                	je     f0104d47 <sched_remove_ready+0xad>
f0104d36:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d39:	8b 40 48             	mov    0x48(%eax),%eax
f0104d3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0104d3f:	8b 52 44             	mov    0x44(%edx),%edx
f0104d42:	89 50 44             	mov    %edx,0x44(%eax)
f0104d45:	eb 14                	jmp    f0104d5b <sched_remove_ready+0xc1>
f0104d47:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104d4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0104d59:	89 02                	mov    %eax,(%edx)
f0104d5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104d65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d68:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d72:	c1 e0 04             	shl    $0x4,%eax
f0104d75:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0104d7a:	8b 00                	mov    (%eax),%eax
f0104d7c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d82:	c1 e0 04             	shl    $0x4,%eax
f0104d85:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0104d8a:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0104d8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d8f:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104d96:	eb 14                	jmp    f0104dac <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d98:	ff 45 f4             	incl   -0xc(%ebp)
f0104d9b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0104da0:	0f b6 c0             	movzbl %al,%eax
f0104da3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104da6:	0f 8f 0a ff ff ff    	jg     f0104cb6 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104dac:	c9                   	leave  
f0104dad:	c3                   	ret    

f0104dae <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f0104dae:	55                   	push   %ebp
f0104daf:	89 e5                	mov    %esp,%ebp
f0104db1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104db4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db8:	74 1d                	je     f0104dd7 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104dba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dbd:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104dc4:	83 ec 08             	sub    $0x8,%esp
f0104dc7:	ff 75 08             	pushl  0x8(%ebp)
f0104dca:	68 b8 be 2b f0       	push   $0xf02bbeb8
f0104dcf:	e8 25 fc ff ff       	call   f01049f9 <enqueue>
f0104dd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0104dd7:	90                   	nop
f0104dd8:	c9                   	leave  
f0104dd9:	c3                   	ret    

f0104dda <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f0104dda:	55                   	push   %ebp
f0104ddb:	89 e5                	mov    %esp,%ebp
f0104ddd:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104de0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104de4:	0f 84 92 00 00 00    	je     f0104e7c <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104dea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dee:	75 17                	jne    f0104e07 <sched_remove_new+0x2d>
f0104df0:	83 ec 04             	sub    $0x4,%esp
f0104df3:	68 43 16 13 f0       	push   $0xf0131643
f0104df8:	68 ab 00 00 00       	push   $0xab
f0104dfd:	68 07 16 13 f0       	push   $0xf0131607
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e0d:	85 c0                	test   %eax,%eax
f0104e0f:	74 11                	je     f0104e22 <sched_remove_new+0x48>
f0104e11:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e14:	8b 40 44             	mov    0x44(%eax),%eax
f0104e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0104e1a:	8b 52 48             	mov    0x48(%edx),%edx
f0104e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0104e20:	eb 0b                	jmp    f0104e2d <sched_remove_new+0x53>
f0104e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e25:	8b 40 48             	mov    0x48(%eax),%eax
f0104e28:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0104e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e30:	8b 40 48             	mov    0x48(%eax),%eax
f0104e33:	85 c0                	test   %eax,%eax
f0104e35:	74 11                	je     f0104e48 <sched_remove_new+0x6e>
f0104e37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e3a:	8b 40 48             	mov    0x48(%eax),%eax
f0104e3d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104e40:	8b 52 44             	mov    0x44(%edx),%edx
f0104e43:	89 50 44             	mov    %edx,0x44(%eax)
f0104e46:	eb 0b                	jmp    f0104e53 <sched_remove_new+0x79>
f0104e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104e4e:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f0104e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e56:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e60:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e67:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f0104e6c:	48                   	dec    %eax
f0104e6d:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
		env->env_status = ENV_UNKNOWN;
f0104e72:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e75:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104e7c:	90                   	nop
f0104e7d:	c9                   	leave  
f0104e7e:	c3                   	ret    

f0104e7f <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f0104e7f:	55                   	push   %ebp
f0104e80:	89 e5                	mov    %esp,%ebp
f0104e82:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104e85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e89:	74 34                	je     f0104ebf <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104e8b:	e8 03 86 00 00       	call   f010d493 <isBufferingEnabled>
f0104e90:	84 c0                	test   %al,%al
f0104e92:	74 0e                	je     f0104ea2 <sched_insert_exit+0x23>
f0104e94:	83 ec 0c             	sub    $0xc,%esp
f0104e97:	ff 75 08             	pushl  0x8(%ebp)
f0104e9a:	e8 49 5b 00 00       	call   f010a9e8 <cleanup_buffers>
f0104e9f:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ea5:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104eac:	83 ec 08             	sub    $0x8,%esp
f0104eaf:	ff 75 08             	pushl  0x8(%ebp)
f0104eb2:	68 84 9a 2b f0       	push   $0xf02b9a84
f0104eb7:	e8 3d fb ff ff       	call   f01049f9 <enqueue>
f0104ebc:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ebf:	90                   	nop
f0104ec0:	c9                   	leave  
f0104ec1:	c3                   	ret    

f0104ec2 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f0104ec2:	55                   	push   %ebp
f0104ec3:	89 e5                	mov    %esp,%ebp
f0104ec5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ec8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ecc:	0f 84 92 00 00 00    	je     f0104f64 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ed2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ed6:	75 17                	jne    f0104eef <sched_remove_exit+0x2d>
f0104ed8:	83 ec 04             	sub    $0x4,%esp
f0104edb:	68 43 16 13 f0       	push   $0xf0131643
f0104ee0:	68 c3 00 00 00       	push   $0xc3
f0104ee5:	68 07 16 13 f0       	push   $0xf0131607
f0104eea:	e8 c1 b2 ff ff       	call   f01001b0 <_panic>
f0104eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ef2:	8b 40 44             	mov    0x44(%eax),%eax
f0104ef5:	85 c0                	test   %eax,%eax
f0104ef7:	74 11                	je     f0104f0a <sched_remove_exit+0x48>
f0104ef9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efc:	8b 40 44             	mov    0x44(%eax),%eax
f0104eff:	8b 55 08             	mov    0x8(%ebp),%edx
f0104f02:	8b 52 48             	mov    0x48(%edx),%edx
f0104f05:	89 50 48             	mov    %edx,0x48(%eax)
f0104f08:	eb 0b                	jmp    f0104f15 <sched_remove_exit+0x53>
f0104f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f0d:	8b 40 48             	mov    0x48(%eax),%eax
f0104f10:	a3 88 9a 2b f0       	mov    %eax,0xf02b9a88
f0104f15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f18:	8b 40 48             	mov    0x48(%eax),%eax
f0104f1b:	85 c0                	test   %eax,%eax
f0104f1d:	74 11                	je     f0104f30 <sched_remove_exit+0x6e>
f0104f1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f22:	8b 40 48             	mov    0x48(%eax),%eax
f0104f25:	8b 55 08             	mov    0x8(%ebp),%edx
f0104f28:	8b 52 44             	mov    0x44(%edx),%edx
f0104f2b:	89 50 44             	mov    %edx,0x44(%eax)
f0104f2e:	eb 0b                	jmp    f0104f3b <sched_remove_exit+0x79>
f0104f30:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f33:	8b 40 44             	mov    0x44(%eax),%eax
f0104f36:	a3 84 9a 2b f0       	mov    %eax,0xf02b9a84
f0104f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f3e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104f45:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f48:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104f4f:	a1 90 9a 2b f0       	mov    0xf02b9a90,%eax
f0104f54:	48                   	dec    %eax
f0104f55:	a3 90 9a 2b f0       	mov    %eax,0xf02b9a90
		env->env_status = ENV_UNKNOWN;
f0104f5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5d:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104f64:	90                   	nop
f0104f65:	c9                   	leave  
f0104f66:	c3                   	ret    

f0104f67 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0104f67:	55                   	push   %ebp
f0104f68:	89 e5                	mov    %esp,%ebp
f0104f6a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0104f6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f71:	74 0e                	je     f0104f81 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0104f73:	83 ec 0c             	sub    $0xc,%esp
f0104f76:	ff 75 08             	pushl  0x8(%ebp)
f0104f79:	e8 30 fe ff ff       	call   f0104dae <sched_insert_new>
f0104f7e:	83 c4 10             	add    $0x10,%esp
	}
}
f0104f81:	90                   	nop
f0104f82:	c9                   	leave  
f0104f83:	c3                   	ret    

f0104f84 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0104f84:	55                   	push   %ebp
f0104f85:	89 e5                	mov    %esp,%ebp
f0104f87:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104f8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104f91:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0104f96:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f99:	eb 3d                	jmp    f0104fd8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0104f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fa1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104fa4:	75 2a                	jne    f0104fd0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0104fa6:	83 ec 0c             	sub    $0xc,%esp
f0104fa9:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fac:	e8 29 fe ff ff       	call   f0104dda <sched_remove_new>
f0104fb1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0104fb4:	83 ec 0c             	sub    $0xc,%esp
f0104fb7:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fba:	e8 af fc ff ff       	call   f0104c6e <sched_insert_ready0>
f0104fbf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0104fc2:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0104fc7:	85 c0                	test   %eax,%eax
f0104fc9:	75 36                	jne    f0105001 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0104fcb:	e8 7d 0e 00 00       	call   f0105e4d <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104fd0:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104fdc:	74 08                	je     f0104fe6 <sched_run_env+0x62>
f0104fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe1:	8b 40 44             	mov    0x44(%eax),%eax
f0104fe4:	eb 05                	jmp    f0104feb <sched_run_env+0x67>
f0104fe6:	b8 00 00 00 00       	mov    $0x0,%eax
f0104feb:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0104ff0:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0104ff5:	85 c0                	test   %eax,%eax
f0104ff7:	75 a2                	jne    f0104f9b <sched_run_env+0x17>
f0104ff9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffd:	75 9c                	jne    f0104f9b <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0104fff:	eb 01                	jmp    f0105002 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105001:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105002:	90                   	nop
f0105003:	c9                   	leave  
f0105004:	c3                   	ret    

f0105005 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f0105005:	55                   	push   %ebp
f0105006:	89 e5                	mov    %esp,%ebp
f0105008:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010500b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105012:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105019:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010501d:	75 59                	jne    f0105078 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010501f:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105024:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105027:	eb 28                	jmp    f0105051 <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f0105029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010502c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010502f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105032:	75 15                	jne    f0105049 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105034:	83 ec 0c             	sub    $0xc,%esp
f0105037:	ff 75 f4             	pushl  -0xc(%ebp)
f010503a:	e8 9b fd ff ff       	call   f0104dda <sched_remove_new>
f010503f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105042:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105049:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010504e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105051:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105055:	74 08                	je     f010505f <sched_exit_env+0x5a>
f0105057:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010505a:	8b 40 44             	mov    0x44(%eax),%eax
f010505d:	eb 05                	jmp    f0105064 <sched_exit_env+0x5f>
f010505f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105064:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105069:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	75 b7                	jne    f0105029 <sched_exit_env+0x24>
f0105072:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105076:	75 b1                	jne    f0105029 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010507c:	0f 85 6e 01 00 00    	jne    f01051f0 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105082:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105089:	e9 4e 01 00 00       	jmp    f01051dc <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010508e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105091:	c1 e0 04             	shl    $0x4,%eax
f0105094:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105099:	8b 00                	mov    (%eax),%eax
f010509b:	85 c0                	test   %eax,%eax
f010509d:	0f 84 30 01 00 00    	je     f01051d3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01050a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01050ad:	c1 e0 04             	shl    $0x4,%eax
f01050b0:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01050b5:	8b 00                	mov    (%eax),%eax
f01050b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050ba:	e9 d4 00 00 00       	jmp    f0105193 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01050bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050c2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050c5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050c8:	0f 85 b5 00 00 00    	jne    f0105183 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01050ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050d2:	75 17                	jne    f01050eb <sched_exit_env+0xe6>
f01050d4:	83 ec 04             	sub    $0x4,%esp
f01050d7:	68 43 16 13 f0       	push   $0xf0131643
f01050dc:	68 10 01 00 00       	push   $0x110
f01050e1:	68 07 16 13 f0       	push   $0xf0131607
f01050e6:	e8 c5 b0 ff ff       	call   f01001b0 <_panic>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	85 c0                	test   %eax,%eax
f01050f3:	74 11                	je     f0105106 <sched_exit_env+0x101>
f01050f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f8:	8b 40 44             	mov    0x44(%eax),%eax
f01050fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050fe:	8b 52 48             	mov    0x48(%edx),%edx
f0105101:	89 50 48             	mov    %edx,0x48(%eax)
f0105104:	eb 14                	jmp    f010511a <sched_exit_env+0x115>
f0105106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105109:	8b 40 48             	mov    0x48(%eax),%eax
f010510c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010510f:	c1 e2 04             	shl    $0x4,%edx
f0105112:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0105118:	89 02                	mov    %eax,(%edx)
f010511a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010511d:	8b 40 48             	mov    0x48(%eax),%eax
f0105120:	85 c0                	test   %eax,%eax
f0105122:	74 11                	je     f0105135 <sched_exit_env+0x130>
f0105124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105127:	8b 40 48             	mov    0x48(%eax),%eax
f010512a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010512d:	8b 52 44             	mov    0x44(%edx),%edx
f0105130:	89 50 44             	mov    %edx,0x44(%eax)
f0105133:	eb 14                	jmp    f0105149 <sched_exit_env+0x144>
f0105135:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105138:	8b 40 44             	mov    0x44(%eax),%eax
f010513b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010513e:	c1 e2 04             	shl    $0x4,%edx
f0105141:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105147:	89 02                	mov    %eax,(%edx)
f0105149:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105156:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010515d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105160:	c1 e0 04             	shl    $0x4,%eax
f0105163:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105168:	8b 00                	mov    (%eax),%eax
f010516a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010516d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105170:	c1 e0 04             	shl    $0x4,%eax
f0105173:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105178:	89 10                	mov    %edx,(%eax)
						found = 1;
f010517a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105181:	eb 50                	jmp    f01051d3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105183:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105186:	c1 e0 04             	shl    $0x4,%eax
f0105189:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f010518e:	8b 00                	mov    (%eax),%eax
f0105190:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105193:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105197:	74 08                	je     f01051a1 <sched_exit_env+0x19c>
f0105199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010519c:	8b 40 44             	mov    0x44(%eax),%eax
f010519f:	eb 05                	jmp    f01051a6 <sched_exit_env+0x1a1>
f01051a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01051a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01051a9:	c1 e2 04             	shl    $0x4,%edx
f01051ac:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f01051b2:	89 02                	mov    %eax,(%edx)
f01051b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051b7:	c1 e0 04             	shl    $0x4,%eax
f01051ba:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f01051bf:	8b 00                	mov    (%eax),%eax
f01051c1:	85 c0                	test   %eax,%eax
f01051c3:	0f 85 f6 fe ff ff    	jne    f01050bf <sched_exit_env+0xba>
f01051c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051cd:	0f 85 ec fe ff ff    	jne    f01050bf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01051d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051d7:	75 16                	jne    f01051ef <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01051d9:	ff 45 ec             	incl   -0x14(%ebp)
f01051dc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01051e1:	0f b6 c0             	movzbl %al,%eax
f01051e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01051e7:	0f 8f a1 fe ff ff    	jg     f010508e <sched_exit_env+0x89>
f01051ed:	eb 01                	jmp    f01051f0 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01051ef:	90                   	nop
		}
	}
	if (!found)
f01051f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051f4:	75 1c                	jne    f0105212 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01051f6:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01051fb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051fe:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105201:	75 0f                	jne    f0105212 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105203:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105208:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010520b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105212:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105216:	74 2a                	je     f0105242 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105218:	83 ec 0c             	sub    $0xc,%esp
f010521b:	ff 75 f4             	pushl  -0xc(%ebp)
f010521e:	e8 5c fc ff ff       	call   f0104e7f <sched_insert_exit>
f0105223:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105226:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010522b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010522e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105231:	75 0f                	jne    f0105242 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105233:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f010523a:	00 00 00 
			fos_scheduler();
f010523d:	e8 0b 0c 00 00       	call   f0105e4d <fos_scheduler>
		}
	}
}
f0105242:	90                   	nop
f0105243:	c9                   	leave  
f0105244:	c3                   	ret    

f0105245 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105245:	55                   	push   %ebp
f0105246:	89 e5                	mov    %esp,%ebp
f0105248:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010524b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105252:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010525d:	0f 85 9d 00 00 00    	jne    f0105300 <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105263:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105268:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010526b:	eb 64                	jmp    f01052d1 <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f010526d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105270:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105273:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105276:	75 51                	jne    f01052c9 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527b:	8d 50 5c             	lea    0x5c(%eax),%edx
f010527e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105281:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105284:	83 ec 04             	sub    $0x4,%esp
f0105287:	52                   	push   %edx
f0105288:	50                   	push   %eax
f0105289:	68 64 16 13 f0       	push   $0xf0131664
f010528e:	e8 9e bb ff ff       	call   f0100e31 <cprintf>
f0105293:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105296:	83 ec 0c             	sub    $0xc,%esp
f0105299:	ff 75 f4             	pushl  -0xc(%ebp)
f010529c:	e8 39 fb ff ff       	call   f0104dda <sched_remove_new>
f01052a1:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01052a4:	83 ec 0c             	sub    $0xc,%esp
f01052a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01052aa:	e8 2e 43 00 00       	call   f01095dd <env_free>
f01052af:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01052b2:	83 ec 0c             	sub    $0xc,%esp
f01052b5:	68 89 16 13 f0       	push   $0xf0131689
f01052ba:	e8 72 bb ff ff       	call   f0100e31 <cprintf>
f01052bf:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052c2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052c9:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01052ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052d5:	74 08                	je     f01052df <sched_kill_env+0x9a>
f01052d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052da:	8b 40 44             	mov    0x44(%eax),%eax
f01052dd:	eb 05                	jmp    f01052e4 <sched_kill_env+0x9f>
f01052df:	b8 00 00 00 00       	mov    $0x0,%eax
f01052e4:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f01052e9:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01052ee:	85 c0                	test   %eax,%eax
f01052f0:	0f 85 77 ff ff ff    	jne    f010526d <sched_kill_env+0x28>
f01052f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052fa:	0f 85 6d ff ff ff    	jne    f010526d <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	0f 85 aa 01 00 00    	jne    f01054b4 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010530a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105311:	e9 8a 01 00 00       	jmp    f01054a0 <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105316:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105319:	c1 e0 04             	shl    $0x4,%eax
f010531c:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105321:	8b 00                	mov    (%eax),%eax
f0105323:	85 c0                	test   %eax,%eax
f0105325:	0f 84 6c 01 00 00    	je     f0105497 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f010532b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105332:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105335:	c1 e0 04             	shl    $0x4,%eax
f0105338:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f010533d:	8b 00                	mov    (%eax),%eax
f010533f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105342:	e9 10 01 00 00       	jmp    f0105457 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105347:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010534d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105350:	0f 85 f1 00 00 00    	jne    f0105447 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105359:	8d 50 5c             	lea    0x5c(%eax),%edx
f010535c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010535f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105362:	ff 75 ec             	pushl  -0x14(%ebp)
f0105365:	52                   	push   %edx
f0105366:	50                   	push   %eax
f0105367:	68 90 16 13 f0       	push   $0xf0131690
f010536c:	e8 c0 ba ff ff       	call   f0100e31 <cprintf>
f0105371:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105374:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105378:	75 17                	jne    f0105391 <sched_kill_env+0x14c>
f010537a:	83 ec 04             	sub    $0x4,%esp
f010537d:	68 43 16 13 f0       	push   $0xf0131643
f0105382:	68 54 01 00 00       	push   $0x154
f0105387:	68 07 16 13 f0       	push   $0xf0131607
f010538c:	e8 1f ae ff ff       	call   f01001b0 <_panic>
f0105391:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105394:	8b 40 44             	mov    0x44(%eax),%eax
f0105397:	85 c0                	test   %eax,%eax
f0105399:	74 11                	je     f01053ac <sched_kill_env+0x167>
f010539b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539e:	8b 40 44             	mov    0x44(%eax),%eax
f01053a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053a4:	8b 52 48             	mov    0x48(%edx),%edx
f01053a7:	89 50 48             	mov    %edx,0x48(%eax)
f01053aa:	eb 14                	jmp    f01053c0 <sched_kill_env+0x17b>
f01053ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053af:	8b 40 48             	mov    0x48(%eax),%eax
f01053b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053b5:	c1 e2 04             	shl    $0x4,%edx
f01053b8:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f01053be:	89 02                	mov    %eax,(%edx)
f01053c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c3:	8b 40 48             	mov    0x48(%eax),%eax
f01053c6:	85 c0                	test   %eax,%eax
f01053c8:	74 11                	je     f01053db <sched_kill_env+0x196>
f01053ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053cd:	8b 40 48             	mov    0x48(%eax),%eax
f01053d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d3:	8b 52 44             	mov    0x44(%edx),%edx
f01053d6:	89 50 44             	mov    %edx,0x44(%eax)
f01053d9:	eb 14                	jmp    f01053ef <sched_kill_env+0x1aa>
f01053db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053de:	8b 40 44             	mov    0x44(%eax),%eax
f01053e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e4:	c1 e2 04             	shl    $0x4,%edx
f01053e7:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f01053ed:	89 02                	mov    %eax,(%edx)
f01053ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105403:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105406:	c1 e0 04             	shl    $0x4,%eax
f0105409:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f010540e:	8b 00                	mov    (%eax),%eax
f0105410:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105413:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105416:	c1 e0 04             	shl    $0x4,%eax
f0105419:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f010541e:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f0105420:	83 ec 0c             	sub    $0xc,%esp
f0105423:	ff 75 f4             	pushl  -0xc(%ebp)
f0105426:	e8 b2 41 00 00       	call   f01095dd <env_free>
f010542b:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010542e:	83 ec 0c             	sub    $0xc,%esp
f0105431:	68 89 16 13 f0       	push   $0xf0131689
f0105436:	e8 f6 b9 ff ff       	call   f0100e31 <cprintf>
f010543b:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010543e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105445:	eb 50                	jmp    f0105497 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105447:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010544a:	c1 e0 04             	shl    $0x4,%eax
f010544d:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105452:	8b 00                	mov    (%eax),%eax
f0105454:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105457:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010545b:	74 08                	je     f0105465 <sched_kill_env+0x220>
f010545d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105460:	8b 40 44             	mov    0x44(%eax),%eax
f0105463:	eb 05                	jmp    f010546a <sched_kill_env+0x225>
f0105465:	b8 00 00 00 00       	mov    $0x0,%eax
f010546a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010546d:	c1 e2 04             	shl    $0x4,%edx
f0105470:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105476:	89 02                	mov    %eax,(%edx)
f0105478:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010547b:	c1 e0 04             	shl    $0x4,%eax
f010547e:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105483:	8b 00                	mov    (%eax),%eax
f0105485:	85 c0                	test   %eax,%eax
f0105487:	0f 85 ba fe ff ff    	jne    f0105347 <sched_kill_env+0x102>
f010548d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105491:	0f 85 b0 fe ff ff    	jne    f0105347 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105497:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010549b:	75 16                	jne    f01054b3 <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010549d:	ff 45 ec             	incl   -0x14(%ebp)
f01054a0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01054a5:	0f b6 c0             	movzbl %al,%eax
f01054a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01054ab:	0f 8f 65 fe ff ff    	jg     f0105316 <sched_kill_env+0xd1>
f01054b1:	eb 01                	jmp    f01054b4 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f01054b3:	90                   	nop
		}
	}
	if (!found)
f01054b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054b8:	0f 85 a4 00 00 00    	jne    f0105562 <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f01054be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01054c5:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f01054ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054cd:	eb 64                	jmp    f0105533 <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f01054cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054d8:	75 51                	jne    f010552b <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	8d 50 5c             	lea    0x5c(%eax),%edx
f01054e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054e6:	83 ec 04             	sub    $0x4,%esp
f01054e9:	52                   	push   %edx
f01054ea:	50                   	push   %eax
f01054eb:	68 bc 16 13 f0       	push   $0xf01316bc
f01054f0:	e8 3c b9 ff ff       	call   f0100e31 <cprintf>
f01054f5:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 bf f9 ff ff       	call   f0104ec2 <sched_remove_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105506:	83 ec 0c             	sub    $0xc,%esp
f0105509:	ff 75 f4             	pushl  -0xc(%ebp)
f010550c:	e8 cc 40 00 00       	call   f01095dd <env_free>
f0105511:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	68 89 16 13 f0       	push   $0xf0131689
f010551c:	e8 10 b9 ff ff       	call   f0100e31 <cprintf>
f0105521:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105524:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010552b:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105530:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105533:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105537:	74 08                	je     f0105541 <sched_kill_env+0x2fc>
f0105539:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010553c:	8b 40 44             	mov    0x44(%eax),%eax
f010553f:	eb 05                	jmp    f0105546 <sched_kill_env+0x301>
f0105541:	b8 00 00 00 00       	mov    $0x0,%eax
f0105546:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f010554b:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105550:	85 c0                	test   %eax,%eax
f0105552:	0f 85 77 ff ff ff    	jne    f01054cf <sched_kill_env+0x28a>
f0105558:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010555c:	0f 85 6d ff ff ff    	jne    f01054cf <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f0105562:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105566:	0f 85 9d 00 00 00    	jne    f0105609 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f010556c:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105571:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105574:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105577:	0f 85 8c 00 00 00    	jne    f0105609 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f010557d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105582:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105588:	8b 40 54             	mov    0x54(%eax),%eax
f010558b:	83 f8 02             	cmp    $0x2,%eax
f010558e:	74 19                	je     f01055a9 <sched_kill_env+0x364>
f0105590:	68 e4 16 13 f0       	push   $0xf01316e4
f0105595:	68 f2 15 13 f0       	push   $0xf01315f2
f010559a:	68 77 01 00 00       	push   $0x177
f010559f:	68 07 16 13 f0       	push   $0xf0131607
f01055a4:	e8 07 ac ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01055a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055ac:	8d 50 5c             	lea    0x5c(%eax),%edx
f01055af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055b5:	83 ec 04             	sub    $0x4,%esp
f01055b8:	52                   	push   %edx
f01055b9:	50                   	push   %eax
f01055ba:	68 08 17 13 f0       	push   $0xf0131708
f01055bf:	e8 6d b8 ff ff       	call   f0100e31 <cprintf>
f01055c4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01055c7:	83 ec 0c             	sub    $0xc,%esp
f01055ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01055cd:	e8 0b 40 00 00       	call   f01095dd <env_free>
f01055d2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01055d5:	83 ec 0c             	sub    $0xc,%esp
f01055d8:	68 89 16 13 f0       	push   $0xf0131689
f01055dd:	e8 4f b8 ff ff       	call   f0100e31 <cprintf>
f01055e2:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01055e5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01055ec:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01055f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01055f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01055f7:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01055fa:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105601:	00 00 00 
			fos_scheduler();
f0105604:	e8 44 08 00 00       	call   f0105e4d <fos_scheduler>
		}
	}
}
f0105609:	90                   	nop
f010560a:	c9                   	leave  
f010560b:	c3                   	ret    

f010560c <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f010560c:	55                   	push   %ebp
f010560d:	89 e5                	mov    %esp,%ebp
f010560f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105612:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105617:	85 c0                	test   %eax,%eax
f0105619:	74 69                	je     f0105684 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010561b:	83 ec 0c             	sub    $0xc,%esp
f010561e:	68 34 17 13 f0       	push   $0xf0131734
f0105623:	e8 09 b8 ff ff       	call   f0100e31 <cprintf>
f0105628:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562b:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105630:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105633:	eb 26                	jmp    f010565b <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105638:	8d 50 5c             	lea    0x5c(%eax),%edx
f010563b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105641:	83 ec 04             	sub    $0x4,%esp
f0105644:	52                   	push   %edx
f0105645:	50                   	push   %eax
f0105646:	68 56 17 13 f0       	push   $0xf0131756
f010564b:	e8 e1 b7 ff ff       	call   f0100e31 <cprintf>
f0105650:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105653:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105658:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010565b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010565f:	74 08                	je     f0105669 <sched_print_all+0x5d>
f0105661:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105664:	8b 40 44             	mov    0x44(%eax),%eax
f0105667:	eb 05                	jmp    f010566e <sched_print_all+0x62>
f0105669:	b8 00 00 00 00       	mov    $0x0,%eax
f010566e:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105673:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105678:	85 c0                	test   %eax,%eax
f010567a:	75 b9                	jne    f0105635 <sched_print_all+0x29>
f010567c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105680:	75 b3                	jne    f0105635 <sched_print_all+0x29>
f0105682:	eb 10                	jmp    f0105694 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105684:	83 ec 0c             	sub    $0xc,%esp
f0105687:	68 60 17 13 f0       	push   $0xf0131760
f010568c:	e8 a0 b7 ff ff       	call   f0100e31 <cprintf>
f0105691:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105694:	83 ec 0c             	sub    $0xc,%esp
f0105697:	68 7c 17 13 f0       	push   $0xf013177c
f010569c:	e8 90 b7 ff ff       	call   f0100e31 <cprintf>
f01056a1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01056ab:	e9 c8 00 00 00       	jmp    f0105778 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01056b3:	c1 e0 04             	shl    $0x4,%eax
f01056b6:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01056bb:	8b 00                	mov    (%eax),%eax
f01056bd:	85 c0                	test   %eax,%eax
f01056bf:	0f 84 8d 00 00 00    	je     f0105752 <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f01056c5:	83 ec 08             	sub    $0x8,%esp
f01056c8:	ff 75 f0             	pushl  -0x10(%ebp)
f01056cb:	68 b0 17 13 f0       	push   $0xf01317b0
f01056d0:	e8 5c b7 ff ff       	call   f0100e31 <cprintf>
f01056d5:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01056db:	c1 e0 04             	shl    $0x4,%eax
f01056de:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f01056e3:	8b 00                	mov    (%eax),%eax
f01056e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056e8:	eb 2e                	jmp    f0105718 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01056ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056ed:	8d 50 5c             	lea    0x5c(%eax),%edx
f01056f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056f6:	83 ec 04             	sub    $0x4,%esp
f01056f9:	52                   	push   %edx
f01056fa:	50                   	push   %eax
f01056fb:	68 56 17 13 f0       	push   $0xf0131756
f0105700:	e8 2c b7 ff ff       	call   f0100e31 <cprintf>
f0105705:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105708:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010570b:	c1 e0 04             	shl    $0x4,%eax
f010570e:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105713:	8b 00                	mov    (%eax),%eax
f0105715:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105718:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010571c:	74 08                	je     f0105726 <sched_print_all+0x11a>
f010571e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105721:	8b 40 44             	mov    0x44(%eax),%eax
f0105724:	eb 05                	jmp    f010572b <sched_print_all+0x11f>
f0105726:	b8 00 00 00 00       	mov    $0x0,%eax
f010572b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010572e:	c1 e2 04             	shl    $0x4,%edx
f0105731:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105737:	89 02                	mov    %eax,(%edx)
f0105739:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010573c:	c1 e0 04             	shl    $0x4,%eax
f010573f:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105744:	8b 00                	mov    (%eax),%eax
f0105746:	85 c0                	test   %eax,%eax
f0105748:	75 a0                	jne    f01056ea <sched_print_all+0xde>
f010574a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010574e:	75 9a                	jne    f01056ea <sched_print_all+0xde>
f0105750:	eb 13                	jmp    f0105765 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105752:	83 ec 08             	sub    $0x8,%esp
f0105755:	ff 75 f0             	pushl  -0x10(%ebp)
f0105758:	68 d8 17 13 f0       	push   $0xf01317d8
f010575d:	e8 cf b6 ff ff       	call   f0100e31 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105765:	83 ec 0c             	sub    $0xc,%esp
f0105768:	68 7c 17 13 f0       	push   $0xf013177c
f010576d:	e8 bf b6 ff ff       	call   f0100e31 <cprintf>
f0105772:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105775:	ff 45 f0             	incl   -0x10(%ebp)
f0105778:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f010577d:	0f b6 c0             	movzbl %al,%eax
f0105780:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105783:	0f 8f 27 ff ff ff    	jg     f01056b0 <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105789:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f010578e:	85 c0                	test   %eax,%eax
f0105790:	74 69                	je     f01057fb <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105792:	83 ec 0c             	sub    $0xc,%esp
f0105795:	68 fc 17 13 f0       	push   $0xf01317fc
f010579a:	e8 92 b6 ff ff       	call   f0100e31 <cprintf>
f010579f:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057a2:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f01057a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057aa:	eb 26                	jmp    f01057d2 <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01057ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057af:	8d 50 5c             	lea    0x5c(%eax),%edx
f01057b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057b8:	83 ec 04             	sub    $0x4,%esp
f01057bb:	52                   	push   %edx
f01057bc:	50                   	push   %eax
f01057bd:	68 56 17 13 f0       	push   $0xf0131756
f01057c2:	e8 6a b6 ff ff       	call   f0100e31 <cprintf>
f01057c7:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057ca:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f01057cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057d6:	74 08                	je     f01057e0 <sched_print_all+0x1d4>
f01057d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057db:	8b 40 44             	mov    0x44(%eax),%eax
f01057de:	eb 05                	jmp    f01057e5 <sched_print_all+0x1d9>
f01057e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01057e5:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f01057ea:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f01057ef:	85 c0                	test   %eax,%eax
f01057f1:	75 b9                	jne    f01057ac <sched_print_all+0x1a0>
f01057f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057f7:	75 b3                	jne    f01057ac <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f01057f9:	eb 10                	jmp    f010580b <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01057fb:	83 ec 0c             	sub    $0xc,%esp
f01057fe:	68 1e 18 13 f0       	push   $0xf013181e
f0105803:	e8 29 b6 ff ff       	call   f0100e31 <cprintf>
f0105808:	83 c4 10             	add    $0x10,%esp
	}
}
f010580b:	90                   	nop
f010580c:	c9                   	leave  
f010580d:	c3                   	ret    

f010580e <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f010580e:	55                   	push   %ebp
f010580f:	89 e5                	mov    %esp,%ebp
f0105811:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105814:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010581b:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	eb 24                	jmp    f0105849 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105825:	83 ec 0c             	sub    $0xc,%esp
f0105828:	ff 75 f4             	pushl  -0xc(%ebp)
f010582b:	e8 aa f5 ff ff       	call   f0104dda <sched_remove_new>
f0105830:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105833:	83 ec 0c             	sub    $0xc,%esp
f0105836:	ff 75 f4             	pushl  -0xc(%ebp)
f0105839:	e8 30 f4 ff ff       	call   f0104c6e <sched_insert_ready0>
f010583e:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105841:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105846:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584d:	74 08                	je     f0105857 <sched_run_all+0x49>
f010584f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105852:	8b 40 44             	mov    0x44(%eax),%eax
f0105855:	eb 05                	jmp    f010585c <sched_run_all+0x4e>
f0105857:	b8 00 00 00 00       	mov    $0x0,%eax
f010585c:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105861:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f0105866:	85 c0                	test   %eax,%eax
f0105868:	75 bb                	jne    f0105825 <sched_run_all+0x17>
f010586a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010586e:	75 b5                	jne    f0105825 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105870:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	75 05                	jne    f010587e <sched_run_all+0x70>
		fos_scheduler();
f0105879:	e8 cf 05 00 00       	call   f0105e4d <fos_scheduler>
}
f010587e:	90                   	nop
f010587f:	c9                   	leave  
f0105880:	c3                   	ret    

f0105881 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105881:	55                   	push   %ebp
f0105882:	89 e5                	mov    %esp,%ebp
f0105884:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105887:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f010588c:	85 c0                	test   %eax,%eax
f010588e:	0f 84 95 00 00 00    	je     f0105929 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105894:	83 ec 0c             	sub    $0xc,%esp
f0105897:	68 3c 18 13 f0       	push   $0xf013183c
f010589c:	e8 90 b5 ff ff       	call   f0100e31 <cprintf>
f01058a1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01058a4:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f01058a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ac:	eb 52                	jmp    f0105900 <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b1:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ba:	83 ec 04             	sub    $0x4,%esp
f01058bd:	52                   	push   %edx
f01058be:	50                   	push   %eax
f01058bf:	68 68 18 13 f0       	push   $0xf0131868
f01058c4:	e8 68 b5 ff ff       	call   f0100e31 <cprintf>
f01058c9:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f01058cc:	83 ec 0c             	sub    $0xc,%esp
f01058cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d2:	e8 03 f5 ff ff       	call   f0104dda <sched_remove_new>
f01058d7:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058da:	83 ec 0c             	sub    $0xc,%esp
f01058dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01058e0:	e8 f8 3c 00 00       	call   f01095dd <env_free>
f01058e5:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058e8:	83 ec 0c             	sub    $0xc,%esp
f01058eb:	68 89 16 13 f0       	push   $0xf0131689
f01058f0:	e8 3c b5 ff ff       	call   f0100e31 <cprintf>
f01058f5:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f01058f8:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f01058fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105904:	74 08                	je     f010590e <sched_kill_all+0x8d>
f0105906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105909:	8b 40 44             	mov    0x44(%eax),%eax
f010590c:	eb 05                	jmp    f0105913 <sched_kill_all+0x92>
f010590e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105913:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0105918:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010591d:	85 c0                	test   %eax,%eax
f010591f:	75 8d                	jne    f01058ae <sched_kill_all+0x2d>
f0105921:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105925:	75 87                	jne    f01058ae <sched_kill_all+0x2d>
f0105927:	eb 10                	jmp    f0105939 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105929:	83 ec 0c             	sub    $0xc,%esp
f010592c:	68 7b 18 13 f0       	push   $0xf013187b
f0105931:	e8 fb b4 ff ff       	call   f0100e31 <cprintf>
f0105936:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105939:	83 ec 0c             	sub    $0xc,%esp
f010593c:	68 7c 17 13 f0       	push   $0xf013177c
f0105941:	e8 eb b4 ff ff       	call   f0100e31 <cprintf>
f0105946:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105949:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105950:	e9 9d 01 00 00       	jmp    f0105af2 <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105955:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105960:	8b 00                	mov    (%eax),%eax
f0105962:	85 c0                	test   %eax,%eax
f0105964:	0f 84 62 01 00 00    	je     f0105acc <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f010596a:	83 ec 08             	sub    $0x8,%esp
f010596d:	ff 75 f0             	pushl  -0x10(%ebp)
f0105970:	68 98 18 13 f0       	push   $0xf0131898
f0105975:	e8 b7 b4 ff ff       	call   f0100e31 <cprintf>
f010597a:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010597d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105980:	c1 e0 04             	shl    $0x4,%eax
f0105983:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105988:	8b 00                	mov    (%eax),%eax
f010598a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010598d:	e9 f8 00 00 00       	jmp    f0105a8a <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105995:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010599b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010599e:	83 ec 04             	sub    $0x4,%esp
f01059a1:	52                   	push   %edx
f01059a2:	50                   	push   %eax
f01059a3:	68 68 18 13 f0       	push   $0xf0131868
f01059a8:	e8 84 b4 ff ff       	call   f0100e31 <cprintf>
f01059ad:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01059b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059b4:	75 17                	jne    f01059cd <sched_kill_all+0x14c>
f01059b6:	83 ec 04             	sub    $0x4,%esp
f01059b9:	68 43 16 13 f0       	push   $0xf0131643
f01059be:	68 e5 01 00 00       	push   $0x1e5
f01059c3:	68 07 16 13 f0       	push   $0xf0131607
f01059c8:	e8 e3 a7 ff ff       	call   f01001b0 <_panic>
f01059cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059d0:	8b 40 44             	mov    0x44(%eax),%eax
f01059d3:	85 c0                	test   %eax,%eax
f01059d5:	74 11                	je     f01059e8 <sched_kill_all+0x167>
f01059d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059da:	8b 40 44             	mov    0x44(%eax),%eax
f01059dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059e0:	8b 52 48             	mov    0x48(%edx),%edx
f01059e3:	89 50 48             	mov    %edx,0x48(%eax)
f01059e6:	eb 14                	jmp    f01059fc <sched_kill_all+0x17b>
f01059e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059eb:	8b 40 48             	mov    0x48(%eax),%eax
f01059ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059f1:	c1 e2 04             	shl    $0x4,%edx
f01059f4:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f01059fa:	89 02                	mov    %eax,(%edx)
f01059fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059ff:	8b 40 48             	mov    0x48(%eax),%eax
f0105a02:	85 c0                	test   %eax,%eax
f0105a04:	74 11                	je     f0105a17 <sched_kill_all+0x196>
f0105a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a09:	8b 40 48             	mov    0x48(%eax),%eax
f0105a0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a0f:	8b 52 44             	mov    0x44(%edx),%edx
f0105a12:	89 50 44             	mov    %edx,0x44(%eax)
f0105a15:	eb 14                	jmp    f0105a2b <sched_kill_all+0x1aa>
f0105a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a1a:	8b 40 44             	mov    0x44(%eax),%eax
f0105a1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a20:	c1 e2 04             	shl    $0x4,%edx
f0105a23:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105a29:	89 02                	mov    %eax,(%edx)
f0105a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a2e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a38:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a42:	c1 e0 04             	shl    $0x4,%eax
f0105a45:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105a4a:	8b 00                	mov    (%eax),%eax
f0105a4c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105a4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a52:	c1 e0 04             	shl    $0x4,%eax
f0105a55:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105a5a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105a5c:	83 ec 0c             	sub    $0xc,%esp
f0105a5f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a62:	e8 76 3b 00 00       	call   f01095dd <env_free>
f0105a67:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105a6a:	83 ec 0c             	sub    $0xc,%esp
f0105a6d:	68 89 16 13 f0       	push   $0xf0131689
f0105a72:	e8 ba b3 ff ff       	call   f0100e31 <cprintf>
f0105a77:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7d:	c1 e0 04             	shl    $0x4,%eax
f0105a80:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105a85:	8b 00                	mov    (%eax),%eax
f0105a87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a8e:	74 08                	je     f0105a98 <sched_kill_all+0x217>
f0105a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a93:	8b 40 44             	mov    0x44(%eax),%eax
f0105a96:	eb 05                	jmp    f0105a9d <sched_kill_all+0x21c>
f0105a98:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa0:	c1 e2 04             	shl    $0x4,%edx
f0105aa3:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105aa9:	89 02                	mov    %eax,(%edx)
f0105aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aae:	c1 e0 04             	shl    $0x4,%eax
f0105ab1:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105ab6:	8b 00                	mov    (%eax),%eax
f0105ab8:	85 c0                	test   %eax,%eax
f0105aba:	0f 85 d2 fe ff ff    	jne    f0105992 <sched_kill_all+0x111>
f0105ac0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ac4:	0f 85 c8 fe ff ff    	jne    f0105992 <sched_kill_all+0x111>
f0105aca:	eb 13                	jmp    f0105adf <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105acc:	83 ec 08             	sub    $0x8,%esp
f0105acf:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ad2:	68 d8 17 13 f0       	push   $0xf01317d8
f0105ad7:	e8 55 b3 ff ff       	call   f0100e31 <cprintf>
f0105adc:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105adf:	83 ec 0c             	sub    $0xc,%esp
f0105ae2:	68 7c 17 13 f0       	push   $0xf013177c
f0105ae7:	e8 45 b3 ff ff       	call   f0100e31 <cprintf>
f0105aec:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105aef:	ff 45 f0             	incl   -0x10(%ebp)
f0105af2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0105af7:	0f b6 c0             	movzbl %al,%eax
f0105afa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105afd:	0f 8f 52 fe ff ff    	jg     f0105955 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105b03:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0105b08:	85 c0                	test   %eax,%eax
f0105b0a:	0f 84 95 00 00 00    	je     f0105ba5 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105b10:	83 ec 0c             	sub    $0xc,%esp
f0105b13:	68 cc 18 13 f0       	push   $0xf01318cc
f0105b18:	e8 14 b3 ff ff       	call   f0100e31 <cprintf>
f0105b1d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b20:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0105b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b28:	eb 52                	jmp    f0105b7c <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b2d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b36:	83 ec 04             	sub    $0x4,%esp
f0105b39:	52                   	push   %edx
f0105b3a:	50                   	push   %eax
f0105b3b:	68 68 18 13 f0       	push   $0xf0131868
f0105b40:	e8 ec b2 ff ff       	call   f0100e31 <cprintf>
f0105b45:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105b48:	83 ec 0c             	sub    $0xc,%esp
f0105b4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105b4e:	e8 6f f3 ff ff       	call   f0104ec2 <sched_remove_exit>
f0105b53:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105b56:	83 ec 0c             	sub    $0xc,%esp
f0105b59:	ff 75 f4             	pushl  -0xc(%ebp)
f0105b5c:	e8 7c 3a 00 00       	call   f01095dd <env_free>
f0105b61:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105b64:	83 ec 0c             	sub    $0xc,%esp
f0105b67:	68 89 16 13 f0       	push   $0xf0131689
f0105b6c:	e8 c0 b2 ff ff       	call   f0100e31 <cprintf>
f0105b71:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b74:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b80:	74 08                	je     f0105b8a <sched_kill_all+0x309>
f0105b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b85:	8b 40 44             	mov    0x44(%eax),%eax
f0105b88:	eb 05                	jmp    f0105b8f <sched_kill_all+0x30e>
f0105b8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0105b8f:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f0105b94:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0105b99:	85 c0                	test   %eax,%eax
f0105b9b:	75 8d                	jne    f0105b2a <sched_kill_all+0x2a9>
f0105b9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba1:	75 87                	jne    f0105b2a <sched_kill_all+0x2a9>
f0105ba3:	eb 10                	jmp    f0105bb5 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105ba5:	83 ec 0c             	sub    $0xc,%esp
f0105ba8:	68 1e 18 13 f0       	push   $0xf013181e
f0105bad:	e8 7f b2 ff ff       	call   f0100e31 <cprintf>
f0105bb2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105bb5:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105bbc:	00 00 00 
	fos_scheduler();
f0105bbf:	e8 89 02 00 00       	call   f0105e4d <fos_scheduler>

f0105bc4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105bc4:	55                   	push   %ebp
f0105bc5:	89 e5                	mov    %esp,%ebp
f0105bc7:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105bca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105bd1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105bd8:	e9 3e 01 00 00       	jmp    f0105d1b <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105be0:	c1 e0 04             	shl    $0x4,%eax
f0105be3:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105be8:	8b 00                	mov    (%eax),%eax
f0105bea:	85 c0                	test   %eax,%eax
f0105bec:	0f 84 26 01 00 00    	je     f0105d18 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105bf2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105bfc:	c1 e0 04             	shl    $0x4,%eax
f0105bff:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f0105c04:	8b 00                	mov    (%eax),%eax
f0105c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c09:	e9 ca 00 00 00       	jmp    f0105cd8 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105c0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c12:	75 17                	jne    f0105c2b <sched_exit_all_ready_envs+0x67>
f0105c14:	83 ec 04             	sub    $0x4,%esp
f0105c17:	68 43 16 13 f0       	push   $0xf0131643
f0105c1c:	68 14 02 00 00       	push   $0x214
f0105c21:	68 07 16 13 f0       	push   $0xf0131607
f0105c26:	e8 85 a5 ff ff       	call   f01001b0 <_panic>
f0105c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c2e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c31:	85 c0                	test   %eax,%eax
f0105c33:	74 11                	je     f0105c46 <sched_exit_all_ready_envs+0x82>
f0105c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c38:	8b 40 44             	mov    0x44(%eax),%eax
f0105c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c3e:	8b 52 48             	mov    0x48(%edx),%edx
f0105c41:	89 50 48             	mov    %edx,0x48(%eax)
f0105c44:	eb 14                	jmp    f0105c5a <sched_exit_all_ready_envs+0x96>
f0105c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c49:	8b 40 48             	mov    0x48(%eax),%eax
f0105c4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4f:	c1 e2 04             	shl    $0x4,%edx
f0105c52:	81 c2 24 3b 25 f0    	add    $0xf0253b24,%edx
f0105c58:	89 02                	mov    %eax,(%edx)
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 48             	mov    0x48(%eax),%eax
f0105c60:	85 c0                	test   %eax,%eax
f0105c62:	74 11                	je     f0105c75 <sched_exit_all_ready_envs+0xb1>
f0105c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c67:	8b 40 48             	mov    0x48(%eax),%eax
f0105c6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c6d:	8b 52 44             	mov    0x44(%edx),%edx
f0105c70:	89 50 44             	mov    %edx,0x44(%eax)
f0105c73:	eb 14                	jmp    f0105c89 <sched_exit_all_ready_envs+0xc5>
f0105c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c78:	8b 40 44             	mov    0x44(%eax),%eax
f0105c7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c7e:	c1 e2 04             	shl    $0x4,%edx
f0105c81:	81 c2 20 3b 25 f0    	add    $0xf0253b20,%edx
f0105c87:	89 02                	mov    %eax,(%edx)
f0105c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c8c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c96:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ca0:	c1 e0 04             	shl    $0x4,%eax
f0105ca3:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105ca8:	8b 00                	mov    (%eax),%eax
f0105caa:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cb0:	c1 e0 04             	shl    $0x4,%eax
f0105cb3:	05 2c 3b 25 f0       	add    $0xf0253b2c,%eax
f0105cb8:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0105cba:	83 ec 0c             	sub    $0xc,%esp
f0105cbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cc0:	e8 ba f1 ff ff       	call   f0104e7f <sched_insert_exit>
f0105cc5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ccb:	c1 e0 04             	shl    $0x4,%eax
f0105cce:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105cd3:	8b 00                	mov    (%eax),%eax
f0105cd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cdc:	74 08                	je     f0105ce6 <sched_exit_all_ready_envs+0x122>
f0105cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce1:	8b 40 44             	mov    0x44(%eax),%eax
f0105ce4:	eb 05                	jmp    f0105ceb <sched_exit_all_ready_envs+0x127>
f0105ce6:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ceb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cee:	c1 e2 04             	shl    $0x4,%edx
f0105cf1:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f0105cf7:	89 02                	mov    %eax,(%edx)
f0105cf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cfc:	c1 e0 04             	shl    $0x4,%eax
f0105cff:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f0105d04:	8b 00                	mov    (%eax),%eax
f0105d06:	85 c0                	test   %eax,%eax
f0105d08:	0f 85 00 ff ff ff    	jne    f0105c0e <sched_exit_all_ready_envs+0x4a>
f0105d0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d12:	0f 85 f6 fe ff ff    	jne    f0105c0e <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d18:	ff 45 f0             	incl   -0x10(%ebp)
f0105d1b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0105d20:	0f b6 c0             	movzbl %al,%eax
f0105d23:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105d26:	0f 8f b1 fe ff ff    	jg     f0105bdd <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105d2c:	90                   	nop
f0105d2d:	c9                   	leave  
f0105d2e:	c3                   	ret    

f0105d2f <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f0105d2f:	55                   	push   %ebp
f0105d30:	89 e5                	mov    %esp,%ebp
	return ticks;
f0105d32:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105d37:	8b 15 e4 be 2b f0    	mov    0xf02bbee4,%edx
}
f0105d3d:	5d                   	pop    %ebp
f0105d3e:	c3                   	ret    

f0105d3f <env_get_nice>:
int env_get_nice(struct Env* e)
{
f0105d3f:	55                   	push   %ebp
f0105d40:	89 e5                	mov    %esp,%ebp
f0105d42:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d45:	83 ec 04             	sub    $0x4,%esp
f0105d48:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d4d:	68 26 02 00 00       	push   $0x226
f0105d52:	68 07 16 13 f0       	push   $0xf0131607
f0105d57:	e8 54 a4 ff ff       	call   f01001b0 <_panic>

f0105d5c <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0105d5c:	55                   	push   %ebp
f0105d5d:	89 e5                	mov    %esp,%ebp
f0105d5f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d62:	83 ec 04             	sub    $0x4,%esp
f0105d65:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d6a:	68 2e 02 00 00       	push   $0x22e
f0105d6f:	68 07 16 13 f0       	push   $0xf0131607
f0105d74:	e8 37 a4 ff ff       	call   f01001b0 <_panic>

f0105d79 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0105d79:	55                   	push   %ebp
f0105d7a:	89 e5                	mov    %esp,%ebp
f0105d7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d7f:	83 ec 04             	sub    $0x4,%esp
f0105d82:	68 f8 18 13 f0       	push   $0xf01318f8
f0105d87:	68 35 02 00 00       	push   $0x235
f0105d8c:	68 07 16 13 f0       	push   $0xf0131607
f0105d91:	e8 1a a4 ff ff       	call   f01001b0 <_panic>

f0105d96 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0105d96:	55                   	push   %ebp
f0105d97:	89 e5                	mov    %esp,%ebp
f0105d99:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105d9c:	83 ec 04             	sub    $0x4,%esp
f0105d9f:	68 f8 18 13 f0       	push   $0xf01318f8
f0105da4:	68 3d 02 00 00       	push   $0x23d
f0105da9:	68 07 16 13 f0       	push   $0xf0131607
f0105dae:	e8 fd a3 ff ff       	call   f01001b0 <_panic>

f0105db3 <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0105db3:	55                   	push   %ebp
f0105db4:	89 e5                	mov    %esp,%ebp
f0105db6:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105dbb:	85 c0                	test   %eax,%eax
f0105dbd:	75 07                	jne    f0105dc6 <isSchedMethodRR+0x13>
f0105dbf:	b8 01 00 00 00       	mov    $0x1,%eax
f0105dc4:	eb 05                	jmp    f0105dcb <isSchedMethodRR+0x18>
f0105dc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0105dcb:	5d                   	pop    %ebp
f0105dcc:	c3                   	ret    

f0105dcd <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0105dcd:	55                   	push   %ebp
f0105dce:	89 e5                	mov    %esp,%ebp
f0105dd0:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105dd5:	83 f8 01             	cmp    $0x1,%eax
f0105dd8:	75 07                	jne    f0105de1 <isSchedMethodMLFQ+0x14>
f0105dda:	b8 01 00 00 00       	mov    $0x1,%eax
f0105ddf:	eb 05                	jmp    f0105de6 <isSchedMethodMLFQ+0x19>
f0105de1:	b8 00 00 00 00       	mov    $0x0,%eax
f0105de6:	5d                   	pop    %ebp
f0105de7:	c3                   	ret    

f0105de8 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0105de8:	55                   	push   %ebp
f0105de9:	89 e5                	mov    %esp,%ebp
f0105deb:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105df0:	83 f8 02             	cmp    $0x2,%eax
f0105df3:	75 07                	jne    f0105dfc <isSchedMethodBSD+0x14>
f0105df5:	b8 01 00 00 00       	mov    $0x1,%eax
f0105dfa:	eb 05                	jmp    f0105e01 <isSchedMethodBSD+0x19>
f0105dfc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e01:	5d                   	pop    %ebp
f0105e02:	c3                   	ret    

f0105e03 <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f0105e03:	55                   	push   %ebp
f0105e04:	89 e5                	mov    %esp,%ebp
f0105e06:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0105e09:	c7 05 94 9a 2b f0 00 	movl   $0x0,0xf02b9a94
f0105e10:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f0105e13:	83 ec 0c             	sub    $0xc,%esp
f0105e16:	6a 0a                	push   $0xa
f0105e18:	e8 2b 01 00 00       	call   f0105f48 <sched_init_RR>
f0105e1d:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0105e20:	83 ec 0c             	sub    $0xc,%esp
f0105e23:	68 b8 be 2b f0       	push   $0xf02bbeb8
f0105e28:	e8 8b eb ff ff       	call   f01049b8 <init_queue>
f0105e2d:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0105e30:	83 ec 0c             	sub    $0xc,%esp
f0105e33:	68 84 9a 2b f0       	push   $0xf02b9a84
f0105e38:	e8 7b eb ff ff       	call   f01049b8 <init_queue>
f0105e3d:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0105e40:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105e47:	00 00 00 
}
f0105e4a:	90                   	nop
f0105e4b:	c9                   	leave  
f0105e4c:	c3                   	ret    

f0105e4d <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0105e4d:	55                   	push   %ebp
f0105e4e:	89 e5                	mov    %esp,%ebp
f0105e50:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f0105e53:	e8 0c 7f 02 00       	call   f012dd64 <chk1>
	scheduler_status = SCH_STARTED;
f0105e58:	c7 05 d4 be 2b f0 01 	movl   $0x1,0xf02bbed4
f0105e5f:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0105e62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0105e69:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105e6e:	85 c0                	test   %eax,%eax
f0105e70:	75 48                	jne    f0105eba <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0105e72:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105e77:	85 c0                	test   %eax,%eax
f0105e79:	74 16                	je     f0105e91 <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0105e7b:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105e80:	83 ec 08             	sub    $0x8,%esp
f0105e83:	50                   	push   %eax
f0105e84:	68 20 3b 25 f0       	push   $0xf0253b20
f0105e89:	e8 6b eb ff ff       	call   f01049f9 <enqueue>
f0105e8e:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0105e91:	83 ec 0c             	sub    $0xc,%esp
f0105e94:	68 20 3b 25 f0       	push   $0xf0253b20
f0105e99:	e8 ec eb ff ff       	call   f0104a8a <dequeue>
f0105e9e:	83 c4 10             	add    $0x10,%esp
f0105ea1:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0105ea4:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0105ea9:	0f b6 c0             	movzbl %al,%eax
f0105eac:	83 ec 0c             	sub    $0xc,%esp
f0105eaf:	50                   	push   %eax
f0105eb0:	e8 31 e9 ff ff       	call   f01047e6 <kclock_set_quantum>
f0105eb5:	83 c4 10             	add    $0x10,%esp
f0105eb8:	eb 26                	jmp    f0105ee0 <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0105eba:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105ebf:	83 f8 01             	cmp    $0x1,%eax
f0105ec2:	75 0a                	jne    f0105ece <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0105ec4:	e8 f9 00 00 00       	call   f0105fc2 <fos_scheduler_MLFQ>
f0105ec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ecc:	eb 12                	jmp    f0105ee0 <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f0105ece:	a1 c8 be 2b f0       	mov    0xf02bbec8,%eax
f0105ed3:	83 f8 02             	cmp    $0x2,%eax
f0105ed6:	75 08                	jne    f0105ee0 <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f0105ed8:	e8 02 01 00 00       	call   f0105fdf <fos_scheduler_BSD>
f0105edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0105ee0:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0105ee5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0105ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eeb:	a3 34 32 25 f0       	mov    %eax,0xf0253234
	chk2(next_env) ;
f0105ef0:	83 ec 0c             	sub    $0xc,%esp
f0105ef3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ef6:	e8 a6 7e 02 00       	call   f012dda1 <chk2>
f0105efb:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0105efe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f01:	a3 34 32 25 f0       	mov    %eax,0xf0253234

	//sched_print_all();

	if(next_env != NULL)
f0105f06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f0a:	74 0b                	je     f0105f17 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0105f0c:	83 ec 0c             	sub    $0xc,%esp
f0105f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f12:	e8 69 36 00 00       	call   f0109580 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0105f17:	c7 05 34 32 25 f0 00 	movl   $0x0,0xf0253234
f0105f1e:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0105f21:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0105f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0105f29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f2c:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0105f2f:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105f36:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0105f39:	83 ec 0c             	sub    $0xc,%esp
f0105f3c:	6a 00                	push   $0x0
f0105f3e:	e8 0d bc ff ff       	call   f0101b50 <run_command_prompt>
f0105f43:	83 c4 10             	add    $0x10,%esp
f0105f46:	eb f1                	jmp    f0105f39 <fos_scheduler+0xec>

f0105f48 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 18             	sub    $0x18,%esp
f0105f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f51:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0105f54:	c6 05 f4 be 2b f0 01 	movb   $0x1,0xf02bbef4
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0105f5b:	8a 45 f4             	mov    -0xc(%ebp),%al
f0105f5e:	a2 a8 be 2b f0       	mov    %al,0xf02bbea8
	kclock_set_quantum(quantums[0]);
f0105f63:	a0 a8 be 2b f0       	mov    0xf02bbea8,%al
f0105f68:	0f b6 c0             	movzbl %al,%eax
f0105f6b:	83 ec 0c             	sub    $0xc,%esp
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 72 e8 ff ff       	call   f01047e6 <kclock_set_quantum>
f0105f74:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0105f77:	83 ec 0c             	sub    $0xc,%esp
f0105f7a:	68 20 3b 25 f0       	push   $0xf0253b20
f0105f7f:	e8 34 ea ff ff       	call   f01049b8 <init_queue>
f0105f84:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0105f87:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f0105f8e:	00 00 00 
	scheduler_method = SCH_RR;
f0105f91:	c7 05 c8 be 2b f0 00 	movl   $0x0,0xf02bbec8
f0105f98:	00 00 00 
	//=========================================
	//=========================================
}
f0105f9b:	90                   	nop
f0105f9c:	c9                   	leave  
f0105f9d:	c3                   	ret    

f0105f9e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0105f9e:	55                   	push   %ebp
f0105f9f:	89 e5                	mov    %esp,%ebp
f0105fa1:	83 ec 04             	sub    $0x4,%esp
f0105fa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0105fa7:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0105faa:	90                   	nop
f0105fab:	c9                   	leave  
f0105fac:	c3                   	ret    

f0105fad <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0105fad:	55                   	push   %ebp
f0105fae:	89 e5                	mov    %esp,%ebp
f0105fb0:	83 ec 08             	sub    $0x8,%esp
f0105fb3:	8b 55 08             	mov    0x8(%ebp),%edx
f0105fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fb9:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0105fbc:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f0105fbf:	90                   	nop
f0105fc0:	c9                   	leave  
f0105fc1:	c3                   	ret    

f0105fc2 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0105fc2:	55                   	push   %ebp
f0105fc3:	89 e5                	mov    %esp,%ebp
f0105fc5:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0105fc8:	83 ec 04             	sub    $0x4,%esp
f0105fcb:	68 0c 19 13 f0       	push   $0xf013190c
f0105fd0:	68 b9 00 00 00       	push   $0xb9
f0105fd5:	68 1c 19 13 f0       	push   $0xf013191c
f0105fda:	e8 d1 a1 ff ff       	call   f01001b0 <_panic>

f0105fdf <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0105fdf:	55                   	push   %ebp
f0105fe0:	89 e5                	mov    %esp,%ebp
f0105fe2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0105fe5:	83 ec 04             	sub    $0x4,%esp
f0105fe8:	68 2d 19 13 f0       	push   $0xf013192d
f0105fed:	68 c5 00 00 00       	push   $0xc5
f0105ff2:	68 1c 19 13 f0       	push   $0xf013191c
f0105ff7:	e8 b4 a1 ff ff       	call   f01001b0 <_panic>

f0105ffc <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f0105ffc:	55                   	push   %ebp
f0105ffd:	89 e5                	mov    %esp,%ebp
f0105fff:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f0106002:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0106007:	8b 15 e4 be 2b f0    	mov    0xf02bbee4,%edx
f010600d:	83 c0 01             	add    $0x1,%eax
f0106010:	83 d2 00             	adc    $0x0,%edx
f0106013:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0106018:	89 15 e4 be 2b f0    	mov    %edx,0xf02bbee4
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010601e:	83 ec 0c             	sub    $0xc,%esp
f0106021:	6a 01                	push   $0x1
f0106023:	e8 a8 73 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f0106028:	83 c4 10             	add    $0x10,%esp
f010602b:	85 c0                	test   %eax,%eax
f010602d:	74 05                	je     f0106034 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f010602f:	e8 05 00 00 00       	call   f0106039 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106034:	e8 14 fe ff ff       	call   f0105e4d <fos_scheduler>

f0106039 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106039:	55                   	push   %ebp
f010603a:	89 e5                	mov    %esp,%ebp
f010603c:	53                   	push   %ebx
f010603d:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f0106040:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0106045:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106048:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010604c:	0f 84 a9 01 00 00    	je     f01061fb <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106059:	e9 9f 00 00 00       	jmp    f01060fd <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010605e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106061:	89 d0                	mov    %edx,%eax
f0106063:	01 c0                	add    %eax,%eax
f0106065:	01 d0                	add    %edx,%eax
f0106067:	c1 e0 03             	shl    $0x3,%eax
f010606a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0106070:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106073:	01 d0                	add    %edx,%eax
f0106075:	83 c0 08             	add    $0x8,%eax
f0106078:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	8a 40 04             	mov    0x4(%eax),%al
f0106081:	3c 01                	cmp    $0x1,%al
f0106083:	74 74                	je     f01060f9 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106085:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106088:	8b 00                	mov    (%eax),%eax
f010608a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f010608d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106090:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106096:	83 ec 08             	sub    $0x8,%esp
f0106099:	ff 75 e4             	pushl  -0x1c(%ebp)
f010609c:	50                   	push   %eax
f010609d:	e8 75 1c 00 00       	call   f0107d17 <pt_get_page_permissions>
f01060a2:	83 c4 10             	add    $0x10,%esp
f01060a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f01060a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060ab:	8b 40 08             	mov    0x8(%eax),%eax
f01060ae:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f01060b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060b4:	83 e0 20             	and    $0x20,%eax
f01060b7:	85 c0                	test   %eax,%eax
f01060b9:	74 2e                	je     f01060e9 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01060bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060be:	c1 e8 02             	shr    $0x2,%eax
f01060c1:	0d 00 00 00 80       	or     $0x80000000,%eax
f01060c6:	89 c2                	mov    %eax,%edx
f01060c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060cb:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f01060ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060d1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01060d7:	6a 20                	push   $0x20
f01060d9:	6a 00                	push   $0x0
f01060db:	ff 75 e4             	pushl  -0x1c(%ebp)
f01060de:	50                   	push   %eax
f01060df:	e8 6f 1b 00 00       	call   f0107c53 <pt_set_page_permissions>
f01060e4:	83 c4 10             	add    $0x10,%esp
f01060e7:	eb 11                	jmp    f01060fa <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01060e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060ec:	c1 e8 02             	shr    $0x2,%eax
f01060ef:	89 c2                	mov    %eax,%edx
f01060f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060f4:	89 50 08             	mov    %edx,0x8(%eax)
f01060f7:	eb 01                	jmp    f01060fa <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01060f9:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01060fa:	ff 45 f4             	incl   -0xc(%ebp)
f01060fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106100:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0106106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106109:	39 c2                	cmp    %eax,%edx
f010610b:	0f 87 4d ff ff ff    	ja     f010605e <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106111:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106118:	e9 d4 00 00 00       	jmp    f01061f1 <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010611d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106120:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106123:	89 d0                	mov    %edx,%eax
f0106125:	01 c0                	add    %eax,%eax
f0106127:	01 d0                	add    %edx,%eax
f0106129:	c1 e0 03             	shl    $0x3,%eax
f010612c:	01 c8                	add    %ecx,%eax
f010612e:	05 84 d5 01 00       	add    $0x1d584,%eax
f0106133:	8a 00                	mov    (%eax),%al
f0106135:	3c 01                	cmp    $0x1,%al
f0106137:	0f 84 b1 00 00 00    	je     f01061ee <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010613d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106140:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106143:	89 d0                	mov    %edx,%eax
f0106145:	01 c0                	add    %eax,%eax
f0106147:	01 d0                	add    %edx,%eax
f0106149:	c1 e0 03             	shl    $0x3,%eax
f010614c:	01 c8                	add    %ecx,%eax
f010614e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0106153:	8b 00                	mov    (%eax),%eax
f0106155:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106158:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010615b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010615e:	89 d0                	mov    %edx,%eax
f0106160:	01 c0                	add    %eax,%eax
f0106162:	01 d0                	add    %edx,%eax
f0106164:	c1 e0 03             	shl    $0x3,%eax
f0106167:	01 c8                	add    %ecx,%eax
f0106169:	05 88 d5 01 00       	add    $0x1d588,%eax
f010616e:	8b 00                	mov    (%eax),%eax
f0106170:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106173:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106176:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010617c:	83 ec 08             	sub    $0x8,%esp
f010617f:	ff 75 d8             	pushl  -0x28(%ebp)
f0106182:	50                   	push   %eax
f0106183:	e8 6b 1c 00 00       	call   f0107df3 <pd_is_table_used>
f0106188:	83 c4 10             	add    $0x10,%esp
f010618b:	85 c0                	test   %eax,%eax
f010618d:	74 3f                	je     f01061ce <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010618f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106192:	c1 e8 02             	shr    $0x2,%eax
f0106195:	0d 00 00 00 80       	or     $0x80000000,%eax
f010619a:	89 c1                	mov    %eax,%ecx
f010619c:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010619f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01061a2:	89 d0                	mov    %edx,%eax
f01061a4:	01 c0                	add    %eax,%eax
f01061a6:	01 d0                	add    %edx,%eax
f01061a8:	c1 e0 03             	shl    $0x3,%eax
f01061ab:	01 d8                	add    %ebx,%eax
f01061ad:	05 88 d5 01 00       	add    $0x1d588,%eax
f01061b2:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f01061b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01061b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01061bd:	83 ec 08             	sub    $0x8,%esp
f01061c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01061c3:	50                   	push   %eax
f01061c4:	e8 4e 1c 00 00       	call   f0107e17 <pd_set_table_unused>
f01061c9:	83 c4 10             	add    $0x10,%esp
f01061cc:	eb 20                	jmp    f01061ee <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f01061ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01061d1:	c1 e8 02             	shr    $0x2,%eax
f01061d4:	89 c1                	mov    %eax,%ecx
f01061d6:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01061d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01061dc:	89 d0                	mov    %edx,%eax
f01061de:	01 c0                	add    %eax,%eax
f01061e0:	01 d0                	add    %edx,%eax
f01061e2:	c1 e0 03             	shl    $0x3,%eax
f01061e5:	01 d8                	add    %ebx,%eax
f01061e7:	05 88 d5 01 00       	add    $0x1d588,%eax
f01061ec:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01061ee:	ff 45 f0             	incl   -0x10(%ebp)
f01061f1:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01061f5:	0f 8e 22 ff ff ff    	jle    f010611d <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01061fb:	90                   	nop
f01061fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01061ff:	c9                   	leave  
f0106200:	c3                   	ret    

f0106201 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106201:	55                   	push   %ebp
f0106202:	89 e5                	mov    %esp,%ebp
f0106204:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106207:	c7 05 2c 32 25 f0 01 	movl   $0x1,0xf025322c
f010620e:	00 00 00 
f0106211:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106218:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010621c:	8a 45 b2             	mov    -0x4e(%ebp),%al
f010621f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106222:	ee                   	out    %al,(%dx)
f0106223:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f010622a:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f010622e:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106231:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106234:	ee                   	out    %al,(%dx)
f0106235:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f010623c:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106240:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106243:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106246:	ee                   	out    %al,(%dx)
f0106247:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010624e:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106252:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106255:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106258:	ee                   	out    %al,(%dx)
f0106259:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106260:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106264:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010626a:	ee                   	out    %al,(%dx)
f010626b:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106272:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106276:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106279:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010627c:	ee                   	out    %al,(%dx)
f010627d:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106284:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106288:	8a 45 b8             	mov    -0x48(%ebp),%al
f010628b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010628e:	ee                   	out    %al,(%dx)
f010628f:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106296:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f010629a:	8a 45 b9             	mov    -0x47(%ebp),%al
f010629d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01062a0:	ee                   	out    %al,(%dx)
f01062a1:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f01062a8:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f01062ac:	8a 45 ba             	mov    -0x46(%ebp),%al
f01062af:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01062b2:	ee                   	out    %al,(%dx)
f01062b3:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f01062ba:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f01062be:	8a 45 bb             	mov    -0x45(%ebp),%al
f01062c1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01062c4:	ee                   	out    %al,(%dx)
f01062c5:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f01062cc:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f01062d0:	8a 45 bc             	mov    -0x44(%ebp),%al
f01062d3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01062d6:	ee                   	out    %al,(%dx)
f01062d7:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01062de:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01062e2:	8a 45 bd             	mov    -0x43(%ebp),%al
f01062e5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01062e8:	ee                   	out    %al,(%dx)
f01062e9:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01062f0:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01062f4:	8a 45 be             	mov    -0x42(%ebp),%al
f01062f7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01062fa:	ee                   	out    %al,(%dx)
f01062fb:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106302:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106306:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106309:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010630c:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f010630d:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f0106313:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106317:	74 15                	je     f010632e <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106319:	66 a1 4c c9 18 f0    	mov    0xf018c94c,%ax
f010631f:	0f b7 c0             	movzwl %ax,%eax
f0106322:	83 ec 0c             	sub    $0xc,%esp
f0106325:	50                   	push   %eax
f0106326:	e8 06 00 00 00       	call   f0106331 <irq_setmask_8259A>
f010632b:	83 c4 10             	add    $0x10,%esp
}
f010632e:	90                   	nop
f010632f:	c9                   	leave  
f0106330:	c3                   	ret    

f0106331 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106331:	55                   	push   %ebp
f0106332:	89 e5                	mov    %esp,%ebp
f0106334:	83 ec 14             	sub    $0x14,%esp
f0106337:	8b 45 08             	mov    0x8(%ebp),%eax
f010633a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010633e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106341:	66 a3 4c c9 18 f0    	mov    %ax,0xf018c94c
	if (!didinit)
f0106347:	a1 2c 32 25 f0       	mov    0xf025322c,%eax
f010634c:	85 c0                	test   %eax,%eax
f010634e:	74 34                	je     f0106384 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0106350:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106353:	0f b6 c0             	movzbl %al,%eax
f0106356:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f010635d:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106360:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106363:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106366:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106367:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010636a:	66 c1 e8 08          	shr    $0x8,%ax
f010636e:	0f b6 c0             	movzbl %al,%eax
f0106371:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106378:	88 45 f7             	mov    %al,-0x9(%ebp)
f010637b:	8a 45 f7             	mov    -0x9(%ebp),%al
f010637e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106381:	ee                   	out    %al,(%dx)
f0106382:	eb 01                	jmp    f0106385 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106384:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106385:	c9                   	leave  
f0106386:	c3                   	ret    

f0106387 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106387:	55                   	push   %ebp
f0106388:	89 e5                	mov    %esp,%ebp
f010638a:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f010638d:	83 ec 08             	sub    $0x8,%esp
f0106390:	68 00 10 00 00       	push   $0x1000
f0106395:	68 00 10 00 00       	push   $0x1000
f010639a:	e8 0a 02 00 00       	call   f01065a9 <boot_allocate_space>
f010639f:	83 c4 10             	add    $0x10,%esp
f01063a2:	a3 f0 be 2b f0       	mov    %eax,0xf02bbef0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063a7:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01063ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01063af:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f01063b6:	77 14                	ja     f01063cc <initialize_kernel_VM+0x45>
f01063b8:	ff 75 e8             	pushl  -0x18(%ebp)
f01063bb:	68 44 19 13 f0       	push   $0xf0131944
f01063c0:	6a 45                	push   $0x45
f01063c2:	68 78 19 13 f0       	push   $0xf0131978
f01063c7:	e8 e4 9d ff ff       	call   f01001b0 <_panic>
f01063cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01063cf:	05 00 00 00 10       	add    $0x10000000,%eax
f01063d4:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01063d9:	c7 45 e4 00 40 18 f0 	movl   $0xf0184000,-0x1c(%ebp)
f01063e0:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01063e7:	77 14                	ja     f01063fd <initialize_kernel_VM+0x76>
f01063e9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01063ec:	68 44 19 13 f0       	push   $0xf0131944
f01063f1:	6a 4d                	push   $0x4d
f01063f3:	68 78 19 13 f0       	push   $0xf0131978
f01063f8:	e8 b3 9d ff ff       	call   f01001b0 <_panic>
f01063fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106400:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106406:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010640b:	83 ec 0c             	sub    $0xc,%esp
f010640e:	6a 02                	push   $0x2
f0106410:	52                   	push   %edx
f0106411:	68 00 80 00 00       	push   $0x8000
f0106416:	68 00 80 bf ef       	push   $0xefbf8000
f010641b:	50                   	push   %eax
f010641c:	e8 fc 01 00 00       	call   f010661d <boot_map_range>
f0106421:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0106424:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f010642b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0106432:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106439:	eb 25                	jmp    f0106460 <initialize_kernel_VM+0xd9>
	{
		++nTables;
f010643b:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010643e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106441:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106446:	83 ec 04             	sub    $0x4,%esp
f0106449:	6a 01                	push   $0x1
f010644b:	52                   	push   %edx
f010644c:	50                   	push   %eax
f010644d:	e8 3f 02 00 00       	call   f0106691 <boot_get_page_table>
f0106452:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106455:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010645c:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0106460:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106464:	72 d5                	jb     f010643b <initialize_kernel_VM+0xb4>
f0106466:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010646a:	77 06                	ja     f0106472 <initialize_kernel_VM+0xeb>
f010646c:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0106470:	76 c9                	jbe    f010643b <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0106472:	8b 15 90 be 2b f0    	mov    0xf02bbe90,%edx
f0106478:	89 d0                	mov    %edx,%eax
f010647a:	01 c0                	add    %eax,%eax
f010647c:	01 d0                	add    %edx,%eax
f010647e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106485:	01 c8                	add    %ecx,%eax
f0106487:	01 d0                	add    %edx,%eax
f0106489:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010648c:	83 ec 08             	sub    $0x8,%esp
f010648f:	68 00 10 00 00       	push   $0x1000
f0106494:	ff 75 e0             	pushl  -0x20(%ebp)
f0106497:	e8 0d 01 00 00       	call   f01065a9 <boot_allocate_space>
f010649c:	83 c4 10             	add    $0x10,%esp
f010649f:	a3 d0 be 2b f0       	mov    %eax,0xf02bbed0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f01064a4:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f01064ab:	83 ec 08             	sub    $0x8,%esp
f01064ae:	68 00 10 00 00       	push   $0x1000
f01064b3:	ff 75 dc             	pushl  -0x24(%ebp)
f01064b6:	e8 ee 00 00 00       	call   f01065a9 <boot_allocate_space>
f01064bb:	83 c4 10             	add    $0x10,%esp
f01064be:	a3 10 3b 25 f0       	mov    %eax,0xf0253b10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f01064c3:	e8 fe 04 00 00       	call   f01069c6 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f01064c8:	83 ec 0c             	sub    $0xc,%esp
f01064cb:	6a 08                	push   $0x8
f01064cd:	e8 47 73 02 00       	call   f012d819 <nearest_pow2_ceil>
f01064d2:	83 c4 10             	add    $0x10,%esp
f01064d5:	83 ec 04             	sub    $0x4,%esp
f01064d8:	50                   	push   %eax
f01064d9:	6a 08                	push   $0x8
f01064db:	68 98 19 13 f0       	push   $0xf0131998
f01064e0:	e8 4c a9 ff ff       	call   f0100e31 <cprintf>
f01064e5:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01064e8:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01064ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01064f2:	83 ec 08             	sub    $0x8,%esp
f01064f5:	68 00 10 00 00       	push   $0x1000
f01064fa:	50                   	push   %eax
f01064fb:	e8 a9 00 00 00       	call   f01065a9 <boot_allocate_space>
f0106500:	83 c4 10             	add    $0x10,%esp
f0106503:	a3 30 32 25 f0       	mov    %eax,0xf0253230
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0106508:	a1 30 32 25 f0       	mov    0xf0253230,%eax
f010650d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0106510:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0106517:	77 17                	ja     f0106530 <initialize_kernel_VM+0x1a9>
f0106519:	ff 75 d4             	pushl  -0x2c(%ebp)
f010651c:	68 44 19 13 f0       	push   $0xf0131944
f0106521:	68 96 00 00 00       	push   $0x96
f0106526:	68 78 19 13 f0       	push   $0xf0131978
f010652b:	e8 80 9c ff ff       	call   f01001b0 <_panic>
f0106530:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106533:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106539:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010653c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106541:	83 ec 0c             	sub    $0xc,%esp
f0106544:	6a 04                	push   $0x4
f0106546:	51                   	push   %ecx
f0106547:	52                   	push   %edx
f0106548:	68 00 00 c0 ee       	push   $0xeec00000
f010654d:	50                   	push   %eax
f010654e:	e8 ca 00 00 00       	call   f010661d <boot_map_range>
f0106553:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106556:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010655b:	05 ec 0e 00 00       	add    $0xeec,%eax
f0106560:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0106566:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010656c:	8b 12                	mov    (%edx),%edx
f010656e:	83 ca 05             	or     $0x5,%edx
f0106571:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0106573:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106578:	83 ec 0c             	sub    $0xc,%esp
f010657b:	6a 02                	push   $0x2
f010657d:	6a 00                	push   $0x0
f010657f:	68 ff ff ff 0f       	push   $0xfffffff
f0106584:	68 00 00 00 f0       	push   $0xf0000000
f0106589:	50                   	push   %eax
f010658a:	e8 8e 00 00 00       	call   f010661d <boot_map_range>
f010658f:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106592:	e8 59 7a 02 00       	call   f012dff0 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106597:	c7 05 80 9a 2b f0 19 	movl   $0x19,0xf02b9a80
f010659e:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f01065a1:	e8 20 03 00 00       	call   f01068c6 <turn_on_paging>
}
f01065a6:	90                   	nop
f01065a7:	c9                   	leave  
f01065a8:	c3                   	ret    

f01065a9 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f01065a9:	55                   	push   %ebp
f01065aa:	89 e5                	mov    %esp,%ebp
f01065ac:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f01065af:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065b4:	85 c0                	test   %eax,%eax
f01065b6:	75 0a                	jne    f01065c2 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f01065b8:	c7 05 ec be 2b f0 2c 	movl   $0xf02de62c,0xf02bbeec
f01065bf:	e6 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f01065c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01065c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01065c8:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065cd:	89 c2                	mov    %eax,%edx
f01065cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065d2:	01 d0                	add    %edx,%eax
f01065d4:	48                   	dec    %eax
f01065d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01065d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065db:	ba 00 00 00 00       	mov    $0x0,%edx
f01065e0:	f7 75 f4             	divl   -0xc(%ebp)
f01065e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065e6:	29 d0                	sub    %edx,%eax
f01065e8:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01065ed:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01065f2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01065f5:	8b 15 ec be 2b f0    	mov    0xf02bbeec,%edx
f01065fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01065fe:	01 d0                	add    %edx,%eax
f0106600:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f0106605:	83 ec 04             	sub    $0x4,%esp
f0106608:	ff 75 08             	pushl  0x8(%ebp)
f010660b:	6a 00                	push   $0x0
f010660d:	ff 75 ec             	pushl  -0x14(%ebp)
f0106610:	e8 67 86 02 00       	call   f012ec7c <memset>
f0106615:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106618:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f010661b:	c9                   	leave  
f010661c:	c3                   	ret    

f010661d <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010661d:	55                   	push   %ebp
f010661e:	89 e5                	mov    %esp,%ebp
f0106620:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010662a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106631:	eb 53                	jmp    f0106686 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106633:	83 ec 04             	sub    $0x4,%esp
f0106636:	6a 01                	push   $0x1
f0106638:	ff 75 0c             	pushl  0xc(%ebp)
f010663b:	ff 75 08             	pushl  0x8(%ebp)
f010663e:	e8 4e 00 00 00       	call   f0106691 <boot_get_page_table>
f0106643:	83 c4 10             	add    $0x10,%esp
f0106646:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106649:	8b 45 0c             	mov    0xc(%ebp),%eax
f010664c:	c1 e8 0c             	shr    $0xc,%eax
f010664f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106657:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010665a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106661:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106664:	01 c2                	add    %eax,%edx
f0106666:	8b 45 18             	mov    0x18(%ebp),%eax
f0106669:	0b 45 14             	or     0x14(%ebp),%eax
f010666c:	83 c8 01             	or     $0x1,%eax
f010666f:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106671:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106678:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010667f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106686:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106689:	3b 45 10             	cmp    0x10(%ebp),%eax
f010668c:	72 a5                	jb     f0106633 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010668e:	90                   	nop
f010668f:	c9                   	leave  
f0106690:	c3                   	ret    

f0106691 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106691:	55                   	push   %ebp
f0106692:	89 e5                	mov    %esp,%ebp
f0106694:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106697:	8b 45 0c             	mov    0xc(%ebp),%eax
f010669a:	c1 e8 16             	shr    $0x16,%eax
f010669d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f01066a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01066a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01066aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01066ad:	01 d0                	add    %edx,%eax
f01066af:	8b 00                	mov    (%eax),%eax
f01066b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01066b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01066b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01066bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f01066bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01066c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01066c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066c8:	c1 e8 0c             	shr    $0xc,%eax
f01066cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01066ce:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01066d3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01066d6:	72 17                	jb     f01066ef <boot_get_page_table+0x5e>
f01066d8:	ff 75 e8             	pushl  -0x18(%ebp)
f01066db:	68 c0 19 13 f0       	push   $0xf01319c0
f01066e0:	68 18 01 00 00       	push   $0x118
f01066e5:	68 78 19 13 f0       	push   $0xf0131978
f01066ea:	e8 c1 9a ff ff       	call   f01001b0 <_panic>
f01066ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066f2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01066f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01066fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01066fe:	75 72                	jne    f0106772 <boot_get_page_table+0xe1>
	{
		if (create)
f0106700:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106704:	74 65                	je     f010676b <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106706:	83 ec 08             	sub    $0x8,%esp
f0106709:	68 00 10 00 00       	push   $0x1000
f010670e:	68 00 10 00 00       	push   $0x1000
f0106713:	e8 91 fe ff ff       	call   f01065a9 <boot_allocate_space>
f0106718:	83 c4 10             	add    $0x10,%esp
f010671b:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f010671e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106721:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106724:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010672b:	77 17                	ja     f0106744 <boot_get_page_table+0xb3>
f010672d:	ff 75 dc             	pushl  -0x24(%ebp)
f0106730:	68 44 19 13 f0       	push   $0xf0131944
f0106735:	68 1e 01 00 00       	push   $0x11e
f010673a:	68 78 19 13 f0       	push   $0xf0131978
f010673f:	e8 6c 9a ff ff       	call   f01001b0 <_panic>
f0106744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106747:	05 00 00 00 10       	add    $0x10000000,%eax
f010674c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f010674f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106752:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106759:	8b 45 08             	mov    0x8(%ebp),%eax
f010675c:	01 d0                	add    %edx,%eax
f010675e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106761:	83 ca 03             	or     $0x3,%edx
f0106764:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106766:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106769:	eb 0a                	jmp    f0106775 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010676b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106770:	eb 03                	jmp    f0106775 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106772:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106775:	c9                   	leave  
f0106776:	c3                   	ret    

f0106777 <nvram_read>:


int nvram_read(int r)
{
f0106777:	55                   	push   %ebp
f0106778:	89 e5                	mov    %esp,%ebp
f010677a:	53                   	push   %ebx
f010677b:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010677e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106781:	83 ec 0c             	sub    $0xc,%esp
f0106784:	50                   	push   %eax
f0106785:	e8 6a de ff ff       	call   f01045f4 <mc146818_read>
f010678a:	83 c4 10             	add    $0x10,%esp
f010678d:	89 c3                	mov    %eax,%ebx
f010678f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106792:	40                   	inc    %eax
f0106793:	83 ec 0c             	sub    $0xc,%esp
f0106796:	50                   	push   %eax
f0106797:	e8 58 de ff ff       	call   f01045f4 <mc146818_read>
f010679c:	83 c4 10             	add    $0x10,%esp
f010679f:	c1 e0 08             	shl    $0x8,%eax
f01067a2:	09 d8                	or     %ebx,%eax
}
f01067a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067a7:	c9                   	leave  
f01067a8:	c3                   	ret    

f01067a9 <detect_memory>:

void detect_memory()
{
f01067a9:	55                   	push   %ebp
f01067aa:	89 e5                	mov    %esp,%ebp
f01067ac:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f01067af:	83 ec 0c             	sub    $0xc,%esp
f01067b2:	6a 15                	push   $0x15
f01067b4:	e8 be ff ff ff       	call   f0106777 <nvram_read>
f01067b9:	83 c4 10             	add    $0x10,%esp
f01067bc:	c1 e0 0a             	shl    $0xa,%eax
f01067bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01067c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067c5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01067ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01067cd:	83 ec 0c             	sub    $0xc,%esp
f01067d0:	6a 17                	push   $0x17
f01067d2:	e8 a0 ff ff ff       	call   f0106777 <nvram_read>
f01067d7:	83 c4 10             	add    $0x10,%esp
f01067da:	c1 e0 0a             	shl    $0xa,%eax
f01067dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01067e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01067e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01067eb:	83 ec 0c             	sub    $0xc,%esp
f01067ee:	6a 34                	push   $0x34
f01067f0:	e8 82 ff ff ff       	call   f0106777 <nvram_read>
f01067f5:	83 c4 10             	add    $0x10,%esp
f01067f8:	c1 e0 10             	shl    $0x10,%eax
f01067fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01067fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106801:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106806:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106809:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010680d:	74 18                	je     f0106827 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010680f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106812:	05 00 00 00 01       	add    $0x1000000,%eax
f0106817:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010681a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010681d:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106822:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106825:	eb 19                	jmp    f0106840 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106827:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010682b:	74 0d                	je     f010683a <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010682d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106830:	05 00 00 10 00       	add    $0x100000,%eax
f0106835:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106838:	eb 06                	jmp    f0106840 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010683a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010683d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106840:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106847:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010684a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010684d:	76 32                	jbe    f0106881 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f010684f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106852:	c1 e8 0a             	shr    $0xa,%eax
f0106855:	89 c2                	mov    %eax,%edx
f0106857:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010685a:	c1 e8 0a             	shr    $0xa,%eax
f010685d:	83 ec 04             	sub    $0x4,%esp
f0106860:	52                   	push   %edx
f0106861:	50                   	push   %eax
f0106862:	68 f0 19 13 f0       	push   $0xf01319f0
f0106867:	e8 c5 a5 ff ff       	call   f0100e31 <cprintf>
f010686c:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f010686f:	83 ec 0c             	sub    $0xc,%esp
f0106872:	68 38 1a 13 f0       	push   $0xf0131a38
f0106877:	e8 b5 a5 ff ff       	call   f0100e31 <cprintf>
f010687c:	83 c4 10             	add    $0x10,%esp
		while(1);
f010687f:	eb fe                	jmp    f010687f <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106884:	c1 e8 0c             	shr    $0xc,%eax
f0106887:	a3 90 be 2b f0       	mov    %eax,0xf02bbe90

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010688c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010688f:	c1 e8 0a             	shr    $0xa,%eax
f0106892:	83 ec 08             	sub    $0x8,%esp
f0106895:	50                   	push   %eax
f0106896:	68 cc 1a 13 f0       	push   $0xf0131acc
f010689b:	e8 91 a5 ff ff       	call   f0100e31 <cprintf>
f01068a0:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01068a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01068a6:	c1 e8 0a             	shr    $0xa,%eax
f01068a9:	89 c2                	mov    %eax,%edx
f01068ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01068ae:	c1 e8 0a             	shr    $0xa,%eax
f01068b1:	83 ec 04             	sub    $0x4,%esp
f01068b4:	52                   	push   %edx
f01068b5:	50                   	push   %eax
f01068b6:	68 ed 1a 13 f0       	push   $0xf0131aed
f01068bb:	e8 71 a5 ff ff       	call   f0100e31 <cprintf>
f01068c0:	83 c4 10             	add    $0x10,%esp
}
f01068c3:	90                   	nop
f01068c4:	c9                   	leave  
f01068c5:	c3                   	ret    

f01068c6 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01068c6:	55                   	push   %ebp
f01068c7:	89 e5                	mov    %esp,%ebp
f01068c9:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01068cc:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01068d3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01068da:	eb 24                	jmp    f0106900 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01068dc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01068e1:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01068e4:	c1 e2 02             	shl    $0x2,%edx
f01068e7:	01 c2                	add    %eax,%edx
f01068e9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01068ee:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01068f1:	c1 e1 02             	shl    $0x2,%ecx
f01068f4:	01 c8                	add    %ecx,%eax
f01068f6:	8b 00                	mov    (%eax),%eax
f01068f8:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01068fa:	ff 45 fc             	incl   -0x4(%ebp)
f01068fd:	ff 45 f8             	incl   -0x8(%ebp)
f0106900:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f0106905:	c1 e8 16             	shr    $0x16,%eax
f0106908:	89 c2                	mov    %eax,%edx
f010690a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010690d:	39 c2                	cmp    %eax,%edx
f010690f:	77 cb                	ja     f01068dc <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106911:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0106916:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106919:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010691c:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f010691f:	0f 20 c0             	mov    %cr0,%eax
f0106922:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106925:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106928:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010692b:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106932:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106936:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106939:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010693c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010693f:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106942:	0f 01 15 90 c9 18 f0 	lgdtl  0xf018c990
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106949:	b8 23 00 00 00       	mov    $0x23,%eax
f010694e:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106950:	b8 23 00 00 00       	mov    $0x23,%eax
f0106955:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106957:	b8 10 00 00 00       	mov    $0x10,%eax
f010695c:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010695e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106963:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106965:	b8 10 00 00 00       	mov    $0x10,%eax
f010696a:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010696c:	ea 73 69 10 f0 08 00 	ljmp   $0x8,$0xf0106973
	asm volatile("lldt %%ax" :: "a" (0));
f0106973:	b8 00 00 00 00       	mov    $0x0,%eax
f0106978:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010697b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106982:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106989:	eb 19                	jmp    f01069a4 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010698b:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106990:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106993:	c1 e2 02             	shl    $0x2,%edx
f0106996:	01 d0                	add    %edx,%eax
f0106998:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010699e:	ff 45 f4             	incl   -0xc(%ebp)
f01069a1:	ff 45 f0             	incl   -0x10(%ebp)
f01069a4:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f01069a9:	c1 e8 16             	shr    $0x16,%eax
f01069ac:	89 c2                	mov    %eax,%edx
f01069ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069b1:	39 c2                	cmp    %eax,%edx
f01069b3:	77 d6                	ja     f010698b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01069b5:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01069ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01069bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01069c0:	0f 22 d8             	mov    %eax,%cr3
}
f01069c3:	90                   	nop
f01069c4:	c9                   	leave  
f01069c5:	c3                   	ret    

f01069c6 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01069c6:	55                   	push   %ebp
f01069c7:	89 e5                	mov    %esp,%ebp
f01069c9:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01069cc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01069d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01069d4:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01069db:	77 17                	ja     f01069f4 <setup_listing_to_all_page_tables_entries+0x2e>
f01069dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01069e0:	68 44 19 13 f0       	push   $0xf0131944
f01069e5:	68 ae 01 00 00       	push   $0x1ae
f01069ea:	68 78 19 13 f0       	push   $0xf0131978
f01069ef:	e8 bc 97 ff ff       	call   f01001b0 <_panic>
f01069f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069f7:	05 00 00 00 10       	add    $0x10000000,%eax
f01069fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01069ff:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a04:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106a09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106a0c:	83 ca 03             	or     $0x3,%edx
f0106a0f:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106a11:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a16:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106a1c:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106a21:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a24:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106a2b:	77 17                	ja     f0106a44 <setup_listing_to_all_page_tables_entries+0x7e>
f0106a2d:	ff 75 ec             	pushl  -0x14(%ebp)
f0106a30:	68 44 19 13 f0       	push   $0xf0131944
f0106a35:	68 b3 01 00 00       	push   $0x1b3
f0106a3a:	68 78 19 13 f0       	push   $0xf0131978
f0106a3f:	e8 6c 97 ff ff       	call   f01001b0 <_panic>
f0106a44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a47:	05 00 00 00 10       	add    $0x10000000,%eax
f0106a4c:	83 c8 05             	or     $0x5,%eax
f0106a4f:	89 02                	mov    %eax,(%edx)

}
f0106a51:	90                   	nop
f0106a52:	c9                   	leave  
f0106a53:	c3                   	ret    

f0106a54 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106a54:	55                   	push   %ebp
f0106a55:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5a:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f0106a60:	29 d0                	sub    %edx,%eax
f0106a62:	c1 f8 02             	sar    $0x2,%eax
f0106a65:	89 c2                	mov    %eax,%edx
f0106a67:	89 d0                	mov    %edx,%eax
f0106a69:	c1 e0 03             	shl    $0x3,%eax
f0106a6c:	01 d0                	add    %edx,%eax
f0106a6e:	c1 e0 03             	shl    $0x3,%eax
f0106a71:	01 d0                	add    %edx,%eax
f0106a73:	c1 e0 03             	shl    $0x3,%eax
f0106a76:	01 d0                	add    %edx,%eax
f0106a78:	c1 e0 03             	shl    $0x3,%eax
f0106a7b:	01 d0                	add    %edx,%eax
f0106a7d:	89 c1                	mov    %eax,%ecx
f0106a7f:	c1 e1 0f             	shl    $0xf,%ecx
f0106a82:	01 c8                	add    %ecx,%eax
f0106a84:	c1 e0 03             	shl    $0x3,%eax
f0106a87:	01 d0                	add    %edx,%eax
f0106a89:	f7 d8                	neg    %eax
}
f0106a8b:	5d                   	pop    %ebp
f0106a8c:	c3                   	ret    

f0106a8d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106a8d:	55                   	push   %ebp
f0106a8e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106a90:	ff 75 08             	pushl  0x8(%ebp)
f0106a93:	e8 bc ff ff ff       	call   f0106a54 <to_frame_number>
f0106a98:	83 c4 04             	add    $0x4,%esp
f0106a9b:	c1 e0 0c             	shl    $0xc,%eax
}
f0106a9e:	c9                   	leave  
f0106a9f:	c3                   	ret    

f0106aa0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106aa0:	55                   	push   %ebp
f0106aa1:	89 e5                	mov    %esp,%ebp
f0106aa3:	53                   	push   %ebx
f0106aa4:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aaa:	c1 e8 0c             	shr    $0xc,%eax
f0106aad:	89 c2                	mov    %eax,%edx
f0106aaf:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0106ab4:	39 c2                	cmp    %eax,%edx
f0106ab6:	72 14                	jb     f0106acc <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106ab8:	83 ec 04             	sub    $0x4,%esp
f0106abb:	68 0c 1b 13 f0       	push   $0xf0131b0c
f0106ac0:	6a 55                	push   $0x55
f0106ac2:	68 31 1b 13 f0       	push   $0xf0131b31
f0106ac7:	e8 e4 96 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106acc:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ad2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ad5:	c1 e8 0c             	shr    $0xc,%eax
f0106ad8:	89 c2                	mov    %eax,%edx
f0106ada:	89 d0                	mov    %edx,%eax
f0106adc:	01 c0                	add    %eax,%eax
f0106ade:	01 d0                	add    %edx,%eax
f0106ae0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ae7:	01 d8                	add    %ebx,%eax
f0106ae9:	01 d0                	add    %edx,%eax
f0106aeb:	01 c8                	add    %ecx,%eax
}
f0106aed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106af0:	c9                   	leave  
f0106af1:	c3                   	ret    

f0106af2 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106af2:	55                   	push   %ebp
f0106af3:	89 e5                	mov    %esp,%ebp
f0106af5:	83 ec 10             	sub    $0x10,%esp
f0106af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106afb:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106b01:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106b04:	90                   	nop
f0106b05:	c9                   	leave  
f0106b06:	c3                   	ret    

f0106b07 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106b07:	55                   	push   %ebp
f0106b08:	89 e5                	mov    %esp,%ebp
f0106b0a:	56                   	push   %esi
f0106b0b:	53                   	push   %ebx
f0106b0c:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106b0f:	c7 05 98 be 2b f0 00 	movl   $0x0,0xf02bbe98
f0106b16:	00 00 00 
f0106b19:	c7 05 9c be 2b f0 00 	movl   $0x0,0xf02bbe9c
f0106b20:	00 00 00 
f0106b23:	c7 05 a4 be 2b f0 00 	movl   $0x0,0xf02bbea4
f0106b2a:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106b2d:	c7 05 00 3b 25 f0 00 	movl   $0x0,0xf0253b00
f0106b34:	00 00 00 
f0106b37:	c7 05 04 3b 25 f0 00 	movl   $0x0,0xf0253b04
f0106b3e:	00 00 00 
f0106b41:	c7 05 0c 3b 25 f0 00 	movl   $0x0,0xf0253b0c
f0106b48:	00 00 00 

	frames_info[0].references = 1;
f0106b4b:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b50:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106b56:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b5b:	83 c0 1c             	add    $0x1c,%eax
f0106b5e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106b64:	a1 d0 be 2b f0       	mov    0xf02bbed0,%eax
f0106b69:	83 c0 38             	add    $0x38,%eax
f0106b6c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106b72:	c7 05 dc be 2b f0 00 	movl   $0xf0001000,0xf02bbedc
f0106b79:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106b7c:	c7 05 f8 be 2b f0 00 	movl   $0xf0002000,0xf02bbef8
f0106b83:	20 00 f0 
	i =0;
f0106b86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106b8d:	eb 1f                	jmp    f0106bae <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106b8f:	8b 15 dc be 2b f0    	mov    0xf02bbedc,%edx
f0106b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b98:	01 d0                	add    %edx,%eax
f0106b9a:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106b9d:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0106ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ba6:	01 d0                	add    %edx,%eax
f0106ba8:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106bab:	ff 45 f4             	incl   -0xc(%ebp)
f0106bae:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106bb5:	7e d8                	jle    f0106b8f <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106bb7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bc1:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0106bd1:	f7 75 f0             	divl   -0x10(%ebp)
f0106bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bd7:	29 d0                	sub    %edx,%eax
f0106bd9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106bdc:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106be3:	e9 20 01 00 00       	jmp    f0106d08 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106be8:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106bee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106bf1:	89 d0                	mov    %edx,%eax
f0106bf3:	01 c0                	add    %eax,%eax
f0106bf5:	01 d0                	add    %edx,%eax
f0106bf7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106bfe:	01 d8                	add    %ebx,%eax
f0106c00:	01 d0                	add    %edx,%eax
f0106c02:	01 c8                	add    %ecx,%eax
f0106c04:	83 ec 0c             	sub    $0xc,%esp
f0106c07:	50                   	push   %eax
f0106c08:	e8 31 03 00 00       	call   f0106f3e <initialize_frame_info>
f0106c0d:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106c10:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c19:	89 d0                	mov    %edx,%eax
f0106c1b:	01 c0                	add    %eax,%eax
f0106c1d:	01 d0                	add    %edx,%eax
f0106c1f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106c26:	01 d8                	add    %ebx,%eax
f0106c28:	01 d0                	add    %edx,%eax
f0106c2a:	01 c8                	add    %ecx,%eax
f0106c2c:	85 c0                	test   %eax,%eax
f0106c2e:	75 14                	jne    f0106c44 <initialize_paging+0x13d>
f0106c30:	83 ec 04             	sub    $0x4,%esp
f0106c33:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0106c38:	6a 5c                	push   $0x5c
f0106c3a:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106c3f:	e8 6c 95 ff ff       	call   f01001b0 <_panic>
f0106c44:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c4d:	89 d0                	mov    %edx,%eax
f0106c4f:	01 c0                	add    %eax,%eax
f0106c51:	01 d0                	add    %edx,%eax
f0106c53:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106c5a:	01 d8                	add    %ebx,%eax
f0106c5c:	01 d0                	add    %edx,%eax
f0106c5e:	01 c8                	add    %ecx,%eax
f0106c60:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106c66:	89 10                	mov    %edx,(%eax)
f0106c68:	8b 00                	mov    (%eax),%eax
f0106c6a:	85 c0                	test   %eax,%eax
f0106c6c:	74 27                	je     f0106c95 <initialize_paging+0x18e>
f0106c6e:	8b 0d 98 be 2b f0    	mov    0xf02bbe98,%ecx
f0106c74:	8b 1d d0 be 2b f0    	mov    0xf02bbed0,%ebx
f0106c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c7d:	89 d0                	mov    %edx,%eax
f0106c7f:	01 c0                	add    %eax,%eax
f0106c81:	01 d0                	add    %edx,%eax
f0106c83:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0106c8a:	01 f0                	add    %esi,%eax
f0106c8c:	01 d0                	add    %edx,%eax
f0106c8e:	01 d8                	add    %ebx,%eax
f0106c90:	89 41 04             	mov    %eax,0x4(%ecx)
f0106c93:	eb 21                	jmp    f0106cb6 <initialize_paging+0x1af>
f0106c95:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106c9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c9e:	89 d0                	mov    %edx,%eax
f0106ca0:	01 c0                	add    %eax,%eax
f0106ca2:	01 d0                	add    %edx,%eax
f0106ca4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106cab:	01 d8                	add    %ebx,%eax
f0106cad:	01 d0                	add    %edx,%eax
f0106caf:	01 c8                	add    %ecx,%eax
f0106cb1:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106cb6:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106cbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106cbf:	89 d0                	mov    %edx,%eax
f0106cc1:	01 c0                	add    %eax,%eax
f0106cc3:	01 d0                	add    %edx,%eax
f0106cc5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ccc:	01 d8                	add    %ebx,%eax
f0106cce:	01 d0                	add    %edx,%eax
f0106cd0:	01 c8                	add    %ecx,%eax
f0106cd2:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0106cd7:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106cdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ce0:	89 d0                	mov    %edx,%eax
f0106ce2:	01 c0                	add    %eax,%eax
f0106ce4:	01 d0                	add    %edx,%eax
f0106ce6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ced:	01 d8                	add    %ebx,%eax
f0106cef:	01 d0                	add    %edx,%eax
f0106cf1:	01 c8                	add    %ecx,%eax
f0106cf3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106cfa:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0106cff:	40                   	inc    %eax
f0106d00:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106d05:	ff 45 f4             	incl   -0xc(%ebp)
f0106d08:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0b:	85 c0                	test   %eax,%eax
f0106d0d:	79 05                	jns    f0106d14 <initialize_paging+0x20d>
f0106d0f:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106d14:	c1 f8 0c             	sar    $0xc,%eax
f0106d17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106d1a:	0f 8f c8 fe ff ff    	jg     f0106be8 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106d20:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106d27:	eb 25                	jmp    f0106d4e <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f0106d29:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106d2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106d32:	89 d0                	mov    %edx,%eax
f0106d34:	01 c0                	add    %eax,%eax
f0106d36:	01 d0                	add    %edx,%eax
f0106d38:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106d3f:	01 d8                	add    %ebx,%eax
f0106d41:	01 d0                	add    %edx,%eax
f0106d43:	01 c8                	add    %ecx,%eax
f0106d45:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106d4b:	ff 45 f4             	incl   -0xc(%ebp)
f0106d4e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106d55:	7e d2                	jle    f0106d29 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106d57:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106d5e:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f0106d63:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106d66:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106d6d:	77 14                	ja     f0106d83 <initialize_paging+0x27c>
f0106d6f:	ff 75 e0             	pushl  -0x20(%ebp)
f0106d72:	68 8c 1b 13 f0       	push   $0xf0131b8c
f0106d77:	6a 64                	push   $0x64
f0106d79:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106d7e:	e8 2d 94 ff ff       	call   f01001b0 <_panic>
f0106d83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d86:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	01 d0                	add    %edx,%eax
f0106d91:	48                   	dec    %eax
f0106d92:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106d95:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106d9d:	f7 75 e4             	divl   -0x1c(%ebp)
f0106da0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106da3:	29 d0                	sub    %edx,%eax
f0106da5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106da8:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106daf:	eb 25                	jmp    f0106dd6 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f0106db1:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106db7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106dba:	89 d0                	mov    %edx,%eax
f0106dbc:	01 c0                	add    %eax,%eax
f0106dbe:	01 d0                	add    %edx,%eax
f0106dc0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106dc7:	01 d8                	add    %ebx,%eax
f0106dc9:	01 d0                	add    %edx,%eax
f0106dcb:	01 c8                	add    %ecx,%eax
f0106dcd:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106dd3:	ff 45 f4             	incl   -0xc(%ebp)
f0106dd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dd9:	85 c0                	test   %eax,%eax
f0106ddb:	79 05                	jns    f0106de2 <initialize_paging+0x2db>
f0106ddd:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106de2:	c1 f8 0c             	sar    $0xc,%eax
f0106de5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106de8:	7f c7                	jg     f0106db1 <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106dea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ded:	85 c0                	test   %eax,%eax
f0106def:	79 05                	jns    f0106df6 <initialize_paging+0x2ef>
f0106df1:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106df6:	c1 f8 0c             	sar    $0xc,%eax
f0106df9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106dfc:	e9 20 01 00 00       	jmp    f0106f21 <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f0106e01:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e0a:	89 d0                	mov    %edx,%eax
f0106e0c:	01 c0                	add    %eax,%eax
f0106e0e:	01 d0                	add    %edx,%eax
f0106e10:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e17:	01 d8                	add    %ebx,%eax
f0106e19:	01 d0                	add    %edx,%eax
f0106e1b:	01 c8                	add    %ecx,%eax
f0106e1d:	83 ec 0c             	sub    $0xc,%esp
f0106e20:	50                   	push   %eax
f0106e21:	e8 18 01 00 00       	call   f0106f3e <initialize_frame_info>
f0106e26:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106e29:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e32:	89 d0                	mov    %edx,%eax
f0106e34:	01 c0                	add    %eax,%eax
f0106e36:	01 d0                	add    %edx,%eax
f0106e38:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e3f:	01 d8                	add    %ebx,%eax
f0106e41:	01 d0                	add    %edx,%eax
f0106e43:	01 c8                	add    %ecx,%eax
f0106e45:	85 c0                	test   %eax,%eax
f0106e47:	75 14                	jne    f0106e5d <initialize_paging+0x356>
f0106e49:	83 ec 04             	sub    $0x4,%esp
f0106e4c:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0106e51:	6a 70                	push   $0x70
f0106e53:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106e58:	e8 53 93 ff ff       	call   f01001b0 <_panic>
f0106e5d:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106e63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e66:	89 d0                	mov    %edx,%eax
f0106e68:	01 c0                	add    %eax,%eax
f0106e6a:	01 d0                	add    %edx,%eax
f0106e6c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106e73:	01 d8                	add    %ebx,%eax
f0106e75:	01 d0                	add    %edx,%eax
f0106e77:	01 c8                	add    %ecx,%eax
f0106e79:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106e7f:	89 10                	mov    %edx,(%eax)
f0106e81:	8b 00                	mov    (%eax),%eax
f0106e83:	85 c0                	test   %eax,%eax
f0106e85:	74 27                	je     f0106eae <initialize_paging+0x3a7>
f0106e87:	8b 0d 98 be 2b f0    	mov    0xf02bbe98,%ecx
f0106e8d:	8b 1d d0 be 2b f0    	mov    0xf02bbed0,%ebx
f0106e93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e96:	89 d0                	mov    %edx,%eax
f0106e98:	01 c0                	add    %eax,%eax
f0106e9a:	01 d0                	add    %edx,%eax
f0106e9c:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0106ea3:	01 f0                	add    %esi,%eax
f0106ea5:	01 d0                	add    %edx,%eax
f0106ea7:	01 d8                	add    %ebx,%eax
f0106ea9:	89 41 04             	mov    %eax,0x4(%ecx)
f0106eac:	eb 21                	jmp    f0106ecf <initialize_paging+0x3c8>
f0106eae:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106eb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106eb7:	89 d0                	mov    %edx,%eax
f0106eb9:	01 c0                	add    %eax,%eax
f0106ebb:	01 d0                	add    %edx,%eax
f0106ebd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ec4:	01 d8                	add    %ebx,%eax
f0106ec6:	01 d0                	add    %edx,%eax
f0106ec8:	01 c8                	add    %ecx,%eax
f0106eca:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106ecf:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ed5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ed8:	89 d0                	mov    %edx,%eax
f0106eda:	01 c0                	add    %eax,%eax
f0106edc:	01 d0                	add    %edx,%eax
f0106ede:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ee5:	01 d8                	add    %ebx,%eax
f0106ee7:	01 d0                	add    %edx,%eax
f0106ee9:	01 c8                	add    %ecx,%eax
f0106eeb:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0106ef0:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f0106ef6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ef9:	89 d0                	mov    %edx,%eax
f0106efb:	01 c0                	add    %eax,%eax
f0106efd:	01 d0                	add    %edx,%eax
f0106eff:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106f06:	01 d8                	add    %ebx,%eax
f0106f08:	01 d0                	add    %edx,%eax
f0106f0a:	01 c8                	add    %ecx,%eax
f0106f0c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106f13:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0106f18:	40                   	inc    %eax
f0106f19:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0106f21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f24:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0106f29:	39 c2                	cmp    %eax,%edx
f0106f2b:	0f 82 d0 fe ff ff    	jb     f0106e01 <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106f31:	e8 f2 c5 ff ff       	call   f0103528 <initialize_disk_page_file>
}
f0106f36:	90                   	nop
f0106f37:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0106f3a:	5b                   	pop    %ebx
f0106f3b:	5e                   	pop    %esi
f0106f3c:	5d                   	pop    %ebp
f0106f3d:	c3                   	ret    

f0106f3e <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106f3e:	55                   	push   %ebp
f0106f3f:	89 e5                	mov    %esp,%ebp
f0106f41:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106f44:	83 ec 04             	sub    $0x4,%esp
f0106f47:	6a 1c                	push   $0x1c
f0106f49:	6a 00                	push   $0x0
f0106f4b:	ff 75 08             	pushl  0x8(%ebp)
f0106f4e:	e8 29 7d 02 00       	call   f012ec7c <memset>
f0106f53:	83 c4 10             	add    $0x10,%esp
}
f0106f56:	90                   	nop
f0106f57:	c9                   	leave  
f0106f58:	c3                   	ret    

f0106f59 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0106f59:	55                   	push   %ebp
f0106f5a:	89 e5                	mov    %esp,%ebp
f0106f5c:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106f5f:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f0106f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f68:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106f6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f74:	8b 00                	mov    (%eax),%eax
f0106f76:	85 c0                	test   %eax,%eax
f0106f78:	75 17                	jne    f0106f91 <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106f7a:	83 ec 04             	sub    $0x4,%esp
f0106f7d:	68 c0 1b 13 f0       	push   $0xf0131bc0
f0106f82:	68 98 00 00 00       	push   $0x98
f0106f87:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106f8c:	e8 1f 92 ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f94:	8b 00                	mov    (%eax),%eax
f0106f96:	85 c0                	test   %eax,%eax
f0106f98:	75 17                	jne    f0106fb1 <allocate_frame+0x58>
f0106f9a:	83 ec 04             	sub    $0x4,%esp
f0106f9d:	68 0d 1c 13 f0       	push   $0xf0131c0d
f0106fa2:	68 9e 00 00 00       	push   $0x9e
f0106fa7:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0106fac:	e8 ff 91 ff ff       	call   f01001b0 <_panic>
f0106fb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fb4:	8b 00                	mov    (%eax),%eax
f0106fb6:	8b 00                	mov    (%eax),%eax
f0106fb8:	85 c0                	test   %eax,%eax
f0106fba:	74 14                	je     f0106fd0 <allocate_frame+0x77>
f0106fbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbf:	8b 00                	mov    (%eax),%eax
f0106fc1:	8b 00                	mov    (%eax),%eax
f0106fc3:	8b 55 08             	mov    0x8(%ebp),%edx
f0106fc6:	8b 12                	mov    (%edx),%edx
f0106fc8:	8b 52 04             	mov    0x4(%edx),%edx
f0106fcb:	89 50 04             	mov    %edx,0x4(%eax)
f0106fce:	eb 0d                	jmp    f0106fdd <allocate_frame+0x84>
f0106fd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd3:	8b 00                	mov    (%eax),%eax
f0106fd5:	8b 40 04             	mov    0x4(%eax),%eax
f0106fd8:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f0106fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe0:	8b 00                	mov    (%eax),%eax
f0106fe2:	8b 40 04             	mov    0x4(%eax),%eax
f0106fe5:	85 c0                	test   %eax,%eax
f0106fe7:	74 13                	je     f0106ffc <allocate_frame+0xa3>
f0106fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fec:	8b 00                	mov    (%eax),%eax
f0106fee:	8b 40 04             	mov    0x4(%eax),%eax
f0106ff1:	8b 55 08             	mov    0x8(%ebp),%edx
f0106ff4:	8b 12                	mov    (%edx),%edx
f0106ff6:	8b 12                	mov    (%edx),%edx
f0106ff8:	89 10                	mov    %edx,(%eax)
f0106ffa:	eb 0c                	jmp    f0107008 <allocate_frame+0xaf>
f0106ffc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fff:	8b 00                	mov    (%eax),%eax
f0107001:	8b 00                	mov    (%eax),%eax
f0107003:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f0107008:	8b 45 08             	mov    0x8(%ebp),%eax
f010700b:	8b 00                	mov    (%eax),%eax
f010700d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107013:	8b 45 08             	mov    0x8(%ebp),%eax
f0107016:	8b 00                	mov    (%eax),%eax
f0107018:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010701f:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f0107024:	48                   	dec    %eax
f0107025:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010702a:	8b 45 08             	mov    0x8(%ebp),%eax
f010702d:	8b 00                	mov    (%eax),%eax
f010702f:	8a 40 14             	mov    0x14(%eax),%al
f0107032:	84 c0                	test   %al,%al
f0107034:	74 23                	je     f0107059 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107036:	8b 45 08             	mov    0x8(%ebp),%eax
f0107039:	8b 00                	mov    (%eax),%eax
f010703b:	8b 50 0c             	mov    0xc(%eax),%edx
f010703e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107041:	8b 00                	mov    (%eax),%eax
f0107043:	8b 40 10             	mov    0x10(%eax),%eax
f0107046:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010704c:	83 ec 08             	sub    $0x8,%esp
f010704f:	52                   	push   %edx
f0107050:	50                   	push   %eax
f0107051:	e8 0a 0d 00 00       	call   f0107d60 <pt_clear_page_table_entry>
f0107056:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107059:	8b 45 08             	mov    0x8(%ebp),%eax
f010705c:	8b 00                	mov    (%eax),%eax
f010705e:	83 ec 0c             	sub    $0xc,%esp
f0107061:	50                   	push   %eax
f0107062:	e8 d7 fe ff ff       	call   f0106f3e <initialize_frame_info>
f0107067:	83 c4 10             	add    $0x10,%esp
	return 0;
f010706a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010706f:	c9                   	leave  
f0107070:	c3                   	ret    

f0107071 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0107071:	55                   	push   %ebp
f0107072:	89 e5                	mov    %esp,%ebp
f0107074:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107077:	83 ec 0c             	sub    $0xc,%esp
f010707a:	ff 75 08             	pushl  0x8(%ebp)
f010707d:	e8 bc fe ff ff       	call   f0106f3e <initialize_frame_info>
f0107082:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107085:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107089:	75 17                	jne    f01070a2 <free_frame+0x31>
f010708b:	83 ec 04             	sub    $0x4,%esp
f010708e:	68 4c 1b 13 f0       	push   $0xf0131b4c
f0107093:	68 bb 00 00 00       	push   $0xbb
f0107098:	68 6f 1b 13 f0       	push   $0xf0131b6f
f010709d:	e8 0e 91 ff ff       	call   f01001b0 <_panic>
f01070a2:	8b 15 98 be 2b f0    	mov    0xf02bbe98,%edx
f01070a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ab:	89 10                	mov    %edx,(%eax)
f01070ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b0:	8b 00                	mov    (%eax),%eax
f01070b2:	85 c0                	test   %eax,%eax
f01070b4:	74 0d                	je     f01070c3 <free_frame+0x52>
f01070b6:	a1 98 be 2b f0       	mov    0xf02bbe98,%eax
f01070bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01070be:	89 50 04             	mov    %edx,0x4(%eax)
f01070c1:	eb 08                	jmp    f01070cb <free_frame+0x5a>
f01070c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01070c6:	a3 9c be 2b f0       	mov    %eax,0xf02bbe9c
f01070cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ce:	a3 98 be 2b f0       	mov    %eax,0xf02bbe98
f01070d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01070d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070dd:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f01070e2:	40                   	inc    %eax
f01070e3:	a3 a4 be 2b f0       	mov    %eax,0xf02bbea4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01070e8:	90                   	nop
f01070e9:	c9                   	leave  
f01070ea:	c3                   	ret    

f01070eb <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01070eb:	55                   	push   %ebp
f01070ec:	89 e5                	mov    %esp,%ebp
f01070ee:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01070f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070f4:	8b 40 08             	mov    0x8(%eax),%eax
f01070f7:	48                   	dec    %eax
f01070f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01070fb:	66 89 42 08          	mov    %ax,0x8(%edx)
f01070ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0107102:	8b 40 08             	mov    0x8(%eax),%eax
f0107105:	66 85 c0             	test   %ax,%ax
f0107108:	75 0e                	jne    f0107118 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f010710a:	83 ec 0c             	sub    $0xc,%esp
f010710d:	ff 75 08             	pushl  0x8(%ebp)
f0107110:	e8 5c ff ff ff       	call   f0107071 <free_frame>
f0107115:	83 c4 10             	add    $0x10,%esp
}
f0107118:	90                   	nop
f0107119:	c9                   	leave  
f010711a:	c3                   	ret    

f010711b <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010711b:	55                   	push   %ebp
f010711c:	89 e5                	mov    %esp,%ebp
f010711e:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0107121:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107124:	c1 e8 16             	shr    $0x16,%eax
f0107127:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010712e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107131:	01 d0                	add    %edx,%eax
f0107133:	8b 00                	mov    (%eax),%eax
f0107135:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010713b:	83 e0 01             	and    $0x1,%eax
f010713e:	85 c0                	test   %eax,%eax
f0107140:	74 4e                	je     f0107190 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107142:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107145:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010714a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010714d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107150:	c1 e8 0c             	shr    $0xc,%eax
f0107153:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107156:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010715b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010715e:	72 17                	jb     f0107177 <get_page_table+0x5c>
f0107160:	ff 75 f0             	pushl  -0x10(%ebp)
f0107163:	68 2c 1c 13 f0       	push   $0xf0131c2c
f0107168:	68 e2 00 00 00       	push   $0xe2
f010716d:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107172:	e8 39 90 ff ff       	call   f01001b0 <_panic>
f0107177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010717a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010717f:	89 c2                	mov    %eax,%edx
f0107181:	8b 45 10             	mov    0x10(%ebp),%eax
f0107184:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107186:	b8 00 00 00 00       	mov    $0x0,%eax
f010718b:	e9 8f 00 00 00       	jmp    f010721f <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0107190:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107194:	74 7b                	je     f0107211 <get_page_table+0xf6>
f0107196:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107199:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010719c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010719f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01071a2:	83 ec 0c             	sub    $0xc,%esp
f01071a5:	6a 00                	push   $0x0
f01071a7:	e8 87 4f 00 00       	call   f010c133 <fault_handler>
f01071ac:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01071af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01071b2:	c1 e8 16             	shr    $0x16,%eax
f01071b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01071bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01071bf:	01 d0                	add    %edx,%eax
f01071c1:	8b 00                	mov    (%eax),%eax
f01071c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01071c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071c9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01071ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01071d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071d4:	c1 e8 0c             	shr    $0xc,%eax
f01071d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01071da:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01071df:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01071e2:	72 17                	jb     f01071fb <get_page_table+0xe0>
f01071e4:	ff 75 e8             	pushl  -0x18(%ebp)
f01071e7:	68 2c 1c 13 f0       	push   $0xf0131c2c
f01071ec:	68 fa 00 00 00       	push   $0xfa
f01071f1:	68 6f 1b 13 f0       	push   $0xf0131b6f
f01071f6:	e8 b5 8f ff ff       	call   f01001b0 <_panic>
f01071fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071fe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107203:	89 c2                	mov    %eax,%edx
f0107205:	8b 45 10             	mov    0x10(%ebp),%eax
f0107208:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f010720a:	b8 00 00 00 00       	mov    $0x0,%eax
f010720f:	eb 0e                	jmp    f010721f <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0107211:	8b 45 10             	mov    0x10(%ebp),%eax
f0107214:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010721a:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f010721f:	c9                   	leave  
f0107220:	c3                   	ret    

f0107221 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0107221:	55                   	push   %ebp
f0107222:	89 e5                	mov    %esp,%ebp
f0107224:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0107227:	83 ec 04             	sub    $0x4,%esp
f010722a:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010722d:	50                   	push   %eax
f010722e:	ff 75 0c             	pushl  0xc(%ebp)
f0107231:	ff 75 08             	pushl  0x8(%ebp)
f0107234:	e8 08 00 00 00       	call   f0107241 <__static_cpt>
f0107239:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f010723c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010723f:	c9                   	leave  
f0107240:	c3                   	ret    

f0107241 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0107241:	55                   	push   %ebp
f0107242:	89 e5                	mov    %esp,%ebp
f0107244:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107247:	83 ec 0c             	sub    $0xc,%esp
f010724a:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010724d:	50                   	push   %eax
f010724e:	e8 06 fd ff ff       	call   f0106f59 <allocate_frame>
f0107253:	83 c4 10             	add    $0x10,%esp
f0107256:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107259:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010725c:	83 ec 0c             	sub    $0xc,%esp
f010725f:	50                   	push   %eax
f0107260:	e8 28 f8 ff ff       	call   f0106a8d <to_physical_address>
f0107265:	83 c4 10             	add    $0x10,%esp
f0107268:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010726b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010726e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107271:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107274:	c1 e8 0c             	shr    $0xc,%eax
f0107277:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010727a:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010727f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0107282:	72 17                	jb     f010729b <__static_cpt+0x5a>
f0107284:	ff 75 ec             	pushl  -0x14(%ebp)
f0107287:	68 2c 1c 13 f0       	push   $0xf0131c2c
f010728c:	68 2f 01 00 00       	push   $0x12f
f0107291:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107296:	e8 15 8f ff ff       	call   f01001b0 <_panic>
f010729b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010729e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01072a3:	89 c2                	mov    %eax,%edx
f01072a5:	8b 45 10             	mov    0x10(%ebp),%eax
f01072a8:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f01072aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01072ad:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01072b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072b6:	c1 e8 16             	shr    $0x16,%eax
f01072b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01072c8:	83 ca 07             	or     $0x7,%edx
f01072cb:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01072cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01072d0:	8b 00                	mov    (%eax),%eax
f01072d2:	83 ec 04             	sub    $0x4,%esp
f01072d5:	68 00 10 00 00       	push   $0x1000
f01072da:	6a 00                	push   $0x0
f01072dc:	50                   	push   %eax
f01072dd:	e8 9a 79 02 00       	call   f012ec7c <memset>
f01072e2:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01072e5:	0f 20 d8             	mov    %cr3,%eax
f01072e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01072eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01072ee:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01072f1:	90                   	nop
f01072f2:	c9                   	leave  
f01072f3:	c3                   	ret    

f01072f4 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01072f4:	55                   	push   %ebp
f01072f5:	89 e5                	mov    %esp,%ebp
f01072f7:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01072fa:	ff 75 0c             	pushl  0xc(%ebp)
f01072fd:	e8 8b f7 ff ff       	call   f0106a8d <to_physical_address>
f0107302:	83 c4 04             	add    $0x4,%esp
f0107305:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0107308:	83 ec 04             	sub    $0x4,%esp
f010730b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010730e:	50                   	push   %eax
f010730f:	ff 75 10             	pushl  0x10(%ebp)
f0107312:	ff 75 08             	pushl  0x8(%ebp)
f0107315:	e8 01 fe ff ff       	call   f010711b <get_page_table>
f010731a:	83 c4 10             	add    $0x10,%esp
f010731d:	83 f8 01             	cmp    $0x1,%eax
f0107320:	75 15                	jne    f0107337 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0107322:	83 ec 04             	sub    $0x4,%esp
f0107325:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107328:	50                   	push   %eax
f0107329:	ff 75 10             	pushl  0x10(%ebp)
f010732c:	ff 75 08             	pushl  0x8(%ebp)
f010732f:	e8 0d ff ff ff       	call   f0107241 <__static_cpt>
f0107334:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107337:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010733a:	8b 55 10             	mov    0x10(%ebp),%edx
f010733d:	c1 ea 0c             	shr    $0xc,%edx
f0107340:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107346:	c1 e2 02             	shl    $0x2,%edx
f0107349:	01 d0                	add    %edx,%eax
f010734b:	8b 00                	mov    (%eax),%eax
f010734d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0107350:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107353:	83 e0 01             	and    $0x1,%eax
f0107356:	85 c0                	test   %eax,%eax
f0107358:	74 25                	je     f010737f <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010735a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010735d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107362:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107365:	75 07                	jne    f010736e <map_frame+0x7a>
			return 0;
f0107367:	b8 00 00 00 00       	mov    $0x0,%eax
f010736c:	eb 43                	jmp    f01073b1 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010736e:	83 ec 08             	sub    $0x8,%esp
f0107371:	ff 75 10             	pushl  0x10(%ebp)
f0107374:	ff 75 08             	pushl  0x8(%ebp)
f0107377:	e8 a7 00 00 00       	call   f0107423 <unmap_frame>
f010737c:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010737f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107382:	8b 40 08             	mov    0x8(%eax),%eax
f0107385:	40                   	inc    %eax
f0107386:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107389:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010738d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107390:	8b 55 10             	mov    0x10(%ebp),%edx
f0107393:	c1 ea 0c             	shr    $0xc,%edx
f0107396:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010739c:	c1 e2 02             	shl    $0x2,%edx
f010739f:	01 c2                	add    %eax,%edx
f01073a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01073a4:	0b 45 f4             	or     -0xc(%ebp),%eax
f01073a7:	83 c8 01             	or     $0x1,%eax
f01073aa:	89 02                	mov    %eax,(%edx)

	return 0;
f01073ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073b1:	c9                   	leave  
f01073b2:	c3                   	ret    

f01073b3 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01073b3:	55                   	push   %ebp
f01073b4:	89 e5                	mov    %esp,%ebp
f01073b6:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01073b9:	83 ec 04             	sub    $0x4,%esp
f01073bc:	ff 75 10             	pushl  0x10(%ebp)
f01073bf:	ff 75 0c             	pushl  0xc(%ebp)
f01073c2:	ff 75 08             	pushl  0x8(%ebp)
f01073c5:	e8 51 fd ff ff       	call   f010711b <get_page_table>
f01073ca:	83 c4 10             	add    $0x10,%esp
f01073cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01073d0:	8b 45 10             	mov    0x10(%ebp),%eax
f01073d3:	8b 00                	mov    (%eax),%eax
f01073d5:	85 c0                	test   %eax,%eax
f01073d7:	74 43                	je     f010741c <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01073d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01073dc:	c1 e8 0c             	shr    $0xc,%eax
f01073df:	25 ff 03 00 00       	and    $0x3ff,%eax
f01073e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01073e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01073ea:	8b 00                	mov    (%eax),%eax
f01073ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01073ef:	c1 e2 02             	shl    $0x2,%edx
f01073f2:	01 d0                	add    %edx,%eax
f01073f4:	8b 00                	mov    (%eax),%eax
f01073f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01073f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01073fd:	74 16                	je     f0107415 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01073ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107402:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107407:	83 ec 0c             	sub    $0xc,%esp
f010740a:	50                   	push   %eax
f010740b:	e8 90 f6 ff ff       	call   f0106aa0 <to_frame_info>
f0107410:	83 c4 10             	add    $0x10,%esp
f0107413:	eb 0c                	jmp    f0107421 <get_frame_info+0x6e>
		}
		return 0;
f0107415:	b8 00 00 00 00       	mov    $0x0,%eax
f010741a:	eb 05                	jmp    f0107421 <get_frame_info+0x6e>
	}
	return 0;
f010741c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107421:	c9                   	leave  
f0107422:	c3                   	ret    

f0107423 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0107423:	55                   	push   %ebp
f0107424:	89 e5                	mov    %esp,%ebp
f0107426:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0107429:	83 ec 04             	sub    $0x4,%esp
f010742c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010742f:	50                   	push   %eax
f0107430:	ff 75 0c             	pushl  0xc(%ebp)
f0107433:	ff 75 08             	pushl  0x8(%ebp)
f0107436:	e8 78 ff ff ff       	call   f01073b3 <get_frame_info>
f010743b:	83 c4 10             	add    $0x10,%esp
f010743e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0107441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107445:	74 60                	je     f01074a7 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107447:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010744a:	8a 40 14             	mov    0x14(%eax),%al
f010744d:	84 c0                	test   %al,%al
f010744f:	74 1c                	je     f010746d <unmap_frame+0x4a>
f0107451:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107458:	77 13                	ja     f010746d <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f010745a:	83 ec 08             	sub    $0x8,%esp
f010745d:	ff 75 0c             	pushl  0xc(%ebp)
f0107460:	68 5c 1c 13 f0       	push   $0xf0131c5c
f0107465:	e8 c7 99 ff ff       	call   f0100e31 <cprintf>
f010746a:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010746d:	83 ec 0c             	sub    $0xc,%esp
f0107470:	ff 75 f4             	pushl  -0xc(%ebp)
f0107473:	e8 73 fc ff ff       	call   f01070eb <decrement_references>
f0107478:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010747b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010747e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107481:	c1 ea 0c             	shr    $0xc,%edx
f0107484:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748a:	c1 e2 02             	shl    $0x2,%edx
f010748d:	01 d0                	add    %edx,%eax
f010748f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107495:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107498:	83 ec 08             	sub    $0x8,%esp
f010749b:	50                   	push   %eax
f010749c:	ff 75 08             	pushl  0x8(%ebp)
f010749f:	e8 4e f6 ff ff       	call   f0106af2 <tlb_invalidate>
f01074a4:	83 c4 10             	add    $0x10,%esp
	}
}
f01074a7:	90                   	nop
f01074a8:	c9                   	leave  
f01074a9:	c3                   	ret    

f01074aa <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01074aa:	55                   	push   %ebp
f01074ab:	89 e5                	mov    %esp,%ebp
f01074ad:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01074b0:	ff 75 0c             	pushl  0xc(%ebp)
f01074b3:	e8 d5 f5 ff ff       	call   f0106a8d <to_physical_address>
f01074b8:	83 c4 04             	add    $0x4,%esp
f01074bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074be:	8b 45 10             	mov    0x10(%ebp),%eax
f01074c1:	c1 e8 16             	shr    $0x16,%eax
f01074c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	01 d0                	add    %edx,%eax
f01074d0:	8b 00                	mov    (%eax),%eax
f01074d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01074d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01074e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074e3:	c1 e8 0c             	shr    $0xc,%eax
f01074e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01074e9:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01074ee:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01074f1:	72 17                	jb     f010750a <loadtime_map_frame+0x60>
f01074f3:	ff 75 ec             	pushl  -0x14(%ebp)
f01074f6:	68 2c 1c 13 f0       	push   $0xf0131c2c
f01074fb:	68 e5 01 00 00       	push   $0x1e5
f0107500:	68 6f 1b 13 f0       	push   $0xf0131b6f
f0107505:	e8 a6 8c ff ff       	call   f01001b0 <_panic>
f010750a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010750d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107512:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0107515:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107519:	75 15                	jne    f0107530 <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f010751b:	83 ec 04             	sub    $0x4,%esp
f010751e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107521:	50                   	push   %eax
f0107522:	ff 75 10             	pushl  0x10(%ebp)
f0107525:	ff 75 08             	pushl  0x8(%ebp)
f0107528:	e8 14 fd ff ff       	call   f0107241 <__static_cpt>
f010752d:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0107530:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107533:	8b 40 08             	mov    0x8(%eax),%eax
f0107536:	40                   	inc    %eax
f0107537:	8b 55 0c             	mov    0xc(%ebp),%edx
f010753a:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010753e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107541:	8b 55 10             	mov    0x10(%ebp),%edx
f0107544:	c1 ea 0c             	shr    $0xc,%edx
f0107547:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010754d:	c1 e2 02             	shl    $0x2,%edx
f0107550:	01 c2                	add    %eax,%edx
f0107552:	8b 45 14             	mov    0x14(%ebp),%eax
f0107555:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107558:	83 c8 01             	or     $0x1,%eax
f010755b:	89 02                	mov    %eax,(%edx)

	return 0;
f010755d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107562:	c9                   	leave  
f0107563:	c3                   	ret    

f0107564 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107564:	55                   	push   %ebp
f0107565:	89 e5                	mov    %esp,%ebp
f0107567:	57                   	push   %edi
f0107568:	56                   	push   %esi
f0107569:	53                   	push   %ebx
f010756a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010756d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107574:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f010757b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107582:	a1 98 be 2b f0       	mov    0xf02bbe98,%eax
f0107587:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010758a:	eb 1a                	jmp    f01075a6 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010758c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010758f:	8a 40 14             	mov    0x14(%eax),%al
f0107592:	84 c0                	test   %al,%al
f0107594:	74 05                	je     f010759b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107596:	ff 45 e8             	incl   -0x18(%ebp)
f0107599:	eb 03                	jmp    f010759e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010759b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010759e:	a1 a0 be 2b f0       	mov    0xf02bbea0,%eax
f01075a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075aa:	74 07                	je     f01075b3 <calculate_available_frames+0x4f>
f01075ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01075af:	8b 00                	mov    (%eax),%eax
f01075b1:	eb 05                	jmp    f01075b8 <calculate_available_frames+0x54>
f01075b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01075b8:	a3 a0 be 2b f0       	mov    %eax,0xf02bbea0
f01075bd:	a1 a0 be 2b f0       	mov    0xf02bbea0,%eax
f01075c2:	85 c0                	test   %eax,%eax
f01075c4:	75 c6                	jne    f010758c <calculate_available_frames+0x28>
f01075c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075ca:	75 c0                	jne    f010758c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01075cc:	a1 00 3b 25 f0       	mov    0xf0253b00,%eax
f01075d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075d4:	eb 0b                	jmp    f01075e1 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01075d6:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01075d9:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f01075de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01075e5:	74 07                	je     f01075ee <calculate_available_frames+0x8a>
f01075e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01075ea:	8b 00                	mov    (%eax),%eax
f01075ec:	eb 05                	jmp    f01075f3 <calculate_available_frames+0x8f>
f01075ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01075f3:	a3 08 3b 25 f0       	mov    %eax,0xf0253b08
f01075f8:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f01075fd:	85 c0                	test   %eax,%eax
f01075ff:	75 d5                	jne    f01075d6 <calculate_available_frames+0x72>
f0107601:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107605:	75 cf                	jne    f01075d6 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107607:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010760a:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010760d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107610:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107616:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107619:	8b 45 08             	mov    0x8(%ebp),%eax
f010761c:	89 c3                	mov    %eax,%ebx
f010761e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107621:	ba 03 00 00 00       	mov    $0x3,%edx
f0107626:	89 df                	mov    %ebx,%edi
f0107628:	89 c6                	mov    %eax,%esi
f010762a:	89 d1                	mov    %edx,%ecx
f010762c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010762e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107631:	83 c4 20             	add    $0x20,%esp
f0107634:	5b                   	pop    %ebx
f0107635:	5e                   	pop    %esi
f0107636:	5f                   	pop    %edi
f0107637:	5d                   	pop    %ebp
f0107638:	c2 04 00             	ret    $0x4

f010763b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010763b:	55                   	push   %ebp
f010763c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107641:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f0107647:	29 d0                	sub    %edx,%eax
f0107649:	c1 f8 02             	sar    $0x2,%eax
f010764c:	89 c2                	mov    %eax,%edx
f010764e:	89 d0                	mov    %edx,%eax
f0107650:	c1 e0 03             	shl    $0x3,%eax
f0107653:	01 d0                	add    %edx,%eax
f0107655:	c1 e0 03             	shl    $0x3,%eax
f0107658:	01 d0                	add    %edx,%eax
f010765a:	c1 e0 03             	shl    $0x3,%eax
f010765d:	01 d0                	add    %edx,%eax
f010765f:	c1 e0 03             	shl    $0x3,%eax
f0107662:	01 d0                	add    %edx,%eax
f0107664:	89 c1                	mov    %eax,%ecx
f0107666:	c1 e1 0f             	shl    $0xf,%ecx
f0107669:	01 c8                	add    %ecx,%eax
f010766b:	c1 e0 03             	shl    $0x3,%eax
f010766e:	01 d0                	add    %edx,%eax
f0107670:	f7 d8                	neg    %eax
}
f0107672:	5d                   	pop    %ebp
f0107673:	c3                   	ret    

f0107674 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107674:	55                   	push   %ebp
f0107675:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107677:	ff 75 08             	pushl  0x8(%ebp)
f010767a:	e8 bc ff ff ff       	call   f010763b <to_frame_number>
f010767f:	83 c4 04             	add    $0x4,%esp
f0107682:	c1 e0 0c             	shl    $0xc,%eax
}
f0107685:	c9                   	leave  
f0107686:	c3                   	ret    

f0107687 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107687:	55                   	push   %ebp
f0107688:	89 e5                	mov    %esp,%ebp
f010768a:	53                   	push   %ebx
f010768b:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f010768e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107691:	c1 e8 0c             	shr    $0xc,%eax
f0107694:	89 c2                	mov    %eax,%edx
f0107696:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010769b:	39 c2                	cmp    %eax,%edx
f010769d:	72 14                	jb     f01076b3 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f010769f:	83 ec 04             	sub    $0x4,%esp
f01076a2:	68 80 1c 13 f0       	push   $0xf0131c80
f01076a7:	6a 55                	push   $0x55
f01076a9:	68 a5 1c 13 f0       	push   $0xf0131ca5
f01076ae:	e8 fd 8a ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01076b3:	8b 0d d0 be 2b f0    	mov    0xf02bbed0,%ecx
f01076b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01076bc:	c1 e8 0c             	shr    $0xc,%eax
f01076bf:	89 c2                	mov    %eax,%edx
f01076c1:	89 d0                	mov    %edx,%eax
f01076c3:	01 c0                	add    %eax,%eax
f01076c5:	01 d0                	add    %edx,%eax
f01076c7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01076ce:	01 d8                	add    %ebx,%eax
f01076d0:	01 d0                	add    %edx,%eax
f01076d2:	01 c8                	add    %ecx,%eax
}
f01076d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01076d7:	c9                   	leave  
f01076d8:	c3                   	ret    

f01076d9 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01076d9:	55                   	push   %ebp
f01076da:	89 e5                	mov    %esp,%ebp
f01076dc:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01076df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076e6:	eb 5f                	jmp    f0107747 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f01076e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01076eb:	89 d0                	mov    %edx,%eax
f01076ed:	01 c0                	add    %eax,%eax
f01076ef:	01 d0                	add    %edx,%eax
f01076f1:	01 c0                	add    %eax,%eax
f01076f3:	01 d0                	add    %edx,%eax
f01076f5:	c1 e0 02             	shl    $0x2,%eax
f01076f8:	01 d0                	add    %edx,%eax
f01076fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107701:	01 d0                	add    %edx,%eax
f0107703:	c1 e0 04             	shl    $0x4,%eax
f0107706:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f010770b:	83 ec 04             	sub    $0x4,%esp
f010770e:	68 50 10 00 00       	push   $0x1050
f0107713:	6a 00                	push   $0x0
f0107715:	50                   	push   %eax
f0107716:	e8 61 75 02 00       	call   f012ec7c <memset>
f010771b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010771e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107721:	89 d0                	mov    %edx,%eax
f0107723:	01 c0                	add    %eax,%eax
f0107725:	01 d0                	add    %edx,%eax
f0107727:	01 c0                	add    %eax,%eax
f0107729:	01 d0                	add    %edx,%eax
f010772b:	c1 e0 02             	shl    $0x2,%eax
f010772e:	01 d0                	add    %edx,%eax
f0107730:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107737:	01 d0                	add    %edx,%eax
f0107739:	c1 e0 04             	shl    $0x4,%eax
f010773c:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107741:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107744:	ff 45 f4             	incl   -0xc(%ebp)
f0107747:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010774b:	7e 9b                	jle    f01076e8 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010774d:	90                   	nop
f010774e:	c9                   	leave  
f010774f:	c3                   	ret    

f0107750 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107750:	55                   	push   %ebp
f0107751:	89 e5                	mov    %esp,%ebp
f0107753:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107756:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010775d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107764:	eb 34                	jmp    f010779a <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107766:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107769:	89 d0                	mov    %edx,%eax
f010776b:	01 c0                	add    %eax,%eax
f010776d:	01 d0                	add    %edx,%eax
f010776f:	01 c0                	add    %eax,%eax
f0107771:	01 d0                	add    %edx,%eax
f0107773:	c1 e0 02             	shl    $0x2,%eax
f0107776:	01 d0                	add    %edx,%eax
f0107778:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010777f:	01 d0                	add    %edx,%eax
f0107781:	c1 e0 04             	shl    $0x4,%eax
f0107784:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107789:	8a 00                	mov    (%eax),%al
f010778b:	84 c0                	test   %al,%al
f010778d:	74 08                	je     f0107797 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f010778f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107792:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107795:	eb 09                	jmp    f01077a0 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107797:	ff 45 f0             	incl   -0x10(%ebp)
f010779a:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010779e:	7e c6                	jle    f0107766 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01077a0:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01077a4:	75 0a                	jne    f01077b0 <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f01077a6:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01077ab:	e9 8b 00 00 00       	jmp    f010783b <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f01077b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01077b3:	89 d0                	mov    %edx,%eax
f01077b5:	01 c0                	add    %eax,%eax
f01077b7:	01 d0                	add    %edx,%eax
f01077b9:	01 c0                	add    %eax,%eax
f01077bb:	01 d0                	add    %edx,%eax
f01077bd:	c1 e0 02             	shl    $0x2,%eax
f01077c0:	01 d0                	add    %edx,%eax
f01077c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01077c9:	01 d0                	add    %edx,%eax
f01077cb:	c1 e0 04             	shl    $0x4,%eax
f01077ce:	8d 90 40 3b 25 f0    	lea    -0xfdac4c0(%eax),%edx
f01077d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01077d7:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f01077d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01077dc:	89 d0                	mov    %edx,%eax
f01077de:	01 c0                	add    %eax,%eax
f01077e0:	01 d0                	add    %edx,%eax
f01077e2:	01 c0                	add    %eax,%eax
f01077e4:	01 d0                	add    %edx,%eax
f01077e6:	c1 e0 02             	shl    $0x2,%eax
f01077e9:	01 d0                	add    %edx,%eax
f01077eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01077f2:	01 d0                	add    %edx,%eax
f01077f4:	c1 e0 04             	shl    $0x4,%eax
f01077f7:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f01077fc:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f01077ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107802:	89 d0                	mov    %edx,%eax
f0107804:	01 c0                	add    %eax,%eax
f0107806:	01 d0                	add    %edx,%eax
f0107808:	01 c0                	add    %eax,%eax
f010780a:	01 d0                	add    %edx,%eax
f010780c:	c1 e0 02             	shl    $0x2,%eax
f010780f:	01 d0                	add    %edx,%eax
f0107811:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107818:	01 d0                	add    %edx,%eax
f010781a:	c1 e0 04             	shl    $0x4,%eax
f010781d:	83 c0 50             	add    $0x50,%eax
f0107820:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107825:	83 ec 04             	sub    $0x4,%esp
f0107828:	68 00 10 00 00       	push   $0x1000
f010782d:	6a 00                	push   $0x0
f010782f:	50                   	push   %eax
f0107830:	e8 47 74 02 00       	call   f012ec7c <memset>
f0107835:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107838:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010783b:	c9                   	leave  
f010783c:	c3                   	ret    

f010783d <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010783d:	55                   	push   %ebp
f010783e:	89 e5                	mov    %esp,%ebp
f0107840:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107843:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010784a:	e9 95 00 00 00       	jmp    f01078e4 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010784f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107852:	89 d0                	mov    %edx,%eax
f0107854:	01 c0                	add    %eax,%eax
f0107856:	01 d0                	add    %edx,%eax
f0107858:	01 c0                	add    %eax,%eax
f010785a:	01 d0                	add    %edx,%eax
f010785c:	c1 e0 02             	shl    $0x2,%eax
f010785f:	01 d0                	add    %edx,%eax
f0107861:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107868:	01 d0                	add    %edx,%eax
f010786a:	c1 e0 04             	shl    $0x4,%eax
f010786d:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107872:	8a 00                	mov    (%eax),%al
f0107874:	84 c0                	test   %al,%al
f0107876:	75 68                	jne    f01078e0 <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107878:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010787b:	89 d0                	mov    %edx,%eax
f010787d:	01 c0                	add    %eax,%eax
f010787f:	01 d0                	add    %edx,%eax
f0107881:	01 c0                	add    %eax,%eax
f0107883:	01 d0                	add    %edx,%eax
f0107885:	c1 e0 02             	shl    $0x2,%eax
f0107888:	01 d0                	add    %edx,%eax
f010788a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107891:	01 d0                	add    %edx,%eax
f0107893:	c1 e0 04             	shl    $0x4,%eax
f0107896:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f010789b:	8b 00                	mov    (%eax),%eax
f010789d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01078a0:	75 3f                	jne    f01078e1 <get_share_object_ID+0xa4>
f01078a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01078a5:	89 d0                	mov    %edx,%eax
f01078a7:	01 c0                	add    %eax,%eax
f01078a9:	01 d0                	add    %edx,%eax
f01078ab:	01 c0                	add    %eax,%eax
f01078ad:	01 d0                	add    %edx,%eax
f01078af:	c1 e0 02             	shl    $0x2,%eax
f01078b2:	01 d0                	add    %edx,%eax
f01078b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01078bb:	01 d0                	add    %edx,%eax
f01078bd:	c1 e0 04             	shl    $0x4,%eax
f01078c0:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f01078c5:	83 c0 04             	add    $0x4,%eax
f01078c8:	83 ec 08             	sub    $0x8,%esp
f01078cb:	50                   	push   %eax
f01078cc:	ff 75 0c             	pushl  0xc(%ebp)
f01078cf:	e8 c6 72 02 00       	call   f012eb9a <strcmp>
f01078d4:	83 c4 10             	add    $0x10,%esp
f01078d7:	85 c0                	test   %eax,%eax
f01078d9:	75 06                	jne    f01078e1 <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f01078db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078de:	eb 13                	jmp    f01078f3 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01078e0:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01078e1:	ff 45 f4             	incl   -0xc(%ebp)
f01078e4:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f01078e8:	0f 8e 61 ff ff ff    	jle    f010784f <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01078ee:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01078f3:	c9                   	leave  
f01078f4:	c3                   	ret    

f01078f5 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01078f5:	55                   	push   %ebp
f01078f6:	89 e5                	mov    %esp,%ebp
f01078f8:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01078fb:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f01078ff:	76 0a                	jbe    f010790b <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107901:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107906:	e9 93 00 00 00       	jmp    f010799e <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010790b:	8b 55 08             	mov    0x8(%ebp),%edx
f010790e:	89 d0                	mov    %edx,%eax
f0107910:	01 c0                	add    %eax,%eax
f0107912:	01 d0                	add    %edx,%eax
f0107914:	01 c0                	add    %eax,%eax
f0107916:	01 d0                	add    %edx,%eax
f0107918:	c1 e0 02             	shl    $0x2,%eax
f010791b:	01 d0                	add    %edx,%eax
f010791d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107924:	01 d0                	add    %edx,%eax
f0107926:	c1 e0 04             	shl    $0x4,%eax
f0107929:	83 c0 50             	add    $0x50,%eax
f010792c:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107931:	83 ec 0c             	sub    $0xc,%esp
f0107934:	50                   	push   %eax
f0107935:	e8 3e 01 00 00       	call   f0107a78 <clear_frames_storage>
f010793a:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010793d:	8b 55 08             	mov    0x8(%ebp),%edx
f0107940:	89 d0                	mov    %edx,%eax
f0107942:	01 c0                	add    %eax,%eax
f0107944:	01 d0                	add    %edx,%eax
f0107946:	01 c0                	add    %eax,%eax
f0107948:	01 d0                	add    %edx,%eax
f010794a:	c1 e0 02             	shl    $0x2,%eax
f010794d:	01 d0                	add    %edx,%eax
f010794f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107956:	01 d0                	add    %edx,%eax
f0107958:	c1 e0 04             	shl    $0x4,%eax
f010795b:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0107960:	83 ec 04             	sub    $0x4,%esp
f0107963:	68 50 10 00 00       	push   $0x1050
f0107968:	6a 00                	push   $0x0
f010796a:	50                   	push   %eax
f010796b:	e8 0c 73 02 00       	call   f012ec7c <memset>
f0107970:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107973:	8b 55 08             	mov    0x8(%ebp),%edx
f0107976:	89 d0                	mov    %edx,%eax
f0107978:	01 c0                	add    %eax,%eax
f010797a:	01 d0                	add    %edx,%eax
f010797c:	01 c0                	add    %eax,%eax
f010797e:	01 d0                	add    %edx,%eax
f0107980:	c1 e0 02             	shl    $0x2,%eax
f0107983:	01 d0                	add    %edx,%eax
f0107985:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010798c:	01 d0                	add    %edx,%eax
f010798e:	c1 e0 04             	shl    $0x4,%eax
f0107991:	05 8d 3b 25 f0       	add    $0xf0253b8d,%eax
f0107996:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107999:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010799e:	c9                   	leave  
f010799f:	c3                   	ret    

f01079a0 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01079a0:	55                   	push   %ebp
f01079a1:	89 e5                	mov    %esp,%ebp
f01079a3:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01079a6:	83 ec 0c             	sub    $0xc,%esp
f01079a9:	68 00 10 00 00       	push   $0x1000
f01079ae:	e8 e0 01 00 00       	call   f0107b93 <kmalloc>
f01079b3:	83 c4 10             	add    $0x10,%esp
f01079b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01079b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01079bd:	75 17                	jne    f01079d6 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01079bf:	83 ec 04             	sub    $0x4,%esp
f01079c2:	68 bf 1c 13 f0       	push   $0xf0131cbf
f01079c7:	68 a6 00 00 00       	push   $0xa6
f01079cc:	68 dc 1c 13 f0       	push   $0xf0131cdc
f01079d1:	e8 da 87 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f01079d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01079d9:	c9                   	leave  
f01079da:	c3                   	ret    

f01079db <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01079db:	55                   	push   %ebp
f01079dc:	89 e5                	mov    %esp,%ebp
f01079de:	53                   	push   %ebx
f01079df:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01079e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01079e5:	c1 e0 0c             	shl    $0xc,%eax
f01079e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01079eb:	83 ec 04             	sub    $0x4,%esp
f01079ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01079f1:	50                   	push   %eax
f01079f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01079f5:	ff 75 08             	pushl  0x8(%ebp)
f01079f8:	e8 1e f7 ff ff       	call   f010711b <get_page_table>
f01079fd:	83 c4 10             	add    $0x10,%esp
f0107a00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107a03:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107a07:	75 15                	jne    f0107a1e <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107a09:	83 ec 04             	sub    $0x4,%esp
f0107a0c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107a0f:	50                   	push   %eax
f0107a10:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a13:	ff 75 08             	pushl  0x8(%ebp)
f0107a16:	e8 26 f8 ff ff       	call   f0107241 <__static_cpt>
f0107a1b:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107a1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107a24:	c1 ea 0c             	shr    $0xc,%edx
f0107a27:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107a2d:	c1 e2 02             	shl    $0x2,%edx
f0107a30:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107a33:	83 ec 0c             	sub    $0xc,%esp
f0107a36:	ff 75 0c             	pushl  0xc(%ebp)
f0107a39:	e8 36 fc ff ff       	call   f0107674 <to_physical_address>
f0107a3e:	83 c4 10             	add    $0x10,%esp
f0107a41:	83 c8 01             	or     $0x1,%eax
f0107a44:	89 03                	mov    %eax,(%ebx)
}
f0107a46:	90                   	nop
f0107a47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a4a:	c9                   	leave  
f0107a4b:	c3                   	ret    

f0107a4c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107a4c:	55                   	push   %ebp
f0107a4d:	89 e5                	mov    %esp,%ebp
f0107a4f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107a55:	c1 e0 0c             	shl    $0xc,%eax
f0107a58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107a5b:	83 ec 04             	sub    $0x4,%esp
f0107a5e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107a61:	50                   	push   %eax
f0107a62:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a65:	ff 75 08             	pushl  0x8(%ebp)
f0107a68:	e8 46 f9 ff ff       	call   f01073b3 <get_frame_info>
f0107a6d:	83 c4 10             	add    $0x10,%esp
f0107a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107a76:	c9                   	leave  
f0107a77:	c3                   	ret    

f0107a78 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107a78:	55                   	push   %ebp
f0107a79:	89 e5                	mov    %esp,%ebp
f0107a7b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107a7e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107a85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107a8c:	eb 5b                	jmp    f0107ae9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a9b:	01 d0                	add    %edx,%eax
f0107a9d:	8b 00                	mov    (%eax),%eax
f0107a9f:	85 c0                	test   %eax,%eax
f0107aa1:	74 43                	je     f0107ae6 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107aa6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ab0:	01 d0                	add    %edx,%eax
f0107ab2:	8b 00                	mov    (%eax),%eax
f0107ab4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ab9:	83 ec 0c             	sub    $0xc,%esp
f0107abc:	50                   	push   %eax
f0107abd:	e8 c5 fb ff ff       	call   f0107687 <to_frame_info>
f0107ac2:	83 c4 10             	add    $0x10,%esp
f0107ac5:	83 ec 0c             	sub    $0xc,%esp
f0107ac8:	50                   	push   %eax
f0107ac9:	e8 a3 f5 ff ff       	call   f0107071 <free_frame>
f0107ace:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ad4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ade:	01 d0                	add    %edx,%eax
f0107ae0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107ae6:	ff 45 f4             	incl   -0xc(%ebp)
f0107ae9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107af0:	7e 9c                	jle    f0107a8e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107af2:	90                   	nop
f0107af3:	c9                   	leave  
f0107af4:	c3                   	ret    

f0107af5 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107af5:	55                   	push   %ebp
f0107af6:	89 e5                	mov    %esp,%ebp
f0107af8:	83 ec 18             	sub    $0x18,%esp
f0107afb:	8b 45 14             	mov    0x14(%ebp),%eax
f0107afe:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107b01:	83 ec 04             	sub    $0x4,%esp
f0107b04:	68 00 1d 13 f0       	push   $0xf0131d00
f0107b09:	68 f6 00 00 00       	push   $0xf6
f0107b0e:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b13:	e8 98 86 ff ff       	call   f01001b0 <_panic>

f0107b18 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107b18:	55                   	push   %ebp
f0107b19:	89 e5                	mov    %esp,%ebp
f0107b1b:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107b1e:	83 ec 04             	sub    $0x4,%esp
f0107b21:	68 34 1d 13 f0       	push   $0xf0131d34
f0107b26:	68 02 01 00 00       	push   $0x102
f0107b2b:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b30:	e8 7b 86 ff ff       	call   f01001b0 <_panic>

f0107b35 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107b35:	55                   	push   %ebp
f0107b36:	89 e5                	mov    %esp,%ebp
f0107b38:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107b3b:	83 ec 04             	sub    $0x4,%esp
f0107b3e:	68 68 1d 13 f0       	push   $0xf0131d68
f0107b43:	68 0c 01 00 00       	push   $0x10c
f0107b48:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b4d:	e8 5e 86 ff ff       	call   f01001b0 <_panic>

f0107b52 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107b52:	55                   	push   %ebp
f0107b53:	89 e5                	mov    %esp,%ebp
f0107b55:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107b58:	83 ec 04             	sub    $0x4,%esp
f0107b5b:	68 98 1d 13 f0       	push   $0xf0131d98
f0107b60:	68 1b 01 00 00       	push   $0x11b
f0107b65:	68 dc 1c 13 f0       	push   $0xf0131cdc
f0107b6a:	e8 41 86 ff ff       	call   f01001b0 <_panic>

f0107b6f <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107b6f:	55                   	push   %ebp
f0107b70:	89 e5                	mov    %esp,%ebp
f0107b72:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107b75:	83 ec 04             	sub    $0x4,%esp
f0107b78:	68 c8 1d 13 f0       	push   $0xf0131dc8
f0107b7d:	6a 13                	push   $0x13
f0107b7f:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107b84:	e8 27 86 ff ff       	call   f01001b0 <_panic>

f0107b89 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107b89:	55                   	push   %ebp
f0107b8a:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107b8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107b91:	5d                   	pop    %ebp
f0107b92:	c3                   	ret    

f0107b93 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107b93:	55                   	push   %ebp
f0107b94:	89 e5                	mov    %esp,%ebp
f0107b96:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107b99:	83 ec 04             	sub    $0x4,%esp
f0107b9c:	68 f0 1d 13 f0       	push   $0xf0131df0
f0107ba1:	6a 36                	push   $0x36
f0107ba3:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107ba8:	e8 60 87 ff ff       	call   f010030d <_panic_into_prompt>

f0107bad <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107bb3:	83 ec 04             	sub    $0x4,%esp
f0107bb6:	68 18 1e 13 f0       	push   $0xf0131e18
f0107bbb:	6a 3f                	push   $0x3f
f0107bbd:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bc2:	e8 e9 85 ff ff       	call   f01001b0 <_panic>

f0107bc7 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107bc7:	55                   	push   %ebp
f0107bc8:	89 e5                	mov    %esp,%ebp
f0107bca:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107bcd:	83 ec 04             	sub    $0x4,%esp
f0107bd0:	68 3c 1e 13 f0       	push   $0xf0131e3c
f0107bd5:	6a 47                	push   $0x47
f0107bd7:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bdc:	e8 cf 85 ff ff       	call   f01001b0 <_panic>

f0107be1 <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107be1:	55                   	push   %ebp
f0107be2:	89 e5                	mov    %esp,%ebp
f0107be4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107be7:	83 ec 04             	sub    $0x4,%esp
f0107bea:	68 70 1e 13 f0       	push   $0xf0131e70
f0107bef:	6a 54                	push   $0x54
f0107bf1:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107bf6:	e8 b5 85 ff ff       	call   f01001b0 <_panic>

f0107bfb <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107bfb:	55                   	push   %ebp
f0107bfc:	89 e5                	mov    %esp,%ebp
f0107bfe:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c01:	83 ec 04             	sub    $0x4,%esp
f0107c04:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c09:	6a 5d                	push   $0x5d
f0107c0b:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c10:	e8 9b 85 ff ff       	call   f01001b0 <_panic>

f0107c15 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107c15:	55                   	push   %ebp
f0107c16:	89 e5                	mov    %esp,%ebp
f0107c18:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c1b:	83 ec 04             	sub    $0x4,%esp
f0107c1e:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c23:	6a 63                	push   $0x63
f0107c25:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c2a:	e8 81 85 ff ff       	call   f01001b0 <_panic>

f0107c2f <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107c2f:	55                   	push   %ebp
f0107c30:	89 e5                	mov    %esp,%ebp
f0107c32:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c35:	83 ec 04             	sub    $0x4,%esp
f0107c38:	68 a5 1e 13 f0       	push   $0xf0131ea5
f0107c3d:	6a 68                	push   $0x68
f0107c3f:	68 dc 1d 13 f0       	push   $0xf0131ddc
f0107c44:	e8 67 85 ff ff       	call   f01001b0 <_panic>

f0107c49 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107c49:	55                   	push   %ebp
f0107c4a:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0107c4c:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0107c51:	5d                   	pop    %ebp
f0107c52:	c3                   	ret    

f0107c53 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107c53:	55                   	push   %ebp
f0107c54:	89 e5                	mov    %esp,%ebp
f0107c56:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107c59:	83 ec 04             	sub    $0x4,%esp
f0107c5c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107c5f:	50                   	push   %eax
f0107c60:	ff 75 0c             	pushl  0xc(%ebp)
f0107c63:	ff 75 08             	pushl  0x8(%ebp)
f0107c66:	e8 b0 f4 ff ff       	call   f010711b <get_page_table>
f0107c6b:	83 c4 10             	add    $0x10,%esp
f0107c6e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0107c71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c74:	85 c0                	test   %eax,%eax
f0107c76:	74 64                	je     f0107cdc <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0107c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c7b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c7e:	c1 ea 0c             	shr    $0xc,%edx
f0107c81:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c87:	c1 e2 02             	shl    $0x2,%edx
f0107c8a:	01 c2                	add    %eax,%edx
f0107c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c8f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c92:	c1 e9 0c             	shr    $0xc,%ecx
f0107c95:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c9b:	c1 e1 02             	shl    $0x2,%ecx
f0107c9e:	01 c8                	add    %ecx,%eax
f0107ca0:	8b 00                	mov    (%eax),%eax
f0107ca2:	0b 45 10             	or     0x10(%ebp),%eax
f0107ca5:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0107ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107caa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107cad:	c1 ea 0c             	shr    $0xc,%edx
f0107cb0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cb6:	c1 e2 02             	shl    $0x2,%edx
f0107cb9:	01 d0                	add    %edx,%eax
f0107cbb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cbe:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107cc1:	c1 e9 0c             	shr    $0xc,%ecx
f0107cc4:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107cca:	c1 e1 02             	shl    $0x2,%ecx
f0107ccd:	01 ca                	add    %ecx,%edx
f0107ccf:	8b 12                	mov    (%edx),%edx
f0107cd1:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107cd4:	f7 d1                	not    %ecx
f0107cd6:	21 ca                	and    %ecx,%edx
f0107cd8:	89 10                	mov    %edx,(%eax)
f0107cda:	eb 27                	jmp    f0107d03 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0107cdc:	83 ec 08             	sub    $0x8,%esp
f0107cdf:	ff 75 0c             	pushl  0xc(%ebp)
f0107ce2:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0107ce7:	e8 45 91 ff ff       	call   f0100e31 <cprintf>
f0107cec:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0107cef:	83 ec 04             	sub    $0x4,%esp
f0107cf2:	68 e0 1e 13 f0       	push   $0xf0131ee0
f0107cf7:	6a 1c                	push   $0x1c
f0107cf9:	68 54 1f 13 f0       	push   $0xf0131f54
f0107cfe:	e8 ad 84 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d06:	83 ec 08             	sub    $0x8,%esp
f0107d09:	50                   	push   %eax
f0107d0a:	6a 00                	push   $0x0
f0107d0c:	e8 e1 ed ff ff       	call   f0106af2 <tlb_invalidate>
f0107d11:	83 c4 10             	add    $0x10,%esp
}
f0107d14:	90                   	nop
f0107d15:	c9                   	leave  
f0107d16:	c3                   	ret    

f0107d17 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107d17:	55                   	push   %ebp
f0107d18:	89 e5                	mov    %esp,%ebp
f0107d1a:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107d1d:	83 ec 04             	sub    $0x4,%esp
f0107d20:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d23:	50                   	push   %eax
f0107d24:	ff 75 0c             	pushl  0xc(%ebp)
f0107d27:	ff 75 08             	pushl  0x8(%ebp)
f0107d2a:	e8 ec f3 ff ff       	call   f010711b <get_page_table>
f0107d2f:	83 c4 10             	add    $0x10,%esp
f0107d32:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0107d35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d38:	85 c0                	test   %eax,%eax
f0107d3a:	74 1d                	je     f0107d59 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0107d3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d3f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d42:	c1 ea 0c             	shr    $0xc,%edx
f0107d45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d4b:	c1 e2 02             	shl    $0x2,%edx
f0107d4e:	01 d0                	add    %edx,%eax
f0107d50:	8b 00                	mov    (%eax),%eax
f0107d52:	25 ff 0f 00 00       	and    $0xfff,%eax
f0107d57:	eb 05                	jmp    f0107d5e <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0107d59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107d5e:	c9                   	leave  
f0107d5f:	c3                   	ret    

f0107d60 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d60:	55                   	push   %ebp
f0107d61:	89 e5                	mov    %esp,%ebp
f0107d63:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107d66:	83 ec 04             	sub    $0x4,%esp
f0107d69:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d6c:	50                   	push   %eax
f0107d6d:	ff 75 0c             	pushl  0xc(%ebp)
f0107d70:	ff 75 08             	pushl  0x8(%ebp)
f0107d73:	e8 a3 f3 ff ff       	call   f010711b <get_page_table>
f0107d78:	83 c4 10             	add    $0x10,%esp
f0107d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0107d7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d81:	85 c0                	test   %eax,%eax
f0107d83:	74 46                	je     f0107dcb <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0107d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d88:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d8b:	c1 ea 0c             	shr    $0xc,%edx
f0107d8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d94:	c1 e2 02             	shl    $0x2,%edx
f0107d97:	01 d0                	add    %edx,%eax
f0107d99:	8b 00                	mov    (%eax),%eax
f0107d9b:	83 ec 04             	sub    $0x4,%esp
f0107d9e:	50                   	push   %eax
f0107d9f:	ff 75 0c             	pushl  0xc(%ebp)
f0107da2:	68 70 1f 13 f0       	push   $0xf0131f70
f0107da7:	e8 85 90 ff ff       	call   f0100e31 <cprintf>
f0107dac:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107daf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107db2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107db5:	c1 ea 0c             	shr    $0xc,%edx
f0107db8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107dbe:	c1 e2 02             	shl    $0x2,%edx
f0107dc1:	01 d0                	add    %edx,%eax
f0107dc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107dc9:	eb 14                	jmp    f0107ddf <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0107dcb:	83 ec 04             	sub    $0x4,%esp
f0107dce:	68 98 1f 13 f0       	push   $0xf0131f98
f0107dd3:	6a 47                	push   $0x47
f0107dd5:	68 54 1f 13 f0       	push   $0xf0131f54
f0107dda:	e8 d1 83 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de2:	83 ec 08             	sub    $0x8,%esp
f0107de5:	50                   	push   %eax
f0107de6:	6a 00                	push   $0x0
f0107de8:	e8 05 ed ff ff       	call   f0106af2 <tlb_invalidate>
f0107ded:	83 c4 10             	add    $0x10,%esp
}
f0107df0:	90                   	nop
f0107df1:	c9                   	leave  
f0107df2:	c3                   	ret    

f0107df3 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107df3:	55                   	push   %ebp
f0107df4:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107df6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df9:	c1 e8 16             	shr    $0x16,%eax
f0107dfc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e06:	01 d0                	add    %edx,%eax
f0107e08:	8b 00                	mov    (%eax),%eax
f0107e0a:	83 e0 20             	and    $0x20,%eax
f0107e0d:	85 c0                	test   %eax,%eax
f0107e0f:	0f 95 c0             	setne  %al
f0107e12:	0f b6 c0             	movzbl %al,%eax
}
f0107e15:	5d                   	pop    %ebp
f0107e16:	c3                   	ret    

f0107e17 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107e17:	55                   	push   %ebp
f0107e18:	89 e5                	mov    %esp,%ebp
f0107e1a:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107e1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e20:	c1 e8 16             	shr    $0x16,%eax
f0107e23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2d:	01 d0                	add    %edx,%eax
f0107e2f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e32:	c1 ea 16             	shr    $0x16,%edx
f0107e35:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107e3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0107e3f:	01 ca                	add    %ecx,%edx
f0107e41:	8b 12                	mov    (%edx),%edx
f0107e43:	83 e2 df             	and    $0xffffffdf,%edx
f0107e46:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107e48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e4b:	83 ec 08             	sub    $0x8,%esp
f0107e4e:	50                   	push   %eax
f0107e4f:	6a 00                	push   $0x0
f0107e51:	e8 9c ec ff ff       	call   f0106af2 <tlb_invalidate>
f0107e56:	83 c4 10             	add    $0x10,%esp
}
f0107e59:	90                   	nop
f0107e5a:	c9                   	leave  
f0107e5b:	c3                   	ret    

f0107e5c <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107e5c:	55                   	push   %ebp
f0107e5d:	89 e5                	mov    %esp,%ebp
f0107e5f:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e65:	c1 e8 16             	shr    $0x16,%eax
f0107e68:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e72:	01 d0                	add    %edx,%eax
f0107e74:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e7a:	0f 20 d8             	mov    %cr3,%eax
f0107e7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e83:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e86:	90                   	nop
f0107e87:	c9                   	leave  
f0107e88:	c3                   	ret    

f0107e89 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e89:	55                   	push   %ebp
f0107e8a:	89 e5                	mov    %esp,%ebp
f0107e8c:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e96:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e9d:	eb 22                	jmp    f0107ec1 <env_page_ws_get_size+0x38>
f0107e9f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ea2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107ea5:	89 d0                	mov    %edx,%eax
f0107ea7:	01 c0                	add    %eax,%eax
f0107ea9:	01 d0                	add    %edx,%eax
f0107eab:	c1 e0 03             	shl    $0x3,%eax
f0107eae:	01 c8                	add    %ecx,%eax
f0107eb0:	05 bc 00 00 00       	add    $0xbc,%eax
f0107eb5:	8a 00                	mov    (%eax),%al
f0107eb7:	84 c0                	test   %al,%al
f0107eb9:	75 03                	jne    f0107ebe <env_page_ws_get_size+0x35>
f0107ebb:	ff 45 f8             	incl   -0x8(%ebp)
f0107ebe:	ff 45 fc             	incl   -0x4(%ebp)
f0107ec1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec4:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0107eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107ecd:	39 c2                	cmp    %eax,%edx
f0107ecf:	77 ce                	ja     f0107e9f <env_page_ws_get_size+0x16>
	return counter;
f0107ed1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107ed4:	c9                   	leave  
f0107ed5:	c3                   	ret    

f0107ed6 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107ed6:	55                   	push   %ebp
f0107ed7:	89 e5                	mov    %esp,%ebp
f0107ed9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107edc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107ee3:	eb 4e                	jmp    f0107f33 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107ee5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ee8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eeb:	89 d0                	mov    %edx,%eax
f0107eed:	01 c0                	add    %eax,%eax
f0107eef:	01 d0                	add    %edx,%eax
f0107ef1:	c1 e0 03             	shl    $0x3,%eax
f0107ef4:	01 c8                	add    %ecx,%eax
f0107ef6:	05 b8 00 00 00       	add    $0xb8,%eax
f0107efb:	8b 00                	mov    (%eax),%eax
f0107efd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f08:	89 c2                	mov    %eax,%edx
f0107f0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f18:	39 c2                	cmp    %eax,%edx
f0107f1a:	75 14                	jne    f0107f30 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0107f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f1f:	83 ec 08             	sub    $0x8,%esp
f0107f22:	50                   	push   %eax
f0107f23:	ff 75 08             	pushl  0x8(%ebp)
f0107f26:	e8 c8 00 00 00       	call   f0107ff3 <env_page_ws_clear_entry>
f0107f2b:	83 c4 10             	add    $0x10,%esp
			break;
f0107f2e:	eb 13                	jmp    f0107f43 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107f30:	ff 45 f4             	incl   -0xc(%ebp)
f0107f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f36:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0107f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f3f:	39 c2                	cmp    %eax,%edx
f0107f41:	77 a2                	ja     f0107ee5 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107f43:	90                   	nop
f0107f44:	c9                   	leave  
f0107f45:	c3                   	ret    

f0107f46 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107f46:	55                   	push   %ebp
f0107f47:	89 e5                	mov    %esp,%ebp
f0107f49:	53                   	push   %ebx
f0107f4a:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0107f56:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f59:	77 16                	ja     f0107f71 <env_page_ws_set_entry+0x2b>
f0107f5b:	68 10 20 13 f0       	push   $0xf0132010
f0107f60:	68 46 20 13 f0       	push   $0xf0132046
f0107f65:	6a 77                	push   $0x77
f0107f67:	68 5c 20 13 f0       	push   $0xf013205c
f0107f6c:	e8 3f 82 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107f71:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107f78:	76 16                	jbe    f0107f90 <env_page_ws_set_entry+0x4a>
f0107f7a:	68 7c 20 13 f0       	push   $0xf013207c
f0107f7f:	68 46 20 13 f0       	push   $0xf0132046
f0107f84:	6a 78                	push   $0x78
f0107f86:	68 5c 20 13 f0       	push   $0xf013205c
f0107f8b:	e8 20 82 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f90:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f9e:	89 c1                	mov    %eax,%ecx
f0107fa0:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107fa3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fa6:	89 d0                	mov    %edx,%eax
f0107fa8:	01 c0                	add    %eax,%eax
f0107faa:	01 d0                	add    %edx,%eax
f0107fac:	c1 e0 03             	shl    $0x3,%eax
f0107faf:	01 d8                	add    %ebx,%eax
f0107fb1:	05 b8 00 00 00       	add    $0xb8,%eax
f0107fb6:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107fb8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fbb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fbe:	89 d0                	mov    %edx,%eax
f0107fc0:	01 c0                	add    %eax,%eax
f0107fc2:	01 d0                	add    %edx,%eax
f0107fc4:	c1 e0 03             	shl    $0x3,%eax
f0107fc7:	01 c8                	add    %ecx,%eax
f0107fc9:	05 bc 00 00 00       	add    $0xbc,%eax
f0107fce:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107fd1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fd7:	89 d0                	mov    %edx,%eax
f0107fd9:	01 c0                	add    %eax,%eax
f0107fdb:	01 d0                	add    %edx,%eax
f0107fdd:	c1 e0 03             	shl    $0x3,%eax
f0107fe0:	01 c8                	add    %ecx,%eax
f0107fe2:	05 c0 00 00 00       	add    $0xc0,%eax
f0107fe7:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107fed:	90                   	nop
}
f0107fee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107ff1:	c9                   	leave  
f0107ff2:	c3                   	ret    

f0107ff3 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ff3:	55                   	push   %ebp
f0107ff4:	89 e5                	mov    %esp,%ebp
f0107ff6:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107ff9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ffc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108002:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108005:	77 19                	ja     f0108020 <env_page_ws_clear_entry+0x2d>
f0108007:	68 b0 20 13 f0       	push   $0xf01320b0
f010800c:	68 46 20 13 f0       	push   $0xf0132046
f0108011:	68 83 00 00 00       	push   $0x83
f0108016:	68 5c 20 13 f0       	push   $0xf013205c
f010801b:	e8 90 81 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108020:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108023:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108026:	89 d0                	mov    %edx,%eax
f0108028:	01 c0                	add    %eax,%eax
f010802a:	01 d0                	add    %edx,%eax
f010802c:	c1 e0 03             	shl    $0x3,%eax
f010802f:	01 c8                	add    %ecx,%eax
f0108031:	05 b8 00 00 00       	add    $0xb8,%eax
f0108036:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010803c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010803f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108042:	89 d0                	mov    %edx,%eax
f0108044:	01 c0                	add    %eax,%eax
f0108046:	01 d0                	add    %edx,%eax
f0108048:	c1 e0 03             	shl    $0x3,%eax
f010804b:	01 c8                	add    %ecx,%eax
f010804d:	05 bc 00 00 00       	add    $0xbc,%eax
f0108052:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108055:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108058:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805b:	89 d0                	mov    %edx,%eax
f010805d:	01 c0                	add    %eax,%eax
f010805f:	01 d0                	add    %edx,%eax
f0108061:	c1 e0 03             	shl    $0x3,%eax
f0108064:	01 c8                	add    %ecx,%eax
f0108066:	05 c0 00 00 00       	add    $0xc0,%eax
f010806b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108071:	90                   	nop
f0108072:	c9                   	leave  
f0108073:	c3                   	ret    

f0108074 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108074:	55                   	push   %ebp
f0108075:	89 e5                	mov    %esp,%ebp
f0108077:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010807a:	8b 45 08             	mov    0x8(%ebp),%eax
f010807d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108083:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108086:	77 19                	ja     f01080a1 <env_page_ws_get_virtual_address+0x2d>
f0108088:	68 b0 20 13 f0       	push   $0xf01320b0
f010808d:	68 46 20 13 f0       	push   $0xf0132046
f0108092:	68 8b 00 00 00       	push   $0x8b
f0108097:	68 5c 20 13 f0       	push   $0xf013205c
f010809c:	e8 0f 81 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01080a1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080a7:	89 d0                	mov    %edx,%eax
f01080a9:	01 c0                	add    %eax,%eax
f01080ab:	01 d0                	add    %edx,%eax
f01080ad:	c1 e0 03             	shl    $0x3,%eax
f01080b0:	01 c8                	add    %ecx,%eax
f01080b2:	05 b8 00 00 00       	add    $0xb8,%eax
f01080b7:	8b 00                	mov    (%eax),%eax
f01080b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080bf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01080c4:	c9                   	leave  
f01080c5:	c3                   	ret    

f01080c6 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01080c6:	55                   	push   %ebp
f01080c7:	89 e5                	mov    %esp,%ebp
f01080c9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01080cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01080cf:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01080d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01080d8:	77 19                	ja     f01080f3 <env_page_ws_get_time_stamp+0x2d>
f01080da:	68 b0 20 13 f0       	push   $0xf01320b0
f01080df:	68 46 20 13 f0       	push   $0xf0132046
f01080e4:	68 91 00 00 00       	push   $0x91
f01080e9:	68 5c 20 13 f0       	push   $0xf013205c
f01080ee:	e8 bd 80 ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01080f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080f6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080f9:	89 d0                	mov    %edx,%eax
f01080fb:	01 c0                	add    %eax,%eax
f01080fd:	01 d0                	add    %edx,%eax
f01080ff:	c1 e0 03             	shl    $0x3,%eax
f0108102:	01 c8                	add    %ecx,%eax
f0108104:	05 c0 00 00 00       	add    $0xc0,%eax
f0108109:	8b 00                	mov    (%eax),%eax
}
f010810b:	c9                   	leave  
f010810c:	c3                   	ret    

f010810d <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010810d:	55                   	push   %ebp
f010810e:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108110:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108113:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108116:	89 d0                	mov    %edx,%eax
f0108118:	01 c0                	add    %eax,%eax
f010811a:	01 d0                	add    %edx,%eax
f010811c:	c1 e0 03             	shl    $0x3,%eax
f010811f:	01 c8                	add    %ecx,%eax
f0108121:	05 bc 00 00 00       	add    $0xbc,%eax
f0108126:	8a 00                	mov    (%eax),%al
f0108128:	0f b6 c0             	movzbl %al,%eax
}
f010812b:	5d                   	pop    %ebp
f010812c:	c3                   	ret    

f010812d <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010812d:	55                   	push   %ebp
f010812e:	89 e5                	mov    %esp,%ebp
f0108130:	53                   	push   %ebx
f0108131:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108134:	83 ec 0c             	sub    $0xc,%esp
f0108137:	6a 02                	push   $0x2
f0108139:	e8 92 52 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f010813e:	83 c4 10             	add    $0x10,%esp
f0108141:	85 c0                	test   %eax,%eax
f0108143:	0f 84 fe 00 00 00    	je     f0108247 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108149:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108150:	83 ec 0c             	sub    $0xc,%esp
f0108153:	68 e8 20 13 f0       	push   $0xf01320e8
f0108158:	e8 d4 8c ff ff       	call   f0100e31 <cprintf>
f010815d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108160:	8b 45 08             	mov    0x8(%ebp),%eax
f0108163:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108169:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010816c:	eb 2c                	jmp    f010819a <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010816e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108171:	8b 10                	mov    (%eax),%edx
f0108173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108176:	8d 48 01             	lea    0x1(%eax),%ecx
f0108179:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010817c:	83 ec 04             	sub    $0x4,%esp
f010817f:	52                   	push   %edx
f0108180:	50                   	push   %eax
f0108181:	68 02 21 13 f0       	push   $0xf0132102
f0108186:	e8 a6 8c ff ff       	call   f0100e31 <cprintf>
f010818b:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010818e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108191:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108197:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	74 08                	je     f01081a8 <env_page_ws_print+0x7b>
f01081a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081a3:	8b 40 10             	mov    0x10(%eax),%eax
f01081a6:	eb 05                	jmp    f01081ad <env_page_ws_print+0x80>
f01081a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01081ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01081b0:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01081b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b9:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01081bf:	85 c0                	test   %eax,%eax
f01081c1:	75 ab                	jne    f010816e <env_page_ws_print+0x41>
f01081c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01081c7:	75 a5                	jne    f010816e <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01081c9:	83 ec 0c             	sub    $0xc,%esp
f01081cc:	68 0a 21 13 f0       	push   $0xf013210a
f01081d1:	e8 5b 8c ff ff       	call   f0100e31 <cprintf>
f01081d6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01081d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01081dc:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01081e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01081e5:	eb 2c                	jmp    f0108213 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01081e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081ea:	8b 10                	mov    (%eax),%edx
f01081ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ef:	8d 48 01             	lea    0x1(%eax),%ecx
f01081f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01081f5:	83 ec 04             	sub    $0x4,%esp
f01081f8:	52                   	push   %edx
f01081f9:	50                   	push   %eax
f01081fa:	68 02 21 13 f0       	push   $0xf0132102
f01081ff:	e8 2d 8c ff ff       	call   f0100e31 <cprintf>
f0108204:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108207:	8b 45 08             	mov    0x8(%ebp),%eax
f010820a:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108210:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108213:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108217:	74 08                	je     f0108221 <env_page_ws_print+0xf4>
f0108219:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010821c:	8b 40 10             	mov    0x10(%eax),%eax
f010821f:	eb 05                	jmp    f0108226 <env_page_ws_print+0xf9>
f0108221:	b8 00 00 00 00       	mov    $0x0,%eax
f0108226:	8b 55 08             	mov    0x8(%ebp),%edx
f0108229:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f010822f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108232:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108238:	85 c0                	test   %eax,%eax
f010823a:	75 ab                	jne    f01081e7 <env_page_ws_print+0xba>
f010823c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108240:	75 a5                	jne    f01081e7 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108242:	e9 a2 01 00 00       	jmp    f01083e9 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108247:	83 ec 0c             	sub    $0xc,%esp
f010824a:	68 25 21 13 f0       	push   $0xf0132125
f010824f:	e8 dd 8b ff ff       	call   f0100e31 <cprintf>
f0108254:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108257:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010825e:	e9 74 01 00 00       	jmp    f01083d7 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108263:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108266:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108269:	89 d0                	mov    %edx,%eax
f010826b:	01 c0                	add    %eax,%eax
f010826d:	01 d0                	add    %edx,%eax
f010826f:	c1 e0 03             	shl    $0x3,%eax
f0108272:	01 c8                	add    %ecx,%eax
f0108274:	05 bc 00 00 00       	add    $0xbc,%eax
f0108279:	8a 00                	mov    (%eax),%al
f010827b:	84 c0                	test   %al,%al
f010827d:	74 43                	je     f01082c2 <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010827f:	83 ec 0c             	sub    $0xc,%esp
f0108282:	68 2f 21 13 f0       	push   $0xf013212f
f0108287:	e8 a5 8b ff ff       	call   f0100e31 <cprintf>
f010828c:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010828f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108292:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108298:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010829b:	75 10                	jne    f01082ad <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f010829d:	83 ec 0c             	sub    $0xc,%esp
f01082a0:	68 3e 21 13 f0       	push   $0xf013213e
f01082a5:	e8 87 8b ff ff       	call   f0100e31 <cprintf>
f01082aa:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01082ad:	83 ec 0c             	sub    $0xc,%esp
f01082b0:	68 44 21 13 f0       	push   $0xf0132144
f01082b5:	e8 77 8b ff ff       	call   f0100e31 <cprintf>
f01082ba:	83 c4 10             	add    $0x10,%esp
				continue;
f01082bd:	e9 12 01 00 00       	jmp    f01083d4 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01082c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c8:	89 d0                	mov    %edx,%eax
f01082ca:	01 c0                	add    %eax,%eax
f01082cc:	01 d0                	add    %edx,%eax
f01082ce:	c1 e0 03             	shl    $0x3,%eax
f01082d1:	01 c8                	add    %ecx,%eax
f01082d3:	05 b8 00 00 00       	add    $0xb8,%eax
f01082d8:	8b 00                	mov    (%eax),%eax
f01082da:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01082dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082e3:	89 d0                	mov    %edx,%eax
f01082e5:	01 c0                	add    %eax,%eax
f01082e7:	01 d0                	add    %edx,%eax
f01082e9:	c1 e0 03             	shl    $0x3,%eax
f01082ec:	01 c8                	add    %ecx,%eax
f01082ee:	05 c0 00 00 00       	add    $0xc0,%eax
f01082f3:	8b 00                	mov    (%eax),%eax
f01082f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01082f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108301:	83 ec 08             	sub    $0x8,%esp
f0108304:	ff 75 e8             	pushl  -0x18(%ebp)
f0108307:	50                   	push   %eax
f0108308:	e8 0a fa ff ff       	call   f0107d17 <pt_get_page_permissions>
f010830d:	83 c4 10             	add    $0x10,%esp
f0108310:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108313:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108316:	83 e0 40             	and    $0x40,%eax
f0108319:	85 c0                	test   %eax,%eax
f010831b:	0f 95 c0             	setne  %al
f010831e:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108321:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108324:	83 e0 20             	and    $0x20,%eax
f0108327:	85 c0                	test   %eax,%eax
f0108329:	0f 95 c0             	setne  %al
f010832c:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010832f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108332:	25 00 02 00 00       	and    $0x200,%eax
f0108337:	85 c0                	test   %eax,%eax
f0108339:	0f 95 c0             	setne  %al
f010833c:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010833f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108342:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108345:	89 d0                	mov    %edx,%eax
f0108347:	01 c0                	add    %eax,%eax
f0108349:	01 d0                	add    %edx,%eax
f010834b:	c1 e0 03             	shl    $0x3,%eax
f010834e:	01 c8                	add    %ecx,%eax
f0108350:	05 b8 00 00 00       	add    $0xb8,%eax
f0108355:	8b 00                	mov    (%eax),%eax
f0108357:	83 ec 04             	sub    $0x4,%esp
f010835a:	50                   	push   %eax
f010835b:	ff 75 ec             	pushl  -0x14(%ebp)
f010835e:	68 46 21 13 f0       	push   $0xf0132146
f0108363:	e8 c9 8a ff ff       	call   f0100e31 <cprintf>
f0108368:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010836b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010836e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108371:	89 d0                	mov    %edx,%eax
f0108373:	01 c0                	add    %eax,%eax
f0108375:	01 d0                	add    %edx,%eax
f0108377:	c1 e0 03             	shl    $0x3,%eax
f010837a:	01 c8                	add    %ecx,%eax
f010837c:	05 c4 00 00 00       	add    $0xc4,%eax
f0108381:	8b 18                	mov    (%eax),%ebx
f0108383:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108387:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010838b:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010838f:	83 ec 08             	sub    $0x8,%esp
f0108392:	53                   	push   %ebx
f0108393:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108396:	51                   	push   %ecx
f0108397:	52                   	push   %edx
f0108398:	50                   	push   %eax
f0108399:	68 58 21 13 f0       	push   $0xf0132158
f010839e:	e8 8e 8a ff ff       	call   f0100e31 <cprintf>
f01083a3:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01083a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a9:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f01083af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083b2:	75 10                	jne    f01083c4 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f01083b4:	83 ec 0c             	sub    $0xc,%esp
f01083b7:	68 9f 21 13 f0       	push   $0xf013219f
f01083bc:	e8 70 8a ff ff       	call   f0100e31 <cprintf>
f01083c1:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083c4:	83 ec 0c             	sub    $0xc,%esp
f01083c7:	68 44 21 13 f0       	push   $0xf0132144
f01083cc:	e8 60 8a ff ff       	call   f0100e31 <cprintf>
f01083d1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01083d4:	ff 45 ec             	incl   -0x14(%ebp)
f01083d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083da:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083e3:	0f 87 7a fe ff ff    	ja     f0108263 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01083e9:	90                   	nop
f01083ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01083ed:	c9                   	leave  
f01083ee:	c3                   	ret    

f01083ef <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01083ef:	55                   	push   %ebp
f01083f0:	89 e5                	mov    %esp,%ebp
f01083f2:	53                   	push   %ebx
f01083f3:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01083f6:	83 ec 0c             	sub    $0xc,%esp
f01083f9:	68 a4 21 13 f0       	push   $0xf01321a4
f01083fe:	e8 2e 8a ff ff       	call   f0100e31 <cprintf>
f0108403:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108406:	83 ec 0c             	sub    $0xc,%esp
f0108409:	68 d9 21 13 f0       	push   $0xf01321d9
f010840e:	e8 1e 8a ff ff       	call   f0100e31 <cprintf>
f0108413:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010841d:	e9 19 01 00 00       	jmp    f010853b <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f0108422:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108425:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108428:	89 d0                	mov    %edx,%eax
f010842a:	01 c0                	add    %eax,%eax
f010842c:	01 d0                	add    %edx,%eax
f010842e:	c1 e0 03             	shl    $0x3,%eax
f0108431:	01 c8                	add    %ecx,%eax
f0108433:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108438:	8a 00                	mov    (%eax),%al
f010843a:	84 c0                	test   %al,%al
f010843c:	74 43                	je     f0108481 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010843e:	83 ec 0c             	sub    $0xc,%esp
f0108441:	68 2f 21 13 f0       	push   $0xf013212f
f0108446:	e8 e6 89 ff ff       	call   f0100e31 <cprintf>
f010844b:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010844e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108451:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108457:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845a:	75 10                	jne    f010846c <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f010845c:	83 ec 0c             	sub    $0xc,%esp
f010845f:	68 3e 21 13 f0       	push   $0xf013213e
f0108464:	e8 c8 89 ff ff       	call   f0100e31 <cprintf>
f0108469:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010846c:	83 ec 0c             	sub    $0xc,%esp
f010846f:	68 44 21 13 f0       	push   $0xf0132144
f0108474:	e8 b8 89 ff ff       	call   f0100e31 <cprintf>
f0108479:	83 c4 10             	add    $0x10,%esp
			continue;
f010847c:	e9 b7 00 00 00       	jmp    f0108538 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108481:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108484:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108487:	89 d0                	mov    %edx,%eax
f0108489:	01 c0                	add    %eax,%eax
f010848b:	01 d0                	add    %edx,%eax
f010848d:	c1 e0 03             	shl    $0x3,%eax
f0108490:	01 c8                	add    %ecx,%eax
f0108492:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108497:	8b 00                	mov    (%eax),%eax
f0108499:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f010849c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010849f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084a2:	89 d0                	mov    %edx,%eax
f01084a4:	01 c0                	add    %eax,%eax
f01084a6:	01 d0                	add    %edx,%eax
f01084a8:	c1 e0 03             	shl    $0x3,%eax
f01084ab:	01 c8                	add    %ecx,%eax
f01084ad:	05 80 d5 01 00       	add    $0x1d580,%eax
f01084b2:	8b 00                	mov    (%eax),%eax
f01084b4:	83 ec 04             	sub    $0x4,%esp
f01084b7:	50                   	push   %eax
f01084b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01084bb:	68 e4 21 13 f0       	push   $0xf01321e4
f01084c0:	e8 6c 89 ff ff       	call   f0100e31 <cprintf>
f01084c5:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01084c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084ce:	89 d0                	mov    %edx,%eax
f01084d0:	01 c0                	add    %eax,%eax
f01084d2:	01 d0                	add    %edx,%eax
f01084d4:	c1 e0 03             	shl    $0x3,%eax
f01084d7:	01 c8                	add    %ecx,%eax
f01084d9:	05 88 d5 01 00       	add    $0x1d588,%eax
f01084de:	8b 18                	mov    (%eax),%ebx
f01084e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01084e3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01084e9:	83 ec 08             	sub    $0x8,%esp
f01084ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01084ef:	50                   	push   %eax
f01084f0:	e8 fe f8 ff ff       	call   f0107df3 <pd_is_table_used>
f01084f5:	83 c4 10             	add    $0x10,%esp
f01084f8:	83 ec 04             	sub    $0x4,%esp
f01084fb:	53                   	push   %ebx
f01084fc:	50                   	push   %eax
f01084fd:	68 fc 21 13 f0       	push   $0xf01321fc
f0108502:	e8 2a 89 ff ff       	call   f0100e31 <cprintf>
f0108507:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f010850a:	8b 45 08             	mov    0x8(%ebp),%eax
f010850d:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108513:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108516:	75 10                	jne    f0108528 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f0108518:	83 ec 0c             	sub    $0xc,%esp
f010851b:	68 9f 21 13 f0       	push   $0xf013219f
f0108520:	e8 0c 89 ff ff       	call   f0100e31 <cprintf>
f0108525:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108528:	83 ec 0c             	sub    $0xc,%esp
f010852b:	68 44 21 13 f0       	push   $0xf0132144
f0108530:	e8 fc 88 ff ff       	call   f0100e31 <cprintf>
f0108535:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108538:	ff 45 f4             	incl   -0xc(%ebp)
f010853b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010853f:	0f 86 dd fe ff ff    	jbe    f0108422 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108545:	90                   	nop
f0108546:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108549:	c9                   	leave  
f010854a:	c3                   	ret    

f010854b <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010854b:	55                   	push   %ebp
f010854c:	89 e5                	mov    %esp,%ebp
f010854e:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108551:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108558:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010855f:	eb 22                	jmp    f0108583 <env_table_ws_get_size+0x38>
f0108561:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108564:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108567:	89 d0                	mov    %edx,%eax
f0108569:	01 c0                	add    %eax,%eax
f010856b:	01 d0                	add    %edx,%eax
f010856d:	c1 e0 03             	shl    $0x3,%eax
f0108570:	01 c8                	add    %ecx,%eax
f0108572:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108577:	8a 00                	mov    (%eax),%al
f0108579:	84 c0                	test   %al,%al
f010857b:	75 03                	jne    f0108580 <env_table_ws_get_size+0x35>
f010857d:	ff 45 f8             	incl   -0x8(%ebp)
f0108580:	ff 45 fc             	incl   -0x4(%ebp)
f0108583:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108587:	7e d8                	jle    f0108561 <env_table_ws_get_size+0x16>
	return counter;
f0108589:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010858c:	c9                   	leave  
f010858d:	c3                   	ret    

f010858e <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010858e:	55                   	push   %ebp
f010858f:	89 e5                	mov    %esp,%ebp
f0108591:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108594:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010859b:	eb 4e                	jmp    f01085eb <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010859d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085a3:	89 d0                	mov    %edx,%eax
f01085a5:	01 c0                	add    %eax,%eax
f01085a7:	01 d0                	add    %edx,%eax
f01085a9:	c1 e0 03             	shl    $0x3,%eax
f01085ac:	01 c8                	add    %ecx,%eax
f01085ae:	05 80 d5 01 00       	add    $0x1d580,%eax
f01085b3:	8b 00                	mov    (%eax),%eax
f01085b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085bb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01085c0:	89 c2                	mov    %eax,%edx
f01085c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01085c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01085cb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01085d0:	39 c2                	cmp    %eax,%edx
f01085d2:	75 14                	jne    f01085e8 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01085d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085d7:	83 ec 08             	sub    $0x8,%esp
f01085da:	50                   	push   %eax
f01085db:	ff 75 08             	pushl  0x8(%ebp)
f01085de:	e8 bc 00 00 00       	call   f010869f <env_table_ws_clear_entry>
f01085e3:	83 c4 10             	add    $0x10,%esp
			break;
f01085e6:	eb 09                	jmp    f01085f1 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01085e8:	ff 45 f4             	incl   -0xc(%ebp)
f01085eb:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01085ef:	7e ac                	jle    f010859d <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01085f1:	90                   	nop
f01085f2:	c9                   	leave  
f01085f3:	c3                   	ret    

f01085f4 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01085f4:	55                   	push   %ebp
f01085f5:	89 e5                	mov    %esp,%ebp
f01085f7:	53                   	push   %ebx
f01085f8:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085fb:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ff:	76 19                	jbe    f010861a <env_table_ws_set_entry+0x26>
f0108601:	68 20 22 13 f0       	push   $0xf0132220
f0108606:	68 46 20 13 f0       	push   $0xf0132046
f010860b:	68 07 01 00 00       	push   $0x107
f0108610:	68 5c 20 13 f0       	push   $0xf013205c
f0108615:	e8 96 7b ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010861a:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108621:	76 19                	jbe    f010863c <env_table_ws_set_entry+0x48>
f0108623:	68 7c 20 13 f0       	push   $0xf013207c
f0108628:	68 46 20 13 f0       	push   $0xf0132046
f010862d:	68 08 01 00 00       	push   $0x108
f0108632:	68 5c 20 13 f0       	push   $0xf013205c
f0108637:	e8 74 7b ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010863c:	8b 45 10             	mov    0x10(%ebp),%eax
f010863f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108642:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108645:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010864a:	89 c1                	mov    %eax,%ecx
f010864c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010864f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108652:	89 d0                	mov    %edx,%eax
f0108654:	01 c0                	add    %eax,%eax
f0108656:	01 d0                	add    %edx,%eax
f0108658:	c1 e0 03             	shl    $0x3,%eax
f010865b:	01 d8                	add    %ebx,%eax
f010865d:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108662:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108664:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108667:	8b 55 0c             	mov    0xc(%ebp),%edx
f010866a:	89 d0                	mov    %edx,%eax
f010866c:	01 c0                	add    %eax,%eax
f010866e:	01 d0                	add    %edx,%eax
f0108670:	c1 e0 03             	shl    $0x3,%eax
f0108673:	01 c8                	add    %ecx,%eax
f0108675:	05 84 d5 01 00       	add    $0x1d584,%eax
f010867a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010867d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108680:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108683:	89 d0                	mov    %edx,%eax
f0108685:	01 c0                	add    %eax,%eax
f0108687:	01 d0                	add    %edx,%eax
f0108689:	c1 e0 03             	shl    $0x3,%eax
f010868c:	01 c8                	add    %ecx,%eax
f010868e:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108693:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108699:	90                   	nop
}
f010869a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010869d:	c9                   	leave  
f010869e:	c3                   	ret    

f010869f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010869f:	55                   	push   %ebp
f01086a0:	89 e5                	mov    %esp,%ebp
f01086a2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a9:	76 19                	jbe    f01086c4 <env_table_ws_clear_entry+0x25>
f01086ab:	68 20 22 13 f0       	push   $0xf0132220
f01086b0:	68 46 20 13 f0       	push   $0xf0132046
f01086b5:	68 13 01 00 00       	push   $0x113
f01086ba:	68 5c 20 13 f0       	push   $0xf013205c
f01086bf:	e8 ec 7a ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01086c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086ca:	89 d0                	mov    %edx,%eax
f01086cc:	01 c0                	add    %eax,%eax
f01086ce:	01 d0                	add    %edx,%eax
f01086d0:	c1 e0 03             	shl    $0x3,%eax
f01086d3:	01 c8                	add    %ecx,%eax
f01086d5:	05 80 d5 01 00       	add    $0x1d580,%eax
f01086da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01086e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e6:	89 d0                	mov    %edx,%eax
f01086e8:	01 c0                	add    %eax,%eax
f01086ea:	01 d0                	add    %edx,%eax
f01086ec:	c1 e0 03             	shl    $0x3,%eax
f01086ef:	01 c8                	add    %ecx,%eax
f01086f1:	05 84 d5 01 00       	add    $0x1d584,%eax
f01086f6:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01086f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086ff:	89 d0                	mov    %edx,%eax
f0108701:	01 c0                	add    %eax,%eax
f0108703:	01 d0                	add    %edx,%eax
f0108705:	c1 e0 03             	shl    $0x3,%eax
f0108708:	01 c8                	add    %ecx,%eax
f010870a:	05 88 d5 01 00       	add    $0x1d588,%eax
f010870f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108715:	90                   	nop
f0108716:	c9                   	leave  
f0108717:	c3                   	ret    

f0108718 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108718:	55                   	push   %ebp
f0108719:	89 e5                	mov    %esp,%ebp
f010871b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010871e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108722:	76 19                	jbe    f010873d <env_table_ws_get_virtual_address+0x25>
f0108724:	68 20 22 13 f0       	push   $0xf0132220
f0108729:	68 46 20 13 f0       	push   $0xf0132046
f010872e:	68 1b 01 00 00       	push   $0x11b
f0108733:	68 5c 20 13 f0       	push   $0xf013205c
f0108738:	e8 73 7a ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f010873d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108740:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108743:	89 d0                	mov    %edx,%eax
f0108745:	01 c0                	add    %eax,%eax
f0108747:	01 d0                	add    %edx,%eax
f0108749:	c1 e0 03             	shl    $0x3,%eax
f010874c:	01 c8                	add    %ecx,%eax
f010874e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108753:	8b 00                	mov    (%eax),%eax
f0108755:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108758:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010875b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108760:	c9                   	leave  
f0108761:	c3                   	ret    

f0108762 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108762:	55                   	push   %ebp
f0108763:	89 e5                	mov    %esp,%ebp
f0108765:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108768:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010876c:	76 19                	jbe    f0108787 <env_table_ws_get_time_stamp+0x25>
f010876e:	68 20 22 13 f0       	push   $0xf0132220
f0108773:	68 46 20 13 f0       	push   $0xf0132046
f0108778:	68 22 01 00 00       	push   $0x122
f010877d:	68 5c 20 13 f0       	push   $0xf013205c
f0108782:	e8 29 7a ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108787:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010878a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010878d:	89 d0                	mov    %edx,%eax
f010878f:	01 c0                	add    %eax,%eax
f0108791:	01 d0                	add    %edx,%eax
f0108793:	c1 e0 03             	shl    $0x3,%eax
f0108796:	01 c8                	add    %ecx,%eax
f0108798:	05 88 d5 01 00       	add    $0x1d588,%eax
f010879d:	8b 00                	mov    (%eax),%eax
}
f010879f:	c9                   	leave  
f01087a0:	c3                   	ret    

f01087a1 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01087a1:	55                   	push   %ebp
f01087a2:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01087a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087aa:	89 d0                	mov    %edx,%eax
f01087ac:	01 c0                	add    %eax,%eax
f01087ae:	01 d0                	add    %edx,%eax
f01087b0:	c1 e0 03             	shl    $0x3,%eax
f01087b3:	01 c8                	add    %ecx,%eax
f01087b5:	05 84 d5 01 00       	add    $0x1d584,%eax
f01087ba:	8a 00                	mov    (%eax),%al
f01087bc:	0f b6 c0             	movzbl %al,%eax
}
f01087bf:	5d                   	pop    %ebp
f01087c0:	c3                   	ret    

f01087c1 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01087c1:	55                   	push   %ebp
f01087c2:	89 e5                	mov    %esp,%ebp
f01087c4:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f01087c7:	83 ec 04             	sub    $0x4,%esp
f01087ca:	68 54 22 13 f0       	push   $0xf0132254
f01087cf:	6a 1f                	push   $0x1f
f01087d1:	68 82 22 13 f0       	push   $0xf0132282
f01087d6:	e8 d5 79 ff ff       	call   f01001b0 <_panic>

f01087db <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01087db:	55                   	push   %ebp
f01087dc:	89 e5                	mov    %esp,%ebp
f01087de:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f01087e1:	83 ec 04             	sub    $0x4,%esp
f01087e4:	68 a0 22 13 f0       	push   $0xf01322a0
f01087e9:	6a 32                	push   $0x32
f01087eb:	68 82 22 13 f0       	push   $0xf0132282
f01087f0:	e8 bb 79 ff ff       	call   f01001b0 <_panic>

f01087f5 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f01087f5:	55                   	push   %ebp
f01087f6:	89 e5                	mov    %esp,%ebp
f01087f8:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f01087fb:	83 ec 04             	sub    $0x4,%esp
f01087fe:	68 d0 22 13 f0       	push   $0xf01322d0
f0108803:	6a 41                	push   $0x41
f0108805:	68 82 22 13 f0       	push   $0xf0132282
f010880a:	e8 a1 79 ff ff       	call   f01001b0 <_panic>

f010880f <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010880f:	55                   	push   %ebp
f0108810:	89 e5                	mov    %esp,%ebp
f0108812:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108815:	83 ec 04             	sub    $0x4,%esp
f0108818:	68 fc 22 13 f0       	push   $0xf01322fc
f010881d:	6a 4e                	push   $0x4e
f010881f:	68 82 22 13 f0       	push   $0xf0132282
f0108824:	e8 87 79 ff ff       	call   f01001b0 <_panic>

f0108829 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108829:	55                   	push   %ebp
f010882a:	89 e5                	mov    %esp,%ebp
f010882c:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f010882f:	83 ec 04             	sub    $0x4,%esp
f0108832:	68 2c 23 13 f0       	push   $0xf013232c
f0108837:	6a 57                	push   $0x57
f0108839:	68 82 22 13 f0       	push   $0xf0132282
f010883e:	e8 6d 79 ff ff       	call   f01001b0 <_panic>

f0108843 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108843:	55                   	push   %ebp
f0108844:	89 e5                	mov    %esp,%ebp
f0108846:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	68 64 23 13 f0       	push   $0xf0132364
f0108851:	6a 63                	push   $0x63
f0108853:	68 82 22 13 f0       	push   $0xf0132282
f0108858:	e8 53 79 ff ff       	call   f01001b0 <_panic>

f010885d <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010885d:	55                   	push   %ebp
f010885e:	89 e5                	mov    %esp,%ebp
f0108860:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108863:	e8 7a 4e 02 00       	call   f012d6e2 <inctst>
	return;
f0108868:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108869:	c9                   	leave  
f010886a:	c3                   	ret    

f010886b <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010886b:	55                   	push   %ebp
f010886c:	89 e5                	mov    %esp,%ebp
f010886e:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108871:	e8 6c 4e 02 00       	call   f012d6e2 <inctst>
	return;
f0108876:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108877:	c9                   	leave  
f0108878:	c3                   	ret    

f0108879 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108879:	55                   	push   %ebp
f010887a:	89 e5                	mov    %esp,%ebp
f010887c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f010887f:	83 ec 04             	sub    $0x4,%esp
f0108882:	68 9c 23 13 f0       	push   $0xf013239c
f0108887:	68 99 00 00 00       	push   $0x99
f010888c:	68 82 22 13 f0       	push   $0xf0132282
f0108891:	e8 1a 79 ff ff       	call   f01001b0 <_panic>

f0108896 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108896:	55                   	push   %ebp
f0108897:	89 e5                	mov    %esp,%ebp
f0108899:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f010889c:	83 ec 04             	sub    $0x4,%esp
f010889f:	68 dc 23 13 f0       	push   $0xf01323dc
f01088a4:	68 a3 00 00 00       	push   $0xa3
f01088a9:	68 82 22 13 f0       	push   $0xf0132282
f01088ae:	e8 fd 78 ff ff       	call   f01001b0 <_panic>

f01088b3 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01088b3:	55                   	push   %ebp
f01088b4:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01088b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b9:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f01088bf:	29 d0                	sub    %edx,%eax
f01088c1:	c1 f8 02             	sar    $0x2,%eax
f01088c4:	89 c2                	mov    %eax,%edx
f01088c6:	89 d0                	mov    %edx,%eax
f01088c8:	c1 e0 03             	shl    $0x3,%eax
f01088cb:	01 d0                	add    %edx,%eax
f01088cd:	c1 e0 03             	shl    $0x3,%eax
f01088d0:	01 d0                	add    %edx,%eax
f01088d2:	c1 e0 03             	shl    $0x3,%eax
f01088d5:	01 d0                	add    %edx,%eax
f01088d7:	c1 e0 03             	shl    $0x3,%eax
f01088da:	01 d0                	add    %edx,%eax
f01088dc:	89 c1                	mov    %eax,%ecx
f01088de:	c1 e1 0f             	shl    $0xf,%ecx
f01088e1:	01 c8                	add    %ecx,%eax
f01088e3:	c1 e0 03             	shl    $0x3,%eax
f01088e6:	01 d0                	add    %edx,%eax
f01088e8:	f7 d8                	neg    %eax
}
f01088ea:	5d                   	pop    %ebp
f01088eb:	c3                   	ret    

f01088ec <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01088ec:	55                   	push   %ebp
f01088ed:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01088ef:	ff 75 08             	pushl  0x8(%ebp)
f01088f2:	e8 bc ff ff ff       	call   f01088b3 <to_frame_number>
f01088f7:	83 c4 04             	add    $0x4,%esp
f01088fa:	c1 e0 0c             	shl    $0xc,%eax
}
f01088fd:	c9                   	leave  
f01088fe:	c3                   	ret    

f01088ff <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f01088ff:	55                   	push   %ebp
f0108900:	89 e5                	mov    %esp,%ebp
f0108902:	57                   	push   %edi
f0108903:	56                   	push   %esi
f0108904:	53                   	push   %ebx
f0108905:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010890b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108912:	83 ec 0c             	sub    $0xc,%esp
f0108915:	ff 75 08             	pushl  0x8(%ebp)
f0108918:	e8 f6 21 00 00       	call   f010ab13 <get_user_program_info>
f010891d:	83 c4 10             	add    $0x10,%esp
f0108920:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108923:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108927:	75 0a                	jne    f0108933 <env_create+0x34>
f0108929:	b8 00 00 00 00       	mov    $0x0,%eax
f010892e:	e9 45 0c 00 00       	jmp    f0109578 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108933:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108936:	8b 40 08             	mov    0x8(%eax),%eax
f0108939:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010893c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108943:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108946:	83 ec 0c             	sub    $0xc,%esp
f0108949:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f010894f:	50                   	push   %eax
f0108950:	e8 aa 0f 00 00       	call   f01098ff <allocate_environment>
f0108955:	83 c4 10             	add    $0x10,%esp
f0108958:	85 c0                	test   %eax,%eax
f010895a:	79 0a                	jns    f0108966 <env_create+0x67>
	{
		return 0;
f010895c:	b8 00 00 00 00       	mov    $0x0,%eax
f0108961:	e9 12 0c 00 00       	jmp    f0109578 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108966:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108969:	8b 00                	mov    (%eax),%eax
f010896b:	83 ec 0c             	sub    $0xc,%esp
f010896e:	50                   	push   %eax
f010896f:	e8 1a 61 02 00       	call   f012ea8e <strlen>
f0108974:	83 c4 10             	add    $0x10,%esp
f0108977:	83 f8 3f             	cmp    $0x3f,%eax
f010897a:	7f 1d                	jg     f0108999 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f010897c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010897f:	8b 00                	mov    (%eax),%eax
f0108981:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108987:	83 c2 5c             	add    $0x5c,%edx
f010898a:	83 ec 08             	sub    $0x8,%esp
f010898d:	50                   	push   %eax
f010898e:	52                   	push   %edx
f010898f:	e8 49 61 02 00       	call   f012eadd <strcpy>
f0108994:	83 c4 10             	add    $0x10,%esp
f0108997:	eb 1d                	jmp    f01089b6 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108999:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010899c:	8b 00                	mov    (%eax),%eax
f010899e:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01089a4:	83 c2 5c             	add    $0x5c,%edx
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	6a 3f                	push   $0x3f
f01089ac:	50                   	push   %eax
f01089ad:	52                   	push   %edx
f01089ae:	e8 58 61 02 00       	call   f012eb0b <strncpy>
f01089b3:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f01089b6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01089bd:	00 00 00 

		allocate_frame(&p) ;
f01089c0:	83 ec 0c             	sub    $0xc,%esp
f01089c3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01089c9:	50                   	push   %eax
f01089ca:	e8 8a e5 ff ff       	call   f0106f59 <allocate_frame>
f01089cf:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f01089d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01089d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01089de:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01089e4:	83 ec 0c             	sub    $0xc,%esp
f01089e7:	50                   	push   %eax
f01089e8:	e8 ff fe ff ff       	call   f01088ec <to_physical_address>
f01089ed:	83 c4 10             	add    $0x10,%esp
f01089f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01089f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01089f6:	c1 e8 0c             	shr    $0xc,%eax
f01089f9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01089fc:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0108a01:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108a04:	72 17                	jb     f0108a1d <env_create+0x11e>
f0108a06:	ff 75 b0             	pushl  -0x50(%ebp)
f0108a09:	68 08 24 13 f0       	push   $0xf0132408
f0108a0e:	68 8a 00 00 00       	push   $0x8a
f0108a13:	68 37 24 13 f0       	push   $0xf0132437
f0108a18:	e8 93 77 ff ff       	call   f01001b0 <_panic>
f0108a1d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108a20:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108a25:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108a28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108a2e:	83 ec 0c             	sub    $0xc,%esp
f0108a31:	50                   	push   %eax
f0108a32:	e8 b5 fe ff ff       	call   f01088ec <to_physical_address>
f0108a37:	83 c4 10             	add    $0x10,%esp
f0108a3a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108a3d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a43:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a46:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108a4c:	83 ec 0c             	sub    $0xc,%esp
f0108a4f:	6a 02                	push   $0x2
f0108a51:	e8 7a 49 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f0108a56:	83 c4 10             	add    $0x10,%esp
f0108a59:	85 c0                	test   %eax,%eax
f0108a5b:	74 21                	je     f0108a7e <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108a5d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a63:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a66:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108a6c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a75:	2b 55 10             	sub    0x10(%ebp),%edx
f0108a78:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108a7e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108a82:	75 12                	jne    f0108a96 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108a84:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a8a:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108a91:	00 00 00 
f0108a94:	eb 0f                	jmp    f0108aa5 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108a96:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108a9c:	8b 55 14             	mov    0x14(%ebp),%edx
f0108a9f:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108aa5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108aab:	83 ec 04             	sub    $0x4,%esp
f0108aae:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108ab1:	ff 75 a8             	pushl  -0x58(%ebp)
f0108ab4:	50                   	push   %eax
f0108ab5:	e8 ac 16 00 00       	call   f010a166 <initialize_environment>
f0108aba:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108abd:	0f 20 d8             	mov    %cr3,%eax
f0108ac0:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108ac3:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108ac6:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108ac9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108acf:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108ad5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108adb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ae1:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108ae4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108aeb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108af2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108af8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108afe:	48                   	dec    %eax
f0108aff:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108b02:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108b09:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108b0c:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108b12:	83 ec 08             	sub    $0x8,%esp
f0108b15:	ff 75 b8             	pushl  -0x48(%ebp)
f0108b18:	50                   	push   %eax
f0108b19:	e8 b1 1d 00 00       	call   f010a8cf <PROGRAM_SEGMENT_FIRST>
f0108b1e:	83 c4 0c             	add    $0xc,%esp
f0108b21:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108b27:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108b2d:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108b32:	89 c7                	mov    %eax,%edi
f0108b34:	89 d6                	mov    %edx,%esi
f0108b36:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108b38:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108b3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b41:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b44:	8b 40 10             	mov    0x10(%eax),%eax
f0108b47:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108b4a:	75 07                	jne    f0108b53 <env_create+0x254>
f0108b4c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108b53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108b59:	e9 24 03 00 00       	jmp    f0108e82 <env_create+0x583>
	{
		segment_counter++;
f0108b5e:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108b61:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108b68:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108b6b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108b71:	83 ec 0c             	sub    $0xc,%esp
f0108b74:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108b7a:	52                   	push   %edx
f0108b7b:	ff 75 dc             	pushl  -0x24(%ebp)
f0108b7e:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108b84:	52                   	push   %edx
f0108b85:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108b88:	50                   	push   %eax
f0108b89:	e8 2f 0e 00 00       	call   f01099bd <program_segment_alloc_map_copy_workingset>
f0108b8e:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108b91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108b97:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b9d:	8b 00                	mov    (%eax),%eax
f0108b9f:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108ba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ba5:	8b 40 0c             	mov    0xc(%eax),%eax
f0108ba8:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108bab:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108bae:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108bb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108bb4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108bb9:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108bbc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108bc3:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108bc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108bc9:	01 d0                	add    %edx,%eax
f0108bcb:	48                   	dec    %eax
f0108bcc:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108bcf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0108bd7:	f7 75 84             	divl   -0x7c(%ebp)
f0108bda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108bdd:	29 d0                	sub    %edx,%eax
f0108bdf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108be5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108be8:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108beb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108bf1:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f0108bf6:	83 ec 04             	sub    $0x4,%esp
f0108bf9:	68 00 10 00 00       	push   $0x1000
f0108bfe:	6a 00                	push   $0x0
f0108c00:	50                   	push   %eax
f0108c01:	e8 76 60 02 00       	call   f012ec7c <memset>
f0108c06:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108c09:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108c0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108c0f:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108c15:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108c1b:	01 d0                	add    %edx,%eax
f0108c1d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108c20:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c23:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108c26:	eb 13                	jmp    f0108c3b <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108c28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108c2b:	8a 10                	mov    (%eax),%dl
f0108c2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c30:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108c32:	ff 45 cc             	incl   -0x34(%ebp)
f0108c35:	ff 45 d4             	incl   -0x2c(%ebp)
f0108c38:	ff 45 d0             	incl   -0x30(%ebp)
f0108c3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c3e:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0108c44:	72 e2                	jb     f0108c28 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108c46:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108c4c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108c52:	83 ec 04             	sub    $0x4,%esp
f0108c55:	52                   	push   %edx
f0108c56:	ff 75 88             	pushl  -0x78(%ebp)
f0108c59:	50                   	push   %eax
f0108c5a:	e8 a0 ae ff ff       	call   f0103aff <pf_add_env_page>
f0108c5f:	83 c4 10             	add    $0x10,%esp
f0108c62:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108c65:	75 17                	jne    f0108c7e <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108c67:	83 ec 04             	sub    $0x4,%esp
f0108c6a:	68 54 24 13 f0       	push   $0xf0132454
f0108c6f:	68 de 00 00 00       	push   $0xde
f0108c74:	68 37 24 13 f0       	push   $0xf0132437
f0108c79:	e8 32 75 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c81:	8b 50 04             	mov    0x4(%eax),%edx
f0108c84:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108c87:	01 d0                	add    %edx,%eax
f0108c89:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0108c8f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108c95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c9a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108ca0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ca3:	8b 50 04             	mov    0x4(%eax),%edx
f0108ca6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108ca9:	01 d0                	add    %edx,%eax
f0108cab:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108cb1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108cb7:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108cba:	eb 43                	jmp    f0108cff <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108cbc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108cbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108cc5:	83 ec 04             	sub    $0x4,%esp
f0108cc8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ccb:	52                   	push   %edx
f0108ccc:	50                   	push   %eax
f0108ccd:	e8 2d ae ff ff       	call   f0103aff <pf_add_env_page>
f0108cd2:	83 c4 10             	add    $0x10,%esp
f0108cd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108cd8:	75 17                	jne    f0108cf1 <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108cda:	83 ec 04             	sub    $0x4,%esp
f0108cdd:	68 54 24 13 f0       	push   $0xf0132454
f0108ce2:	68 eb 00 00 00       	push   $0xeb
f0108ce7:	68 37 24 13 f0       	push   $0xf0132437
f0108cec:	e8 bf 74 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108cf1:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108cf8:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108cff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108d02:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108d08:	72 b2                	jb     f0108cbc <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108d0a:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f0108d0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108d12:	83 ec 04             	sub    $0x4,%esp
f0108d15:	68 00 10 00 00       	push   $0x1000
f0108d1a:	6a 00                	push   $0x0
f0108d1c:	ff 75 d0             	pushl  -0x30(%ebp)
f0108d1f:	e8 58 5f 02 00       	call   f012ec7c <memset>
f0108d24:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108d27:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108d2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108d30:	eb 13                	jmp    f0108d45 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f0108d32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d35:	8a 10                	mov    (%eax),%dl
f0108d37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108d3a:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108d3c:	ff 45 cc             	incl   -0x34(%ebp)
f0108d3f:	ff 45 d4             	incl   -0x2c(%ebp)
f0108d42:	ff 45 d0             	incl   -0x30(%ebp)
f0108d45:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108d48:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0108d4e:	72 e2                	jb     f0108d32 <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108d50:	8b 15 f8 be 2b f0    	mov    0xf02bbef8,%edx
f0108d56:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108d5c:	83 ec 04             	sub    $0x4,%esp
f0108d5f:	52                   	push   %edx
f0108d60:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0108d66:	50                   	push   %eax
f0108d67:	e8 93 ad ff ff       	call   f0103aff <pf_add_env_page>
f0108d6c:	83 c4 10             	add    $0x10,%esp
f0108d6f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108d72:	75 17                	jne    f0108d8b <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108d74:	83 ec 04             	sub    $0x4,%esp
f0108d77:	68 54 24 13 f0       	push   $0xf0132454
f0108d7c:	68 fa 00 00 00       	push   $0xfa
f0108d81:	68 37 24 13 f0       	push   $0xf0132437
f0108d86:	e8 25 74 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0108d8b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0108d92:	10 00 00 
f0108d95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d98:	8b 50 04             	mov    0x4(%eax),%edx
f0108d9b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108d9e:	01 c2                	add    %eax,%edx
f0108da0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108da6:	01 d0                	add    %edx,%eax
f0108da8:	48                   	dec    %eax
f0108da9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108daf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108db5:	ba 00 00 00 00       	mov    $0x0,%edx
f0108dba:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108dc0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108dc6:	29 d0                	sub    %edx,%eax
f0108dc8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108dcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108dce:	8b 50 08             	mov    0x8(%eax),%edx
f0108dd1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108dd4:	01 d0                	add    %edx,%eax
f0108dd6:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108dd9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108ddf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108de6:	eb 41                	jmp    f0108e29 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108de8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108dee:	83 ec 04             	sub    $0x4,%esp
f0108df1:	6a 01                	push   $0x1
f0108df3:	ff 75 c8             	pushl  -0x38(%ebp)
f0108df6:	50                   	push   %eax
f0108df7:	e8 cd ab ff ff       	call   f01039c9 <pf_add_empty_env_page>
f0108dfc:	83 c4 10             	add    $0x10,%esp
f0108dff:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108e02:	75 17                	jne    f0108e1b <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108e04:	83 ec 04             	sub    $0x4,%esp
f0108e07:	68 54 24 13 f0       	push   $0xf0132454
f0108e0c:	68 07 01 00 00       	push   $0x107
f0108e11:	68 37 24 13 f0       	push   $0xf0132437
f0108e16:	e8 95 73 ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108e1b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108e22:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0108e29:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0108e30:	10 00 00 
f0108e33:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0108e39:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0108e3f:	01 d0                	add    %edx,%eax
f0108e41:	48                   	dec    %eax
f0108e42:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0108e48:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108e4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e53:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0108e59:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108e5f:	29 d0                	sub    %edx,%eax
f0108e61:	89 c2                	mov    %eax,%edx
f0108e63:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108e66:	39 c2                	cmp    %eax,%edx
f0108e68:	0f 87 7a ff ff ff    	ja     f0108de8 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108e6e:	83 ec 08             	sub    $0x8,%esp
f0108e71:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e74:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108e77:	e8 48 19 00 00       	call   f010a7c4 <PROGRAM_SEGMENT_NEXT>
f0108e7c:	83 c4 10             	add    $0x10,%esp
f0108e7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108e82:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108e86:	0f 85 d2 fc ff ff    	jne    f0108b5e <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f0108e8c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0108e93:	e9 a7 00 00 00       	jmp    f0108f3f <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0108e98:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0108e9e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108ea1:	89 d0                	mov    %edx,%eax
f0108ea3:	01 c0                	add    %eax,%eax
f0108ea5:	01 d0                	add    %edx,%eax
f0108ea7:	c1 e0 03             	shl    $0x3,%eax
f0108eaa:	01 c8                	add    %ecx,%eax
f0108eac:	05 bc 00 00 00       	add    $0xbc,%eax
f0108eb1:	8a 00                	mov    (%eax),%al
f0108eb3:	84 c0                	test   %al,%al
f0108eb5:	0f 85 81 00 00 00    	jne    f0108f3c <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108ebb:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0108ec1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108ec4:	89 d0                	mov    %edx,%eax
f0108ec6:	01 c0                	add    %eax,%eax
f0108ec8:	01 d0                	add    %edx,%eax
f0108eca:	c1 e0 03             	shl    $0x3,%eax
f0108ecd:	01 c8                	add    %ecx,%eax
f0108ecf:	05 b8 00 00 00       	add    $0xb8,%eax
f0108ed4:	8b 00                	mov    (%eax),%eax
f0108ed6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108edc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ee2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108ee8:	83 ec 04             	sub    $0x4,%esp
f0108eeb:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f0108ef1:	52                   	push   %edx
f0108ef2:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108ef8:	50                   	push   %eax
f0108ef9:	e8 1d e2 ff ff       	call   f010711b <get_page_table>
f0108efe:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108f01:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0108f07:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108f0d:	c1 ea 0c             	shr    $0xc,%edx
f0108f10:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108f16:	c1 e2 02             	shl    $0x2,%edx
f0108f19:	01 d0                	add    %edx,%eax
f0108f1b:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108f21:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108f27:	c1 e9 0c             	shr    $0xc,%ecx
f0108f2a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108f30:	c1 e1 02             	shl    $0x2,%ecx
f0108f33:	01 ca                	add    %ecx,%edx
f0108f35:	8b 12                	mov    (%edx),%edx
f0108f37:	83 e2 bf             	and    $0xffffffbf,%edx
f0108f3a:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0108f3c:	ff 45 c4             	incl   -0x3c(%ebp)
f0108f3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f45:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108f4b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108f4e:	39 c2                	cmp    %eax,%edx
f0108f50:	0f 87 42 ff ff ff    	ja     f0108e98 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0108f56:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f59:	8b 50 08             	mov    0x8(%eax),%edx
f0108f5c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f62:	83 ec 08             	sub    $0x8,%esp
f0108f65:	52                   	push   %edx
f0108f66:	50                   	push   %eax
f0108f67:	e8 18 18 00 00       	call   f010a784 <set_environment_entry_point>
f0108f6c:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0108f6f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f75:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f0108f7c:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0108f7f:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0108f86:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0108f89:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108f90:	e9 3c 05 00 00       	jmp    f01094d1 <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0108f95:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0108f9c:	00 00 00 
		allocate_frame(&pp);
f0108f9f:	83 ec 0c             	sub    $0xc,%esp
f0108fa2:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0108fa8:	50                   	push   %eax
f0108fa9:	e8 ab df ff ff       	call   f0106f59 <allocate_frame>
f0108fae:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108fb1:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0108fb7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fbd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108fc3:	6a 06                	push   $0x6
f0108fc5:	ff 75 c0             	pushl  -0x40(%ebp)
f0108fc8:	52                   	push   %edx
f0108fc9:	50                   	push   %eax
f0108fca:	e8 db e4 ff ff       	call   f01074aa <loadtime_map_frame>
f0108fcf:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108fd2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108fd5:	83 ec 04             	sub    $0x4,%esp
f0108fd8:	68 00 10 00 00       	push   $0x1000
f0108fdd:	6a 00                	push   $0x0
f0108fdf:	50                   	push   %eax
f0108fe0:	e8 97 5c 02 00       	call   f012ec7c <memset>
f0108fe5:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108fe8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108fee:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0108ff4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ffa:	83 ec 04             	sub    $0x4,%esp
f0108ffd:	ff 75 c0             	pushl  -0x40(%ebp)
f0109000:	52                   	push   %edx
f0109001:	50                   	push   %eax
f0109002:	e8 3f ef ff ff       	call   f0107f46 <env_page_ws_set_entry>
f0109007:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f010900a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109010:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f0109016:	8d 48 01             	lea    0x1(%eax),%ecx
f0109019:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f010901f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109025:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010902b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109031:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109037:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010903d:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f0109043:	ba 00 00 00 00       	mov    $0x0,%edx
f0109048:	f7 f3                	div    %ebx
f010904a:	89 d0                	mov    %edx,%eax
f010904c:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109052:	83 ec 0c             	sub    $0xc,%esp
f0109055:	6a 02                	push   $0x2
f0109057:	e8 74 43 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f010905c:	83 c4 10             	add    $0x10,%esp
f010905f:	85 c0                	test   %eax,%eax
f0109061:	0f 84 46 04 00 00    	je     f01094ad <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109067:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010906d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109073:	89 d0                	mov    %edx,%eax
f0109075:	01 c0                	add    %eax,%eax
f0109077:	01 d0                	add    %edx,%eax
f0109079:	c1 e0 03             	shl    $0x3,%eax
f010907c:	05 b0 00 00 00       	add    $0xb0,%eax
f0109081:	01 c8                	add    %ecx,%eax
f0109083:	83 c0 08             	add    $0x8,%eax
f0109086:	85 c0                	test   %eax,%eax
f0109088:	75 17                	jne    f01090a1 <env_create+0x7a2>
f010908a:	83 ec 04             	sub    $0x4,%esp
f010908d:	68 99 24 13 f0       	push   $0xf0132499
f0109092:	68 67 01 00 00       	push   $0x167
f0109097:	68 37 24 13 f0       	push   $0xf0132437
f010909c:	e8 0f 71 ff ff       	call   f01001b0 <_panic>
f01090a1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01090a7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01090ad:	89 d0                	mov    %edx,%eax
f01090af:	01 c0                	add    %eax,%eax
f01090b1:	01 d0                	add    %edx,%eax
f01090b3:	c1 e0 03             	shl    $0x3,%eax
f01090b6:	01 c8                	add    %ecx,%eax
f01090b8:	05 c8 00 00 00       	add    $0xc8,%eax
f01090bd:	8b 00                	mov    (%eax),%eax
f01090bf:	85 c0                	test   %eax,%eax
f01090c1:	74 41                	je     f0109104 <env_create+0x805>
f01090c3:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01090c9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01090cf:	89 d0                	mov    %edx,%eax
f01090d1:	01 c0                	add    %eax,%eax
f01090d3:	01 d0                	add    %edx,%eax
f01090d5:	c1 e0 03             	shl    $0x3,%eax
f01090d8:	01 c8                	add    %ecx,%eax
f01090da:	05 c8 00 00 00       	add    $0xc8,%eax
f01090df:	8b 10                	mov    (%eax),%edx
f01090e1:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01090e7:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01090ed:	89 c8                	mov    %ecx,%eax
f01090ef:	01 c0                	add    %eax,%eax
f01090f1:	01 c8                	add    %ecx,%eax
f01090f3:	c1 e0 03             	shl    $0x3,%eax
f01090f6:	01 d8                	add    %ebx,%eax
f01090f8:	05 cc 00 00 00       	add    $0xcc,%eax
f01090fd:	8b 00                	mov    (%eax),%eax
f01090ff:	89 42 14             	mov    %eax,0x14(%edx)
f0109102:	eb 2a                	jmp    f010912e <env_create+0x82f>
f0109104:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010910a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109110:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109116:	89 c8                	mov    %ecx,%eax
f0109118:	01 c0                	add    %eax,%eax
f010911a:	01 c8                	add    %ecx,%eax
f010911c:	c1 e0 03             	shl    $0x3,%eax
f010911f:	01 d8                	add    %ebx,%eax
f0109121:	05 cc 00 00 00       	add    $0xcc,%eax
f0109126:	8b 00                	mov    (%eax),%eax
f0109128:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f010912e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109134:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010913a:	89 d0                	mov    %edx,%eax
f010913c:	01 c0                	add    %eax,%eax
f010913e:	01 d0                	add    %edx,%eax
f0109140:	c1 e0 03             	shl    $0x3,%eax
f0109143:	01 c8                	add    %ecx,%eax
f0109145:	05 cc 00 00 00       	add    $0xcc,%eax
f010914a:	8b 00                	mov    (%eax),%eax
f010914c:	85 c0                	test   %eax,%eax
f010914e:	74 41                	je     f0109191 <env_create+0x892>
f0109150:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109156:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010915c:	89 d0                	mov    %edx,%eax
f010915e:	01 c0                	add    %eax,%eax
f0109160:	01 d0                	add    %edx,%eax
f0109162:	c1 e0 03             	shl    $0x3,%eax
f0109165:	01 c8                	add    %ecx,%eax
f0109167:	05 cc 00 00 00       	add    $0xcc,%eax
f010916c:	8b 10                	mov    (%eax),%edx
f010916e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109174:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010917a:	89 c8                	mov    %ecx,%eax
f010917c:	01 c0                	add    %eax,%eax
f010917e:	01 c8                	add    %ecx,%eax
f0109180:	c1 e0 03             	shl    $0x3,%eax
f0109183:	01 d8                	add    %ebx,%eax
f0109185:	05 c8 00 00 00       	add    $0xc8,%eax
f010918a:	8b 00                	mov    (%eax),%eax
f010918c:	89 42 10             	mov    %eax,0x10(%edx)
f010918f:	eb 2a                	jmp    f01091bb <env_create+0x8bc>
f0109191:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109197:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010919d:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01091a3:	89 c8                	mov    %ecx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 c8                	add    %ecx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 d8                	add    %ebx,%eax
f01091ae:	05 c8 00 00 00       	add    $0xc8,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f01091bb:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01091c1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091c7:	89 d0                	mov    %edx,%eax
f01091c9:	01 c0                	add    %eax,%eax
f01091cb:	01 d0                	add    %edx,%eax
f01091cd:	c1 e0 03             	shl    $0x3,%eax
f01091d0:	01 c8                	add    %ecx,%eax
f01091d2:	05 c8 00 00 00       	add    $0xc8,%eax
f01091d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01091dd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01091e3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01091e9:	89 d0                	mov    %edx,%eax
f01091eb:	01 c0                	add    %eax,%eax
f01091ed:	01 d0                	add    %edx,%eax
f01091ef:	c1 e0 03             	shl    $0x3,%eax
f01091f2:	01 c8                	add    %ecx,%eax
f01091f4:	05 cc 00 00 00       	add    $0xcc,%eax
f01091f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01091ff:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109205:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f010920b:	4a                   	dec    %edx
f010920c:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109212:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109218:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010921e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109224:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010922a:	39 c2                	cmp    %eax,%edx
f010922c:	0f 83 40 01 00 00    	jae    f0109372 <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109232:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109238:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010923e:	89 d0                	mov    %edx,%eax
f0109240:	01 c0                	add    %eax,%eax
f0109242:	01 d0                	add    %edx,%eax
f0109244:	c1 e0 03             	shl    $0x3,%eax
f0109247:	05 b0 00 00 00       	add    $0xb0,%eax
f010924c:	01 c8                	add    %ecx,%eax
f010924e:	83 c0 08             	add    $0x8,%eax
f0109251:	85 c0                	test   %eax,%eax
f0109253:	75 17                	jne    f010926c <env_create+0x96d>
f0109255:	83 ec 04             	sub    $0x4,%esp
f0109258:	68 b8 24 13 f0       	push   $0xf01324b8
f010925d:	68 6c 01 00 00       	push   $0x16c
f0109262:	68 37 24 13 f0       	push   $0xf0132437
f0109267:	e8 44 6f ff ff       	call   f01001b0 <_panic>
f010926c:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109272:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109278:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010927e:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109284:	89 d8                	mov    %ebx,%eax
f0109286:	01 c0                	add    %eax,%eax
f0109288:	01 d8                	add    %ebx,%eax
f010928a:	c1 e0 03             	shl    $0x3,%eax
f010928d:	01 d0                	add    %edx,%eax
f010928f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109294:	89 08                	mov    %ecx,(%eax)
f0109296:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010929c:	89 c8                	mov    %ecx,%eax
f010929e:	01 c0                	add    %eax,%eax
f01092a0:	01 c8                	add    %ecx,%eax
f01092a2:	c1 e0 03             	shl    $0x3,%eax
f01092a5:	01 d0                	add    %edx,%eax
f01092a7:	05 c8 00 00 00       	add    $0xc8,%eax
f01092ac:	8b 00                	mov    (%eax),%eax
f01092ae:	85 c0                	test   %eax,%eax
f01092b0:	74 30                	je     f01092e2 <env_create+0x9e3>
f01092b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092b8:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f01092be:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01092c4:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01092ca:	89 c8                	mov    %ecx,%eax
f01092cc:	01 c0                	add    %eax,%eax
f01092ce:	01 c8                	add    %ecx,%eax
f01092d0:	c1 e0 03             	shl    $0x3,%eax
f01092d3:	05 b0 00 00 00       	add    $0xb0,%eax
f01092d8:	01 d8                	add    %ebx,%eax
f01092da:	83 c0 08             	add    $0x8,%eax
f01092dd:	89 42 14             	mov    %eax,0x14(%edx)
f01092e0:	eb 2b                	jmp    f010930d <env_create+0xa0e>
f01092e2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01092e8:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01092ee:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01092f4:	89 c8                	mov    %ecx,%eax
f01092f6:	01 c0                	add    %eax,%eax
f01092f8:	01 c8                	add    %ecx,%eax
f01092fa:	c1 e0 03             	shl    $0x3,%eax
f01092fd:	05 b0 00 00 00       	add    $0xb0,%eax
f0109302:	01 d8                	add    %ebx,%eax
f0109304:	83 c0 08             	add    $0x8,%eax
f0109307:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f010930d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109313:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109319:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010931f:	89 c8                	mov    %ecx,%eax
f0109321:	01 c0                	add    %eax,%eax
f0109323:	01 c8                	add    %ecx,%eax
f0109325:	c1 e0 03             	shl    $0x3,%eax
f0109328:	05 b0 00 00 00       	add    $0xb0,%eax
f010932d:	01 d8                	add    %ebx,%eax
f010932f:	83 c0 08             	add    $0x8,%eax
f0109332:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109338:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010933e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109344:	89 d0                	mov    %edx,%eax
f0109346:	01 c0                	add    %eax,%eax
f0109348:	01 d0                	add    %edx,%eax
f010934a:	c1 e0 03             	shl    $0x3,%eax
f010934d:	01 c8                	add    %ecx,%eax
f010934f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109354:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010935a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109360:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109366:	42                   	inc    %edx
f0109367:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010936d:	e9 3b 01 00 00       	jmp    f01094ad <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109372:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109378:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010937e:	89 d0                	mov    %edx,%eax
f0109380:	01 c0                	add    %eax,%eax
f0109382:	01 d0                	add    %edx,%eax
f0109384:	c1 e0 03             	shl    $0x3,%eax
f0109387:	05 b0 00 00 00       	add    $0xb0,%eax
f010938c:	01 c8                	add    %ecx,%eax
f010938e:	83 c0 08             	add    $0x8,%eax
f0109391:	85 c0                	test   %eax,%eax
f0109393:	75 17                	jne    f01093ac <env_create+0xaad>
f0109395:	83 ec 04             	sub    $0x4,%esp
f0109398:	68 b8 24 13 f0       	push   $0xf01324b8
f010939d:	68 70 01 00 00       	push   $0x170
f01093a2:	68 37 24 13 f0       	push   $0xf0132437
f01093a7:	e8 04 6e ff ff       	call   f01001b0 <_panic>
f01093ac:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093b8:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f01093be:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f01093c4:	89 d8                	mov    %ebx,%eax
f01093c6:	01 c0                	add    %eax,%eax
f01093c8:	01 d8                	add    %ebx,%eax
f01093ca:	c1 e0 03             	shl    $0x3,%eax
f01093cd:	01 d0                	add    %edx,%eax
f01093cf:	05 c8 00 00 00       	add    $0xc8,%eax
f01093d4:	89 08                	mov    %ecx,(%eax)
f01093d6:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01093dc:	89 c8                	mov    %ecx,%eax
f01093de:	01 c0                	add    %eax,%eax
f01093e0:	01 c8                	add    %ecx,%eax
f01093e2:	c1 e0 03             	shl    $0x3,%eax
f01093e5:	01 d0                	add    %edx,%eax
f01093e7:	05 c8 00 00 00       	add    $0xc8,%eax
f01093ec:	8b 00                	mov    (%eax),%eax
f01093ee:	85 c0                	test   %eax,%eax
f01093f0:	74 30                	je     f0109422 <env_create+0xb23>
f01093f2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093f8:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01093fe:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109404:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010940a:	89 c8                	mov    %ecx,%eax
f010940c:	01 c0                	add    %eax,%eax
f010940e:	01 c8                	add    %ecx,%eax
f0109410:	c1 e0 03             	shl    $0x3,%eax
f0109413:	05 b0 00 00 00       	add    $0xb0,%eax
f0109418:	01 d8                	add    %ebx,%eax
f010941a:	83 c0 08             	add    $0x8,%eax
f010941d:	89 42 14             	mov    %eax,0x14(%edx)
f0109420:	eb 2b                	jmp    f010944d <env_create+0xb4e>
f0109422:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109428:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010942e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109434:	89 c8                	mov    %ecx,%eax
f0109436:	01 c0                	add    %eax,%eax
f0109438:	01 c8                	add    %ecx,%eax
f010943a:	c1 e0 03             	shl    $0x3,%eax
f010943d:	05 b0 00 00 00       	add    $0xb0,%eax
f0109442:	01 d8                	add    %ebx,%eax
f0109444:	83 c0 08             	add    $0x8,%eax
f0109447:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f010944d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109453:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109459:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010945f:	89 c8                	mov    %ecx,%eax
f0109461:	01 c0                	add    %eax,%eax
f0109463:	01 c8                	add    %ecx,%eax
f0109465:	c1 e0 03             	shl    $0x3,%eax
f0109468:	05 b0 00 00 00       	add    $0xb0,%eax
f010946d:	01 d8                	add    %ebx,%eax
f010946f:	83 c0 08             	add    $0x8,%eax
f0109472:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109478:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010947e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109484:	89 d0                	mov    %edx,%eax
f0109486:	01 c0                	add    %eax,%eax
f0109488:	01 d0                	add    %edx,%eax
f010948a:	c1 e0 03             	shl    $0x3,%eax
f010948d:	01 c8                	add    %ecx,%eax
f010948f:	05 cc 00 00 00       	add    $0xcc,%eax
f0109494:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010949a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094a0:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f01094a6:	42                   	inc    %edx
f01094a7:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f01094ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094b3:	83 ec 04             	sub    $0x4,%esp
f01094b6:	6a 01                	push   $0x1
f01094b8:	ff 75 c0             	pushl  -0x40(%ebp)
f01094bb:	50                   	push   %eax
f01094bc:	e8 08 a5 ff ff       	call   f01039c9 <pf_add_empty_env_page>
f01094c1:	83 c4 10             	add    $0x10,%esp
f01094c4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01094ca:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01094d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094d4:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01094da:	0f 83 b5 fa ff ff    	jae    f0108f95 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094e0:	83 ec 0c             	sub    $0xc,%esp
f01094e3:	6a 02                	push   $0x2
f01094e5:	e8 e6 3e 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f01094ea:	83 c4 10             	add    $0x10,%esp
f01094ed:	85 c0                	test   %eax,%eax
f01094ef:	74 75                	je     f0109566 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f01094f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01094f8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01094fe:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0109504:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109507:	eb 2e                	jmp    f0109537 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109509:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010950c:	8b 10                	mov    (%eax),%edx
f010950e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109514:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010951a:	6a 01                	push   $0x1
f010951c:	6a 00                	push   $0x0
f010951e:	52                   	push   %edx
f010951f:	50                   	push   %eax
f0109520:	e8 2e e7 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0109525:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109528:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010952e:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109534:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109537:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010953d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109541:	74 08                	je     f010954b <env_create+0xc4c>
f0109543:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109546:	8b 52 10             	mov    0x10(%edx),%edx
f0109549:	eb 05                	jmp    f0109550 <env_create+0xc51>
f010954b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109550:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109556:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f010955c:	85 c0                	test   %eax,%eax
f010955e:	75 a9                	jne    f0109509 <env_create+0xc0a>
f0109560:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109564:	75 a3                	jne    f0109509 <env_create+0xc0a>
f0109566:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109569:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010956c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010956f:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109572:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109578:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010957b:	5b                   	pop    %ebx
f010957c:	5e                   	pop    %esi
f010957d:	5f                   	pop    %edi
f010957e:	5d                   	pop    %ebp
f010957f:	c3                   	ret    

f0109580 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109580:	55                   	push   %ebp
f0109581:	89 e5                	mov    %esp,%ebp
f0109583:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109586:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010958b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010958e:	74 2e                	je     f01095be <env_run+0x3e>
	{
		curenv = e ;
f0109590:	8b 45 08             	mov    0x8(%ebp),%eax
f0109593:	a3 34 32 25 f0       	mov    %eax,0xf0253234
		curenv->env_runs++ ;
f0109598:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010959d:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f01095a3:	42                   	inc    %edx
f01095a4:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f01095aa:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095af:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01095b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01095b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01095bb:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01095be:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095c3:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01095ca:	e8 5c b1 ff ff       	call   f010472b <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01095cf:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095d4:	83 ec 0c             	sub    $0xc,%esp
f01095d7:	50                   	push   %eax
f01095d8:	e8 f5 00 00 00       	call   f01096d2 <env_pop_tf>

f01095dd <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01095dd:	55                   	push   %ebp
f01095de:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f01095e0:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f01095e1:	5d                   	pop    %ebp
f01095e2:	c3                   	ret    

f01095e3 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01095e3:	55                   	push   %ebp
f01095e4:	89 e5                	mov    %esp,%ebp
f01095e6:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01095e9:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01095ee:	8b 40 4c             	mov    0x4c(%eax),%eax
f01095f1:	83 ec 0c             	sub    $0xc,%esp
f01095f4:	50                   	push   %eax
f01095f5:	e8 0b ba ff ff       	call   f0105005 <sched_exit_env>
f01095fa:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01095fd:	e8 4b c8 ff ff       	call   f0105e4d <fos_scheduler>

f0109602 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109602:	55                   	push   %ebp
f0109603:	89 e5                	mov    %esp,%ebp
f0109605:	53                   	push   %ebx
f0109606:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109609:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010960d:	75 15                	jne    f0109624 <envid2env+0x22>
		*env_store = curenv;
f010960f:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f0109615:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109618:	89 10                	mov    %edx,(%eax)
		return 0;
f010961a:	b8 00 00 00 00       	mov    $0x0,%eax
f010961f:	e9 a9 00 00 00       	jmp    f01096cd <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109624:	8b 1d 30 32 25 f0    	mov    0xf0253230,%ebx
f010962a:	83 ec 0c             	sub    $0xc,%esp
f010962d:	6a 08                	push   $0x8
f010962f:	e8 e5 41 02 00       	call   f012d819 <nearest_pow2_ceil>
f0109634:	83 c4 10             	add    $0x10,%esp
f0109637:	8d 50 ff             	lea    -0x1(%eax),%edx
f010963a:	8b 45 08             	mov    0x8(%ebp),%eax
f010963d:	21 c2                	and    %eax,%edx
f010963f:	89 d0                	mov    %edx,%eax
f0109641:	01 c0                	add    %eax,%eax
f0109643:	01 d0                	add    %edx,%eax
f0109645:	01 c0                	add    %eax,%eax
f0109647:	01 d0                	add    %edx,%eax
f0109649:	c1 e0 02             	shl    $0x2,%eax
f010964c:	01 d0                	add    %edx,%eax
f010964e:	01 c0                	add    %eax,%eax
f0109650:	01 d0                	add    %edx,%eax
f0109652:	c1 e0 02             	shl    $0x2,%eax
f0109655:	01 d0                	add    %edx,%eax
f0109657:	c1 e0 02             	shl    $0x2,%eax
f010965a:	01 d0                	add    %edx,%eax
f010965c:	c1 e0 02             	shl    $0x2,%eax
f010965f:	01 d0                	add    %edx,%eax
f0109661:	c1 e0 05             	shl    $0x5,%eax
f0109664:	01 d8                	add    %ebx,%eax
f0109666:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109669:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010966c:	8b 40 54             	mov    0x54(%eax),%eax
f010966f:	85 c0                	test   %eax,%eax
f0109671:	74 0b                	je     f010967e <envid2env+0x7c>
f0109673:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109676:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109679:	3b 45 08             	cmp    0x8(%ebp),%eax
f010967c:	74 10                	je     f010968e <envid2env+0x8c>
		*env_store = 0;
f010967e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109681:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109687:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010968c:	eb 3f                	jmp    f01096cd <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010968e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109692:	74 2c                	je     f01096c0 <envid2env+0xbe>
f0109694:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0109699:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010969c:	74 22                	je     f01096c0 <envid2env+0xbe>
f010969e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096a1:	8b 50 50             	mov    0x50(%eax),%edx
f01096a4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01096a9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01096ac:	39 c2                	cmp    %eax,%edx
f01096ae:	74 10                	je     f01096c0 <envid2env+0xbe>
		*env_store = 0;
f01096b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01096b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01096b9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01096be:	eb 0d                	jmp    f01096cd <envid2env+0xcb>
	}

	*env_store = e;
f01096c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01096c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096c6:	89 10                	mov    %edx,(%eax)
	return 0;
f01096c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01096cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01096d0:	c9                   	leave  
f01096d1:	c3                   	ret    

f01096d2 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01096d2:	55                   	push   %ebp
f01096d3:	89 e5                	mov    %esp,%ebp
f01096d5:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01096d8:	8b 65 08             	mov    0x8(%ebp),%esp
f01096db:	61                   	popa   
f01096dc:	07                   	pop    %es
f01096dd:	1f                   	pop    %ds
f01096de:	83 c4 08             	add    $0x8,%esp
f01096e1:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01096e2:	83 ec 04             	sub    $0x4,%esp
f01096e5:	68 db 24 13 f0       	push   $0xf01324db
f01096ea:	68 23 02 00 00       	push   $0x223
f01096ef:	68 37 24 13 f0       	push   $0xf0132437
f01096f4:	e8 b7 6a ff ff       	call   f01001b0 <_panic>

f01096f9 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01096f9:	55                   	push   %ebp
f01096fa:	89 e5                	mov    %esp,%ebp
f01096fc:	53                   	push   %ebx
f01096fd:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109700:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109707:	e9 e3 01 00 00       	jmp    f01098ef <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f010970c:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109715:	89 d0                	mov    %edx,%eax
f0109717:	01 c0                	add    %eax,%eax
f0109719:	01 d0                	add    %edx,%eax
f010971b:	01 c0                	add    %eax,%eax
f010971d:	01 d0                	add    %edx,%eax
f010971f:	c1 e0 02             	shl    $0x2,%eax
f0109722:	01 d0                	add    %edx,%eax
f0109724:	01 c0                	add    %eax,%eax
f0109726:	01 d0                	add    %edx,%eax
f0109728:	c1 e0 02             	shl    $0x2,%eax
f010972b:	01 d0                	add    %edx,%eax
f010972d:	c1 e0 02             	shl    $0x2,%eax
f0109730:	01 d0                	add    %edx,%eax
f0109732:	c1 e0 02             	shl    $0x2,%eax
f0109735:	01 d0                	add    %edx,%eax
f0109737:	c1 e0 05             	shl    $0x5,%eax
f010973a:	01 c8                	add    %ecx,%eax
f010973c:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109743:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109749:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010974c:	89 d0                	mov    %edx,%eax
f010974e:	01 c0                	add    %eax,%eax
f0109750:	01 d0                	add    %edx,%eax
f0109752:	01 c0                	add    %eax,%eax
f0109754:	01 d0                	add    %edx,%eax
f0109756:	c1 e0 02             	shl    $0x2,%eax
f0109759:	01 d0                	add    %edx,%eax
f010975b:	01 c0                	add    %eax,%eax
f010975d:	01 d0                	add    %edx,%eax
f010975f:	c1 e0 02             	shl    $0x2,%eax
f0109762:	01 d0                	add    %edx,%eax
f0109764:	c1 e0 02             	shl    $0x2,%eax
f0109767:	01 d0                	add    %edx,%eax
f0109769:	c1 e0 02             	shl    $0x2,%eax
f010976c:	01 d0                	add    %edx,%eax
f010976e:	c1 e0 05             	shl    $0x5,%eax
f0109771:	01 c8                	add    %ecx,%eax
f0109773:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010977a:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109780:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109783:	89 d0                	mov    %edx,%eax
f0109785:	01 c0                	add    %eax,%eax
f0109787:	01 d0                	add    %edx,%eax
f0109789:	01 c0                	add    %eax,%eax
f010978b:	01 d0                	add    %edx,%eax
f010978d:	c1 e0 02             	shl    $0x2,%eax
f0109790:	01 d0                	add    %edx,%eax
f0109792:	01 c0                	add    %eax,%eax
f0109794:	01 d0                	add    %edx,%eax
f0109796:	c1 e0 02             	shl    $0x2,%eax
f0109799:	01 d0                	add    %edx,%eax
f010979b:	c1 e0 02             	shl    $0x2,%eax
f010979e:	01 d0                	add    %edx,%eax
f01097a0:	c1 e0 02             	shl    $0x2,%eax
f01097a3:	01 d0                	add    %edx,%eax
f01097a5:	c1 e0 05             	shl    $0x5,%eax
f01097a8:	01 c8                	add    %ecx,%eax
f01097aa:	85 c0                	test   %eax,%eax
f01097ac:	75 17                	jne    f01097c5 <env_init+0xcc>
f01097ae:	83 ec 04             	sub    $0x4,%esp
f01097b1:	68 b8 24 13 f0       	push   $0xf01324b8
f01097b6:	68 3f 02 00 00       	push   $0x23f
f01097bb:	68 37 24 13 f0       	push   $0xf0132437
f01097c0:	e8 eb 69 ff ff       	call   f01001b0 <_panic>
f01097c5:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f01097cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097ce:	89 d0                	mov    %edx,%eax
f01097d0:	01 c0                	add    %eax,%eax
f01097d2:	01 d0                	add    %edx,%eax
f01097d4:	01 c0                	add    %eax,%eax
f01097d6:	01 d0                	add    %edx,%eax
f01097d8:	c1 e0 02             	shl    $0x2,%eax
f01097db:	01 d0                	add    %edx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 d0                	add    %edx,%eax
f01097e1:	c1 e0 02             	shl    $0x2,%eax
f01097e4:	01 d0                	add    %edx,%eax
f01097e6:	c1 e0 02             	shl    $0x2,%eax
f01097e9:	01 d0                	add    %edx,%eax
f01097eb:	c1 e0 02             	shl    $0x2,%eax
f01097ee:	01 d0                	add    %edx,%eax
f01097f0:	c1 e0 05             	shl    $0x5,%eax
f01097f3:	01 c8                	add    %ecx,%eax
f01097f5:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f01097fb:	89 50 44             	mov    %edx,0x44(%eax)
f01097fe:	8b 40 44             	mov    0x44(%eax),%eax
f0109801:	85 c0                	test   %eax,%eax
f0109803:	74 3b                	je     f0109840 <env_init+0x147>
f0109805:	8b 0d 38 32 25 f0    	mov    0xf0253238,%ecx
f010980b:	8b 1d 30 32 25 f0    	mov    0xf0253230,%ebx
f0109811:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109814:	89 d0                	mov    %edx,%eax
f0109816:	01 c0                	add    %eax,%eax
f0109818:	01 d0                	add    %edx,%eax
f010981a:	01 c0                	add    %eax,%eax
f010981c:	01 d0                	add    %edx,%eax
f010981e:	c1 e0 02             	shl    $0x2,%eax
f0109821:	01 d0                	add    %edx,%eax
f0109823:	01 c0                	add    %eax,%eax
f0109825:	01 d0                	add    %edx,%eax
f0109827:	c1 e0 02             	shl    $0x2,%eax
f010982a:	01 d0                	add    %edx,%eax
f010982c:	c1 e0 02             	shl    $0x2,%eax
f010982f:	01 d0                	add    %edx,%eax
f0109831:	c1 e0 02             	shl    $0x2,%eax
f0109834:	01 d0                	add    %edx,%eax
f0109836:	c1 e0 05             	shl    $0x5,%eax
f0109839:	01 d8                	add    %ebx,%eax
f010983b:	89 41 48             	mov    %eax,0x48(%ecx)
f010983e:	eb 35                	jmp    f0109875 <env_init+0x17c>
f0109840:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f0109846:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109849:	89 d0                	mov    %edx,%eax
f010984b:	01 c0                	add    %eax,%eax
f010984d:	01 d0                	add    %edx,%eax
f010984f:	01 c0                	add    %eax,%eax
f0109851:	01 d0                	add    %edx,%eax
f0109853:	c1 e0 02             	shl    $0x2,%eax
f0109856:	01 d0                	add    %edx,%eax
f0109858:	01 c0                	add    %eax,%eax
f010985a:	01 d0                	add    %edx,%eax
f010985c:	c1 e0 02             	shl    $0x2,%eax
f010985f:	01 d0                	add    %edx,%eax
f0109861:	c1 e0 02             	shl    $0x2,%eax
f0109864:	01 d0                	add    %edx,%eax
f0109866:	c1 e0 02             	shl    $0x2,%eax
f0109869:	01 d0                	add    %edx,%eax
f010986b:	c1 e0 05             	shl    $0x5,%eax
f010986e:	01 c8                	add    %ecx,%eax
f0109870:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f0109875:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f010987b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987e:	89 d0                	mov    %edx,%eax
f0109880:	01 c0                	add    %eax,%eax
f0109882:	01 d0                	add    %edx,%eax
f0109884:	01 c0                	add    %eax,%eax
f0109886:	01 d0                	add    %edx,%eax
f0109888:	c1 e0 02             	shl    $0x2,%eax
f010988b:	01 d0                	add    %edx,%eax
f010988d:	01 c0                	add    %eax,%eax
f010988f:	01 d0                	add    %edx,%eax
f0109891:	c1 e0 02             	shl    $0x2,%eax
f0109894:	01 d0                	add    %edx,%eax
f0109896:	c1 e0 02             	shl    $0x2,%eax
f0109899:	01 d0                	add    %edx,%eax
f010989b:	c1 e0 02             	shl    $0x2,%eax
f010989e:	01 d0                	add    %edx,%eax
f01098a0:	c1 e0 05             	shl    $0x5,%eax
f01098a3:	01 c8                	add    %ecx,%eax
f01098a5:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f01098aa:	8b 0d 30 32 25 f0    	mov    0xf0253230,%ecx
f01098b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098b3:	89 d0                	mov    %edx,%eax
f01098b5:	01 c0                	add    %eax,%eax
f01098b7:	01 d0                	add    %edx,%eax
f01098b9:	01 c0                	add    %eax,%eax
f01098bb:	01 d0                	add    %edx,%eax
f01098bd:	c1 e0 02             	shl    $0x2,%eax
f01098c0:	01 d0                	add    %edx,%eax
f01098c2:	01 c0                	add    %eax,%eax
f01098c4:	01 d0                	add    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	c1 e0 02             	shl    $0x2,%eax
f01098ce:	01 d0                	add    %edx,%eax
f01098d0:	c1 e0 02             	shl    $0x2,%eax
f01098d3:	01 d0                	add    %edx,%eax
f01098d5:	c1 e0 05             	shl    $0x5,%eax
f01098d8:	01 c8                	add    %ecx,%eax
f01098da:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098e1:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f01098e6:	40                   	inc    %eax
f01098e7:	a3 44 32 25 f0       	mov    %eax,0xf0253244
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01098ec:	ff 4d f4             	decl   -0xc(%ebp)
f01098ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098f3:	0f 89 13 fe ff ff    	jns    f010970c <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01098f9:	90                   	nop
f01098fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01098fd:	c9                   	leave  
f01098fe:	c3                   	ret    

f01098ff <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01098ff:	55                   	push   %ebp
f0109900:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109902:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f0109908:	8b 45 08             	mov    0x8(%ebp),%eax
f010990b:	89 10                	mov    %edx,(%eax)
f010990d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109910:	8b 00                	mov    (%eax),%eax
f0109912:	85 c0                	test   %eax,%eax
f0109914:	75 07                	jne    f010991d <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109916:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010991b:	eb 11                	jmp    f010992e <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010991d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109920:	8b 00                	mov    (%eax),%eax
f0109922:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010992e:	5d                   	pop    %ebp
f010992f:	c3                   	ret    

f0109930 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109930:	55                   	push   %ebp
f0109931:	89 e5                	mov    %esp,%ebp
f0109933:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109936:	83 ec 04             	sub    $0x4,%esp
f0109939:	68 a0 da 01 00       	push   $0x1daa0
f010993e:	6a 00                	push   $0x0
f0109940:	ff 75 08             	pushl  0x8(%ebp)
f0109943:	e8 34 53 02 00       	call   f012ec7c <memset>
f0109948:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010994b:	8b 45 08             	mov    0x8(%ebp),%eax
f010994e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109955:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109959:	75 17                	jne    f0109972 <free_environment+0x42>
f010995b:	83 ec 04             	sub    $0x4,%esp
f010995e:	68 b8 24 13 f0       	push   $0xf01324b8
f0109963:	68 5c 02 00 00       	push   $0x25c
f0109968:	68 37 24 13 f0       	push   $0xf0132437
f010996d:	e8 3e 68 ff ff       	call   f01001b0 <_panic>
f0109972:	8b 15 38 32 25 f0    	mov    0xf0253238,%edx
f0109978:	8b 45 08             	mov    0x8(%ebp),%eax
f010997b:	89 50 44             	mov    %edx,0x44(%eax)
f010997e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109981:	8b 40 44             	mov    0x44(%eax),%eax
f0109984:	85 c0                	test   %eax,%eax
f0109986:	74 0d                	je     f0109995 <free_environment+0x65>
f0109988:	a1 38 32 25 f0       	mov    0xf0253238,%eax
f010998d:	8b 55 08             	mov    0x8(%ebp),%edx
f0109990:	89 50 48             	mov    %edx,0x48(%eax)
f0109993:	eb 08                	jmp    f010999d <free_environment+0x6d>
f0109995:	8b 45 08             	mov    0x8(%ebp),%eax
f0109998:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f010999d:	8b 45 08             	mov    0x8(%ebp),%eax
f01099a0:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f01099a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01099a8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01099af:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f01099b4:	40                   	inc    %eax
f01099b5:	a3 44 32 25 f0       	mov    %eax,0xf0253244
}
f01099ba:	90                   	nop
f01099bb:	c9                   	leave  
f01099bc:	c3                   	ret    

f01099bd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01099bd:	55                   	push   %ebp
f01099be:	89 e5                	mov    %esp,%ebp
f01099c0:	53                   	push   %ebx
f01099c1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01099c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099c7:	8b 40 0c             	mov    0xc(%eax),%eax
f01099ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01099cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099d0:	8b 40 08             	mov    0x8(%eax),%eax
f01099d3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01099d6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01099dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01099e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01099e3:	01 c2                	add    %eax,%edx
f01099e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01099e8:	01 d0                	add    %edx,%eax
f01099ea:	48                   	dec    %eax
f01099eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01099ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01099f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01099f6:	f7 75 dc             	divl   -0x24(%ebp)
f01099f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01099fc:	29 d0                	sub    %edx,%eax
f01099fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109a01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109a04:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109a07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109a12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109a19:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0109a23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109a29:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109a30:	0f 85 38 06 00 00    	jne    f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
f0109a36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a39:	83 c0 5c             	add    $0x5c,%eax
f0109a3c:	83 ec 08             	sub    $0x8,%esp
f0109a3f:	68 e7 24 13 f0       	push   $0xf01324e7
f0109a44:	50                   	push   %eax
f0109a45:	e8 50 51 02 00       	call   f012eb9a <strcmp>
f0109a4a:	83 c4 10             	add    $0x10,%esp
f0109a4d:	85 c0                	test   %eax,%eax
f0109a4f:	0f 84 19 06 00 00    	je     f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109a55:	8b 45 14             	mov    0x14(%ebp),%eax
f0109a58:	83 f8 06             	cmp    $0x6,%eax
f0109a5b:	76 05                	jbe    f0109a62 <program_segment_alloc_map_copy_workingset+0xa5>
f0109a5d:	b8 06 00 00 00       	mov    $0x6,%eax
f0109a62:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109a65:	e9 04 06 00 00       	jmp    f010a06e <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109a6a:	83 ec 0c             	sub    $0xc,%esp
f0109a6d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109a70:	50                   	push   %eax
f0109a71:	e8 e3 d4 ff ff       	call   f0106f59 <allocate_frame>
f0109a76:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109a79:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109a85:	6a 06                	push   $0x6
f0109a87:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a8a:	52                   	push   %edx
f0109a8b:	50                   	push   %eax
f0109a8c:	e8 19 da ff ff       	call   f01074aa <loadtime_map_frame>
f0109a91:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a97:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109a9d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109aa0:	89 d0                	mov    %edx,%eax
f0109aa2:	01 c0                	add    %eax,%eax
f0109aa4:	01 d0                	add    %edx,%eax
f0109aa6:	c1 e0 03             	shl    $0x3,%eax
f0109aa9:	01 c8                	add    %ecx,%eax
f0109aab:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ab4:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ab9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ac2:	89 d0                	mov    %edx,%eax
f0109ac4:	01 c0                	add    %eax,%eax
f0109ac6:	01 d0                	add    %edx,%eax
f0109ac8:	c1 e0 03             	shl    $0x3,%eax
f0109acb:	01 c8                	add    %ecx,%eax
f0109acd:	05 bc 00 00 00       	add    $0xbc,%eax
f0109ad2:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad8:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ade:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ae1:	89 d0                	mov    %edx,%eax
f0109ae3:	01 c0                	add    %eax,%eax
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	c1 e0 03             	shl    $0x3,%eax
f0109aea:	01 c8                	add    %ecx,%eax
f0109aec:	05 c0 00 00 00       	add    $0xc0,%eax
f0109af1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109af7:	83 ec 0c             	sub    $0xc,%esp
f0109afa:	6a 02                	push   $0x2
f0109afc:	e8 cf 38 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f0109b01:	83 c4 10             	add    $0x10,%esp
f0109b04:	85 c0                	test   %eax,%eax
f0109b06:	0f 84 2c 04 00 00    	je     f0109f38 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b0f:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b15:	89 d0                	mov    %edx,%eax
f0109b17:	01 c0                	add    %eax,%eax
f0109b19:	01 d0                	add    %edx,%eax
f0109b1b:	c1 e0 03             	shl    $0x3,%eax
f0109b1e:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109b24:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b27:	01 d0                	add    %edx,%eax
f0109b29:	83 c0 08             	add    $0x8,%eax
f0109b2c:	85 c0                	test   %eax,%eax
f0109b2e:	75 17                	jne    f0109b47 <program_segment_alloc_map_copy_workingset+0x18a>
f0109b30:	83 ec 04             	sub    $0x4,%esp
f0109b33:	68 99 24 13 f0       	push   $0xf0132499
f0109b38:	68 9f 02 00 00       	push   $0x29f
f0109b3d:	68 37 24 13 f0       	push   $0xf0132437
f0109b42:	e8 69 66 ff ff       	call   f01001b0 <_panic>
f0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b53:	89 d0                	mov    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 03             	shl    $0x3,%eax
f0109b5c:	01 c8                	add    %ecx,%eax
f0109b5e:	05 c8 00 00 00       	add    $0xc8,%eax
f0109b63:	8b 00                	mov    (%eax),%eax
f0109b65:	85 c0                	test   %eax,%eax
f0109b67:	74 41                	je     f0109baa <program_segment_alloc_map_copy_workingset+0x1ed>
f0109b69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b6c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109b72:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b75:	89 d0                	mov    %edx,%eax
f0109b77:	01 c0                	add    %eax,%eax
f0109b79:	01 d0                	add    %edx,%eax
f0109b7b:	c1 e0 03             	shl    $0x3,%eax
f0109b7e:	01 c8                	add    %ecx,%eax
f0109b80:	05 c8 00 00 00       	add    $0xc8,%eax
f0109b85:	8b 10                	mov    (%eax),%edx
f0109b87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b8a:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109b90:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109b93:	89 c8                	mov    %ecx,%eax
f0109b95:	01 c0                	add    %eax,%eax
f0109b97:	01 c8                	add    %ecx,%eax
f0109b99:	c1 e0 03             	shl    $0x3,%eax
f0109b9c:	01 d8                	add    %ebx,%eax
f0109b9e:	05 cc 00 00 00       	add    $0xcc,%eax
f0109ba3:	8b 00                	mov    (%eax),%eax
f0109ba5:	89 42 14             	mov    %eax,0x14(%edx)
f0109ba8:	eb 27                	jmp    f0109bd1 <program_segment_alloc_map_copy_workingset+0x214>
f0109baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bad:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bb3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bb6:	89 d0                	mov    %edx,%eax
f0109bb8:	01 c0                	add    %eax,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 03             	shl    $0x3,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	05 cc 00 00 00       	add    $0xcc,%eax
f0109bc6:	8b 10                	mov    (%eax),%edx
f0109bc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bcb:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109bd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bd4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bdd:	89 d0                	mov    %edx,%eax
f0109bdf:	01 c0                	add    %eax,%eax
f0109be1:	01 d0                	add    %edx,%eax
f0109be3:	c1 e0 03             	shl    $0x3,%eax
f0109be6:	01 c8                	add    %ecx,%eax
f0109be8:	05 cc 00 00 00       	add    $0xcc,%eax
f0109bed:	8b 00                	mov    (%eax),%eax
f0109bef:	85 c0                	test   %eax,%eax
f0109bf1:	74 41                	je     f0109c34 <program_segment_alloc_map_copy_workingset+0x277>
f0109bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bf6:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109bfc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bff:	89 d0                	mov    %edx,%eax
f0109c01:	01 c0                	add    %eax,%eax
f0109c03:	01 d0                	add    %edx,%eax
f0109c05:	c1 e0 03             	shl    $0x3,%eax
f0109c08:	01 c8                	add    %ecx,%eax
f0109c0a:	05 cc 00 00 00       	add    $0xcc,%eax
f0109c0f:	8b 10                	mov    (%eax),%edx
f0109c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c14:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109c1a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c1d:	89 c8                	mov    %ecx,%eax
f0109c1f:	01 c0                	add    %eax,%eax
f0109c21:	01 c8                	add    %ecx,%eax
f0109c23:	c1 e0 03             	shl    $0x3,%eax
f0109c26:	01 d8                	add    %ebx,%eax
f0109c28:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c2d:	8b 00                	mov    (%eax),%eax
f0109c2f:	89 42 10             	mov    %eax,0x10(%edx)
f0109c32:	eb 27                	jmp    f0109c5b <program_segment_alloc_map_copy_workingset+0x29e>
f0109c34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c37:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c3d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c40:	89 d0                	mov    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	c1 e0 03             	shl    $0x3,%eax
f0109c49:	01 c8                	add    %ecx,%eax
f0109c4b:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c50:	8b 10                	mov    (%eax),%edx
f0109c52:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c55:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f0109c5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c5e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c64:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c67:	89 d0                	mov    %edx,%eax
f0109c69:	01 c0                	add    %eax,%eax
f0109c6b:	01 d0                	add    %edx,%eax
f0109c6d:	c1 e0 03             	shl    $0x3,%eax
f0109c70:	01 c8                	add    %ecx,%eax
f0109c72:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109c7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c80:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109c86:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c89:	89 d0                	mov    %edx,%eax
f0109c8b:	01 c0                	add    %eax,%eax
f0109c8d:	01 d0                	add    %edx,%eax
f0109c8f:	c1 e0 03             	shl    $0x3,%eax
f0109c92:	01 c8                	add    %ecx,%eax
f0109c94:	05 cc 00 00 00       	add    $0xcc,%eax
f0109c99:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca2:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f0109ca8:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109cab:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cae:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109cb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cb7:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109cbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc0:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0109cc6:	48                   	dec    %eax
f0109cc7:	39 c2                	cmp    %eax,%edx
f0109cc9:	0f 83 37 01 00 00    	jae    f0109e06 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ccf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109cd8:	89 d0                	mov    %edx,%eax
f0109cda:	01 c0                	add    %eax,%eax
f0109cdc:	01 d0                	add    %edx,%eax
f0109cde:	c1 e0 03             	shl    $0x3,%eax
f0109ce1:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ce7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cea:	01 d0                	add    %edx,%eax
f0109cec:	83 c0 08             	add    $0x8,%eax
f0109cef:	85 c0                	test   %eax,%eax
f0109cf1:	75 17                	jne    f0109d0a <program_segment_alloc_map_copy_workingset+0x34d>
f0109cf3:	83 ec 04             	sub    $0x4,%esp
f0109cf6:	68 b8 24 13 f0       	push   $0xf01324b8
f0109cfb:	68 a3 02 00 00       	push   $0x2a3
f0109d00:	68 37 24 13 f0       	push   $0xf0132437
f0109d05:	e8 a6 64 ff ff       	call   f01001b0 <_panic>
f0109d0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0d:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d16:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f0109d1c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d1f:	89 d0                	mov    %edx,%eax
f0109d21:	01 c0                	add    %eax,%eax
f0109d23:	01 d0                	add    %edx,%eax
f0109d25:	c1 e0 03             	shl    $0x3,%eax
f0109d28:	01 d8                	add    %ebx,%eax
f0109d2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109d2f:	89 08                	mov    %ecx,(%eax)
f0109d31:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d34:	89 d0                	mov    %edx,%eax
f0109d36:	01 c0                	add    %eax,%eax
f0109d38:	01 d0                	add    %edx,%eax
f0109d3a:	c1 e0 03             	shl    $0x3,%eax
f0109d3d:	01 c8                	add    %ecx,%eax
f0109d3f:	05 c8 00 00 00       	add    $0xc8,%eax
f0109d44:	8b 00                	mov    (%eax),%eax
f0109d46:	85 c0                	test   %eax,%eax
f0109d48:	74 2e                	je     f0109d78 <program_segment_alloc_map_copy_workingset+0x3bb>
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f0109d53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d56:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109d5c:	89 c8                	mov    %ecx,%eax
f0109d5e:	01 c0                	add    %eax,%eax
f0109d60:	01 c8                	add    %ecx,%eax
f0109d62:	c1 e0 03             	shl    $0x3,%eax
f0109d65:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f0109d6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6e:	01 c8                	add    %ecx,%eax
f0109d70:	83 c0 08             	add    $0x8,%eax
f0109d73:	89 42 14             	mov    %eax,0x14(%edx)
f0109d76:	eb 29                	jmp    f0109da1 <program_segment_alloc_map_copy_workingset+0x3e4>
f0109d78:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d7b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109d81:	89 d0                	mov    %edx,%eax
f0109d83:	01 c0                	add    %eax,%eax
f0109d85:	01 d0                	add    %edx,%eax
f0109d87:	c1 e0 03             	shl    $0x3,%eax
f0109d8a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d93:	01 d0                	add    %edx,%eax
f0109d95:	8d 50 08             	lea    0x8(%eax),%edx
f0109d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9b:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f0109da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109daa:	89 d0                	mov    %edx,%eax
f0109dac:	01 c0                	add    %eax,%eax
f0109dae:	01 d0                	add    %edx,%eax
f0109db0:	c1 e0 03             	shl    $0x3,%eax
f0109db3:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109db9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dbc:	01 d0                	add    %edx,%eax
f0109dbe:	8d 50 08             	lea    0x8(%eax),%edx
f0109dc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc4:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f0109dca:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dcd:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109dd3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109dd6:	89 d0                	mov    %edx,%eax
f0109dd8:	01 c0                	add    %eax,%eax
f0109dda:	01 d0                	add    %edx,%eax
f0109ddc:	c1 e0 03             	shl    $0x3,%eax
f0109ddf:	01 c8                	add    %ecx,%eax
f0109de1:	05 cc 00 00 00       	add    $0xcc,%eax
f0109de6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109dec:	8b 45 08             	mov    0x8(%ebp),%eax
f0109def:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f0109df5:	8d 50 01             	lea    0x1(%eax),%edx
f0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dfb:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109e01:	e9 32 01 00 00       	jmp    f0109f38 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e09:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e0f:	89 d0                	mov    %edx,%eax
f0109e11:	01 c0                	add    %eax,%eax
f0109e13:	01 d0                	add    %edx,%eax
f0109e15:	c1 e0 03             	shl    $0x3,%eax
f0109e18:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e21:	01 d0                	add    %edx,%eax
f0109e23:	83 c0 08             	add    $0x8,%eax
f0109e26:	85 c0                	test   %eax,%eax
f0109e28:	75 17                	jne    f0109e41 <program_segment_alloc_map_copy_workingset+0x484>
f0109e2a:	83 ec 04             	sub    $0x4,%esp
f0109e2d:	68 b8 24 13 f0       	push   $0xf01324b8
f0109e32:	68 a8 02 00 00       	push   $0x2a8
f0109e37:	68 37 24 13 f0       	push   $0xf0132437
f0109e3c:	e8 6f 63 ff ff       	call   f01001b0 <_panic>
f0109e41:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e44:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4d:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f0109e53:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109e56:	89 d0                	mov    %edx,%eax
f0109e58:	01 c0                	add    %eax,%eax
f0109e5a:	01 d0                	add    %edx,%eax
f0109e5c:	c1 e0 03             	shl    $0x3,%eax
f0109e5f:	01 d8                	add    %ebx,%eax
f0109e61:	05 c8 00 00 00       	add    $0xc8,%eax
f0109e66:	89 08                	mov    %ecx,(%eax)
f0109e68:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e6b:	89 d0                	mov    %edx,%eax
f0109e6d:	01 c0                	add    %eax,%eax
f0109e6f:	01 d0                	add    %edx,%eax
f0109e71:	c1 e0 03             	shl    $0x3,%eax
f0109e74:	01 c8                	add    %ecx,%eax
f0109e76:	05 c8 00 00 00       	add    $0xc8,%eax
f0109e7b:	8b 00                	mov    (%eax),%eax
f0109e7d:	85 c0                	test   %eax,%eax
f0109e7f:	74 2e                	je     f0109eaf <program_segment_alloc_map_copy_workingset+0x4f2>
f0109e81:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e84:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f0109e8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8d:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109e93:	89 c8                	mov    %ecx,%eax
f0109e95:	01 c0                	add    %eax,%eax
f0109e97:	01 c8                	add    %ecx,%eax
f0109e99:	c1 e0 03             	shl    $0x3,%eax
f0109e9c:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f0109ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea5:	01 c8                	add    %ecx,%eax
f0109ea7:	83 c0 08             	add    $0x8,%eax
f0109eaa:	89 42 14             	mov    %eax,0x14(%edx)
f0109ead:	eb 29                	jmp    f0109ed8 <program_segment_alloc_map_copy_workingset+0x51b>
f0109eaf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109eb8:	89 d0                	mov    %edx,%eax
f0109eba:	01 c0                	add    %eax,%eax
f0109ebc:	01 d0                	add    %edx,%eax
f0109ebe:	c1 e0 03             	shl    $0x3,%eax
f0109ec1:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ec7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eca:	01 d0                	add    %edx,%eax
f0109ecc:	8d 50 08             	lea    0x8(%eax),%edx
f0109ecf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed2:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f0109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee1:	89 d0                	mov    %edx,%eax
f0109ee3:	01 c0                	add    %eax,%eax
f0109ee5:	01 d0                	add    %edx,%eax
f0109ee7:	c1 e0 03             	shl    $0x3,%eax
f0109eea:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef3:	01 d0                	add    %edx,%eax
f0109ef5:	8d 50 08             	lea    0x8(%eax),%edx
f0109ef8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109efb:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f0109f01:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f04:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f0a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f0d:	89 d0                	mov    %edx,%eax
f0109f0f:	01 c0                	add    %eax,%eax
f0109f11:	01 d0                	add    %edx,%eax
f0109f13:	c1 e0 03             	shl    $0x3,%eax
f0109f16:	01 c8                	add    %ecx,%eax
f0109f18:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109f23:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f26:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f0109f2c:	8d 50 01             	lea    0x1(%eax),%edx
f0109f2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f32:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f0109f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3b:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109f41:	8d 50 01             	lea    0x1(%eax),%edx
f0109f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f47:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f50:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109f56:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f59:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f0109f5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f64:	f7 f1                	div    %ecx
f0109f66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f69:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f72:	c1 e8 16             	shr    $0x16,%eax
f0109f75:	89 c2                	mov    %eax,%edx
f0109f77:	8b 45 18             	mov    0x18(%ebp),%eax
f0109f7a:	8b 00                	mov    (%eax),%eax
f0109f7c:	39 c2                	cmp    %eax,%edx
f0109f7e:	0f 84 d3 00 00 00    	je     f010a057 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109f84:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f87:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f90:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109f93:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109f96:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109f9b:	89 c1                	mov    %eax,%ecx
f0109f9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fa0:	89 d0                	mov    %edx,%eax
f0109fa2:	01 c0                	add    %eax,%eax
f0109fa4:	01 d0                	add    %edx,%eax
f0109fa6:	c1 e0 03             	shl    $0x3,%eax
f0109fa9:	01 d8                	add    %ebx,%eax
f0109fab:	05 80 d5 01 00       	add    $0x1d580,%eax
f0109fb0:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb5:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109fbb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fbe:	89 d0                	mov    %edx,%eax
f0109fc0:	01 c0                	add    %eax,%eax
f0109fc2:	01 d0                	add    %edx,%eax
f0109fc4:	c1 e0 03             	shl    $0x3,%eax
f0109fc7:	01 c8                	add    %ecx,%eax
f0109fc9:	05 84 d5 01 00       	add    $0x1d584,%eax
f0109fce:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd4:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f0109fda:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fdd:	89 d0                	mov    %edx,%eax
f0109fdf:	01 c0                	add    %eax,%eax
f0109fe1:	01 d0                	add    %edx,%eax
f0109fe3:	c1 e0 03             	shl    $0x3,%eax
f0109fe6:	01 c8                	add    %ecx,%eax
f0109fe8:	05 88 d5 01 00       	add    $0x1d588,%eax
f0109fed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109ff3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff6:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0109ffc:	8d 50 01             	lea    0x1(%eax),%edx
f0109fff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a002:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a008:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00b:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a011:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a016:	ba 00 00 00 00       	mov    $0x0,%edx
f010a01b:	f7 f1                	div    %ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a026:	8b 45 08             	mov    0x8(%ebp),%eax
f010a029:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a02f:	85 c0                	test   %eax,%eax
f010a031:	75 17                	jne    f010a04a <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a033:	83 ec 04             	sub    $0x4,%esp
f010a036:	68 ec 24 13 f0       	push   $0xf01324ec
f010a03b:	68 c3 02 00 00       	push   $0x2c3
f010a040:	68 37 24 13 f0       	push   $0xf0132437
f010a045:	e8 66 61 ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a04a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a04d:	c1 e8 16             	shr    $0x16,%eax
f010a050:	89 c2                	mov    %eax,%edx
f010a052:	8b 45 18             	mov    0x18(%ebp),%eax
f010a055:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a057:	8b 45 10             	mov    0x10(%ebp),%eax
f010a05a:	8b 00                	mov    (%eax),%eax
f010a05c:	8d 50 01             	lea    0x1(%eax),%edx
f010a05f:	8b 45 10             	mov    0x10(%ebp),%eax
f010a062:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a064:	ff 45 f0             	incl   -0x10(%ebp)
f010a067:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a06e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a071:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a074:	73 0c                	jae    f010a082 <program_segment_alloc_map_copy_workingset+0x6c5>
f010a076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a079:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a07c:	0f 82 e8 f9 ff ff    	jb     f0109a6a <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a082:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a085:	8b 00                	mov    (%eax),%eax
f010a087:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a08a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a08d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a090:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a093:	eb 10                	jmp    f010a0a5 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a095:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a098:	8a 10                	mov    (%eax),%dl
f010a09a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a09d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a09f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a0a2:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a0a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0a8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a0ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a0ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a0b3:	89 c2                	mov    %eax,%edx
f010a0b5:	8b 45 10             	mov    0x10(%ebp),%eax
f010a0b8:	8b 00                	mov    (%eax),%eax
f010a0ba:	c1 e0 0c             	shl    $0xc,%eax
f010a0bd:	01 c2                	add    %eax,%edx
f010a0bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a0c2:	39 c2                	cmp    %eax,%edx
f010a0c4:	76 1d                	jbe    f010a0e3 <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a0c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0c9:	8b 50 04             	mov    0x4(%eax),%edx
f010a0cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0cf:	01 c2                	add    %eax,%edx
f010a0d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a0d4:	39 c2                	cmp    %eax,%edx
f010a0d6:	77 bd                	ja     f010a095 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a0d8:	eb 09                	jmp    f010a0e3 <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a0da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a0dd:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a0e0:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a0e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0e6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a0e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a0f1:	89 c2                	mov    %eax,%edx
f010a0f3:	8b 45 10             	mov    0x10(%ebp),%eax
f010a0f6:	8b 00                	mov    (%eax),%eax
f010a0f8:	c1 e0 0c             	shl    $0xc,%eax
f010a0fb:	01 c2                	add    %eax,%edx
f010a0fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a100:	39 c2                	cmp    %eax,%edx
f010a102:	77 d6                	ja     f010a0da <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a104:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a109:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a10c:	c9                   	leave  
f010a10d:	c3                   	ret    

f010a10e <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a10e:	55                   	push   %ebp
f010a10f:	89 e5                	mov    %esp,%ebp
f010a111:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a114:	83 ec 0c             	sub    $0xc,%esp
f010a117:	68 00 10 00 00       	push   $0x1000
f010a11c:	e8 72 da ff ff       	call   f0107b93 <kmalloc>
f010a121:	83 c4 10             	add    $0x10,%esp
f010a124:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a12b:	75 17                	jne    f010a144 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a12d:	83 ec 04             	sub    $0x4,%esp
f010a130:	68 8f 25 13 f0       	push   $0xf013258f
f010a135:	68 ff 02 00 00       	push   $0x2ff
f010a13a:	68 37 24 13 f0       	push   $0xf0132437
f010a13f:	e8 6c 60 ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a144:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a147:	c9                   	leave  
f010a148:	c3                   	ret    

f010a149 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a149:	55                   	push   %ebp
f010a14a:	89 e5                	mov    %esp,%ebp
f010a14c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	panic("not implemented yet");
f010a14f:	83 ec 04             	sub    $0x4,%esp
f010a152:	68 ac 25 13 f0       	push   $0xf01325ac
f010a157:	68 0e 03 00 00       	push   $0x30e
f010a15c:	68 37 24 13 f0       	push   $0xf0132437
f010a161:	e8 4a 60 ff ff       	call   f01001b0 <_panic>

f010a166 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a166:	55                   	push   %ebp
f010a167:	89 e5                	mov    %esp,%ebp
f010a169:	53                   	push   %ebx
f010a16a:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a16d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a170:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a173:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 55 10             	mov    0x10(%ebp),%edx
f010a17f:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a185:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a18c:	eb 1a                	jmp    f010a1a8 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a18e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a191:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a197:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a19a:	c1 e2 02             	shl    $0x2,%edx
f010a19d:	01 d0                	add    %edx,%eax
f010a19f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a1a5:	ff 45 f4             	incl   -0xc(%ebp)
f010a1a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ab:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a1b0:	76 dc                	jbe    f010a18e <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a1b2:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a1b9:	eb 25                	jmp    f010a1e0 <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a1bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1be:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a1c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1c7:	c1 e2 02             	shl    $0x2,%edx
f010a1ca:	01 c2                	add    %eax,%edx
f010a1cc:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f010a1d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a1d4:	c1 e1 02             	shl    $0x2,%ecx
f010a1d7:	01 c8                	add    %ecx,%eax
f010a1d9:	8b 00                	mov    (%eax),%eax
f010a1db:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a1dd:	ff 45 f4             	incl   -0xc(%ebp)
f010a1e0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a1e7:	7e d2                	jle    f010a1bb <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a1e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ec:	8b 15 30 32 25 f0    	mov    0xf0253230,%edx
f010a1f2:	29 d0                	sub    %edx,%eax
f010a1f4:	c1 f8 05             	sar    $0x5,%eax
f010a1f7:	89 c2                	mov    %eax,%edx
f010a1f9:	89 d0                	mov    %edx,%eax
f010a1fb:	c1 e0 03             	shl    $0x3,%eax
f010a1fe:	01 d0                	add    %edx,%eax
f010a200:	01 c0                	add    %eax,%eax
f010a202:	01 d0                	add    %edx,%eax
f010a204:	c1 e0 06             	shl    $0x6,%eax
f010a207:	01 d0                	add    %edx,%eax
f010a209:	89 c1                	mov    %eax,%ecx
f010a20b:	c1 e1 04             	shl    $0x4,%ecx
f010a20e:	01 c8                	add    %ecx,%eax
f010a210:	c1 e0 03             	shl    $0x3,%eax
f010a213:	01 d0                	add    %edx,%eax
f010a215:	01 c0                	add    %eax,%eax
f010a217:	01 d0                	add    %edx,%eax
f010a219:	89 c1                	mov    %eax,%ecx
f010a21b:	c1 e1 04             	shl    $0x4,%ecx
f010a21e:	01 c8                	add    %ecx,%eax
f010a220:	c1 e0 03             	shl    $0x3,%eax
f010a223:	01 d0                	add    %edx,%eax
f010a225:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a22c:	01 d0                	add    %edx,%eax
f010a22e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a231:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a234:	89 d0                	mov    %edx,%eax
f010a236:	01 c0                	add    %eax,%eax
f010a238:	01 d0                	add    %edx,%eax
f010a23a:	01 c0                	add    %eax,%eax
f010a23c:	01 d0                	add    %edx,%eax
f010a23e:	c1 e0 02             	shl    $0x2,%eax
f010a241:	01 d0                	add    %edx,%eax
f010a243:	01 c0                	add    %eax,%eax
f010a245:	01 d0                	add    %edx,%eax
f010a247:	c1 e0 02             	shl    $0x2,%eax
f010a24a:	01 d0                	add    %edx,%eax
f010a24c:	c1 e0 02             	shl    $0x2,%eax
f010a24f:	01 d0                	add    %edx,%eax
f010a251:	c1 e0 02             	shl    $0x2,%eax
f010a254:	01 d0                	add    %edx,%eax
f010a256:	c1 e0 05             	shl    $0x5,%eax
f010a259:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a25e:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a264:	8b 45 08             	mov    0x8(%ebp),%eax
f010a267:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a26d:	83 ec 0c             	sub    $0xc,%esp
f010a270:	6a 02                	push   $0x2
f010a272:	e8 59 31 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f010a277:	83 c4 10             	add    $0x10,%esp
f010a27a:	85 c0                	test   %eax,%eax
f010a27c:	0f 84 34 01 00 00    	je     f010a3b6 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a282:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a289:	e9 14 01 00 00       	jmp    f010a3a2 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a28e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a291:	89 d0                	mov    %edx,%eax
f010a293:	01 c0                	add    %eax,%eax
f010a295:	01 d0                	add    %edx,%eax
f010a297:	c1 e0 03             	shl    $0x3,%eax
f010a29a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a2a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a3:	01 d0                	add    %edx,%eax
f010a2a5:	83 c0 08             	add    $0x8,%eax
f010a2a8:	85 c0                	test   %eax,%eax
f010a2aa:	75 17                	jne    f010a2c3 <initialize_environment+0x15d>
f010a2ac:	83 ec 04             	sub    $0x4,%esp
f010a2af:	68 b8 24 13 f0       	push   $0xf01324b8
f010a2b4:	68 45 03 00 00       	push   $0x345
f010a2b9:	68 37 24 13 f0       	push   $0xf0132437
f010a2be:	e8 ed 5e ff ff       	call   f01001b0 <_panic>
f010a2c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c6:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a2cc:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a2cf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a2d2:	89 c8                	mov    %ecx,%eax
f010a2d4:	01 c0                	add    %eax,%eax
f010a2d6:	01 c8                	add    %ecx,%eax
f010a2d8:	c1 e0 03             	shl    $0x3,%eax
f010a2db:	01 d8                	add    %ebx,%eax
f010a2dd:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2e2:	89 10                	mov    %edx,(%eax)
f010a2e4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a2ea:	89 d0                	mov    %edx,%eax
f010a2ec:	01 c0                	add    %eax,%eax
f010a2ee:	01 d0                	add    %edx,%eax
f010a2f0:	c1 e0 03             	shl    $0x3,%eax
f010a2f3:	01 c8                	add    %ecx,%eax
f010a2f5:	05 c8 00 00 00       	add    $0xc8,%eax
f010a2fa:	8b 00                	mov    (%eax),%eax
f010a2fc:	85 c0                	test   %eax,%eax
f010a2fe:	74 28                	je     f010a328 <initialize_environment+0x1c2>
f010a300:	8b 45 08             	mov    0x8(%ebp),%eax
f010a303:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a309:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a30c:	89 c8                	mov    %ecx,%eax
f010a30e:	01 c0                	add    %eax,%eax
f010a310:	01 c8                	add    %ecx,%eax
f010a312:	c1 e0 03             	shl    $0x3,%eax
f010a315:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31e:	01 c8                	add    %ecx,%eax
f010a320:	83 c0 08             	add    $0x8,%eax
f010a323:	89 42 14             	mov    %eax,0x14(%edx)
f010a326:	eb 23                	jmp    f010a34b <initialize_environment+0x1e5>
f010a328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a33a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33d:	01 d0                	add    %edx,%eax
f010a33f:	8d 50 08             	lea    0x8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a34b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a34e:	89 d0                	mov    %edx,%eax
f010a350:	01 c0                	add    %eax,%eax
f010a352:	01 d0                	add    %edx,%eax
f010a354:	c1 e0 03             	shl    $0x3,%eax
f010a357:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a35d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a360:	01 d0                	add    %edx,%eax
f010a362:	8d 50 08             	lea    0x8(%eax),%edx
f010a365:	8b 45 08             	mov    0x8(%ebp),%eax
f010a368:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a36e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a371:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a374:	89 d0                	mov    %edx,%eax
f010a376:	01 c0                	add    %eax,%eax
f010a378:	01 d0                	add    %edx,%eax
f010a37a:	c1 e0 03             	shl    $0x3,%eax
f010a37d:	01 c8                	add    %ecx,%eax
f010a37f:	05 cc 00 00 00       	add    $0xcc,%eax
f010a384:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38d:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a393:	8d 50 01             	lea    0x1(%eax),%edx
f010a396:	8b 45 08             	mov    0x8(%ebp),%eax
f010a399:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a39f:	ff 45 f0             	incl   -0x10(%ebp)
f010a3a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a5:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a3ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a3ae:	39 c2                	cmp    %eax,%edx
f010a3b0:	0f 87 d8 fe ff ff    	ja     f010a28e <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a3b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a3bd:	eb 54                	jmp    f010a413 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a3bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3c5:	89 d0                	mov    %edx,%eax
f010a3c7:	01 c0                	add    %eax,%eax
f010a3c9:	01 d0                	add    %edx,%eax
f010a3cb:	c1 e0 03             	shl    $0x3,%eax
f010a3ce:	01 c8                	add    %ecx,%eax
f010a3d0:	05 b8 00 00 00       	add    $0xb8,%eax
f010a3d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a3db:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3e1:	89 d0                	mov    %edx,%eax
f010a3e3:	01 c0                	add    %eax,%eax
f010a3e5:	01 d0                	add    %edx,%eax
f010a3e7:	c1 e0 03             	shl    $0x3,%eax
f010a3ea:	01 c8                	add    %ecx,%eax
f010a3ec:	05 bc 00 00 00       	add    $0xbc,%eax
f010a3f1:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a3f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3fa:	89 d0                	mov    %edx,%eax
f010a3fc:	01 c0                	add    %eax,%eax
f010a3fe:	01 d0                	add    %edx,%eax
f010a400:	c1 e0 03             	shl    $0x3,%eax
f010a403:	01 c8                	add    %ecx,%eax
f010a405:	05 c0 00 00 00       	add    $0xc0,%eax
f010a40a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a410:	ff 45 f4             	incl   -0xc(%ebp)
f010a413:	8b 45 08             	mov    0x8(%ebp),%eax
f010a416:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a41c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a41f:	39 c2                	cmp    %eax,%edx
f010a421:	77 9c                	ja     f010a3bf <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a423:	8b 45 08             	mov    0x8(%ebp),%eax
f010a426:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a42d:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a430:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a437:	eb 54                	jmp    f010a48d <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a439:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a43c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a43f:	89 d0                	mov    %edx,%eax
f010a441:	01 c0                	add    %eax,%eax
f010a443:	01 d0                	add    %edx,%eax
f010a445:	c1 e0 03             	shl    $0x3,%eax
f010a448:	01 c8                	add    %ecx,%eax
f010a44a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a44f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a458:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a45b:	89 d0                	mov    %edx,%eax
f010a45d:	01 c0                	add    %eax,%eax
f010a45f:	01 d0                	add    %edx,%eax
f010a461:	c1 e0 03             	shl    $0x3,%eax
f010a464:	01 c8                	add    %ecx,%eax
f010a466:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a46b:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a46e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a471:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a474:	89 d0                	mov    %edx,%eax
f010a476:	01 c0                	add    %eax,%eax
f010a478:	01 d0                	add    %edx,%eax
f010a47a:	c1 e0 03             	shl    $0x3,%eax
f010a47d:	01 c8                	add    %ecx,%eax
f010a47f:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a484:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a48a:	ff 45 f4             	incl   -0xc(%ebp)
f010a48d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a491:	7e a6                	jle    f010a439 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a49d:	00 00 00 

	e->pageFaultsCounter=0;
f010a4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a3:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a4aa:	00 00 00 
	e->tableFaultsCounter=0;
f010a4ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b0:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a4b7:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a4ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4bd:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a4c4:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ca:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a4d1:	00 00 00 

	e->nModifiedPages=0;
f010a4d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d7:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a4de:	00 00 00 
	e->nNotModifiedPages=0;
f010a4e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e4:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a4eb:	00 00 00 
	e->nClocks = 0;
f010a4ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f1:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a4f8:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a4fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4fe:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a505:	00 00 00 
	e->nPageOut = 0;
f010a508:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50b:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a512:	00 00 00 
	e->nNewPageAdded = 0;
f010a515:	8b 45 08             	mov    0x8(%ebp),%eax
f010a518:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a51f:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a522:	83 ec 04             	sub    $0x4,%esp
f010a525:	68 00 00 00 82       	push   $0x82000000
f010a52a:	68 00 00 00 80       	push   $0x80000000
f010a52f:	ff 75 08             	pushl  0x8(%ebp)
f010a532:	e8 12 fc ff ff       	call   f010a149 <initialize_uheap_dynamic_allocator>
f010a537:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a53a:	83 ec 0c             	sub    $0xc,%esp
f010a53d:	ff 75 08             	pushl  0x8(%ebp)
f010a540:	e8 09 00 00 00       	call   f010a54e <complete_environment_initialization>
f010a545:	83 c4 10             	add    $0x10,%esp
}
f010a548:	90                   	nop
f010a549:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a54c:	c9                   	leave  
f010a54d:	c3                   	ret    

f010a54e <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a54e:	55                   	push   %ebp
f010a54f:	89 e5                	mov    %esp,%ebp
f010a551:	53                   	push   %ebx
f010a552:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a555:	8b 45 08             	mov    0x8(%ebp),%eax
f010a558:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a55e:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a564:	8b 45 08             	mov    0x8(%ebp),%eax
f010a567:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a56d:	83 c8 03             	or     $0x3,%eax
f010a570:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a572:	8b 45 08             	mov    0x8(%ebp),%eax
f010a575:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a57b:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a581:	8b 45 08             	mov    0x8(%ebp),%eax
f010a584:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a58a:	83 c8 05             	or     $0x5,%eax
f010a58d:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a58f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a592:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a599:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a59c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a5a6:	00 00 00 
	e->disk_env_tabledir = 0;
f010a5a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ac:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a5b3:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a5c0:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a5c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c6:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a5c9:	83 ec 0c             	sub    $0xc,%esp
f010a5cc:	6a 08                	push   $0x8
f010a5ce:	e8 7b 32 02 00       	call   f012d84e <log2_ceil>
f010a5d3:	83 c4 10             	add    $0x10,%esp
f010a5d6:	ba 01 00 00 00       	mov    $0x1,%edx
f010a5db:	88 c1                	mov    %al,%cl
f010a5dd:	d3 e2                	shl    %cl,%edx
f010a5df:	89 d0                	mov    %edx,%eax
f010a5e1:	01 d8                	add    %ebx,%eax
f010a5e3:	89 c3                	mov    %eax,%ebx
f010a5e5:	83 ec 0c             	sub    $0xc,%esp
f010a5e8:	6a 08                	push   $0x8
f010a5ea:	e8 2a 32 02 00       	call   f012d819 <nearest_pow2_ceil>
f010a5ef:	83 c4 10             	add    $0x10,%esp
f010a5f2:	f7 d8                	neg    %eax
f010a5f4:	21 d8                	and    %ebx,%eax
f010a5f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a5f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a5fd:	7f 1b                	jg     f010a61a <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a5ff:	83 ec 0c             	sub    $0xc,%esp
f010a602:	6a 08                	push   $0x8
f010a604:	e8 45 32 02 00       	call   f012d84e <log2_ceil>
f010a609:	83 c4 10             	add    $0x10,%esp
f010a60c:	ba 01 00 00 00       	mov    $0x1,%edx
f010a611:	88 c1                	mov    %al,%cl
f010a613:	d3 e2                	shl    %cl,%edx
f010a615:	89 d0                	mov    %edx,%eax
f010a617:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a61a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61d:	8b 15 30 32 25 f0    	mov    0xf0253230,%edx
f010a623:	29 d0                	sub    %edx,%eax
f010a625:	c1 f8 05             	sar    $0x5,%eax
f010a628:	89 c2                	mov    %eax,%edx
f010a62a:	89 d0                	mov    %edx,%eax
f010a62c:	c1 e0 03             	shl    $0x3,%eax
f010a62f:	01 d0                	add    %edx,%eax
f010a631:	01 c0                	add    %eax,%eax
f010a633:	01 d0                	add    %edx,%eax
f010a635:	c1 e0 06             	shl    $0x6,%eax
f010a638:	01 d0                	add    %edx,%eax
f010a63a:	89 c1                	mov    %eax,%ecx
f010a63c:	c1 e1 04             	shl    $0x4,%ecx
f010a63f:	01 c8                	add    %ecx,%eax
f010a641:	c1 e0 03             	shl    $0x3,%eax
f010a644:	01 d0                	add    %edx,%eax
f010a646:	01 c0                	add    %eax,%eax
f010a648:	01 d0                	add    %edx,%eax
f010a64a:	89 c1                	mov    %eax,%ecx
f010a64c:	c1 e1 04             	shl    $0x4,%ecx
f010a64f:	01 c8                	add    %ecx,%eax
f010a651:	c1 e0 03             	shl    $0x3,%eax
f010a654:	01 d0                	add    %edx,%eax
f010a656:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a65d:	01 d0                	add    %edx,%eax
f010a65f:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a662:	89 c2                	mov    %eax,%edx
f010a664:	8b 45 08             	mov    0x8(%ebp),%eax
f010a667:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a66a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010a66f:	85 c0                	test   %eax,%eax
f010a671:	75 0c                	jne    f010a67f <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010a673:	8b 45 08             	mov    0x8(%ebp),%eax
f010a676:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a67d:	eb 0e                	jmp    f010a68d <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a67f:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010a684:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a687:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68a:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a68d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a690:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a697:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69a:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010a6a1:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a7:	83 ec 04             	sub    $0x4,%esp
f010a6aa:	6a 44                	push   $0x44
f010a6ac:	6a 00                	push   $0x0
f010a6ae:	50                   	push   %eax
f010a6af:	e8 c8 45 02 00       	call   f012ec7c <memset>
f010a6b4:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ba:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a6c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c3:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a6c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cc:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d5:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a6dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6df:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	8b 40 38             	mov    0x38(%eax),%eax
f010a6eb:	80 cc 02             	or     $0x2,%ah
f010a6ee:	89 c2                	mov    %eax,%edx
f010a6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f3:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a6f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a6fa:	75 17                	jne    f010a713 <complete_environment_initialization+0x1c5>
f010a6fc:	83 ec 04             	sub    $0x4,%esp
f010a6ff:	68 99 24 13 f0       	push   $0xf0132499
f010a704:	68 b1 03 00 00       	push   $0x3b1
f010a709:	68 37 24 13 f0       	push   $0xf0132437
f010a70e:	e8 9d 5a ff ff       	call   f01001b0 <_panic>
f010a713:	8b 45 08             	mov    0x8(%ebp),%eax
f010a716:	8b 40 44             	mov    0x44(%eax),%eax
f010a719:	85 c0                	test   %eax,%eax
f010a71b:	74 11                	je     f010a72e <complete_environment_initialization+0x1e0>
f010a71d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a720:	8b 40 44             	mov    0x44(%eax),%eax
f010a723:	8b 55 08             	mov    0x8(%ebp),%edx
f010a726:	8b 52 48             	mov    0x48(%edx),%edx
f010a729:	89 50 48             	mov    %edx,0x48(%eax)
f010a72c:	eb 0b                	jmp    f010a739 <complete_environment_initialization+0x1eb>
f010a72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a731:	8b 40 48             	mov    0x48(%eax),%eax
f010a734:	a3 3c 32 25 f0       	mov    %eax,0xf025323c
f010a739:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73c:	8b 40 48             	mov    0x48(%eax),%eax
f010a73f:	85 c0                	test   %eax,%eax
f010a741:	74 11                	je     f010a754 <complete_environment_initialization+0x206>
f010a743:	8b 45 08             	mov    0x8(%ebp),%eax
f010a746:	8b 40 48             	mov    0x48(%eax),%eax
f010a749:	8b 55 08             	mov    0x8(%ebp),%edx
f010a74c:	8b 52 44             	mov    0x44(%edx),%edx
f010a74f:	89 50 44             	mov    %edx,0x44(%eax)
f010a752:	eb 0b                	jmp    f010a75f <complete_environment_initialization+0x211>
f010a754:	8b 45 08             	mov    0x8(%ebp),%eax
f010a757:	8b 40 44             	mov    0x44(%eax),%eax
f010a75a:	a3 38 32 25 f0       	mov    %eax,0xf0253238
f010a75f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a762:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a769:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a773:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f010a778:	48                   	dec    %eax
f010a779:	a3 44 32 25 f0       	mov    %eax,0xf0253244
	return ;
f010a77e:	90                   	nop
}
f010a77f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a782:	c9                   	leave  
f010a783:	c3                   	ret    

f010a784 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a784:	55                   	push   %ebp
f010a785:	89 e5                	mov    %esp,%ebp
f010a787:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a78a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a78d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a790:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a793:	8b 00                	mov    (%eax),%eax
f010a795:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a79a:	74 17                	je     f010a7b3 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a79c:	83 ec 04             	sub    $0x4,%esp
f010a79f:	68 c0 25 13 f0       	push   $0xf01325c0
f010a7a4:	68 bd 03 00 00       	push   $0x3bd
f010a7a9:	68 37 24 13 f0       	push   $0xf0132437
f010a7ae:	e8 fd 59 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7b6:	8b 40 18             	mov    0x18(%eax),%eax
f010a7b9:	89 c2                	mov    %eax,%edx
f010a7bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7be:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a7c1:	90                   	nop
f010a7c2:	c9                   	leave  
f010a7c3:	c3                   	ret    

f010a7c4 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a7c4:	55                   	push   %ebp
f010a7c5:	89 e5                	mov    %esp,%ebp
f010a7c7:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a7ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cd:	8b 40 10             	mov    0x10(%eax),%eax
f010a7d0:	8d 48 01             	lea    0x1(%eax),%ecx
f010a7d3:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7d6:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a7d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a7dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a7e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a7e5:	8b 00                	mov    (%eax),%eax
f010a7e7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a7ec:	74 17                	je     f010a805 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a7ee:	83 ec 04             	sub    $0x4,%esp
f010a7f1:	68 c0 25 13 f0       	push   $0xf01325c0
f010a7f6:	68 cc 03 00 00       	push   $0x3cc
f010a7fb:	68 37 24 13 f0       	push   $0xf0132437
f010a800:	e8 ab 59 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a805:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a808:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a80b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a80e:	01 d0                	add    %edx,%eax
f010a810:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a813:	eb 0f                	jmp    f010a824 <PROGRAM_SEGMENT_NEXT+0x60>
f010a815:	8b 45 08             	mov    0x8(%ebp),%eax
f010a818:	8b 40 10             	mov    0x10(%eax),%eax
f010a81b:	8d 50 01             	lea    0x1(%eax),%edx
f010a81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a821:	89 50 10             	mov    %edx,0x10(%eax)
f010a824:	8b 45 08             	mov    0x8(%ebp),%eax
f010a827:	8b 40 10             	mov    0x10(%eax),%eax
f010a82a:	c1 e0 05             	shl    $0x5,%eax
f010a82d:	89 c2                	mov    %eax,%edx
f010a82f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a832:	01 d0                	add    %edx,%eax
f010a834:	8b 00                	mov    (%eax),%eax
f010a836:	83 f8 01             	cmp    $0x1,%eax
f010a839:	74 13                	je     f010a84e <PROGRAM_SEGMENT_NEXT+0x8a>
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	8b 50 10             	mov    0x10(%eax),%edx
f010a841:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a844:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a847:	0f b7 c0             	movzwl %ax,%eax
f010a84a:	39 c2                	cmp    %eax,%edx
f010a84c:	72 c7                	jb     f010a815 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a84e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a851:	8b 40 10             	mov    0x10(%eax),%eax
f010a854:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a85a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a85d:	0f b7 c0             	movzwl %ax,%eax
f010a860:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a863:	7e 63                	jle    f010a8c8 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a865:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a868:	c1 e0 05             	shl    $0x5,%eax
f010a86b:	89 c2                	mov    %eax,%edx
f010a86d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a870:	01 d0                	add    %edx,%eax
f010a872:	8b 50 04             	mov    0x4(%eax),%edx
f010a875:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a878:	01 c2                	add    %eax,%edx
f010a87a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87d:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a882:	c1 e0 05             	shl    $0x5,%eax
f010a885:	89 c2                	mov    %eax,%edx
f010a887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a88a:	01 d0                	add    %edx,%eax
f010a88c:	8b 50 14             	mov    0x14(%eax),%edx
f010a88f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a892:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a895:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a898:	c1 e0 05             	shl    $0x5,%eax
f010a89b:	89 c2                	mov    %eax,%edx
f010a89d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8a0:	01 d0                	add    %edx,%eax
f010a8a2:	8b 50 10             	mov    0x10(%eax),%edx
f010a8a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a8:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a8ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8ae:	c1 e0 05             	shl    $0x5,%eax
f010a8b1:	89 c2                	mov    %eax,%edx
f010a8b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8b6:	01 d0                	add    %edx,%eax
f010a8b8:	8b 40 08             	mov    0x8(%eax),%eax
f010a8bb:	89 c2                	mov    %eax,%edx
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	eb 05                	jmp    f010a8cd <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a8c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8cd:	c9                   	leave  
f010a8ce:	c3                   	ret    

f010a8cf <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a8cf:	55                   	push   %ebp
f010a8d0:	89 e5                	mov    %esp,%ebp
f010a8d2:	57                   	push   %edi
f010a8d3:	56                   	push   %esi
f010a8d4:	53                   	push   %ebx
f010a8d5:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a8d8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a8df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a8e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a8e8:	8b 00                	mov    (%eax),%eax
f010a8ea:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a8ef:	74 17                	je     f010a908 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a8f1:	83 ec 04             	sub    $0x4,%esp
f010a8f4:	68 c0 25 13 f0       	push   $0xf01325c0
f010a8f9:	68 e8 03 00 00       	push   $0x3e8
f010a8fe:	68 37 24 13 f0       	push   $0xf0132437
f010a903:	e8 a8 58 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a90b:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a90e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a911:	01 d0                	add    %edx,%eax
f010a913:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a916:	eb 07                	jmp    f010a91f <PROGRAM_SEGMENT_FIRST+0x50>
f010a918:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a91b:	40                   	inc    %eax
f010a91c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a91f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a922:	c1 e0 05             	shl    $0x5,%eax
f010a925:	89 c2                	mov    %eax,%edx
f010a927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a92a:	01 d0                	add    %edx,%eax
f010a92c:	8b 00                	mov    (%eax),%eax
f010a92e:	83 f8 01             	cmp    $0x1,%eax
f010a931:	74 10                	je     f010a943 <PROGRAM_SEGMENT_FIRST+0x74>
f010a933:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a936:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a939:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a93c:	0f b7 c0             	movzwl %ax,%eax
f010a93f:	39 c2                	cmp    %eax,%edx
f010a941:	72 d5                	jb     f010a918 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a943:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a946:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a949:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a94c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a94f:	0f b7 c0             	movzwl %ax,%eax
f010a952:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a955:	7e 68                	jle    f010a9bf <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a957:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a95a:	c1 e0 05             	shl    $0x5,%eax
f010a95d:	89 c2                	mov    %eax,%edx
f010a95f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a962:	01 d0                	add    %edx,%eax
f010a964:	8b 50 04             	mov    0x4(%eax),%edx
f010a967:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a96a:	01 d0                	add    %edx,%eax
f010a96c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a96f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a972:	c1 e0 05             	shl    $0x5,%eax
f010a975:	89 c2                	mov    %eax,%edx
f010a977:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a97a:	01 d0                	add    %edx,%eax
f010a97c:	8b 40 14             	mov    0x14(%eax),%eax
f010a97f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a982:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a985:	c1 e0 05             	shl    $0x5,%eax
f010a988:	89 c2                	mov    %eax,%edx
f010a98a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a98d:	01 d0                	add    %edx,%eax
f010a98f:	8b 40 10             	mov    0x10(%eax),%eax
f010a992:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a995:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a998:	c1 e0 05             	shl    $0x5,%eax
f010a99b:	89 c2                	mov    %eax,%edx
f010a99d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a9a0:	01 d0                	add    %edx,%eax
f010a9a2:	8b 40 08             	mov    0x8(%eax),%eax
f010a9a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a9a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ab:	89 c3                	mov    %eax,%ebx
f010a9ad:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a9b0:	ba 05 00 00 00       	mov    $0x5,%edx
f010a9b5:	89 df                	mov    %ebx,%edi
f010a9b7:	89 c6                	mov    %eax,%esi
f010a9b9:	89 d1                	mov    %edx,%ecx
f010a9bb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a9bd:	eb 1c                	jmp    f010a9db <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a9bf:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a9c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c9:	89 c3                	mov    %eax,%ebx
f010a9cb:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a9ce:	ba 05 00 00 00       	mov    $0x5,%edx
f010a9d3:	89 df                	mov    %ebx,%edi
f010a9d5:	89 c6                	mov    %eax,%esi
f010a9d7:	89 d1                	mov    %edx,%ecx
f010a9d9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9de:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a9e1:	5b                   	pop    %ebx
f010a9e2:	5e                   	pop    %esi
f010a9e3:	5f                   	pop    %edi
f010a9e4:	5d                   	pop    %ebp
f010a9e5:	c2 04 00             	ret    $0x4

f010a9e8 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010a9e8:	55                   	push   %ebp
f010a9e9:	89 e5                	mov    %esp,%ebp
f010a9eb:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a9ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a9f5:	a1 00 3b 25 f0       	mov    0xf0253b00,%eax
f010a9fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a9fd:	e9 c6 00 00 00       	jmp    f010aac8 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010aa02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa05:	8b 40 10             	mov    0x10(%eax),%eax
f010aa08:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aa0b:	0f 85 af 00 00 00    	jne    f010aac0 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010aa11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa14:	8b 50 0c             	mov    0xc(%eax),%edx
f010aa17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa1a:	8b 40 10             	mov    0x10(%eax),%eax
f010aa1d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010aa23:	83 ec 08             	sub    $0x8,%esp
f010aa26:	52                   	push   %edx
f010aa27:	50                   	push   %eax
f010aa28:	e8 33 d3 ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f010aa2d:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010aa30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aa34:	75 17                	jne    f010aa4d <cleanup_buffers+0x65>
f010aa36:	83 ec 04             	sub    $0x4,%esp
f010aa39:	68 99 24 13 f0       	push   $0xf0132499
f010aa3e:	68 0f 04 00 00       	push   $0x40f
f010aa43:	68 37 24 13 f0       	push   $0xf0132437
f010aa48:	e8 63 57 ff ff       	call   f01001b0 <_panic>
f010aa4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa50:	8b 00                	mov    (%eax),%eax
f010aa52:	85 c0                	test   %eax,%eax
f010aa54:	74 10                	je     f010aa66 <cleanup_buffers+0x7e>
f010aa56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa59:	8b 00                	mov    (%eax),%eax
f010aa5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa5e:	8b 52 04             	mov    0x4(%edx),%edx
f010aa61:	89 50 04             	mov    %edx,0x4(%eax)
f010aa64:	eb 0b                	jmp    f010aa71 <cleanup_buffers+0x89>
f010aa66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa69:	8b 40 04             	mov    0x4(%eax),%eax
f010aa6c:	a3 04 3b 25 f0       	mov    %eax,0xf0253b04
f010aa71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa74:	8b 40 04             	mov    0x4(%eax),%eax
f010aa77:	85 c0                	test   %eax,%eax
f010aa79:	74 0f                	je     f010aa8a <cleanup_buffers+0xa2>
f010aa7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa7e:	8b 40 04             	mov    0x4(%eax),%eax
f010aa81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa84:	8b 12                	mov    (%edx),%edx
f010aa86:	89 10                	mov    %edx,(%eax)
f010aa88:	eb 0a                	jmp    f010aa94 <cleanup_buffers+0xac>
f010aa8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa8d:	8b 00                	mov    (%eax),%eax
f010aa8f:	a3 00 3b 25 f0       	mov    %eax,0xf0253b00
f010aa94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010aa9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010aaa7:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f010aaac:	48                   	dec    %eax
f010aaad:	a3 0c 3b 25 f0       	mov    %eax,0xf0253b0c

			free_frame(ptr_fi);
f010aab2:	83 ec 0c             	sub    $0xc,%esp
f010aab5:	ff 75 f4             	pushl  -0xc(%ebp)
f010aab8:	e8 b4 c5 ff ff       	call   f0107071 <free_frame>
f010aabd:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aac0:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f010aac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aac8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aacc:	74 07                	je     f010aad5 <cleanup_buffers+0xed>
f010aace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad1:	8b 00                	mov    (%eax),%eax
f010aad3:	eb 05                	jmp    f010aada <cleanup_buffers+0xf2>
f010aad5:	b8 00 00 00 00       	mov    $0x0,%eax
f010aada:	a3 08 3b 25 f0       	mov    %eax,0xf0253b08
f010aadf:	a1 08 3b 25 f0       	mov    0xf0253b08,%eax
f010aae4:	85 c0                	test   %eax,%eax
f010aae6:	0f 85 16 ff ff ff    	jne    f010aa02 <cleanup_buffers+0x1a>
f010aaec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aaf0:	0f 85 0c ff ff ff    	jne    f010aa02 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aaf6:	90                   	nop
f010aaf7:	c9                   	leave  
f010aaf8:	c3                   	ret    

f010aaf9 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aaf9:	55                   	push   %ebp
f010aafa:	89 e5                	mov    %esp,%ebp
f010aafc:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aaff:	83 ec 04             	sub    $0x4,%esp
f010ab02:	68 d6 25 13 f0       	push   $0xf01325d6
f010ab07:	6a 0b                	push   $0xb
f010ab09:	68 e6 25 13 f0       	push   $0xf01325e6
f010ab0e:	e8 9d 56 ff ff       	call   f01001b0 <_panic>

f010ab13 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010ab13:	55                   	push   %ebp
f010ab14:	89 e5                	mov    %esp,%ebp
f010ab16:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab20:	eb 29                	jmp    f010ab4b <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010ab22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab25:	89 d0                	mov    %edx,%eax
f010ab27:	01 c0                	add    %eax,%eax
f010ab29:	01 d0                	add    %edx,%eax
f010ab2b:	c1 e0 02             	shl    $0x2,%eax
f010ab2e:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010ab33:	8b 00                	mov    (%eax),%eax
f010ab35:	83 ec 08             	sub    $0x8,%esp
f010ab38:	50                   	push   %eax
f010ab39:	ff 75 08             	pushl  0x8(%ebp)
f010ab3c:	e8 59 40 02 00       	call   f012eb9a <strcmp>
f010ab41:	83 c4 10             	add    $0x10,%esp
f010ab44:	85 c0                	test   %eax,%eax
f010ab46:	74 0f                	je     f010ab57 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab48:	ff 45 f4             	incl   -0xc(%ebp)
f010ab4b:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010ab50:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab53:	7c cd                	jl     f010ab22 <get_user_program_info+0xf>
f010ab55:	eb 01                	jmp    f010ab58 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010ab57:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010ab58:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010ab5d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ab60:	75 1a                	jne    f010ab7c <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010ab62:	83 ec 08             	sub    $0x8,%esp
f010ab65:	ff 75 08             	pushl  0x8(%ebp)
f010ab68:	68 72 27 13 f0       	push   $0xf0132772
f010ab6d:	e8 bf 62 ff ff       	call   f0100e31 <cprintf>
f010ab72:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ab75:	b8 00 00 00 00       	mov    $0x0,%eax
f010ab7a:	eb 11                	jmp    f010ab8d <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010ab7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab7f:	89 d0                	mov    %edx,%eax
f010ab81:	01 c0                	add    %eax,%eax
f010ab83:	01 d0                	add    %edx,%eax
f010ab85:	c1 e0 02             	shl    $0x2,%eax
f010ab88:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010ab8d:	c9                   	leave  
f010ab8e:	c3                   	ret    

f010ab8f <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010ab8f:	55                   	push   %ebp
f010ab90:	89 e5                	mov    %esp,%ebp
f010ab92:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ab95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab9c:	eb 2d                	jmp    f010abcb <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010ab9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aba1:	89 d0                	mov    %edx,%eax
f010aba3:	01 c0                	add    %eax,%eax
f010aba5:	01 d0                	add    %edx,%eax
f010aba7:	c1 e0 02             	shl    $0x2,%eax
f010abaa:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
f010abaf:	8b 00                	mov    (%eax),%eax
f010abb1:	8b 55 08             	mov    0x8(%ebp),%edx
f010abb4:	83 c2 5c             	add    $0x5c,%edx
f010abb7:	83 ec 08             	sub    $0x8,%esp
f010abba:	50                   	push   %eax
f010abbb:	52                   	push   %edx
f010abbc:	e8 d9 3f 02 00       	call   f012eb9a <strcmp>
f010abc1:	83 c4 10             	add    $0x10,%esp
f010abc4:	85 c0                	test   %eax,%eax
f010abc6:	74 0f                	je     f010abd7 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010abc8:	ff 45 f4             	incl   -0xc(%ebp)
f010abcb:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010abd0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010abd3:	7c c9                	jl     f010ab9e <get_user_program_info_by_env+0xf>
f010abd5:	eb 01                	jmp    f010abd8 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010abd7:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010abd8:	a1 4c ca 18 f0       	mov    0xf018ca4c,%eax
f010abdd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010abe0:	75 17                	jne    f010abf9 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010abe2:	83 ec 0c             	sub    $0xc,%esp
f010abe5:	68 8d 27 13 f0       	push   $0xf013278d
f010abea:	e8 42 62 ff ff       	call   f0100e31 <cprintf>
f010abef:	83 c4 10             	add    $0x10,%esp
		return 0;
f010abf2:	b8 00 00 00 00       	mov    $0x0,%eax
f010abf7:	eb 11                	jmp    f010ac0a <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010abf9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abfc:	89 d0                	mov    %edx,%eax
f010abfe:	01 c0                	add    %eax,%eax
f010ac00:	01 d0                	add    %edx,%eax
f010ac02:	c1 e0 02             	shl    $0x2,%eax
f010ac05:	05 a0 c9 18 f0       	add    $0xf018c9a0,%eax
}
f010ac0a:	c9                   	leave  
f010ac0b:	c3                   	ret    

f010ac0c <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010ac0c:	55                   	push   %ebp
f010ac0d:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010ac0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac12:	83 f8 13             	cmp    $0x13,%eax
f010ac15:	77 0c                	ja     f010ac23 <trapname+0x17>
		return excnames[trapno];
f010ac17:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1a:	8b 04 85 e0 2b 13 f0 	mov    -0xfecd420(,%eax,4),%eax
f010ac21:	eb 12                	jmp    f010ac35 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010ac23:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010ac27:	75 07                	jne    f010ac30 <trapname+0x24>
		return "System call";
f010ac29:	b8 c0 27 13 f0       	mov    $0xf01327c0,%eax
f010ac2e:	eb 05                	jmp    f010ac35 <trapname+0x29>
	return "(unknown trap)";
f010ac30:	b8 cc 27 13 f0       	mov    $0xf01327cc,%eax
}
f010ac35:	5d                   	pop    %ebp
f010ac36:	c3                   	ret    

f010ac37 <idt_init>:


void
idt_init(void)
{
f010ac37:	55                   	push   %ebp
f010ac38:	89 e5                	mov    %esp,%ebp
f010ac3a:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010ac3d:	b8 d2 c2 10 f0       	mov    $0xf010c2d2,%eax
f010ac42:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010ac48:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010ac4f:	08 00 
f010ac51:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010ac56:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac59:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010ac5e:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010ac63:	83 e0 1f             	and    $0x1f,%eax
f010ac66:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010ac6b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac70:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac73:	83 c8 0e             	or     $0xe,%eax
f010ac76:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac7b:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac80:	83 e0 ef             	and    $0xffffffef,%eax
f010ac83:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac88:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac8d:	83 e0 9f             	and    $0xffffff9f,%eax
f010ac90:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010ac95:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010ac9a:	83 c8 80             	or     $0xffffff80,%eax
f010ac9d:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010aca2:	b8 d2 c2 10 f0       	mov    $0xf010c2d2,%eax
f010aca7:	c1 e8 10             	shr    $0x10,%eax
f010acaa:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010acb0:	b8 da c2 10 f0       	mov    $0xf010c2da,%eax
f010acb5:	66 a3 e0 33 25 f0    	mov    %ax,0xf02533e0
f010acbb:	66 c7 05 e2 33 25 f0 	movw   $0x8,0xf02533e2
f010acc2:	08 00 
f010acc4:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010acc9:	83 e0 e0             	and    $0xffffffe0,%eax
f010accc:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010acd1:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010acd6:	83 e0 1f             	and    $0x1f,%eax
f010acd9:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010acde:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ace3:	83 e0 f0             	and    $0xfffffff0,%eax
f010ace6:	83 c8 0e             	or     $0xe,%eax
f010ace9:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010acee:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010acf3:	83 e0 ef             	and    $0xffffffef,%eax
f010acf6:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010acfb:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ad00:	83 c8 60             	or     $0x60,%eax
f010ad03:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010ad08:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010ad0d:	83 c8 80             	or     $0xffffff80,%eax
f010ad10:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010ad15:	b8 da c2 10 f0       	mov    $0xf010c2da,%eax
f010ad1a:	c1 e8 10             	shr    $0x10,%eax
f010ad1d:	66 a3 e6 33 25 f0    	mov    %ax,0xf02533e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010ad23:	b8 e4 c2 10 f0       	mov    $0xf010c2e4,%eax
f010ad28:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010ad2e:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010ad35:	08 00 
f010ad37:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010ad3c:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad3f:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010ad44:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010ad49:	83 e0 1f             	and    $0x1f,%eax
f010ad4c:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010ad51:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad56:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad59:	83 c8 0e             	or     $0xe,%eax
f010ad5c:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad61:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad66:	83 e0 ef             	and    $0xffffffef,%eax
f010ad69:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad6e:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad73:	83 e0 9f             	and    $0xffffff9f,%eax
f010ad76:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad7b:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010ad80:	83 c8 80             	or     $0xffffff80,%eax
f010ad83:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010ad88:	b8 e4 c2 10 f0       	mov    $0xf010c2e4,%eax
f010ad8d:	c1 e8 10             	shr    $0x10,%eax
f010ad90:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010ad96:	b8 ec c2 10 f0       	mov    $0xf010c2ec,%eax
f010ad9b:	66 a3 60 32 25 f0    	mov    %ax,0xf0253260
f010ada1:	66 c7 05 62 32 25 f0 	movw   $0x8,0xf0253262
f010ada8:	08 00 
f010adaa:	a0 64 32 25 f0       	mov    0xf0253264,%al
f010adaf:	83 e0 e0             	and    $0xffffffe0,%eax
f010adb2:	a2 64 32 25 f0       	mov    %al,0xf0253264
f010adb7:	a0 64 32 25 f0       	mov    0xf0253264,%al
f010adbc:	83 e0 1f             	and    $0x1f,%eax
f010adbf:	a2 64 32 25 f0       	mov    %al,0xf0253264
f010adc4:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010adc9:	83 e0 f0             	and    $0xfffffff0,%eax
f010adcc:	83 c8 0e             	or     $0xe,%eax
f010adcf:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010add4:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010add9:	83 e0 ef             	and    $0xffffffef,%eax
f010addc:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010ade1:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010ade6:	83 c8 60             	or     $0x60,%eax
f010ade9:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010adee:	a0 65 32 25 f0       	mov    0xf0253265,%al
f010adf3:	83 c8 80             	or     $0xffffff80,%eax
f010adf6:	a2 65 32 25 f0       	mov    %al,0xf0253265
f010adfb:	b8 ec c2 10 f0       	mov    $0xf010c2ec,%eax
f010ae00:	c1 e8 10             	shr    $0x10,%eax
f010ae03:	66 a3 66 32 25 f0    	mov    %ax,0xf0253266
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010ae09:	b8 f6 c2 10 f0       	mov    $0xf010c2f6,%eax
f010ae0e:	66 a3 68 32 25 f0    	mov    %ax,0xf0253268
f010ae14:	66 c7 05 6a 32 25 f0 	movw   $0x8,0xf025326a
f010ae1b:	08 00 
f010ae1d:	a0 6c 32 25 f0       	mov    0xf025326c,%al
f010ae22:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae25:	a2 6c 32 25 f0       	mov    %al,0xf025326c
f010ae2a:	a0 6c 32 25 f0       	mov    0xf025326c,%al
f010ae2f:	83 e0 1f             	and    $0x1f,%eax
f010ae32:	a2 6c 32 25 f0       	mov    %al,0xf025326c
f010ae37:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae3c:	83 c8 0f             	or     $0xf,%eax
f010ae3f:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae44:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae49:	83 e0 ef             	and    $0xffffffef,%eax
f010ae4c:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae51:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae56:	83 c8 60             	or     $0x60,%eax
f010ae59:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae5e:	a0 6d 32 25 f0       	mov    0xf025326d,%al
f010ae63:	83 c8 80             	or     $0xffffff80,%eax
f010ae66:	a2 6d 32 25 f0       	mov    %al,0xf025326d
f010ae6b:	b8 f6 c2 10 f0       	mov    $0xf010c2f6,%eax
f010ae70:	c1 e8 10             	shr    $0x10,%eax
f010ae73:	66 a3 6e 32 25 f0    	mov    %ax,0xf025326e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010ae79:	b8 00 c3 10 f0       	mov    $0xf010c300,%eax
f010ae7e:	66 a3 70 32 25 f0    	mov    %ax,0xf0253270
f010ae84:	66 c7 05 72 32 25 f0 	movw   $0x8,0xf0253272
f010ae8b:	08 00 
f010ae8d:	a0 74 32 25 f0       	mov    0xf0253274,%al
f010ae92:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae95:	a2 74 32 25 f0       	mov    %al,0xf0253274
f010ae9a:	a0 74 32 25 f0       	mov    0xf0253274,%al
f010ae9f:	83 e0 1f             	and    $0x1f,%eax
f010aea2:	a2 74 32 25 f0       	mov    %al,0xf0253274
f010aea7:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aeac:	83 e0 f0             	and    $0xfffffff0,%eax
f010aeaf:	83 c8 0e             	or     $0xe,%eax
f010aeb2:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aeb7:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aebc:	83 e0 ef             	and    $0xffffffef,%eax
f010aebf:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aec4:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aec9:	83 c8 60             	or     $0x60,%eax
f010aecc:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aed1:	a0 75 32 25 f0       	mov    0xf0253275,%al
f010aed6:	83 c8 80             	or     $0xffffff80,%eax
f010aed9:	a2 75 32 25 f0       	mov    %al,0xf0253275
f010aede:	b8 00 c3 10 f0       	mov    $0xf010c300,%eax
f010aee3:	c1 e8 10             	shr    $0x10,%eax
f010aee6:	66 a3 76 32 25 f0    	mov    %ax,0xf0253276
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010aeec:	b8 0a c3 10 f0       	mov    $0xf010c30a,%eax
f010aef1:	66 a3 78 32 25 f0    	mov    %ax,0xf0253278
f010aef7:	66 c7 05 7a 32 25 f0 	movw   $0x8,0xf025327a
f010aefe:	08 00 
f010af00:	a0 7c 32 25 f0       	mov    0xf025327c,%al
f010af05:	83 e0 e0             	and    $0xffffffe0,%eax
f010af08:	a2 7c 32 25 f0       	mov    %al,0xf025327c
f010af0d:	a0 7c 32 25 f0       	mov    0xf025327c,%al
f010af12:	83 e0 1f             	and    $0x1f,%eax
f010af15:	a2 7c 32 25 f0       	mov    %al,0xf025327c
f010af1a:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af1f:	83 c8 0f             	or     $0xf,%eax
f010af22:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af27:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af2c:	83 e0 ef             	and    $0xffffffef,%eax
f010af2f:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af34:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af39:	83 c8 60             	or     $0x60,%eax
f010af3c:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af41:	a0 7d 32 25 f0       	mov    0xf025327d,%al
f010af46:	83 c8 80             	or     $0xffffff80,%eax
f010af49:	a2 7d 32 25 f0       	mov    %al,0xf025327d
f010af4e:	b8 0a c3 10 f0       	mov    $0xf010c30a,%eax
f010af53:	c1 e8 10             	shr    $0x10,%eax
f010af56:	66 a3 7e 32 25 f0    	mov    %ax,0xf025327e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010af5c:	b8 14 c3 10 f0       	mov    $0xf010c314,%eax
f010af61:	66 a3 80 32 25 f0    	mov    %ax,0xf0253280
f010af67:	66 c7 05 82 32 25 f0 	movw   $0x8,0xf0253282
f010af6e:	08 00 
f010af70:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010af75:	83 e0 e0             	and    $0xffffffe0,%eax
f010af78:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010af7d:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010af82:	83 e0 1f             	and    $0x1f,%eax
f010af85:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010af8a:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010af8f:	83 c8 0f             	or     $0xf,%eax
f010af92:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010af97:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010af9c:	83 e0 ef             	and    $0xffffffef,%eax
f010af9f:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afa4:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010afa9:	83 c8 60             	or     $0x60,%eax
f010afac:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afb1:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010afb6:	83 c8 80             	or     $0xffffff80,%eax
f010afb9:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010afbe:	b8 14 c3 10 f0       	mov    $0xf010c314,%eax
f010afc3:	c1 e8 10             	shr    $0x10,%eax
f010afc6:	66 a3 86 32 25 f0    	mov    %ax,0xf0253286
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010afcc:	b8 1e c3 10 f0       	mov    $0xf010c31e,%eax
f010afd1:	66 a3 88 32 25 f0    	mov    %ax,0xf0253288
f010afd7:	66 c7 05 8a 32 25 f0 	movw   $0x8,0xf025328a
f010afde:	08 00 
f010afe0:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010afe5:	83 e0 e0             	and    $0xffffffe0,%eax
f010afe8:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010afed:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010aff2:	83 e0 1f             	and    $0x1f,%eax
f010aff5:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010affa:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010afff:	83 e0 f0             	and    $0xfffffff0,%eax
f010b002:	83 c8 0e             	or     $0xe,%eax
f010b005:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b00a:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b00f:	83 e0 ef             	and    $0xffffffef,%eax
f010b012:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b017:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b01c:	83 c8 60             	or     $0x60,%eax
f010b01f:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b024:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b029:	83 c8 80             	or     $0xffffff80,%eax
f010b02c:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b031:	b8 1e c3 10 f0       	mov    $0xf010c31e,%eax
f010b036:	c1 e8 10             	shr    $0x10,%eax
f010b039:	66 a3 8e 32 25 f0    	mov    %ax,0xf025328e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b03f:	b8 28 c3 10 f0       	mov    $0xf010c328,%eax
f010b044:	66 a3 90 32 25 f0    	mov    %ax,0xf0253290
f010b04a:	66 c7 05 92 32 25 f0 	movw   $0x8,0xf0253292
f010b051:	08 00 
f010b053:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b058:	83 e0 e0             	and    $0xffffffe0,%eax
f010b05b:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b060:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b065:	83 e0 1f             	and    $0x1f,%eax
f010b068:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b06d:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b072:	83 e0 f0             	and    $0xfffffff0,%eax
f010b075:	83 c8 0e             	or     $0xe,%eax
f010b078:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b07d:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b082:	83 e0 ef             	and    $0xffffffef,%eax
f010b085:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b08a:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b08f:	83 c8 60             	or     $0x60,%eax
f010b092:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b097:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b09c:	83 c8 80             	or     $0xffffff80,%eax
f010b09f:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b0a4:	b8 28 c3 10 f0       	mov    $0xf010c328,%eax
f010b0a9:	c1 e8 10             	shr    $0x10,%eax
f010b0ac:	66 a3 96 32 25 f0    	mov    %ax,0xf0253296
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b0b2:	b8 32 c3 10 f0       	mov    $0xf010c332,%eax
f010b0b7:	66 a3 98 32 25 f0    	mov    %ax,0xf0253298
f010b0bd:	66 c7 05 9a 32 25 f0 	movw   $0x8,0xf025329a
f010b0c4:	08 00 
f010b0c6:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b0cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0ce:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b0d3:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b0d8:	83 e0 1f             	and    $0x1f,%eax
f010b0db:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b0e0:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b0e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0e8:	83 c8 0e             	or     $0xe,%eax
f010b0eb:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b0f0:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b0f5:	83 e0 ef             	and    $0xffffffef,%eax
f010b0f8:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b0fd:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b102:	83 c8 60             	or     $0x60,%eax
f010b105:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b10a:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b10f:	83 c8 80             	or     $0xffffff80,%eax
f010b112:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b117:	b8 32 c3 10 f0       	mov    $0xf010c332,%eax
f010b11c:	c1 e8 10             	shr    $0x10,%eax
f010b11f:	66 a3 9e 32 25 f0    	mov    %ax,0xf025329e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b125:	b8 3c c3 10 f0       	mov    $0xf010c33c,%eax
f010b12a:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b130:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b137:	08 00 
f010b139:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b13e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b141:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b146:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b14b:	83 e0 1f             	and    $0x1f,%eax
f010b14e:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b153:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b158:	83 e0 f0             	and    $0xfffffff0,%eax
f010b15b:	83 c8 0e             	or     $0xe,%eax
f010b15e:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b163:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b168:	83 e0 ef             	and    $0xffffffef,%eax
f010b16b:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b170:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b175:	83 c8 60             	or     $0x60,%eax
f010b178:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b17d:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b182:	83 c8 80             	or     $0xffffff80,%eax
f010b185:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b18a:	b8 3c c3 10 f0       	mov    $0xf010c33c,%eax
f010b18f:	c1 e8 10             	shr    $0x10,%eax
f010b192:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b198:	b8 44 c3 10 f0       	mov    $0xf010c344,%eax
f010b19d:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b1a3:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b1aa:	08 00 
f010b1ac:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b1b1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1b4:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b1b9:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b1be:	83 e0 1f             	and    $0x1f,%eax
f010b1c1:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b1c6:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1cb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ce:	83 c8 0e             	or     $0xe,%eax
f010b1d1:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1d6:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1db:	83 e0 ef             	and    $0xffffffef,%eax
f010b1de:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1e3:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1e8:	83 c8 60             	or     $0x60,%eax
f010b1eb:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1f0:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b1f5:	83 c8 80             	or     $0xffffff80,%eax
f010b1f8:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b1fd:	b8 44 c3 10 f0       	mov    $0xf010c344,%eax
f010b202:	c1 e8 10             	shr    $0x10,%eax
f010b205:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b20b:	b8 48 c3 10 f0       	mov    $0xf010c348,%eax
f010b210:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010b216:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010b21d:	08 00 
f010b21f:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b224:	83 e0 e0             	and    $0xffffffe0,%eax
f010b227:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b22c:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b231:	83 e0 1f             	and    $0x1f,%eax
f010b234:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b239:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b23e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b241:	83 c8 0e             	or     $0xe,%eax
f010b244:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b249:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b24e:	83 e0 ef             	and    $0xffffffef,%eax
f010b251:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b256:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b25b:	83 c8 60             	or     $0x60,%eax
f010b25e:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b263:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b268:	83 c8 80             	or     $0xffffff80,%eax
f010b26b:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b270:	b8 48 c3 10 f0       	mov    $0xf010c348,%eax
f010b275:	c1 e8 10             	shr    $0x10,%eax
f010b278:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b27e:	b8 4c c3 10 f0       	mov    $0xf010c34c,%eax
f010b283:	66 a3 c8 32 25 f0    	mov    %ax,0xf02532c8
f010b289:	66 c7 05 ca 32 25 f0 	movw   $0x8,0xf02532ca
f010b290:	08 00 
f010b292:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010b297:	83 e0 e0             	and    $0xffffffe0,%eax
f010b29a:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010b29f:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010b2a4:	83 e0 1f             	and    $0x1f,%eax
f010b2a7:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010b2ac:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2b1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2b4:	83 c8 0e             	or     $0xe,%eax
f010b2b7:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2bc:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2c1:	83 e0 ef             	and    $0xffffffef,%eax
f010b2c4:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2c9:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2ce:	83 c8 60             	or     $0x60,%eax
f010b2d1:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2d6:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010b2db:	83 c8 80             	or     $0xffffff80,%eax
f010b2de:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010b2e3:	b8 4c c3 10 f0       	mov    $0xf010c34c,%eax
f010b2e8:	c1 e8 10             	shr    $0x10,%eax
f010b2eb:	66 a3 ce 32 25 f0    	mov    %ax,0xf02532ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b2f1:	b8 50 c3 10 f0       	mov    $0xf010c350,%eax
f010b2f6:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010b2fc:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010b303:	08 00 
f010b305:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b30a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b30d:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b312:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b317:	83 e0 1f             	and    $0x1f,%eax
f010b31a:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b31f:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b324:	83 e0 f0             	and    $0xfffffff0,%eax
f010b327:	83 c8 0e             	or     $0xe,%eax
f010b32a:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b32f:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b334:	83 e0 ef             	and    $0xffffffef,%eax
f010b337:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b33c:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b341:	83 c8 60             	or     $0x60,%eax
f010b344:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b349:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b34e:	83 c8 80             	or     $0xffffff80,%eax
f010b351:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b356:	b8 50 c3 10 f0       	mov    $0xf010c350,%eax
f010b35b:	c1 e8 10             	shr    $0x10,%eax
f010b35e:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b364:	b8 56 c3 10 f0       	mov    $0xf010c356,%eax
f010b369:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010b36f:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010b376:	08 00 
f010b378:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b37d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b380:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b385:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b38a:	83 e0 1f             	and    $0x1f,%eax
f010b38d:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b392:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b397:	83 e0 f0             	and    $0xfffffff0,%eax
f010b39a:	83 c8 0e             	or     $0xe,%eax
f010b39d:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3a2:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3a7:	83 e0 ef             	and    $0xffffffef,%eax
f010b3aa:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3af:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3b4:	83 c8 60             	or     $0x60,%eax
f010b3b7:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3bc:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b3c1:	83 c8 80             	or     $0xffffff80,%eax
f010b3c4:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b3c9:	b8 56 c3 10 f0       	mov    $0xf010c356,%eax
f010b3ce:	c1 e8 10             	shr    $0x10,%eax
f010b3d1:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b3d7:	b8 5a c3 10 f0       	mov    $0xf010c35a,%eax
f010b3dc:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010b3e2:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010b3e9:	08 00 
f010b3eb:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b3f0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3f3:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b3f8:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b3fd:	83 e0 1f             	and    $0x1f,%eax
f010b400:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b405:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b40a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b40d:	83 c8 0e             	or     $0xe,%eax
f010b410:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b415:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b41a:	83 e0 ef             	and    $0xffffffef,%eax
f010b41d:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b422:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b427:	83 c8 60             	or     $0x60,%eax
f010b42a:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b42f:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b434:	83 c8 80             	or     $0xffffff80,%eax
f010b437:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b43c:	b8 5a c3 10 f0       	mov    $0xf010c35a,%eax
f010b441:	c1 e8 10             	shr    $0x10,%eax
f010b444:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b44a:	b8 60 c3 10 f0       	mov    $0xf010c360,%eax
f010b44f:	66 a3 f8 32 25 f0    	mov    %ax,0xf02532f8
f010b455:	66 c7 05 fa 32 25 f0 	movw   $0x8,0xf02532fa
f010b45c:	08 00 
f010b45e:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010b463:	83 e0 e0             	and    $0xffffffe0,%eax
f010b466:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010b46b:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010b470:	83 e0 1f             	and    $0x1f,%eax
f010b473:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010b478:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b47d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b480:	83 c8 0e             	or     $0xe,%eax
f010b483:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b488:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b48d:	83 e0 ef             	and    $0xffffffef,%eax
f010b490:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b495:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b49a:	83 c8 60             	or     $0x60,%eax
f010b49d:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b4a2:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010b4a7:	83 c8 80             	or     $0xffffff80,%eax
f010b4aa:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010b4af:	b8 60 c3 10 f0       	mov    $0xf010c360,%eax
f010b4b4:	c1 e8 10             	shr    $0x10,%eax
f010b4b7:	66 a3 fe 32 25 f0    	mov    %ax,0xf02532fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b4bd:	b8 66 c3 10 f0       	mov    $0xf010c366,%eax
f010b4c2:	66 a3 60 33 25 f0    	mov    %ax,0xf0253360
f010b4c8:	66 c7 05 62 33 25 f0 	movw   $0x8,0xf0253362
f010b4cf:	08 00 
f010b4d1:	a0 64 33 25 f0       	mov    0xf0253364,%al
f010b4d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4d9:	a2 64 33 25 f0       	mov    %al,0xf0253364
f010b4de:	a0 64 33 25 f0       	mov    0xf0253364,%al
f010b4e3:	83 e0 1f             	and    $0x1f,%eax
f010b4e6:	a2 64 33 25 f0       	mov    %al,0xf0253364
f010b4eb:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b4f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4f3:	83 c8 0e             	or     $0xe,%eax
f010b4f6:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b4fb:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b500:	83 e0 ef             	and    $0xffffffef,%eax
f010b503:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b508:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b50d:	83 c8 60             	or     $0x60,%eax
f010b510:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b515:	a0 65 33 25 f0       	mov    0xf0253365,%al
f010b51a:	83 c8 80             	or     $0xffffff80,%eax
f010b51d:	a2 65 33 25 f0       	mov    %al,0xf0253365
f010b522:	b8 66 c3 10 f0       	mov    $0xf010c366,%eax
f010b527:	c1 e8 10             	shr    $0x10,%eax
f010b52a:	66 a3 66 33 25 f0    	mov    %ax,0xf0253366
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b530:	b8 6c c3 10 f0       	mov    $0xf010c36c,%eax
f010b535:	66 a3 68 33 25 f0    	mov    %ax,0xf0253368
f010b53b:	66 c7 05 6a 33 25 f0 	movw   $0x8,0xf025336a
f010b542:	08 00 
f010b544:	a0 6c 33 25 f0       	mov    0xf025336c,%al
f010b549:	83 e0 e0             	and    $0xffffffe0,%eax
f010b54c:	a2 6c 33 25 f0       	mov    %al,0xf025336c
f010b551:	a0 6c 33 25 f0       	mov    0xf025336c,%al
f010b556:	83 e0 1f             	and    $0x1f,%eax
f010b559:	a2 6c 33 25 f0       	mov    %al,0xf025336c
f010b55e:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b563:	83 e0 f0             	and    $0xfffffff0,%eax
f010b566:	83 c8 0e             	or     $0xe,%eax
f010b569:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b56e:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b573:	83 e0 ef             	and    $0xffffffef,%eax
f010b576:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b57b:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b580:	83 c8 60             	or     $0x60,%eax
f010b583:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b588:	a0 6d 33 25 f0       	mov    0xf025336d,%al
f010b58d:	83 c8 80             	or     $0xffffff80,%eax
f010b590:	a2 6d 33 25 f0       	mov    %al,0xf025336d
f010b595:	b8 6c c3 10 f0       	mov    $0xf010c36c,%eax
f010b59a:	c1 e8 10             	shr    $0x10,%eax
f010b59d:	66 a3 6e 33 25 f0    	mov    %ax,0xf025336e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b5a3:	b8 72 c3 10 f0       	mov    $0xf010c372,%eax
f010b5a8:	66 a3 70 33 25 f0    	mov    %ax,0xf0253370
f010b5ae:	66 c7 05 72 33 25 f0 	movw   $0x8,0xf0253372
f010b5b5:	08 00 
f010b5b7:	a0 74 33 25 f0       	mov    0xf0253374,%al
f010b5bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5bf:	a2 74 33 25 f0       	mov    %al,0xf0253374
f010b5c4:	a0 74 33 25 f0       	mov    0xf0253374,%al
f010b5c9:	83 e0 1f             	and    $0x1f,%eax
f010b5cc:	a2 74 33 25 f0       	mov    %al,0xf0253374
f010b5d1:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5d9:	83 c8 0e             	or     $0xe,%eax
f010b5dc:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5e1:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5e6:	83 e0 ef             	and    $0xffffffef,%eax
f010b5e9:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5ee:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b5f3:	83 c8 60             	or     $0x60,%eax
f010b5f6:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b5fb:	a0 75 33 25 f0       	mov    0xf0253375,%al
f010b600:	83 c8 80             	or     $0xffffff80,%eax
f010b603:	a2 75 33 25 f0       	mov    %al,0xf0253375
f010b608:	b8 72 c3 10 f0       	mov    $0xf010c372,%eax
f010b60d:	c1 e8 10             	shr    $0x10,%eax
f010b610:	66 a3 76 33 25 f0    	mov    %ax,0xf0253376
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b616:	b8 78 c3 10 f0       	mov    $0xf010c378,%eax
f010b61b:	66 a3 78 33 25 f0    	mov    %ax,0xf0253378
f010b621:	66 c7 05 7a 33 25 f0 	movw   $0x8,0xf025337a
f010b628:	08 00 
f010b62a:	a0 7c 33 25 f0       	mov    0xf025337c,%al
f010b62f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b632:	a2 7c 33 25 f0       	mov    %al,0xf025337c
f010b637:	a0 7c 33 25 f0       	mov    0xf025337c,%al
f010b63c:	83 e0 1f             	and    $0x1f,%eax
f010b63f:	a2 7c 33 25 f0       	mov    %al,0xf025337c
f010b644:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b649:	83 e0 f0             	and    $0xfffffff0,%eax
f010b64c:	83 c8 0e             	or     $0xe,%eax
f010b64f:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b654:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b659:	83 e0 ef             	and    $0xffffffef,%eax
f010b65c:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b661:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b666:	83 c8 60             	or     $0x60,%eax
f010b669:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b66e:	a0 7d 33 25 f0       	mov    0xf025337d,%al
f010b673:	83 c8 80             	or     $0xffffff80,%eax
f010b676:	a2 7d 33 25 f0       	mov    %al,0xf025337d
f010b67b:	b8 78 c3 10 f0       	mov    $0xf010c378,%eax
f010b680:	c1 e8 10             	shr    $0x10,%eax
f010b683:	66 a3 7e 33 25 f0    	mov    %ax,0xf025337e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b689:	b8 7e c3 10 f0       	mov    $0xf010c37e,%eax
f010b68e:	66 a3 80 33 25 f0    	mov    %ax,0xf0253380
f010b694:	66 c7 05 82 33 25 f0 	movw   $0x8,0xf0253382
f010b69b:	08 00 
f010b69d:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b6a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6a5:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b6aa:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b6af:	83 e0 1f             	and    $0x1f,%eax
f010b6b2:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b6b7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6bf:	83 c8 0e             	or     $0xe,%eax
f010b6c2:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6c7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6cc:	83 e0 ef             	and    $0xffffffef,%eax
f010b6cf:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6d4:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6d9:	83 c8 60             	or     $0x60,%eax
f010b6dc:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6e1:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b6e6:	83 c8 80             	or     $0xffffff80,%eax
f010b6e9:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b6ee:	b8 7e c3 10 f0       	mov    $0xf010c37e,%eax
f010b6f3:	c1 e8 10             	shr    $0x10,%eax
f010b6f6:	66 a3 86 33 25 f0    	mov    %ax,0xf0253386
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b6fc:	b8 84 c3 10 f0       	mov    $0xf010c384,%eax
f010b701:	66 a3 88 33 25 f0    	mov    %ax,0xf0253388
f010b707:	66 c7 05 8a 33 25 f0 	movw   $0x8,0xf025338a
f010b70e:	08 00 
f010b710:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b715:	83 e0 e0             	and    $0xffffffe0,%eax
f010b718:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b71d:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b722:	83 e0 1f             	and    $0x1f,%eax
f010b725:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b72a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b72f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b732:	83 c8 0e             	or     $0xe,%eax
f010b735:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b73a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b73f:	83 e0 ef             	and    $0xffffffef,%eax
f010b742:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b747:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b74c:	83 c8 60             	or     $0x60,%eax
f010b74f:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b754:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b759:	83 c8 80             	or     $0xffffff80,%eax
f010b75c:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b761:	b8 84 c3 10 f0       	mov    $0xf010c384,%eax
f010b766:	c1 e8 10             	shr    $0x10,%eax
f010b769:	66 a3 8e 33 25 f0    	mov    %ax,0xf025338e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b76f:	b8 8a c3 10 f0       	mov    $0xf010c38a,%eax
f010b774:	66 a3 90 33 25 f0    	mov    %ax,0xf0253390
f010b77a:	66 c7 05 92 33 25 f0 	movw   $0x8,0xf0253392
f010b781:	08 00 
f010b783:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b788:	83 e0 e0             	and    $0xffffffe0,%eax
f010b78b:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b790:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b795:	83 e0 1f             	and    $0x1f,%eax
f010b798:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b79d:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7a5:	83 c8 0e             	or     $0xe,%eax
f010b7a8:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7ad:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7b2:	83 e0 ef             	and    $0xffffffef,%eax
f010b7b5:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7ba:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7bf:	83 c8 60             	or     $0x60,%eax
f010b7c2:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7c7:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b7cc:	83 c8 80             	or     $0xffffff80,%eax
f010b7cf:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b7d4:	b8 8a c3 10 f0       	mov    $0xf010c38a,%eax
f010b7d9:	c1 e8 10             	shr    $0x10,%eax
f010b7dc:	66 a3 96 33 25 f0    	mov    %ax,0xf0253396
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b7e2:	b8 90 c3 10 f0       	mov    $0xf010c390,%eax
f010b7e7:	66 a3 98 33 25 f0    	mov    %ax,0xf0253398
f010b7ed:	66 c7 05 9a 33 25 f0 	movw   $0x8,0xf025339a
f010b7f4:	08 00 
f010b7f6:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b7fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7fe:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b803:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b808:	83 e0 1f             	and    $0x1f,%eax
f010b80b:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010b810:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b815:	83 e0 f0             	and    $0xfffffff0,%eax
f010b818:	83 c8 0e             	or     $0xe,%eax
f010b81b:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b820:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b825:	83 e0 ef             	and    $0xffffffef,%eax
f010b828:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b82d:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b832:	83 c8 60             	or     $0x60,%eax
f010b835:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b83a:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010b83f:	83 c8 80             	or     $0xffffff80,%eax
f010b842:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010b847:	b8 90 c3 10 f0       	mov    $0xf010c390,%eax
f010b84c:	c1 e8 10             	shr    $0x10,%eax
f010b84f:	66 a3 9e 33 25 f0    	mov    %ax,0xf025339e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b855:	b8 96 c3 10 f0       	mov    $0xf010c396,%eax
f010b85a:	66 a3 a0 33 25 f0    	mov    %ax,0xf02533a0
f010b860:	66 c7 05 a2 33 25 f0 	movw   $0x8,0xf02533a2
f010b867:	08 00 
f010b869:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010b86e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b871:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010b876:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010b87b:	83 e0 1f             	and    $0x1f,%eax
f010b87e:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010b883:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b888:	83 e0 f0             	and    $0xfffffff0,%eax
f010b88b:	83 c8 0e             	or     $0xe,%eax
f010b88e:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b893:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b898:	83 e0 ef             	and    $0xffffffef,%eax
f010b89b:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8a0:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b8a5:	83 c8 60             	or     $0x60,%eax
f010b8a8:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8ad:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010b8b2:	83 c8 80             	or     $0xffffff80,%eax
f010b8b5:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010b8ba:	b8 96 c3 10 f0       	mov    $0xf010c396,%eax
f010b8bf:	c1 e8 10             	shr    $0x10,%eax
f010b8c2:	66 a3 a6 33 25 f0    	mov    %ax,0xf02533a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b8c8:	b8 9c c3 10 f0       	mov    $0xf010c39c,%eax
f010b8cd:	66 a3 a8 33 25 f0    	mov    %ax,0xf02533a8
f010b8d3:	66 c7 05 aa 33 25 f0 	movw   $0x8,0xf02533aa
f010b8da:	08 00 
f010b8dc:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010b8e1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8e4:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010b8e9:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010b8ee:	83 e0 1f             	and    $0x1f,%eax
f010b8f1:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010b8f6:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b8fb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8fe:	83 c8 0e             	or     $0xe,%eax
f010b901:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b906:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b90b:	83 e0 ef             	and    $0xffffffef,%eax
f010b90e:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b913:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b918:	83 c8 60             	or     $0x60,%eax
f010b91b:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b920:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010b925:	83 c8 80             	or     $0xffffff80,%eax
f010b928:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010b92d:	b8 9c c3 10 f0       	mov    $0xf010c39c,%eax
f010b932:	c1 e8 10             	shr    $0x10,%eax
f010b935:	66 a3 ae 33 25 f0    	mov    %ax,0xf02533ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b93b:	b8 a2 c3 10 f0       	mov    $0xf010c3a2,%eax
f010b940:	66 a3 b0 33 25 f0    	mov    %ax,0xf02533b0
f010b946:	66 c7 05 b2 33 25 f0 	movw   $0x8,0xf02533b2
f010b94d:	08 00 
f010b94f:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010b954:	83 e0 e0             	and    $0xffffffe0,%eax
f010b957:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010b95c:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010b961:	83 e0 1f             	and    $0x1f,%eax
f010b964:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010b969:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b96e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b971:	83 c8 0e             	or     $0xe,%eax
f010b974:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b979:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b97e:	83 e0 ef             	and    $0xffffffef,%eax
f010b981:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b986:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b98b:	83 c8 60             	or     $0x60,%eax
f010b98e:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b993:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010b998:	83 c8 80             	or     $0xffffff80,%eax
f010b99b:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010b9a0:	b8 a2 c3 10 f0       	mov    $0xf010c3a2,%eax
f010b9a5:	c1 e8 10             	shr    $0x10,%eax
f010b9a8:	66 a3 b6 33 25 f0    	mov    %ax,0xf02533b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b9ae:	b8 a8 c3 10 f0       	mov    $0xf010c3a8,%eax
f010b9b3:	66 a3 b8 33 25 f0    	mov    %ax,0xf02533b8
f010b9b9:	66 c7 05 ba 33 25 f0 	movw   $0x8,0xf02533ba
f010b9c0:	08 00 
f010b9c2:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010b9c7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9ca:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010b9cf:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010b9d4:	83 e0 1f             	and    $0x1f,%eax
f010b9d7:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010b9dc:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9e1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9e4:	83 c8 0e             	or     $0xe,%eax
f010b9e7:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010b9ec:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9f1:	83 e0 ef             	and    $0xffffffef,%eax
f010b9f4:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010b9f9:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010b9fe:	83 c8 60             	or     $0x60,%eax
f010ba01:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010ba06:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010ba0b:	83 c8 80             	or     $0xffffff80,%eax
f010ba0e:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010ba13:	b8 a8 c3 10 f0       	mov    $0xf010c3a8,%eax
f010ba18:	c1 e8 10             	shr    $0x10,%eax
f010ba1b:	66 a3 be 33 25 f0    	mov    %ax,0xf02533be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010ba21:	b8 ae c3 10 f0       	mov    $0xf010c3ae,%eax
f010ba26:	66 a3 c0 33 25 f0    	mov    %ax,0xf02533c0
f010ba2c:	66 c7 05 c2 33 25 f0 	movw   $0x8,0xf02533c2
f010ba33:	08 00 
f010ba35:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010ba3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba3d:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010ba42:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010ba47:	83 e0 1f             	and    $0x1f,%eax
f010ba4a:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010ba4f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba54:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba57:	83 c8 0e             	or     $0xe,%eax
f010ba5a:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba5f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba64:	83 e0 ef             	and    $0xffffffef,%eax
f010ba67:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba6c:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba71:	83 c8 60             	or     $0x60,%eax
f010ba74:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba79:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010ba7e:	83 c8 80             	or     $0xffffff80,%eax
f010ba81:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010ba86:	b8 ae c3 10 f0       	mov    $0xf010c3ae,%eax
f010ba8b:	c1 e8 10             	shr    $0x10,%eax
f010ba8e:	66 a3 c6 33 25 f0    	mov    %ax,0xf02533c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010ba94:	b8 b4 c3 10 f0       	mov    $0xf010c3b4,%eax
f010ba99:	66 a3 c8 33 25 f0    	mov    %ax,0xf02533c8
f010ba9f:	66 c7 05 ca 33 25 f0 	movw   $0x8,0xf02533ca
f010baa6:	08 00 
f010baa8:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010baad:	83 e0 e0             	and    $0xffffffe0,%eax
f010bab0:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bab5:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010baba:	83 e0 1f             	and    $0x1f,%eax
f010babd:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bac2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bac7:	83 e0 f0             	and    $0xfffffff0,%eax
f010baca:	83 c8 0e             	or     $0xe,%eax
f010bacd:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bad2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bad7:	83 e0 ef             	and    $0xffffffef,%eax
f010bada:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010badf:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bae4:	83 c8 60             	or     $0x60,%eax
f010bae7:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010baec:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010baf1:	83 c8 80             	or     $0xffffff80,%eax
f010baf4:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010baf9:	b8 b4 c3 10 f0       	mov    $0xf010c3b4,%eax
f010bafe:	c1 e8 10             	shr    $0x10,%eax
f010bb01:	66 a3 ce 33 25 f0    	mov    %ax,0xf02533ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bb07:	b8 ba c3 10 f0       	mov    $0xf010c3ba,%eax
f010bb0c:	66 a3 d0 33 25 f0    	mov    %ax,0xf02533d0
f010bb12:	66 c7 05 d2 33 25 f0 	movw   $0x8,0xf02533d2
f010bb19:	08 00 
f010bb1b:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bb20:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb23:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bb28:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bb2d:	83 e0 1f             	and    $0x1f,%eax
f010bb30:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bb35:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb3d:	83 c8 0e             	or     $0xe,%eax
f010bb40:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb45:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb4a:	83 e0 ef             	and    $0xffffffef,%eax
f010bb4d:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb52:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb57:	83 c8 60             	or     $0x60,%eax
f010bb5a:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb5f:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bb64:	83 c8 80             	or     $0xffffff80,%eax
f010bb67:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bb6c:	b8 ba c3 10 f0       	mov    $0xf010c3ba,%eax
f010bb71:	c1 e8 10             	shr    $0x10,%eax
f010bb74:	66 a3 d6 33 25 f0    	mov    %ax,0xf02533d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bb7a:	b8 c0 c3 10 f0       	mov    $0xf010c3c0,%eax
f010bb7f:	66 a3 d8 33 25 f0    	mov    %ax,0xf02533d8
f010bb85:	66 c7 05 da 33 25 f0 	movw   $0x8,0xf02533da
f010bb8c:	08 00 
f010bb8e:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bb93:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb96:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bb9b:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bba0:	83 e0 1f             	and    $0x1f,%eax
f010bba3:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bba8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbad:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbb0:	83 c8 0e             	or     $0xe,%eax
f010bbb3:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbb8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbbd:	83 e0 ef             	and    $0xffffffef,%eax
f010bbc0:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbc5:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbca:	83 c8 60             	or     $0x60,%eax
f010bbcd:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbd2:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bbd7:	83 c8 80             	or     $0xffffff80,%eax
f010bbda:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bbdf:	b8 c0 c3 10 f0       	mov    $0xf010c3c0,%eax
f010bbe4:	c1 e8 10             	shr    $0x10,%eax
f010bbe7:	66 a3 de 33 25 f0    	mov    %ax,0xf02533de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bbed:	c7 05 84 3a 25 f0 00 	movl   $0xefc00000,0xf0253a84
f010bbf4:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bbf7:	66 c7 05 88 3a 25 f0 	movw   $0x10,0xf0253a88
f010bbfe:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bc00:	66 c7 05 88 c9 18 f0 	movw   $0x68,0xf018c988
f010bc07:	68 00 
f010bc09:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc0e:	66 a3 8a c9 18 f0    	mov    %ax,0xf018c98a
f010bc14:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc19:	c1 e8 10             	shr    $0x10,%eax
f010bc1c:	a2 8c c9 18 f0       	mov    %al,0xf018c98c
f010bc21:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc26:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc29:	83 c8 09             	or     $0x9,%eax
f010bc2c:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc31:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc36:	83 c8 10             	or     $0x10,%eax
f010bc39:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc3e:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc43:	83 e0 9f             	and    $0xffffff9f,%eax
f010bc46:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc4b:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bc50:	83 c8 80             	or     $0xffffff80,%eax
f010bc53:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bc58:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc60:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc65:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc6a:	83 e0 ef             	and    $0xffffffef,%eax
f010bc6d:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc72:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc77:	83 e0 df             	and    $0xffffffdf,%eax
f010bc7a:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc7f:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc84:	83 c8 40             	or     $0x40,%eax
f010bc87:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc8c:	a0 8e c9 18 f0       	mov    0xf018c98e,%al
f010bc91:	83 e0 7f             	and    $0x7f,%eax
f010bc94:	a2 8e c9 18 f0       	mov    %al,0xf018c98e
f010bc99:	b8 80 3a 25 f0       	mov    $0xf0253a80,%eax
f010bc9e:	c1 e8 18             	shr    $0x18,%eax
f010bca1:	a2 8f c9 18 f0       	mov    %al,0xf018c98f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010bca6:	a0 8d c9 18 f0       	mov    0xf018c98d,%al
f010bcab:	83 e0 ef             	and    $0xffffffef,%eax
f010bcae:	a2 8d c9 18 f0       	mov    %al,0xf018c98d
f010bcb3:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bcb9:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bcbd:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bcc0:	0f 01 1d 50 ca 18 f0 	lidtl  0xf018ca50
}
f010bcc7:	90                   	nop
f010bcc8:	c9                   	leave  
f010bcc9:	c3                   	ret    

f010bcca <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010bcca:	55                   	push   %ebp
f010bccb:	89 e5                	mov    %esp,%ebp
f010bccd:	53                   	push   %ebx
f010bcce:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010bcd1:	83 ec 08             	sub    $0x8,%esp
f010bcd4:	ff 75 08             	pushl  0x8(%ebp)
f010bcd7:	68 db 27 13 f0       	push   $0xf01327db
f010bcdc:	e8 50 51 ff ff       	call   f0100e31 <cprintf>
f010bce1:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010bce4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bce7:	83 ec 0c             	sub    $0xc,%esp
f010bcea:	50                   	push   %eax
f010bceb:	e8 fd 00 00 00       	call   f010bded <print_regs>
f010bcf0:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010bcf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcf6:	8b 40 20             	mov    0x20(%eax),%eax
f010bcf9:	0f b7 c0             	movzwl %ax,%eax
f010bcfc:	83 ec 08             	sub    $0x8,%esp
f010bcff:	50                   	push   %eax
f010bd00:	68 ed 27 13 f0       	push   $0xf01327ed
f010bd05:	e8 27 51 ff ff       	call   f0100e31 <cprintf>
f010bd0a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010bd0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd10:	8b 40 24             	mov    0x24(%eax),%eax
f010bd13:	0f b7 c0             	movzwl %ax,%eax
f010bd16:	83 ec 08             	sub    $0x8,%esp
f010bd19:	50                   	push   %eax
f010bd1a:	68 00 28 13 f0       	push   $0xf0132800
f010bd1f:	e8 0d 51 ff ff       	call   f0100e31 <cprintf>
f010bd24:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010bd27:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd2a:	8b 58 28             	mov    0x28(%eax),%ebx
f010bd2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd30:	8b 40 28             	mov    0x28(%eax),%eax
f010bd33:	83 ec 0c             	sub    $0xc,%esp
f010bd36:	50                   	push   %eax
f010bd37:	e8 d0 ee ff ff       	call   f010ac0c <trapname>
f010bd3c:	83 c4 10             	add    $0x10,%esp
f010bd3f:	89 c2                	mov    %eax,%edx
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	8b 40 28             	mov    0x28(%eax),%eax
f010bd47:	53                   	push   %ebx
f010bd48:	52                   	push   %edx
f010bd49:	50                   	push   %eax
f010bd4a:	68 13 28 13 f0       	push   $0xf0132813
f010bd4f:	e8 dd 50 ff ff       	call   f0100e31 <cprintf>
f010bd54:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010bd57:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd5a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bd5d:	83 ec 08             	sub    $0x8,%esp
f010bd60:	50                   	push   %eax
f010bd61:	68 2a 28 13 f0       	push   $0xf013282a
f010bd66:	e8 c6 50 ff ff       	call   f0100e31 <cprintf>
f010bd6b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010bd6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd71:	8b 40 30             	mov    0x30(%eax),%eax
f010bd74:	83 ec 08             	sub    $0x8,%esp
f010bd77:	50                   	push   %eax
f010bd78:	68 39 28 13 f0       	push   $0xf0132839
f010bd7d:	e8 af 50 ff ff       	call   f0100e31 <cprintf>
f010bd82:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010bd85:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd88:	8b 40 34             	mov    0x34(%eax),%eax
f010bd8b:	0f b7 c0             	movzwl %ax,%eax
f010bd8e:	83 ec 08             	sub    $0x8,%esp
f010bd91:	50                   	push   %eax
f010bd92:	68 48 28 13 f0       	push   $0xf0132848
f010bd97:	e8 95 50 ff ff       	call   f0100e31 <cprintf>
f010bd9c:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010bd9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bda2:	8b 40 38             	mov    0x38(%eax),%eax
f010bda5:	83 ec 08             	sub    $0x8,%esp
f010bda8:	50                   	push   %eax
f010bda9:	68 5b 28 13 f0       	push   $0xf013285b
f010bdae:	e8 7e 50 ff ff       	call   f0100e31 <cprintf>
f010bdb3:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010bdb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdb9:	8b 40 3c             	mov    0x3c(%eax),%eax
f010bdbc:	83 ec 08             	sub    $0x8,%esp
f010bdbf:	50                   	push   %eax
f010bdc0:	68 6a 28 13 f0       	push   $0xf013286a
f010bdc5:	e8 67 50 ff ff       	call   f0100e31 <cprintf>
f010bdca:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010bdcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdd0:	8b 40 40             	mov    0x40(%eax),%eax
f010bdd3:	0f b7 c0             	movzwl %ax,%eax
f010bdd6:	83 ec 08             	sub    $0x8,%esp
f010bdd9:	50                   	push   %eax
f010bdda:	68 79 28 13 f0       	push   $0xf0132879
f010bddf:	e8 4d 50 ff ff       	call   f0100e31 <cprintf>
f010bde4:	83 c4 10             	add    $0x10,%esp
}
f010bde7:	90                   	nop
f010bde8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bdeb:	c9                   	leave  
f010bdec:	c3                   	ret    

f010bded <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010bded:	55                   	push   %ebp
f010bdee:	89 e5                	mov    %esp,%ebp
f010bdf0:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010bdf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	83 ec 08             	sub    $0x8,%esp
f010bdfb:	50                   	push   %eax
f010bdfc:	68 8c 28 13 f0       	push   $0xf013288c
f010be01:	e8 2b 50 ff ff       	call   f0100e31 <cprintf>
f010be06:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010be09:	8b 45 08             	mov    0x8(%ebp),%eax
f010be0c:	8b 40 04             	mov    0x4(%eax),%eax
f010be0f:	83 ec 08             	sub    $0x8,%esp
f010be12:	50                   	push   %eax
f010be13:	68 9b 28 13 f0       	push   $0xf013289b
f010be18:	e8 14 50 ff ff       	call   f0100e31 <cprintf>
f010be1d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010be20:	8b 45 08             	mov    0x8(%ebp),%eax
f010be23:	8b 40 08             	mov    0x8(%eax),%eax
f010be26:	83 ec 08             	sub    $0x8,%esp
f010be29:	50                   	push   %eax
f010be2a:	68 aa 28 13 f0       	push   $0xf01328aa
f010be2f:	e8 fd 4f ff ff       	call   f0100e31 <cprintf>
f010be34:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010be37:	8b 45 08             	mov    0x8(%ebp),%eax
f010be3a:	8b 40 0c             	mov    0xc(%eax),%eax
f010be3d:	83 ec 08             	sub    $0x8,%esp
f010be40:	50                   	push   %eax
f010be41:	68 b9 28 13 f0       	push   $0xf01328b9
f010be46:	e8 e6 4f ff ff       	call   f0100e31 <cprintf>
f010be4b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010be4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010be51:	8b 40 10             	mov    0x10(%eax),%eax
f010be54:	83 ec 08             	sub    $0x8,%esp
f010be57:	50                   	push   %eax
f010be58:	68 c8 28 13 f0       	push   $0xf01328c8
f010be5d:	e8 cf 4f ff ff       	call   f0100e31 <cprintf>
f010be62:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010be65:	8b 45 08             	mov    0x8(%ebp),%eax
f010be68:	8b 40 14             	mov    0x14(%eax),%eax
f010be6b:	83 ec 08             	sub    $0x8,%esp
f010be6e:	50                   	push   %eax
f010be6f:	68 d7 28 13 f0       	push   $0xf01328d7
f010be74:	e8 b8 4f ff ff       	call   f0100e31 <cprintf>
f010be79:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010be7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010be7f:	8b 40 18             	mov    0x18(%eax),%eax
f010be82:	83 ec 08             	sub    $0x8,%esp
f010be85:	50                   	push   %eax
f010be86:	68 e6 28 13 f0       	push   $0xf01328e6
f010be8b:	e8 a1 4f ff ff       	call   f0100e31 <cprintf>
f010be90:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010be93:	8b 45 08             	mov    0x8(%ebp),%eax
f010be96:	8b 40 1c             	mov    0x1c(%eax),%eax
f010be99:	83 ec 08             	sub    $0x8,%esp
f010be9c:	50                   	push   %eax
f010be9d:	68 f5 28 13 f0       	push   $0xf01328f5
f010bea2:	e8 8a 4f ff ff       	call   f0100e31 <cprintf>
f010bea7:	83 c4 10             	add    $0x10,%esp
}
f010beaa:	90                   	nop
f010beab:	c9                   	leave  
f010beac:	c3                   	ret    

f010bead <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010bead:	55                   	push   %ebp
f010beae:	89 e5                	mov    %esp,%ebp
f010beb0:	57                   	push   %edi
f010beb1:	56                   	push   %esi
f010beb2:	53                   	push   %ebx
f010beb3:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010beb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010beb9:	8b 40 28             	mov    0x28(%eax),%eax
f010bebc:	83 f8 0e             	cmp    $0xe,%eax
f010bebf:	75 29                	jne    f010beea <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010bec1:	83 ec 0c             	sub    $0xc,%esp
f010bec4:	6a 01                	push   $0x1
f010bec6:	e8 05 15 00 00       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f010becb:	83 c4 10             	add    $0x10,%esp
f010bece:	85 c0                	test   %eax,%eax
f010bed0:	74 05                	je     f010bed7 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010bed2:	e8 62 a1 ff ff       	call   f0106039 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010bed7:	83 ec 0c             	sub    $0xc,%esp
f010beda:	ff 75 08             	pushl  0x8(%ebp)
f010bedd:	e8 51 02 00 00       	call   f010c133 <fault_handler>
f010bee2:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bee5:	e9 bb 00 00 00       	jmp    f010bfa5 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010beea:	8b 45 08             	mov    0x8(%ebp),%eax
f010beed:	8b 40 28             	mov    0x28(%eax),%eax
f010bef0:	83 f8 30             	cmp    $0x30,%eax
f010bef3:	75 42                	jne    f010bf37 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010bef5:	8b 45 08             	mov    0x8(%ebp),%eax
f010bef8:	8b 78 04             	mov    0x4(%eax),%edi
f010befb:	8b 45 08             	mov    0x8(%ebp),%eax
f010befe:	8b 30                	mov    (%eax),%esi
f010bf00:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf03:	8b 58 10             	mov    0x10(%eax),%ebx
f010bf06:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf09:	8b 48 18             	mov    0x18(%eax),%ecx
f010bf0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf0f:	8b 50 14             	mov    0x14(%eax),%edx
f010bf12:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf15:	8b 40 1c             	mov    0x1c(%eax),%eax
f010bf18:	83 ec 08             	sub    $0x8,%esp
f010bf1b:	57                   	push   %edi
f010bf1c:	56                   	push   %esi
f010bf1d:	53                   	push   %ebx
f010bf1e:	51                   	push   %ecx
f010bf1f:	52                   	push   %edx
f010bf20:	50                   	push   %eax
f010bf21:	e8 a8 0b 00 00       	call   f010cace <syscall>
f010bf26:	83 c4 20             	add    $0x20,%esp
f010bf29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010bf2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf2f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bf32:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bf35:	eb 6e                	jmp    f010bfa5 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 40 28             	mov    0x28(%eax),%eax
f010bf3d:	83 f8 08             	cmp    $0x8,%eax
f010bf40:	75 17                	jne    f010bf59 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010bf42:	83 ec 04             	sub    $0x4,%esp
f010bf45:	68 04 29 13 f0       	push   $0xf0132904
f010bf4a:	68 e7 00 00 00       	push   $0xe7
f010bf4f:	68 13 29 13 f0       	push   $0xf0132913
f010bf54:	e8 57 42 ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010bf59:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf5c:	8b 40 28             	mov    0x28(%eax),%eax
f010bf5f:	83 f8 20             	cmp    $0x20,%eax
f010bf62:	75 07                	jne    f010bf6b <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010bf64:	e8 93 a0 ff ff       	call   f0105ffc <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010bf69:	eb 3a                	jmp    f010bfa5 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010bf6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf6e:	8b 40 34             	mov    0x34(%eax),%eax
f010bf71:	66 83 f8 08          	cmp    $0x8,%ax
f010bf75:	75 17                	jne    f010bf8e <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bf77:	83 ec 04             	sub    $0x4,%esp
f010bf7a:	68 24 29 13 f0       	push   $0xf0132924
f010bf7f:	68 f4 00 00 00       	push   $0xf4
f010bf84:	68 13 29 13 f0       	push   $0xf0132913
f010bf89:	e8 22 42 ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010bf8e:	83 ec 04             	sub    $0x4,%esp
f010bf91:	68 40 29 13 f0       	push   $0xf0132940
f010bf96:	68 f8 00 00 00       	push   $0xf8
f010bf9b:	68 13 29 13 f0       	push   $0xf0132913
f010bfa0:	e8 0b 42 ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010bfa5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bfa8:	5b                   	pop    %ebx
f010bfa9:	5e                   	pop    %esi
f010bfaa:	5f                   	pop    %edi
f010bfab:	5d                   	pop    %ebp
f010bfac:	c3                   	ret    

f010bfad <trap>:

void trap(struct Trapframe *tf)
{
f010bfad:	55                   	push   %ebp
f010bfae:	89 e5                	mov    %esp,%ebp
f010bfb0:	57                   	push   %edi
f010bfb1:	56                   	push   %esi
f010bfb2:	53                   	push   %ebx
f010bfb3:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010bfb6:	e8 45 87 ff ff       	call   f0104700 <kclock_stop>

	int userTrap = 0;
f010bfbb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bfc2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfc5:	8b 40 34             	mov    0x34(%eax),%eax
f010bfc8:	0f b7 c0             	movzwl %ax,%eax
f010bfcb:	83 e0 03             	and    $0x3,%eax
f010bfce:	83 f8 03             	cmp    $0x3,%eax
f010bfd1:	75 49                	jne    f010c01c <trap+0x6f>
		assert(curenv);
f010bfd3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010bfd8:	85 c0                	test   %eax,%eax
f010bfda:	75 19                	jne    f010bff5 <trap+0x48>
f010bfdc:	68 5f 29 13 f0       	push   $0xf013295f
f010bfe1:	68 66 29 13 f0       	push   $0xf0132966
f010bfe6:	68 06 01 00 00       	push   $0x106
f010bfeb:	68 13 29 13 f0       	push   $0xf0132913
f010bff0:	e8 bb 41 ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010bff5:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010bffb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bffe:	89 c3                	mov    %eax,%ebx
f010c000:	b8 11 00 00 00       	mov    $0x11,%eax
f010c005:	89 d7                	mov    %edx,%edi
f010c007:	89 de                	mov    %ebx,%esi
f010c009:	89 c1                	mov    %eax,%ecx
f010c00b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c00d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c012:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c015:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c01c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c01f:	8b 40 28             	mov    0x28(%eax),%eax
f010c022:	83 f8 20             	cmp    $0x20,%eax
f010c025:	75 40                	jne    f010c067 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c027:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c02b:	0f 84 a6 00 00 00    	je     f010c0d7 <trap+0x12a>
		{
			assert(curenv);
f010c031:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c036:	85 c0                	test   %eax,%eax
f010c038:	75 19                	jne    f010c053 <trap+0xa6>
f010c03a:	68 5f 29 13 f0       	push   $0xf013295f
f010c03f:	68 66 29 13 f0       	push   $0xf0132966
f010c044:	68 12 01 00 00       	push   $0x112
f010c049:	68 13 29 13 f0       	push   $0xf0132913
f010c04e:	e8 5d 41 ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c053:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c058:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c05e:	42                   	inc    %edx
f010c05f:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c065:	eb 70                	jmp    f010c0d7 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c067:	8b 45 08             	mov    0x8(%ebp),%eax
f010c06a:	8b 40 28             	mov    0x28(%eax),%eax
f010c06d:	83 f8 0e             	cmp    $0xe,%eax
f010c070:	75 65                	jne    f010c0d7 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c072:	a0 e8 3a 25 f0       	mov    0xf0253ae8,%al
f010c077:	84 c0                	test   %al,%al
f010c079:	74 5c                	je     f010c0d7 <trap+0x12a>
			if (userTrap){
f010c07b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c07f:	74 2c                	je     f010c0ad <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c081:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c086:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c08c:	8b 52 30             	mov    0x30(%edx),%edx
f010c08f:	89 d1                	mov    %edx,%ecx
f010c091:	8a 15 e8 3a 25 f0    	mov    0xf0253ae8,%dl
f010c097:	0f b6 d2             	movzbl %dl,%edx
f010c09a:	01 ca                	add    %ecx,%edx
f010c09c:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c09f:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0a4:	83 ec 0c             	sub    $0xc,%esp
f010c0a7:	50                   	push   %eax
f010c0a8:	e8 d3 d4 ff ff       	call   f0109580 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b0:	8b 40 30             	mov    0x30(%eax),%eax
f010c0b3:	89 c2                	mov    %eax,%edx
f010c0b5:	a0 e8 3a 25 f0       	mov    0xf0253ae8,%al
f010c0ba:	0f b6 c0             	movzbl %al,%eax
f010c0bd:	01 d0                	add    %edx,%eax
f010c0bf:	89 c2                	mov    %eax,%edx
f010c0c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c4:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c0c7:	e8 5f 86 ff ff       	call   f010472b <kclock_resume>
				env_pop_tf(tf);
f010c0cc:	83 ec 0c             	sub    $0xc,%esp
f010c0cf:	ff 75 08             	pushl  0x8(%ebp)
f010c0d2:	e8 fb d5 ff ff       	call   f01096d2 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c0d7:	83 ec 0c             	sub    $0xc,%esp
f010c0da:	ff 75 08             	pushl  0x8(%ebp)
f010c0dd:	e8 cb fd ff ff       	call   f010bead <trap_dispatch>
f010c0e2:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c0e5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c0e9:	74 3d                	je     f010c128 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c0eb:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0f0:	85 c0                	test   %eax,%eax
f010c0f2:	74 0d                	je     f010c101 <trap+0x154>
f010c0f4:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c0f9:	8b 40 54             	mov    0x54(%eax),%eax
f010c0fc:	83 f8 02             	cmp    $0x2,%eax
f010c0ff:	74 19                	je     f010c11a <trap+0x16d>
f010c101:	68 7c 29 13 f0       	push   $0xf013297c
f010c106:	68 66 29 13 f0       	push   $0xf0132966
f010c10b:	68 27 01 00 00       	push   $0x127
f010c110:	68 13 29 13 f0       	push   $0xf0132913
f010c115:	e8 96 40 ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c11a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c11f:	83 ec 0c             	sub    $0xc,%esp
f010c122:	50                   	push   %eax
f010c123:	e8 58 d4 ff ff       	call   f0109580 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c128:	83 ec 0c             	sub    $0xc,%esp
f010c12b:	ff 75 08             	pushl  0x8(%ebp)
f010c12e:	e8 9f d5 ff ff       	call   f01096d2 <env_pop_tf>

f010c133 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c133:	55                   	push   %ebp
f010c134:	89 e5                	mov    %esp,%ebp
f010c136:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c139:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c140:	8b 45 08             	mov    0x8(%ebp),%eax
f010c143:	8b 40 34             	mov    0x34(%eax),%eax
f010c146:	0f b7 c0             	movzwl %ax,%eax
f010c149:	83 e0 03             	and    $0x3,%eax
f010c14c:	83 f8 03             	cmp    $0x3,%eax
f010c14f:	75 07                	jne    f010c158 <fault_handler+0x25>
		userTrap = 1;
f010c151:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c158:	0f 20 d0             	mov    %cr2,%eax
f010c15b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c15e:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c161:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c164:	a1 60 3a 25 f0       	mov    0xf0253a60,%eax
f010c169:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c16c:	75 2b                	jne    f010c199 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c16e:	a0 64 3a 25 f0       	mov    0xf0253a64,%al
f010c173:	40                   	inc    %eax
f010c174:	a2 64 3a 25 f0       	mov    %al,0xf0253a64
		if (num_repeated_fault == 3)
f010c179:	a0 64 3a 25 f0       	mov    0xf0253a64,%al
f010c17e:	3c 03                	cmp    $0x3,%al
f010c180:	75 1e                	jne    f010c1a0 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c182:	ff 75 ec             	pushl  -0x14(%ebp)
f010c185:	68 ac 29 13 f0       	push   $0xf01329ac
f010c18a:	68 4a 01 00 00       	push   $0x14a
f010c18f:	68 13 29 13 f0       	push   $0xf0132913
f010c194:	e8 17 40 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c199:	c6 05 64 3a 25 f0 00 	movb   $0x0,0xf0253a64
	}
	last_fault_va = fault_va ;
f010c1a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c1a3:	a3 60 3a 25 f0       	mov    %eax,0xf0253a60
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c1a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c1ac:	75 29                	jne    f010c1d7 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c1ae:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c1b5:	77 40                	ja     f010c1f7 <fault_handler+0xc4>
f010c1b7:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c1be:	76 37                	jbe    f010c1f7 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c1c0:	83 ec 04             	sub    $0x4,%esp
f010c1c3:	68 f8 29 13 f0       	push   $0xf01329f8
f010c1c8:	68 56 01 00 00       	push   $0x156
f010c1cd:	68 13 29 13 f0       	push   $0xf0132913
f010c1d2:	e8 d9 3f ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c1d7:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c1de:	76 17                	jbe    f010c1f7 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c1e0:	83 ec 04             	sub    $0x4,%esp
f010c1e3:	68 1c 2a 13 f0       	push   $0xf0132a1c
f010c1e8:	68 5c 01 00 00       	push   $0x15c
f010c1ed:	68 13 29 13 f0       	push   $0xf0132913
f010c1f2:	e8 b9 3f ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c1f7:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c1fc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c1ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c202:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c208:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c20b:	c1 ea 16             	shr    $0x16,%edx
f010c20e:	c1 e2 02             	shl    $0x2,%edx
f010c211:	01 d0                	add    %edx,%eax
f010c213:	8b 00                	mov    (%eax),%eax
f010c215:	83 e0 01             	and    $0x1,%eax
f010c218:	85 c0                	test   %eax,%eax
f010c21a:	75 28                	jne    f010c244 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c21c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c21f:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c225:	8d 50 01             	lea    0x1(%eax),%edx
f010c228:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c22b:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c231:	83 ec 08             	sub    $0x8,%esp
f010c234:	ff 75 ec             	pushl  -0x14(%ebp)
f010c237:	ff 75 e8             	pushl  -0x18(%ebp)
f010c23a:	e8 76 12 00 00       	call   f010d4b5 <table_fault_handler>
f010c23f:	83 c4 10             	add    $0x10,%esp
f010c242:	eb 7e                	jmp    f010c2c2 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c244:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c247:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 ec             	pushl  -0x14(%ebp)
f010c253:	50                   	push   %eax
f010c254:	e8 be ba ff ff       	call   f0107d17 <pt_get_page_permissions>
f010c259:	83 c4 10             	add    $0x10,%esp
f010c25c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c25f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c262:	83 e0 01             	and    $0x1,%eax
f010c265:	85 c0                	test   %eax,%eax
f010c267:	74 17                	je     f010c280 <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c269:	ff 75 ec             	pushl  -0x14(%ebp)
f010c26c:	68 40 2a 13 f0       	push   $0xf0132a40
f010c271:	68 7b 01 00 00       	push   $0x17b
f010c276:	68 13 29 13 f0       	push   $0xf0132913
f010c27b:	e8 30 3f ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c280:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c283:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c289:	8d 50 01             	lea    0x1(%eax),%edx
f010c28c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c28f:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c295:	e8 f9 11 00 00       	call   f010d493 <isBufferingEnabled>
f010c29a:	84 c0                	test   %al,%al
f010c29c:	74 13                	je     f010c2b1 <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c29e:	83 ec 08             	sub    $0x8,%esp
f010c2a1:	ff 75 ec             	pushl  -0x14(%ebp)
f010c2a4:	ff 75 e8             	pushl  -0x18(%ebp)
f010c2a7:	e8 ac 12 00 00       	call   f010d558 <__page_fault_handler_with_buffering>
f010c2ac:	83 c4 10             	add    $0x10,%esp
f010c2af:	eb 11                	jmp    f010c2c2 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c2b1:	83 ec 08             	sub    $0x8,%esp
f010c2b4:	ff 75 ec             	pushl  -0x14(%ebp)
f010c2b7:	ff 75 e8             	pushl  -0x18(%ebp)
f010c2ba:	e8 1b 12 00 00       	call   f010d4da <page_fault_handler>
f010c2bf:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c2c2:	0f 20 d8             	mov    %cr3,%eax
f010c2c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c2c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2cb:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c2ce:	90                   	nop
f010c2cf:	c9                   	leave  
f010c2d0:	c3                   	ret    
f010c2d1:	90                   	nop

f010c2d2 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c2d2:	6a 0e                	push   $0xe
f010c2d4:	e9 ed 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2d9:	90                   	nop

f010c2da <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c2da:	6a 00                	push   $0x0
f010c2dc:	6a 30                	push   $0x30
f010c2de:	e9 e3 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2e3:	90                   	nop

f010c2e4 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c2e4:	6a 08                	push   $0x8
f010c2e6:	e9 db 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2eb:	90                   	nop

f010c2ec <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c2ec:	6a 00                	push   $0x0
f010c2ee:	6a 00                	push   $0x0
f010c2f0:	e9 d1 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2f5:	90                   	nop

f010c2f6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c2f6:	6a 00                	push   $0x0
f010c2f8:	6a 01                	push   $0x1
f010c2fa:	e9 c7 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c2ff:	90                   	nop

f010c300 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c300:	6a 00                	push   $0x0
f010c302:	6a 02                	push   $0x2
f010c304:	e9 bd 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c309:	90                   	nop

f010c30a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c30a:	6a 00                	push   $0x0
f010c30c:	6a 03                	push   $0x3
f010c30e:	e9 b3 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c313:	90                   	nop

f010c314 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c314:	6a 00                	push   $0x0
f010c316:	6a 04                	push   $0x4
f010c318:	e9 a9 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c31d:	90                   	nop

f010c31e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c31e:	6a 00                	push   $0x0
f010c320:	6a 05                	push   $0x5
f010c322:	e9 9f 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c327:	90                   	nop

f010c328 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c328:	6a 00                	push   $0x0
f010c32a:	6a 06                	push   $0x6
f010c32c:	e9 95 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c331:	90                   	nop

f010c332 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c332:	6a 00                	push   $0x0
f010c334:	6a 07                	push   $0x7
f010c336:	e9 8b 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c33b:	90                   	nop

f010c33c <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c33c:	6a 0a                	push   $0xa
f010c33e:	e9 83 00 00 00       	jmp    f010c3c6 <_alltraps>
f010c343:	90                   	nop

f010c344 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c344:	6a 0b                	push   $0xb
f010c346:	eb 7e                	jmp    f010c3c6 <_alltraps>

f010c348 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c348:	6a 0c                	push   $0xc
f010c34a:	eb 7a                	jmp    f010c3c6 <_alltraps>

f010c34c <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c34c:	6a 0d                	push   $0xd
f010c34e:	eb 76                	jmp    f010c3c6 <_alltraps>

f010c350 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c350:	6a 00                	push   $0x0
f010c352:	6a 10                	push   $0x10
f010c354:	eb 70                	jmp    f010c3c6 <_alltraps>

f010c356 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c356:	6a 11                	push   $0x11
f010c358:	eb 6c                	jmp    f010c3c6 <_alltraps>

f010c35a <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c35a:	6a 00                	push   $0x0
f010c35c:	6a 12                	push   $0x12
f010c35e:	eb 66                	jmp    f010c3c6 <_alltraps>

f010c360 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c360:	6a 00                	push   $0x0
f010c362:	6a 13                	push   $0x13
f010c364:	eb 60                	jmp    f010c3c6 <_alltraps>

f010c366 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c366:	6a 00                	push   $0x0
f010c368:	6a 20                	push   $0x20
f010c36a:	eb 5a                	jmp    f010c3c6 <_alltraps>

f010c36c <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c36c:	6a 00                	push   $0x0
f010c36e:	6a 21                	push   $0x21
f010c370:	eb 54                	jmp    f010c3c6 <_alltraps>

f010c372 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c372:	6a 00                	push   $0x0
f010c374:	6a 22                	push   $0x22
f010c376:	eb 4e                	jmp    f010c3c6 <_alltraps>

f010c378 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c378:	6a 00                	push   $0x0
f010c37a:	6a 23                	push   $0x23
f010c37c:	eb 48                	jmp    f010c3c6 <_alltraps>

f010c37e <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c37e:	6a 00                	push   $0x0
f010c380:	6a 24                	push   $0x24
f010c382:	eb 42                	jmp    f010c3c6 <_alltraps>

f010c384 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c384:	6a 00                	push   $0x0
f010c386:	6a 25                	push   $0x25
f010c388:	eb 3c                	jmp    f010c3c6 <_alltraps>

f010c38a <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c38a:	6a 00                	push   $0x0
f010c38c:	6a 26                	push   $0x26
f010c38e:	eb 36                	jmp    f010c3c6 <_alltraps>

f010c390 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c390:	6a 00                	push   $0x0
f010c392:	6a 27                	push   $0x27
f010c394:	eb 30                	jmp    f010c3c6 <_alltraps>

f010c396 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c396:	6a 00                	push   $0x0
f010c398:	6a 28                	push   $0x28
f010c39a:	eb 2a                	jmp    f010c3c6 <_alltraps>

f010c39c <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c39c:	6a 00                	push   $0x0
f010c39e:	6a 29                	push   $0x29
f010c3a0:	eb 24                	jmp    f010c3c6 <_alltraps>

f010c3a2 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c3a2:	6a 00                	push   $0x0
f010c3a4:	6a 2a                	push   $0x2a
f010c3a6:	eb 1e                	jmp    f010c3c6 <_alltraps>

f010c3a8 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c3a8:	6a 00                	push   $0x0
f010c3aa:	6a 2b                	push   $0x2b
f010c3ac:	eb 18                	jmp    f010c3c6 <_alltraps>

f010c3ae <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c3ae:	6a 00                	push   $0x0
f010c3b0:	6a 2c                	push   $0x2c
f010c3b2:	eb 12                	jmp    f010c3c6 <_alltraps>

f010c3b4 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c3b4:	6a 00                	push   $0x0
f010c3b6:	6a 2d                	push   $0x2d
f010c3b8:	eb 0c                	jmp    f010c3c6 <_alltraps>

f010c3ba <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c3ba:	6a 00                	push   $0x0
f010c3bc:	6a 2e                	push   $0x2e
f010c3be:	eb 06                	jmp    f010c3c6 <_alltraps>

f010c3c0 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c3c0:	6a 00                	push   $0x0
f010c3c2:	6a 2f                	push   $0x2f
f010c3c4:	eb 00                	jmp    f010c3c6 <_alltraps>

f010c3c6 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c3c6:	1e                   	push   %ds
push %es
f010c3c7:	06                   	push   %es
pushal
f010c3c8:	60                   	pusha  

mov $(GD_KD), %ax
f010c3c9:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c3cd:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c3cf:	8e c0                	mov    %eax,%es

push %esp
f010c3d1:	54                   	push   %esp

call trap
f010c3d2:	e8 d6 fb ff ff       	call   f010bfad <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c3d7:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c3d8:	61                   	popa   
pop %es
f010c3d9:	07                   	pop    %es
pop %ds
f010c3da:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c3db:	83 c4 08             	add    $0x8,%esp

iret
f010c3de:	cf                   	iret   

f010c3df <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c3df:	55                   	push   %ebp
f010c3e0:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e5:	8b 15 d0 be 2b f0    	mov    0xf02bbed0,%edx
f010c3eb:	29 d0                	sub    %edx,%eax
f010c3ed:	c1 f8 02             	sar    $0x2,%eax
f010c3f0:	89 c2                	mov    %eax,%edx
f010c3f2:	89 d0                	mov    %edx,%eax
f010c3f4:	c1 e0 03             	shl    $0x3,%eax
f010c3f7:	01 d0                	add    %edx,%eax
f010c3f9:	c1 e0 03             	shl    $0x3,%eax
f010c3fc:	01 d0                	add    %edx,%eax
f010c3fe:	c1 e0 03             	shl    $0x3,%eax
f010c401:	01 d0                	add    %edx,%eax
f010c403:	c1 e0 03             	shl    $0x3,%eax
f010c406:	01 d0                	add    %edx,%eax
f010c408:	89 c1                	mov    %eax,%ecx
f010c40a:	c1 e1 0f             	shl    $0xf,%ecx
f010c40d:	01 c8                	add    %ecx,%eax
f010c40f:	c1 e0 03             	shl    $0x3,%eax
f010c412:	01 d0                	add    %edx,%eax
f010c414:	f7 d8                	neg    %eax
}
f010c416:	5d                   	pop    %ebp
f010c417:	c3                   	ret    

f010c418 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c418:	55                   	push   %ebp
f010c419:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c41b:	ff 75 08             	pushl  0x8(%ebp)
f010c41e:	e8 bc ff ff ff       	call   f010c3df <to_frame_number>
f010c423:	83 c4 04             	add    $0x4,%esp
f010c426:	c1 e0 0c             	shl    $0xc,%eax
}
f010c429:	c9                   	leave  
f010c42a:	c3                   	ret    

f010c42b <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c42b:	55                   	push   %ebp
f010c42c:	89 e5                	mov    %esp,%ebp
f010c42e:	83 ec 18             	sub    $0x18,%esp
f010c431:	8b 45 10             	mov    0x10(%ebp),%eax
f010c434:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c437:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c43b:	74 23                	je     f010c460 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c43d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c442:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c445:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c44b:	83 c2 5c             	add    $0x5c,%edx
f010c44e:	83 ec 04             	sub    $0x4,%esp
f010c451:	50                   	push   %eax
f010c452:	52                   	push   %edx
f010c453:	68 30 2c 13 f0       	push   $0xf0132c30
f010c458:	e8 d4 49 ff ff       	call   f0100e31 <cprintf>
f010c45d:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c460:	83 ec 04             	sub    $0x4,%esp
f010c463:	ff 75 08             	pushl  0x8(%ebp)
f010c466:	ff 75 0c             	pushl  0xc(%ebp)
f010c469:	68 39 2c 13 f0       	push   $0xf0132c39
f010c46e:	e8 be 49 ff ff       	call   f0100e31 <cprintf>
f010c473:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c476:	90                   	nop
f010c477:	c9                   	leave  
f010c478:	c3                   	ret    

f010c479 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c479:	55                   	push   %ebp
f010c47a:	89 e5                	mov    %esp,%ebp
f010c47c:	83 ec 18             	sub    $0x18,%esp
f010c47f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c482:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c485:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c489:	83 ec 08             	sub    $0x8,%esp
f010c48c:	50                   	push   %eax
f010c48d:	68 3e 2c 13 f0       	push   $0xf0132c3e
f010c492:	e8 9a 49 ff ff       	call   f0100e31 <cprintf>
f010c497:	83 c4 10             	add    $0x10,%esp
}
f010c49a:	90                   	nop
f010c49b:	c9                   	leave  
f010c49c:	c3                   	ret    

f010c49d <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c49d:	55                   	push   %ebp
f010c49e:	89 e5                	mov    %esp,%ebp
f010c4a0:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c4a3:	e8 bf 47 ff ff       	call   f0100c67 <cons_getc2>
f010c4a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c4ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c4ae:	c9                   	leave  
f010c4af:	c3                   	ret    

f010c4b0 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c4b0:	55                   	push   %ebp
f010c4b1:	89 e5                	mov    %esp,%ebp
f010c4b3:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c4b6:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c4bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c4be:	83 ec 0c             	sub    $0xc,%esp
f010c4c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c4c4:	50                   	push   %eax
f010c4c5:	e8 8f aa ff ff       	call   f0106f59 <allocate_frame>
f010c4ca:	83 c4 10             	add    $0x10,%esp
f010c4cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c4d0:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c4d4:	75 08                	jne    f010c4de <__sys_allocate_page+0x2e>
		return r ;
f010c4d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c4d9:	e9 d3 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c4de:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4e1:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c4e6:	77 0c                	ja     f010c4f4 <__sys_allocate_page+0x44>
f010c4e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4eb:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c4f0:	85 c0                	test   %eax,%eax
f010c4f2:	74 0a                	je     f010c4fe <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c4f4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c4f9:	e9 b3 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c4fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c501:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c506:	83 f8 04             	cmp    $0x4,%eax
f010c509:	74 0a                	je     f010c515 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c50b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c510:	e9 9c 00 00 00       	jmp    f010c5b1 <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c515:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c518:	83 ec 0c             	sub    $0xc,%esp
f010c51b:	50                   	push   %eax
f010c51c:	e8 f7 fe ff ff       	call   f010c418 <to_physical_address>
f010c521:	83 c4 10             	add    $0x10,%esp
f010c524:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c527:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c52a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c52d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c530:	c1 e8 0c             	shr    $0xc,%eax
f010c533:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c536:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f010c53b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c53e:	72 17                	jb     f010c557 <__sys_allocate_page+0xa7>
f010c540:	ff 75 e8             	pushl  -0x18(%ebp)
f010c543:	68 44 2c 13 f0       	push   $0xf0132c44
f010c548:	68 8d 00 00 00       	push   $0x8d
f010c54d:	68 73 2c 13 f0       	push   $0xf0132c73
f010c552:	e8 59 3c ff ff       	call   f01001b0 <_panic>
f010c557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c55a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c55f:	83 ec 04             	sub    $0x4,%esp
f010c562:	68 00 10 00 00       	push   $0x1000
f010c567:	6a 00                	push   $0x0
f010c569:	50                   	push   %eax
f010c56a:	e8 0d 27 02 00       	call   f012ec7c <memset>
f010c56f:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c572:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c575:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c578:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c57b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c581:	ff 75 0c             	pushl  0xc(%ebp)
f010c584:	51                   	push   %ecx
f010c585:	52                   	push   %edx
f010c586:	50                   	push   %eax
f010c587:	e8 68 ad ff ff       	call   f01072f4 <map_frame>
f010c58c:	83 c4 10             	add    $0x10,%esp
f010c58f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c592:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c596:	75 14                	jne    f010c5ac <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c598:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c59b:	83 ec 0c             	sub    $0xc,%esp
f010c59e:	50                   	push   %eax
f010c59f:	e8 47 ab ff ff       	call   f01070eb <decrement_references>
f010c5a4:	83 c4 10             	add    $0x10,%esp
		return r;
f010c5a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c5aa:	eb 05                	jmp    f010c5b1 <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c5ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c5b1:	c9                   	leave  
f010c5b2:	c3                   	ret    

f010c5b3 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c5b3:	55                   	push   %ebp
f010c5b4:	89 e5                	mov    %esp,%ebp
f010c5b6:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c5b9:	83 ec 04             	sub    $0x4,%esp
f010c5bc:	68 87 2c 13 f0       	push   $0xf0132c87
f010c5c1:	68 b4 00 00 00       	push   $0xb4
f010c5c6:	68 73 2c 13 f0       	push   $0xf0132c73
f010c5cb:	e8 e0 3b ff ff       	call   f01001b0 <_panic>

f010c5d0 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c5d0:	55                   	push   %ebp
f010c5d1:	89 e5                	mov    %esp,%ebp
f010c5d3:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c5d6:	83 ec 04             	sub    $0x4,%esp
f010c5d9:	68 a8 2c 13 f0       	push   $0xf0132ca8
f010c5de:	68 c5 00 00 00       	push   $0xc5
f010c5e3:	68 73 2c 13 f0       	push   $0xf0132c73
f010c5e8:	e8 c3 3b ff ff       	call   f01001b0 <_panic>

f010c5ed <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c5ed:	55                   	push   %ebp
f010c5ee:	89 e5                	mov    %esp,%ebp
f010c5f0:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c5f3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c5f8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5fe:	83 ec 04             	sub    $0x4,%esp
f010c601:	ff 75 0c             	pushl  0xc(%ebp)
f010c604:	ff 75 08             	pushl  0x8(%ebp)
f010c607:	50                   	push   %eax
f010c608:	e8 36 c2 ff ff       	call   f0108843 <calculate_required_frames>
f010c60d:	83 c4 10             	add    $0x10,%esp
}
f010c610:	c9                   	leave  
f010c611:	c3                   	ret    

f010c612 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c612:	55                   	push   %ebp
f010c613:	89 e5                	mov    %esp,%ebp
f010c615:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c618:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c61b:	83 ec 0c             	sub    $0xc,%esp
f010c61e:	50                   	push   %eax
f010c61f:	e8 40 af ff ff       	call   f0107564 <calculate_available_frames>
f010c624:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c627:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c62a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c62d:	01 d0                	add    %edx,%eax
}
f010c62f:	c9                   	leave  
f010c630:	c3                   	ret    

f010c631 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c631:	55                   	push   %ebp
f010c632:	89 e5                	mov    %esp,%ebp
f010c634:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c637:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c63a:	83 ec 0c             	sub    $0xc,%esp
f010c63d:	50                   	push   %eax
f010c63e:	e8 21 af ff ff       	call   f0107564 <calculate_available_frames>
f010c643:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c646:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c649:	c9                   	leave  
f010c64a:	c3                   	ret    

f010c64b <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c64b:	55                   	push   %ebp
f010c64c:	89 e5                	mov    %esp,%ebp
f010c64e:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c651:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c654:	83 ec 0c             	sub    $0xc,%esp
f010c657:	50                   	push   %eax
f010c658:	e8 07 af ff ff       	call   f0107564 <calculate_available_frames>
f010c65d:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c660:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c663:	c9                   	leave  
f010c664:	c3                   	ret    

f010c665 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c665:	55                   	push   %ebp
f010c666:	89 e5                	mov    %esp,%ebp
f010c668:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c66b:	83 ec 0c             	sub    $0xc,%esp
f010c66e:	ff 75 08             	pushl  0x8(%ebp)
f010c671:	e8 3c 13 02 00       	call   f012d9b2 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c676:	83 c4 10             	add    $0x10,%esp
}
f010c679:	c9                   	leave  
f010c67a:	c3                   	ret    

f010c67b <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c67b:	55                   	push   %ebp
f010c67c:	89 e5                	mov    %esp,%ebp
f010c67e:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c681:	e8 84 12 02 00       	call   f012d90a <scarce_memory>
}
f010c686:	90                   	nop
f010c687:	c9                   	leave  
f010c688:	c3                   	ret    

f010c689 <sys_clearFFL>:

void sys_clearFFL()
{
f010c689:	55                   	push   %ebp
f010c68a:	89 e5                	mov    %esp,%ebp
f010c68c:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c68f:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f010c694:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c697:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c69e:	eb 12                	jmp    f010c6b2 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c6a0:	83 ec 0c             	sub    $0xc,%esp
f010c6a3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c6a6:	50                   	push   %eax
f010c6a7:	e8 ad a8 ff ff       	call   f0106f59 <allocate_frame>
f010c6ac:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c6af:	ff 45 f4             	incl   -0xc(%ebp)
f010c6b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c6b8:	7c e6                	jl     f010c6a0 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c6ba:	90                   	nop
f010c6bb:	c9                   	leave  
f010c6bc:	c3                   	ret    

f010c6bd <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c6bd:	55                   	push   %ebp
f010c6be:	89 e5                	mov    %esp,%ebp
f010c6c0:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c6c3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c6c8:	83 ec 0c             	sub    $0xc,%esp
f010c6cb:	50                   	push   %eax
f010c6cc:	e8 10 7b ff ff       	call   f01041e1 <pf_calculate_allocated_pages>
f010c6d1:	83 c4 10             	add    $0x10,%esp
}
f010c6d4:	c9                   	leave  
f010c6d5:	c3                   	ret    

f010c6d6 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c6d6:	55                   	push   %ebp
f010c6d7:	89 e5                	mov    %esp,%ebp
f010c6d9:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c6dc:	e8 b2 0d 00 00       	call   f010d493 <isBufferingEnabled>
f010c6e1:	84 c0                	test   %al,%al
f010c6e3:	74 19                	je     f010c6fe <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c6e5:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c6ea:	83 ec 04             	sub    $0x4,%esp
f010c6ed:	ff 75 0c             	pushl  0xc(%ebp)
f010c6f0:	ff 75 08             	pushl  0x8(%ebp)
f010c6f3:	50                   	push   %eax
f010c6f4:	e8 80 c1 ff ff       	call   f0108879 <__free_user_mem_with_buffering>
f010c6f9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c6fc:	eb 18                	jmp    f010c716 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c6fe:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c703:	83 ec 04             	sub    $0x4,%esp
f010c706:	ff 75 0c             	pushl  0xc(%ebp)
f010c709:	ff 75 08             	pushl  0x8(%ebp)
f010c70c:	50                   	push   %eax
f010c70d:	e8 59 c1 ff ff       	call   f010886b <free_user_mem>
f010c712:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c715:	90                   	nop
}
f010c716:	c9                   	leave  
f010c717:	c3                   	ret    

f010c718 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c718:	55                   	push   %ebp
f010c719:	89 e5                	mov    %esp,%ebp
f010c71b:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c71e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c723:	83 ec 04             	sub    $0x4,%esp
f010c726:	ff 75 0c             	pushl  0xc(%ebp)
f010c729:	ff 75 08             	pushl  0x8(%ebp)
f010c72c:	50                   	push   %eax
f010c72d:	e8 2b c1 ff ff       	call   f010885d <allocate_user_mem>
f010c732:	83 c4 10             	add    $0x10,%esp
	return;
f010c735:	90                   	nop
}
f010c736:	c9                   	leave  
f010c737:	c3                   	ret    

f010c738 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c738:	55                   	push   %ebp
f010c739:	89 e5                	mov    %esp,%ebp
f010c73b:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c73e:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c743:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c749:	ff 75 10             	pushl  0x10(%ebp)
f010c74c:	ff 75 0c             	pushl  0xc(%ebp)
f010c74f:	ff 75 08             	pushl  0x8(%ebp)
f010c752:	50                   	push   %eax
f010c753:	e8 b7 c0 ff ff       	call   f010880f <allocate_chunk>
f010c758:	83 c4 10             	add    $0x10,%esp
	return;
f010c75b:	90                   	nop
}
f010c75c:	c9                   	leave  
f010c75d:	c3                   	ret    

f010c75e <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c75e:	55                   	push   %ebp
f010c75f:	89 e5                	mov    %esp,%ebp
f010c761:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c764:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c769:	ff 75 10             	pushl  0x10(%ebp)
f010c76c:	ff 75 0c             	pushl  0xc(%ebp)
f010c76f:	ff 75 08             	pushl  0x8(%ebp)
f010c772:	50                   	push   %eax
f010c773:	e8 1e c1 ff ff       	call   f0108896 <move_user_mem>
f010c778:	83 c4 10             	add    $0x10,%esp
	return;
f010c77b:	90                   	nop
}
f010c77c:	c9                   	leave  
f010c77d:	c3                   	ret    

f010c77e <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c77e:	55                   	push   %ebp
f010c77f:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c781:	a1 ac be 2b f0       	mov    0xf02bbeac,%eax
}
f010c786:	5d                   	pop    %ebp
f010c787:	c3                   	ret    

f010c788 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c788:	55                   	push   %ebp
f010c789:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c78b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c78e:	a3 ac be 2b f0       	mov    %eax,0xf02bbeac
}
f010c793:	90                   	nop
f010c794:	5d                   	pop    %ebp
f010c795:	c3                   	ret    

f010c796 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c796:	55                   	push   %ebp
f010c797:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c799:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c79e:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c7a4:	8b 52 38             	mov    0x38(%edx),%edx
f010c7a7:	80 e6 fd             	and    $0xfd,%dh
f010c7aa:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c7ad:	90                   	nop
f010c7ae:	5d                   	pop    %ebp
f010c7af:	c3                   	ret    

f010c7b0 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c7b0:	55                   	push   %ebp
f010c7b1:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c7b3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c7b8:	8b 15 34 32 25 f0    	mov    0xf0253234,%edx
f010c7be:	8b 52 38             	mov    0x38(%edx),%edx
f010c7c1:	80 ce 02             	or     $0x2,%dh
f010c7c4:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c7c7:	90                   	nop
f010c7c8:	5d                   	pop    %ebp
f010c7c9:	c3                   	ret    

f010c7ca <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c7ca:	55                   	push   %ebp
f010c7cb:	89 e5                	mov    %esp,%ebp
f010c7cd:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c7d0:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c7d5:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7d8:	83 ec 04             	sub    $0x4,%esp
f010c7db:	ff 75 0c             	pushl  0xc(%ebp)
f010c7de:	ff 75 08             	pushl  0x8(%ebp)
f010c7e1:	50                   	push   %eax
f010c7e2:	e8 44 10 00 00       	call   f010d82b <createSemaphore>
f010c7e7:	83 c4 10             	add    $0x10,%esp
}
f010c7ea:	c9                   	leave  
f010c7eb:	c3                   	ret    

f010c7ec <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c7ec:	55                   	push   %ebp
f010c7ed:	89 e5                	mov    %esp,%ebp
f010c7ef:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c7f2:	83 ec 08             	sub    $0x8,%esp
f010c7f5:	ff 75 0c             	pushl  0xc(%ebp)
f010c7f8:	ff 75 08             	pushl  0x8(%ebp)
f010c7fb:	e8 48 10 00 00       	call   f010d848 <waitSemaphore>
f010c800:	83 c4 10             	add    $0x10,%esp
}
f010c803:	90                   	nop
f010c804:	c9                   	leave  
f010c805:	c3                   	ret    

f010c806 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c806:	55                   	push   %ebp
f010c807:	89 e5                	mov    %esp,%ebp
f010c809:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c80c:	83 ec 08             	sub    $0x8,%esp
f010c80f:	ff 75 0c             	pushl  0xc(%ebp)
f010c812:	ff 75 08             	pushl  0x8(%ebp)
f010c815:	e8 4b 10 00 00       	call   f010d865 <signalSemaphore>
f010c81a:	83 c4 10             	add    $0x10,%esp
}
f010c81d:	90                   	nop
f010c81e:	c9                   	leave  
f010c81f:	c3                   	ret    

f010c820 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c820:	55                   	push   %ebp
f010c821:	89 e5                	mov    %esp,%ebp
f010c823:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c826:	83 ec 08             	sub    $0x8,%esp
f010c829:	ff 75 0c             	pushl  0xc(%ebp)
f010c82c:	ff 75 08             	pushl  0x8(%ebp)
f010c82f:	e8 9d 0e 00 00       	call   f010d6d1 <get_semaphore_object_ID>
f010c834:	83 c4 10             	add    $0x10,%esp
f010c837:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c83a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c83e:	78 06                	js     f010c846 <sys_getSemaphoreValue+0x26>
f010c840:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c844:	7e 19                	jle    f010c85f <sys_getSemaphoreValue+0x3f>
f010c846:	68 c8 2c 13 f0       	push   $0xf0132cc8
f010c84b:	68 ed 2c 13 f0       	push   $0xf0132ced
f010c850:	68 4d 01 00 00       	push   $0x14d
f010c855:	68 73 2c 13 f0       	push   $0xf0132c73
f010c85a:	e8 51 39 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010c85f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c862:	89 d0                	mov    %edx,%eax
f010c864:	c1 e0 02             	shl    $0x2,%eax
f010c867:	01 d0                	add    %edx,%eax
f010c869:	01 c0                	add    %eax,%eax
f010c86b:	01 d0                	add    %edx,%eax
f010c86d:	01 c0                	add    %eax,%eax
f010c86f:	01 d0                	add    %edx,%eax
f010c871:	c1 e0 02             	shl    $0x2,%eax
f010c874:	05 f4 9a 2b f0       	add    $0xf02b9af4,%eax
f010c879:	8b 00                	mov    (%eax),%eax
}
f010c87b:	c9                   	leave  
f010c87c:	c3                   	ret    

f010c87d <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c87d:	55                   	push   %ebp
f010c87e:	89 e5                	mov    %esp,%ebp
f010c880:	83 ec 18             	sub    $0x18,%esp
f010c883:	8b 45 10             	mov    0x10(%ebp),%eax
f010c886:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c889:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c88d:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c892:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c895:	83 ec 0c             	sub    $0xc,%esp
f010c898:	ff 75 14             	pushl  0x14(%ebp)
f010c89b:	52                   	push   %edx
f010c89c:	ff 75 0c             	pushl  0xc(%ebp)
f010c89f:	ff 75 08             	pushl  0x8(%ebp)
f010c8a2:	50                   	push   %eax
f010c8a3:	e8 4d b2 ff ff       	call   f0107af5 <createSharedObject>
f010c8a8:	83 c4 20             	add    $0x20,%esp
}
f010c8ab:	c9                   	leave  
f010c8ac:	c3                   	ret    

f010c8ad <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c8ad:	55                   	push   %ebp
f010c8ae:	89 e5                	mov    %esp,%ebp
f010c8b0:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c8b3:	83 ec 08             	sub    $0x8,%esp
f010c8b6:	ff 75 0c             	pushl  0xc(%ebp)
f010c8b9:	ff 75 08             	pushl  0x8(%ebp)
f010c8bc:	e8 57 b2 ff ff       	call   f0107b18 <getSizeOfSharedObject>
f010c8c1:	83 c4 10             	add    $0x10,%esp
}
f010c8c4:	c9                   	leave  
f010c8c5:	c3                   	ret    

f010c8c6 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c8c6:	55                   	push   %ebp
f010c8c7:	89 e5                	mov    %esp,%ebp
f010c8c9:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c8cc:	83 ec 04             	sub    $0x4,%esp
f010c8cf:	ff 75 10             	pushl  0x10(%ebp)
f010c8d2:	ff 75 0c             	pushl  0xc(%ebp)
f010c8d5:	ff 75 08             	pushl  0x8(%ebp)
f010c8d8:	e8 58 b2 ff ff       	call   f0107b35 <getSharedObject>
f010c8dd:	83 c4 10             	add    $0x10,%esp
}
f010c8e0:	c9                   	leave  
f010c8e1:	c3                   	ret    

f010c8e2 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c8e2:	55                   	push   %ebp
f010c8e3:	89 e5                	mov    %esp,%ebp
f010c8e5:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c8e8:	83 ec 08             	sub    $0x8,%esp
f010c8eb:	ff 75 0c             	pushl  0xc(%ebp)
f010c8ee:	ff 75 08             	pushl  0x8(%ebp)
f010c8f1:	e8 5c b2 ff ff       	call   f0107b52 <freeSharedObject>
f010c8f6:	83 c4 10             	add    $0x10,%esp
}
f010c8f9:	c9                   	leave  
f010c8fa:	c3                   	ret    

f010c8fb <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c8fb:	55                   	push   %ebp
f010c8fc:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c8fe:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c903:	5d                   	pop    %ebp
f010c904:	c3                   	ret    

f010c905 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c905:	55                   	push   %ebp
f010c906:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c908:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c90d:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c910:	5d                   	pop    %ebp
f010c911:	c3                   	ret    

f010c912 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c912:	55                   	push   %ebp
f010c913:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c915:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c91a:	89 c2                	mov    %eax,%edx
f010c91c:	a1 30 32 25 f0       	mov    0xf0253230,%eax
f010c921:	29 c2                	sub    %eax,%edx
f010c923:	89 d0                	mov    %edx,%eax
f010c925:	c1 f8 05             	sar    $0x5,%eax
f010c928:	89 c2                	mov    %eax,%edx
f010c92a:	89 d0                	mov    %edx,%eax
f010c92c:	c1 e0 03             	shl    $0x3,%eax
f010c92f:	01 d0                	add    %edx,%eax
f010c931:	01 c0                	add    %eax,%eax
f010c933:	01 d0                	add    %edx,%eax
f010c935:	c1 e0 06             	shl    $0x6,%eax
f010c938:	01 d0                	add    %edx,%eax
f010c93a:	89 c1                	mov    %eax,%ecx
f010c93c:	c1 e1 04             	shl    $0x4,%ecx
f010c93f:	01 c8                	add    %ecx,%eax
f010c941:	c1 e0 03             	shl    $0x3,%eax
f010c944:	01 d0                	add    %edx,%eax
f010c946:	01 c0                	add    %eax,%eax
f010c948:	01 d0                	add    %edx,%eax
f010c94a:	89 c1                	mov    %eax,%ecx
f010c94c:	c1 e1 04             	shl    $0x4,%ecx
f010c94f:	01 c8                	add    %ecx,%eax
f010c951:	c1 e0 03             	shl    $0x3,%eax
f010c954:	01 d0                	add    %edx,%eax
f010c956:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c95d:	01 d0                	add    %edx,%eax
}
f010c95f:	5d                   	pop    %ebp
f010c960:	c3                   	ret    

f010c961 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c961:	55                   	push   %ebp
f010c962:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c964:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c969:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c96c:	5d                   	pop    %ebp
f010c96d:	c3                   	ret    

f010c96e <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c96e:	55                   	push   %ebp
f010c96f:	89 e5                	mov    %esp,%ebp
f010c971:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c974:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c978:	75 0a                	jne    f010c984 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c97a:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c97f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c982:	eb 22                	jmp    f010c9a6 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c984:	83 ec 04             	sub    $0x4,%esp
f010c987:	6a 00                	push   $0x0
f010c989:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c98c:	50                   	push   %eax
f010c98d:	ff 75 08             	pushl  0x8(%ebp)
f010c990:	e8 6d cc ff ff       	call   f0109602 <envid2env>
f010c995:	83 c4 10             	add    $0x10,%esp
f010c998:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c99b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c99f:	79 05                	jns    f010c9a6 <sys_destroy_env+0x38>
	{
		return r;
f010c9a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9a4:	eb 5e                	jmp    f010ca04 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c9a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c9a9:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9ae:	39 c2                	cmp    %eax,%edx
f010c9b0:	75 1b                	jne    f010c9cd <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c9b2:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	83 ec 08             	sub    $0x8,%esp
f010c9bd:	50                   	push   %eax
f010c9be:	68 02 2d 13 f0       	push   $0xf0132d02
f010c9c3:	e8 69 44 ff ff       	call   f0100e31 <cprintf>
f010c9c8:	83 c4 10             	add    $0x10,%esp
f010c9cb:	eb 20                	jmp    f010c9ed <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c9cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9d0:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c9d3:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f010c9d8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9db:	83 ec 04             	sub    $0x4,%esp
f010c9de:	52                   	push   %edx
f010c9df:	50                   	push   %eax
f010c9e0:	68 1d 2d 13 f0       	push   $0xf0132d1d
f010c9e5:	e8 47 44 ff ff       	call   f0100e31 <cprintf>
f010c9ea:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c9ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9f3:	83 ec 0c             	sub    $0xc,%esp
f010c9f6:	50                   	push   %eax
f010c9f7:	e8 49 88 ff ff       	call   f0105245 <sched_kill_env>
f010c9fc:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ca04:	c9                   	leave  
f010ca05:	c3                   	ret    

f010ca06 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ca06:	55                   	push   %ebp
f010ca07:	89 e5                	mov    %esp,%ebp
f010ca09:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ca0c:	e8 d2 cb ff ff       	call   f01095e3 <env_exit>
	//env_run_cmd_prmpt();
}
f010ca11:	90                   	nop
f010ca12:	c9                   	leave  
f010ca13:	c3                   	ret    

f010ca14 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ca14:	55                   	push   %ebp
f010ca15:	89 e5                	mov    %esp,%ebp
f010ca17:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ca1a:	ff 75 14             	pushl  0x14(%ebp)
f010ca1d:	ff 75 10             	pushl  0x10(%ebp)
f010ca20:	ff 75 0c             	pushl  0xc(%ebp)
f010ca23:	ff 75 08             	pushl  0x8(%ebp)
f010ca26:	e8 d4 be ff ff       	call   f01088ff <env_create>
f010ca2b:	83 c4 10             	add    $0x10,%esp
f010ca2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ca31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca35:	75 07                	jne    f010ca3e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ca37:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ca3c:	eb 14                	jmp    f010ca52 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ca3e:	83 ec 0c             	sub    $0xc,%esp
f010ca41:	ff 75 f4             	pushl  -0xc(%ebp)
f010ca44:	e8 1e 85 ff ff       	call   f0104f67 <sched_new_env>
f010ca49:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ca4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca4f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ca52:	c9                   	leave  
f010ca53:	c3                   	ret    

f010ca54 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ca54:	55                   	push   %ebp
f010ca55:	89 e5                	mov    %esp,%ebp
f010ca57:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ca5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca5d:	83 ec 0c             	sub    $0xc,%esp
f010ca60:	50                   	push   %eax
f010ca61:	e8 1e 85 ff ff       	call   f0104f84 <sched_run_env>
f010ca66:	83 c4 10             	add    $0x10,%esp
}
f010ca69:	90                   	nop
f010ca6a:	c9                   	leave  
f010ca6b:	c3                   	ret    

f010ca6c <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ca6c:	55                   	push   %ebp
f010ca6d:	89 e5                	mov    %esp,%ebp
f010ca6f:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ca72:	0f 31                	rdtsc  
f010ca74:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ca77:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ca7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca80:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ca83:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ca86:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ca89:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ca8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ca8f:	89 01                	mov    %eax,(%ecx)
f010ca91:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ca94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca97:	c9                   	leave  
f010ca98:	c2 04 00             	ret    $0x4

f010ca9b <sys_rcr2>:

uint32 sys_rcr2()
{
f010ca9b:	55                   	push   %ebp
f010ca9c:	89 e5                	mov    %esp,%ebp
f010ca9e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010caa1:	0f 20 d0             	mov    %cr2,%eax
f010caa4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010caa7:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010caaa:	90                   	nop
}
f010caab:	c9                   	leave  
f010caac:	c3                   	ret    

f010caad <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010caad:	55                   	push   %ebp
f010caae:	89 e5                	mov    %esp,%ebp
f010cab0:	83 ec 04             	sub    $0x4,%esp
f010cab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010cab6:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cab9:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cabc:	a2 e8 3a 25 f0       	mov    %al,0xf0253ae8
}
f010cac1:	90                   	nop
f010cac2:	c9                   	leave  
f010cac3:	c3                   	ret    

f010cac4 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010cac4:	55                   	push   %ebp
f010cac5:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010cac7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010cacc:	5d                   	pop    %ebp
f010cacd:	c3                   	ret    

f010cace <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010cace:	55                   	push   %ebp
f010cacf:	89 e5                	mov    %esp,%ebp
f010cad1:	56                   	push   %esi
f010cad2:	53                   	push   %ebx
f010cad3:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010cad6:	83 7d 08 32          	cmpl   $0x32,0x8(%ebp)
f010cada:	0f 87 5b 04 00 00    	ja     f010cf3b <syscall+0x46d>
f010cae0:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae3:	c1 e0 02             	shl    $0x2,%eax
f010cae6:	05 38 2d 13 f0       	add    $0xf0132d38,%eax
f010caeb:	8b 00                	mov    (%eax),%eax
f010caed:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	// 23oct-10pm , Hamed , ~start~
	case SYS_sbrk:
		sys_sbrk(a1);
f010caef:	8b 45 0c             	mov    0xc(%ebp),%eax
f010caf2:	50                   	push   %eax
f010caf3:	e8 cc ff ff ff       	call   f010cac4 <sys_sbrk>
f010caf8:	83 c4 04             	add    $0x4,%esp
		return 0;
f010cafb:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb00:	e9 3b 04 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1,a2);
f010cb05:	83 ec 08             	sub    $0x8,%esp
f010cb08:	ff 75 10             	pushl  0x10(%ebp)
f010cb0b:	ff 75 0c             	pushl  0xc(%ebp)
f010cb0e:	e8 c3 fb ff ff       	call   f010c6d6 <sys_free_user_mem>
f010cb13:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb16:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb1b:	e9 20 04 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_allocate_user_mem:
		sys_allocate_user_mem(a1,a2);
f010cb20:	83 ec 08             	sub    $0x8,%esp
f010cb23:	ff 75 10             	pushl  0x10(%ebp)
f010cb26:	ff 75 0c             	pushl  0xc(%ebp)
f010cb29:	e8 ea fb ff ff       	call   f010c718 <sys_allocate_user_mem>
f010cb2e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb31:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb36:	e9 05 04 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	// 23oct-10pm , Hamed , ~end~
	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010cb3b:	8b 45 14             	mov    0x14(%ebp),%eax
f010cb3e:	0f b6 d0             	movzbl %al,%edx
f010cb41:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb44:	83 ec 04             	sub    $0x4,%esp
f010cb47:	52                   	push   %edx
f010cb48:	ff 75 10             	pushl  0x10(%ebp)
f010cb4b:	50                   	push   %eax
f010cb4c:	e8 da f8 ff ff       	call   f010c42b <sys_cputs>
f010cb51:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb54:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb59:	e9 e2 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cb5e:	e8 3a f9 ff ff       	call   f010c49d <sys_cgetc>
f010cb63:	e9 d8 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cb68:	83 ec 08             	sub    $0x8,%esp
f010cb6b:	ff 75 10             	pushl  0x10(%ebp)
f010cb6e:	ff 75 0c             	pushl  0xc(%ebp)
f010cb71:	e8 77 fa ff ff       	call   f010c5ed <sys_calculate_required_frames>
f010cb76:	83 c4 10             	add    $0x10,%esp
f010cb79:	e9 c2 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cb7e:	e8 8f fa ff ff       	call   f010c612 <sys_calculate_free_frames>
f010cb83:	e9 b8 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cb88:	e8 a4 fa ff ff       	call   f010c631 <sys_calculate_modified_frames>
f010cb8d:	e9 ae 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cb92:	e8 b4 fa ff ff       	call   f010c64b <sys_calculate_notmod_frames>
f010cb97:	e9 a4 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cb9c:	e8 1c fb ff ff       	call   f010c6bd <sys_pf_calculate_allocated_pages>
f010cba1:	e9 9a 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cba6:	83 ec 0c             	sub    $0xc,%esp
f010cba9:	ff 75 0c             	pushl  0xc(%ebp)
f010cbac:	e8 b4 fa ff ff       	call   f010c665 <sys_calculate_pages_tobe_removed_ready_exit>
f010cbb1:	83 c4 10             	add    $0x10,%esp
f010cbb4:	e9 87 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cbb9:	e8 bd fa ff ff       	call   f010c67b <sys_scarce_memory>
		return 0;
f010cbbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbc3:	e9 78 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cbc8:	83 ec 04             	sub    $0x4,%esp
f010cbcb:	ff 75 14             	pushl  0x14(%ebp)
f010cbce:	ff 75 10             	pushl  0x10(%ebp)
f010cbd1:	ff 75 0c             	pushl  0xc(%ebp)
f010cbd4:	e8 5f fb ff ff       	call   f010c738 <sys_allocate_chunk>
f010cbd9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cbdc:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbe1:	e9 5a 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cbe6:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbe9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbec:	83 ec 08             	sub    $0x8,%esp
f010cbef:	52                   	push   %edx
f010cbf0:	50                   	push   %eax
f010cbf1:	e8 ba f8 ff ff       	call   f010c4b0 <__sys_allocate_page>
f010cbf6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cbf9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbfe:	e9 3d 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cc03:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cc06:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cc09:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cc0c:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc12:	83 ec 0c             	sub    $0xc,%esp
f010cc15:	56                   	push   %esi
f010cc16:	53                   	push   %ebx
f010cc17:	51                   	push   %ecx
f010cc18:	52                   	push   %edx
f010cc19:	50                   	push   %eax
f010cc1a:	e8 94 f9 ff ff       	call   f010c5b3 <__sys_map_frame>
f010cc1f:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cc22:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc27:	e9 14 03 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cc2c:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc32:	83 ec 08             	sub    $0x8,%esp
f010cc35:	52                   	push   %edx
f010cc36:	50                   	push   %eax
f010cc37:	e8 94 f9 ff ff       	call   f010c5d0 <__sys_unmap_frame>
f010cc3c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc3f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc44:	e9 f7 02 00 00       	jmp    f010cf40 <syscall+0x472>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cc49:	e8 48 fb ff ff       	call   f010c796 <sys_disable_interrupt>
		return 0;
f010cc4e:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc53:	e9 e8 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cc58:	e8 53 fb ff ff       	call   f010c7b0 <sys_enable_interrupt>
		return 0;
f010cc5d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc62:	e9 d9 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cc67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc6a:	0f be c0             	movsbl %al,%eax
f010cc6d:	83 ec 0c             	sub    $0xc,%esp
f010cc70:	50                   	push   %eax
f010cc71:	e8 03 f8 ff ff       	call   f010c479 <sys_cputc>
f010cc76:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc79:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc7e:	e9 bd 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cc83:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc86:	0f be c0             	movsbl %al,%eax
f010cc89:	83 ec 0c             	sub    $0xc,%esp
f010cc8c:	50                   	push   %eax
f010cc8d:	e8 f7 f9 ff ff       	call   f010c689 <sys_clearFFL>
f010cc92:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc95:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc9a:	e9 a1 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cc9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cca2:	83 ec 08             	sub    $0x8,%esp
f010cca5:	ff 75 10             	pushl  0x10(%ebp)
f010cca8:	50                   	push   %eax
f010cca9:	e8 1c fb ff ff       	call   f010c7ca <sys_createSemaphore>
f010ccae:	83 c4 10             	add    $0x10,%esp
f010ccb1:	e9 8a 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010ccb6:	8b 55 10             	mov    0x10(%ebp),%edx
f010ccb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccbc:	83 ec 08             	sub    $0x8,%esp
f010ccbf:	52                   	push   %edx
f010ccc0:	50                   	push   %eax
f010ccc1:	e8 26 fb ff ff       	call   f010c7ec <sys_waitSemaphore>
f010ccc6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ccc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccce:	e9 6d 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010ccd3:	8b 55 10             	mov    0x10(%ebp),%edx
f010ccd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccd9:	83 ec 08             	sub    $0x8,%esp
f010ccdc:	52                   	push   %edx
f010ccdd:	50                   	push   %eax
f010ccde:	e8 23 fb ff ff       	call   f010c806 <sys_signalSemaphore>
f010cce3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cce6:	b8 00 00 00 00       	mov    $0x0,%eax
f010cceb:	e9 50 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010ccf0:	8b 55 10             	mov    0x10(%ebp),%edx
f010ccf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccf6:	83 ec 08             	sub    $0x8,%esp
f010ccf9:	52                   	push   %edx
f010ccfa:	50                   	push   %eax
f010ccfb:	e8 20 fb ff ff       	call   f010c820 <sys_getSemaphoreValue>
f010cd00:	83 c4 10             	add    $0x10,%esp
f010cd03:	e9 38 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010cd08:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cd0b:	8b 45 14             	mov    0x14(%ebp),%eax
f010cd0e:	0f b6 d0             	movzbl %al,%edx
f010cd11:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd14:	51                   	push   %ecx
f010cd15:	52                   	push   %edx
f010cd16:	ff 75 10             	pushl  0x10(%ebp)
f010cd19:	50                   	push   %eax
f010cd1a:	e8 5e fb ff ff       	call   f010c87d <sys_createSharedObject>
f010cd1f:	83 c4 10             	add    $0x10,%esp
f010cd22:	e9 19 02 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010cd27:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cd2a:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd30:	83 ec 04             	sub    $0x4,%esp
f010cd33:	51                   	push   %ecx
f010cd34:	52                   	push   %edx
f010cd35:	50                   	push   %eax
f010cd36:	e8 8b fb ff ff       	call   f010c8c6 <sys_getSharedObject>
f010cd3b:	83 c4 10             	add    $0x10,%esp
f010cd3e:	e9 fd 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010cd43:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd46:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd49:	83 ec 08             	sub    $0x8,%esp
f010cd4c:	52                   	push   %edx
f010cd4d:	50                   	push   %eax
f010cd4e:	e8 8f fb ff ff       	call   f010c8e2 <sys_freeSharedObject>
f010cd53:	83 c4 10             	add    $0x10,%esp
f010cd56:	e9 e5 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010cd5b:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd61:	83 ec 08             	sub    $0x8,%esp
f010cd64:	52                   	push   %edx
f010cd65:	50                   	push   %eax
f010cd66:	e8 42 fb ff ff       	call   f010c8ad <sys_getSizeOfSharedObject>
f010cd6b:	83 c4 10             	add    $0x10,%esp
f010cd6e:	e9 cd 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010cd73:	e8 83 fb ff ff       	call   f010c8fb <sys_getMaxShares>
f010cd78:	e9 c3 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cd7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd80:	ff 75 18             	pushl  0x18(%ebp)
f010cd83:	ff 75 14             	pushl  0x14(%ebp)
f010cd86:	ff 75 10             	pushl  0x10(%ebp)
f010cd89:	50                   	push   %eax
f010cd8a:	e8 85 fc ff ff       	call   f010ca14 <sys_create_env>
f010cd8f:	83 c4 10             	add    $0x10,%esp
f010cd92:	e9 a9 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010cd97:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd9a:	83 ec 0c             	sub    $0xc,%esp
f010cd9d:	50                   	push   %eax
f010cd9e:	e8 b1 fc ff ff       	call   f010ca54 <sys_run_env>
f010cda3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cda6:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdab:	e9 90 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cdb0:	e8 5d fb ff ff       	call   f010c912 <sys_getenvindex>
f010cdb5:	e9 86 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cdba:	e8 46 fb ff ff       	call   f010c905 <sys_getenvid>
f010cdbf:	e9 7c 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cdc4:	e8 98 fb ff ff       	call   f010c961 <sys_getparentenvid>
f010cdc9:	e9 72 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010cdce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdd1:	83 ec 0c             	sub    $0xc,%esp
f010cdd4:	50                   	push   %eax
f010cdd5:	e8 94 fb ff ff       	call   f010c96e <sys_destroy_env>
f010cdda:	83 c4 10             	add    $0x10,%esp
f010cddd:	e9 5e 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010cde2:	e8 1f fc ff ff       	call   f010ca06 <sys_exit_env>
		return 0;
f010cde7:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdec:	e9 4f 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010cdf1:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cdf4:	83 ec 0c             	sub    $0xc,%esp
f010cdf7:	50                   	push   %eax
f010cdf8:	e8 6f fc ff ff       	call   f010ca6c <sys_get_virtual_time>
f010cdfd:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010ce00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce03:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010ce06:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce09:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010ce0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ce0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce12:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010ce14:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ce17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce1a:	89 10                	mov    %edx,(%eax)
		return 0;
f010ce1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce21:	e9 1a 01 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010ce26:	83 ec 04             	sub    $0x4,%esp
f010ce29:	ff 75 14             	pushl  0x14(%ebp)
f010ce2c:	ff 75 10             	pushl  0x10(%ebp)
f010ce2f:	ff 75 0c             	pushl  0xc(%ebp)
f010ce32:	e8 27 f9 ff ff       	call   f010c75e <sys_move_user_mem>
f010ce37:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce3f:	e9 fc 00 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010ce44:	e8 52 fc ff ff       	call   f010ca9b <sys_rcr2>
f010ce49:	e9 f2 00 00 00       	jmp    f010cf40 <syscall+0x472>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ce4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce51:	0f b6 c0             	movzbl %al,%eax
f010ce54:	83 ec 0c             	sub    $0xc,%esp
f010ce57:	50                   	push   %eax
f010ce58:	e8 50 fc ff ff       	call   f010caad <sys_bypassPageFault>
f010ce5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce60:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce65:	e9 d6 00 00 00       	jmp    f010cf40 <syscall+0x472>

	case SYS_rsttst:
		rsttst();
f010ce6a:	e8 63 08 02 00       	call   f012d6d2 <rsttst>
		return 0;
f010ce6f:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce74:	e9 c7 00 00 00       	jmp    f010cf40 <syscall+0x472>
	case SYS_inctst:
		inctst();
f010ce79:	e8 64 08 02 00       	call   f012d6e2 <inctst>
		return 0;
f010ce7e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce83:	e9 b8 00 00 00       	jmp    f010cf40 <syscall+0x472>
	case SYS_chktst:
		chktst(a1);
f010ce88:	83 ec 0c             	sub    $0xc,%esp
f010ce8b:	ff 75 0c             	pushl  0xc(%ebp)
f010ce8e:	e8 4e 09 02 00       	call   f012d7e1 <chktst>
f010ce93:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce96:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce9b:	e9 a0 00 00 00       	jmp    f010cf40 <syscall+0x472>
	case SYS_gettst:
		return gettst();
f010cea0:	e8 4e 08 02 00       	call   f012d6f3 <gettst>
f010cea5:	e9 96 00 00 00       	jmp    f010cf40 <syscall+0x472>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010ceaa:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010cead:	8b 45 18             	mov    0x18(%ebp),%eax
f010ceb0:	0f be c0             	movsbl %al,%eax
f010ceb3:	83 ec 0c             	sub    $0xc,%esp
f010ceb6:	52                   	push   %edx
f010ceb7:	50                   	push   %eax
f010ceb8:	ff 75 14             	pushl  0x14(%ebp)
f010cebb:	ff 75 10             	pushl  0x10(%ebp)
f010cebe:	ff 75 0c             	pushl  0xc(%ebp)
f010cec1:	e8 37 08 02 00       	call   f012d6fd <tst>
f010cec6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cec9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cece:	eb 70                	jmp    f010cf40 <syscall+0x472>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010ced0:	e8 a9 f8 ff ff       	call   f010c77e <sys_get_heap_strategy>
f010ced5:	eb 69                	jmp    f010cf40 <syscall+0x472>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010ced7:	83 ec 0c             	sub    $0xc,%esp
f010ceda:	ff 75 0c             	pushl  0xc(%ebp)
f010cedd:	e8 a6 f8 ff ff       	call   f010c788 <sys_set_uheap_strategy>
f010cee2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cee5:	b8 00 00 00 00       	mov    $0x0,%eax
f010ceea:	eb 54                	jmp    f010cf40 <syscall+0x472>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010ceec:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010ceef:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cef2:	8b 55 10             	mov    0x10(%ebp),%edx
f010cef5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cef8:	53                   	push   %ebx
f010cef9:	51                   	push   %ecx
f010cefa:	52                   	push   %edx
f010cefb:	50                   	push   %eax
f010cefc:	e8 a3 46 00 00       	call   f01115a4 <sys_check_LRU_lists>
f010cf01:	83 c4 10             	add    $0x10,%esp
f010cf04:	eb 3a                	jmp    f010cf40 <syscall+0x472>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010cf06:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf09:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf0c:	83 ec 08             	sub    $0x8,%esp
f010cf0f:	52                   	push   %edx
f010cf10:	50                   	push   %eax
f010cf11:	e8 10 48 00 00       	call   f0111726 <sys_check_LRU_lists_free>
f010cf16:	83 c4 10             	add    $0x10,%esp
f010cf19:	eb 25                	jmp    f010cf40 <syscall+0x472>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010cf1b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cf1e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf21:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf24:	51                   	push   %ecx
f010cf25:	ff 75 14             	pushl  0x14(%ebp)
f010cf28:	52                   	push   %edx
f010cf29:	50                   	push   %eax
f010cf2a:	e8 62 49 00 00       	call   f0111891 <sys_check_WS_list>
f010cf2f:	83 c4 10             	add    $0x10,%esp
f010cf32:	eb 0c                	jmp    f010cf40 <syscall+0x472>

	case NSYSCALLS:
		return 	-E_INVAL;
f010cf34:	b8 03 00 00 00       	mov    $0x3,%eax
f010cf39:	eb 05                	jmp    f010cf40 <syscall+0x472>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010cf3b:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cf40:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010cf43:	5b                   	pop    %ebx
f010cf44:	5e                   	pop    %esi
f010cf45:	5d                   	pop    %ebp
f010cf46:	c3                   	ret    

f010cf47 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010cf47:	55                   	push   %ebp
f010cf48:	89 e5                	mov    %esp,%ebp
f010cf4a:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010cf4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf50:	8b 00                	mov    (%eax),%eax
f010cf52:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cf55:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf58:	8b 00                	mov    (%eax),%eax
f010cf5a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cf5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010cf64:	e9 ca 00 00 00       	jmp    f010d033 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010cf69:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cf6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cf6f:	01 d0                	add    %edx,%eax
f010cf71:	89 c2                	mov    %eax,%edx
f010cf73:	c1 ea 1f             	shr    $0x1f,%edx
f010cf76:	01 d0                	add    %edx,%eax
f010cf78:	d1 f8                	sar    %eax
f010cf7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010cf7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cf80:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cf83:	eb 03                	jmp    f010cf88 <stab_binsearch+0x41>
			m--;
f010cf85:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cf88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf8b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cf8e:	7c 1e                	jl     f010cfae <stab_binsearch+0x67>
f010cf90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf93:	89 d0                	mov    %edx,%eax
f010cf95:	01 c0                	add    %eax,%eax
f010cf97:	01 d0                	add    %edx,%eax
f010cf99:	c1 e0 02             	shl    $0x2,%eax
f010cf9c:	89 c2                	mov    %eax,%edx
f010cf9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfa1:	01 d0                	add    %edx,%eax
f010cfa3:	8a 40 04             	mov    0x4(%eax),%al
f010cfa6:	0f b6 c0             	movzbl %al,%eax
f010cfa9:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cfac:	75 d7                	jne    f010cf85 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010cfae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfb1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cfb4:	7d 09                	jge    f010cfbf <stab_binsearch+0x78>
			l = true_m + 1;
f010cfb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfb9:	40                   	inc    %eax
f010cfba:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010cfbd:	eb 74                	jmp    f010d033 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010cfbf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010cfc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cfc9:	89 d0                	mov    %edx,%eax
f010cfcb:	01 c0                	add    %eax,%eax
f010cfcd:	01 d0                	add    %edx,%eax
f010cfcf:	c1 e0 02             	shl    $0x2,%eax
f010cfd2:	89 c2                	mov    %eax,%edx
f010cfd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfd7:	01 d0                	add    %edx,%eax
f010cfd9:	8b 40 08             	mov    0x8(%eax),%eax
f010cfdc:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cfdf:	73 11                	jae    f010cff2 <stab_binsearch+0xab>
			*region_left = m;
f010cfe1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfe4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cfe7:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010cfe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfec:	40                   	inc    %eax
f010cfed:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cff0:	eb 41                	jmp    f010d033 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010cff2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cff5:	89 d0                	mov    %edx,%eax
f010cff7:	01 c0                	add    %eax,%eax
f010cff9:	01 d0                	add    %edx,%eax
f010cffb:	c1 e0 02             	shl    $0x2,%eax
f010cffe:	89 c2                	mov    %eax,%edx
f010d000:	8b 45 08             	mov    0x8(%ebp),%eax
f010d003:	01 d0                	add    %edx,%eax
f010d005:	8b 40 08             	mov    0x8(%eax),%eax
f010d008:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d00b:	76 14                	jbe    f010d021 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d00d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d010:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d013:	8b 45 10             	mov    0x10(%ebp),%eax
f010d016:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d018:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d01b:	48                   	dec    %eax
f010d01c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d01f:	eb 12                	jmp    f010d033 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d021:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d024:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d027:	89 10                	mov    %edx,(%eax)
			l = m;
f010d029:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d02c:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d02f:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d033:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d036:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d039:	0f 8e 2a ff ff ff    	jle    f010cf69 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d03f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d043:	75 0f                	jne    f010d054 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d045:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d048:	8b 00                	mov    (%eax),%eax
f010d04a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d04d:	8b 45 10             	mov    0x10(%ebp),%eax
f010d050:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d052:	eb 3d                	jmp    f010d091 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d054:	8b 45 10             	mov    0x10(%ebp),%eax
f010d057:	8b 00                	mov    (%eax),%eax
f010d059:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d05c:	eb 03                	jmp    f010d061 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d05e:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d061:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d064:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d066:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d069:	7d 1e                	jge    f010d089 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d06b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d06e:	89 d0                	mov    %edx,%eax
f010d070:	01 c0                	add    %eax,%eax
f010d072:	01 d0                	add    %edx,%eax
f010d074:	c1 e0 02             	shl    $0x2,%eax
f010d077:	89 c2                	mov    %eax,%edx
f010d079:	8b 45 08             	mov    0x8(%ebp),%eax
f010d07c:	01 d0                	add    %edx,%eax
f010d07e:	8a 40 04             	mov    0x4(%eax),%al
f010d081:	0f b6 c0             	movzbl %al,%eax
f010d084:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d087:	75 d5                	jne    f010d05e <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d089:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d08c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d08f:	89 10                	mov    %edx,(%eax)
	}
}
f010d091:	90                   	nop
f010d092:	c9                   	leave  
f010d093:	c3                   	ret    

f010d094 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d094:	55                   	push   %ebp
f010d095:	89 e5                	mov    %esp,%ebp
f010d097:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d09a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d09d:	c7 00 04 2e 13 f0    	movl   $0xf0132e04,(%eax)
	info->eip_line = 0;
f010d0a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d0ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0b0:	c7 40 08 04 2e 13 f0 	movl   $0xf0132e04,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d0b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0ba:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d0c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0c4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d0c7:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d0ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0cd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d0d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0d7:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d0dc:	76 1e                	jbe    f010d0fc <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d0de:	c7 45 f4 1c af 13 f0 	movl   $0xf013af1c,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d0e5:	c7 45 f0 d0 63 17 f0 	movl   $0xf01763d0,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d0ec:	c7 45 ec d1 63 17 f0 	movl   $0xf01763d1,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d0f3:	c7 45 e8 58 30 18 f0 	movl   $0xf0183058,-0x18(%ebp)
f010d0fa:	eb 2a                	jmp    f010d126 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d0fc:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d103:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d106:	8b 00                	mov    (%eax),%eax
f010d108:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d10b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d10e:	8b 40 04             	mov    0x4(%eax),%eax
f010d111:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d114:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d117:	8b 40 08             	mov    0x8(%eax),%eax
f010d11a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d11d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d120:	8b 40 0c             	mov    0xc(%eax),%eax
f010d123:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d126:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d129:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d12c:	76 0a                	jbe    f010d138 <debuginfo_eip+0xa4>
f010d12e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d131:	48                   	dec    %eax
f010d132:	8a 00                	mov    (%eax),%al
f010d134:	84 c0                	test   %al,%al
f010d136:	74 0a                	je     f010d142 <debuginfo_eip+0xae>
		return -1;
f010d138:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d13d:	e9 01 02 00 00       	jmp    f010d343 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d142:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d149:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d14c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d14f:	29 c2                	sub    %eax,%edx
f010d151:	89 d0                	mov    %edx,%eax
f010d153:	c1 f8 02             	sar    $0x2,%eax
f010d156:	89 c2                	mov    %eax,%edx
f010d158:	89 d0                	mov    %edx,%eax
f010d15a:	c1 e0 02             	shl    $0x2,%eax
f010d15d:	01 d0                	add    %edx,%eax
f010d15f:	c1 e0 02             	shl    $0x2,%eax
f010d162:	01 d0                	add    %edx,%eax
f010d164:	c1 e0 02             	shl    $0x2,%eax
f010d167:	01 d0                	add    %edx,%eax
f010d169:	89 c1                	mov    %eax,%ecx
f010d16b:	c1 e1 08             	shl    $0x8,%ecx
f010d16e:	01 c8                	add    %ecx,%eax
f010d170:	89 c1                	mov    %eax,%ecx
f010d172:	c1 e1 10             	shl    $0x10,%ecx
f010d175:	01 c8                	add    %ecx,%eax
f010d177:	01 c0                	add    %eax,%eax
f010d179:	01 d0                	add    %edx,%eax
f010d17b:	48                   	dec    %eax
f010d17c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d17f:	ff 75 08             	pushl  0x8(%ebp)
f010d182:	6a 64                	push   $0x64
f010d184:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d187:	50                   	push   %eax
f010d188:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d18b:	50                   	push   %eax
f010d18c:	ff 75 f4             	pushl  -0xc(%ebp)
f010d18f:	e8 b3 fd ff ff       	call   f010cf47 <stab_binsearch>
f010d194:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d197:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d19a:	85 c0                	test   %eax,%eax
f010d19c:	75 0a                	jne    f010d1a8 <debuginfo_eip+0x114>
		return -1;
f010d19e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d1a3:	e9 9b 01 00 00       	jmp    f010d343 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d1a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d1ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d1ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d1b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d1b4:	ff 75 08             	pushl  0x8(%ebp)
f010d1b7:	6a 24                	push   $0x24
f010d1b9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d1bc:	50                   	push   %eax
f010d1bd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d1c0:	50                   	push   %eax
f010d1c1:	ff 75 f4             	pushl  -0xc(%ebp)
f010d1c4:	e8 7e fd ff ff       	call   f010cf47 <stab_binsearch>
f010d1c9:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d1cc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d1cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d1d2:	39 c2                	cmp    %eax,%edx
f010d1d4:	0f 8f 86 00 00 00    	jg     f010d260 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d1da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d1dd:	89 c2                	mov    %eax,%edx
f010d1df:	89 d0                	mov    %edx,%eax
f010d1e1:	01 c0                	add    %eax,%eax
f010d1e3:	01 d0                	add    %edx,%eax
f010d1e5:	c1 e0 02             	shl    $0x2,%eax
f010d1e8:	89 c2                	mov    %eax,%edx
f010d1ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1ed:	01 d0                	add    %edx,%eax
f010d1ef:	8b 00                	mov    (%eax),%eax
f010d1f1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d1f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1f7:	29 d1                	sub    %edx,%ecx
f010d1f9:	89 ca                	mov    %ecx,%edx
f010d1fb:	39 d0                	cmp    %edx,%eax
f010d1fd:	73 22                	jae    f010d221 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d1ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d202:	89 c2                	mov    %eax,%edx
f010d204:	89 d0                	mov    %edx,%eax
f010d206:	01 c0                	add    %eax,%eax
f010d208:	01 d0                	add    %edx,%eax
f010d20a:	c1 e0 02             	shl    $0x2,%eax
f010d20d:	89 c2                	mov    %eax,%edx
f010d20f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d212:	01 d0                	add    %edx,%eax
f010d214:	8b 10                	mov    (%eax),%edx
f010d216:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d219:	01 c2                	add    %eax,%edx
f010d21b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d21e:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d221:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d224:	89 c2                	mov    %eax,%edx
f010d226:	89 d0                	mov    %edx,%eax
f010d228:	01 c0                	add    %eax,%eax
f010d22a:	01 d0                	add    %edx,%eax
f010d22c:	c1 e0 02             	shl    $0x2,%eax
f010d22f:	89 c2                	mov    %eax,%edx
f010d231:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d234:	01 d0                	add    %edx,%eax
f010d236:	8b 50 08             	mov    0x8(%eax),%edx
f010d239:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d23c:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d23f:	8b 55 08             	mov    0x8(%ebp),%edx
f010d242:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d245:	8b 40 10             	mov    0x10(%eax),%eax
f010d248:	29 c2                	sub    %eax,%edx
f010d24a:	89 d0                	mov    %edx,%eax
f010d24c:	c1 f8 02             	sar    $0x2,%eax
f010d24f:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d252:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d255:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d258:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d25b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d25e:	eb 15                	jmp    f010d275 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d260:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d263:	8b 55 08             	mov    0x8(%ebp),%edx
f010d266:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d269:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d26c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d26f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d272:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d275:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d278:	8b 40 08             	mov    0x8(%eax),%eax
f010d27b:	83 ec 08             	sub    $0x8,%esp
f010d27e:	6a 3a                	push   $0x3a
f010d280:	50                   	push   %eax
f010d281:	e8 ca 19 02 00       	call   f012ec50 <strfind>
f010d286:	83 c4 10             	add    $0x10,%esp
f010d289:	89 c2                	mov    %eax,%edx
f010d28b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d28e:	8b 40 08             	mov    0x8(%eax),%eax
f010d291:	29 c2                	sub    %eax,%edx
f010d293:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d296:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d299:	eb 03                	jmp    f010d29e <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d29b:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d29e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2a1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d2a4:	7c 4e                	jl     f010d2f4 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d2a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2a9:	89 d0                	mov    %edx,%eax
f010d2ab:	01 c0                	add    %eax,%eax
f010d2ad:	01 d0                	add    %edx,%eax
f010d2af:	c1 e0 02             	shl    $0x2,%eax
f010d2b2:	89 c2                	mov    %eax,%edx
f010d2b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2b7:	01 d0                	add    %edx,%eax
f010d2b9:	8a 40 04             	mov    0x4(%eax),%al
f010d2bc:	3c 84                	cmp    $0x84,%al
f010d2be:	74 34                	je     f010d2f4 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d2c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2c3:	89 d0                	mov    %edx,%eax
f010d2c5:	01 c0                	add    %eax,%eax
f010d2c7:	01 d0                	add    %edx,%eax
f010d2c9:	c1 e0 02             	shl    $0x2,%eax
f010d2cc:	89 c2                	mov    %eax,%edx
f010d2ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2d1:	01 d0                	add    %edx,%eax
f010d2d3:	8a 40 04             	mov    0x4(%eax),%al
f010d2d6:	3c 64                	cmp    $0x64,%al
f010d2d8:	75 c1                	jne    f010d29b <debuginfo_eip+0x207>
f010d2da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2dd:	89 d0                	mov    %edx,%eax
f010d2df:	01 c0                	add    %eax,%eax
f010d2e1:	01 d0                	add    %edx,%eax
f010d2e3:	c1 e0 02             	shl    $0x2,%eax
f010d2e6:	89 c2                	mov    %eax,%edx
f010d2e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2eb:	01 d0                	add    %edx,%eax
f010d2ed:	8b 40 08             	mov    0x8(%eax),%eax
f010d2f0:	85 c0                	test   %eax,%eax
f010d2f2:	74 a7                	je     f010d29b <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d2f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2f7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d2fa:	7c 42                	jl     f010d33e <debuginfo_eip+0x2aa>
f010d2fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d2ff:	89 d0                	mov    %edx,%eax
f010d301:	01 c0                	add    %eax,%eax
f010d303:	01 d0                	add    %edx,%eax
f010d305:	c1 e0 02             	shl    $0x2,%eax
f010d308:	89 c2                	mov    %eax,%edx
f010d30a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d30d:	01 d0                	add    %edx,%eax
f010d30f:	8b 00                	mov    (%eax),%eax
f010d311:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d314:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d317:	29 d1                	sub    %edx,%ecx
f010d319:	89 ca                	mov    %ecx,%edx
f010d31b:	39 d0                	cmp    %edx,%eax
f010d31d:	73 1f                	jae    f010d33e <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d31f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d322:	89 d0                	mov    %edx,%eax
f010d324:	01 c0                	add    %eax,%eax
f010d326:	01 d0                	add    %edx,%eax
f010d328:	c1 e0 02             	shl    $0x2,%eax
f010d32b:	89 c2                	mov    %eax,%edx
f010d32d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d330:	01 d0                	add    %edx,%eax
f010d332:	8b 10                	mov    (%eax),%edx
f010d334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d337:	01 c2                	add    %eax,%edx
f010d339:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d33c:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d33e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d343:	c9                   	leave  
f010d344:	c3                   	ret    

f010d345 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d345:	55                   	push   %ebp
f010d346:	89 e5                	mov    %esp,%ebp
f010d348:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d34b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d34f:	74 1c                	je     f010d36d <setPageReplacmentAlgorithmLRU+0x28>
f010d351:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d355:	74 16                	je     f010d36d <setPageReplacmentAlgorithmLRU+0x28>
f010d357:	68 10 2e 13 f0       	push   $0xf0132e10
f010d35c:	68 5a 2e 13 f0       	push   $0xf0132e5a
f010d361:	6a 18                	push   $0x18
f010d363:	68 6f 2e 13 f0       	push   $0xf0132e6f
f010d368:	e8 43 2e ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d36d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d370:	a3 fc be 2b f0       	mov    %eax,0xf02bbefc
}
f010d375:	90                   	nop
f010d376:	c9                   	leave  
f010d377:	c3                   	ret    

f010d378 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d378:	55                   	push   %ebp
f010d379:	89 e5                	mov    %esp,%ebp
f010d37b:	c7 05 fc be 2b f0 03 	movl   $0x3,0xf02bbefc
f010d382:	00 00 00 
f010d385:	90                   	nop
f010d386:	5d                   	pop    %ebp
f010d387:	c3                   	ret    

f010d388 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d388:	55                   	push   %ebp
f010d389:	89 e5                	mov    %esp,%ebp
f010d38b:	c7 05 fc be 2b f0 04 	movl   $0x4,0xf02bbefc
f010d392:	00 00 00 
f010d395:	90                   	nop
f010d396:	5d                   	pop    %ebp
f010d397:	c3                   	ret    

f010d398 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d398:	55                   	push   %ebp
f010d399:	89 e5                	mov    %esp,%ebp
f010d39b:	c7 05 fc be 2b f0 05 	movl   $0x5,0xf02bbefc
f010d3a2:	00 00 00 
f010d3a5:	90                   	nop
f010d3a6:	5d                   	pop    %ebp
f010d3a7:	c3                   	ret    

f010d3a8 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d3a8:	55                   	push   %ebp
f010d3a9:	89 e5                	mov    %esp,%ebp
f010d3ab:	c7 05 fc be 2b f0 07 	movl   $0x7,0xf02bbefc
f010d3b2:	00 00 00 
f010d3b5:	90                   	nop
f010d3b6:	5d                   	pop    %ebp
f010d3b7:	c3                   	ret    

f010d3b8 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d3b8:	55                   	push   %ebp
f010d3b9:	89 e5                	mov    %esp,%ebp
f010d3bb:	c7 05 fc be 2b f0 06 	movl   $0x6,0xf02bbefc
f010d3c2:	00 00 00 
f010d3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c8:	a3 1c 3b 25 f0       	mov    %eax,0xf0253b1c
f010d3cd:	90                   	nop
f010d3ce:	5d                   	pop    %ebp
f010d3cf:	c3                   	ret    

f010d3d0 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d3d0:	55                   	push   %ebp
f010d3d1:	89 e5                	mov    %esp,%ebp
f010d3d3:	8b 15 fc be 2b f0    	mov    0xf02bbefc,%edx
f010d3d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3dc:	39 c2                	cmp    %eax,%edx
f010d3de:	0f 94 c0             	sete   %al
f010d3e1:	0f b6 c0             	movzbl %al,%eax
f010d3e4:	5d                   	pop    %ebp
f010d3e5:	c3                   	ret    

f010d3e6 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d3e6:	55                   	push   %ebp
f010d3e7:	89 e5                	mov    %esp,%ebp
f010d3e9:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d3ee:	83 f8 03             	cmp    $0x3,%eax
f010d3f1:	75 07                	jne    f010d3fa <isPageReplacmentAlgorithmCLOCK+0x14>
f010d3f3:	b8 01 00 00 00       	mov    $0x1,%eax
f010d3f8:	eb 05                	jmp    f010d3ff <isPageReplacmentAlgorithmCLOCK+0x19>
f010d3fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3ff:	5d                   	pop    %ebp
f010d400:	c3                   	ret    

f010d401 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d401:	55                   	push   %ebp
f010d402:	89 e5                	mov    %esp,%ebp
f010d404:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d409:	83 f8 04             	cmp    $0x4,%eax
f010d40c:	75 07                	jne    f010d415 <isPageReplacmentAlgorithmFIFO+0x14>
f010d40e:	b8 01 00 00 00       	mov    $0x1,%eax
f010d413:	eb 05                	jmp    f010d41a <isPageReplacmentAlgorithmFIFO+0x19>
f010d415:	b8 00 00 00 00       	mov    $0x0,%eax
f010d41a:	5d                   	pop    %ebp
f010d41b:	c3                   	ret    

f010d41c <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d41c:	55                   	push   %ebp
f010d41d:	89 e5                	mov    %esp,%ebp
f010d41f:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d424:	83 f8 05             	cmp    $0x5,%eax
f010d427:	75 07                	jne    f010d430 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d429:	b8 01 00 00 00       	mov    $0x1,%eax
f010d42e:	eb 05                	jmp    f010d435 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d430:	b8 00 00 00 00       	mov    $0x0,%eax
f010d435:	5d                   	pop    %ebp
f010d436:	c3                   	ret    

f010d437 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d437:	55                   	push   %ebp
f010d438:	89 e5                	mov    %esp,%ebp
f010d43a:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d43f:	83 f8 07             	cmp    $0x7,%eax
f010d442:	75 07                	jne    f010d44b <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d444:	b8 01 00 00 00       	mov    $0x1,%eax
f010d449:	eb 05                	jmp    f010d450 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d44b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d450:	5d                   	pop    %ebp
f010d451:	c3                   	ret    

f010d452 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d452:	55                   	push   %ebp
f010d453:	89 e5                	mov    %esp,%ebp
f010d455:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f010d45a:	83 f8 06             	cmp    $0x6,%eax
f010d45d:	75 07                	jne    f010d466 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d45f:	b8 01 00 00 00       	mov    $0x1,%eax
f010d464:	eb 05                	jmp    f010d46b <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d466:	b8 00 00 00 00       	mov    $0x0,%eax
f010d46b:	5d                   	pop    %ebp
f010d46c:	c3                   	ret    

f010d46d <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d46d:	55                   	push   %ebp
f010d46e:	89 e5                	mov    %esp,%ebp
f010d470:	8b 45 08             	mov    0x8(%ebp),%eax
f010d473:	a3 cc be 2b f0       	mov    %eax,0xf02bbecc
f010d478:	90                   	nop
f010d479:	5d                   	pop    %ebp
f010d47a:	c3                   	ret    

f010d47b <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d47b:	55                   	push   %ebp
f010d47c:	89 e5                	mov    %esp,%ebp
f010d47e:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f010d483:	5d                   	pop    %ebp
f010d484:	c3                   	ret    

f010d485 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d485:	55                   	push   %ebp
f010d486:	89 e5                	mov    %esp,%ebp
f010d488:	8b 45 08             	mov    0x8(%ebp),%eax
f010d48b:	a3 14 bf 2b f0       	mov    %eax,0xf02bbf14
f010d490:	90                   	nop
f010d491:	5d                   	pop    %ebp
f010d492:	c3                   	ret    

f010d493 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d493:	55                   	push   %ebp
f010d494:	89 e5                	mov    %esp,%ebp
f010d496:	a1 14 bf 2b f0       	mov    0xf02bbf14,%eax
f010d49b:	5d                   	pop    %ebp
f010d49c:	c3                   	ret    

f010d49d <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d49d:	55                   	push   %ebp
f010d49e:	89 e5                	mov    %esp,%ebp
f010d4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a3:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f010d4a8:	90                   	nop
f010d4a9:	5d                   	pop    %ebp
f010d4aa:	c3                   	ret    

f010d4ab <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d4ab:	55                   	push   %ebp
f010d4ac:	89 e5                	mov    %esp,%ebp
f010d4ae:	a1 24 bf 2b f0       	mov    0xf02bbf24,%eax
f010d4b3:	5d                   	pop    %ebp
f010d4b4:	c3                   	ret    

f010d4b5 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d4b5:	55                   	push   %ebp
f010d4b6:	89 e5                	mov    %esp,%ebp
f010d4b8:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d4bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4be:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d4c4:	83 ec 04             	sub    $0x4,%esp
f010d4c7:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d4ca:	52                   	push   %edx
f010d4cb:	ff 75 0c             	pushl  0xc(%ebp)
f010d4ce:	50                   	push   %eax
f010d4cf:	e8 6d 9d ff ff       	call   f0107241 <__static_cpt>
f010d4d4:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d4d7:	90                   	nop
f010d4d8:	c9                   	leave  
f010d4d9:	c3                   	ret    

f010d4da <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d4da:	55                   	push   %ebp
f010d4db:	89 e5                	mov    %esp,%ebp
f010d4dd:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d4e0:	83 ec 0c             	sub    $0xc,%esp
f010d4e3:	ff 75 08             	pushl  0x8(%ebp)
f010d4e6:	e8 9e a9 ff ff       	call   f0107e89 <env_page_ws_get_size>
f010d4eb:	83 c4 10             	add    $0x10,%esp
f010d4ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d4f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4f4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d4fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d4fd:	76 14                	jbe    f010d513 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d4ff:	83 ec 04             	sub    $0x4,%esp
f010d502:	68 8c 2e 13 f0       	push   $0xf0132e8c
f010d507:	6a 55                	push   $0x55
f010d509:	68 6f 2e 13 f0       	push   $0xf0132e6f
f010d50e:	e8 9d 2c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d513:	e8 e9 fe ff ff       	call   f010d401 <isPageReplacmentAlgorithmFIFO>
f010d518:	85 c0                	test   %eax,%eax
f010d51a:	74 14                	je     f010d530 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d51c:	83 ec 04             	sub    $0x4,%esp
f010d51f:	68 c8 2e 13 f0       	push   $0xf0132ec8
f010d524:	6a 61                	push   $0x61
f010d526:	68 6f 2e 13 f0       	push   $0xf0132e6f
f010d52b:	e8 80 2c ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d530:	83 ec 0c             	sub    $0xc,%esp
f010d533:	6a 02                	push   $0x2
f010d535:	e8 96 fe ff ff       	call   f010d3d0 <isPageReplacmentAlgorithmLRU>
f010d53a:	83 c4 10             	add    $0x10,%esp
f010d53d:	85 c0                	test   %eax,%eax
f010d53f:	74 14                	je     f010d555 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d541:	83 ec 04             	sub    $0x4,%esp
f010d544:	68 0c 2f 13 f0       	push   $0xf0132f0c
f010d549:	6a 67                	push   $0x67
f010d54b:	68 6f 2e 13 f0       	push   $0xf0132e6f
f010d550:	e8 5b 2c ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d555:	90                   	nop
f010d556:	c9                   	leave  
f010d557:	c3                   	ret    

f010d558 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d558:	55                   	push   %ebp
f010d559:	89 e5                	mov    %esp,%ebp
f010d55b:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d55e:	83 ec 04             	sub    $0x4,%esp
f010d561:	68 50 2f 13 f0       	push   $0xf0132f50
f010d566:	6a 70                	push   $0x70
f010d568:	68 6f 2e 13 f0       	push   $0xf0132e6f
f010d56d:	e8 3e 2c ff ff       	call   f01001b0 <_panic>

f010d572 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d572:	55                   	push   %ebp
f010d573:	89 e5                	mov    %esp,%ebp
f010d575:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d57f:	e9 aa 00 00 00       	jmp    f010d62e <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d584:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d587:	89 d0                	mov    %edx,%eax
f010d589:	c1 e0 02             	shl    $0x2,%eax
f010d58c:	01 d0                	add    %edx,%eax
f010d58e:	01 c0                	add    %eax,%eax
f010d590:	01 d0                	add    %edx,%eax
f010d592:	01 c0                	add    %eax,%eax
f010d594:	01 d0                	add    %edx,%eax
f010d596:	c1 e0 02             	shl    $0x2,%eax
f010d599:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d59e:	83 ec 04             	sub    $0x4,%esp
f010d5a1:	6a 5c                	push   $0x5c
f010d5a3:	6a 00                	push   $0x0
f010d5a5:	50                   	push   %eax
f010d5a6:	e8 d1 16 02 00       	call   f012ec7c <memset>
f010d5ab:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d5ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5b1:	89 d0                	mov    %edx,%eax
f010d5b3:	c1 e0 02             	shl    $0x2,%eax
f010d5b6:	01 d0                	add    %edx,%eax
f010d5b8:	01 c0                	add    %eax,%eax
f010d5ba:	01 d0                	add    %edx,%eax
f010d5bc:	01 c0                	add    %eax,%eax
f010d5be:	01 d0                	add    %edx,%eax
f010d5c0:	c1 e0 02             	shl    $0x2,%eax
f010d5c3:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d5c8:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d5cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5ce:	89 d0                	mov    %edx,%eax
f010d5d0:	c1 e0 02             	shl    $0x2,%eax
f010d5d3:	01 d0                	add    %edx,%eax
f010d5d5:	01 c0                	add    %eax,%eax
f010d5d7:	01 d0                	add    %edx,%eax
f010d5d9:	01 c0                	add    %eax,%eax
f010d5db:	01 d0                	add    %edx,%eax
f010d5dd:	c1 e0 02             	shl    $0x2,%eax
f010d5e0:	05 e4 9a 2b f0       	add    $0xf02b9ae4,%eax
f010d5e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d5eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5ee:	89 d0                	mov    %edx,%eax
f010d5f0:	c1 e0 02             	shl    $0x2,%eax
f010d5f3:	01 d0                	add    %edx,%eax
f010d5f5:	01 c0                	add    %eax,%eax
f010d5f7:	01 d0                	add    %edx,%eax
f010d5f9:	01 c0                	add    %eax,%eax
f010d5fb:	01 d0                	add    %edx,%eax
f010d5fd:	c1 e0 02             	shl    $0x2,%eax
f010d600:	05 e8 9a 2b f0       	add    $0xf02b9ae8,%eax
f010d605:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d60b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d60e:	89 d0                	mov    %edx,%eax
f010d610:	c1 e0 02             	shl    $0x2,%eax
f010d613:	01 d0                	add    %edx,%eax
f010d615:	01 c0                	add    %eax,%eax
f010d617:	01 d0                	add    %edx,%eax
f010d619:	01 c0                	add    %eax,%eax
f010d61b:	01 d0                	add    %edx,%eax
f010d61d:	c1 e0 02             	shl    $0x2,%eax
f010d620:	05 f0 9a 2b f0       	add    $0xf02b9af0,%eax
f010d625:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d62b:	ff 45 f4             	incl   -0xc(%ebp)
f010d62e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d632:	0f 8e 4c ff ff ff    	jle    f010d584 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d638:	90                   	nop
f010d639:	c9                   	leave  
f010d63a:	c3                   	ret    

f010d63b <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d63b:	55                   	push   %ebp
f010d63c:	89 e5                	mov    %esp,%ebp
f010d63e:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d641:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d648:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d64f:	eb 2b                	jmp    f010d67c <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d651:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010d654:	89 d0                	mov    %edx,%eax
f010d656:	c1 e0 02             	shl    $0x2,%eax
f010d659:	01 d0                	add    %edx,%eax
f010d65b:	01 c0                	add    %eax,%eax
f010d65d:	01 d0                	add    %edx,%eax
f010d65f:	01 c0                	add    %eax,%eax
f010d661:	01 d0                	add    %edx,%eax
f010d663:	c1 e0 02             	shl    $0x2,%eax
f010d666:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d66b:	8a 00                	mov    (%eax),%al
f010d66d:	84 c0                	test   %al,%al
f010d66f:	74 08                	je     f010d679 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d671:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d674:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010d677:	eb 09                	jmp    f010d682 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d679:	ff 45 f8             	incl   -0x8(%ebp)
f010d67c:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010d680:	7e cf                	jle    f010d651 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d682:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010d686:	75 07                	jne    f010d68f <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010d688:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010d68d:	eb 40                	jmp    f010d6cf <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d68f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d692:	89 d0                	mov    %edx,%eax
f010d694:	c1 e0 02             	shl    $0x2,%eax
f010d697:	01 d0                	add    %edx,%eax
f010d699:	01 c0                	add    %eax,%eax
f010d69b:	01 d0                	add    %edx,%eax
f010d69d:	01 c0                	add    %eax,%eax
f010d69f:	01 d0                	add    %edx,%eax
f010d6a1:	c1 e0 02             	shl    $0x2,%eax
f010d6a4:	8d 90 a0 9a 2b f0    	lea    -0xfd46560(%eax),%edx
f010d6aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6ad:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d6af:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d6b2:	89 d0                	mov    %edx,%eax
f010d6b4:	c1 e0 02             	shl    $0x2,%eax
f010d6b7:	01 d0                	add    %edx,%eax
f010d6b9:	01 c0                	add    %eax,%eax
f010d6bb:	01 d0                	add    %edx,%eax
f010d6bd:	01 c0                	add    %eax,%eax
f010d6bf:	01 d0                	add    %edx,%eax
f010d6c1:	c1 e0 02             	shl    $0x2,%eax
f010d6c4:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d6c9:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d6cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d6cf:	c9                   	leave  
f010d6d0:	c3                   	ret    

f010d6d1 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d6d1:	55                   	push   %ebp
f010d6d2:	89 e5                	mov    %esp,%ebp
f010d6d4:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d6d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d6de:	eb 7a                	jmp    f010d75a <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d6e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6e3:	89 d0                	mov    %edx,%eax
f010d6e5:	c1 e0 02             	shl    $0x2,%eax
f010d6e8:	01 d0                	add    %edx,%eax
f010d6ea:	01 c0                	add    %eax,%eax
f010d6ec:	01 d0                	add    %edx,%eax
f010d6ee:	01 c0                	add    %eax,%eax
f010d6f0:	01 d0                	add    %edx,%eax
f010d6f2:	c1 e0 02             	shl    $0x2,%eax
f010d6f5:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d6fa:	8a 00                	mov    (%eax),%al
f010d6fc:	84 c0                	test   %al,%al
f010d6fe:	75 56                	jne    f010d756 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d700:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d703:	89 d0                	mov    %edx,%eax
f010d705:	c1 e0 02             	shl    $0x2,%eax
f010d708:	01 d0                	add    %edx,%eax
f010d70a:	01 c0                	add    %eax,%eax
f010d70c:	01 d0                	add    %edx,%eax
f010d70e:	01 c0                	add    %eax,%eax
f010d710:	01 d0                	add    %edx,%eax
f010d712:	c1 e0 02             	shl    $0x2,%eax
f010d715:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d71a:	8b 00                	mov    (%eax),%eax
f010d71c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d71f:	75 36                	jne    f010d757 <get_semaphore_object_ID+0x86>
f010d721:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d724:	89 d0                	mov    %edx,%eax
f010d726:	c1 e0 02             	shl    $0x2,%eax
f010d729:	01 d0                	add    %edx,%eax
f010d72b:	01 c0                	add    %eax,%eax
f010d72d:	01 d0                	add    %edx,%eax
f010d72f:	01 c0                	add    %eax,%eax
f010d731:	01 d0                	add    %edx,%eax
f010d733:	c1 e0 02             	shl    $0x2,%eax
f010d736:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d73b:	83 c0 04             	add    $0x4,%eax
f010d73e:	83 ec 08             	sub    $0x8,%esp
f010d741:	50                   	push   %eax
f010d742:	ff 75 0c             	pushl  0xc(%ebp)
f010d745:	e8 50 14 02 00       	call   f012eb9a <strcmp>
f010d74a:	83 c4 10             	add    $0x10,%esp
f010d74d:	85 c0                	test   %eax,%eax
f010d74f:	75 06                	jne    f010d757 <get_semaphore_object_ID+0x86>
		{
			return i;
f010d751:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d754:	eb 0f                	jmp    f010d765 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d756:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d757:	ff 45 f4             	incl   -0xc(%ebp)
f010d75a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d75e:	7e 80                	jle    f010d6e0 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d760:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d765:	c9                   	leave  
f010d766:	c3                   	ret    

f010d767 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d767:	55                   	push   %ebp
f010d768:	89 e5                	mov    %esp,%ebp
f010d76a:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d76d:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d771:	76 0a                	jbe    f010d77d <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d773:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d778:	e9 ac 00 00 00       	jmp    f010d829 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d77d:	8b 55 08             	mov    0x8(%ebp),%edx
f010d780:	89 d0                	mov    %edx,%eax
f010d782:	c1 e0 02             	shl    $0x2,%eax
f010d785:	01 d0                	add    %edx,%eax
f010d787:	01 c0                	add    %eax,%eax
f010d789:	01 d0                	add    %edx,%eax
f010d78b:	01 c0                	add    %eax,%eax
f010d78d:	01 d0                	add    %edx,%eax
f010d78f:	c1 e0 02             	shl    $0x2,%eax
f010d792:	05 a0 9a 2b f0       	add    $0xf02b9aa0,%eax
f010d797:	83 ec 04             	sub    $0x4,%esp
f010d79a:	6a 5c                	push   $0x5c
f010d79c:	6a 00                	push   $0x0
f010d79e:	50                   	push   %eax
f010d79f:	e8 d8 14 02 00       	call   f012ec7c <memset>
f010d7a4:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d7a7:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7aa:	89 d0                	mov    %edx,%eax
f010d7ac:	c1 e0 02             	shl    $0x2,%eax
f010d7af:	01 d0                	add    %edx,%eax
f010d7b1:	01 c0                	add    %eax,%eax
f010d7b3:	01 d0                	add    %edx,%eax
f010d7b5:	01 c0                	add    %eax,%eax
f010d7b7:	01 d0                	add    %edx,%eax
f010d7b9:	c1 e0 02             	shl    $0x2,%eax
f010d7bc:	05 f8 9a 2b f0       	add    $0xf02b9af8,%eax
f010d7c1:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d7c4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7c7:	89 d0                	mov    %edx,%eax
f010d7c9:	c1 e0 02             	shl    $0x2,%eax
f010d7cc:	01 d0                	add    %edx,%eax
f010d7ce:	01 c0                	add    %eax,%eax
f010d7d0:	01 d0                	add    %edx,%eax
f010d7d2:	01 c0                	add    %eax,%eax
f010d7d4:	01 d0                	add    %edx,%eax
f010d7d6:	c1 e0 02             	shl    $0x2,%eax
f010d7d9:	05 e4 9a 2b f0       	add    $0xf02b9ae4,%eax
f010d7de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d7e4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7e7:	89 d0                	mov    %edx,%eax
f010d7e9:	c1 e0 02             	shl    $0x2,%eax
f010d7ec:	01 d0                	add    %edx,%eax
f010d7ee:	01 c0                	add    %eax,%eax
f010d7f0:	01 d0                	add    %edx,%eax
f010d7f2:	01 c0                	add    %eax,%eax
f010d7f4:	01 d0                	add    %edx,%eax
f010d7f6:	c1 e0 02             	shl    $0x2,%eax
f010d7f9:	05 e8 9a 2b f0       	add    $0xf02b9ae8,%eax
f010d7fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d804:	8b 55 08             	mov    0x8(%ebp),%edx
f010d807:	89 d0                	mov    %edx,%eax
f010d809:	c1 e0 02             	shl    $0x2,%eax
f010d80c:	01 d0                	add    %edx,%eax
f010d80e:	01 c0                	add    %eax,%eax
f010d810:	01 d0                	add    %edx,%eax
f010d812:	01 c0                	add    %eax,%eax
f010d814:	01 d0                	add    %edx,%eax
f010d816:	c1 e0 02             	shl    $0x2,%eax
f010d819:	05 f0 9a 2b f0       	add    $0xf02b9af0,%eax
f010d81e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d829:	c9                   	leave  
f010d82a:	c3                   	ret    

f010d82b <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d82b:	55                   	push   %ebp
f010d82c:	89 e5                	mov    %esp,%ebp
f010d82e:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010d831:	83 ec 04             	sub    $0x4,%esp
f010d834:	68 74 2f 13 f0       	push   $0xf0132f74
f010d839:	68 95 00 00 00       	push   $0x95
f010d83e:	68 a2 2f 13 f0       	push   $0xf0132fa2
f010d843:	e8 68 29 ff ff       	call   f01001b0 <_panic>

f010d848 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d848:	55                   	push   %ebp
f010d849:	89 e5                	mov    %esp,%ebp
f010d84b:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010d84e:	83 ec 04             	sub    $0x4,%esp
f010d851:	68 c0 2f 13 f0       	push   $0xf0132fc0
f010d856:	68 9e 00 00 00       	push   $0x9e
f010d85b:	68 a2 2f 13 f0       	push   $0xf0132fa2
f010d860:	e8 4b 29 ff ff       	call   f01001b0 <_panic>

f010d865 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d865:	55                   	push   %ebp
f010d866:	89 e5                	mov    %esp,%ebp
f010d868:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010d86b:	83 ec 04             	sub    $0x4,%esp
f010d86e:	68 ec 2f 13 f0       	push   $0xf0132fec
f010d873:	68 a6 00 00 00       	push   $0xa6
f010d878:	68 a2 2f 13 f0       	push   $0xf0132fa2
f010d87d:	e8 2e 29 ff ff       	call   f01001b0 <_panic>

f010d882 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010d882:	55                   	push   %ebp
f010d883:	89 e5                	mov    %esp,%ebp
f010d885:	c7 05 d8 be 2b f0 01 	movl   $0x1,0xf02bbed8
f010d88c:	00 00 00 
f010d88f:	90                   	nop
f010d890:	5d                   	pop    %ebp
f010d891:	c3                   	ret    

f010d892 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010d892:	55                   	push   %ebp
f010d893:	89 e5                	mov    %esp,%ebp
f010d895:	c7 05 d8 be 2b f0 02 	movl   $0x2,0xf02bbed8
f010d89c:	00 00 00 
f010d89f:	90                   	nop
f010d8a0:	5d                   	pop    %ebp
f010d8a1:	c3                   	ret    

f010d8a2 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010d8a2:	55                   	push   %ebp
f010d8a3:	89 e5                	mov    %esp,%ebp
f010d8a5:	c7 05 d8 be 2b f0 03 	movl   $0x3,0xf02bbed8
f010d8ac:	00 00 00 
f010d8af:	90                   	nop
f010d8b0:	5d                   	pop    %ebp
f010d8b1:	c3                   	ret    

f010d8b2 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010d8b2:	55                   	push   %ebp
f010d8b3:	89 e5                	mov    %esp,%ebp
f010d8b5:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d8ba:	83 f8 01             	cmp    $0x1,%eax
f010d8bd:	75 04                	jne    f010d8c3 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010d8bf:	b0 01                	mov    $0x1,%al
f010d8c1:	eb 02                	jmp    f010d8c5 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010d8c3:	b0 00                	mov    $0x0,%al
f010d8c5:	5d                   	pop    %ebp
f010d8c6:	c3                   	ret    

f010d8c7 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010d8c7:	55                   	push   %ebp
f010d8c8:	89 e5                	mov    %esp,%ebp
f010d8ca:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d8cf:	83 f8 02             	cmp    $0x2,%eax
f010d8d2:	75 04                	jne    f010d8d8 <isKHeapPlacementStrategyBESTFIT+0x11>
f010d8d4:	b0 01                	mov    $0x1,%al
f010d8d6:	eb 02                	jmp    f010d8da <isKHeapPlacementStrategyBESTFIT+0x13>
f010d8d8:	b0 00                	mov    $0x0,%al
f010d8da:	5d                   	pop    %ebp
f010d8db:	c3                   	ret    

f010d8dc <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010d8dc:	55                   	push   %ebp
f010d8dd:	89 e5                	mov    %esp,%ebp
f010d8df:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f010d8e4:	83 f8 03             	cmp    $0x3,%eax
f010d8e7:	75 04                	jne    f010d8ed <isKHeapPlacementStrategyNEXTFIT+0x11>
f010d8e9:	b0 01                	mov    $0x1,%al
f010d8eb:	eb 02                	jmp    f010d8ef <isKHeapPlacementStrategyNEXTFIT+0x13>
f010d8ed:	b0 00                	mov    $0x0,%al
f010d8ef:	5d                   	pop    %ebp
f010d8f0:	c3                   	ret    

f010d8f1 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010d8f1:	55                   	push   %ebp
f010d8f2:	89 e5                	mov    %esp,%ebp
f010d8f4:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010d8f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d8fe:	eb 26                	jmp    f010d926 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010d900:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d903:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d90a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d90d:	01 c2                	add    %eax,%edx
f010d90f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d912:	40                   	inc    %eax
f010d913:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d91a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d91d:	01 c8                	add    %ecx,%eax
f010d91f:	8b 00                	mov    (%eax),%eax
f010d921:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010d923:	ff 45 f4             	incl   -0xc(%ebp)
f010d926:	8b 45 08             	mov    0x8(%ebp),%eax
f010d929:	48                   	dec    %eax
f010d92a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d92d:	7f d1                	jg     f010d900 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010d92f:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010d932:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010d939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010d940:	eb 35                	jmp    f010d977 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010d942:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d945:	89 d0                	mov    %edx,%eax
f010d947:	01 c0                	add    %eax,%eax
f010d949:	01 d0                	add    %edx,%eax
f010d94b:	c1 e0 02             	shl    $0x2,%eax
f010d94e:	05 60 ca 18 f0       	add    $0xf018ca60,%eax
f010d953:	8b 10                	mov    (%eax),%edx
f010d955:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d958:	8b 00                	mov    (%eax),%eax
f010d95a:	83 ec 08             	sub    $0x8,%esp
f010d95d:	52                   	push   %edx
f010d95e:	50                   	push   %eax
f010d95f:	e8 36 12 02 00       	call   f012eb9a <strcmp>
f010d964:	83 c4 10             	add    $0x10,%esp
f010d967:	85 c0                	test   %eax,%eax
f010d969:	75 09                	jne    f010d974 <tst_handler+0x83>
		{
			test_found = 1;
f010d96b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010d972:	eb 0f                	jmp    f010d983 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010d974:	ff 45 ec             	incl   -0x14(%ebp)
f010d977:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d97a:	a1 fc ca 18 f0       	mov    0xf018cafc,%eax
f010d97f:	39 c2                	cmp    %eax,%edx
f010d981:	72 bf                	jb     f010d942 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010d983:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d987:	74 29                	je     f010d9b2 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010d989:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d98c:	89 d0                	mov    %edx,%eax
f010d98e:	01 c0                	add    %eax,%eax
f010d990:	01 d0                	add    %edx,%eax
f010d992:	c1 e0 02             	shl    $0x2,%eax
f010d995:	05 68 ca 18 f0       	add    $0xf018ca68,%eax
f010d99a:	8b 00                	mov    (%eax),%eax
f010d99c:	83 ec 08             	sub    $0x8,%esp
f010d99f:	ff 75 0c             	pushl  0xc(%ebp)
f010d9a2:	ff 75 08             	pushl  0x8(%ebp)
f010d9a5:	ff d0                	call   *%eax
f010d9a7:	83 c4 10             	add    $0x10,%esp
f010d9aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010d9ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d9b0:	eb 1b                	jmp    f010d9cd <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010d9b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9b5:	8b 00                	mov    (%eax),%eax
f010d9b7:	83 ec 08             	sub    $0x8,%esp
f010d9ba:	50                   	push   %eax
f010d9bb:	68 a0 32 13 f0       	push   $0xf01332a0
f010d9c0:	e8 6c 34 ff ff       	call   f0100e31 <cprintf>
f010d9c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d9c8:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010d9cd:	c9                   	leave  
f010d9ce:	c3                   	ret    

f010d9cf <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010d9cf:	55                   	push   %ebp
f010d9d0:	89 e5                	mov    %esp,%ebp
f010d9d2:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010d9d5:	e8 3d 70 01 00       	call   f0124a17 <test_three_creation_functions>
	return 0;
f010d9da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9df:	c9                   	leave  
f010d9e0:	c3                   	ret    

f010d9e1 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010d9e1:	55                   	push   %ebp
f010d9e2:	89 e5                	mov    %esp,%ebp
f010d9e4:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010d9e7:	e8 ff 91 00 00       	call   f0116beb <test_priority_normal_and_higher>
	return 0;
f010d9ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9f1:	c9                   	leave  
f010d9f2:	c3                   	ret    

f010d9f3 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010d9f3:	55                   	push   %ebp
f010d9f4:	89 e5                	mov    %esp,%ebp
f010d9f6:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010d9f9:	e8 57 9c 00 00       	call   f0117655 <test_priority_normal_and_lower>
	return 0;
f010d9fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da03:	c9                   	leave  
f010da04:	c3                   	ret    

f010da05 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010da05:	55                   	push   %ebp
f010da06:	89 e5                	mov    %esp,%ebp
f010da08:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010da0b:	e8 1b 72 01 00       	call   f0124c2b <test_kfreeall>
	return 0;
f010da10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da15:	c9                   	leave  
f010da16:	c3                   	ret    

f010da17 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010da17:	55                   	push   %ebp
f010da18:	89 e5                	mov    %esp,%ebp
f010da1a:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010da1d:	e8 a3 86 01 00       	call   f01260c5 <test_kexpand>
	return 0;
f010da22:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da27:	c9                   	leave  
f010da28:	c3                   	ret    

f010da29 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010da29:	55                   	push   %ebp
f010da2a:	89 e5                	mov    %esp,%ebp
f010da2c:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010da2f:	e8 62 92 01 00       	call   f0126c96 <test_kshrink>
	return 0;
f010da34:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da39:	c9                   	leave  
f010da3a:	c3                   	ret    

f010da3b <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010da3b:	55                   	push   %ebp
f010da3c:	89 e5                	mov    %esp,%ebp
f010da3e:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010da41:	e8 57 9f 01 00       	call   f012799d <test_kfreelast>
	return 0;
f010da46:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da4b:	c9                   	leave  
f010da4c:	c3                   	ret    

f010da4d <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010da4d:	55                   	push   %ebp
f010da4e:	89 e5                	mov    %esp,%ebp
f010da50:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010da53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da56:	83 c0 04             	add    $0x4,%eax
f010da59:	8b 00                	mov    (%eax),%eax
f010da5b:	83 ec 04             	sub    $0x4,%esp
f010da5e:	6a 0a                	push   $0xa
f010da60:	6a 00                	push   $0x0
f010da62:	50                   	push   %eax
f010da63:	e8 86 13 02 00       	call   f012edee <strtol>
f010da68:	83 c4 10             	add    $0x10,%esp
f010da6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010da6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010da75:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010da7c:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f010da81:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010da84:	eb 3b                	jmp    f010dac1 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010da86:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da89:	83 c0 5c             	add    $0x5c,%eax
f010da8c:	83 ec 08             	sub    $0x8,%esp
f010da8f:	68 b3 32 13 f0       	push   $0xf01332b3
f010da94:	50                   	push   %eax
f010da95:	e8 00 11 02 00       	call   f012eb9a <strcmp>
f010da9a:	83 c4 10             	add    $0x10,%esp
f010da9d:	85 c0                	test   %eax,%eax
f010da9f:	75 12                	jne    f010dab3 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010daa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010daa5:	74 07                	je     f010daae <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010daa7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010daae:	ff 45 f4             	incl   -0xc(%ebp)
f010dab1:	eb 06                	jmp    f010dab9 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010dab3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dab7:	74 31                	je     f010daea <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010dab9:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f010dabe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dac1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010dac5:	74 08                	je     f010dacf <tst_sc_MLFQ+0x82>
f010dac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010daca:	8b 40 44             	mov    0x44(%eax),%eax
f010dacd:	eb 05                	jmp    f010dad4 <tst_sc_MLFQ+0x87>
f010dacf:	b8 00 00 00 00       	mov    $0x0,%eax
f010dad4:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f010dad9:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f010dade:	85 c0                	test   %eax,%eax
f010dae0:	75 a4                	jne    f010da86 <tst_sc_MLFQ+0x39>
f010dae2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010dae6:	75 9e                	jne    f010da86 <tst_sc_MLFQ+0x39>
f010dae8:	eb 01                	jmp    f010daeb <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010daea:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010daeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010daee:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010daf1:	75 12                	jne    f010db05 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010daf3:	83 ec 0c             	sub    $0xc,%esp
f010daf6:	68 bc 32 13 f0       	push   $0xf01332bc
f010dafb:	e8 31 33 ff ff       	call   f0100e31 <cprintf>
f010db00:	83 c4 10             	add    $0x10,%esp
f010db03:	eb 17                	jmp    f010db1c <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010db05:	83 ec 04             	sub    $0x4,%esp
f010db08:	68 f5 32 13 f0       	push   $0xf01332f5
f010db0d:	68 94 00 00 00       	push   $0x94
f010db12:	68 0b 33 13 f0       	push   $0xf013330b
f010db17:	e8 94 26 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010db1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010db21:	c9                   	leave  
f010db22:	c3                   	ret    

f010db23 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010db23:	55                   	push   %ebp
f010db24:	89 e5                	mov    %esp,%ebp
f010db26:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010db29:	e8 80 3d 00 00       	call   f01118ae <TestAutoCompleteCommand>
f010db2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010db31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010db36:	c9                   	leave  
f010db37:	c3                   	ret    

f010db38 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010db38:	55                   	push   %ebp
f010db39:	89 e5                	mov    %esp,%ebp
f010db3b:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010db3e:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010db42:	74 1a                	je     f010db5e <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010db44:	83 ec 0c             	sub    $0xc,%esp
f010db47:	68 24 33 13 f0       	push   $0xf0133324
f010db4c:	e8 e0 32 ff ff       	call   f0100e31 <cprintf>
f010db51:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db54:	b8 00 00 00 00       	mov    $0x0,%eax
f010db59:	e9 2f 01 00 00       	jmp    f010dc8d <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010db5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db61:	83 c0 04             	add    $0x4,%eax
f010db64:	8b 00                	mov    (%eax),%eax
f010db66:	83 ec 08             	sub    $0x8,%esp
f010db69:	68 61 33 13 f0       	push   $0xf0133361
f010db6e:	50                   	push   %eax
f010db6f:	e8 26 10 02 00       	call   f012eb9a <strcmp>
f010db74:	83 c4 10             	add    $0x10,%esp
f010db77:	85 c0                	test   %eax,%eax
f010db79:	75 0a                	jne    f010db85 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010db7b:	e8 80 06 00 00       	call   f010e200 <test_initialize_dynamic_allocator>
f010db80:	e9 03 01 00 00       	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010db85:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db88:	83 c0 04             	add    $0x4,%eax
f010db8b:	8b 00                	mov    (%eax),%eax
f010db8d:	83 ec 08             	sub    $0x8,%esp
f010db90:	68 66 33 13 f0       	push   $0xf0133366
f010db95:	50                   	push   %eax
f010db96:	e8 ff 0f 02 00       	call   f012eb9a <strcmp>
f010db9b:	83 c4 10             	add    $0x10,%esp
f010db9e:	85 c0                	test   %eax,%eax
f010dba0:	75 0a                	jne    f010dbac <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010dba2:	e8 a1 0a 00 00       	call   f010e648 <test_alloc_block_FF>
f010dba7:	e9 dc 00 00 00       	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	83 c0 04             	add    $0x4,%eax
f010dbb2:	8b 00                	mov    (%eax),%eax
f010dbb4:	83 ec 08             	sub    $0x8,%esp
f010dbb7:	68 6e 33 13 f0       	push   $0xf013336e
f010dbbc:	50                   	push   %eax
f010dbbd:	e8 d8 0f 02 00       	call   f012eb9a <strcmp>
f010dbc2:	83 c4 10             	add    $0x10,%esp
f010dbc5:	85 c0                	test   %eax,%eax
f010dbc7:	75 0a                	jne    f010dbd3 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010dbc9:	e8 84 0e 00 00       	call   f010ea52 <test_alloc_block_BF>
f010dbce:	e9 b5 00 00 00       	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010dbd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd6:	83 c0 04             	add    $0x4,%eax
f010dbd9:	8b 00                	mov    (%eax),%eax
f010dbdb:	83 ec 08             	sub    $0x8,%esp
f010dbde:	68 76 33 13 f0       	push   $0xf0133376
f010dbe3:	50                   	push   %eax
f010dbe4:	e8 b1 0f 02 00       	call   f012eb9a <strcmp>
f010dbe9:	83 c4 10             	add    $0x10,%esp
f010dbec:	85 c0                	test   %eax,%eax
f010dbee:	75 0a                	jne    f010dbfa <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010dbf0:	e8 b3 12 00 00       	call   f010eea8 <test_alloc_block_NF>
f010dbf5:	e9 8e 00 00 00       	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010dbfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbfd:	83 c0 04             	add    $0x4,%eax
f010dc00:	8b 00                	mov    (%eax),%eax
f010dc02:	83 ec 08             	sub    $0x8,%esp
f010dc05:	68 7e 33 13 f0       	push   $0xf013337e
f010dc0a:	50                   	push   %eax
f010dc0b:	e8 8a 0f 02 00       	call   f012eb9a <strcmp>
f010dc10:	83 c4 10             	add    $0x10,%esp
f010dc13:	85 c0                	test   %eax,%eax
f010dc15:	75 07                	jne    f010dc1e <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010dc17:	e8 92 12 00 00       	call   f010eeae <test_free_block_FF>
f010dc1c:	eb 6a                	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010dc1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc21:	83 c0 04             	add    $0x4,%eax
f010dc24:	8b 00                	mov    (%eax),%eax
f010dc26:	83 ec 08             	sub    $0x8,%esp
f010dc29:	68 85 33 13 f0       	push   $0xf0133385
f010dc2e:	50                   	push   %eax
f010dc2f:	e8 66 0f 02 00       	call   f012eb9a <strcmp>
f010dc34:	83 c4 10             	add    $0x10,%esp
f010dc37:	85 c0                	test   %eax,%eax
f010dc39:	75 07                	jne    f010dc42 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010dc3b:	e8 d3 20 00 00       	call   f010fd13 <test_free_block_BF>
f010dc40:	eb 46                	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010dc42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc45:	83 c0 04             	add    $0x4,%eax
f010dc48:	8b 00                	mov    (%eax),%eax
f010dc4a:	83 ec 08             	sub    $0x8,%esp
f010dc4d:	68 8c 33 13 f0       	push   $0xf013338c
f010dc52:	50                   	push   %eax
f010dc53:	e8 42 0f 02 00       	call   f012eb9a <strcmp>
f010dc58:	83 c4 10             	add    $0x10,%esp
f010dc5b:	85 c0                	test   %eax,%eax
f010dc5d:	75 07                	jne    f010dc66 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010dc5f:	e8 c1 2e 00 00       	call   f0110b25 <test_free_block_NF>
f010dc64:	eb 22                	jmp    f010dc88 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010dc66:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc69:	83 c0 04             	add    $0x4,%eax
f010dc6c:	8b 00                	mov    (%eax),%eax
f010dc6e:	83 ec 08             	sub    $0x8,%esp
f010dc71:	68 93 33 13 f0       	push   $0xf0133393
f010dc76:	50                   	push   %eax
f010dc77:	e8 1e 0f 02 00       	call   f012eb9a <strcmp>
f010dc7c:	83 c4 10             	add    $0x10,%esp
f010dc7f:	85 c0                	test   %eax,%eax
f010dc81:	75 05                	jne    f010dc88 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010dc83:	e8 ba 2e 00 00       	call   f0110b42 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010dc88:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dc8d:	c9                   	leave  
f010dc8e:	c3                   	ret    

f010dc8f <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010dc8f:	55                   	push   %ebp
f010dc90:	89 e5                	mov    %esp,%ebp
f010dc92:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dc95:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dc99:	74 1a                	je     f010dcb5 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010dc9b:	83 ec 0c             	sub    $0xc,%esp
f010dc9e:	68 a0 33 13 f0       	push   $0xf01333a0
f010dca3:	e8 89 31 ff ff       	call   f0100e31 <cprintf>
f010dca8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dcab:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcb0:	e9 e1 00 00 00       	jmp    f010dd96 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010dcb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcb8:	83 c0 04             	add    $0x4,%eax
f010dcbb:	8b 00                	mov    (%eax),%eax
f010dcbd:	83 ec 08             	sub    $0x8,%esp
f010dcc0:	68 d9 33 13 f0       	push   $0xf01333d9
f010dcc5:	50                   	push   %eax
f010dcc6:	e8 cf 0e 02 00       	call   f012eb9a <strcmp>
f010dccb:	83 c4 10             	add    $0x10,%esp
f010dcce:	85 c0                	test   %eax,%eax
f010dcd0:	75 0a                	jne    f010dcdc <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010dcd2:	e8 dd 42 00 00       	call   f0111fb4 <test_cut_paste_pages>
f010dcd7:	e9 b5 00 00 00       	jmp    f010dd91 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010dcdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcdf:	83 c0 04             	add    $0x4,%eax
f010dce2:	8b 00                	mov    (%eax),%eax
f010dce4:	83 ec 08             	sub    $0x8,%esp
f010dce7:	68 e2 33 13 f0       	push   $0xf01333e2
f010dcec:	50                   	push   %eax
f010dced:	e8 a8 0e 02 00       	call   f012eb9a <strcmp>
f010dcf2:	83 c4 10             	add    $0x10,%esp
f010dcf5:	85 c0                	test   %eax,%eax
f010dcf7:	75 0a                	jne    f010dd03 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010dcf9:	e8 07 4d 00 00       	call   f0112a05 <test_copy_paste_chunk>
f010dcfe:	e9 8e 00 00 00       	jmp    f010dd91 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010dd03:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd06:	83 c0 04             	add    $0x4,%eax
f010dd09:	8b 00                	mov    (%eax),%eax
f010dd0b:	83 ec 08             	sub    $0x8,%esp
f010dd0e:	68 ec 33 13 f0       	push   $0xf01333ec
f010dd13:	50                   	push   %eax
f010dd14:	e8 81 0e 02 00       	call   f012eb9a <strcmp>
f010dd19:	83 c4 10             	add    $0x10,%esp
f010dd1c:	85 c0                	test   %eax,%eax
f010dd1e:	75 07                	jne    f010dd27 <tst_chunks+0x98>
	{
		test_share_chunk();
f010dd20:	e8 e4 5d 00 00       	call   f0113b09 <test_share_chunk>
f010dd25:	eb 6a                	jmp    f010dd91 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010dd27:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd2a:	83 c0 04             	add    $0x4,%eax
f010dd2d:	8b 00                	mov    (%eax),%eax
f010dd2f:	83 ec 08             	sub    $0x8,%esp
f010dd32:	68 f2 33 13 f0       	push   $0xf01333f2
f010dd37:	50                   	push   %eax
f010dd38:	e8 5d 0e 02 00       	call   f012eb9a <strcmp>
f010dd3d:	83 c4 10             	add    $0x10,%esp
f010dd40:	85 c0                	test   %eax,%eax
f010dd42:	75 07                	jne    f010dd4b <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010dd44:	e8 ee 67 00 00       	call   f0114537 <test_allocate_chunk>
f010dd49:	eb 46                	jmp    f010dd91 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010dd4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd4e:	83 c0 04             	add    $0x4,%eax
f010dd51:	8b 00                	mov    (%eax),%eax
f010dd53:	83 ec 08             	sub    $0x8,%esp
f010dd56:	68 fb 33 13 f0       	push   $0xf01333fb
f010dd5b:	50                   	push   %eax
f010dd5c:	e8 39 0e 02 00       	call   f012eb9a <strcmp>
f010dd61:	83 c4 10             	add    $0x10,%esp
f010dd64:	85 c0                	test   %eax,%eax
f010dd66:	75 07                	jne    f010dd6f <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010dd68:	e8 d7 70 00 00       	call   f0114e44 <test_calculate_required_frames>
f010dd6d:	eb 22                	jmp    f010dd91 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010dd6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd72:	83 c0 04             	add    $0x4,%eax
f010dd75:	8b 00                	mov    (%eax),%eax
f010dd77:	83 ec 08             	sub    $0x8,%esp
f010dd7a:	68 0a 34 13 f0       	push   $0xf013340a
f010dd7f:	50                   	push   %eax
f010dd80:	e8 15 0e 02 00       	call   f012eb9a <strcmp>
f010dd85:	83 c4 10             	add    $0x10,%esp
f010dd88:	85 c0                	test   %eax,%eax
f010dd8a:	75 05                	jne    f010dd91 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010dd8c:	e8 2d 79 00 00       	call   f01156be <test_calculate_allocated_space>
	}
	return 0;
f010dd91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd96:	c9                   	leave  
f010dd97:	c3                   	ret    

f010dd98 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010dd98:	55                   	push   %ebp
f010dd99:	89 e5                	mov    %esp,%ebp
f010dd9b:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dd9e:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dda2:	74 1a                	je     f010ddbe <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010dda4:	83 ec 0c             	sub    $0xc,%esp
f010dda7:	68 1c 34 13 f0       	push   $0xf013341c
f010ddac:	e8 80 30 ff ff       	call   f0100e31 <cprintf>
f010ddb1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ddb4:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddb9:	e9 ba 00 00 00       	jmp    f010de78 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010ddbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddc1:	83 c0 04             	add    $0x4,%eax
f010ddc4:	8b 00                	mov    (%eax),%eax
f010ddc6:	83 ec 08             	sub    $0x8,%esp
f010ddc9:	68 52 34 13 f0       	push   $0xf0133452
f010ddce:	50                   	push   %eax
f010ddcf:	e8 c6 0d 02 00       	call   f012eb9a <strcmp>
f010ddd4:	83 c4 10             	add    $0x10,%esp
f010ddd7:	85 c0                	test   %eax,%eax
f010ddd9:	75 0a                	jne    f010dde5 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010dddb:	e8 53 3c 00 00       	call   f0111a33 <test_pt_set_page_permissions>
f010dde0:	e9 8e 00 00 00       	jmp    f010de73 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010dde5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dde8:	83 c0 04             	add    $0x4,%eax
f010ddeb:	8b 00                	mov    (%eax),%eax
f010dded:	83 ec 08             	sub    $0x8,%esp
f010ddf0:	68 5a 34 13 f0       	push   $0xf013345a
f010ddf5:	50                   	push   %eax
f010ddf6:	e8 9f 0d 02 00       	call   f012eb9a <strcmp>
f010ddfb:	83 c4 10             	add    $0x10,%esp
f010ddfe:	85 c0                	test   %eax,%eax
f010de00:	75 07                	jne    f010de09 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010de02:	e8 8f 3e 00 00       	call   f0111c96 <test_pt_set_page_permissions_invalid_va>
f010de07:	eb 6a                	jmp    f010de73 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010de09:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de0c:	83 c0 04             	add    $0x4,%eax
f010de0f:	8b 00                	mov    (%eax),%eax
f010de11:	83 ec 08             	sub    $0x8,%esp
f010de14:	68 62 34 13 f0       	push   $0xf0133462
f010de19:	50                   	push   %eax
f010de1a:	e8 7b 0d 02 00       	call   f012eb9a <strcmp>
f010de1f:	83 c4 10             	add    $0x10,%esp
f010de22:	85 c0                	test   %eax,%eax
f010de24:	75 07                	jne    f010de2d <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010de26:	e8 b4 3e 00 00       	call   f0111cdf <test_pt_get_page_permissions>
f010de2b:	eb 46                	jmp    f010de73 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010de2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de30:	83 c0 04             	add    $0x4,%eax
f010de33:	8b 00                	mov    (%eax),%eax
f010de35:	83 ec 08             	sub    $0x8,%esp
f010de38:	68 6a 34 13 f0       	push   $0xf013346a
f010de3d:	50                   	push   %eax
f010de3e:	e8 57 0d 02 00       	call   f012eb9a <strcmp>
f010de43:	83 c4 10             	add    $0x10,%esp
f010de46:	85 c0                	test   %eax,%eax
f010de48:	75 07                	jne    f010de51 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010de4a:	e8 d4 3f 00 00       	call   f0111e23 <test_pt_clear_page_table_entry>
f010de4f:	eb 22                	jmp    f010de73 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010de51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de54:	83 c0 04             	add    $0x4,%eax
f010de57:	8b 00                	mov    (%eax),%eax
f010de59:	83 ec 08             	sub    $0x8,%esp
f010de5c:	68 71 34 13 f0       	push   $0xf0133471
f010de61:	50                   	push   %eax
f010de62:	e8 33 0d 02 00       	call   f012eb9a <strcmp>
f010de67:	83 c4 10             	add    $0x10,%esp
f010de6a:	85 c0                	test   %eax,%eax
f010de6c:	75 05                	jne    f010de73 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010de6e:	e8 09 41 00 00       	call   f0111f7c <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010de73:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de78:	c9                   	leave  
f010de79:	c3                   	ret    

f010de7a <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010de7a:	55                   	push   %ebp
f010de7b:	89 e5                	mov    %esp,%ebp
f010de7d:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010de80:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de83:	83 c0 08             	add    $0x8,%eax
f010de86:	8b 00                	mov    (%eax),%eax
f010de88:	83 ec 08             	sub    $0x8,%esp
f010de8b:	68 78 34 13 f0       	push   $0xf0133478
f010de90:	50                   	push   %eax
f010de91:	e8 04 0d 02 00       	call   f012eb9a <strcmp>
f010de96:	83 c4 10             	add    $0x10,%esp
f010de99:	85 c0                	test   %eax,%eax
f010de9b:	75 20                	jne    f010debd <tst_kheap+0x43>
f010de9d:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010dea1:	74 1a                	je     f010debd <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010dea3:	83 ec 0c             	sub    $0xc,%esp
f010dea6:	68 80 34 13 f0       	push   $0xf0133480
f010deab:	e8 81 2f ff ff       	call   f0100e31 <cprintf>
f010deb0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010deb3:	b8 00 00 00 00       	mov    $0x0,%eax
f010deb8:	e9 41 03 00 00       	jmp    f010e1fe <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010debd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec0:	83 c0 08             	add    $0x8,%eax
f010dec3:	8b 00                	mov    (%eax),%eax
f010dec5:	83 ec 08             	sub    $0x8,%esp
f010dec8:	68 78 34 13 f0       	push   $0xf0133478
f010decd:	50                   	push   %eax
f010dece:	e8 c7 0c 02 00       	call   f012eb9a <strcmp>
f010ded3:	83 c4 10             	add    $0x10,%esp
f010ded6:	85 c0                	test   %eax,%eax
f010ded8:	74 20                	je     f010defa <tst_kheap+0x80>
f010deda:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010dede:	74 1a                	je     f010defa <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010dee0:	83 ec 0c             	sub    $0xc,%esp
f010dee3:	68 d0 34 13 f0       	push   $0xf01334d0
f010dee8:	e8 44 2f ff ff       	call   f0100e31 <cprintf>
f010deed:	83 c4 10             	add    $0x10,%esp
		return 0;
f010def0:	b8 00 00 00 00       	mov    $0x0,%eax
f010def5:	e9 04 03 00 00       	jmp    f010e1fe <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010defa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010defd:	83 c0 04             	add    $0x4,%eax
f010df00:	8b 00                	mov    (%eax),%eax
f010df02:	83 ec 08             	sub    $0x8,%esp
f010df05:	68 15 35 13 f0       	push   $0xf0133515
f010df0a:	50                   	push   %eax
f010df0b:	e8 8a 0c 02 00       	call   f012eb9a <strcmp>
f010df10:	83 c4 10             	add    $0x10,%esp
f010df13:	85 c0                	test   %eax,%eax
f010df15:	74 1d                	je     f010df34 <tst_kheap+0xba>
f010df17:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df1a:	83 c0 04             	add    $0x4,%eax
f010df1d:	8b 00                	mov    (%eax),%eax
f010df1f:	83 ec 08             	sub    $0x8,%esp
f010df22:	68 18 35 13 f0       	push   $0xf0133518
f010df27:	50                   	push   %eax
f010df28:	e8 6d 0c 02 00       	call   f012eb9a <strcmp>
f010df2d:	83 c4 10             	add    $0x10,%esp
f010df30:	85 c0                	test   %eax,%eax
f010df32:	75 1a                	jne    f010df4e <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010df34:	e8 49 f9 ff ff       	call   f010d882 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010df39:	83 ec 0c             	sub    $0xc,%esp
f010df3c:	68 1c 35 13 f0       	push   $0xf013351c
f010df41:	e8 eb 2e ff ff       	call   f0100e31 <cprintf>
f010df46:	83 c4 10             	add    $0x10,%esp
f010df49:	e9 a0 00 00 00       	jmp    f010dfee <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010df4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df51:	83 c0 04             	add    $0x4,%eax
f010df54:	8b 00                	mov    (%eax),%eax
f010df56:	83 ec 08             	sub    $0x8,%esp
f010df59:	68 49 35 13 f0       	push   $0xf0133549
f010df5e:	50                   	push   %eax
f010df5f:	e8 36 0c 02 00       	call   f012eb9a <strcmp>
f010df64:	83 c4 10             	add    $0x10,%esp
f010df67:	85 c0                	test   %eax,%eax
f010df69:	74 1d                	je     f010df88 <tst_kheap+0x10e>
f010df6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df6e:	83 c0 04             	add    $0x4,%eax
f010df71:	8b 00                	mov    (%eax),%eax
f010df73:	83 ec 08             	sub    $0x8,%esp
f010df76:	68 4c 35 13 f0       	push   $0xf013354c
f010df7b:	50                   	push   %eax
f010df7c:	e8 19 0c 02 00       	call   f012eb9a <strcmp>
f010df81:	83 c4 10             	add    $0x10,%esp
f010df84:	85 c0                	test   %eax,%eax
f010df86:	75 17                	jne    f010df9f <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010df88:	e8 05 f9 ff ff       	call   f010d892 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010df8d:	83 ec 0c             	sub    $0xc,%esp
f010df90:	68 50 35 13 f0       	push   $0xf0133550
f010df95:	e8 97 2e ff ff       	call   f0100e31 <cprintf>
f010df9a:	83 c4 10             	add    $0x10,%esp
f010df9d:	eb 4f                	jmp    f010dfee <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010df9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa2:	83 c0 04             	add    $0x4,%eax
f010dfa5:	8b 00                	mov    (%eax),%eax
f010dfa7:	83 ec 08             	sub    $0x8,%esp
f010dfaa:	68 7c 35 13 f0       	push   $0xf013357c
f010dfaf:	50                   	push   %eax
f010dfb0:	e8 e5 0b 02 00       	call   f012eb9a <strcmp>
f010dfb5:	83 c4 10             	add    $0x10,%esp
f010dfb8:	85 c0                	test   %eax,%eax
f010dfba:	74 1d                	je     f010dfd9 <tst_kheap+0x15f>
f010dfbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfbf:	83 c0 04             	add    $0x4,%eax
f010dfc2:	8b 00                	mov    (%eax),%eax
f010dfc4:	83 ec 08             	sub    $0x8,%esp
f010dfc7:	68 7f 35 13 f0       	push   $0xf013357f
f010dfcc:	50                   	push   %eax
f010dfcd:	e8 c8 0b 02 00       	call   f012eb9a <strcmp>
f010dfd2:	83 c4 10             	add    $0x10,%esp
f010dfd5:	85 c0                	test   %eax,%eax
f010dfd7:	75 15                	jne    f010dfee <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010dfd9:	e8 c4 f8 ff ff       	call   f010d8a2 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010dfde:	83 ec 0c             	sub    $0xc,%esp
f010dfe1:	68 84 35 13 f0       	push   $0xf0133584
f010dfe6:	e8 46 2e ff ff       	call   f0100e31 <cprintf>
f010dfeb:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010dfee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff1:	83 c0 08             	add    $0x8,%eax
f010dff4:	8b 00                	mov    (%eax),%eax
f010dff6:	83 ec 08             	sub    $0x8,%esp
f010dff9:	68 78 34 13 f0       	push   $0xf0133478
f010dffe:	50                   	push   %eax
f010dfff:	e8 96 0b 02 00       	call   f012eb9a <strcmp>
f010e004:	83 c4 10             	add    $0x10,%esp
f010e007:	85 c0                	test   %eax,%eax
f010e009:	0f 85 13 01 00 00    	jne    f010e122 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e00f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e012:	83 c0 0c             	add    $0xc,%eax
f010e015:	8b 00                	mov    (%eax),%eax
f010e017:	83 ec 04             	sub    $0x4,%esp
f010e01a:	6a 0a                	push   $0xa
f010e01c:	6a 00                	push   $0x0
f010e01e:	50                   	push   %eax
f010e01f:	e8 ca 0d 02 00       	call   f012edee <strtol>
f010e024:	83 c4 10             	add    $0x10,%esp
f010e027:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e02a:	e8 83 f8 ff ff       	call   f010d8b2 <isKHeapPlacementStrategyFIRSTFIT>
f010e02f:	84 c0                	test   %al,%al
f010e031:	74 54                	je     f010e087 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e037:	75 1a                	jne    f010e053 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e039:	83 ec 0c             	sub    $0xc,%esp
f010e03c:	68 b0 35 13 f0       	push   $0xf01335b0
f010e041:	e8 eb 2d ff ff       	call   f0100e31 <cprintf>
f010e046:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e049:	b8 00 00 00 00       	mov    $0x0,%eax
f010e04e:	e9 ab 01 00 00       	jmp    f010e1fe <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e053:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e057:	75 0a                	jne    f010e063 <tst_kheap+0x1e9>
				test_kmalloc();
f010e059:	e8 59 a0 00 00       	call   f01180b7 <test_kmalloc>
f010e05e:	e9 b5 00 00 00       	jmp    f010e118 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e063:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e067:	75 0a                	jne    f010e073 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e069:	e8 96 e2 00 00       	call   f011c304 <test_kmalloc_firstfit1>
f010e06e:	e9 a5 00 00 00       	jmp    f010e118 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e073:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e077:	0f 85 9b 00 00 00    	jne    f010e118 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e07d:	e8 30 f3 00 00       	call   f011d3b2 <test_kmalloc_firstfit2>
f010e082:	e9 91 00 00 00       	jmp    f010e118 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e087:	e8 3b f8 ff ff       	call   f010d8c7 <isKHeapPlacementStrategyBESTFIT>
f010e08c:	84 c0                	test   %al,%al
f010e08e:	74 47                	je     f010e0d7 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e090:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e094:	75 1a                	jne    f010e0b0 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e096:	83 ec 0c             	sub    $0xc,%esp
f010e099:	68 00 36 13 f0       	push   $0xf0133600
f010e09e:	e8 8e 2d ff ff       	call   f0100e31 <cprintf>
f010e0a3:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e0a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0ab:	e9 4e 01 00 00       	jmp    f010e1fe <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e0b0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e0b4:	75 07                	jne    f010e0bd <tst_kheap+0x243>
				test_kmalloc();
f010e0b6:	e8 fc 9f 00 00       	call   f01180b7 <test_kmalloc>
f010e0bb:	eb 5b                	jmp    f010e118 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e0bd:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e0c1:	75 07                	jne    f010e0ca <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e0c3:	e8 b8 c2 00 00       	call   f011a380 <test_kmalloc_bestfit1>
f010e0c8:	eb 4e                	jmp    f010e118 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e0ca:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e0ce:	75 48                	jne    f010e118 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e0d0:	e8 43 d2 00 00       	call   f011b318 <test_kmalloc_bestfit2>
f010e0d5:	eb 41                	jmp    f010e118 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e0d7:	e8 00 f8 ff ff       	call   f010d8dc <isKHeapPlacementStrategyNEXTFIT>
f010e0dc:	84 c0                	test   %al,%al
f010e0de:	74 38                	je     f010e118 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e0e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e0e4:	75 1a                	jne    f010e100 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e0e6:	83 ec 0c             	sub    $0xc,%esp
f010e0e9:	68 50 36 13 f0       	push   $0xf0133650
f010e0ee:	e8 3e 2d ff ff       	call   f0100e31 <cprintf>
f010e0f3:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e0f6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0fb:	e9 fe 00 00 00       	jmp    f010e1fe <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e100:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e104:	75 07                	jne    f010e10d <tst_kheap+0x293>
				test_kmalloc();
f010e106:	e8 ac 9f 00 00       	call   f01180b7 <test_kmalloc>
f010e10b:	eb 0b                	jmp    f010e118 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e10d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e111:	75 05                	jne    f010e118 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e113:	e8 ab af 00 00       	call   f01190c3 <test_kmalloc_nextfit>
		}
		return 0;
f010e118:	b8 00 00 00 00       	mov    $0x0,%eax
f010e11d:	e9 dc 00 00 00       	jmp    f010e1fe <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e122:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e125:	83 c0 08             	add    $0x8,%eax
f010e128:	8b 00                	mov    (%eax),%eax
f010e12a:	83 ec 08             	sub    $0x8,%esp
f010e12d:	68 9e 36 13 f0       	push   $0xf013369e
f010e132:	50                   	push   %eax
f010e133:	e8 62 0a 02 00       	call   f012eb9a <strcmp>
f010e138:	83 c4 10             	add    $0x10,%esp
f010e13b:	85 c0                	test   %eax,%eax
f010e13d:	75 28                	jne    f010e167 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e13f:	e8 83 f7 ff ff       	call   f010d8c7 <isKHeapPlacementStrategyBESTFIT>
f010e144:	84 c0                	test   %al,%al
f010e146:	75 09                	jne    f010e151 <tst_kheap+0x2d7>
f010e148:	e8 65 f7 ff ff       	call   f010d8b2 <isKHeapPlacementStrategyFIRSTFIT>
f010e14d:	84 c0                	test   %al,%al
f010e14f:	74 07                	je     f010e158 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e151:	e8 15 2f 01 00       	call   f012106b <test_kfree_bestfirstfit>
f010e156:	eb 05                	jmp    f010e15d <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e158:	e8 1c 11 01 00       	call   f011f279 <test_kfree>
		}
		return 0;
f010e15d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e162:	e9 97 00 00 00       	jmp    f010e1fe <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e167:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e16a:	83 c0 08             	add    $0x8,%eax
f010e16d:	8b 00                	mov    (%eax),%eax
f010e16f:	83 ec 08             	sub    $0x8,%esp
f010e172:	68 a4 36 13 f0       	push   $0xf01336a4
f010e177:	50                   	push   %eax
f010e178:	e8 1d 0a 02 00       	call   f012eb9a <strcmp>
f010e17d:	83 c4 10             	add    $0x10,%esp
f010e180:	85 c0                	test   %eax,%eax
f010e182:	75 0c                	jne    f010e190 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e184:	e8 8c 46 01 00       	call   f0122815 <test_kheap_phys_addr>
		return 0;
f010e189:	b8 00 00 00 00       	mov    $0x0,%eax
f010e18e:	eb 6e                	jmp    f010e1fe <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e190:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e193:	83 c0 08             	add    $0x8,%eax
f010e196:	8b 00                	mov    (%eax),%eax
f010e198:	83 ec 08             	sub    $0x8,%esp
f010e19b:	68 ae 36 13 f0       	push   $0xf01336ae
f010e1a0:	50                   	push   %eax
f010e1a1:	e8 f4 09 02 00       	call   f012eb9a <strcmp>
f010e1a6:	83 c4 10             	add    $0x10,%esp
f010e1a9:	85 c0                	test   %eax,%eax
f010e1ab:	75 0c                	jne    f010e1b9 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e1ad:	e8 a1 57 01 00       	call   f0123953 <test_kheap_virt_addr>
		return 0;
f010e1b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1b7:	eb 45                	jmp    f010e1fe <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e1b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1bc:	83 c0 08             	add    $0x8,%eax
f010e1bf:	8b 00                	mov    (%eax),%eax
f010e1c1:	83 ec 08             	sub    $0x8,%esp
f010e1c4:	68 b8 36 13 f0       	push   $0xf01336b8
f010e1c9:	50                   	push   %eax
f010e1ca:	e8 cb 09 02 00       	call   f012eb9a <strcmp>
f010e1cf:	83 c4 10             	add    $0x10,%esp
f010e1d2:	85 c0                	test   %eax,%eax
f010e1d4:	75 23                	jne    f010e1f9 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e1d6:	e8 01 f7 ff ff       	call   f010d8dc <isKHeapPlacementStrategyNEXTFIT>
f010e1db:	84 c0                	test   %al,%al
f010e1dd:	74 05                	je     f010e1e4 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e1df:	e8 12 b9 01 00       	call   f0129af6 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e1e4:	e8 de f6 ff ff       	call   f010d8c7 <isKHeapPlacementStrategyBESTFIT>
f010e1e9:	84 c0                	test   %al,%al
f010e1eb:	74 05                	je     f010e1f2 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e1ed:	e8 98 d6 01 00       	call   f012b88a <test_krealloc_BF>
		}
		return 0;
f010e1f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1f7:	eb 05                	jmp    f010e1fe <tst_kheap+0x384>
	}
	return 0;
f010e1f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e1fe:	c9                   	leave  
f010e1ff:	c3                   	ret    

f010e200 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e200:	55                   	push   %ebp
f010e201:	89 e5                	mov    %esp,%ebp
f010e203:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e206:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e210:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e219:	83 c0 04             	add    $0x4,%eax
f010e21c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e222:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e229:	83 ec 08             	sub    $0x8,%esp
f010e22c:	ff 75 f0             	pushl  -0x10(%ebp)
f010e22f:	68 00 00 00 f6       	push   $0xf6000000
f010e234:	e8 8b 13 02 00       	call   f012f5c4 <initialize_dynamic_allocator>
f010e239:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e23c:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e243:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e246:	8a 40 04             	mov    0x4(%eax),%al
f010e249:	3c 01                	cmp    $0x1,%al
f010e24b:	75 0a                	jne    f010e257 <test_initialize_dynamic_allocator+0x57>
f010e24d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e250:	8b 00                	mov    (%eax),%eax
f010e252:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e255:	74 14                	je     f010e26b <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e257:	83 ec 04             	sub    $0x4,%esp
f010e25a:	68 c4 36 13 f0       	push   $0xf01336c4
f010e25f:	6a 29                	push   $0x29
f010e261:	68 f0 36 13 f0       	push   $0xf01336f0
f010e266:	e8 45 1f ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e26b:	83 ec 0c             	sub    $0xc,%esp
f010e26e:	68 14 37 13 f0       	push   $0xf0133714
f010e273:	e8 b9 2b ff ff       	call   f0100e31 <cprintf>
f010e278:	83 c4 10             	add    $0x10,%esp
}
f010e27b:	90                   	nop
f010e27c:	c9                   	leave  
f010e27d:	c3                   	ret    

f010e27e <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e27e:	55                   	push   %ebp
f010e27f:	89 e5                	mov    %esp,%ebp
f010e281:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e284:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e28b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e292:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e299:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e29c:	83 ec 08             	sub    $0x8,%esp
f010e29f:	50                   	push   %eax
f010e2a0:	68 00 00 00 f6       	push   $0xf6000000
f010e2a5:	e8 1a 13 02 00       	call   f012f5c4 <initialize_dynamic_allocator>
f010e2aa:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e2ad:	83 ec 0c             	sub    $0xc,%esp
f010e2b0:	68 64 37 13 f0       	push   $0xf0133764
f010e2b5:	e8 77 2b ff ff       	call   f0100e31 <cprintf>
f010e2ba:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e2bd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e2c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e2c7:	89 c2                	mov    %eax,%edx
f010e2c9:	01 d2                	add    %edx,%edx
f010e2cb:	01 d0                	add    %edx,%eax
f010e2cd:	83 ec 08             	sub    $0x8,%esp
f010e2d0:	ff 75 08             	pushl  0x8(%ebp)
f010e2d3:	50                   	push   %eax
f010e2d4:	e8 d2 11 02 00       	call   f012f4ab <alloc_block>
f010e2d9:	83 c4 10             	add    $0x10,%esp
f010e2dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e2df:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e2e3:	74 17                	je     f010e2fc <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e2e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e2ec:	83 ec 0c             	sub    $0xc,%esp
f010e2ef:	68 a0 37 13 f0       	push   $0xf01337a0
f010e2f4:	e8 38 2b ff ff       	call   f0100e31 <cprintf>
f010e2f9:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e2fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e2ff:	83 ec 08             	sub    $0x8,%esp
f010e302:	ff 75 08             	pushl  0x8(%ebp)
f010e305:	50                   	push   %eax
f010e306:	e8 a0 11 02 00       	call   f012f4ab <alloc_block>
f010e30b:	83 c4 10             	add    $0x10,%esp
f010e30e:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e311:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e315:	74 17                	je     f010e32e <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e317:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e31e:	83 ec 0c             	sub    $0xc,%esp
f010e321:	68 f8 37 13 f0       	push   $0xf01337f8
f010e326:	e8 06 2b ff ff       	call   f0100e31 <cprintf>
f010e32b:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e32e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e332:	74 04                	je     f010e338 <test_initial_alloc+0xba>
	{
		eval += 5;
f010e334:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e338:	83 ec 0c             	sub    $0xc,%esp
f010e33b:	68 50 38 13 f0       	push   $0xf0133850
f010e340:	e8 ec 2a ff ff       	call   f0100e31 <cprintf>
f010e345:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e348:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e34f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e356:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e35d:	eb 2a                	jmp    f010e389 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e35f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e362:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010e369:	89 d0                	mov    %edx,%eax
f010e36b:	c1 e0 02             	shl    $0x2,%eax
f010e36e:	01 d0                	add    %edx,%eax
f010e370:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e377:	01 d0                	add    %edx,%eax
f010e379:	c1 e0 03             	shl    $0x3,%eax
f010e37c:	89 c2                	mov    %eax,%edx
f010e37e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e381:	01 d0                	add    %edx,%eax
f010e383:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e386:	ff 45 e8             	incl   -0x18(%ebp)
f010e389:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e38d:	7e d0                	jle    f010e35f <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e38f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e392:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e395:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e398:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e39c:	7f 17                	jg     f010e3b5 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e39e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e3a5:	83 ec 0c             	sub    $0xc,%esp
f010e3a8:	68 9c 38 13 f0       	push   $0xf013389c
f010e3ad:	e8 7f 2a ff ff       	call   f0100e31 <cprintf>
f010e3b2:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e3b5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e3bc:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e3c3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e3ca:	e9 fc 00 00 00       	jmp    f010e4cb <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e3cf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e3d6:	e9 e0 00 00 00       	jmp    f010e4bb <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e3db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3de:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e3e5:	83 e8 10             	sub    $0x10,%eax
f010e3e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e3eb:	83 ec 08             	sub    $0x8,%esp
f010e3ee:	ff 75 08             	pushl  0x8(%ebp)
f010e3f1:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e3f4:	e8 b2 10 02 00       	call   f012f4ab <alloc_block>
f010e3f9:	83 c4 10             	add    $0x10,%esp
f010e3fc:	89 c2                	mov    %eax,%edx
f010e3fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e401:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010e408:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e40b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e412:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e415:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e418:	d1 e8                	shr    %eax
f010e41a:	89 c2                	mov    %eax,%edx
f010e41c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e41f:	01 c2                	add    %eax,%edx
f010e421:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e424:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e42b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e42e:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e431:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e434:	01 c2                	add    %eax,%edx
f010e436:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e439:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e440:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e444:	74 0b                	je     f010e451 <test_initial_alloc+0x1d3>
f010e446:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e449:	83 c0 10             	add    $0x10,%eax
f010e44c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e44f:	74 27                	je     f010e478 <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e451:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e455:	74 21                	je     f010e478 <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e457:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e45e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e461:	83 c0 10             	add    $0x10,%eax
f010e464:	ff 75 cc             	pushl  -0x34(%ebp)
f010e467:	50                   	push   %eax
f010e468:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e46b:	68 18 39 13 f0       	push   $0xf0133918
f010e470:	e8 bc 29 ff ff       	call   f0100e31 <cprintf>
f010e475:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e478:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e47b:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e482:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e488:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010e48f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e492:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e498:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010e49f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4a2:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e4a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4a8:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010e4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4b2:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e4b5:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e4b8:	ff 45 d8             	incl   -0x28(%ebp)
f010e4bb:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e4c2:	0f 8e 13 ff ff ff    	jle    f010e3db <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e4c8:	ff 45 dc             	incl   -0x24(%ebp)
f010e4cb:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e4cf:	0f 8e fa fe ff ff    	jle    f010e3cf <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e4d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e4d9:	74 04                	je     f010e4df <test_initial_alloc+0x261>
	{
		eval += 20;
f010e4db:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e4df:	83 ec 0c             	sub    $0xc,%esp
f010e4e2:	68 7c 39 13 f0       	push   $0xf013397c
f010e4e7:	e8 45 29 ff ff       	call   f0100e31 <cprintf>
f010e4ec:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e4ef:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e4f6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e4f9:	83 e8 10             	sub    $0x10,%eax
f010e4fc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e4ff:	83 ec 08             	sub    $0x8,%esp
f010e502:	ff 75 08             	pushl  0x8(%ebp)
f010e505:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e508:	e8 9e 0f 02 00       	call   f012f4ab <alloc_block>
f010e50d:	83 c4 10             	add    $0x10,%esp
f010e510:	89 c2                	mov    %eax,%edx
f010e512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e515:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010e51c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e51f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e526:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e529:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e52c:	d1 e8                	shr    %eax
f010e52e:	89 c2                	mov    %eax,%edx
f010e530:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e533:	01 c2                	add    %eax,%edx
f010e535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e538:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e53f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e542:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e545:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e548:	01 c2                	add    %eax,%edx
f010e54a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e54d:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e554:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e558:	74 0b                	je     f010e565 <test_initial_alloc+0x2e7>
f010e55a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e55d:	83 c0 10             	add    $0x10,%eax
f010e560:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e563:	74 17                	je     f010e57c <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e565:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e56c:	83 ec 0c             	sub    $0xc,%esp
f010e56f:	68 c8 39 13 f0       	push   $0xf01339c8
f010e574:	e8 b8 28 ff ff       	call   f0100e31 <cprintf>
f010e579:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e57c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e57f:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010e586:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e589:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e58c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e58f:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010e596:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e599:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e59c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e59f:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010e5a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e5a9:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e5ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e5b0:	74 04                	je     f010e5b6 <test_initial_alloc+0x338>
	{
		eval += 5;
f010e5b2:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e5b6:	83 ec 0c             	sub    $0xc,%esp
f010e5b9:	68 10 3a 13 f0       	push   $0xf0133a10
f010e5be:	e8 6e 28 ff ff       	call   f0100e31 <cprintf>
f010e5c3:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e5c6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e5cd:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e5d4:	eb 5b                	jmp    f010e631 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e5d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5d9:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e5e0:	66 8b 00             	mov    (%eax),%ax
f010e5e3:	98                   	cwtl   
f010e5e4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e5e7:	75 26                	jne    f010e60f <test_initial_alloc+0x391>
f010e5e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5ec:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010e5f3:	66 8b 00             	mov    (%eax),%ax
f010e5f6:	98                   	cwtl   
f010e5f7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e5fa:	75 13                	jne    f010e60f <test_initial_alloc+0x391>
f010e5fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5ff:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010e606:	66 8b 00             	mov    (%eax),%ax
f010e609:	98                   	cwtl   
f010e60a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e60d:	74 1f                	je     f010e62e <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e60f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e616:	83 ec 04             	sub    $0x4,%esp
f010e619:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e61c:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e61f:	68 44 3a 13 f0       	push   $0xf0133a44
f010e624:	e8 08 28 ff ff       	call   f0100e31 <cprintf>
f010e629:	83 c4 10             	add    $0x10,%esp
			break;
f010e62c:	eb 0b                	jmp    f010e639 <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e62e:	ff 45 d4             	incl   -0x2c(%ebp)
f010e631:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e634:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e637:	7c 9d                	jl     f010e5d6 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e639:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e63d:	74 04                	je     f010e643 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e63f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e643:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e646:	c9                   	leave  
f010e647:	c3                   	ret    

f010e648 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e648:	55                   	push   %ebp
f010e649:	89 e5                	mov    %esp,%ebp
f010e64b:	57                   	push   %edi
f010e64c:	56                   	push   %esi
f010e64d:	53                   	push   %ebx
f010e64e:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010e654:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010e65b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010e662:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010e669:	83 ec 0c             	sub    $0xc,%esp
f010e66c:	68 94 3a 13 f0       	push   $0xf0133a94
f010e671:	e8 bb 27 ff ff       	call   f0100e31 <cprintf>
f010e676:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010e679:	83 ec 0c             	sub    $0xc,%esp
f010e67c:	68 d0 3a 13 f0       	push   $0xf0133ad0
f010e681:	e8 ab 27 ff ff       	call   f0100e31 <cprintf>
f010e686:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010e689:	83 ec 0c             	sub    $0xc,%esp
f010e68c:	68 94 3a 13 f0       	push   $0xf0133a94
f010e691:	e8 9b 27 ff ff       	call   f0100e31 <cprintf>
f010e696:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010e699:	83 ec 0c             	sub    $0xc,%esp
f010e69c:	6a 01                	push   $0x1
f010e69e:	e8 db fb ff ff       	call   f010e27e <test_initial_alloc>
f010e6a3:	83 c4 10             	add    $0x10,%esp
f010e6a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010e6a9:	83 ec 0c             	sub    $0xc,%esp
f010e6ac:	68 0c 3b 13 f0       	push   $0xf0133b0c
f010e6b1:	e8 7b 27 ff ff       	call   f0100e31 <cprintf>
f010e6b6:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010e6b9:	83 ec 0c             	sub    $0xc,%esp
f010e6bc:	68 44 3b 13 f0       	push   $0xf0133b44
f010e6c1:	e8 6b 27 ff ff       	call   f0100e31 <cprintf>
f010e6c6:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010e6c9:	83 ec 0c             	sub    $0xc,%esp
f010e6cc:	68 0c 3b 13 f0       	push   $0xf0133b0c
f010e6d1:	e8 5b 27 ff ff       	call   f0100e31 <cprintf>
f010e6d6:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010e6d9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e6e0:	eb 2c                	jmp    f010e70e <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010e6e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010e6e5:	89 d0                	mov    %edx,%eax
f010e6e7:	c1 e0 02             	shl    $0x2,%eax
f010e6ea:	01 d0                	add    %edx,%eax
f010e6ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e6f3:	01 d0                	add    %edx,%eax
f010e6f5:	c1 e0 03             	shl    $0x3,%eax
f010e6f8:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010e6ff:	83 ec 0c             	sub    $0xc,%esp
f010e702:	50                   	push   %eax
f010e703:	e8 4a 0f 02 00       	call   f012f652 <free_block>
f010e708:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010e70b:	ff 45 dc             	incl   -0x24(%ebp)
f010e70e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e712:	7e ce                	jle    f010e6e2 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e714:	83 ec 0c             	sub    $0xc,%esp
f010e717:	68 64 37 13 f0       	push   $0xf0133764
f010e71c:	e8 10 27 ff ff       	call   f0100e31 <cprintf>
f010e721:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e724:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010e72b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e732:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e739:	eb 1f                	jmp    f010e75a <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010e73b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e73e:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e745:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e748:	76 0d                	jbe    f010e757 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010e74a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e74d:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010e754:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010e757:	ff 45 d4             	incl   -0x2c(%ebp)
f010e75a:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010e75e:	7e db                	jle    f010e73b <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010e760:	83 ec 08             	sub    $0x8,%esp
f010e763:	6a 01                	push   $0x1
f010e765:	ff 75 d8             	pushl  -0x28(%ebp)
f010e768:	e8 3e 0d 02 00       	call   f012f4ab <alloc_block>
f010e76d:	83 c4 10             	add    $0x10,%esp
f010e770:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010e773:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e777:	74 17                	je     f010e790 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010e779:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010e780:	83 ec 0c             	sub    $0xc,%esp
f010e783:	68 7c 3b 13 f0       	push   $0xf0133b7c
f010e788:	e8 a4 26 ff ff       	call   f0100e31 <cprintf>
f010e78d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e790:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e794:	74 04                	je     f010e79a <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010e796:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010e79a:	83 ec 0c             	sub    $0xc,%esp
f010e79d:	68 f4 3b 13 f0       	push   $0xf0133bf4
f010e7a2:	e8 8a 26 ff ff       	call   f0100e31 <cprintf>
f010e7a7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e7aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010e7b1:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e7b4:	bb b4 3d 13 f0       	mov    $0xf0133db4,%ebx
f010e7b9:	ba 03 00 00 00       	mov    $0x3,%edx
f010e7be:	89 c7                	mov    %eax,%edi
f010e7c0:	89 de                	mov    %ebx,%esi
f010e7c2:	89 d1                	mov    %edx,%ecx
f010e7c4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010e7c6:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f010e7cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010e7ce:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010e7d5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e7d8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010e7db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e7de:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010e7e3:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010e7e6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010e7ed:	e9 c6 00 00 00       	jmp    f010e8b8 <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010e7f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e7f5:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010e7f9:	83 e8 10             	sub    $0x10,%eax
f010e7fc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010e7ff:	83 ec 08             	sub    $0x8,%esp
f010e802:	6a 01                	push   $0x1
f010e804:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e807:	e8 9f 0c 02 00       	call   f012f4ab <alloc_block>
f010e80c:	83 c4 10             	add    $0x10,%esp
f010e80f:	89 c2                	mov    %eax,%edx
f010e811:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e814:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010e818:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e81b:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e81f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010e822:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e825:	d1 e8                	shr    %eax
f010e827:	89 c2                	mov    %eax,%edx
f010e829:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e82c:	01 c2                	add    %eax,%edx
f010e82e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e831:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010e835:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e838:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e83b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e83e:	01 c2                	add    %eax,%edx
f010e840:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e843:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010e84a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e84d:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e851:	85 c0                	test   %eax,%eax
f010e853:	74 12                	je     f010e867 <test_alloc_block_FF+0x21f>
f010e855:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e858:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010e85c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e85f:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010e863:	39 c2                	cmp    %eax,%edx
f010e865:	74 27                	je     f010e88e <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010e867:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010e86e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e871:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010e875:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e878:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010e87c:	52                   	push   %edx
f010e87d:	50                   	push   %eax
f010e87e:	ff 75 d0             	pushl  -0x30(%ebp)
f010e881:	68 50 3c 13 f0       	push   $0xf0133c50
f010e886:	e8 a6 25 ff ff       	call   f0100e31 <cprintf>
f010e88b:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010e88e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e891:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e895:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010e89a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e89d:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e8a1:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010e8a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e8a9:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e8b0:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010e8b5:	ff 45 d0             	incl   -0x30(%ebp)
f010e8b8:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010e8bc:	0f 8e 30 ff ff ff    	jle    f010e7f2 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010e8c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e8c6:	74 04                	je     f010e8cc <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010e8c8:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e8cc:	83 ec 0c             	sub    $0xc,%esp
f010e8cf:	68 7c 39 13 f0       	push   $0xf013397c
f010e8d4:	e8 58 25 ff ff       	call   f0100e31 <cprintf>
f010e8d9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e8dc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010e8e3:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010e8ea:	83 ec 08             	sub    $0x8,%esp
f010e8ed:	6a 01                	push   $0x1
f010e8ef:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e8f2:	e8 b4 0b 02 00       	call   f012f4ab <alloc_block>
f010e8f7:	83 c4 10             	add    $0x10,%esp
f010e8fa:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010e8fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e900:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010e903:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e906:	d1 e8                	shr    %eax
f010e908:	89 c2                	mov    %eax,%edx
f010e90a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e90d:	01 d0                	add    %edx,%eax
f010e90f:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010e912:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e915:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e918:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e91b:	01 d0                	add    %edx,%eax
f010e91d:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010e920:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010e923:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e926:	01 d0                	add    %edx,%eax
f010e928:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010e92d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010e930:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e934:	74 08                	je     f010e93e <test_alloc_block_FF+0x2f6>
f010e936:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e939:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010e93c:	74 1d                	je     f010e95b <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010e93e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010e945:	83 ec 04             	sub    $0x4,%esp
f010e948:	ff 75 c8             	pushl  -0x38(%ebp)
f010e94b:	ff 75 bc             	pushl  -0x44(%ebp)
f010e94e:	68 b4 3c 13 f0       	push   $0xf0133cb4
f010e953:	e8 d9 24 ff ff       	call   f0100e31 <cprintf>
f010e958:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010e95b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e95e:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010e963:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e966:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010e96b:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e96e:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010e973:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e977:	74 04                	je     f010e97d <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010e979:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e97d:	83 ec 0c             	sub    $0xc,%esp
f010e980:	68 10 3a 13 f0       	push   $0xf0133a10
f010e985:	e8 a7 24 ff ff       	call   f0100e31 <cprintf>
f010e98a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e98d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010e994:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010e99b:	e9 82 00 00 00       	jmp    f010ea22 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010e9a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9a3:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e9a7:	66 8b 00             	mov    (%eax),%ax
f010e9aa:	66 3d 61 01          	cmp    $0x161,%ax
f010e9ae:	75 23                	jne    f010e9d3 <test_alloc_block_FF+0x38b>
f010e9b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9b3:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e9b7:	66 8b 00             	mov    (%eax),%ax
f010e9ba:	66 3d 61 01          	cmp    $0x161,%ax
f010e9be:	75 13                	jne    f010e9d3 <test_alloc_block_FF+0x38b>
f010e9c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9c3:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e9ca:	66 8b 00             	mov    (%eax),%ax
f010e9cd:	66 3d 61 01          	cmp    $0x161,%ax
f010e9d1:	74 4c                	je     f010ea1f <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010e9d3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010e9da:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9dd:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010e9e4:	66 8b 00             	mov    (%eax),%ax
f010e9e7:	0f bf c8             	movswl %ax,%ecx
f010e9ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9ed:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010e9f1:	66 8b 00             	mov    (%eax),%ax
f010e9f4:	0f bf d0             	movswl %ax,%edx
f010e9f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9fa:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e9fe:	66 8b 00             	mov    (%eax),%ax
f010ea01:	98                   	cwtl   
f010ea02:	83 ec 08             	sub    $0x8,%esp
f010ea05:	51                   	push   %ecx
f010ea06:	52                   	push   %edx
f010ea07:	50                   	push   %eax
f010ea08:	68 61 01 00 00       	push   $0x161
f010ea0d:	ff 75 cc             	pushl  -0x34(%ebp)
f010ea10:	68 14 3d 13 f0       	push   $0xf0133d14
f010ea15:	e8 17 24 ff ff       	call   f0100e31 <cprintf>
f010ea1a:	83 c4 20             	add    $0x20,%esp
			break;
f010ea1d:	eb 0d                	jmp    f010ea2c <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ea1f:	ff 45 cc             	incl   -0x34(%ebp)
f010ea22:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010ea26:	0f 8e 74 ff ff ff    	jle    f010e9a0 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ea2c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ea30:	74 04                	je     f010ea36 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010ea32:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010ea36:	83 ec 08             	sub    $0x8,%esp
f010ea39:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ea3c:	68 80 3d 13 f0       	push   $0xf0133d80
f010ea41:	e8 eb 23 ff ff       	call   f0100e31 <cprintf>
f010ea46:	83 c4 10             	add    $0x10,%esp
}
f010ea49:	90                   	nop
f010ea4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ea4d:	5b                   	pop    %ebx
f010ea4e:	5e                   	pop    %esi
f010ea4f:	5f                   	pop    %edi
f010ea50:	5d                   	pop    %ebp
f010ea51:	c3                   	ret    

f010ea52 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ea52:	55                   	push   %ebp
f010ea53:	89 e5                	mov    %esp,%ebp
f010ea55:	57                   	push   %edi
f010ea56:	56                   	push   %esi
f010ea57:	53                   	push   %ebx
f010ea58:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ea5e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ea65:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ea6c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010ea73:	83 ec 0c             	sub    $0xc,%esp
f010ea76:	68 c0 3d 13 f0       	push   $0xf0133dc0
f010ea7b:	e8 b1 23 ff ff       	call   f0100e31 <cprintf>
f010ea80:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ea83:	83 ec 0c             	sub    $0xc,%esp
f010ea86:	68 f4 3d 13 f0       	push   $0xf0133df4
f010ea8b:	e8 a1 23 ff ff       	call   f0100e31 <cprintf>
f010ea90:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ea93:	83 ec 0c             	sub    $0xc,%esp
f010ea96:	68 c0 3d 13 f0       	push   $0xf0133dc0
f010ea9b:	e8 91 23 ff ff       	call   f0100e31 <cprintf>
f010eaa0:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010eaa3:	83 ec 0c             	sub    $0xc,%esp
f010eaa6:	6a 03                	push   $0x3
f010eaa8:	e8 d1 f7 ff ff       	call   f010e27e <test_initial_alloc>
f010eaad:	83 c4 10             	add    $0x10,%esp
f010eab0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010eab3:	83 ec 0c             	sub    $0xc,%esp
f010eab6:	68 c0 3d 13 f0       	push   $0xf0133dc0
f010eabb:	e8 71 23 ff ff       	call   f0100e31 <cprintf>
f010eac0:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010eac3:	83 ec 0c             	sub    $0xc,%esp
f010eac6:	68 28 3e 13 f0       	push   $0xf0133e28
f010eacb:	e8 61 23 ff ff       	call   f0100e31 <cprintf>
f010ead0:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ead3:	83 ec 0c             	sub    $0xc,%esp
f010ead6:	68 c0 3d 13 f0       	push   $0xf0133dc0
f010eadb:	e8 51 23 ff ff       	call   f0100e31 <cprintf>
f010eae0:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eae3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010eaea:	eb 2c                	jmp    f010eb18 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010eaec:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010eaef:	89 d0                	mov    %edx,%eax
f010eaf1:	c1 e0 02             	shl    $0x2,%eax
f010eaf4:	01 d0                	add    %edx,%eax
f010eaf6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eafd:	01 d0                	add    %edx,%eax
f010eaff:	c1 e0 03             	shl    $0x3,%eax
f010eb02:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010eb09:	83 ec 0c             	sub    $0xc,%esp
f010eb0c:	50                   	push   %eax
f010eb0d:	e8 40 0b 02 00       	call   f012f652 <free_block>
f010eb12:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eb15:	ff 45 dc             	incl   -0x24(%ebp)
f010eb18:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010eb1c:	7e ce                	jle    f010eaec <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010eb1e:	83 ec 0c             	sub    $0xc,%esp
f010eb21:	68 64 37 13 f0       	push   $0xf0133764
f010eb26:	e8 06 23 ff ff       	call   f0100e31 <cprintf>
f010eb2b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb2e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eb35:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eb3c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eb43:	eb 1f                	jmp    f010eb64 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eb45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb48:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010eb4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eb52:	76 0d                	jbe    f010eb61 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010eb54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb57:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010eb5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eb61:	ff 45 d4             	incl   -0x2c(%ebp)
f010eb64:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eb68:	7e db                	jle    f010eb45 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010eb6a:	83 ec 08             	sub    $0x8,%esp
f010eb6d:	6a 03                	push   $0x3
f010eb6f:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb72:	e8 34 09 02 00       	call   f012f4ab <alloc_block>
f010eb77:	83 c4 10             	add    $0x10,%esp
f010eb7a:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eb7d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eb81:	74 17                	je     f010eb9a <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010eb83:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010eb8a:	83 ec 0c             	sub    $0xc,%esp
f010eb8d:	68 5c 3e 13 f0       	push   $0xf0133e5c
f010eb92:	e8 9a 22 ff ff       	call   f0100e31 <cprintf>
f010eb97:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010eb9a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eb9e:	74 04                	je     f010eba4 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010eba0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eba4:	83 ec 0c             	sub    $0xc,%esp
f010eba7:	68 f4 3b 13 f0       	push   $0xf0133bf4
f010ebac:	e8 80 22 ff ff       	call   f0100e31 <cprintf>
f010ebb1:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ebb4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010ebbb:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ebbe:	bb 80 40 13 f0       	mov    $0xf0134080,%ebx
f010ebc3:	ba 05 00 00 00       	mov    $0x5,%edx
f010ebc8:	89 c7                	mov    %eax,%edi
f010ebca:	89 de                	mov    %ebx,%esi
f010ebcc:	89 d1                	mov    %edx,%ecx
f010ebce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010ebd0:	a1 a0 ad 2d f0       	mov    0xf02dada0,%eax
f010ebd5:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010ebd8:	a1 c0 b0 2d f0       	mov    0xf02db0c0,%eax
f010ebdd:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ebe0:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f010ebe5:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010ebe8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ebeb:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010ebee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ebf1:	89 45 90             	mov    %eax,-0x70(%ebp)
f010ebf4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ebf7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ebfa:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ebfd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ec00:	01 d0                	add    %edx,%eax
f010ec02:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ec05:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ec0c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ec13:	e9 de 00 00 00       	jmp    f010ecf6 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ec18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec1b:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010ec1f:	83 e8 10             	sub    $0x10,%eax
f010ec22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010ec25:	83 ec 08             	sub    $0x8,%esp
f010ec28:	6a 03                	push   $0x3
f010ec2a:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ec2d:	e8 79 08 02 00       	call   f012f4ab <alloc_block>
f010ec32:	83 c4 10             	add    $0x10,%esp
f010ec35:	89 c2                	mov    %eax,%edx
f010ec37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec3a:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010ec41:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec44:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec4b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ec4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec51:	d1 e8                	shr    %eax
f010ec53:	89 c2                	mov    %eax,%edx
f010ec55:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec58:	01 c2                	add    %eax,%edx
f010ec5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec5d:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ec64:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec67:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ec6a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec6d:	01 c2                	add    %eax,%edx
f010ec6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec72:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ec79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec7c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec83:	85 c0                	test   %eax,%eax
f010ec85:	74 15                	je     f010ec9c <test_alloc_block_BF+0x24a>
f010ec87:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec8a:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010ec91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec94:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010ec98:	39 c2                	cmp    %eax,%edx
f010ec9a:	74 2a                	je     f010ecc6 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010ec9c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010eca3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eca6:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010ecad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecb0:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010ecb4:	52                   	push   %edx
f010ecb5:	50                   	push   %eax
f010ecb6:	ff 75 d0             	pushl  -0x30(%ebp)
f010ecb9:	68 d4 3e 13 f0       	push   $0xf0133ed4
f010ecbe:	e8 6e 21 ff ff       	call   f0100e31 <cprintf>
f010ecc3:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ecc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecc9:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ecd0:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ecd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecd8:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010ecdf:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ece4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ece7:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010ecee:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ecf3:	ff 45 d0             	incl   -0x30(%ebp)
f010ecf6:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010ecfa:	0f 8e 18 ff ff ff    	jle    f010ec18 <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010ed00:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed04:	74 04                	je     f010ed0a <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010ed06:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010ed0a:	83 ec 0c             	sub    $0xc,%esp
f010ed0d:	68 38 3f 13 f0       	push   $0xf0133f38
f010ed12:	e8 1a 21 ff ff       	call   f0100e31 <cprintf>
f010ed17:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ed1a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010ed21:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010ed28:	83 ec 08             	sub    $0x8,%esp
f010ed2b:	6a 03                	push   $0x3
f010ed2d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ed30:	e8 76 07 02 00       	call   f012f4ab <alloc_block>
f010ed35:	83 c4 10             	add    $0x10,%esp
f010ed38:	89 45 88             	mov    %eax,-0x78(%ebp)
f010ed3b:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ed3e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010ed41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed44:	d1 e8                	shr    %eax
f010ed46:	89 c2                	mov    %eax,%edx
f010ed48:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed4b:	01 d0                	add    %edx,%eax
f010ed4d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010ed53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed56:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ed59:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed5c:	01 d0                	add    %edx,%eax
f010ed5e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010ed64:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ed67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ed6a:	01 c2                	add    %eax,%edx
f010ed6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ed6f:	01 d0                	add    %edx,%eax
f010ed71:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010ed74:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ed78:	74 08                	je     f010ed82 <test_alloc_block_BF+0x330>
f010ed7a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed7d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010ed80:	74 1d                	je     f010ed9f <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010ed82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010ed89:	83 ec 04             	sub    $0x4,%esp
f010ed8c:	ff 75 c8             	pushl  -0x38(%ebp)
f010ed8f:	ff 75 b4             	pushl  -0x4c(%ebp)
f010ed92:	68 7c 3f 13 f0       	push   $0xf0133f7c
f010ed97:	e8 95 20 ff ff       	call   f0100e31 <cprintf>
f010ed9c:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010ed9f:	8b 45 88             	mov    -0x78(%ebp),%eax
f010eda2:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010eda7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010edad:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010edb2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010edb8:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010edbd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010edc1:	74 04                	je     f010edc7 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010edc3:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010edc7:	83 ec 0c             	sub    $0xc,%esp
f010edca:	68 10 3a 13 f0       	push   $0xf0133a10
f010edcf:	e8 5d 20 ff ff       	call   f0100e31 <cprintf>
f010edd4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010edd7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010edde:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ede5:	e9 8e 00 00 00       	jmp    f010ee78 <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010edea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eded:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010edf4:	66 8b 00             	mov    (%eax),%ax
f010edf7:	66 3d 61 01          	cmp    $0x161,%ax
f010edfb:	75 26                	jne    f010ee23 <test_alloc_block_BF+0x3d1>
f010edfd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee00:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010ee07:	66 8b 00             	mov    (%eax),%ax
f010ee0a:	66 3d 61 01          	cmp    $0x161,%ax
f010ee0e:	75 13                	jne    f010ee23 <test_alloc_block_BF+0x3d1>
f010ee10:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee13:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010ee1a:	66 8b 00             	mov    (%eax),%ax
f010ee1d:	66 3d 61 01          	cmp    $0x161,%ax
f010ee21:	74 52                	je     f010ee75 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010ee23:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ee2a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee2d:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010ee34:	66 8b 00             	mov    (%eax),%ax
f010ee37:	0f bf c8             	movswl %ax,%ecx
f010ee3a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee3d:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010ee44:	66 8b 00             	mov    (%eax),%ax
f010ee47:	0f bf d0             	movswl %ax,%edx
f010ee4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee4d:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ee54:	66 8b 00             	mov    (%eax),%ax
f010ee57:	98                   	cwtl   
f010ee58:	83 ec 08             	sub    $0x8,%esp
f010ee5b:	51                   	push   %ecx
f010ee5c:	52                   	push   %edx
f010ee5d:	50                   	push   %eax
f010ee5e:	68 61 01 00 00       	push   $0x161
f010ee63:	ff 75 cc             	pushl  -0x34(%ebp)
f010ee66:	68 e0 3f 13 f0       	push   $0xf0133fe0
f010ee6b:	e8 c1 1f ff ff       	call   f0100e31 <cprintf>
f010ee70:	83 c4 20             	add    $0x20,%esp
			break;
f010ee73:	eb 0d                	jmp    f010ee82 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010ee75:	ff 45 cc             	incl   -0x34(%ebp)
f010ee78:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010ee7c:	0f 8e 68 ff ff ff    	jle    f010edea <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ee82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ee86:	74 04                	je     f010ee8c <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010ee88:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010ee8c:	83 ec 08             	sub    $0x8,%esp
f010ee8f:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ee92:	68 4c 40 13 f0       	push   $0xf013404c
f010ee97:	e8 95 1f ff ff       	call   f0100e31 <cprintf>
f010ee9c:	83 c4 10             	add    $0x10,%esp
}
f010ee9f:	90                   	nop
f010eea0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eea3:	5b                   	pop    %ebx
f010eea4:	5e                   	pop    %esi
f010eea5:	5f                   	pop    %edi
f010eea6:	5d                   	pop    %ebp
f010eea7:	c3                   	ret    

f010eea8 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010eea8:	55                   	push   %ebp
f010eea9:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010eeab:	90                   	nop
f010eeac:	5d                   	pop    %ebp
f010eead:	c3                   	ret    

f010eeae <test_free_block_FF>:

void test_free_block_FF()
{
f010eeae:	55                   	push   %ebp
f010eeaf:	89 e5                	mov    %esp,%ebp
f010eeb1:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010eeb4:	83 ec 0c             	sub    $0xc,%esp
f010eeb7:	68 94 40 13 f0       	push   $0xf0134094
f010eebc:	e8 70 1f ff ff       	call   f0100e31 <cprintf>
f010eec1:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010eec4:	83 ec 0c             	sub    $0xc,%esp
f010eec7:	68 d4 40 13 f0       	push   $0xf01340d4
f010eecc:	e8 60 1f ff ff       	call   f0100e31 <cprintf>
f010eed1:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010eed4:	83 ec 0c             	sub    $0xc,%esp
f010eed7:	68 94 40 13 f0       	push   $0xf0134094
f010eedc:	e8 50 1f ff ff       	call   f0100e31 <cprintf>
f010eee1:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010eee4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010eeeb:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010eef2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eef5:	83 ec 08             	sub    $0x8,%esp
f010eef8:	50                   	push   %eax
f010eef9:	68 00 00 00 f6       	push   $0xf6000000
f010eefe:	e8 c1 06 02 00       	call   f012f5c4 <initialize_dynamic_allocator>
f010ef03:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010ef06:	83 ec 0c             	sub    $0xc,%esp
f010ef09:	68 14 41 13 f0       	push   $0xf0134114
f010ef0e:	e8 1e 1f ff ff       	call   f0100e31 <cprintf>
f010ef13:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010ef16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ef1d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010ef24:	eb 2a                	jmp    f010ef50 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010ef26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ef29:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010ef30:	89 d0                	mov    %edx,%eax
f010ef32:	c1 e0 02             	shl    $0x2,%eax
f010ef35:	01 d0                	add    %edx,%eax
f010ef37:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ef3e:	01 d0                	add    %edx,%eax
f010ef40:	c1 e0 03             	shl    $0x3,%eax
f010ef43:	89 c2                	mov    %eax,%edx
f010ef45:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef48:	01 d0                	add    %edx,%eax
f010ef4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010ef4d:	ff 45 e8             	incl   -0x18(%ebp)
f010ef50:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010ef54:	7e d0                	jle    f010ef26 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010ef56:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ef59:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010ef5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010ef5f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ef63:	7f 17                	jg     f010ef7c <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010ef65:	83 ec 04             	sub    $0x4,%esp
f010ef68:	68 6c 41 13 f0       	push   $0xf013416c
f010ef6d:	68 fe 01 00 00       	push   $0x1fe
f010ef72:	68 f0 36 13 f0       	push   $0xf01336f0
f010ef77:	e8 34 12 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010ef7c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010ef83:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010ef8a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ef91:	e9 f8 00 00 00       	jmp    f010f08e <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010ef96:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010ef9d:	e9 dc 00 00 00       	jmp    f010f07e <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010efa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efa5:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010efac:	83 e8 10             	sub    $0x10,%eax
f010efaf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010efb2:	83 ec 08             	sub    $0x8,%esp
f010efb5:	6a 01                	push   $0x1
f010efb7:	ff 75 c4             	pushl  -0x3c(%ebp)
f010efba:	e8 ec 04 02 00       	call   f012f4ab <alloc_block>
f010efbf:	83 c4 10             	add    $0x10,%esp
f010efc2:	89 c2                	mov    %eax,%edx
f010efc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efc7:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010efce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efd1:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010efd8:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010efdb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efde:	d1 e8                	shr    %eax
f010efe0:	89 c2                	mov    %eax,%edx
f010efe2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efe5:	01 c2                	add    %eax,%edx
f010efe7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efea:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010eff1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eff4:	8d 50 fe             	lea    -0x2(%eax),%edx
f010eff7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010effa:	01 c2                	add    %eax,%edx
f010effc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efff:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f006:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f00a:	74 0b                	je     f010f017 <test_free_block_FF+0x169>
f010f00c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f00f:	83 c0 10             	add    $0x10,%eax
f010f012:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f015:	74 24                	je     f010f03b <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f017:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f01a:	83 c0 10             	add    $0x10,%eax
f010f01d:	83 ec 08             	sub    $0x8,%esp
f010f020:	ff 75 c0             	pushl  -0x40(%ebp)
f010f023:	50                   	push   %eax
f010f024:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f027:	68 e4 41 13 f0       	push   $0xf01341e4
f010f02c:	68 0d 02 00 00       	push   $0x20d
f010f031:	68 f0 36 13 f0       	push   $0xf01336f0
f010f036:	e8 75 11 ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f03b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f03e:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f045:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f048:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f04b:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010f052:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f055:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f058:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f05b:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010f062:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f065:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f068:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f06b:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010f072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f075:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f078:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f07b:	ff 45 d8             	incl   -0x28(%ebp)
f010f07e:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f085:	0f 8e 17 ff ff ff    	jle    f010efa2 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f08b:	ff 45 dc             	incl   -0x24(%ebp)
f010f08e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f092:	0f 8e fe fe ff ff    	jle    f010ef96 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f098:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f09b:	83 e8 10             	sub    $0x10,%eax
f010f09e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f0a1:	83 ec 08             	sub    $0x8,%esp
f010f0a4:	6a 01                	push   $0x1
f010f0a6:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f0a9:	e8 fd 03 02 00       	call   f012f4ab <alloc_block>
f010f0ae:	83 c4 10             	add    $0x10,%esp
f010f0b1:	89 c2                	mov    %eax,%edx
f010f0b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0b6:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010f0bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0c0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f0c7:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f0ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0cd:	d1 e8                	shr    %eax
f010f0cf:	89 c2                	mov    %eax,%edx
f010f0d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f0d4:	01 c2                	add    %eax,%edx
f010f0d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0d9:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f0e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0e3:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f0e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f0e9:	01 c2                	add    %eax,%edx
f010f0eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0ee:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f0f5:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f0f9:	74 0b                	je     f010f106 <test_free_block_FF+0x258>
f010f0fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f0fe:	83 c0 10             	add    $0x10,%eax
f010f101:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f104:	74 17                	je     f010f11d <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f106:	83 ec 04             	sub    $0x4,%esp
f010f109:	68 48 42 13 f0       	push   $0xf0134248
f010f10e:	68 1e 02 00 00       	push   $0x21e
f010f113:	68 f0 36 13 f0       	push   $0xf01336f0
f010f118:	e8 93 10 ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f11d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f120:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010f127:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f12a:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f12d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f130:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010f137:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f13a:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f13d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f140:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010f147:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f14a:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f14d:	83 ec 0c             	sub    $0xc,%esp
f010f150:	68 90 42 13 f0       	push   $0xf0134290
f010f155:	e8 d7 1c ff ff       	call   f0100e31 <cprintf>
f010f15a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f15d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f164:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f16b:	eb 5b                	jmp    f010f1c8 <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f16d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f170:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f177:	66 8b 00             	mov    (%eax),%ax
f010f17a:	98                   	cwtl   
f010f17b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f17e:	75 26                	jne    f010f1a6 <test_free_block_FF+0x2f8>
f010f180:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f183:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010f18a:	66 8b 00             	mov    (%eax),%ax
f010f18d:	98                   	cwtl   
f010f18e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f191:	75 13                	jne    f010f1a6 <test_free_block_FF+0x2f8>
f010f193:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f196:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010f19d:	66 8b 00             	mov    (%eax),%ax
f010f1a0:	98                   	cwtl   
f010f1a1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f1a4:	74 1f                	je     f010f1c5 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f1a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f1ad:	83 ec 04             	sub    $0x4,%esp
f010f1b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f1b3:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f1b6:	68 c4 42 13 f0       	push   $0xf01342c4
f010f1bb:	e8 71 1c ff ff       	call   f0100e31 <cprintf>
f010f1c0:	83 c4 10             	add    $0x10,%esp
			break;
f010f1c3:	eb 0b                	jmp    f010f1d0 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f1c5:	ff 45 d4             	incl   -0x2c(%ebp)
f010f1c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f1cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f1ce:	7c 9d                	jl     f010f16d <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f1d0:	83 ec 0c             	sub    $0xc,%esp
f010f1d3:	68 14 43 13 f0       	push   $0xf0134314
f010f1d8:	e8 54 1c ff ff       	call   f0100e31 <cprintf>
f010f1dd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f1e0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f1e7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f1ee:	e9 e4 00 00 00       	jmp    f010f2d7 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f1f3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f1f6:	89 d0                	mov    %edx,%eax
f010f1f8:	c1 e0 02             	shl    $0x2,%eax
f010f1fb:	01 d0                	add    %edx,%eax
f010f1fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f204:	01 d0                	add    %edx,%eax
f010f206:	c1 e0 03             	shl    $0x3,%eax
f010f209:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f210:	83 ec 0c             	sub    $0xc,%esp
f010f213:	50                   	push   %eax
f010f214:	e8 39 04 02 00       	call   f012f652 <free_block>
f010f219:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f21c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f21f:	89 d0                	mov    %edx,%eax
f010f221:	c1 e0 02             	shl    $0x2,%eax
f010f224:	01 d0                	add    %edx,%eax
f010f226:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f22d:	01 d0                	add    %edx,%eax
f010f22f:	c1 e0 03             	shl    $0x3,%eax
f010f232:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f239:	83 ec 0c             	sub    $0xc,%esp
f010f23c:	50                   	push   %eax
f010f23d:	e8 3c 02 02 00       	call   f012f47e <get_block_size>
f010f242:	83 c4 10             	add    $0x10,%esp
f010f245:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f248:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f24b:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f252:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f255:	74 2b                	je     f010f282 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f257:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f25b:	74 25                	je     f010f282 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f25d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f264:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f267:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010f26e:	ff 75 bc             	pushl  -0x44(%ebp)
f010f271:	50                   	push   %eax
f010f272:	ff 75 d0             	pushl  -0x30(%ebp)
f010f275:	68 44 43 13 f0       	push   $0xf0134344
f010f27a:	e8 b2 1b ff ff       	call   f0100e31 <cprintf>
f010f27f:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f282:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f285:	89 d0                	mov    %edx,%eax
f010f287:	c1 e0 02             	shl    $0x2,%eax
f010f28a:	01 d0                	add    %edx,%eax
f010f28c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f293:	01 d0                	add    %edx,%eax
f010f295:	c1 e0 03             	shl    $0x3,%eax
f010f298:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f29f:	83 ec 0c             	sub    $0xc,%esp
f010f2a2:	50                   	push   %eax
f010f2a3:	e8 ec 01 02 00       	call   f012f494 <is_free_block>
f010f2a8:	83 c4 10             	add    $0x10,%esp
f010f2ab:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f2ae:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f2b2:	74 20                	je     f010f2d4 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f2b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f2b8:	74 1a                	je     f010f2d4 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f2ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f2c1:	83 ec 08             	sub    $0x8,%esp
f010f2c4:	ff 75 d0             	pushl  -0x30(%ebp)
f010f2c7:	68 a8 43 13 f0       	push   $0xf01343a8
f010f2cc:	e8 60 1b ff ff       	call   f0100e31 <cprintf>
f010f2d1:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f2d4:	ff 45 d0             	incl   -0x30(%ebp)
f010f2d7:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f2db:	0f 8e 12 ff ff ff    	jle    f010f1f3 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f2e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f2e5:	74 04                	je     f010f2eb <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f2e7:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f2eb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f2f2:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f2f7:	83 ec 0c             	sub    $0xc,%esp
f010f2fa:	50                   	push   %eax
f010f2fb:	e8 52 03 02 00       	call   f012f652 <free_block>
f010f300:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f303:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f308:	83 ec 0c             	sub    $0xc,%esp
f010f30b:	50                   	push   %eax
f010f30c:	e8 6d 01 02 00       	call   f012f47e <get_block_size>
f010f311:	83 c4 10             	add    $0x10,%esp
f010f314:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f317:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f31a:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f31d:	74 1d                	je     f010f33c <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f31f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f326:	83 ec 04             	sub    $0x4,%esp
f010f329:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f32c:	ff 75 c8             	pushl  -0x38(%ebp)
f010f32f:	68 00 44 13 f0       	push   $0xf0134400
f010f334:	e8 f8 1a ff ff       	call   f0100e31 <cprintf>
f010f339:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f33c:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f010f341:	83 ec 0c             	sub    $0xc,%esp
f010f344:	50                   	push   %eax
f010f345:	e8 4a 01 02 00       	call   f012f494 <is_free_block>
f010f34a:	83 c4 10             	add    $0x10,%esp
f010f34d:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f350:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f354:	74 17                	je     f010f36d <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f356:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f35d:	83 ec 0c             	sub    $0xc,%esp
f010f360:	68 60 44 13 f0       	push   $0xf0134460
f010f365:	e8 c7 1a ff ff       	call   f0100e31 <cprintf>
f010f36a:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f36d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f370:	83 e8 10             	sub    $0x10,%eax
f010f373:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f376:	83 ec 08             	sub    $0x8,%esp
f010f379:	6a 01                	push   $0x1
f010f37b:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f37e:	e8 28 01 02 00       	call   f012f4ab <alloc_block>
f010f383:	83 c4 10             	add    $0x10,%esp
f010f386:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f389:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f38d:	74 0b                	je     f010f39a <test_free_block_FF+0x4ec>
f010f38f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f392:	83 c0 10             	add    $0x10,%eax
f010f395:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f398:	74 17                	je     f010f3b1 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f39a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f3a1:	83 ec 0c             	sub    $0xc,%esp
f010f3a4:	68 b8 44 13 f0       	push   $0xf01344b8
f010f3a9:	e8 83 1a ff ff       	call   f0100e31 <cprintf>
f010f3ae:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f3b1:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f3b6:	83 ec 0c             	sub    $0xc,%esp
f010f3b9:	50                   	push   %eax
f010f3ba:	e8 93 02 02 00       	call   f012f652 <free_block>
f010f3bf:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f3c2:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f3c7:	83 ec 0c             	sub    $0xc,%esp
f010f3ca:	50                   	push   %eax
f010f3cb:	e8 ae 00 02 00       	call   f012f47e <get_block_size>
f010f3d0:	83 c4 10             	add    $0x10,%esp
f010f3d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f3d6:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f3db:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f3de:	74 20                	je     f010f400 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f3e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f3e7:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f010f3ec:	83 ec 04             	sub    $0x4,%esp
f010f3ef:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f3f2:	50                   	push   %eax
f010f3f3:	68 04 45 13 f0       	push   $0xf0134504
f010f3f8:	e8 34 1a ff ff       	call   f0100e31 <cprintf>
f010f3fd:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f400:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010f405:	83 ec 0c             	sub    $0xc,%esp
f010f408:	50                   	push   %eax
f010f409:	e8 86 00 02 00       	call   f012f494 <is_free_block>
f010f40e:	83 c4 10             	add    $0x10,%esp
f010f411:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f414:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f418:	74 17                	je     f010f431 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f41a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f421:	83 ec 0c             	sub    $0xc,%esp
f010f424:	68 64 45 13 f0       	push   $0xf0134564
f010f429:	e8 03 1a ff ff       	call   f0100e31 <cprintf>
f010f42e:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f431:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f436:	83 e8 10             	sub    $0x10,%eax
f010f439:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f43c:	83 ec 08             	sub    $0x8,%esp
f010f43f:	6a 01                	push   $0x1
f010f441:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f444:	e8 62 00 02 00       	call   f012f4ab <alloc_block>
f010f449:	83 c4 10             	add    $0x10,%esp
f010f44c:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f44f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f453:	74 09                	je     f010f45e <test_free_block_FF+0x5b0>
f010f455:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f45c:	74 17                	je     f010f475 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f45e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f465:	83 ec 0c             	sub    $0xc,%esp
f010f468:	68 bc 45 13 f0       	push   $0xf01345bc
f010f46d:	e8 bf 19 ff ff       	call   f0100e31 <cprintf>
f010f472:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f475:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f47a:	83 ec 0c             	sub    $0xc,%esp
f010f47d:	50                   	push   %eax
f010f47e:	e8 cf 01 02 00       	call   f012f652 <free_block>
f010f483:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f486:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f48b:	83 ec 0c             	sub    $0xc,%esp
f010f48e:	50                   	push   %eax
f010f48f:	e8 ea ff 01 00       	call   f012f47e <get_block_size>
f010f494:	83 c4 10             	add    $0x10,%esp
f010f497:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f49a:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f49f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f4a2:	74 20                	je     f010f4c4 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f4a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f4ab:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f4b0:	83 ec 04             	sub    $0x4,%esp
f010f4b3:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f4b6:	50                   	push   %eax
f010f4b7:	68 08 46 13 f0       	push   $0xf0134608
f010f4bc:	e8 70 19 ff ff       	call   f0100e31 <cprintf>
f010f4c1:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f4c4:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f010f4c9:	83 ec 0c             	sub    $0xc,%esp
f010f4cc:	50                   	push   %eax
f010f4cd:	e8 c2 ff 01 00       	call   f012f494 <is_free_block>
f010f4d2:	83 c4 10             	add    $0x10,%esp
f010f4d5:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f4d8:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f4dc:	74 17                	je     f010f4f5 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f4de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f4e5:	83 ec 0c             	sub    $0xc,%esp
f010f4e8:	68 68 46 13 f0       	push   $0xf0134668
f010f4ed:	e8 3f 19 ff ff       	call   f0100e31 <cprintf>
f010f4f2:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f4f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f4f9:	74 04                	je     f010f4ff <test_free_block_FF+0x651>
	{
		eval += 10;
f010f4fb:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f4ff:	83 ec 0c             	sub    $0xc,%esp
f010f502:	68 c0 46 13 f0       	push   $0xf01346c0
f010f507:	e8 25 19 ff ff       	call   f0100e31 <cprintf>
f010f50c:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f50f:	83 ec 0c             	sub    $0xc,%esp
f010f512:	68 fc 46 13 f0       	push   $0xf01346fc
f010f517:	e8 15 19 ff ff       	call   f0100e31 <cprintf>
f010f51c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f51f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f526:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f52d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f530:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f537:	83 ec 0c             	sub    $0xc,%esp
f010f53a:	50                   	push   %eax
f010f53b:	e8 12 01 02 00       	call   f012f652 <free_block>
f010f540:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f543:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f546:	48                   	dec    %eax
f010f547:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f54e:	83 ec 0c             	sub    $0xc,%esp
f010f551:	50                   	push   %eax
f010f552:	e8 27 ff 01 00       	call   f012f47e <get_block_size>
f010f557:	83 c4 10             	add    $0x10,%esp
f010f55a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f55d:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f563:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f566:	01 d0                	add    %edx,%eax
f010f568:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f56b:	74 26                	je     f010f593 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f56d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f574:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f010f57a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f57d:	01 d0                	add    %edx,%eax
f010f57f:	83 ec 04             	sub    $0x4,%esp
f010f582:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f585:	50                   	push   %eax
f010f586:	68 14 47 13 f0       	push   $0xf0134714
f010f58b:	e8 a1 18 ff ff       	call   f0100e31 <cprintf>
f010f590:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f593:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f596:	48                   	dec    %eax
f010f597:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f59e:	83 ec 0c             	sub    $0xc,%esp
f010f5a1:	50                   	push   %eax
f010f5a2:	e8 ed fe 01 00       	call   f012f494 <is_free_block>
f010f5a7:	83 c4 10             	add    $0x10,%esp
f010f5aa:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f5ad:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f5b1:	74 17                	je     f010f5ca <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f5b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f5ba:	83 ec 0c             	sub    $0xc,%esp
f010f5bd:	68 74 47 13 f0       	push   $0xf0134774
f010f5c2:	e8 6a 18 ff ff       	call   f0100e31 <cprintf>
f010f5c7:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f5ca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f5cd:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f5d4:	83 ec 0c             	sub    $0xc,%esp
f010f5d7:	50                   	push   %eax
f010f5d8:	e8 a1 fe 01 00       	call   f012f47e <get_block_size>
f010f5dd:	83 c4 10             	add    $0x10,%esp
f010f5e0:	85 c0                	test   %eax,%eax
f010f5e2:	75 1a                	jne    f010f5fe <test_free_block_FF+0x750>
f010f5e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f5e7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f5ee:	83 ec 0c             	sub    $0xc,%esp
f010f5f1:	50                   	push   %eax
f010f5f2:	e8 9d fe 01 00       	call   f012f494 <is_free_block>
f010f5f7:	83 c4 10             	add    $0x10,%esp
f010f5fa:	84 c0                	test   %al,%al
f010f5fc:	74 17                	je     f010f615 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f5fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f605:	83 ec 0c             	sub    $0xc,%esp
f010f608:	68 cc 47 13 f0       	push   $0xf01347cc
f010f60d:	e8 1f 18 ff ff       	call   f0100e31 <cprintf>
f010f612:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f615:	83 ec 0c             	sub    $0xc,%esp
f010f618:	68 36 48 13 f0       	push   $0xf0134836
f010f61d:	e8 0f 18 ff ff       	call   f0100e31 <cprintf>
f010f622:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f625:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f62c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f62f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f636:	83 ec 0c             	sub    $0xc,%esp
f010f639:	50                   	push   %eax
f010f63a:	e8 13 00 02 00       	call   f012f652 <free_block>
f010f63f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f642:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f645:	48                   	dec    %eax
f010f646:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f64d:	83 ec 0c             	sub    $0xc,%esp
f010f650:	50                   	push   %eax
f010f651:	e8 28 fe 01 00       	call   f012f47e <get_block_size>
f010f656:	83 c4 10             	add    $0x10,%esp
f010f659:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010f65c:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f662:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f667:	01 d0                	add    %edx,%eax
f010f669:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f66c:	74 28                	je     f010f696 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010f66e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010f675:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f010f67b:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f010f680:	01 d0                	add    %edx,%eax
f010f682:	83 ec 04             	sub    $0x4,%esp
f010f685:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f688:	50                   	push   %eax
f010f689:	68 50 48 13 f0       	push   $0xf0134850
f010f68e:	e8 9e 17 ff ff       	call   f0100e31 <cprintf>
f010f693:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f696:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f699:	48                   	dec    %eax
f010f69a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f6a1:	83 ec 0c             	sub    $0xc,%esp
f010f6a4:	50                   	push   %eax
f010f6a5:	e8 ea fd 01 00       	call   f012f494 <is_free_block>
f010f6aa:	83 c4 10             	add    $0x10,%esp
f010f6ad:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f6b0:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f6b4:	74 17                	je     f010f6cd <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010f6b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f6bd:	83 ec 0c             	sub    $0xc,%esp
f010f6c0:	68 b0 48 13 f0       	push   $0xf01348b0
f010f6c5:	e8 67 17 ff ff       	call   f0100e31 <cprintf>
f010f6ca:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f6cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f6d0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f6d7:	83 ec 0c             	sub    $0xc,%esp
f010f6da:	50                   	push   %eax
f010f6db:	e8 9e fd 01 00       	call   f012f47e <get_block_size>
f010f6e0:	83 c4 10             	add    $0x10,%esp
f010f6e3:	85 c0                	test   %eax,%eax
f010f6e5:	75 1a                	jne    f010f701 <test_free_block_FF+0x853>
f010f6e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f6ea:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f6f1:	83 ec 0c             	sub    $0xc,%esp
f010f6f4:	50                   	push   %eax
f010f6f5:	e8 9a fd 01 00       	call   f012f494 <is_free_block>
f010f6fa:	83 c4 10             	add    $0x10,%esp
f010f6fd:	84 c0                	test   %al,%al
f010f6ff:	74 17                	je     f010f718 <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010f701:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f708:	83 ec 0c             	sub    $0xc,%esp
f010f70b:	68 08 49 13 f0       	push   $0xf0134908
f010f710:	e8 1c 17 ff ff       	call   f0100e31 <cprintf>
f010f715:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f71c:	74 04                	je     f010f722 <test_free_block_FF+0x874>
	{
		eval += 15;
f010f71e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010f722:	83 ec 0c             	sub    $0xc,%esp
f010f725:	68 74 49 13 f0       	push   $0xf0134974
f010f72a:	e8 02 17 ff ff       	call   f0100e31 <cprintf>
f010f72f:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010f732:	83 ec 0c             	sub    $0xc,%esp
f010f735:	68 ac 49 13 f0       	push   $0xf01349ac
f010f73a:	e8 f2 16 ff ff       	call   f0100e31 <cprintf>
f010f73f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f742:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010f749:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f750:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f753:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f75a:	83 ec 0c             	sub    $0xc,%esp
f010f75d:	50                   	push   %eax
f010f75e:	e8 ef fe 01 00       	call   f012f652 <free_block>
f010f763:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010f766:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f769:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f770:	83 ec 0c             	sub    $0xc,%esp
f010f773:	50                   	push   %eax
f010f774:	e8 05 fd 01 00       	call   f012f47e <get_block_size>
f010f779:	83 c4 10             	add    $0x10,%esp
f010f77c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010f77f:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f785:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f78a:	01 d0                	add    %edx,%eax
f010f78c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f78f:	74 28                	je     f010f7b9 <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010f791:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010f798:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f79e:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f010f7a3:	01 d0                	add    %edx,%eax
f010f7a5:	83 ec 04             	sub    $0x4,%esp
f010f7a8:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f7ab:	50                   	push   %eax
f010f7ac:	68 50 48 13 f0       	push   $0xf0134850
f010f7b1:	e8 7b 16 ff ff       	call   f0100e31 <cprintf>
f010f7b6:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010f7b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7bc:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f7c3:	83 ec 0c             	sub    $0xc,%esp
f010f7c6:	50                   	push   %eax
f010f7c7:	e8 c8 fc 01 00       	call   f012f494 <is_free_block>
f010f7cc:	83 c4 10             	add    $0x10,%esp
f010f7cf:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f7d2:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f7d6:	74 17                	je     f010f7ef <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010f7d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f7df:	83 ec 0c             	sub    $0xc,%esp
f010f7e2:	68 b0 48 13 f0       	push   $0xf01348b0
f010f7e7:	e8 45 16 ff ff       	call   f0100e31 <cprintf>
f010f7ec:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010f7ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7f2:	40                   	inc    %eax
f010f7f3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f7fa:	83 ec 0c             	sub    $0xc,%esp
f010f7fd:	50                   	push   %eax
f010f7fe:	e8 7b fc 01 00       	call   f012f47e <get_block_size>
f010f803:	83 c4 10             	add    $0x10,%esp
f010f806:	85 c0                	test   %eax,%eax
f010f808:	75 1b                	jne    f010f825 <test_free_block_FF+0x977>
f010f80a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f80d:	40                   	inc    %eax
f010f80e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f815:	83 ec 0c             	sub    $0xc,%esp
f010f818:	50                   	push   %eax
f010f819:	e8 76 fc 01 00       	call   f012f494 <is_free_block>
f010f81e:	83 c4 10             	add    $0x10,%esp
f010f821:	84 c0                	test   %al,%al
f010f823:	74 17                	je     f010f83c <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010f825:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f82c:	83 ec 0c             	sub    $0xc,%esp
f010f82f:	68 08 49 13 f0       	push   $0xf0134908
f010f834:	e8 f8 15 ff ff       	call   f0100e31 <cprintf>
f010f839:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010f83c:	83 ec 0c             	sub    $0xc,%esp
f010f83f:	68 c1 49 13 f0       	push   $0xf01349c1
f010f844:	e8 e8 15 ff ff       	call   f0100e31 <cprintf>
f010f849:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010f84c:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f853:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f856:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f85d:	83 ec 0c             	sub    $0xc,%esp
f010f860:	50                   	push   %eax
f010f861:	e8 ec fd 01 00       	call   f012f652 <free_block>
f010f866:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010f869:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f86c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f873:	83 ec 0c             	sub    $0xc,%esp
f010f876:	50                   	push   %eax
f010f877:	e8 02 fc 01 00       	call   f012f47e <get_block_size>
f010f87c:	83 c4 10             	add    $0x10,%esp
f010f87f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010f882:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f888:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010f88d:	01 d0                	add    %edx,%eax
f010f88f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f892:	74 28                	je     f010f8bc <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010f894:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010f89b:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f010f8a1:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f010f8a6:	01 d0                	add    %edx,%eax
f010f8a8:	83 ec 04             	sub    $0x4,%esp
f010f8ab:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f8ae:	50                   	push   %eax
f010f8af:	68 dc 49 13 f0       	push   $0xf01349dc
f010f8b4:	e8 78 15 ff ff       	call   f0100e31 <cprintf>
f010f8b9:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010f8bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8bf:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f8c6:	83 ec 0c             	sub    $0xc,%esp
f010f8c9:	50                   	push   %eax
f010f8ca:	e8 c5 fb 01 00       	call   f012f494 <is_free_block>
f010f8cf:	83 c4 10             	add    $0x10,%esp
f010f8d2:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f8d5:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f8d9:	74 17                	je     f010f8f2 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010f8db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f8e2:	83 ec 0c             	sub    $0xc,%esp
f010f8e5:	68 40 4a 13 f0       	push   $0xf0134a40
f010f8ea:	e8 42 15 ff ff       	call   f0100e31 <cprintf>
f010f8ef:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010f8f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8f5:	40                   	inc    %eax
f010f8f6:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f8fd:	83 ec 0c             	sub    $0xc,%esp
f010f900:	50                   	push   %eax
f010f901:	e8 78 fb 01 00       	call   f012f47e <get_block_size>
f010f906:	83 c4 10             	add    $0x10,%esp
f010f909:	85 c0                	test   %eax,%eax
f010f90b:	75 1b                	jne    f010f928 <test_free_block_FF+0xa7a>
f010f90d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f910:	40                   	inc    %eax
f010f911:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f918:	83 ec 0c             	sub    $0xc,%esp
f010f91b:	50                   	push   %eax
f010f91c:	e8 73 fb 01 00       	call   f012f494 <is_free_block>
f010f921:	83 c4 10             	add    $0x10,%esp
f010f924:	84 c0                	test   %al,%al
f010f926:	74 17                	je     f010f93f <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010f928:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f92f:	83 ec 0c             	sub    $0xc,%esp
f010f932:	68 98 4a 13 f0       	push   $0xf0134a98
f010f937:	e8 f5 14 ff ff       	call   f0100e31 <cprintf>
f010f93c:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010f93f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f943:	74 04                	je     f010f949 <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010f945:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010f949:	83 ec 0c             	sub    $0xc,%esp
f010f94c:	68 04 4b 13 f0       	push   $0xf0134b04
f010f951:	e8 db 14 ff ff       	call   f0100e31 <cprintf>
f010f956:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f959:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010f960:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f967:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f96a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f971:	83 ec 0c             	sub    $0xc,%esp
f010f974:	50                   	push   %eax
f010f975:	e8 d8 fc 01 00       	call   f012f652 <free_block>
f010f97a:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010f97d:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f984:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f987:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f98e:	83 ec 0c             	sub    $0xc,%esp
f010f991:	50                   	push   %eax
f010f992:	e8 bb fc 01 00       	call   f012f652 <free_block>
f010f997:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f99a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f99d:	48                   	dec    %eax
f010f99e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010f9a5:	83 ec 0c             	sub    $0xc,%esp
f010f9a8:	50                   	push   %eax
f010f9a9:	e8 d0 fa 01 00       	call   f012f47e <get_block_size>
f010f9ae:	83 c4 10             	add    $0x10,%esp
f010f9b1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010f9b4:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010f9ba:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010f9bf:	01 c2                	add    %eax,%edx
f010f9c1:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010f9c6:	01 d0                	add    %edx,%eax
f010f9c8:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f9cb:	74 2f                	je     f010f9fc <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010f9cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010f9d4:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f010f9da:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f010f9df:	01 c2                	add    %eax,%edx
f010f9e1:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f010f9e6:	01 d0                	add    %edx,%eax
f010f9e8:	83 ec 04             	sub    $0x4,%esp
f010f9eb:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9ee:	50                   	push   %eax
f010f9ef:	68 44 4b 13 f0       	push   $0xf0134b44
f010f9f4:	e8 38 14 ff ff       	call   f0100e31 <cprintf>
f010f9f9:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f9fc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9ff:	48                   	dec    %eax
f010fa00:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa07:	83 ec 0c             	sub    $0xc,%esp
f010fa0a:	50                   	push   %eax
f010fa0b:	e8 84 fa 01 00       	call   f012f494 <is_free_block>
f010fa10:	83 c4 10             	add    $0x10,%esp
f010fa13:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fa16:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fa1a:	74 17                	je     f010fa33 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fa1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fa23:	83 ec 0c             	sub    $0xc,%esp
f010fa26:	68 a8 4b 13 f0       	push   $0xf0134ba8
f010fa2b:	e8 01 14 ff ff       	call   f0100e31 <cprintf>
f010fa30:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fa33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa36:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa3d:	83 ec 0c             	sub    $0xc,%esp
f010fa40:	50                   	push   %eax
f010fa41:	e8 38 fa 01 00       	call   f012f47e <get_block_size>
f010fa46:	83 c4 10             	add    $0x10,%esp
f010fa49:	85 c0                	test   %eax,%eax
f010fa4b:	75 50                	jne    f010fa9d <test_free_block_FF+0xbef>
f010fa4d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa50:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa57:	83 ec 0c             	sub    $0xc,%esp
f010fa5a:	50                   	push   %eax
f010fa5b:	e8 34 fa 01 00       	call   f012f494 <is_free_block>
f010fa60:	83 c4 10             	add    $0x10,%esp
f010fa63:	84 c0                	test   %al,%al
f010fa65:	75 36                	jne    f010fa9d <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fa67:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa6a:	40                   	inc    %eax
f010fa6b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa72:	83 ec 0c             	sub    $0xc,%esp
f010fa75:	50                   	push   %eax
f010fa76:	e8 03 fa 01 00       	call   f012f47e <get_block_size>
f010fa7b:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fa7e:	85 c0                	test   %eax,%eax
f010fa80:	75 1b                	jne    f010fa9d <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fa82:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa85:	40                   	inc    %eax
f010fa86:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fa8d:	83 ec 0c             	sub    $0xc,%esp
f010fa90:	50                   	push   %eax
f010fa91:	e8 fe f9 01 00       	call   f012f494 <is_free_block>
f010fa96:	83 c4 10             	add    $0x10,%esp
f010fa99:	84 c0                	test   %al,%al
f010fa9b:	74 17                	je     f010fab4 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fa9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010faa4:	83 ec 0c             	sub    $0xc,%esp
f010faa7:	68 00 4c 13 f0       	push   $0xf0134c00
f010faac:	e8 80 13 ff ff       	call   f0100e31 <cprintf>
f010fab1:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fab4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fab8:	74 04                	je     f010fabe <test_free_block_FF+0xc10>
	{
		eval += 20;
f010faba:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fabe:	83 ec 0c             	sub    $0xc,%esp
f010fac1:	68 6c 4c 13 f0       	push   $0xf0134c6c
f010fac6:	e8 66 13 ff ff       	call   f0100e31 <cprintf>
f010facb:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010face:	83 ec 0c             	sub    $0xc,%esp
f010fad1:	68 b0 4c 13 f0       	push   $0xf0134cb0
f010fad6:	e8 56 13 ff ff       	call   f0100e31 <cprintf>
f010fadb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fade:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fae5:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010faec:	83 ec 08             	sub    $0x8,%esp
f010faef:	6a 01                	push   $0x1
f010faf1:	ff 75 c4             	pushl  -0x3c(%ebp)
f010faf4:	e8 b2 f9 01 00       	call   f012f4ab <alloc_block>
f010faf9:	83 c4 10             	add    $0x10,%esp
f010fafc:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010faff:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fb06:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fb0a:	74 08                	je     f010fb14 <test_free_block_FF+0xc66>
f010fb0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fb0f:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fb12:	74 1d                	je     f010fb31 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fb14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fb1b:	83 ec 04             	sub    $0x4,%esp
f010fb1e:	ff 75 c0             	pushl  -0x40(%ebp)
f010fb21:	ff 75 a8             	pushl  -0x58(%ebp)
f010fb24:	68 d8 4c 13 f0       	push   $0xf0134cd8
f010fb29:	e8 03 13 ff ff       	call   f0100e31 <cprintf>
f010fb2e:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010fb31:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fb38:	83 ec 08             	sub    $0x8,%esp
f010fb3b:	6a 01                	push   $0x1
f010fb3d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fb40:	e8 66 f9 01 00       	call   f012f4ab <alloc_block>
f010fb45:	83 c4 10             	add    $0x10,%esp
f010fb48:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010fb4b:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fb52:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fb56:	74 08                	je     f010fb60 <test_free_block_FF+0xcb2>
f010fb58:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fb5b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fb5e:	74 1d                	je     f010fb7d <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010fb60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fb67:	83 ec 04             	sub    $0x4,%esp
f010fb6a:	ff 75 c0             	pushl  -0x40(%ebp)
f010fb6d:	ff 75 a8             	pushl  -0x58(%ebp)
f010fb70:	68 3c 4d 13 f0       	push   $0xf0134d3c
f010fb75:	e8 b7 12 ff ff       	call   f0100e31 <cprintf>
f010fb7a:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fb7d:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fb84:	83 ec 08             	sub    $0x8,%esp
f010fb87:	6a 01                	push   $0x1
f010fb89:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fb8c:	e8 1a f9 01 00       	call   f012f4ab <alloc_block>
f010fb91:	83 c4 10             	add    $0x10,%esp
f010fb94:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010fb97:	a1 5c a7 2d f0       	mov    0xf02da75c,%eax
f010fb9c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fb9f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fba3:	74 08                	je     f010fbad <test_free_block_FF+0xcff>
f010fba5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fba8:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fbab:	74 1d                	je     f010fbca <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010fbad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fbb4:	83 ec 04             	sub    $0x4,%esp
f010fbb7:	ff 75 c0             	pushl  -0x40(%ebp)
f010fbba:	ff 75 a8             	pushl  -0x58(%ebp)
f010fbbd:	68 a0 4d 13 f0       	push   $0xf0134da0
f010fbc2:	e8 6a 12 ff ff       	call   f0100e31 <cprintf>
f010fbc7:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fbca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fbce:	74 04                	je     f010fbd4 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010fbd0:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010fbd4:	83 ec 0c             	sub    $0xc,%esp
f010fbd7:	68 04 4e 13 f0       	push   $0xf0134e04
f010fbdc:	e8 50 12 ff ff       	call   f0100e31 <cprintf>
f010fbe1:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fbe4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010fbeb:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fbf2:	83 ec 08             	sub    $0x8,%esp
f010fbf5:	6a 01                	push   $0x1
f010fbf7:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fbfa:	e8 ac f8 01 00       	call   f012f4ab <alloc_block>
f010fbff:	83 c4 10             	add    $0x10,%esp
f010fc02:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010fc05:	a1 b8 b0 2d f0       	mov    0xf02db0b8,%eax
f010fc0a:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fc0d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fc11:	74 08                	je     f010fc1b <test_free_block_FF+0xd6d>
f010fc13:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fc16:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fc19:	74 1d                	je     f010fc38 <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010fc1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fc22:	83 ec 04             	sub    $0x4,%esp
f010fc25:	ff 75 c0             	pushl  -0x40(%ebp)
f010fc28:	ff 75 a8             	pushl  -0x58(%ebp)
f010fc2b:	68 34 4e 13 f0       	push   $0xf0134e34
f010fc30:	e8 fc 11 ff ff       	call   f0100e31 <cprintf>
f010fc35:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fc38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc3c:	74 04                	je     f010fc42 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010fc3e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010fc42:	83 ec 0c             	sub    $0xc,%esp
f010fc45:	68 98 4e 13 f0       	push   $0xf0134e98
f010fc4a:	e8 e2 11 ff ff       	call   f0100e31 <cprintf>
f010fc4f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc52:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f010fc59:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fc60:	83 ec 08             	sub    $0x8,%esp
f010fc63:	6a 01                	push   $0x1
f010fc65:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fc68:	e8 3e f8 01 00       	call   f012f4ab <alloc_block>
f010fc6d:	83 c4 10             	add    $0x10,%esp
f010fc70:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f010fc73:	a1 80 aa 2d f0       	mov    0xf02daa80,%eax
f010fc78:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fc7b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fc7f:	74 08                	je     f010fc89 <test_free_block_FF+0xddb>
f010fc81:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fc84:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fc87:	74 1d                	je     f010fca6 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f010fc89:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fc90:	83 ec 04             	sub    $0x4,%esp
f010fc93:	ff 75 c0             	pushl  -0x40(%ebp)
f010fc96:	ff 75 a8             	pushl  -0x58(%ebp)
f010fc99:	68 34 4e 13 f0       	push   $0xf0134e34
f010fc9e:	e8 8e 11 ff ff       	call   f0100e31 <cprintf>
f010fca3:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f010fca6:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fcad:	83 ec 08             	sub    $0x8,%esp
f010fcb0:	6a 01                	push   $0x1
f010fcb2:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fcb5:	e8 f1 f7 01 00       	call   f012f4ab <alloc_block>
f010fcba:	83 c4 10             	add    $0x10,%esp
f010fcbd:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f010fcc0:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f010fcc5:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fcc8:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fccc:	74 08                	je     f010fcd6 <test_free_block_FF+0xe28>
f010fcce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fcd1:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fcd4:	74 1d                	je     f010fcf3 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f010fcd6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fcdd:	83 ec 04             	sub    $0x4,%esp
f010fce0:	ff 75 c0             	pushl  -0x40(%ebp)
f010fce3:	ff 75 a8             	pushl  -0x58(%ebp)
f010fce6:	68 c0 4e 13 f0       	push   $0xf0134ec0
f010fceb:	e8 41 11 ff ff       	call   f0100e31 <cprintf>
f010fcf0:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fcf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fcf7:	74 04                	je     f010fcfd <test_free_block_FF+0xe4f>
	{
		eval += 10;
f010fcf9:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f010fcfd:	83 ec 08             	sub    $0x8,%esp
f010fd00:	ff 75 f4             	pushl  -0xc(%ebp)
f010fd03:	68 24 4f 13 f0       	push   $0xf0134f24
f010fd08:	e8 24 11 ff ff       	call   f0100e31 <cprintf>
f010fd0d:	83 c4 10             	add    $0x10,%esp

}
f010fd10:	90                   	nop
f010fd11:	c9                   	leave  
f010fd12:	c3                   	ret    

f010fd13 <test_free_block_BF>:

void test_free_block_BF()
{
f010fd13:	55                   	push   %ebp
f010fd14:	89 e5                	mov    %esp,%ebp
f010fd16:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010fd19:	83 ec 0c             	sub    $0xc,%esp
f010fd1c:	68 94 40 13 f0       	push   $0xf0134094
f010fd21:	e8 0b 11 ff ff       	call   f0100e31 <cprintf>
f010fd26:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010fd29:	83 ec 0c             	sub    $0xc,%esp
f010fd2c:	68 d4 40 13 f0       	push   $0xf01340d4
f010fd31:	e8 fb 10 ff ff       	call   f0100e31 <cprintf>
f010fd36:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010fd39:	83 ec 0c             	sub    $0xc,%esp
f010fd3c:	68 94 40 13 f0       	push   $0xf0134094
f010fd41:	e8 eb 10 ff ff       	call   f0100e31 <cprintf>
f010fd46:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f010fd49:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fd50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fd53:	83 ec 08             	sub    $0x8,%esp
f010fd56:	50                   	push   %eax
f010fd57:	68 00 00 00 f6       	push   $0xf6000000
f010fd5c:	e8 63 f8 01 00       	call   f012f5c4 <initialize_dynamic_allocator>
f010fd61:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010fd64:	83 ec 0c             	sub    $0xc,%esp
f010fd67:	68 14 41 13 f0       	push   $0xf0134114
f010fd6c:	e8 c0 10 ff ff       	call   f0100e31 <cprintf>
f010fd71:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010fd74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fd7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010fd82:	eb 2a                	jmp    f010fdae <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fd84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fd87:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f010fd8e:	89 d0                	mov    %edx,%eax
f010fd90:	c1 e0 02             	shl    $0x2,%eax
f010fd93:	01 d0                	add    %edx,%eax
f010fd95:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fd9c:	01 d0                	add    %edx,%eax
f010fd9e:	c1 e0 03             	shl    $0x3,%eax
f010fda1:	89 c2                	mov    %eax,%edx
f010fda3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fda6:	01 d0                	add    %edx,%eax
f010fda8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fdab:	ff 45 f0             	incl   -0x10(%ebp)
f010fdae:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f010fdb2:	7e d0                	jle    f010fd84 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010fdb4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fdb7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fdba:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f010fdbd:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f010fdc1:	7f 17                	jg     f010fdda <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010fdc3:	83 ec 04             	sub    $0x4,%esp
f010fdc6:	68 6c 41 13 f0       	push   $0xf013416c
f010fdcb:	68 90 03 00 00       	push   $0x390
f010fdd0:	68 f0 36 13 f0       	push   $0xf01336f0
f010fdd5:	e8 d6 03 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010fdda:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010fde1:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fde8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fdef:	e9 f8 00 00 00       	jmp    f010feec <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fdf4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010fdfb:	e9 dc 00 00 00       	jmp    f010fedc <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010fe00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe03:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010fe0a:	83 e8 10             	sub    $0x10,%eax
f010fe0d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f010fe10:	83 ec 08             	sub    $0x8,%esp
f010fe13:	6a 03                	push   $0x3
f010fe15:	ff 75 cc             	pushl  -0x34(%ebp)
f010fe18:	e8 8e f6 01 00       	call   f012f4ab <alloc_block>
f010fe1d:	83 c4 10             	add    $0x10,%esp
f010fe20:	89 c2                	mov    %eax,%edx
f010fe22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe25:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010fe2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe2f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010fe36:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010fe39:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe3c:	d1 e8                	shr    %eax
f010fe3e:	89 c2                	mov    %eax,%edx
f010fe40:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe43:	01 c2                	add    %eax,%edx
f010fe45:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe48:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fe4f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe52:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fe55:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe58:	01 c2                	add    %eax,%edx
f010fe5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe5d:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010fe64:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fe68:	74 0b                	je     f010fe75 <test_free_block_BF+0x162>
f010fe6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fe6d:	83 c0 10             	add    $0x10,%eax
f010fe70:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010fe73:	74 24                	je     f010fe99 <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010fe75:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fe78:	83 c0 10             	add    $0x10,%eax
f010fe7b:	83 ec 08             	sub    $0x8,%esp
f010fe7e:	ff 75 c8             	pushl  -0x38(%ebp)
f010fe81:	50                   	push   %eax
f010fe82:	ff 75 ec             	pushl  -0x14(%ebp)
f010fe85:	68 60 4f 13 f0       	push   $0xf0134f60
f010fe8a:	68 9f 03 00 00       	push   $0x39f
f010fe8f:	68 f0 36 13 f0       	push   $0xf01336f0
f010fe94:	e8 17 03 ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010fe99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe9c:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f010fea3:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f010fea6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fea9:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010feb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010feb3:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010feb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010feb9:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010fec0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fec3:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010fec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fec9:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010fed0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fed3:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fed6:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fed9:	ff 45 e0             	incl   -0x20(%ebp)
f010fedc:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f010fee3:	0f 8e 17 ff ff ff    	jle    f010fe00 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fee9:	ff 45 e4             	incl   -0x1c(%ebp)
f010feec:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fef0:	0f 8e fe fe ff ff    	jle    f010fdf4 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010fef6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fef9:	83 e8 10             	sub    $0x10,%eax
f010fefc:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f010feff:	83 ec 08             	sub    $0x8,%esp
f010ff02:	6a 03                	push   $0x3
f010ff04:	ff 75 cc             	pushl  -0x34(%ebp)
f010ff07:	e8 9f f5 01 00       	call   f012f4ab <alloc_block>
f010ff0c:	83 c4 10             	add    $0x10,%esp
f010ff0f:	89 c2                	mov    %eax,%edx
f010ff11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff14:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f010ff1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff1e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010ff25:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010ff28:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ff2b:	d1 e8                	shr    %eax
f010ff2d:	89 c2                	mov    %eax,%edx
f010ff2f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ff32:	01 c2                	add    %eax,%edx
f010ff34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff37:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010ff3e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ff41:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ff44:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ff47:	01 c2                	add    %eax,%edx
f010ff49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff4c:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010ff53:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ff57:	74 0b                	je     f010ff64 <test_free_block_BF+0x251>
f010ff59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ff5c:	83 c0 10             	add    $0x10,%eax
f010ff5f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010ff62:	74 17                	je     f010ff7b <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f010ff64:	83 ec 04             	sub    $0x4,%esp
f010ff67:	68 c4 4f 13 f0       	push   $0xf0134fc4
f010ff6c:	68 b0 03 00 00       	push   $0x3b0
f010ff71:	68 f0 36 13 f0       	push   $0xf01336f0
f010ff76:	e8 35 02 ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010ff7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff7e:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f010ff85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff88:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010ff8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff8e:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f010ff95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff98:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ff9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff9e:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f010ffa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffa8:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010ffab:	83 ec 0c             	sub    $0xc,%esp
f010ffae:	68 90 42 13 f0       	push   $0xf0134290
f010ffb3:	e8 79 0e ff ff       	call   f0100e31 <cprintf>
f010ffb8:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f010ffbb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ffc2:	eb 59                	jmp    f011001d <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010ffc4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffc7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f010ffce:	66 8b 00             	mov    (%eax),%ax
f010ffd1:	98                   	cwtl   
f010ffd2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ffd5:	75 26                	jne    f010fffd <test_free_block_BF+0x2ea>
f010ffd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffda:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f010ffe1:	66 8b 00             	mov    (%eax),%ax
f010ffe4:	98                   	cwtl   
f010ffe5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ffe8:	75 13                	jne    f010fffd <test_free_block_BF+0x2ea>
f010ffea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffed:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f010fff4:	66 8b 00             	mov    (%eax),%ax
f010fff7:	98                   	cwtl   
f010fff8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010fffb:	74 1d                	je     f011001a <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f010fffd:	83 ec 0c             	sub    $0xc,%esp
f0110000:	ff 75 dc             	pushl  -0x24(%ebp)
f0110003:	ff 75 dc             	pushl  -0x24(%ebp)
f0110006:	68 0c 50 13 f0       	push   $0xf013500c
f011000b:	68 bc 03 00 00       	push   $0x3bc
f0110010:	68 f0 36 13 f0       	push   $0xf01336f0
f0110015:	e8 96 01 ff ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011001a:	ff 45 dc             	incl   -0x24(%ebp)
f011001d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110020:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110023:	7c 9f                	jl     f010ffc4 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110025:	83 ec 0c             	sub    $0xc,%esp
f0110028:	68 14 43 13 f0       	push   $0xf0134314
f011002d:	e8 ff 0d ff ff       	call   f0100e31 <cprintf>
f0110032:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110035:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011003c:	e9 d8 00 00 00       	jmp    f0110119 <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110041:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110044:	89 d0                	mov    %edx,%eax
f0110046:	c1 e0 02             	shl    $0x2,%eax
f0110049:	01 d0                	add    %edx,%eax
f011004b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110052:	01 d0                	add    %edx,%eax
f0110054:	c1 e0 03             	shl    $0x3,%eax
f0110057:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011005e:	83 ec 0c             	sub    $0xc,%esp
f0110061:	50                   	push   %eax
f0110062:	e8 eb f5 01 00       	call   f012f652 <free_block>
f0110067:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011006a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011006d:	89 d0                	mov    %edx,%eax
f011006f:	c1 e0 02             	shl    $0x2,%eax
f0110072:	01 d0                	add    %edx,%eax
f0110074:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011007b:	01 d0                	add    %edx,%eax
f011007d:	c1 e0 03             	shl    $0x3,%eax
f0110080:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110087:	83 ec 0c             	sub    $0xc,%esp
f011008a:	50                   	push   %eax
f011008b:	e8 ee f3 01 00       	call   f012f47e <get_block_size>
f0110090:	83 c4 10             	add    $0x10,%esp
f0110093:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f0110096:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110099:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f01100a0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01100a3:	74 28                	je     f01100cd <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01100a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01100a8:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f01100af:	83 ec 08             	sub    $0x8,%esp
f01100b2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01100b5:	50                   	push   %eax
f01100b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01100b9:	68 5c 50 13 f0       	push   $0xf013505c
f01100be:	68 c9 03 00 00       	push   $0x3c9
f01100c3:	68 f0 36 13 f0       	push   $0xf01336f0
f01100c8:	e8 e3 00 ff ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01100cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01100d0:	89 d0                	mov    %edx,%eax
f01100d2:	c1 e0 02             	shl    $0x2,%eax
f01100d5:	01 d0                	add    %edx,%eax
f01100d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01100de:	01 d0                	add    %edx,%eax
f01100e0:	c1 e0 03             	shl    $0x3,%eax
f01100e3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01100ea:	83 ec 0c             	sub    $0xc,%esp
f01100ed:	50                   	push   %eax
f01100ee:	e8 a1 f3 01 00       	call   f012f494 <is_free_block>
f01100f3:	83 c4 10             	add    $0x10,%esp
f01100f6:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f01100f9:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f01100fd:	74 17                	je     f0110116 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01100ff:	ff 75 d8             	pushl  -0x28(%ebp)
f0110102:	68 bc 50 13 f0       	push   $0xf01350bc
f0110107:	68 cc 03 00 00       	push   $0x3cc
f011010c:	68 f0 36 13 f0       	push   $0xf01336f0
f0110111:	e8 9a 00 ff ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110116:	ff 45 d8             	incl   -0x28(%ebp)
f0110119:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f011011d:	0f 8e 1e ff ff ff    	jle    f0110041 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110123:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f0110128:	83 ec 0c             	sub    $0xc,%esp
f011012b:	50                   	push   %eax
f011012c:	e8 21 f5 01 00       	call   f012f652 <free_block>
f0110131:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110134:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f0110139:	83 ec 0c             	sub    $0xc,%esp
f011013c:	50                   	push   %eax
f011013d:	e8 3c f3 01 00       	call   f012f47e <get_block_size>
f0110142:	83 c4 10             	add    $0x10,%esp
f0110145:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f0110148:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011014b:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f011014e:	74 1d                	je     f011016d <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f0110150:	83 ec 0c             	sub    $0xc,%esp
f0110153:	ff 75 bc             	pushl  -0x44(%ebp)
f0110156:	ff 75 d0             	pushl  -0x30(%ebp)
f0110159:	68 14 51 13 f0       	push   $0xf0135114
f011015e:	68 d3 03 00 00       	push   $0x3d3
f0110163:	68 f0 36 13 f0       	push   $0xf01336f0
f0110168:	e8 43 00 ff ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f011016d:	a1 20 ba 2d f0       	mov    0xf02dba20,%eax
f0110172:	83 ec 0c             	sub    $0xc,%esp
f0110175:	50                   	push   %eax
f0110176:	e8 19 f3 01 00       	call   f012f494 <is_free_block>
f011017b:	83 c4 10             	add    $0x10,%esp
f011017e:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110181:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110185:	74 17                	je     f011019e <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110187:	83 ec 04             	sub    $0x4,%esp
f011018a:	68 74 51 13 f0       	push   $0xf0135174
f011018f:	68 d6 03 00 00       	push   $0x3d6
f0110194:	68 f0 36 13 f0       	push   $0xf01336f0
f0110199:	e8 12 00 ff ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f011019e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101a1:	83 e8 10             	sub    $0x10,%eax
f01101a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01101a7:	83 ec 08             	sub    $0x8,%esp
f01101aa:	6a 03                	push   $0x3
f01101ac:	ff 75 cc             	pushl  -0x34(%ebp)
f01101af:	e8 f7 f2 01 00       	call   f012f4ab <alloc_block>
f01101b4:	83 c4 10             	add    $0x10,%esp
f01101b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01101ba:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01101be:	74 0b                	je     f01101cb <test_free_block_BF+0x4b8>
f01101c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01101c3:	83 c0 10             	add    $0x10,%eax
f01101c6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01101c9:	74 17                	je     f01101e2 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f01101cb:	83 ec 04             	sub    $0x4,%esp
f01101ce:	68 c8 51 13 f0       	push   $0xf01351c8
f01101d3:	68 dd 03 00 00       	push   $0x3dd
f01101d8:	68 f0 36 13 f0       	push   $0xf01336f0
f01101dd:	e8 ce ff fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f01101e2:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f01101e7:	83 ec 0c             	sub    $0xc,%esp
f01101ea:	50                   	push   %eax
f01101eb:	e8 62 f4 01 00       	call   f012f652 <free_block>
f01101f0:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f01101f3:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f01101f8:	83 ec 0c             	sub    $0xc,%esp
f01101fb:	50                   	push   %eax
f01101fc:	e8 7d f2 01 00       	call   f012f47e <get_block_size>
f0110201:	83 c4 10             	add    $0x10,%esp
f0110204:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110207:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f011020c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011020f:	74 20                	je     f0110231 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110211:	a1 18 cb 18 f0       	mov    0xf018cb18,%eax
f0110216:	83 ec 0c             	sub    $0xc,%esp
f0110219:	ff 75 bc             	pushl  -0x44(%ebp)
f011021c:	50                   	push   %eax
f011021d:	68 14 52 13 f0       	push   $0xf0135214
f0110222:	68 e3 03 00 00       	push   $0x3e3
f0110227:	68 f0 36 13 f0       	push   $0xf01336f0
f011022c:	e8 7f ff fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f0110231:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f0110236:	83 ec 0c             	sub    $0xc,%esp
f0110239:	50                   	push   %eax
f011023a:	e8 55 f2 01 00       	call   f012f494 <is_free_block>
f011023f:	83 c4 10             	add    $0x10,%esp
f0110242:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110245:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110249:	74 17                	je     f0110262 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011024b:	83 ec 04             	sub    $0x4,%esp
f011024e:	68 74 52 13 f0       	push   $0xf0135274
f0110253:	68 e6 03 00 00       	push   $0x3e6
f0110258:	68 f0 36 13 f0       	push   $0xf01336f0
f011025d:	e8 4e ff fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110262:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f0110267:	83 e8 10             	sub    $0x10,%eax
f011026a:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011026d:	83 ec 08             	sub    $0x8,%esp
f0110270:	6a 03                	push   $0x3
f0110272:	ff 75 cc             	pushl  -0x34(%ebp)
f0110275:	e8 31 f2 01 00       	call   f012f4ab <alloc_block>
f011027a:	83 c4 10             	add    $0x10,%esp
f011027d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f0110280:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110284:	74 09                	je     f011028f <test_free_block_BF+0x57c>
f0110286:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f011028d:	74 17                	je     f01102a6 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f011028f:	83 ec 04             	sub    $0x4,%esp
f0110292:	68 c8 52 13 f0       	push   $0xf01352c8
f0110297:	68 ed 03 00 00       	push   $0x3ed
f011029c:	68 f0 36 13 f0       	push   $0xf01336f0
f01102a1:	e8 0a ff fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f01102a6:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f01102ab:	83 ec 0c             	sub    $0xc,%esp
f01102ae:	50                   	push   %eax
f01102af:	e8 9e f3 01 00       	call   f012f652 <free_block>
f01102b4:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f01102b7:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f01102bc:	83 ec 0c             	sub    $0xc,%esp
f01102bf:	50                   	push   %eax
f01102c0:	e8 b9 f1 01 00       	call   f012f47e <get_block_size>
f01102c5:	83 c4 10             	add    $0x10,%esp
f01102c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f01102cb:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01102d0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01102d3:	74 20                	je     f01102f5 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f01102d5:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01102da:	83 ec 0c             	sub    $0xc,%esp
f01102dd:	ff 75 bc             	pushl  -0x44(%ebp)
f01102e0:	50                   	push   %eax
f01102e1:	68 14 53 13 f0       	push   $0xf0135314
f01102e6:	68 f3 03 00 00       	push   $0x3f3
f01102eb:	68 f0 36 13 f0       	push   $0xf01336f0
f01102f0:	e8 bb fe fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f01102f5:	a1 44 a4 2d f0       	mov    0xf02da444,%eax
f01102fa:	83 ec 0c             	sub    $0xc,%esp
f01102fd:	50                   	push   %eax
f01102fe:	e8 91 f1 01 00       	call   f012f494 <is_free_block>
f0110303:	83 c4 10             	add    $0x10,%esp
f0110306:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110309:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011030d:	74 17                	je     f0110326 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011030f:	83 ec 04             	sub    $0x4,%esp
f0110312:	68 74 53 13 f0       	push   $0xf0135374
f0110317:	68 f6 03 00 00       	push   $0x3f6
f011031c:	68 f0 36 13 f0       	push   $0xf01336f0
f0110321:	e8 8a fe fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110326:	83 ec 0c             	sub    $0xc,%esp
f0110329:	68 c0 46 13 f0       	push   $0xf01346c0
f011032e:	e8 fe 0a ff ff       	call   f0100e31 <cprintf>
f0110333:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110336:	83 ec 0c             	sub    $0xc,%esp
f0110339:	68 fc 46 13 f0       	push   $0xf01346fc
f011033e:	e8 ee 0a ff ff       	call   f0100e31 <cprintf>
f0110343:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110346:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011034d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110350:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110357:	83 ec 0c             	sub    $0xc,%esp
f011035a:	50                   	push   %eax
f011035b:	e8 f2 f2 01 00       	call   f012f652 <free_block>
f0110360:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110363:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110366:	48                   	dec    %eax
f0110367:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011036e:	83 ec 0c             	sub    $0xc,%esp
f0110371:	50                   	push   %eax
f0110372:	e8 07 f1 01 00       	call   f012f47e <get_block_size>
f0110377:	83 c4 10             	add    $0x10,%esp
f011037a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f011037d:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f0110383:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110386:	01 d0                	add    %edx,%eax
f0110388:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011038b:	74 26                	je     f01103b3 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f011038d:	8b 15 18 cb 18 f0    	mov    0xf018cb18,%edx
f0110393:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110396:	01 d0                	add    %edx,%eax
f0110398:	83 ec 0c             	sub    $0xc,%esp
f011039b:	ff 75 bc             	pushl  -0x44(%ebp)
f011039e:	50                   	push   %eax
f011039f:	68 c8 53 13 f0       	push   $0xf01353c8
f01103a4:	68 01 04 00 00       	push   $0x401
f01103a9:	68 f0 36 13 f0       	push   $0xf01336f0
f01103ae:	e8 fd fd fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01103b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103b6:	48                   	dec    %eax
f01103b7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01103be:	83 ec 0c             	sub    $0xc,%esp
f01103c1:	50                   	push   %eax
f01103c2:	e8 cd f0 01 00       	call   f012f494 <is_free_block>
f01103c7:	83 c4 10             	add    $0x10,%esp
f01103ca:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01103cd:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01103d1:	74 17                	je     f01103ea <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01103d3:	83 ec 04             	sub    $0x4,%esp
f01103d6:	68 28 54 13 f0       	push   $0xf0135428
f01103db:	68 04 04 00 00       	push   $0x404
f01103e0:	68 f0 36 13 f0       	push   $0xf01336f0
f01103e5:	e8 c6 fd fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f01103ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103ed:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01103f4:	83 ec 0c             	sub    $0xc,%esp
f01103f7:	50                   	push   %eax
f01103f8:	e8 81 f0 01 00       	call   f012f47e <get_block_size>
f01103fd:	83 c4 10             	add    $0x10,%esp
f0110400:	85 c0                	test   %eax,%eax
f0110402:	75 1a                	jne    f011041e <test_free_block_BF+0x70b>
f0110404:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110407:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011040e:	83 ec 0c             	sub    $0xc,%esp
f0110411:	50                   	push   %eax
f0110412:	e8 7d f0 01 00       	call   f012f494 <is_free_block>
f0110417:	83 c4 10             	add    $0x10,%esp
f011041a:	84 c0                	test   %al,%al
f011041c:	74 17                	je     f0110435 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f011041e:	83 ec 04             	sub    $0x4,%esp
f0110421:	68 7c 54 13 f0       	push   $0xf013547c
f0110426:	68 07 04 00 00       	push   $0x407
f011042b:	68 f0 36 13 f0       	push   $0xf01336f0
f0110430:	e8 7b fd fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110435:	83 ec 0c             	sub    $0xc,%esp
f0110438:	68 36 48 13 f0       	push   $0xf0134836
f011043d:	e8 ef 09 ff ff       	call   f0100e31 <cprintf>
f0110442:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110445:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011044c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011044f:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110456:	83 ec 0c             	sub    $0xc,%esp
f0110459:	50                   	push   %eax
f011045a:	e8 f3 f1 01 00       	call   f012f652 <free_block>
f011045f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110462:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110465:	48                   	dec    %eax
f0110466:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011046d:	83 ec 0c             	sub    $0xc,%esp
f0110470:	50                   	push   %eax
f0110471:	e8 08 f0 01 00       	call   f012f47e <get_block_size>
f0110476:	83 c4 10             	add    $0x10,%esp
f0110479:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f011047c:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f0110482:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f0110487:	01 d0                	add    %edx,%eax
f0110489:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011048c:	74 28                	je     f01104b6 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f011048e:	8b 15 08 cb 18 f0    	mov    0xf018cb08,%edx
f0110494:	a1 08 cb 18 f0       	mov    0xf018cb08,%eax
f0110499:	01 d0                	add    %edx,%eax
f011049b:	83 ec 0c             	sub    $0xc,%esp
f011049e:	ff 75 bc             	pushl  -0x44(%ebp)
f01104a1:	50                   	push   %eax
f01104a2:	68 e8 54 13 f0       	push   $0xf01354e8
f01104a7:	68 10 04 00 00       	push   $0x410
f01104ac:	68 f0 36 13 f0       	push   $0xf01336f0
f01104b1:	e8 fa fc fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01104b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01104b9:	48                   	dec    %eax
f01104ba:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01104c1:	83 ec 0c             	sub    $0xc,%esp
f01104c4:	50                   	push   %eax
f01104c5:	e8 ca ef 01 00       	call   f012f494 <is_free_block>
f01104ca:	83 c4 10             	add    $0x10,%esp
f01104cd:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01104d0:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01104d4:	74 17                	je     f01104ed <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01104d6:	83 ec 04             	sub    $0x4,%esp
f01104d9:	68 48 55 13 f0       	push   $0xf0135548
f01104de:	68 13 04 00 00       	push   $0x413
f01104e3:	68 f0 36 13 f0       	push   $0xf01336f0
f01104e8:	e8 c3 fc fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f01104ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01104f0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01104f7:	83 ec 0c             	sub    $0xc,%esp
f01104fa:	50                   	push   %eax
f01104fb:	e8 7e ef 01 00       	call   f012f47e <get_block_size>
f0110500:	83 c4 10             	add    $0x10,%esp
f0110503:	85 c0                	test   %eax,%eax
f0110505:	75 1a                	jne    f0110521 <test_free_block_BF+0x80e>
f0110507:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011050a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110511:	83 ec 0c             	sub    $0xc,%esp
f0110514:	50                   	push   %eax
f0110515:	e8 7a ef 01 00       	call   f012f494 <is_free_block>
f011051a:	83 c4 10             	add    $0x10,%esp
f011051d:	84 c0                	test   %al,%al
f011051f:	74 17                	je     f0110538 <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110521:	83 ec 04             	sub    $0x4,%esp
f0110524:	68 9c 55 13 f0       	push   $0xf013559c
f0110529:	68 16 04 00 00       	push   $0x416
f011052e:	68 f0 36 13 f0       	push   $0xf01336f0
f0110533:	e8 78 fc fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0110538:	83 ec 0c             	sub    $0xc,%esp
f011053b:	68 74 49 13 f0       	push   $0xf0134974
f0110540:	e8 ec 08 ff ff       	call   f0100e31 <cprintf>
f0110545:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0110548:	83 ec 0c             	sub    $0xc,%esp
f011054b:	68 ac 49 13 f0       	push   $0xf01349ac
f0110550:	e8 dc 08 ff ff       	call   f0100e31 <cprintf>
f0110555:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0110558:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011055f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110562:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110569:	83 ec 0c             	sub    $0xc,%esp
f011056c:	50                   	push   %eax
f011056d:	e8 e0 f0 01 00       	call   f012f652 <free_block>
f0110572:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110575:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110578:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011057f:	83 ec 0c             	sub    $0xc,%esp
f0110582:	50                   	push   %eax
f0110583:	e8 f6 ee 01 00       	call   f012f47e <get_block_size>
f0110588:	83 c4 10             	add    $0x10,%esp
f011058b:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f011058e:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f0110594:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f0110599:	01 d0                	add    %edx,%eax
f011059b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011059e:	74 28                	je     f01105c8 <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f01105a0:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01105a6:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01105ab:	01 d0                	add    %edx,%eax
f01105ad:	83 ec 0c             	sub    $0xc,%esp
f01105b0:	ff 75 bc             	pushl  -0x44(%ebp)
f01105b3:	50                   	push   %eax
f01105b4:	68 e8 54 13 f0       	push   $0xf01354e8
f01105b9:	68 20 04 00 00       	push   $0x420
f01105be:	68 f0 36 13 f0       	push   $0xf01336f0
f01105c3:	e8 e8 fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f01105c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105cb:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01105d2:	83 ec 0c             	sub    $0xc,%esp
f01105d5:	50                   	push   %eax
f01105d6:	e8 b9 ee 01 00       	call   f012f494 <is_free_block>
f01105db:	83 c4 10             	add    $0x10,%esp
f01105de:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01105e1:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01105e5:	74 17                	je     f01105fe <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01105e7:	83 ec 04             	sub    $0x4,%esp
f01105ea:	68 48 55 13 f0       	push   $0xf0135548
f01105ef:	68 23 04 00 00       	push   $0x423
f01105f4:	68 f0 36 13 f0       	push   $0xf01336f0
f01105f9:	e8 b2 fb fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01105fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110601:	40                   	inc    %eax
f0110602:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110609:	83 ec 0c             	sub    $0xc,%esp
f011060c:	50                   	push   %eax
f011060d:	e8 6c ee 01 00       	call   f012f47e <get_block_size>
f0110612:	83 c4 10             	add    $0x10,%esp
f0110615:	85 c0                	test   %eax,%eax
f0110617:	75 1b                	jne    f0110634 <test_free_block_BF+0x921>
f0110619:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011061c:	40                   	inc    %eax
f011061d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110624:	83 ec 0c             	sub    $0xc,%esp
f0110627:	50                   	push   %eax
f0110628:	e8 67 ee 01 00       	call   f012f494 <is_free_block>
f011062d:	83 c4 10             	add    $0x10,%esp
f0110630:	84 c0                	test   %al,%al
f0110632:	74 17                	je     f011064b <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110634:	83 ec 04             	sub    $0x4,%esp
f0110637:	68 9c 55 13 f0       	push   $0xf013559c
f011063c:	68 26 04 00 00       	push   $0x426
f0110641:	68 f0 36 13 f0       	push   $0xf01336f0
f0110646:	e8 65 fb fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f011064b:	83 ec 0c             	sub    $0xc,%esp
f011064e:	68 c1 49 13 f0       	push   $0xf01349c1
f0110653:	e8 d9 07 ff ff       	call   f0100e31 <cprintf>
f0110658:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f011065b:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110662:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110665:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011066c:	83 ec 0c             	sub    $0xc,%esp
f011066f:	50                   	push   %eax
f0110670:	e8 dd ef 01 00       	call   f012f652 <free_block>
f0110675:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110678:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011067b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110682:	83 ec 0c             	sub    $0xc,%esp
f0110685:	50                   	push   %eax
f0110686:	e8 f3 ed 01 00       	call   f012f47e <get_block_size>
f011068b:	83 c4 10             	add    $0x10,%esp
f011068e:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110691:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f0110697:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f011069c:	01 d0                	add    %edx,%eax
f011069e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01106a1:	74 28                	je     f01106cb <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f01106a3:	8b 15 00 cb 18 f0    	mov    0xf018cb00,%edx
f01106a9:	a1 04 cb 18 f0       	mov    0xf018cb04,%eax
f01106ae:	01 d0                	add    %edx,%eax
f01106b0:	83 ec 0c             	sub    $0xc,%esp
f01106b3:	ff 75 bc             	pushl  -0x44(%ebp)
f01106b6:	50                   	push   %eax
f01106b7:	68 08 56 13 f0       	push   $0xf0135608
f01106bc:	68 2f 04 00 00       	push   $0x42f
f01106c1:	68 f0 36 13 f0       	push   $0xf01336f0
f01106c6:	e8 e5 fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f01106cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106ce:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01106d5:	83 ec 0c             	sub    $0xc,%esp
f01106d8:	50                   	push   %eax
f01106d9:	e8 b6 ed 01 00       	call   f012f494 <is_free_block>
f01106de:	83 c4 10             	add    $0x10,%esp
f01106e1:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01106e4:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01106e8:	74 17                	je     f0110701 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01106ea:	83 ec 04             	sub    $0x4,%esp
f01106ed:	68 68 56 13 f0       	push   $0xf0135668
f01106f2:	68 32 04 00 00       	push   $0x432
f01106f7:	68 f0 36 13 f0       	push   $0xf01336f0
f01106fc:	e8 af fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110701:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110704:	40                   	inc    %eax
f0110705:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011070c:	83 ec 0c             	sub    $0xc,%esp
f011070f:	50                   	push   %eax
f0110710:	e8 69 ed 01 00       	call   f012f47e <get_block_size>
f0110715:	83 c4 10             	add    $0x10,%esp
f0110718:	85 c0                	test   %eax,%eax
f011071a:	75 1b                	jne    f0110737 <test_free_block_BF+0xa24>
f011071c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011071f:	40                   	inc    %eax
f0110720:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110727:	83 ec 0c             	sub    $0xc,%esp
f011072a:	50                   	push   %eax
f011072b:	e8 64 ed 01 00       	call   f012f494 <is_free_block>
f0110730:	83 c4 10             	add    $0x10,%esp
f0110733:	84 c0                	test   %al,%al
f0110735:	74 17                	je     f011074e <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110737:	83 ec 04             	sub    $0x4,%esp
f011073a:	68 c0 56 13 f0       	push   $0xf01356c0
f011073f:	68 35 04 00 00       	push   $0x435
f0110744:	68 f0 36 13 f0       	push   $0xf01336f0
f0110749:	e8 62 fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f011074e:	83 ec 0c             	sub    $0xc,%esp
f0110751:	68 04 4b 13 f0       	push   $0xf0134b04
f0110756:	e8 d6 06 ff ff       	call   f0100e31 <cprintf>
f011075b:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f011075e:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110765:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110768:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011076f:	83 ec 0c             	sub    $0xc,%esp
f0110772:	50                   	push   %eax
f0110773:	e8 da ee 01 00       	call   f012f652 <free_block>
f0110778:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f011077b:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110782:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110785:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011078c:	83 ec 0c             	sub    $0xc,%esp
f011078f:	50                   	push   %eax
f0110790:	e8 bd ee 01 00       	call   f012f652 <free_block>
f0110795:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110798:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011079b:	48                   	dec    %eax
f011079c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01107a3:	83 ec 0c             	sub    $0xc,%esp
f01107a6:	50                   	push   %eax
f01107a7:	e8 d2 ec 01 00       	call   f012f47e <get_block_size>
f01107ac:	83 c4 10             	add    $0x10,%esp
f01107af:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f01107b2:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f01107b8:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f01107bd:	01 c2                	add    %eax,%edx
f01107bf:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f01107c4:	01 d0                	add    %edx,%eax
f01107c6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107c9:	74 2f                	je     f01107fa <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f01107cb:	8b 15 0c cb 18 f0    	mov    0xf018cb0c,%edx
f01107d1:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f01107d6:	01 c2                	add    %eax,%edx
f01107d8:	a1 10 cb 18 f0       	mov    0xf018cb10,%eax
f01107dd:	01 d0                	add    %edx,%eax
f01107df:	83 ec 0c             	sub    $0xc,%esp
f01107e2:	ff 75 bc             	pushl  -0x44(%ebp)
f01107e5:	50                   	push   %eax
f01107e6:	68 2c 57 13 f0       	push   $0xf013572c
f01107eb:	68 41 04 00 00       	push   $0x441
f01107f0:	68 f0 36 13 f0       	push   $0xf01336f0
f01107f5:	e8 b6 f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01107fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107fd:	48                   	dec    %eax
f01107fe:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110805:	83 ec 0c             	sub    $0xc,%esp
f0110808:	50                   	push   %eax
f0110809:	e8 86 ec 01 00       	call   f012f494 <is_free_block>
f011080e:	83 c4 10             	add    $0x10,%esp
f0110811:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110814:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110818:	74 17                	je     f0110831 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011081a:	83 ec 04             	sub    $0x4,%esp
f011081d:	68 8c 57 13 f0       	push   $0xf013578c
f0110822:	68 44 04 00 00       	push   $0x444
f0110827:	68 f0 36 13 f0       	push   $0xf01336f0
f011082c:	e8 7f f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110831:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110834:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011083b:	83 ec 0c             	sub    $0xc,%esp
f011083e:	50                   	push   %eax
f011083f:	e8 3a ec 01 00       	call   f012f47e <get_block_size>
f0110844:	83 c4 10             	add    $0x10,%esp
f0110847:	85 c0                	test   %eax,%eax
f0110849:	75 50                	jne    f011089b <test_free_block_BF+0xb88>
f011084b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011084e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110855:	83 ec 0c             	sub    $0xc,%esp
f0110858:	50                   	push   %eax
f0110859:	e8 36 ec 01 00       	call   f012f494 <is_free_block>
f011085e:	83 c4 10             	add    $0x10,%esp
f0110861:	84 c0                	test   %al,%al
f0110863:	75 36                	jne    f011089b <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110865:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110868:	40                   	inc    %eax
f0110869:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110870:	83 ec 0c             	sub    $0xc,%esp
f0110873:	50                   	push   %eax
f0110874:	e8 05 ec 01 00       	call   f012f47e <get_block_size>
f0110879:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f011087c:	85 c0                	test   %eax,%eax
f011087e:	75 1b                	jne    f011089b <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110880:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110883:	40                   	inc    %eax
f0110884:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011088b:	83 ec 0c             	sub    $0xc,%esp
f011088e:	50                   	push   %eax
f011088f:	e8 00 ec 01 00       	call   f012f494 <is_free_block>
f0110894:	83 c4 10             	add    $0x10,%esp
f0110897:	84 c0                	test   %al,%al
f0110899:	74 17                	je     f01108b2 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f011089b:	83 ec 04             	sub    $0x4,%esp
f011089e:	68 e4 57 13 f0       	push   $0xf01357e4
f01108a3:	68 48 04 00 00       	push   $0x448
f01108a8:	68 f0 36 13 f0       	push   $0xf01336f0
f01108ad:	e8 fe f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f01108b2:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f01108b9:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f01108c0:	83 ec 08             	sub    $0x8,%esp
f01108c3:	6a 03                	push   $0x3
f01108c5:	ff 75 cc             	pushl  -0x34(%ebp)
f01108c8:	e8 de eb 01 00       	call   f012f4ab <alloc_block>
f01108cd:	83 c4 10             	add    $0x10,%esp
f01108d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f01108d3:	a1 00 b7 2d f0       	mov    0xf02db700,%eax
f01108d8:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f01108db:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01108df:	74 08                	je     f01108e9 <test_free_block_BF+0xbd6>
f01108e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01108e4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01108e7:	74 1d                	je     f0110906 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01108e9:	83 ec 0c             	sub    $0xc,%esp
f01108ec:	ff 75 c8             	pushl  -0x38(%ebp)
f01108ef:	ff 75 b0             	pushl  -0x50(%ebp)
f01108f2:	68 50 58 13 f0       	push   $0xf0135850
f01108f7:	68 55 04 00 00       	push   $0x455
f01108fc:	68 f0 36 13 f0       	push   $0xf01336f0
f0110901:	e8 aa f8 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110906:	83 ec 0c             	sub    $0xc,%esp
f0110909:	68 6c 4c 13 f0       	push   $0xf0134c6c
f011090e:	e8 1e 05 ff ff       	call   f0100e31 <cprintf>
f0110913:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110916:	83 ec 0c             	sub    $0xc,%esp
f0110919:	68 b4 58 13 f0       	push   $0xf01358b4
f011091e:	e8 0e 05 ff ff       	call   f0100e31 <cprintf>
f0110923:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110926:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011092d:	83 ec 08             	sub    $0x8,%esp
f0110930:	6a 03                	push   $0x3
f0110932:	ff 75 cc             	pushl  -0x34(%ebp)
f0110935:	e8 71 eb 01 00       	call   f012f4ab <alloc_block>
f011093a:	83 c4 10             	add    $0x10,%esp
f011093d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110940:	a1 80 aa 2d f0       	mov    0xf02daa80,%eax
f0110945:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110948:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011094c:	74 08                	je     f0110956 <test_free_block_BF+0xc43>
f011094e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110951:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110954:	74 1d                	je     f0110973 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110956:	83 ec 0c             	sub    $0xc,%esp
f0110959:	ff 75 c8             	pushl  -0x38(%ebp)
f011095c:	ff 75 b0             	pushl  -0x50(%ebp)
f011095f:	68 dc 58 13 f0       	push   $0xf01358dc
f0110964:	68 60 04 00 00       	push   $0x460
f0110969:	68 f0 36 13 f0       	push   $0xf01336f0
f011096e:	e8 3d f8 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110973:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011097a:	83 ec 08             	sub    $0x8,%esp
f011097d:	6a 03                	push   $0x3
f011097f:	ff 75 cc             	pushl  -0x34(%ebp)
f0110982:	e8 24 eb 01 00       	call   f012f4ab <alloc_block>
f0110987:	83 c4 10             	add    $0x10,%esp
f011098a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f011098d:	a1 1c ba 2d f0       	mov    0xf02dba1c,%eax
f0110992:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110995:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110999:	74 08                	je     f01109a3 <test_free_block_BF+0xc90>
f011099b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011099e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01109a1:	74 1d                	je     f01109c0 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01109a3:	83 ec 0c             	sub    $0xc,%esp
f01109a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01109a9:	ff 75 b0             	pushl  -0x50(%ebp)
f01109ac:	68 40 59 13 f0       	push   $0xf0135940
f01109b1:	68 67 04 00 00       	push   $0x467
f01109b6:	68 f0 36 13 f0       	push   $0xf01336f0
f01109bb:	e8 f0 f7 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01109c0:	83 ec 0c             	sub    $0xc,%esp
f01109c3:	68 04 4e 13 f0       	push   $0xf0134e04
f01109c8:	e8 64 04 ff ff       	call   f0100e31 <cprintf>
f01109cd:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f01109d0:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01109d7:	83 ec 08             	sub    $0x8,%esp
f01109da:	6a 03                	push   $0x3
f01109dc:	ff 75 cc             	pushl  -0x34(%ebp)
f01109df:	e8 c7 ea 01 00       	call   f012f4ab <alloc_block>
f01109e4:	83 c4 10             	add    $0x10,%esp
f01109e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01109ea:	a1 b8 b0 2d f0       	mov    0xf02db0b8,%eax
f01109ef:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f01109f2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01109f6:	74 08                	je     f0110a00 <test_free_block_BF+0xced>
f01109f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01109fb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01109fe:	74 1d                	je     f0110a1d <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110a00:	83 ec 0c             	sub    $0xc,%esp
f0110a03:	ff 75 c8             	pushl  -0x38(%ebp)
f0110a06:	ff 75 b0             	pushl  -0x50(%ebp)
f0110a09:	68 a4 59 13 f0       	push   $0xf01359a4
f0110a0e:	68 6f 04 00 00       	push   $0x46f
f0110a13:	68 f0 36 13 f0       	push   $0xf01336f0
f0110a18:	e8 93 f7 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110a1d:	83 ec 0c             	sub    $0xc,%esp
f0110a20:	68 08 5a 13 f0       	push   $0xf0135a08
f0110a25:	e8 07 04 ff ff       	call   f0100e31 <cprintf>
f0110a2a:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110a2d:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110a34:	83 ec 08             	sub    $0x8,%esp
f0110a37:	6a 03                	push   $0x3
f0110a39:	ff 75 cc             	pushl  -0x34(%ebp)
f0110a3c:	e8 6a ea 01 00       	call   f012f4ab <alloc_block>
f0110a41:	83 c4 10             	add    $0x10,%esp
f0110a44:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110a47:	a1 5c a7 2d f0       	mov    0xf02da75c,%eax
f0110a4c:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110a4f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a53:	74 08                	je     f0110a5d <test_free_block_BF+0xd4a>
f0110a55:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110a58:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110a5b:	74 1d                	je     f0110a7a <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110a5d:	83 ec 0c             	sub    $0xc,%esp
f0110a60:	ff 75 c8             	pushl  -0x38(%ebp)
f0110a63:	ff 75 b0             	pushl  -0x50(%ebp)
f0110a66:	68 30 5a 13 f0       	push   $0xf0135a30
f0110a6b:	68 77 04 00 00       	push   $0x477
f0110a70:	68 f0 36 13 f0       	push   $0xf01336f0
f0110a75:	e8 36 f7 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110a7a:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110a81:	83 ec 08             	sub    $0x8,%esp
f0110a84:	6a 03                	push   $0x3
f0110a86:	ff 75 cc             	pushl  -0x34(%ebp)
f0110a89:	e8 1d ea 01 00       	call   f012f4ab <alloc_block>
f0110a8e:	83 c4 10             	add    $0x10,%esp
f0110a91:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110a94:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110a9b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a9f:	74 08                	je     f0110aa9 <test_free_block_BF+0xd96>
f0110aa1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110aa4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110aa7:	74 1d                	je     f0110ac6 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110aa9:	83 ec 0c             	sub    $0xc,%esp
f0110aac:	ff 75 c8             	pushl  -0x38(%ebp)
f0110aaf:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ab2:	68 94 5a 13 f0       	push   $0xf0135a94
f0110ab7:	68 7e 04 00 00       	push   $0x47e
f0110abc:	68 f0 36 13 f0       	push   $0xf01336f0
f0110ac1:	e8 ea f6 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110ac6:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110acd:	83 ec 08             	sub    $0x8,%esp
f0110ad0:	6a 03                	push   $0x3
f0110ad2:	ff 75 cc             	pushl  -0x34(%ebp)
f0110ad5:	e8 d1 e9 01 00       	call   f012f4ab <alloc_block>
f0110ada:	83 c4 10             	add    $0x10,%esp
f0110add:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110ae0:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110ae7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110aeb:	74 08                	je     f0110af5 <test_free_block_BF+0xde2>
f0110aed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110af0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110af3:	74 1d                	je     f0110b12 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110af5:	83 ec 0c             	sub    $0xc,%esp
f0110af8:	ff 75 c8             	pushl  -0x38(%ebp)
f0110afb:	ff 75 b0             	pushl  -0x50(%ebp)
f0110afe:	68 f8 5a 13 f0       	push   $0xf0135af8
f0110b03:	68 85 04 00 00       	push   $0x485
f0110b08:	68 f0 36 13 f0       	push   $0xf01336f0
f0110b0d:	e8 9e f6 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110b12:	83 ec 0c             	sub    $0xc,%esp
f0110b15:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0110b1a:	e8 12 03 ff ff       	call   f0100e31 <cprintf>
f0110b1f:	83 c4 10             	add    $0x10,%esp

}
f0110b22:	90                   	nop
f0110b23:	c9                   	leave  
f0110b24:	c3                   	ret    

f0110b25 <test_free_block_NF>:

void test_free_block_NF()
{
f0110b25:	55                   	push   %ebp
f0110b26:	89 e5                	mov    %esp,%ebp
f0110b28:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110b2b:	83 ec 04             	sub    $0x4,%esp
f0110b2e:	68 a5 5b 13 f0       	push   $0xf0135ba5
f0110b33:	68 8e 04 00 00       	push   $0x48e
f0110b38:	68 f0 36 13 f0       	push   $0xf01336f0
f0110b3d:	e8 6e f6 fe ff       	call   f01001b0 <_panic>

f0110b42 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110b42:	55                   	push   %ebp
f0110b43:	89 e5                	mov    %esp,%ebp
f0110b45:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110b48:	83 ec 0c             	sub    $0xc,%esp
f0110b4b:	68 b8 5b 13 f0       	push   $0xf0135bb8
f0110b50:	e8 dc 02 ff ff       	call   f0100e31 <cprintf>
f0110b55:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110b58:	83 ec 0c             	sub    $0xc,%esp
f0110b5b:	68 f0 5b 13 f0       	push   $0xf0135bf0
f0110b60:	e8 cc 02 ff ff       	call   f0100e31 <cprintf>
f0110b65:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110b68:	83 ec 0c             	sub    $0xc,%esp
f0110b6b:	68 28 5c 13 f0       	push   $0xf0135c28
f0110b70:	e8 bc 02 ff ff       	call   f0100e31 <cprintf>
f0110b75:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110b78:	83 ec 0c             	sub    $0xc,%esp
f0110b7b:	68 b8 5b 13 f0       	push   $0xf0135bb8
f0110b80:	e8 ac 02 ff ff       	call   f0100e31 <cprintf>
f0110b85:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110b88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110b8f:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110b96:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110b99:	83 ec 08             	sub    $0x8,%esp
f0110b9c:	50                   	push   %eax
f0110b9d:	68 00 00 00 f6       	push   $0xf6000000
f0110ba2:	e8 1d ea 01 00       	call   f012f5c4 <initialize_dynamic_allocator>
f0110ba7:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110baa:	83 ec 0c             	sub    $0xc,%esp
f0110bad:	68 60 5c 13 f0       	push   $0xf0135c60
f0110bb2:	e8 7a 02 ff ff       	call   f0100e31 <cprintf>
f0110bb7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110bba:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110bc1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110bc8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110bcf:	eb 2a                	jmp    f0110bfb <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110bd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110bd4:	8b 14 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%edx
f0110bdb:	89 d0                	mov    %edx,%eax
f0110bdd:	c1 e0 02             	shl    $0x2,%eax
f0110be0:	01 d0                	add    %edx,%eax
f0110be2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110be9:	01 d0                	add    %edx,%eax
f0110beb:	c1 e0 03             	shl    $0x3,%eax
f0110bee:	89 c2                	mov    %eax,%edx
f0110bf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bf3:	01 d0                	add    %edx,%eax
f0110bf5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110bf8:	ff 45 e8             	incl   -0x18(%ebp)
f0110bfb:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110bff:	7e d0                	jle    f0110bd1 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110c01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c04:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110c07:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110c0a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110c0e:	7f 17                	jg     f0110c27 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110c10:	83 ec 04             	sub    $0x4,%esp
f0110c13:	68 90 5c 13 f0       	push   $0xf0135c90
f0110c18:	68 b5 04 00 00       	push   $0x4b5
f0110c1d:	68 f0 36 13 f0       	push   $0xf01336f0
f0110c22:	e8 89 f5 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110c27:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110c2e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110c35:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110c3c:	e9 f8 00 00 00       	jmp    f0110d39 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110c41:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110c48:	e9 dc 00 00 00       	jmp    f0110d29 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110c4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110c50:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110c57:	83 e8 10             	sub    $0x10,%eax
f0110c5a:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110c5d:	83 ec 08             	sub    $0x8,%esp
f0110c60:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c63:	6a 00                	push   $0x0
f0110c65:	e8 05 ea 01 00       	call   f012f66f <realloc_block_FF>
f0110c6a:	83 c4 10             	add    $0x10,%esp
f0110c6d:	89 c2                	mov    %eax,%edx
f0110c6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c72:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f0110c79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c7c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110c83:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110c86:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c89:	d1 e8                	shr    %eax
f0110c8b:	89 c2                	mov    %eax,%edx
f0110c8d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110c90:	01 c2                	add    %eax,%edx
f0110c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c95:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110c9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c9f:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110ca2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110ca5:	01 c2                	add    %eax,%edx
f0110ca7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110caa:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110cb1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110cb5:	74 0b                	je     f0110cc2 <test_realloc_block_FF+0x180>
f0110cb7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110cba:	83 c0 10             	add    $0x10,%eax
f0110cbd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110cc0:	74 24                	je     f0110ce6 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110cc2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110cc5:	83 c0 10             	add    $0x10,%eax
f0110cc8:	83 ec 08             	sub    $0x8,%esp
f0110ccb:	ff 75 bc             	pushl  -0x44(%ebp)
f0110cce:	50                   	push   %eax
f0110ccf:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110cd2:	68 10 5d 13 f0       	push   $0xf0135d10
f0110cd7:	68 c4 04 00 00       	push   $0x4c4
f0110cdc:	68 f0 36 13 f0       	push   $0xf01336f0
f0110ce1:	e8 ca f4 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0110ce6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110ce9:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110cf0:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0110cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cf6:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f0110cfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d00:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110d03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d06:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f0110d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d10:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110d13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d16:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f0110d1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d20:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110d23:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110d26:	ff 45 d8             	incl   -0x28(%ebp)
f0110d29:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0110d30:	0f 8e 17 ff ff ff    	jle    f0110c4d <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110d36:	ff 45 dc             	incl   -0x24(%ebp)
f0110d39:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110d3d:	0f 8e fe fe ff ff    	jle    f0110c41 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110d43:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110d46:	83 e8 10             	sub    $0x10,%eax
f0110d49:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110d4c:	83 ec 08             	sub    $0x8,%esp
f0110d4f:	ff 75 c0             	pushl  -0x40(%ebp)
f0110d52:	6a 00                	push   $0x0
f0110d54:	e8 16 e9 01 00       	call   f012f66f <realloc_block_FF>
f0110d59:	83 c4 10             	add    $0x10,%esp
f0110d5c:	89 c2                	mov    %eax,%edx
f0110d5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d61:	89 14 85 40 a4 2d f0 	mov    %edx,-0xfd25bc0(,%eax,4)
f0110d68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d6b:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110d72:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110d75:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d78:	d1 e8                	shr    %eax
f0110d7a:	89 c2                	mov    %eax,%edx
f0110d7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110d7f:	01 c2                	add    %eax,%edx
f0110d81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d84:	89 14 85 40 d0 2d f0 	mov    %edx,-0xfd22fc0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110d8b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d8e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110d91:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110d94:	01 c2                	add    %eax,%edx
f0110d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d99:	89 14 85 40 ba 2d f0 	mov    %edx,-0xfd245c0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110da0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110da4:	74 0b                	je     f0110db1 <test_realloc_block_FF+0x26f>
f0110da6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110da9:	83 c0 10             	add    $0x10,%eax
f0110dac:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110daf:	74 17                	je     f0110dc8 <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0110db1:	83 ec 04             	sub    $0x4,%esp
f0110db4:	68 6c 5d 13 f0       	push   $0xf0135d6c
f0110db9:	68 d5 04 00 00       	push   $0x4d5
f0110dbe:	68 f0 36 13 f0       	push   $0xf01336f0
f0110dc3:	e8 e8 f3 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0110dc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110dcb:	8b 14 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%edx
f0110dd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110dd5:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110dd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ddb:	8b 14 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%edx
f0110de2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110de5:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110deb:	8b 14 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%edx
f0110df2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110df5:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110df8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110dff:	eb 59                	jmp    f0110e5a <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110e01:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e04:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110e0b:	66 8b 00             	mov    (%eax),%ax
f0110e0e:	98                   	cwtl   
f0110e0f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e12:	75 26                	jne    f0110e3a <test_realloc_block_FF+0x2f8>
f0110e14:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e17:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0110e1e:	66 8b 00             	mov    (%eax),%ax
f0110e21:	98                   	cwtl   
f0110e22:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e25:	75 13                	jne    f0110e3a <test_realloc_block_FF+0x2f8>
f0110e27:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e2a:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f0110e31:	66 8b 00             	mov    (%eax),%ax
f0110e34:	98                   	cwtl   
f0110e35:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e38:	74 1d                	je     f0110e57 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0110e3a:	83 ec 0c             	sub    $0xc,%esp
f0110e3d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e40:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e43:	68 b0 5d 13 f0       	push   $0xf0135db0
f0110e48:	68 df 04 00 00       	push   $0x4df
f0110e4d:	68 f0 36 13 f0       	push   $0xf01336f0
f0110e52:	e8 59 f3 fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110e57:	ff 45 d4             	incl   -0x2c(%ebp)
f0110e5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e5d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110e60:	7c 9f                	jl     f0110e01 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0110e62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e66:	74 04                	je     f0110e6c <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f0110e68:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f0110e6c:	83 ec 0c             	sub    $0xc,%esp
f0110e6f:	68 08 5e 13 f0       	push   $0xf0135e08
f0110e74:	e8 b8 ff fe ff       	call   f0100e31 <cprintf>
f0110e79:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110e7c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110e83:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110e8a:	e9 fa 00 00 00       	jmp    f0110f89 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f0110e8f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110e92:	89 d0                	mov    %edx,%eax
f0110e94:	c1 e0 02             	shl    $0x2,%eax
f0110e97:	01 d0                	add    %edx,%eax
f0110e99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110ea0:	01 d0                	add    %edx,%eax
f0110ea2:	c1 e0 03             	shl    $0x3,%eax
f0110ea5:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110eac:	83 ec 08             	sub    $0x8,%esp
f0110eaf:	6a 00                	push   $0x0
f0110eb1:	50                   	push   %eax
f0110eb2:	e8 b8 e7 01 00       	call   f012f66f <realloc_block_FF>
f0110eb7:	83 c4 10             	add    $0x10,%esp
f0110eba:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0110ebd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110ec0:	89 d0                	mov    %edx,%eax
f0110ec2:	c1 e0 02             	shl    $0x2,%eax
f0110ec5:	01 d0                	add    %edx,%eax
f0110ec7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110ece:	01 d0                	add    %edx,%eax
f0110ed0:	c1 e0 03             	shl    $0x3,%eax
f0110ed3:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110eda:	83 ec 0c             	sub    $0xc,%esp
f0110edd:	50                   	push   %eax
f0110ede:	e8 9b e5 01 00       	call   f012f47e <get_block_size>
f0110ee3:	83 c4 10             	add    $0x10,%esp
f0110ee6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f0110ee9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110eec:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110ef3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0110ef6:	74 28                	je     f0110f20 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110ef8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110efb:	8b 04 85 00 cb 18 f0 	mov    -0xfe73500(,%eax,4),%eax
f0110f02:	83 ec 08             	sub    $0x8,%esp
f0110f05:	ff 75 b8             	pushl  -0x48(%ebp)
f0110f08:	50                   	push   %eax
f0110f09:	ff 75 d0             	pushl  -0x30(%ebp)
f0110f0c:	68 38 5e 13 f0       	push   $0xf0135e38
f0110f11:	68 f3 04 00 00       	push   $0x4f3
f0110f16:	68 f0 36 13 f0       	push   $0xf01336f0
f0110f1b:	e8 90 f2 fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0110f20:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110f23:	89 d0                	mov    %edx,%eax
f0110f25:	c1 e0 02             	shl    $0x2,%eax
f0110f28:	01 d0                	add    %edx,%eax
f0110f2a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f31:	01 d0                	add    %edx,%eax
f0110f33:	c1 e0 03             	shl    $0x3,%eax
f0110f36:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110f3d:	83 ec 0c             	sub    $0xc,%esp
f0110f40:	50                   	push   %eax
f0110f41:	e8 4e e5 01 00       	call   f012f494 <is_free_block>
f0110f46:	83 c4 10             	add    $0x10,%esp
f0110f49:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f0110f4c:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f0110f50:	74 17                	je     f0110f69 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0110f52:	ff 75 d0             	pushl  -0x30(%ebp)
f0110f55:	68 a0 5e 13 f0       	push   $0xf0135ea0
f0110f5a:	68 f6 04 00 00       	push   $0x4f6
f0110f5f:	68 f0 36 13 f0       	push   $0xf01336f0
f0110f64:	e8 47 f2 fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f0110f69:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110f6d:	74 17                	je     f0110f86 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f0110f6f:	ff 75 d0             	pushl  -0x30(%ebp)
f0110f72:	68 fc 5e 13 f0       	push   $0xf0135efc
f0110f77:	68 f8 04 00 00       	push   $0x4f8
f0110f7c:	68 f0 36 13 f0       	push   $0xf01336f0
f0110f81:	e8 2a f2 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f86:	ff 45 d0             	incl   -0x30(%ebp)
f0110f89:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110f8d:	0f 8e fc fe ff ff    	jle    f0110e8f <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f0110f93:	83 ec 08             	sub    $0x8,%esp
f0110f96:	6a 00                	push   $0x0
f0110f98:	6a 00                	push   $0x0
f0110f9a:	e8 d0 e6 01 00       	call   f012f66f <realloc_block_FF>
f0110f9f:	83 c4 10             	add    $0x10,%esp
f0110fa2:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0110fa5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0110fa9:	74 17                	je     f0110fc2 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f0110fab:	83 ec 04             	sub    $0x4,%esp
f0110fae:	68 30 5f 13 f0       	push   $0xf0135f30
f0110fb3:	68 fe 04 00 00       	push   $0x4fe
f0110fb8:	68 f0 36 13 f0       	push   $0xf01336f0
f0110fbd:	e8 ee f1 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0110fc2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110fc9:	eb 6b                	jmp    f0111036 <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f0110fcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fce:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0110fd3:	99                   	cltd   
f0110fd4:	f7 f9                	idiv   %ecx
f0110fd6:	89 d0                	mov    %edx,%eax
f0110fd8:	85 c0                	test   %eax,%eax
f0110fda:	74 56                	je     f0111032 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110fdc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fdf:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0110fe6:	66 8b 00             	mov    (%eax),%ax
f0110fe9:	98                   	cwtl   
f0110fea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fed:	75 26                	jne    f0111015 <test_realloc_block_FF+0x4d3>
f0110fef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110ff2:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0110ff9:	66 8b 00             	mov    (%eax),%ax
f0110ffc:	98                   	cwtl   
f0110ffd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111000:	75 13                	jne    f0111015 <test_realloc_block_FF+0x4d3>
f0111002:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111005:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f011100c:	66 8b 00             	mov    (%eax),%ax
f011100f:	98                   	cwtl   
f0111010:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111013:	74 1e                	je     f0111033 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111015:	83 ec 0c             	sub    $0xc,%esp
f0111018:	ff 75 cc             	pushl  -0x34(%ebp)
f011101b:	ff 75 cc             	pushl  -0x34(%ebp)
f011101e:	68 64 5f 13 f0       	push   $0xf0135f64
f0111023:	68 06 05 00 00       	push   $0x506
f0111028:	68 f0 36 13 f0       	push   $0xf01336f0
f011102d:	e8 7e f1 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0111032:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111033:	ff 45 cc             	incl   -0x34(%ebp)
f0111036:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111039:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011103c:	7c 8d                	jl     f0110fcb <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f011103e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111042:	74 04                	je     f0111048 <test_realloc_block_FF+0x506>
	{
		eval += 10;
f0111044:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f0111048:	83 ec 0c             	sub    $0xc,%esp
f011104b:	68 bc 5f 13 f0       	push   $0xf0135fbc
f0111050:	e8 dc fd fe ff       	call   f0100e31 <cprintf>
f0111055:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f0111058:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f011105f:	83 ec 0c             	sub    $0xc,%esp
f0111062:	68 f4 5f 13 f0       	push   $0xf0135ff4
f0111067:	e8 c5 fd fe ff       	call   f0100e31 <cprintf>
f011106c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011106f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111076:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f011107d:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0111082:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f0111088:	d1 ea                	shr    %edx
f011108a:	01 d0                	add    %edx,%eax
f011108c:	83 e8 10             	sub    $0x10,%eax
f011108f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111092:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111095:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111098:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011109f:	83 ec 08             	sub    $0x8,%esp
f01110a2:	52                   	push   %edx
f01110a3:	50                   	push   %eax
f01110a4:	e8 c6 e5 01 00       	call   f012f66f <realloc_block_FF>
f01110a9:	83 c4 10             	add    $0x10,%esp
f01110ac:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01110af:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01110b3:	74 0f                	je     f01110c4 <test_realloc_block_FF+0x582>
f01110b5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110b8:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01110bf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01110c2:	74 25                	je     f01110e9 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f01110c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01110cb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110ce:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01110d5:	83 ec 04             	sub    $0x4,%esp
f01110d8:	ff 75 bc             	pushl  -0x44(%ebp)
f01110db:	50                   	push   %eax
f01110dc:	68 2c 60 13 f0       	push   $0xf013602c
f01110e1:	e8 4b fd fe ff       	call   f0100e31 <cprintf>
f01110e6:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01110e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110ec:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01110f3:	83 ec 0c             	sub    $0xc,%esp
f01110f6:	50                   	push   %eax
f01110f7:	e8 82 e3 01 00       	call   f012f47e <get_block_size>
f01110fc:	83 c4 10             	add    $0x10,%esp
f01110ff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111102:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111105:	8d 50 10             	lea    0x10(%eax),%edx
f0111108:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011110b:	39 c2                	cmp    %eax,%edx
f011110d:	74 21                	je     f0111130 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f011110f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111116:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111119:	83 c0 10             	add    $0x10,%eax
f011111c:	83 ec 04             	sub    $0x4,%esp
f011111f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111122:	50                   	push   %eax
f0111123:	68 8c 60 13 f0       	push   $0xf013608c
f0111128:	e8 04 fd fe ff       	call   f0100e31 <cprintf>
f011112d:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111130:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111133:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011113a:	83 ec 0c             	sub    $0xc,%esp
f011113d:	50                   	push   %eax
f011113e:	e8 51 e3 01 00       	call   f012f494 <is_free_block>
f0111143:	83 c4 10             	add    $0x10,%esp
f0111146:	0f be c0             	movsbl %al,%eax
f0111149:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f011114c:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111150:	74 17                	je     f0111169 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f0111152:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111159:	83 ec 0c             	sub    $0xc,%esp
f011115c:	68 f8 60 13 f0       	push   $0xf01360f8
f0111161:	e8 cb fc fe ff       	call   f0100e31 <cprintf>
f0111166:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111169:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011116c:	40                   	inc    %eax
f011116d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111174:	83 ec 0c             	sub    $0xc,%esp
f0111177:	50                   	push   %eax
f0111178:	e8 01 e3 01 00       	call   f012f47e <get_block_size>
f011117d:	83 c4 10             	add    $0x10,%esp
f0111180:	85 c0                	test   %eax,%eax
f0111182:	75 1b                	jne    f011119f <test_realloc_block_FF+0x65d>
f0111184:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111187:	40                   	inc    %eax
f0111188:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011118f:	83 ec 0c             	sub    $0xc,%esp
f0111192:	50                   	push   %eax
f0111193:	e8 fc e2 01 00       	call   f012f494 <is_free_block>
f0111198:	83 c4 10             	add    $0x10,%esp
f011119b:	84 c0                	test   %al,%al
f011119d:	74 17                	je     f01111b6 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f011119f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01111a6:	83 ec 0c             	sub    $0xc,%esp
f01111a9:	68 58 61 13 f0       	push   $0xf0136158
f01111ae:	e8 7e fc fe ff       	call   f0100e31 <cprintf>
f01111b3:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01111b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01111b9:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01111c0:	66 8b 00             	mov    (%eax),%ax
f01111c3:	98                   	cwtl   
f01111c4:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01111c7:	75 26                	jne    f01111ef <test_realloc_block_FF+0x6ad>
f01111c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01111cc:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f01111d3:	66 8b 00             	mov    (%eax),%ax
f01111d6:	98                   	cwtl   
f01111d7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01111da:	75 13                	jne    f01111ef <test_realloc_block_FF+0x6ad>
f01111dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01111df:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f01111e6:	66 8b 00             	mov    (%eax),%ax
f01111e9:	98                   	cwtl   
f01111ea:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01111ed:	74 1a                	je     f0111209 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f01111ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01111f6:	83 ec 08             	sub    $0x8,%esp
f01111f9:	ff 75 ac             	pushl  -0x54(%ebp)
f01111fc:	68 cc 61 13 f0       	push   $0xf01361cc
f0111201:	e8 2b fc fe ff       	call   f0100e31 <cprintf>
f0111206:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111209:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011120d:	74 04                	je     f0111213 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f011120f:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111213:	83 ec 0c             	sub    $0xc,%esp
f0111216:	68 2c 62 13 f0       	push   $0xf013622c
f011121b:	e8 11 fc fe ff       	call   f0100e31 <cprintf>
f0111220:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111223:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f011122a:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111231:	a1 0c cb 18 f0       	mov    0xf018cb0c,%eax
f0111236:	8b 15 10 cb 18 f0    	mov    0xf018cb10,%edx
f011123c:	d1 ea                	shr    %edx
f011123e:	01 d0                	add    %edx,%eax
f0111240:	83 e8 10             	sub    $0x10,%eax
f0111243:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111246:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111249:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011124c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111253:	83 ec 08             	sub    $0x8,%esp
f0111256:	52                   	push   %edx
f0111257:	50                   	push   %eax
f0111258:	e8 12 e4 01 00       	call   f012f66f <realloc_block_FF>
f011125d:	83 c4 10             	add    $0x10,%esp
f0111260:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111263:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111267:	74 0f                	je     f0111278 <test_realloc_block_FF+0x736>
f0111269:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011126c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111273:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111276:	74 25                	je     f011129d <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f0111278:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011127f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111282:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111289:	83 ec 04             	sub    $0x4,%esp
f011128c:	ff 75 bc             	pushl  -0x44(%ebp)
f011128f:	50                   	push   %eax
f0111290:	68 68 62 13 f0       	push   $0xf0136268
f0111295:	e8 97 fb fe ff       	call   f0100e31 <cprintf>
f011129a:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011129d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01112a0:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01112a7:	83 ec 0c             	sub    $0xc,%esp
f01112aa:	50                   	push   %eax
f01112ab:	e8 ce e1 01 00       	call   f012f47e <get_block_size>
f01112b0:	83 c4 10             	add    $0x10,%esp
f01112b3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01112b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01112b9:	8d 50 10             	lea    0x10(%eax),%edx
f01112bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01112bf:	39 c2                	cmp    %eax,%edx
f01112c1:	74 21                	je     f01112e4 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f01112c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01112ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01112cd:	83 c0 10             	add    $0x10,%eax
f01112d0:	83 ec 04             	sub    $0x4,%esp
f01112d3:	ff 75 a4             	pushl  -0x5c(%ebp)
f01112d6:	50                   	push   %eax
f01112d7:	68 c8 62 13 f0       	push   $0xf01362c8
f01112dc:	e8 50 fb fe ff       	call   f0100e31 <cprintf>
f01112e1:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01112e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01112e7:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01112ee:	83 ec 0c             	sub    $0xc,%esp
f01112f1:	50                   	push   %eax
f01112f2:	e8 9d e1 01 00       	call   f012f494 <is_free_block>
f01112f7:	83 c4 10             	add    $0x10,%esp
f01112fa:	0f be c0             	movsbl %al,%eax
f01112fd:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111300:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111304:	74 17                	je     f011131d <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111306:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011130d:	83 ec 0c             	sub    $0xc,%esp
f0111310:	68 38 63 13 f0       	push   $0xf0136338
f0111315:	e8 17 fb fe ff       	call   f0100e31 <cprintf>
f011131a:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011131d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111320:	40                   	inc    %eax
f0111321:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111328:	83 ec 0c             	sub    $0xc,%esp
f011132b:	50                   	push   %eax
f011132c:	e8 4d e1 01 00       	call   f012f47e <get_block_size>
f0111331:	83 c4 10             	add    $0x10,%esp
f0111334:	85 c0                	test   %eax,%eax
f0111336:	75 1b                	jne    f0111353 <test_realloc_block_FF+0x811>
f0111338:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011133b:	40                   	inc    %eax
f011133c:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111343:	83 ec 0c             	sub    $0xc,%esp
f0111346:	50                   	push   %eax
f0111347:	e8 48 e1 01 00       	call   f012f494 <is_free_block>
f011134c:	83 c4 10             	add    $0x10,%esp
f011134f:	84 c0                	test   %al,%al
f0111351:	74 17                	je     f011136a <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f0111353:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011135a:	83 ec 0c             	sub    $0xc,%esp
f011135d:	68 98 63 13 f0       	push   $0xf0136398
f0111362:	e8 ca fa fe ff       	call   f0100e31 <cprintf>
f0111367:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f011136a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011136d:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111374:	66 8b 00             	mov    (%eax),%ax
f0111377:	98                   	cwtl   
f0111378:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011137b:	75 26                	jne    f01113a3 <test_realloc_block_FF+0x861>
f011137d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111380:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0111387:	66 8b 00             	mov    (%eax),%ax
f011138a:	98                   	cwtl   
f011138b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011138e:	75 13                	jne    f01113a3 <test_realloc_block_FF+0x861>
f0111390:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111393:	8b 04 85 40 ba 2d f0 	mov    -0xfd245c0(,%eax,4),%eax
f011139a:	66 8b 00             	mov    (%eax),%ax
f011139d:	98                   	cwtl   
f011139e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01113a1:	74 1a                	je     f01113bd <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f01113a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01113aa:	83 ec 08             	sub    $0x8,%esp
f01113ad:	ff 75 ac             	pushl  -0x54(%ebp)
f01113b0:	68 0c 64 13 f0       	push   $0xf013640c
f01113b5:	e8 77 fa fe ff       	call   f0100e31 <cprintf>
f01113ba:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01113bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113c1:	74 04                	je     f01113c7 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f01113c3:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f01113c7:	83 ec 0c             	sub    $0xc,%esp
f01113ca:	68 6c 64 13 f0       	push   $0xf013646c
f01113cf:	e8 5d fa fe ff       	call   f0100e31 <cprintf>
f01113d4:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f01113d7:	83 ec 0c             	sub    $0xc,%esp
f01113da:	68 a4 64 13 f0       	push   $0xf01364a4
f01113df:	e8 4d fa fe ff       	call   f0100e31 <cprintf>
f01113e4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01113e7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f01113ee:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f01113f5:	a1 00 cb 18 f0       	mov    0xf018cb00,%eax
f01113fa:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f01113fd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111400:	2d 10 04 00 00       	sub    $0x410,%eax
f0111405:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111408:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011140b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011140e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111415:	83 ec 08             	sub    $0x8,%esp
f0111418:	52                   	push   %edx
f0111419:	50                   	push   %eax
f011141a:	e8 50 e2 01 00       	call   f012f66f <realloc_block_FF>
f011141f:	83 c4 10             	add    $0x10,%esp
f0111422:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111425:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111429:	74 0f                	je     f011143a <test_realloc_block_FF+0x8f8>
f011142b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011142e:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111435:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111438:	74 25                	je     f011145f <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f011143a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111441:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111444:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f011144b:	83 ec 04             	sub    $0x4,%esp
f011144e:	ff 75 bc             	pushl  -0x44(%ebp)
f0111451:	50                   	push   %eax
f0111452:	68 d0 64 13 f0       	push   $0xf01364d0
f0111457:	e8 d5 f9 fe ff       	call   f0100e31 <cprintf>
f011145c:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011145f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111462:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111469:	83 ec 0c             	sub    $0xc,%esp
f011146c:	50                   	push   %eax
f011146d:	e8 0c e0 01 00       	call   f012f47e <get_block_size>
f0111472:	83 c4 10             	add    $0x10,%esp
f0111475:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111478:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011147b:	8d 50 10             	lea    0x10(%eax),%edx
f011147e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111481:	39 c2                	cmp    %eax,%edx
f0111483:	74 21                	je     f01114a6 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0111485:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011148c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011148f:	83 c0 10             	add    $0x10,%eax
f0111492:	83 ec 04             	sub    $0x4,%esp
f0111495:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111498:	50                   	push   %eax
f0111499:	68 30 65 13 f0       	push   $0xf0136530
f011149e:	e8 8e f9 fe ff       	call   f0100e31 <cprintf>
f01114a3:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01114a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114a9:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f01114b0:	83 ec 0c             	sub    $0xc,%esp
f01114b3:	50                   	push   %eax
f01114b4:	e8 db df 01 00       	call   f012f494 <is_free_block>
f01114b9:	83 c4 10             	add    $0x10,%esp
f01114bc:	0f be c0             	movsbl %al,%eax
f01114bf:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01114c2:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01114c6:	74 17                	je     f01114df <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f01114c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01114cf:	83 ec 0c             	sub    $0xc,%esp
f01114d2:	68 a0 65 13 f0       	push   $0xf01365a0
f01114d7:	e8 55 f9 fe ff       	call   f0100e31 <cprintf>
f01114dc:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f01114df:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01114e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01114e5:	01 d0                	add    %edx,%eax
f01114e7:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f01114ea:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f01114f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01114f4:	8b 10                	mov    (%eax),%edx
f01114f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114f9:	39 c2                	cmp    %eax,%edx
f01114fb:	75 0a                	jne    f0111507 <test_realloc_block_FF+0x9c5>
f01114fd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111500:	8a 40 04             	mov    0x4(%eax),%al
f0111503:	3c 01                	cmp    $0x1,%al
f0111505:	74 20                	je     f0111527 <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f0111507:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f011150e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111511:	8b 00                	mov    (%eax),%eax
f0111513:	83 ec 04             	sub    $0x4,%esp
f0111516:	50                   	push   %eax
f0111517:	ff 75 94             	pushl  -0x6c(%ebp)
f011151a:	68 00 66 13 f0       	push   $0xf0136600
f011151f:	e8 0d f9 fe ff       	call   f0100e31 <cprintf>
f0111524:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111527:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011152a:	8b 04 85 40 a4 2d f0 	mov    -0xfd25bc0(,%eax,4),%eax
f0111531:	66 8b 00             	mov    (%eax),%ax
f0111534:	98                   	cwtl   
f0111535:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111538:	75 13                	jne    f011154d <test_realloc_block_FF+0xa0b>
f011153a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011153d:	8b 04 85 40 d0 2d f0 	mov    -0xfd22fc0(,%eax,4),%eax
f0111544:	66 8b 00             	mov    (%eax),%ax
f0111547:	98                   	cwtl   
f0111548:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011154b:	74 1a                	je     f0111567 <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f011154d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111554:	83 ec 08             	sub    $0x8,%esp
f0111557:	ff 75 ac             	pushl  -0x54(%ebp)
f011155a:	68 78 66 13 f0       	push   $0xf0136678
f011155f:	e8 cd f8 fe ff       	call   f0100e31 <cprintf>
f0111564:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111567:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011156b:	74 04                	je     f0111571 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f011156d:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111571:	83 ec 08             	sub    $0x8,%esp
f0111574:	ff 75 f4             	pushl  -0xc(%ebp)
f0111577:	68 d8 66 13 f0       	push   $0xf01366d8
f011157c:	e8 b0 f8 fe ff       	call   f0100e31 <cprintf>
f0111581:	83 c4 10             	add    $0x10,%esp

}
f0111584:	90                   	nop
f0111585:	c9                   	leave  
f0111586:	c3                   	ret    

f0111587 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111587:	55                   	push   %ebp
f0111588:	89 e5                	mov    %esp,%ebp
f011158a:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f011158d:	83 ec 04             	sub    $0x4,%esp
f0111590:	68 17 67 13 f0       	push   $0xf0136717
f0111595:	68 ae 05 00 00       	push   $0x5ae
f011159a:	68 f0 36 13 f0       	push   $0xf01336f0
f011159f:	e8 0c ec fe ff       	call   f01001b0 <_panic>

f01115a4 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f01115a4:	55                   	push   %ebp
f01115a5:	89 e5                	mov    %esp,%ebp
f01115a7:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f01115aa:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f01115af:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f01115b2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f01115b9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f01115c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01115c4:	0f 84 a5 00 00 00    	je     f011166f <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f01115ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01115d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01115d4:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01115da:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01115dd:	eb 4a                	jmp    f0111629 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f01115df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115e2:	8b 00                	mov    (%eax),%eax
f01115e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01115e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01115ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01115ef:	89 c2                	mov    %eax,%edx
f01115f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01115f4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01115fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01115fe:	01 c8                	add    %ecx,%eax
f0111600:	8b 00                	mov    (%eax),%eax
f0111602:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111605:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111608:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011160d:	39 c2                	cmp    %eax,%edx
f011160f:	74 09                	je     f011161a <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111611:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f0111618:	eb 3e                	jmp    f0111658 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f011161a:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011161d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111620:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111626:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111629:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011162d:	74 08                	je     f0111637 <sys_check_LRU_lists+0x93>
f011162f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111632:	8b 40 10             	mov    0x10(%eax),%eax
f0111635:	eb 05                	jmp    f011163c <sys_check_LRU_lists+0x98>
f0111637:	b8 00 00 00 00       	mov    $0x0,%eax
f011163c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011163f:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111645:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111648:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f011164e:	85 c0                	test   %eax,%eax
f0111650:	75 8d                	jne    f01115df <sys_check_LRU_lists+0x3b>
f0111652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111656:	75 87                	jne    f01115df <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0111658:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011165b:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111661:	8b 45 10             	mov    0x10(%ebp),%eax
f0111664:	39 c2                	cmp    %eax,%edx
f0111666:	74 07                	je     f011166f <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f0111668:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f011166f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111673:	0f 84 a5 00 00 00    	je     f011171e <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f0111679:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111680:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111683:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111689:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011168c:	eb 4a                	jmp    f01116d8 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f011168e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111691:	8b 00                	mov    (%eax),%eax
f0111693:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111696:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111699:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011169e:	89 c2                	mov    %eax,%edx
f01116a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01116a3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01116aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01116ad:	01 c8                	add    %ecx,%eax
f01116af:	8b 00                	mov    (%eax),%eax
f01116b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01116b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01116b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01116bc:	39 c2                	cmp    %eax,%edx
f01116be:	74 09                	je     f01116c9 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f01116c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f01116c7:	eb 3e                	jmp    f0111707 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f01116c9:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01116cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01116cf:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01116d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01116d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01116dc:	74 08                	je     f01116e6 <sys_check_LRU_lists+0x142>
f01116de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01116e1:	8b 40 10             	mov    0x10(%eax),%eax
f01116e4:	eb 05                	jmp    f01116eb <sys_check_LRU_lists+0x147>
f01116e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01116eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01116ee:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01116f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01116f7:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01116fd:	85 c0                	test   %eax,%eax
f01116ff:	75 8d                	jne    f011168e <sys_check_LRU_lists+0xea>
f0111701:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111705:	75 87                	jne    f011168e <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111707:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011170a:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111710:	8b 45 14             	mov    0x14(%ebp),%eax
f0111713:	39 c2                	cmp    %eax,%edx
f0111715:	74 07                	je     f011171e <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111717:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f011171e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111721:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111724:	c9                   	leave  
f0111725:	c3                   	ret    

f0111726 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111726:	55                   	push   %ebp
f0111727:	89 e5                	mov    %esp,%ebp
f0111729:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f011172c:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f0111731:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111734:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011173b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011173e:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111744:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111747:	eb 65                	jmp    f01117ae <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111749:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111750:	eb 3a                	jmp    f011178c <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111752:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111755:	8b 00                	mov    (%eax),%eax
f0111757:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011175a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011175d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111762:	89 c2                	mov    %eax,%edx
f0111764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111767:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011176e:	8b 45 08             	mov    0x8(%ebp),%eax
f0111771:	01 c8                	add    %ecx,%eax
f0111773:	8b 00                	mov    (%eax),%eax
f0111775:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111778:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011177b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111780:	39 c2                	cmp    %eax,%edx
f0111782:	75 05                	jne    f0111789 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111784:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111787:	eb 0b                	jmp    f0111794 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111789:	ff 45 f4             	incl   -0xc(%ebp)
f011178c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011178f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111792:	7c be                	jl     f0111752 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111794:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111798:	7e 08                	jle    f01117a2 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f011179a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011179d:	e9 ed 00 00 00       	jmp    f011188f <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01117a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117a5:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01117ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01117ae:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01117b2:	74 08                	je     f01117bc <sys_check_LRU_lists_free+0x96>
f01117b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01117b7:	8b 40 10             	mov    0x10(%eax),%eax
f01117ba:	eb 05                	jmp    f01117c1 <sys_check_LRU_lists_free+0x9b>
f01117bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01117c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01117c4:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01117ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117cd:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01117d3:	85 c0                	test   %eax,%eax
f01117d5:	0f 85 6e ff ff ff    	jne    f0111749 <sys_check_LRU_lists_free+0x23>
f01117db:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01117df:	0f 85 64 ff ff ff    	jne    f0111749 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01117e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117e8:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01117ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01117f1:	eb 62                	jmp    f0111855 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f01117f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01117fa:	eb 3a                	jmp    f0111836 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f01117fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01117ff:	8b 00                	mov    (%eax),%eax
f0111801:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111804:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111807:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011180c:	89 c2                	mov    %eax,%edx
f011180e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111811:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111818:	8b 45 08             	mov    0x8(%ebp),%eax
f011181b:	01 c8                	add    %ecx,%eax
f011181d:	8b 00                	mov    (%eax),%eax
f011181f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111822:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111825:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011182a:	39 c2                	cmp    %eax,%edx
f011182c:	75 05                	jne    f0111833 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f011182e:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111831:	eb 0b                	jmp    f011183e <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111833:	ff 45 f0             	incl   -0x10(%ebp)
f0111836:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111839:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011183c:	7c be                	jl     f01117fc <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f011183e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111842:	7e 05                	jle    f0111849 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111844:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111847:	eb 46                	jmp    f011188f <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111849:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011184c:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111852:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111855:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111859:	74 08                	je     f0111863 <sys_check_LRU_lists_free+0x13d>
f011185b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011185e:	8b 40 10             	mov    0x10(%eax),%eax
f0111861:	eb 05                	jmp    f0111868 <sys_check_LRU_lists_free+0x142>
f0111863:	b8 00 00 00 00       	mov    $0x0,%eax
f0111868:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011186b:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111871:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111874:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f011187a:	85 c0                	test   %eax,%eax
f011187c:	0f 85 71 ff ff ff    	jne    f01117f3 <sys_check_LRU_lists_free+0xcd>
f0111882:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111886:	0f 85 67 ff ff ff    	jne    f01117f3 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f011188c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011188f:	c9                   	leave  
f0111890:	c3                   	ret    

f0111891 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111891:	55                   	push   %ebp
f0111892:	89 e5                	mov    %esp,%ebp
f0111894:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111897:	83 ec 04             	sub    $0x4,%esp
f011189a:	68 2c 67 13 f0       	push   $0xf013672c
f011189f:	68 9c 00 00 00       	push   $0x9c
f01118a4:	68 77 67 13 f0       	push   $0xf0136777
f01118a9:	e8 02 e9 fe ff       	call   f01001b0 <_panic>

f01118ae <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01118ae:	55                   	push   %ebp
f01118af:	89 e5                	mov    %esp,%ebp
f01118b1:	57                   	push   %edi
f01118b2:	56                   	push   %esi
f01118b3:	53                   	push   %ebx
f01118b4:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01118ba:	83 ec 0c             	sub    $0xc,%esp
f01118bd:	68 98 67 13 f0       	push   $0xf0136798
f01118c2:	e8 6a f5 fe ff       	call   f0100e31 <cprintf>
f01118c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01118ca:	83 ec 0c             	sub    $0xc,%esp
f01118cd:	68 bc 67 13 f0       	push   $0xf01367bc
f01118d2:	e8 5a f5 fe ff       	call   f0100e31 <cprintf>
f01118d7:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01118da:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01118e1:	83 ec 0c             	sub    $0xc,%esp
f01118e4:	68 d8 67 13 f0       	push   $0xf01367d8
f01118e9:	e8 43 f5 fe ff       	call   f0100e31 <cprintf>
f01118ee:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01118f1:	8d 45 80             	lea    -0x80(%ebp),%eax
f01118f4:	bb 92 68 13 f0       	mov    $0xf0136892,%ebx
f01118f9:	ba 03 00 00 00       	mov    $0x3,%edx
f01118fe:	89 c7                	mov    %eax,%edi
f0111900:	89 de                	mov    %ebx,%esi
f0111902:	89 d1                	mov    %edx,%ecx
f0111904:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111906:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111909:	b9 16 00 00 00       	mov    $0x16,%ecx
f011190e:	b8 00 00 00 00       	mov    $0x0,%eax
f0111913:	89 d7                	mov    %edx,%edi
f0111915:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111917:	83 ec 0c             	sub    $0xc,%esp
f011191a:	8d 45 80             	lea    -0x80(%ebp),%eax
f011191d:	50                   	push   %eax
f011191e:	e8 a0 02 ff ff       	call   f0101bc3 <execute_command>
f0111923:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111926:	83 ec 0c             	sub    $0xc,%esp
f0111929:	68 06 68 13 f0       	push   $0xf0136806
f011192e:	e8 fe f4 fe ff       	call   f0100e31 <cprintf>
f0111933:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111936:	83 ec 0c             	sub    $0xc,%esp
f0111939:	68 1c 68 13 f0       	push   $0xf013681c
f011193e:	e8 ee f4 fe ff       	call   f0100e31 <cprintf>
f0111943:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111946:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f011194d:	65 00 00 
f0111950:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111956:	b9 18 00 00 00       	mov    $0x18,%ecx
f011195b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111960:	89 d7                	mov    %edx,%edi
f0111962:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111964:	83 ec 0c             	sub    $0xc,%esp
f0111967:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f011196d:	50                   	push   %eax
f011196e:	e8 50 02 ff ff       	call   f0101bc3 <execute_command>
f0111973:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111976:	83 ec 0c             	sub    $0xc,%esp
f0111979:	68 06 68 13 f0       	push   $0xf0136806
f011197e:	e8 ae f4 fe ff       	call   f0100e31 <cprintf>
f0111983:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111986:	83 ec 0c             	sub    $0xc,%esp
f0111989:	68 44 68 13 f0       	push   $0xf0136844
f011198e:	e8 9e f4 fe ff       	call   f0100e31 <cprintf>
f0111993:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111996:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011199d:	75 00 00 
f01119a0:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01119a6:	b9 18 00 00 00       	mov    $0x18,%ecx
f01119ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01119b0:	89 d7                	mov    %edx,%edi
f01119b2:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01119b4:	83 ec 0c             	sub    $0xc,%esp
f01119b7:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01119bd:	50                   	push   %eax
f01119be:	e8 00 02 ff ff       	call   f0101bc3 <execute_command>
f01119c3:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01119c6:	83 ec 0c             	sub    $0xc,%esp
f01119c9:	68 06 68 13 f0       	push   $0xf0136806
f01119ce:	e8 5e f4 fe ff       	call   f0100e31 <cprintf>
f01119d3:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01119d6:	83 ec 0c             	sub    $0xc,%esp
f01119d9:	68 6c 68 13 f0       	push   $0xf013686c
f01119de:	e8 4e f4 fe ff       	call   f0100e31 <cprintf>
f01119e3:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01119e6:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01119ed:	6d 6d 00 
f01119f0:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01119f6:	b9 18 00 00 00       	mov    $0x18,%ecx
f01119fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a00:	89 d7                	mov    %edx,%edi
f0111a02:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111a04:	83 ec 0c             	sub    $0xc,%esp
f0111a07:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111a0d:	50                   	push   %eax
f0111a0e:	e8 b0 01 ff ff       	call   f0101bc3 <execute_command>
f0111a13:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111a16:	83 ec 0c             	sub    $0xc,%esp
f0111a19:	68 06 68 13 f0       	push   $0xf0136806
f0111a1e:	e8 0e f4 fe ff       	call   f0100e31 <cprintf>
f0111a23:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111a26:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a2b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111a2e:	5b                   	pop    %ebx
f0111a2f:	5e                   	pop    %esi
f0111a30:	5f                   	pop    %edi
f0111a31:	5d                   	pop    %ebp
f0111a32:	c3                   	ret    

f0111a33 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111a33:	55                   	push   %ebp
f0111a34:	89 e5                	mov    %esp,%ebp
f0111a36:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111a39:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111a40:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111a47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a4e:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a53:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a56:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a59:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a5c:	50                   	push   %eax
f0111a5d:	e8 f1 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111a62:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a65:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111a6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a70:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a73:	50                   	push   %eax
f0111a74:	e8 b8 4d 00 00       	call   f0116831 <CP>
f0111a79:	83 c4 10             	add    $0x10,%esp
f0111a7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a7f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a83:	74 14                	je     f0111a99 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111a85:	83 ec 04             	sub    $0x4,%esp
f0111a88:	68 f8 68 13 f0       	push   $0xf01368f8
f0111a8d:	6a 5a                	push   $0x5a
f0111a8f:	68 1a 69 13 f0       	push   $0xf013691a
f0111a94:	e8 17 e7 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111a99:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111aa0:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111aa7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111aae:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ab3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ab6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ab9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111abc:	50                   	push   %eax
f0111abd:	e8 91 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111ac2:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ac5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111aca:	ff 75 ec             	pushl  -0x14(%ebp)
f0111acd:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad3:	50                   	push   %eax
f0111ad4:	e8 58 4d 00 00       	call   f0116831 <CP>
f0111ad9:	83 c4 10             	add    $0x10,%esp
f0111adc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111adf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ae3:	74 14                	je     f0111af9 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111ae5:	83 ec 04             	sub    $0x4,%esp
f0111ae8:	68 38 69 13 f0       	push   $0xf0136938
f0111aed:	6a 66                	push   $0x66
f0111aef:	68 1a 69 13 f0       	push   $0xf013691a
f0111af4:	e8 b7 e6 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111af9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111b00:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111b07:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b0e:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b13:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b16:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b19:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b1c:	50                   	push   %eax
f0111b1d:	e8 31 61 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111b22:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b25:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b2a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b2d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b33:	50                   	push   %eax
f0111b34:	e8 f8 4c 00 00       	call   f0116831 <CP>
f0111b39:	83 c4 10             	add    $0x10,%esp
f0111b3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b3f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b43:	74 14                	je     f0111b59 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111b45:	83 ec 04             	sub    $0x4,%esp
f0111b48:	68 5c 69 13 f0       	push   $0xf013695c
f0111b4d:	6a 71                	push   $0x71
f0111b4f:	68 1a 69 13 f0       	push   $0xf013691a
f0111b54:	e8 57 e6 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111b59:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111b67:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b6e:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b73:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b76:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b79:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b7c:	50                   	push   %eax
f0111b7d:	e8 d1 60 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111b82:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b85:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111b8a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b8d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b90:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b93:	50                   	push   %eax
f0111b94:	e8 98 4c 00 00       	call   f0116831 <CP>
f0111b99:	83 c4 10             	add    $0x10,%esp
f0111b9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b9f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ba3:	74 14                	je     f0111bb9 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111ba5:	83 ec 04             	sub    $0x4,%esp
f0111ba8:	68 80 69 13 f0       	push   $0xf0136980
f0111bad:	6a 7d                	push   $0x7d
f0111baf:	68 1a 69 13 f0       	push   $0xf013691a
f0111bb4:	e8 f7 e5 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111bb9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111bc0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111bc7:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111bce:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111bd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111bd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bdc:	50                   	push   %eax
f0111bdd:	e8 71 60 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111be2:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111be5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111bea:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bed:	ff 75 f0             	pushl  -0x10(%ebp)
f0111bf0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bf3:	50                   	push   %eax
f0111bf4:	e8 38 4c 00 00       	call   f0116831 <CP>
f0111bf9:	83 c4 10             	add    $0x10,%esp
f0111bfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111bff:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111c03:	74 17                	je     f0111c1c <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111c05:	83 ec 04             	sub    $0x4,%esp
f0111c08:	68 a4 69 13 f0       	push   $0xf01369a4
f0111c0d:	68 89 00 00 00       	push   $0x89
f0111c12:	68 1a 69 13 f0       	push   $0xf013691a
f0111c17:	e8 94 e5 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111c1c:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111c23:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111c2a:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c31:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111c36:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c39:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c3c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c3f:	50                   	push   %eax
f0111c40:	e8 0e 60 ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111c45:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c48:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111c4d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c50:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c53:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c56:	50                   	push   %eax
f0111c57:	e8 d5 4b 00 00       	call   f0116831 <CP>
f0111c5c:	83 c4 10             	add    $0x10,%esp
f0111c5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111c62:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111c66:	74 17                	je     f0111c7f <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111c68:	83 ec 04             	sub    $0x4,%esp
f0111c6b:	68 c8 69 13 f0       	push   $0xf01369c8
f0111c70:	68 95 00 00 00       	push   $0x95
f0111c75:	68 1a 69 13 f0       	push   $0xf013691a
f0111c7a:	e8 31 e5 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111c7f:	83 ec 0c             	sub    $0xc,%esp
f0111c82:	68 f4 69 13 f0       	push   $0xf01369f4
f0111c87:	e8 a5 f1 fe ff       	call   f0100e31 <cprintf>
f0111c8c:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111c8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111c94:	c9                   	leave  
f0111c95:	c3                   	ret    

f0111c96 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111c96:	55                   	push   %ebp
f0111c97:	89 e5                	mov    %esp,%ebp
f0111c99:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111c9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111ca3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111caa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111cb1:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111cb6:	ff 75 ec             	pushl  -0x14(%ebp)
f0111cb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0111cbc:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cbf:	50                   	push   %eax
f0111cc0:	e8 8e 5f ff ff       	call   f0107c53 <pt_set_page_permissions>
f0111cc5:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111cc8:	83 ec 04             	sub    $0x4,%esp
f0111ccb:	68 44 6a 13 f0       	push   $0xf0136a44
f0111cd0:	68 a2 00 00 00       	push   $0xa2
f0111cd5:	68 1a 69 13 f0       	push   $0xf013691a
f0111cda:	e8 d1 e4 fe ff       	call   f01001b0 <_panic>

f0111cdf <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111cdf:	55                   	push   %ebp
f0111ce0:	89 e5                	mov    %esp,%ebp
f0111ce2:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111ce5:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cec:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111cf1:	83 ec 08             	sub    $0x8,%esp
f0111cf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cf7:	50                   	push   %eax
f0111cf8:	e8 1a 60 ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111cfd:	83 c4 10             	add    $0x10,%esp
f0111d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111d03:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111d07:	74 17                	je     f0111d20 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111d09:	83 ec 04             	sub    $0x4,%esp
f0111d0c:	68 e0 6a 13 f0       	push   $0xf0136ae0
f0111d11:	68 b0 00 00 00       	push   $0xb0
f0111d16:	68 1a 69 13 f0       	push   $0xf013691a
f0111d1b:	e8 90 e4 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111d20:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d27:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111d2c:	83 ec 08             	sub    $0x8,%esp
f0111d2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d32:	50                   	push   %eax
f0111d33:	e8 df 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111d38:	83 c4 10             	add    $0x10,%esp
f0111d3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111d3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111d42:	74 17                	je     f0111d5b <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111d44:	83 ec 04             	sub    $0x4,%esp
f0111d47:	68 04 6b 13 f0       	push   $0xf0136b04
f0111d4c:	68 b8 00 00 00       	push   $0xb8
f0111d51:	68 1a 69 13 f0       	push   $0xf013691a
f0111d56:	e8 55 e4 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111d5b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d62:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111d67:	83 ec 08             	sub    $0x8,%esp
f0111d6a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d6d:	50                   	push   %eax
f0111d6e:	e8 a4 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111d73:	83 c4 10             	add    $0x10,%esp
f0111d76:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d79:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d7d:	74 17                	je     f0111d96 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111d7f:	83 ec 04             	sub    $0x4,%esp
f0111d82:	68 28 6b 13 f0       	push   $0xf0136b28
f0111d87:	68 c0 00 00 00       	push   $0xc0
f0111d8c:	68 1a 69 13 f0       	push   $0xf013691a
f0111d91:	e8 1a e4 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0111d96:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d9d:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111da2:	83 ec 08             	sub    $0x8,%esp
f0111da5:	ff 75 f4             	pushl  -0xc(%ebp)
f0111da8:	50                   	push   %eax
f0111da9:	e8 69 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111dae:	83 c4 10             	add    $0x10,%esp
f0111db1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111db4:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111db8:	74 17                	je     f0111dd1 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111dba:	83 ec 04             	sub    $0x4,%esp
f0111dbd:	68 4c 6b 13 f0       	push   $0xf0136b4c
f0111dc2:	68 c7 00 00 00       	push   $0xc7
f0111dc7:	68 1a 69 13 f0       	push   $0xf013691a
f0111dcc:	e8 df e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0111dd1:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111dd8:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ddd:	83 ec 08             	sub    $0x8,%esp
f0111de0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111de3:	50                   	push   %eax
f0111de4:	e8 2e 5f ff ff       	call   f0107d17 <pt_get_page_permissions>
f0111de9:	83 c4 10             	add    $0x10,%esp
f0111dec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111def:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111df3:	74 17                	je     f0111e0c <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111df5:	83 ec 04             	sub    $0x4,%esp
f0111df8:	68 70 6b 13 f0       	push   $0xf0136b70
f0111dfd:	68 ce 00 00 00       	push   $0xce
f0111e02:	68 1a 69 13 f0       	push   $0xf013691a
f0111e07:	e8 a4 e3 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111e0c:	83 ec 0c             	sub    $0xc,%esp
f0111e0f:	68 94 6b 13 f0       	push   $0xf0136b94
f0111e14:	e8 18 f0 fe ff       	call   f0100e31 <cprintf>
f0111e19:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111e1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111e21:	c9                   	leave  
f0111e22:	c3                   	ret    

f0111e23 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111e23:	55                   	push   %ebp
f0111e24:	89 e5                	mov    %esp,%ebp
f0111e26:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111e29:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e30:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e35:	83 ec 08             	sub    $0x8,%esp
f0111e38:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e3b:	50                   	push   %eax
f0111e3c:	e8 1f 5f ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111e41:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111e44:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e49:	83 ec 08             	sub    $0x8,%esp
f0111e4c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e4f:	50                   	push   %eax
f0111e50:	e8 38 49 00 00       	call   f011678d <CE>
f0111e55:	83 c4 10             	add    $0x10,%esp
f0111e58:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e5b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e5f:	74 17                	je     f0111e78 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111e61:	83 ec 04             	sub    $0x4,%esp
f0111e64:	68 dc 6b 13 f0       	push   $0xf0136bdc
f0111e69:	68 de 00 00 00       	push   $0xde
f0111e6e:	68 1a 69 13 f0       	push   $0xf013691a
f0111e73:	e8 38 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0111e78:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e7f:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e84:	83 ec 08             	sub    $0x8,%esp
f0111e87:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e8a:	50                   	push   %eax
f0111e8b:	e8 d0 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111e90:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e93:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111e98:	83 ec 08             	sub    $0x8,%esp
f0111e9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e9e:	50                   	push   %eax
f0111e9f:	e8 e9 48 00 00       	call   f011678d <CE>
f0111ea4:	83 c4 10             	add    $0x10,%esp
f0111ea7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111eaa:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111eae:	74 17                	je     f0111ec7 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111eb0:	83 ec 04             	sub    $0x4,%esp
f0111eb3:	68 08 6c 13 f0       	push   $0xf0136c08
f0111eb8:	68 e6 00 00 00       	push   $0xe6
f0111ebd:	68 1a 69 13 f0       	push   $0xf013691a
f0111ec2:	e8 e9 e2 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111ec7:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ece:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ed3:	83 ec 08             	sub    $0x8,%esp
f0111ed6:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ed9:	50                   	push   %eax
f0111eda:	e8 81 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111edf:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111ee2:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111ee7:	83 ec 08             	sub    $0x8,%esp
f0111eea:	ff 75 f4             	pushl  -0xc(%ebp)
f0111eed:	50                   	push   %eax
f0111eee:	e8 9a 48 00 00       	call   f011678d <CE>
f0111ef3:	83 c4 10             	add    $0x10,%esp
f0111ef6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111ef9:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111efd:	74 17                	je     f0111f16 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111eff:	83 ec 04             	sub    $0x4,%esp
f0111f02:	68 34 6c 13 f0       	push   $0xf0136c34
f0111f07:	68 ee 00 00 00       	push   $0xee
f0111f0c:	68 1a 69 13 f0       	push   $0xf013691a
f0111f11:	e8 9a e2 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0111f16:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111f1d:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111f22:	83 ec 08             	sub    $0x8,%esp
f0111f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f28:	50                   	push   %eax
f0111f29:	e8 32 5e ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111f2e:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111f31:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111f36:	83 ec 08             	sub    $0x8,%esp
f0111f39:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f3c:	50                   	push   %eax
f0111f3d:	e8 4b 48 00 00       	call   f011678d <CE>
f0111f42:	83 c4 10             	add    $0x10,%esp
f0111f45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111f48:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111f4c:	74 17                	je     f0111f65 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111f4e:	83 ec 04             	sub    $0x4,%esp
f0111f51:	68 60 6c 13 f0       	push   $0xf0136c60
f0111f56:	68 f6 00 00 00       	push   $0xf6
f0111f5b:	68 1a 69 13 f0       	push   $0xf013691a
f0111f60:	e8 4b e2 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111f65:	83 ec 0c             	sub    $0xc,%esp
f0111f68:	68 8c 6c 13 f0       	push   $0xf0136c8c
f0111f6d:	e8 bf ee fe ff       	call   f0100e31 <cprintf>
f0111f72:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111f75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f7a:	c9                   	leave  
f0111f7b:	c3                   	ret    

f0111f7c <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111f7c:	55                   	push   %ebp
f0111f7d:	89 e5                	mov    %esp,%ebp
f0111f7f:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111f82:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111f89:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0111f8e:	83 ec 08             	sub    $0x8,%esp
f0111f91:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f94:	50                   	push   %eax
f0111f95:	e8 c6 5d ff ff       	call   f0107d60 <pt_clear_page_table_entry>
f0111f9a:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111f9d:	83 ec 04             	sub    $0x4,%esp
f0111fa0:	68 d8 6c 13 f0       	push   $0xf0136cd8
f0111fa5:	68 01 01 00 00       	push   $0x101
f0111faa:	68 1a 69 13 f0       	push   $0xf013691a
f0111faf:	e8 fc e1 fe ff       	call   f01001b0 <_panic>

f0111fb4 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111fb4:	55                   	push   %ebp
f0111fb5:	89 e5                	mov    %esp,%ebp
f0111fb7:	57                   	push   %edi
f0111fb8:	56                   	push   %esi
f0111fb9:	53                   	push   %ebx
f0111fba:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111fc0:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111fc6:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f0111fcb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111fd0:	89 c7                	mov    %eax,%edi
f0111fd2:	89 de                	mov    %ebx,%esi
f0111fd4:	89 d1                	mov    %edx,%ecx
f0111fd6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fd8:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111fde:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111fe3:	b0 00                	mov    $0x0,%al
f0111fe5:	89 d7                	mov    %edx,%edi
f0111fe7:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111fe9:	6a 00                	push   $0x0
f0111feb:	6a 0a                	push   $0xa
f0111fed:	6a 14                	push   $0x14
f0111fef:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111ff5:	50                   	push   %eax
f0111ff6:	e8 04 69 ff ff       	call   f01088ff <env_create>
f0111ffb:	83 c4 10             	add    $0x10,%esp
f0111ffe:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112001:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112004:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011200a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011200d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112010:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112016:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0112019:	8b 45 90             	mov    -0x70(%ebp),%eax
f011201c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011201f:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112026:	75 70 20 
f0112029:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112030:	00 00 00 
f0112033:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112039:	b9 03 00 00 00       	mov    $0x3,%ecx
f011203e:	b8 00 00 00 00       	mov    $0x0,%eax
f0112043:	89 d7                	mov    %edx,%edi
f0112045:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112047:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011204a:	8b 40 4c             	mov    0x4c(%eax),%eax
f011204d:	83 ec 08             	sub    $0x8,%esp
f0112050:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112056:	52                   	push   %edx
f0112057:	50                   	push   %eax
f0112058:	e8 d7 ce 01 00       	call   f012ef34 <ltostr>
f011205d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112060:	83 ec 04             	sub    $0x4,%esp
f0112063:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112069:	50                   	push   %eax
f011206a:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0112070:	50                   	push   %eax
f0112071:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112077:	50                   	push   %eax
f0112078:	e8 af cf 01 00       	call   f012f02c <strcconcat>
f011207d:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112080:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112087:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011208e:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112095:	83 ec 0c             	sub    $0xc,%esp
f0112098:	ff 75 d4             	pushl  -0x2c(%ebp)
f011209b:	e8 ee 48 00 00       	call   f011698e <ClearUserSpace>
f01120a0:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01120a3:	83 ec 04             	sub    $0x4,%esp
f01120a6:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01120ac:	50                   	push   %eax
f01120ad:	68 6e 6d 13 f0       	push   $0xf0136d6e
f01120b2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01120b8:	50                   	push   %eax
f01120b9:	e8 6e cf 01 00       	call   f012f02c <strcconcat>
f01120be:	83 c4 10             	add    $0x10,%esp
f01120c1:	83 ec 0c             	sub    $0xc,%esp
f01120c4:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01120ca:	50                   	push   %eax
f01120cb:	e8 f3 fa fe ff       	call   f0101bc3 <execute_command>
f01120d0:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01120d3:	83 ec 04             	sub    $0x4,%esp
f01120d6:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01120dc:	50                   	push   %eax
f01120dd:	68 79 6d 13 f0       	push   $0xf0136d79
f01120e2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01120e8:	50                   	push   %eax
f01120e9:	e8 3e cf 01 00       	call   f012f02c <strcconcat>
f01120ee:	83 c4 10             	add    $0x10,%esp
f01120f1:	83 ec 0c             	sub    $0xc,%esp
f01120f4:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01120fa:	50                   	push   %eax
f01120fb:	e8 c3 fa fe ff       	call   f0101bc3 <execute_command>
f0112100:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112103:	83 ec 04             	sub    $0x4,%esp
f0112106:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011210c:	50                   	push   %eax
f011210d:	68 84 6d 13 f0       	push   $0xf0136d84
f0112112:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112118:	50                   	push   %eax
f0112119:	e8 0e cf 01 00       	call   f012f02c <strcconcat>
f011211e:	83 c4 10             	add    $0x10,%esp
f0112121:	83 ec 0c             	sub    $0xc,%esp
f0112124:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011212a:	50                   	push   %eax
f011212b:	e8 93 fa fe ff       	call   f0101bc3 <execute_command>
f0112130:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112133:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011213a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011213d:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112140:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112147:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011214a:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011214d:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112154:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112157:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011215a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011215d:	83 ec 08             	sub    $0x8,%esp
f0112160:	50                   	push   %eax
f0112161:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112164:	e8 8c 47 00 00       	call   f01168f5 <GP>
f0112169:	83 c4 10             	add    $0x10,%esp
f011216c:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011216f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112176:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011217d:	e8 90 a4 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112182:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112185:	83 ec 0c             	sub    $0xc,%esp
f0112188:	68 90 6d 13 f0       	push   $0xf0136d90
f011218d:	e8 9f ec fe ff       	call   f0100e31 <cprintf>
f0112192:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112195:	6a 03                	push   $0x3
f0112197:	68 00 00 90 02       	push   $0x2900000
f011219c:	68 00 00 80 02       	push   $0x2800000
f01121a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121a4:	e8 18 66 ff ff       	call   f01087c1 <cut_paste_pages>
f01121a9:	83 c4 10             	add    $0x10,%esp
f01121ac:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01121af:	e8 5e a4 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01121b4:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01121b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01121be:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01121c2:	75 08                	jne    f01121cc <test_cut_paste_pages+0x218>
f01121c4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121c7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01121ca:	74 2b                	je     f01121f7 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01121cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121cf:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01121d2:	83 ec 0c             	sub    $0xc,%esp
f01121d5:	50                   	push   %eax
f01121d6:	ff 75 b4             	pushl  -0x4c(%ebp)
f01121d9:	68 c0 6d 13 f0       	push   $0xf0136dc0
f01121de:	68 3a 01 00 00       	push   $0x13a
f01121e3:	68 1a 69 13 f0       	push   $0xf013691a
f01121e8:	e8 d1 e1 fe ff       	call   f01003be <_warn>
f01121ed:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01121f0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01121f7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121fb:	74 04                	je     f0112201 <test_cut_paste_pages+0x24d>
f01121fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112201:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112208:	83 ec 08             	sub    $0x8,%esp
f011220b:	6a 00                	push   $0x0
f011220d:	6a 01                	push   $0x1
f011220f:	6a 00                	push   $0x0
f0112211:	68 ff 0f 00 00       	push   $0xfff
f0112216:	ff 75 bc             	pushl  -0x44(%ebp)
f0112219:	6a 01                	push   $0x1
f011221b:	68 00 30 00 00       	push   $0x3000
f0112220:	68 00 00 90 02       	push   $0x2900000
f0112225:	68 00 00 80 02       	push   $0x2800000
f011222a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011222d:	e8 90 47 00 00       	call   f01169c2 <CCP>
f0112232:	83 c4 30             	add    $0x30,%esp
f0112235:	83 f8 01             	cmp    $0x1,%eax
f0112238:	74 21                	je     f011225b <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011223a:	83 ec 04             	sub    $0x4,%esp
f011223d:	68 14 6e 13 f0       	push   $0xf0136e14
f0112242:	68 42 01 00 00       	push   $0x142
f0112247:	68 1a 69 13 f0       	push   $0xf013691a
f011224c:	e8 6d e1 fe ff       	call   f01003be <_warn>
f0112251:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112254:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011225b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011225f:	74 04                	je     f0112265 <test_cut_paste_pages+0x2b1>
f0112261:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112265:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011226c:	83 ec 04             	sub    $0x4,%esp
f011226f:	6a 00                	push   $0x0
f0112271:	68 00 00 90 02       	push   $0x2900000
f0112276:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112279:	e8 d5 41 00 00       	call   f0116453 <CB>
f011227e:	83 c4 10             	add    $0x10,%esp
f0112281:	85 c0                	test   %eax,%eax
f0112283:	0f 84 f6 00 00 00    	je     f011237f <test_cut_paste_pages+0x3cb>
f0112289:	83 ec 04             	sub    $0x4,%esp
f011228c:	6a 00                	push   $0x0
f011228e:	68 00 10 90 02       	push   $0x2901000
f0112293:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112296:	e8 b8 41 00 00       	call   f0116453 <CB>
f011229b:	83 c4 10             	add    $0x10,%esp
f011229e:	85 c0                	test   %eax,%eax
f01122a0:	0f 84 d9 00 00 00    	je     f011237f <test_cut_paste_pages+0x3cb>
f01122a6:	83 ec 04             	sub    $0x4,%esp
f01122a9:	6a 00                	push   $0x0
f01122ab:	68 00 20 90 02       	push   $0x2902000
f01122b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122b3:	e8 9b 41 00 00       	call   f0116453 <CB>
f01122b8:	83 c4 10             	add    $0x10,%esp
f01122bb:	85 c0                	test   %eax,%eax
f01122bd:	0f 84 bc 00 00 00    	je     f011237f <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f01122c3:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01122ca:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01122d1:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01122d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01122db:	8a 00                	mov    (%eax),%al
f01122dd:	3c 61                	cmp    $0x61,%al
f01122df:	75 12                	jne    f01122f3 <test_cut_paste_pages+0x33f>
f01122e1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122e4:	8a 00                	mov    (%eax),%al
f01122e6:	3c 62                	cmp    $0x62,%al
f01122e8:	75 09                	jne    f01122f3 <test_cut_paste_pages+0x33f>
f01122ea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01122ed:	8a 00                	mov    (%eax),%al
f01122ef:	3c 63                	cmp    $0x63,%al
f01122f1:	74 21                	je     f0112314 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01122f3:	83 ec 04             	sub    $0x4,%esp
f01122f6:	68 60 6e 13 f0       	push   $0xf0136e60
f01122fb:	68 4f 01 00 00       	push   $0x14f
f0112300:	68 1a 69 13 f0       	push   $0xf013691a
f0112305:	e8 b4 e0 fe ff       	call   f01003be <_warn>
f011230a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011230d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112314:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112318:	74 04                	je     f011231e <test_cut_paste_pages+0x36a>
f011231a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011231e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112325:	83 ec 04             	sub    $0x4,%esp
f0112328:	6a 01                	push   $0x1
f011232a:	68 00 10 90 02       	push   $0x2901000
f011232f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112332:	e8 1c 41 00 00       	call   f0116453 <CB>
f0112337:	83 c4 10             	add    $0x10,%esp
f011233a:	85 c0                	test   %eax,%eax
f011233c:	74 41                	je     f011237f <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f011233e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112341:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112344:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112347:	8a 00                	mov    (%eax),%al
f0112349:	3c 79                	cmp    $0x79,%al
f011234b:	74 21                	je     f011236e <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011234d:	83 ec 04             	sub    $0x4,%esp
f0112350:	68 60 6e 13 f0       	push   $0xf0136e60
f0112355:	68 5a 01 00 00       	push   $0x15a
f011235a:	68 1a 69 13 f0       	push   $0xf013691a
f011235f:	e8 5a e0 fe ff       	call   f01003be <_warn>
f0112364:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112367:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011236e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112372:	74 04                	je     f0112378 <test_cut_paste_pages+0x3c4>
f0112374:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112378:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011237f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112382:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112385:	6a 02                	push   $0x2
f0112387:	68 00 f0 bf 02       	push   $0x2bff000
f011238c:	68 00 10 90 02       	push   $0x2901000
f0112391:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112394:	e8 28 64 ff ff       	call   f01087c1 <cut_paste_pages>
f0112399:	83 c4 10             	add    $0x10,%esp
f011239c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011239f:	e8 6e a2 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01123a4:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01123a7:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01123ab:	75 0b                	jne    f01123b8 <test_cut_paste_pages+0x404>
f01123ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123b0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01123b3:	83 f8 01             	cmp    $0x1,%eax
f01123b6:	74 2b                	je     f01123e3 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01123b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123bb:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01123be:	83 ec 0c             	sub    $0xc,%esp
f01123c1:	50                   	push   %eax
f01123c2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01123c5:	68 c0 6d 13 f0       	push   $0xf0136dc0
f01123ca:	68 6b 01 00 00       	push   $0x16b
f01123cf:	68 1a 69 13 f0       	push   $0xf013691a
f01123d4:	e8 e5 df fe ff       	call   f01003be <_warn>
f01123d9:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01123dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01123e3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123e7:	74 04                	je     f01123ed <test_cut_paste_pages+0x439>
f01123e9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01123ed:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01123f4:	83 ec 08             	sub    $0x8,%esp
f01123f7:	6a 00                	push   $0x0
f01123f9:	6a 01                	push   $0x1
f01123fb:	6a 00                	push   $0x0
f01123fd:	68 ff 0f 00 00       	push   $0xfff
f0112402:	ff 75 bc             	pushl  -0x44(%ebp)
f0112405:	6a 01                	push   $0x1
f0112407:	68 00 20 00 00       	push   $0x2000
f011240c:	68 00 f0 bf 02       	push   $0x2bff000
f0112411:	68 00 10 90 02       	push   $0x2901000
f0112416:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112419:	e8 a4 45 00 00       	call   f01169c2 <CCP>
f011241e:	83 c4 30             	add    $0x30,%esp
f0112421:	83 f8 01             	cmp    $0x1,%eax
f0112424:	74 21                	je     f0112447 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112426:	83 ec 04             	sub    $0x4,%esp
f0112429:	68 14 6e 13 f0       	push   $0xf0136e14
f011242e:	68 73 01 00 00       	push   $0x173
f0112433:	68 1a 69 13 f0       	push   $0xf013691a
f0112438:	e8 81 df fe ff       	call   f01003be <_warn>
f011243d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112440:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112447:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011244b:	74 04                	je     f0112451 <test_cut_paste_pages+0x49d>
f011244d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112451:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112458:	83 ec 04             	sub    $0x4,%esp
f011245b:	6a 00                	push   $0x0
f011245d:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112462:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112465:	e8 e9 3f 00 00       	call   f0116453 <CB>
f011246a:	83 c4 10             	add    $0x10,%esp
f011246d:	85 c0                	test   %eax,%eax
f011246f:	74 6b                	je     f01124dc <test_cut_paste_pages+0x528>
f0112471:	83 ec 04             	sub    $0x4,%esp
f0112474:	6a 00                	push   $0x0
f0112476:	68 ff 0f c0 02       	push   $0x2c00fff
f011247b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011247e:	e8 d0 3f 00 00       	call   f0116453 <CB>
f0112483:	83 c4 10             	add    $0x10,%esp
f0112486:	85 c0                	test   %eax,%eax
f0112488:	74 52                	je     f01124dc <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f011248a:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112491:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112498:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011249b:	8a 00                	mov    (%eax),%al
f011249d:	3c 79                	cmp    $0x79,%al
f011249f:	75 09                	jne    f01124aa <test_cut_paste_pages+0x4f6>
f01124a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124a4:	8a 00                	mov    (%eax),%al
f01124a6:	3c 63                	cmp    $0x63,%al
f01124a8:	74 21                	je     f01124cb <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01124aa:	83 ec 04             	sub    $0x4,%esp
f01124ad:	68 60 6e 13 f0       	push   $0xf0136e60
f01124b2:	68 7f 01 00 00       	push   $0x17f
f01124b7:	68 1a 69 13 f0       	push   $0xf013691a
f01124bc:	e8 fd de fe ff       	call   f01003be <_warn>
f01124c1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01124c4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01124cb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124cf:	74 04                	je     f01124d5 <test_cut_paste_pages+0x521>
f01124d1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01124d5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01124dc:	83 ec 0c             	sub    $0xc,%esp
f01124df:	68 99 6e 13 f0       	push   $0xf0136e99
f01124e4:	e8 48 e9 fe ff       	call   f0100e31 <cprintf>
f01124e9:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01124ec:	83 ec 0c             	sub    $0xc,%esp
f01124ef:	68 a8 6e 13 f0       	push   $0xf0136ea8
f01124f4:	e8 38 e9 fe ff       	call   f0100e31 <cprintf>
f01124f9:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01124fc:	83 ec 04             	sub    $0x4,%esp
f01124ff:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112505:	50                   	push   %eax
f0112506:	68 d1 6e 13 f0       	push   $0xf0136ed1
f011250b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112511:	50                   	push   %eax
f0112512:	e8 15 cb 01 00       	call   f012f02c <strcconcat>
f0112517:	83 c4 10             	add    $0x10,%esp
f011251a:	83 ec 0c             	sub    $0xc,%esp
f011251d:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112523:	50                   	push   %eax
f0112524:	e8 9a f6 fe ff       	call   f0101bc3 <execute_command>
f0112529:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011252c:	83 ec 04             	sub    $0x4,%esp
f011252f:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112535:	50                   	push   %eax
f0112536:	68 dc 6e 13 f0       	push   $0xf0136edc
f011253b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112541:	50                   	push   %eax
f0112542:	e8 e5 ca 01 00       	call   f012f02c <strcconcat>
f0112547:	83 c4 10             	add    $0x10,%esp
f011254a:	83 ec 0c             	sub    $0xc,%esp
f011254d:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112553:	50                   	push   %eax
f0112554:	e8 6a f6 fe ff       	call   f0101bc3 <execute_command>
f0112559:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011255c:	83 ec 04             	sub    $0x4,%esp
f011255f:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112565:	50                   	push   %eax
f0112566:	68 e7 6e 13 f0       	push   $0xf0136ee7
f011256b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112571:	50                   	push   %eax
f0112572:	e8 b5 ca 01 00       	call   f012f02c <strcconcat>
f0112577:	83 c4 10             	add    $0x10,%esp
f011257a:	83 ec 0c             	sub    $0xc,%esp
f011257d:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112583:	50                   	push   %eax
f0112584:	e8 3a f6 fe ff       	call   f0101bc3 <execute_command>
f0112589:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011258c:	83 ec 04             	sub    $0x4,%esp
f011258f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112595:	50                   	push   %eax
f0112596:	68 f2 6e 13 f0       	push   $0xf0136ef2
f011259b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01125a1:	50                   	push   %eax
f01125a2:	e8 85 ca 01 00       	call   f012f02c <strcconcat>
f01125a7:	83 c4 10             	add    $0x10,%esp
f01125aa:	83 ec 0c             	sub    $0xc,%esp
f01125ad:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01125b3:	50                   	push   %eax
f01125b4:	e8 0a f6 fe ff       	call   f0101bc3 <execute_command>
f01125b9:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01125bc:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01125c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125c6:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01125c9:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01125d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125d3:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01125d6:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01125dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125e0:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01125e3:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01125ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125ed:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01125f0:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01125f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125fa:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01125fd:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112604:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112607:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011260a:	83 ec 08             	sub    $0x8,%esp
f011260d:	68 00 00 c0 01       	push   $0x1c00000
f0112612:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112615:	e8 db 42 00 00       	call   f01168f5 <GP>
f011261a:	83 c4 10             	add    $0x10,%esp
f011261d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112620:	83 ec 08             	sub    $0x8,%esp
f0112623:	68 00 00 40 01       	push   $0x1400000
f0112628:	ff 75 d4             	pushl  -0x2c(%ebp)
f011262b:	e8 c5 42 00 00       	call   f01168f5 <GP>
f0112630:	83 c4 10             	add    $0x10,%esp
f0112633:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112636:	e8 d7 9f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011263b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011263e:	6a 01                	push   $0x1
f0112640:	68 00 00 40 01       	push   $0x1400000
f0112645:	68 00 00 c0 01       	push   $0x1c00000
f011264a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011264d:	e8 6f 61 ff ff       	call   f01087c1 <cut_paste_pages>
f0112652:	83 c4 10             	add    $0x10,%esp
f0112655:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112658:	e8 b5 9f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011265d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112660:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112664:	75 08                	jne    f011266e <test_cut_paste_pages+0x6ba>
f0112666:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112669:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011266c:	74 2b                	je     f0112699 <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011266e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112671:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112674:	83 ec 0c             	sub    $0xc,%esp
f0112677:	50                   	push   %eax
f0112678:	ff 75 b4             	pushl  -0x4c(%ebp)
f011267b:	68 00 6f 13 f0       	push   $0xf0136f00
f0112680:	68 a2 01 00 00       	push   $0x1a2
f0112685:	68 1a 69 13 f0       	push   $0xf013691a
f011268a:	e8 2f dd fe ff       	call   f01003be <_warn>
f011268f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112692:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112699:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011269d:	74 04                	je     f01126a3 <test_cut_paste_pages+0x6ef>
f011269f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01126a3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01126aa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01126b1:	83 ec 08             	sub    $0x8,%esp
f01126b4:	6a 00                	push   $0x0
f01126b6:	68 ff 0f 00 00       	push   $0xfff
f01126bb:	ff 75 a4             	pushl  -0x5c(%ebp)
f01126be:	68 ff 0f 00 00       	push   $0xfff
f01126c3:	ff 75 a0             	pushl  -0x60(%ebp)
f01126c6:	6a 01                	push   $0x1
f01126c8:	68 00 10 00 00       	push   $0x1000
f01126cd:	68 00 00 40 01       	push   $0x1400000
f01126d2:	68 00 00 c0 01       	push   $0x1c00000
f01126d7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126da:	e8 e3 42 00 00       	call   f01169c2 <CCP>
f01126df:	83 c4 30             	add    $0x30,%esp
f01126e2:	83 f8 01             	cmp    $0x1,%eax
f01126e5:	74 28                	je     f011270f <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01126e7:	83 ec 04             	sub    $0x4,%esp
f01126ea:	68 14 6e 13 f0       	push   $0xf0136e14
f01126ef:	68 ab 01 00 00       	push   $0x1ab
f01126f4:	68 1a 69 13 f0       	push   $0xf013691a
f01126f9:	e8 c0 dc fe ff       	call   f01003be <_warn>
f01126fe:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112701:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112708:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011270f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112713:	74 04                	je     f0112719 <test_cut_paste_pages+0x765>
f0112715:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112719:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112720:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112724:	0f 84 92 00 00 00    	je     f01127bc <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f011272a:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112731:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112738:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011273f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112746:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011274d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112754:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112757:	8a 00                	mov    (%eax),%al
f0112759:	3c 61                	cmp    $0x61,%al
f011275b:	75 2d                	jne    f011278a <test_cut_paste_pages+0x7d6>
f011275d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112760:	8a 00                	mov    (%eax),%al
f0112762:	3c 78                	cmp    $0x78,%al
f0112764:	75 24                	jne    f011278a <test_cut_paste_pages+0x7d6>
f0112766:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112769:	8a 00                	mov    (%eax),%al
f011276b:	3c 62                	cmp    $0x62,%al
f011276d:	75 1b                	jne    f011278a <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011276f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112772:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112774:	3c 79                	cmp    $0x79,%al
f0112776:	75 12                	jne    f011278a <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112778:	8b 45 98             	mov    -0x68(%ebp),%eax
f011277b:	8a 00                	mov    (%eax),%al
f011277d:	3c 63                	cmp    $0x63,%al
f011277f:	75 09                	jne    f011278a <test_cut_paste_pages+0x7d6>
f0112781:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112784:	8a 00                	mov    (%eax),%al
f0112786:	3c 7a                	cmp    $0x7a,%al
f0112788:	74 21                	je     f01127ab <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011278a:	83 ec 04             	sub    $0x4,%esp
f011278d:	68 60 6e 13 f0       	push   $0xf0136e60
f0112792:	68 bd 01 00 00       	push   $0x1bd
f0112797:	68 1a 69 13 f0       	push   $0xf013691a
f011279c:	e8 1d dc fe ff       	call   f01003be <_warn>
f01127a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01127ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127af:	74 04                	je     f01127b5 <test_cut_paste_pages+0x801>
f01127b1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01127b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01127bc:	e8 51 9e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01127c1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01127c4:	6a 03                	push   $0x3
f01127c6:	68 00 f0 bf 01       	push   $0x1bff000
f01127cb:	68 00 00 40 01       	push   $0x1400000
f01127d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127d3:	e8 e9 5f ff ff       	call   f01087c1 <cut_paste_pages>
f01127d8:	83 c4 10             	add    $0x10,%esp
f01127db:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01127de:	e8 2f 9e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01127e3:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01127e6:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01127ea:	75 08                	jne    f01127f4 <test_cut_paste_pages+0x840>
f01127ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127ef:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01127f2:	74 2b                	je     f011281f <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01127f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127f7:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01127fa:	83 ec 0c             	sub    $0xc,%esp
f01127fd:	50                   	push   %eax
f01127fe:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112801:	68 00 6f 13 f0       	push   $0xf0136f00
f0112806:	68 cc 01 00 00       	push   $0x1cc
f011280b:	68 1a 69 13 f0       	push   $0xf013691a
f0112810:	e8 a9 db fe ff       	call   f01003be <_warn>
f0112815:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112818:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011281f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112823:	74 04                	je     f0112829 <test_cut_paste_pages+0x875>
f0112825:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112829:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112830:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112837:	83 ec 04             	sub    $0x4,%esp
f011283a:	6a 00                	push   $0x0
f011283c:	68 00 00 40 01       	push   $0x1400000
f0112841:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112844:	e8 0a 3c 00 00       	call   f0116453 <CB>
f0112849:	83 c4 10             	add    $0x10,%esp
f011284c:	83 f8 01             	cmp    $0x1,%eax
f011284f:	0f 85 80 00 00 00    	jne    f01128d5 <test_cut_paste_pages+0x921>
f0112855:	83 ec 04             	sub    $0x4,%esp
f0112858:	6a 00                	push   $0x0
f011285a:	68 00 10 40 01       	push   $0x1401000
f011285f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112862:	e8 ec 3b 00 00       	call   f0116453 <CB>
f0112867:	83 c4 10             	add    $0x10,%esp
f011286a:	83 f8 01             	cmp    $0x1,%eax
f011286d:	75 66                	jne    f01128d5 <test_cut_paste_pages+0x921>
f011286f:	83 ec 04             	sub    $0x4,%esp
f0112872:	6a 00                	push   $0x0
f0112874:	68 00 20 40 01       	push   $0x1402000
f0112879:	ff 75 d4             	pushl  -0x2c(%ebp)
f011287c:	e8 d2 3b 00 00       	call   f0116453 <CB>
f0112881:	83 c4 10             	add    $0x10,%esp
f0112884:	83 f8 01             	cmp    $0x1,%eax
f0112887:	75 4c                	jne    f01128d5 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112889:	83 ec 04             	sub    $0x4,%esp
f011288c:	6a 00                	push   $0x0
f011288e:	68 00 f0 bf 01       	push   $0x1bff000
f0112893:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112896:	e8 b8 3b 00 00       	call   f0116453 <CB>
f011289b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011289e:	85 c0                	test   %eax,%eax
f01128a0:	75 33                	jne    f01128d5 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01128a2:	83 ec 04             	sub    $0x4,%esp
f01128a5:	6a 00                	push   $0x0
f01128a7:	68 00 00 c0 01       	push   $0x1c00000
f01128ac:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128af:	e8 9f 3b 00 00       	call   f0116453 <CB>
f01128b4:	83 c4 10             	add    $0x10,%esp
f01128b7:	83 f8 01             	cmp    $0x1,%eax
f01128ba:	75 19                	jne    f01128d5 <test_cut_paste_pages+0x921>
f01128bc:	83 ec 04             	sub    $0x4,%esp
f01128bf:	6a 00                	push   $0x0
f01128c1:	68 00 10 c0 01       	push   $0x1c01000
f01128c6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128c9:	e8 85 3b 00 00       	call   f0116453 <CB>
f01128ce:	83 c4 10             	add    $0x10,%esp
f01128d1:	85 c0                	test   %eax,%eax
f01128d3:	74 28                	je     f01128fd <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01128d5:	83 ec 04             	sub    $0x4,%esp
f01128d8:	68 60 6f 13 f0       	push   $0xf0136f60
f01128dd:	68 d5 01 00 00       	push   $0x1d5
f01128e2:	68 1a 69 13 f0       	push   $0xf013691a
f01128e7:	e8 d2 da fe ff       	call   f01003be <_warn>
f01128ec:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01128ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01128f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01128fd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112901:	74 04                	je     f0112907 <test_cut_paste_pages+0x953>
f0112903:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112907:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011290e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112912:	0f 84 99 00 00 00    	je     f01129b1 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112918:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011291f:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112926:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011292d:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112934:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011293b:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112942:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112945:	8a 00                	mov    (%eax),%al
f0112947:	3c 61                	cmp    $0x61,%al
f0112949:	75 2d                	jne    f0112978 <test_cut_paste_pages+0x9c4>
f011294b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011294e:	8a 00                	mov    (%eax),%al
f0112950:	3c 78                	cmp    $0x78,%al
f0112952:	75 24                	jne    f0112978 <test_cut_paste_pages+0x9c4>
f0112954:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112957:	8a 00                	mov    (%eax),%al
f0112959:	3c 62                	cmp    $0x62,%al
f011295b:	75 1b                	jne    f0112978 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011295d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112960:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112962:	3c 79                	cmp    $0x79,%al
f0112964:	75 12                	jne    f0112978 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112966:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112969:	8a 00                	mov    (%eax),%al
f011296b:	3c 63                	cmp    $0x63,%al
f011296d:	75 09                	jne    f0112978 <test_cut_paste_pages+0x9c4>
f011296f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112972:	8a 00                	mov    (%eax),%al
f0112974:	3c 7a                	cmp    $0x7a,%al
f0112976:	74 28                	je     f01129a0 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112978:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f011297f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112986:	83 ec 04             	sub    $0x4,%esp
f0112989:	68 60 6e 13 f0       	push   $0xf0136e60
f011298e:	68 e9 01 00 00       	push   $0x1e9
f0112993:	68 1a 69 13 f0       	push   $0xf013691a
f0112998:	e8 21 da fe ff       	call   f01003be <_warn>
f011299d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01129a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129a4:	74 04                	je     f01129aa <test_cut_paste_pages+0x9f6>
f01129a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01129b1:	83 ec 0c             	sub    $0xc,%esp
f01129b4:	68 99 6f 13 f0       	push   $0xf0136f99
f01129b9:	e8 73 e4 fe ff       	call   f0100e31 <cprintf>
f01129be:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01129c1:	83 ec 08             	sub    $0x8,%esp
f01129c4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01129c7:	68 a8 6f 13 f0       	push   $0xf0136fa8
f01129cc:	e8 60 e4 fe ff       	call   f0100e31 <cprintf>
f01129d1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01129d4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01129d8:	75 10                	jne    f01129ea <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01129da:	83 ec 0c             	sub    $0xc,%esp
f01129dd:	68 dc 6f 13 f0       	push   $0xf0136fdc
f01129e2:	e8 4a e4 fe ff       	call   f0100e31 <cprintf>
f01129e7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01129ea:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01129ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01129f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01129f5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01129f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01129fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112a00:	5b                   	pop    %ebx
f0112a01:	5e                   	pop    %esi
f0112a02:	5f                   	pop    %edi
f0112a03:	5d                   	pop    %ebp
f0112a04:	c3                   	ret    

f0112a05 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112a05:	55                   	push   %ebp
f0112a06:	89 e5                	mov    %esp,%ebp
f0112a08:	57                   	push   %edi
f0112a09:	56                   	push   %esi
f0112a0a:	53                   	push   %ebx
f0112a0b:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112a11:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112a17:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f0112a1c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a21:	89 c7                	mov    %eax,%edi
f0112a23:	89 de                	mov    %ebx,%esi
f0112a25:	89 d1                	mov    %edx,%ecx
f0112a27:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a29:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112a2f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112a34:	b0 00                	mov    $0x0,%al
f0112a36:	89 d7                	mov    %edx,%edi
f0112a38:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112a3a:	6a 00                	push   $0x0
f0112a3c:	6a 0a                	push   $0xa
f0112a3e:	6a 14                	push   $0x14
f0112a40:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112a46:	50                   	push   %eax
f0112a47:	e8 b3 5e ff ff       	call   f01088ff <env_create>
f0112a4c:	83 c4 10             	add    $0x10,%esp
f0112a4f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112a52:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a55:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112a5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112a5e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a61:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112a67:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112a6d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112a73:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112a76:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112a7d:	75 70 20 
f0112a80:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112a87:	00 00 00 
f0112a8a:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112a90:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112a95:	b8 00 00 00 00       	mov    $0x0,%eax
f0112a9a:	89 d7                	mov    %edx,%edi
f0112a9c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112a9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112aa1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112aa4:	83 ec 08             	sub    $0x8,%esp
f0112aa7:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112aad:	52                   	push   %edx
f0112aae:	50                   	push   %eax
f0112aaf:	e8 80 c4 01 00       	call   f012ef34 <ltostr>
f0112ab4:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112ab7:	83 ec 04             	sub    $0x4,%esp
f0112aba:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ac0:	50                   	push   %eax
f0112ac1:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112ac7:	50                   	push   %eax
f0112ac8:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112ace:	50                   	push   %eax
f0112acf:	e8 58 c5 01 00       	call   f012f02c <strcconcat>
f0112ad4:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112ad7:	83 ec 0c             	sub    $0xc,%esp
f0112ada:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112add:	e8 ac 3e 00 00       	call   f011698e <ClearUserSpace>
f0112ae2:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112ae5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112aec:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112af3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112afa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112b01:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112b08:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112b0f:	83 ec 0c             	sub    $0xc,%esp
f0112b12:	68 50 70 13 f0       	push   $0xf0137050
f0112b17:	e8 15 e3 fe ff       	call   f0100e31 <cprintf>
f0112b1c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112b1f:	83 ec 04             	sub    $0x4,%esp
f0112b22:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b28:	50                   	push   %eax
f0112b29:	68 86 70 13 f0       	push   $0xf0137086
f0112b2e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b34:	50                   	push   %eax
f0112b35:	e8 f2 c4 01 00       	call   f012f02c <strcconcat>
f0112b3a:	83 c4 10             	add    $0x10,%esp
f0112b3d:	83 ec 0c             	sub    $0xc,%esp
f0112b40:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b46:	50                   	push   %eax
f0112b47:	e8 77 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b4c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112b4f:	83 ec 04             	sub    $0x4,%esp
f0112b52:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b58:	50                   	push   %eax
f0112b59:	68 8b 70 13 f0       	push   $0xf013708b
f0112b5e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b64:	50                   	push   %eax
f0112b65:	e8 c2 c4 01 00       	call   f012f02c <strcconcat>
f0112b6a:	83 c4 10             	add    $0x10,%esp
f0112b6d:	83 ec 0c             	sub    $0xc,%esp
f0112b70:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112b76:	50                   	push   %eax
f0112b77:	e8 47 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b7c:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112b7f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b85:	bb 91 73 13 f0       	mov    $0xf0137391,%ebx
f0112b8a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b8f:	89 c7                	mov    %eax,%edi
f0112b91:	89 de                	mov    %ebx,%esi
f0112b93:	89 d1                	mov    %edx,%ecx
f0112b95:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b97:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112b9d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ba2:	b0 00                	mov    $0x0,%al
f0112ba4:	89 d7                	mov    %edx,%edi
f0112ba6:	f3 aa                	rep stos %al,%es:(%edi)
f0112ba8:	83 ec 0c             	sub    $0xc,%esp
f0112bab:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112bb1:	50                   	push   %eax
f0112bb2:	e8 0c f0 fe ff       	call   f0101bc3 <execute_command>
f0112bb7:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112bba:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112bc0:	bb f5 73 13 f0       	mov    $0xf01373f5,%ebx
f0112bc5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bca:	89 c7                	mov    %eax,%edi
f0112bcc:	89 de                	mov    %ebx,%esi
f0112bce:	89 d1                	mov    %edx,%ecx
f0112bd0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bd2:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112bd8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bdd:	b0 00                	mov    $0x0,%al
f0112bdf:	89 d7                	mov    %edx,%edi
f0112be1:	f3 aa                	rep stos %al,%es:(%edi)
f0112be3:	83 ec 0c             	sub    $0xc,%esp
f0112be6:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112bec:	50                   	push   %eax
f0112bed:	e8 d1 ef fe ff       	call   f0101bc3 <execute_command>
f0112bf2:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112bf5:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112bfb:	bb 59 74 13 f0       	mov    $0xf0137459,%ebx
f0112c00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c05:	89 c7                	mov    %eax,%edi
f0112c07:	89 de                	mov    %ebx,%esi
f0112c09:	89 d1                	mov    %edx,%ecx
f0112c0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c0d:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112c13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c18:	b0 00                	mov    $0x0,%al
f0112c1a:	89 d7                	mov    %edx,%edi
f0112c1c:	f3 aa                	rep stos %al,%es:(%edi)
f0112c1e:	83 ec 0c             	sub    $0xc,%esp
f0112c21:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112c27:	50                   	push   %eax
f0112c28:	e8 96 ef fe ff       	call   f0101bc3 <execute_command>
f0112c2d:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112c30:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112c36:	bb bd 74 13 f0       	mov    $0xf01374bd,%ebx
f0112c3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c40:	89 c7                	mov    %eax,%edi
f0112c42:	89 de                	mov    %ebx,%esi
f0112c44:	89 d1                	mov    %edx,%ecx
f0112c46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c48:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112c4e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c53:	b0 00                	mov    $0x0,%al
f0112c55:	89 d7                	mov    %edx,%edi
f0112c57:	f3 aa                	rep stos %al,%es:(%edi)
f0112c59:	83 ec 0c             	sub    $0xc,%esp
f0112c5c:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112c62:	50                   	push   %eax
f0112c63:	e8 5b ef fe ff       	call   f0101bc3 <execute_command>
f0112c68:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112c6b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c71:	bb 21 75 13 f0       	mov    $0xf0137521,%ebx
f0112c76:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c7b:	89 c7                	mov    %eax,%edi
f0112c7d:	89 de                	mov    %ebx,%esi
f0112c7f:	89 d1                	mov    %edx,%ecx
f0112c81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c83:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112c89:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c8e:	b0 00                	mov    $0x0,%al
f0112c90:	89 d7                	mov    %edx,%edi
f0112c92:	f3 aa                	rep stos %al,%es:(%edi)
f0112c94:	83 ec 0c             	sub    $0xc,%esp
f0112c97:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c9d:	50                   	push   %eax
f0112c9e:	e8 20 ef fe ff       	call   f0101bc3 <execute_command>
f0112ca3:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112ca6:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112cac:	bb 85 75 13 f0       	mov    $0xf0137585,%ebx
f0112cb1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cb6:	89 c7                	mov    %eax,%edi
f0112cb8:	89 de                	mov    %ebx,%esi
f0112cba:	89 d1                	mov    %edx,%ecx
f0112cbc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cbe:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112cc4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cc9:	b0 00                	mov    $0x0,%al
f0112ccb:	89 d7                	mov    %edx,%edi
f0112ccd:	f3 aa                	rep stos %al,%es:(%edi)
f0112ccf:	83 ec 0c             	sub    $0xc,%esp
f0112cd2:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112cd8:	50                   	push   %eax
f0112cd9:	e8 e5 ee fe ff       	call   f0101bc3 <execute_command>
f0112cde:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112ce1:	83 ec 04             	sub    $0x4,%esp
f0112ce4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cea:	50                   	push   %eax
f0112ceb:	68 93 70 13 f0       	push   $0xf0137093
f0112cf0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112cf6:	50                   	push   %eax
f0112cf7:	e8 30 c3 01 00       	call   f012f02c <strcconcat>
f0112cfc:	83 c4 10             	add    $0x10,%esp
f0112cff:	83 ec 0c             	sub    $0xc,%esp
f0112d02:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d08:	50                   	push   %eax
f0112d09:	e8 b5 ee fe ff       	call   f0101bc3 <execute_command>
f0112d0e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112d11:	83 ec 04             	sub    $0x4,%esp
f0112d14:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d1a:	50                   	push   %eax
f0112d1b:	68 9d 70 13 f0       	push   $0xf013709d
f0112d20:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d26:	50                   	push   %eax
f0112d27:	e8 00 c3 01 00       	call   f012f02c <strcconcat>
f0112d2c:	83 c4 10             	add    $0x10,%esp
f0112d2f:	83 ec 0c             	sub    $0xc,%esp
f0112d32:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112d38:	50                   	push   %eax
f0112d39:	e8 85 ee fe ff       	call   f0101bc3 <execute_command>
f0112d3e:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112d41:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d47:	bb e9 75 13 f0       	mov    $0xf01375e9,%ebx
f0112d4c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d51:	89 c7                	mov    %eax,%edi
f0112d53:	89 de                	mov    %ebx,%esi
f0112d55:	89 d1                	mov    %edx,%ecx
f0112d57:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d59:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112d5f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d64:	b0 00                	mov    $0x0,%al
f0112d66:	89 d7                	mov    %edx,%edi
f0112d68:	f3 aa                	rep stos %al,%es:(%edi)
f0112d6a:	83 ec 0c             	sub    $0xc,%esp
f0112d6d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112d73:	50                   	push   %eax
f0112d74:	e8 4a ee fe ff       	call   f0101bc3 <execute_command>
f0112d79:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112d7c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d82:	bb 4d 76 13 f0       	mov    $0xf013764d,%ebx
f0112d87:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d8c:	89 c7                	mov    %eax,%edi
f0112d8e:	89 de                	mov    %ebx,%esi
f0112d90:	89 d1                	mov    %edx,%ecx
f0112d92:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d94:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112d9a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d9f:	b0 00                	mov    $0x0,%al
f0112da1:	89 d7                	mov    %edx,%edi
f0112da3:	f3 aa                	rep stos %al,%es:(%edi)
f0112da5:	83 ec 0c             	sub    $0xc,%esp
f0112da8:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112dae:	50                   	push   %eax
f0112daf:	e8 0f ee fe ff       	call   f0101bc3 <execute_command>
f0112db4:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112db7:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112dbd:	bb b1 76 13 f0       	mov    $0xf01376b1,%ebx
f0112dc2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112dc7:	89 c7                	mov    %eax,%edi
f0112dc9:	89 de                	mov    %ebx,%esi
f0112dcb:	89 d1                	mov    %edx,%ecx
f0112dcd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dcf:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112dd5:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112dda:	b0 00                	mov    $0x0,%al
f0112ddc:	89 d7                	mov    %edx,%edi
f0112dde:	f3 aa                	rep stos %al,%es:(%edi)
f0112de0:	83 ec 0c             	sub    $0xc,%esp
f0112de3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112de9:	50                   	push   %eax
f0112dea:	e8 d4 ed fe ff       	call   f0101bc3 <execute_command>
f0112def:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112df2:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112df9:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112e00:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112e07:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112e0e:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112e15:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112e1c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112e23:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112e2a:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112e31:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112e38:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112e3f:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112e46:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112e49:	8a 00                	mov    (%eax),%al
f0112e4b:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112e51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e54:	8a 00                	mov    (%eax),%al
f0112e56:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112e5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e5f:	8a 00                	mov    (%eax),%al
f0112e61:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e67:	e8 a6 97 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112e6c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112e6f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e72:	89 d0                	mov    %edx,%eax
f0112e74:	01 c0                	add    %eax,%eax
f0112e76:	01 d0                	add    %edx,%eax
f0112e78:	01 c0                	add    %eax,%eax
f0112e7a:	50                   	push   %eax
f0112e7b:	68 00 00 10 00       	push   $0x100000
f0112e80:	6a 00                	push   $0x0
f0112e82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e85:	e8 51 59 ff ff       	call   f01087db <copy_paste_chunk>
f0112e8a:	83 c4 10             	add    $0x10,%esp
f0112e8d:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e90:	e8 7d 97 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0112e95:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112e98:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112e9f:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112ea3:	75 08                	jne    f0112ead <test_copy_paste_chunk+0x4a8>
f0112ea5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ea8:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112eab:	74 2b                	je     f0112ed8 <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ead:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112eb0:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112eb3:	83 ec 0c             	sub    $0xc,%esp
f0112eb6:	50                   	push   %eax
f0112eb7:	ff 75 88             	pushl  -0x78(%ebp)
f0112eba:	68 ac 70 13 f0       	push   $0xf01370ac
f0112ebf:	68 3c 02 00 00       	push   $0x23c
f0112ec4:	68 1a 69 13 f0       	push   $0xf013691a
f0112ec9:	e8 f0 d4 fe ff       	call   f01003be <_warn>
f0112ece:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ed1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ed8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112edc:	74 04                	je     f0112ee2 <test_copy_paste_chunk+0x4dd>
f0112ede:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ee2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112ee9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112eec:	8a 00                	mov    (%eax),%al
f0112eee:	3c 61                	cmp    $0x61,%al
f0112ef0:	75 75                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112ef2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ef5:	8a 00                	mov    (%eax),%al
f0112ef7:	3c 78                	cmp    $0x78,%al
f0112ef9:	75 6c                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112efb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112efe:	8a 00                	mov    (%eax),%al
f0112f00:	3c 62                	cmp    $0x62,%al
f0112f02:	75 63                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f04:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f07:	8a 00                	mov    (%eax),%al
f0112f09:	3c 79                	cmp    $0x79,%al
f0112f0b:	75 5a                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f0d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112f10:	8a 00                	mov    (%eax),%al
f0112f12:	3c 63                	cmp    $0x63,%al
f0112f14:	75 51                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112f19:	8a 00                	mov    (%eax),%al
f0112f1b:	3c 7a                	cmp    $0x7a,%al
f0112f1d:	75 48                	jne    f0112f67 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112f1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112f22:	8a 00                	mov    (%eax),%al
f0112f24:	3c 64                	cmp    $0x64,%al
f0112f26:	75 3f                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f28:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112f2b:	8a 10                	mov    (%eax),%dl
f0112f2d:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112f33:	38 c2                	cmp    %al,%dl
f0112f35:	75 30                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f37:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112f3a:	8a 00                	mov    (%eax),%al
f0112f3c:	3c 65                	cmp    $0x65,%al
f0112f3e:	75 27                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112f43:	8a 10                	mov    (%eax),%dl
f0112f45:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112f4b:	38 c2                	cmp    %al,%dl
f0112f4d:	75 18                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112f52:	8a 00                	mov    (%eax),%al
f0112f54:	3c 66                	cmp    $0x66,%al
f0112f56:	75 0f                	jne    f0112f67 <test_copy_paste_chunk+0x562>
f0112f58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112f5b:	8a 10                	mov    (%eax),%dl
f0112f5d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112f63:	38 c2                	cmp    %al,%dl
f0112f65:	74 21                	je     f0112f88 <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f67:	83 ec 04             	sub    $0x4,%esp
f0112f6a:	68 10 71 13 f0       	push   $0xf0137110
f0112f6f:	68 45 02 00 00       	push   $0x245
f0112f74:	68 1a 69 13 f0       	push   $0xf013691a
f0112f79:	e8 40 d4 fe ff       	call   f01003be <_warn>
f0112f7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f81:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112f88:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f8c:	74 04                	je     f0112f92 <test_copy_paste_chunk+0x58d>
f0112f8e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f92:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112f99:	83 ec 0c             	sub    $0xc,%esp
f0112f9c:	68 4a 71 13 f0       	push   $0xf013714a
f0112fa1:	e8 8b de fe ff       	call   f0100e31 <cprintf>
f0112fa6:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112fa9:	83 ec 0c             	sub    $0xc,%esp
f0112fac:	68 5c 71 13 f0       	push   $0xf013715c
f0112fb1:	e8 7b de fe ff       	call   f0100e31 <cprintf>
f0112fb6:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112fb9:	83 ec 04             	sub    $0x4,%esp
f0112fbc:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112fc2:	50                   	push   %eax
f0112fc3:	68 92 71 13 f0       	push   $0xf0137192
f0112fc8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fce:	50                   	push   %eax
f0112fcf:	e8 58 c0 01 00       	call   f012f02c <strcconcat>
f0112fd4:	83 c4 10             	add    $0x10,%esp
f0112fd7:	83 ec 0c             	sub    $0xc,%esp
f0112fda:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112fe0:	50                   	push   %eax
f0112fe1:	e8 dd eb fe ff       	call   f0101bc3 <execute_command>
f0112fe6:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112fe9:	83 ec 04             	sub    $0x4,%esp
f0112fec:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ff2:	50                   	push   %eax
f0112ff3:	68 9c 71 13 f0       	push   $0xf013719c
f0112ff8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ffe:	50                   	push   %eax
f0112fff:	e8 28 c0 01 00       	call   f012f02c <strcconcat>
f0113004:	83 c4 10             	add    $0x10,%esp
f0113007:	83 ec 0c             	sub    $0xc,%esp
f011300a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113010:	50                   	push   %eax
f0113011:	e8 ad eb fe ff       	call   f0101bc3 <execute_command>
f0113016:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0113019:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011301f:	bb 15 77 13 f0       	mov    $0xf0137715,%ebx
f0113024:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113029:	89 c7                	mov    %eax,%edi
f011302b:	89 de                	mov    %ebx,%esi
f011302d:	89 d1                	mov    %edx,%ecx
f011302f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113031:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113037:	b9 55 00 00 00       	mov    $0x55,%ecx
f011303c:	b0 00                	mov    $0x0,%al
f011303e:	89 d7                	mov    %edx,%edi
f0113040:	f3 aa                	rep stos %al,%es:(%edi)
f0113042:	83 ec 0c             	sub    $0xc,%esp
f0113045:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011304b:	50                   	push   %eax
f011304c:	e8 72 eb fe ff       	call   f0101bc3 <execute_command>
f0113051:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113054:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011305a:	bb 79 77 13 f0       	mov    $0xf0137779,%ebx
f011305f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113064:	89 c7                	mov    %eax,%edi
f0113066:	89 de                	mov    %ebx,%esi
f0113068:	89 d1                	mov    %edx,%ecx
f011306a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011306c:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113072:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113077:	b0 00                	mov    $0x0,%al
f0113079:	89 d7                	mov    %edx,%edi
f011307b:	f3 aa                	rep stos %al,%es:(%edi)
f011307d:	83 ec 0c             	sub    $0xc,%esp
f0113080:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113086:	50                   	push   %eax
f0113087:	e8 37 eb fe ff       	call   f0101bc3 <execute_command>
f011308c:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011308f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113095:	bb dd 77 13 f0       	mov    $0xf01377dd,%ebx
f011309a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011309f:	89 c7                	mov    %eax,%edi
f01130a1:	89 de                	mov    %ebx,%esi
f01130a3:	89 d1                	mov    %edx,%ecx
f01130a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130a7:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01130ad:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130b2:	b0 00                	mov    $0x0,%al
f01130b4:	89 d7                	mov    %edx,%edi
f01130b6:	f3 aa                	rep stos %al,%es:(%edi)
f01130b8:	83 ec 0c             	sub    $0xc,%esp
f01130bb:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01130c1:	50                   	push   %eax
f01130c2:	e8 fc ea fe ff       	call   f0101bc3 <execute_command>
f01130c7:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01130ca:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01130d0:	bb 41 78 13 f0       	mov    $0xf0137841,%ebx
f01130d5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130da:	89 c7                	mov    %eax,%edi
f01130dc:	89 de                	mov    %ebx,%esi
f01130de:	89 d1                	mov    %edx,%ecx
f01130e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130e2:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01130e8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130ed:	b0 00                	mov    $0x0,%al
f01130ef:	89 d7                	mov    %edx,%edi
f01130f1:	f3 aa                	rep stos %al,%es:(%edi)
f01130f3:	83 ec 0c             	sub    $0xc,%esp
f01130f6:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01130fc:	50                   	push   %eax
f01130fd:	e8 c1 ea fe ff       	call   f0101bc3 <execute_command>
f0113102:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113105:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011310b:	bb a5 78 13 f0       	mov    $0xf01378a5,%ebx
f0113110:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113115:	89 c7                	mov    %eax,%edi
f0113117:	89 de                	mov    %ebx,%esi
f0113119:	89 d1                	mov    %edx,%ecx
f011311b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011311d:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113123:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113128:	b0 00                	mov    $0x0,%al
f011312a:	89 d7                	mov    %edx,%edi
f011312c:	f3 aa                	rep stos %al,%es:(%edi)
f011312e:	83 ec 0c             	sub    $0xc,%esp
f0113131:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113137:	50                   	push   %eax
f0113138:	e8 86 ea fe ff       	call   f0101bc3 <execute_command>
f011313d:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0113140:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113146:	bb 09 79 13 f0       	mov    $0xf0137909,%ebx
f011314b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113150:	89 c7                	mov    %eax,%edi
f0113152:	89 de                	mov    %ebx,%esi
f0113154:	89 d1                	mov    %edx,%ecx
f0113156:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113158:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011315e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113163:	b0 00                	mov    $0x0,%al
f0113165:	89 d7                	mov    %edx,%edi
f0113167:	f3 aa                	rep stos %al,%es:(%edi)
f0113169:	83 ec 0c             	sub    $0xc,%esp
f011316c:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113172:	50                   	push   %eax
f0113173:	e8 4b ea fe ff       	call   f0101bc3 <execute_command>
f0113178:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011317b:	83 ec 04             	sub    $0x4,%esp
f011317e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113184:	50                   	push   %eax
f0113185:	68 a6 71 13 f0       	push   $0xf01371a6
f011318a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113190:	50                   	push   %eax
f0113191:	e8 96 be 01 00       	call   f012f02c <strcconcat>
f0113196:	83 c4 10             	add    $0x10,%esp
f0113199:	83 ec 0c             	sub    $0xc,%esp
f011319c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131a2:	50                   	push   %eax
f01131a3:	e8 1b ea fe ff       	call   f0101bc3 <execute_command>
f01131a8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01131ab:	83 ec 04             	sub    $0x4,%esp
f01131ae:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131b4:	50                   	push   %eax
f01131b5:	68 b0 71 13 f0       	push   $0xf01371b0
f01131ba:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01131c0:	50                   	push   %eax
f01131c1:	e8 66 be 01 00       	call   f012f02c <strcconcat>
f01131c6:	83 c4 10             	add    $0x10,%esp
f01131c9:	83 ec 0c             	sub    $0xc,%esp
f01131cc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131d2:	50                   	push   %eax
f01131d3:	e8 eb e9 fe ff       	call   f0101bc3 <execute_command>
f01131d8:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01131db:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01131e1:	bb 6d 79 13 f0       	mov    $0xf013796d,%ebx
f01131e6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131eb:	89 c7                	mov    %eax,%edi
f01131ed:	89 de                	mov    %ebx,%esi
f01131ef:	89 d1                	mov    %edx,%ecx
f01131f1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131f3:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01131f9:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131fe:	b0 00                	mov    $0x0,%al
f0113200:	89 d7                	mov    %edx,%edi
f0113202:	f3 aa                	rep stos %al,%es:(%edi)
f0113204:	83 ec 0c             	sub    $0xc,%esp
f0113207:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011320d:	50                   	push   %eax
f011320e:	e8 b0 e9 fe ff       	call   f0101bc3 <execute_command>
f0113213:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113216:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011321c:	bb d1 79 13 f0       	mov    $0xf01379d1,%ebx
f0113221:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113226:	89 c7                	mov    %eax,%edi
f0113228:	89 de                	mov    %ebx,%esi
f011322a:	89 d1                	mov    %edx,%ecx
f011322c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011322e:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113234:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113239:	b0 00                	mov    $0x0,%al
f011323b:	89 d7                	mov    %edx,%edi
f011323d:	f3 aa                	rep stos %al,%es:(%edi)
f011323f:	83 ec 0c             	sub    $0xc,%esp
f0113242:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113248:	50                   	push   %eax
f0113249:	e8 75 e9 fe ff       	call   f0101bc3 <execute_command>
f011324e:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113251:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113257:	bb 35 7a 13 f0       	mov    $0xf0137a35,%ebx
f011325c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113261:	89 c7                	mov    %eax,%edi
f0113263:	89 de                	mov    %ebx,%esi
f0113265:	89 d1                	mov    %edx,%ecx
f0113267:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113269:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011326f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113274:	b0 00                	mov    $0x0,%al
f0113276:	89 d7                	mov    %edx,%edi
f0113278:	f3 aa                	rep stos %al,%es:(%edi)
f011327a:	83 ec 0c             	sub    $0xc,%esp
f011327d:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113283:	50                   	push   %eax
f0113284:	e8 3a e9 fe ff       	call   f0101bc3 <execute_command>
f0113289:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011328c:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113293:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011329a:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01132a1:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01132a8:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01132af:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01132b6:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01132bd:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01132c4:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01132cb:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01132d2:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01132d9:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01132e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01132e3:	8a 00                	mov    (%eax),%al
f01132e5:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01132eb:	e8 22 93 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01132f0:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01132f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132f6:	89 d0                	mov    %edx,%eax
f01132f8:	01 c0                	add    %eax,%eax
f01132fa:	01 d0                	add    %edx,%eax
f01132fc:	01 c0                	add    %eax,%eax
f01132fe:	50                   	push   %eax
f01132ff:	68 00 00 40 00       	push   $0x400000
f0113304:	68 00 00 20 00       	push   $0x200000
f0113309:	ff 75 d4             	pushl  -0x2c(%ebp)
f011330c:	e8 ca 54 ff ff       	call   f01087db <copy_paste_chunk>
f0113311:	83 c4 10             	add    $0x10,%esp
f0113314:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113317:	e8 f6 92 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011331c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011331f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113326:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011332a:	75 08                	jne    f0113334 <test_copy_paste_chunk+0x92f>
f011332c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011332f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113332:	74 2b                	je     f011335f <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113334:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113337:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011333a:	83 ec 0c             	sub    $0xc,%esp
f011333d:	50                   	push   %eax
f011333e:	ff 75 80             	pushl  -0x80(%ebp)
f0113341:	68 bc 71 13 f0       	push   $0xf01371bc
f0113346:	68 75 02 00 00       	push   $0x275
f011334b:	68 1a 69 13 f0       	push   $0xf013691a
f0113350:	e8 69 d0 fe ff       	call   f01003be <_warn>
f0113355:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113358:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011335f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113363:	74 04                	je     f0113369 <test_copy_paste_chunk+0x964>
f0113365:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113369:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113370:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113377:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011337a:	83 ec 08             	sub    $0x8,%esp
f011337d:	6a 01                	push   $0x1
f011337f:	6a 07                	push   $0x7
f0113381:	6a 07                	push   $0x7
f0113383:	6a 07                	push   $0x7
f0113385:	6a 07                	push   $0x7
f0113387:	6a 01                	push   $0x1
f0113389:	68 00 20 00 00       	push   $0x2000
f011338e:	68 00 00 40 00       	push   $0x400000
f0113393:	68 00 00 20 00       	push   $0x200000
f0113398:	ff 75 d4             	pushl  -0x2c(%ebp)
f011339b:	e8 22 36 00 00       	call   f01169c2 <CCP>
f01133a0:	83 c4 30             	add    $0x30,%esp
f01133a3:	83 f8 01             	cmp    $0x1,%eax
f01133a6:	74 2b                	je     f01133d3 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01133a8:	83 ec 04             	sub    $0x4,%esp
f01133ab:	68 10 72 13 f0       	push   $0xf0137210
f01133b0:	68 7e 02 00 00       	push   $0x27e
f01133b5:	68 1a 69 13 f0       	push   $0xf013691a
f01133ba:	e8 ff cf fe ff       	call   f01003be <_warn>
f01133bf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133c2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01133c9:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01133d0:	00 00 00 
		}
		if (correct) eval += 5 ;
f01133d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133d7:	74 04                	je     f01133dd <test_copy_paste_chunk+0x9d8>
f01133d9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01133e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133e7:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01133ea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133ed:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01133f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133f3:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01133f6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133f9:	8a 00                	mov    (%eax),%al
f01133fb:	3c 61                	cmp    $0x61,%al
f01133fd:	75 69                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f01133ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113402:	8a 00                	mov    (%eax),%al
f0113404:	3c 61                	cmp    $0x61,%al
f0113406:	75 60                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113408:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011340b:	8a 00                	mov    (%eax),%al
f011340d:	3c 79                	cmp    $0x79,%al
f011340f:	75 57                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113411:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113414:	8a 00                	mov    (%eax),%al
f0113416:	3c 62                	cmp    $0x62,%al
f0113418:	75 4e                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f011341a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011341d:	8a 00                	mov    (%eax),%al
f011341f:	3c 63                	cmp    $0x63,%al
f0113421:	75 45                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113423:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113426:	8a 00                	mov    (%eax),%al
f0113428:	3c 7a                	cmp    $0x7a,%al
f011342a:	75 3c                	jne    f0113468 <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011342c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011342f:	8a 00                	mov    (%eax),%al
f0113431:	3c 77                	cmp    $0x77,%al
f0113433:	75 33                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113435:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113438:	8a 00                	mov    (%eax),%al
f011343a:	3c 64                	cmp    $0x64,%al
f011343c:	75 2a                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f011343e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113441:	8a 00                	mov    (%eax),%al
f0113443:	3c 65                	cmp    $0x65,%al
f0113445:	75 21                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113447:	8b 45 98             	mov    -0x68(%ebp),%eax
f011344a:	8a 00                	mov    (%eax),%al
f011344c:	3c 65                	cmp    $0x65,%al
f011344e:	75 18                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113450:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113453:	8a 00                	mov    (%eax),%al
f0113455:	3c 66                	cmp    $0x66,%al
f0113457:	75 0f                	jne    f0113468 <test_copy_paste_chunk+0xa63>
f0113459:	8b 45 90             	mov    -0x70(%ebp),%eax
f011345c:	8a 10                	mov    (%eax),%dl
f011345e:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113464:	38 c2                	cmp    %al,%dl
f0113466:	74 21                	je     f0113489 <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113468:	83 ec 04             	sub    $0x4,%esp
f011346b:	68 10 71 13 f0       	push   $0xf0137110
f0113470:	68 8c 02 00 00       	push   $0x28c
f0113475:	68 1a 69 13 f0       	push   $0xf013691a
f011347a:	e8 3f cf fe ff       	call   f01003be <_warn>
f011347f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113482:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113489:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011348d:	74 04                	je     f0113493 <test_copy_paste_chunk+0xa8e>
f011348f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113493:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011349a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011349d:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01134a0:	e8 6d 91 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01134a5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01134a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01134ab:	89 c2                	mov    %eax,%edx
f01134ad:	01 d2                	add    %edx,%edx
f01134af:	01 d0                	add    %edx,%eax
f01134b1:	50                   	push   %eax
f01134b2:	68 00 08 20 00       	push   $0x200800
f01134b7:	68 00 08 40 00       	push   $0x400800
f01134bc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134bf:	e8 17 53 ff ff       	call   f01087db <copy_paste_chunk>
f01134c4:	83 c4 10             	add    $0x10,%esp
f01134c7:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134ca:	e8 43 91 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01134cf:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01134d2:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01134d6:	75 08                	jne    f01134e0 <test_copy_paste_chunk+0xadb>
f01134d8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134db:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01134de:	74 2b                	je     f011350b <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134e3:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01134e6:	83 ec 0c             	sub    $0xc,%esp
f01134e9:	50                   	push   %eax
f01134ea:	ff 75 80             	pushl  -0x80(%ebp)
f01134ed:	68 bc 71 13 f0       	push   $0xf01371bc
f01134f2:	68 9c 02 00 00       	push   $0x29c
f01134f7:	68 1a 69 13 f0       	push   $0xf013691a
f01134fc:	e8 bd ce fe ff       	call   f01003be <_warn>
f0113501:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113504:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011350b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011350f:	74 04                	je     f0113515 <test_copy_paste_chunk+0xb10>
f0113511:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113515:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011351c:	83 ec 08             	sub    $0x8,%esp
f011351f:	6a 01                	push   $0x1
f0113521:	6a 07                	push   $0x7
f0113523:	6a 07                	push   $0x7
f0113525:	6a 07                	push   $0x7
f0113527:	6a 07                	push   $0x7
f0113529:	6a 01                	push   $0x1
f011352b:	68 00 20 00 00       	push   $0x2000
f0113530:	68 00 00 20 00       	push   $0x200000
f0113535:	68 00 00 40 00       	push   $0x400000
f011353a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011353d:	e8 80 34 00 00       	call   f01169c2 <CCP>
f0113542:	83 c4 30             	add    $0x30,%esp
f0113545:	83 f8 01             	cmp    $0x1,%eax
f0113548:	74 21                	je     f011356b <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011354a:	83 ec 04             	sub    $0x4,%esp
f011354d:	68 5c 72 13 f0       	push   $0xf013725c
f0113552:	68 a4 02 00 00       	push   $0x2a4
f0113557:	68 1a 69 13 f0       	push   $0xf013691a
f011355c:	e8 5d ce fe ff       	call   f01003be <_warn>
f0113561:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113564:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011356b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011356f:	74 04                	je     f0113575 <test_copy_paste_chunk+0xb70>
f0113571:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113575:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011357c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011357f:	8a 00                	mov    (%eax),%al
f0113581:	3c 61                	cmp    $0x61,%al
f0113583:	75 69                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f0113585:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113588:	8a 00                	mov    (%eax),%al
f011358a:	3c 61                	cmp    $0x61,%al
f011358c:	75 60                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f011358e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113591:	8a 00                	mov    (%eax),%al
f0113593:	3c 79                	cmp    $0x79,%al
f0113595:	75 57                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f0113597:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011359a:	8a 00                	mov    (%eax),%al
f011359c:	3c 62                	cmp    $0x62,%al
f011359e:	75 4e                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01135a3:	8a 00                	mov    (%eax),%al
f01135a5:	3c 7a                	cmp    $0x7a,%al
f01135a7:	75 45                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01135ac:	8a 00                	mov    (%eax),%al
f01135ae:	3c 7a                	cmp    $0x7a,%al
f01135b0:	75 3c                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01135b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01135b5:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01135b7:	3c 64                	cmp    $0x64,%al
f01135b9:	75 33                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01135bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01135be:	8a 00                	mov    (%eax),%al
f01135c0:	3c 64                	cmp    $0x64,%al
f01135c2:	75 2a                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01135c7:	8a 00                	mov    (%eax),%al
f01135c9:	3c 65                	cmp    $0x65,%al
f01135cb:	75 21                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01135d0:	8a 00                	mov    (%eax),%al
f01135d2:	3c 78                	cmp    $0x78,%al
f01135d4:	75 18                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01135d9:	8a 00                	mov    (%eax),%al
f01135db:	3c 66                	cmp    $0x66,%al
f01135dd:	75 0f                	jne    f01135ee <test_copy_paste_chunk+0xbe9>
f01135df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01135e2:	8a 10                	mov    (%eax),%dl
f01135e4:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01135ea:	38 c2                	cmp    %al,%dl
f01135ec:	74 21                	je     f011360f <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01135ee:	83 ec 04             	sub    $0x4,%esp
f01135f1:	68 10 71 13 f0       	push   $0xf0137110
f01135f6:	68 ad 02 00 00       	push   $0x2ad
f01135fb:	68 1a 69 13 f0       	push   $0xf013691a
f0113600:	e8 b9 cd fe ff       	call   f01003be <_warn>
f0113605:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113608:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011360f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113613:	74 04                	je     f0113619 <test_copy_paste_chunk+0xc14>
f0113615:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113619:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113620:	83 ec 0c             	sub    $0xc,%esp
f0113623:	68 a7 72 13 f0       	push   $0xf01372a7
f0113628:	e8 04 d8 fe ff       	call   f0100e31 <cprintf>
f011362d:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113630:	83 ec 0c             	sub    $0xc,%esp
f0113633:	68 b8 72 13 f0       	push   $0xf01372b8
f0113638:	e8 f4 d7 fe ff       	call   f0100e31 <cprintf>
f011363d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113640:	83 ec 04             	sub    $0x4,%esp
f0113643:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113649:	50                   	push   %eax
f011364a:	68 ec 72 13 f0       	push   $0xf01372ec
f011364f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113655:	50                   	push   %eax
f0113656:	e8 d1 b9 01 00       	call   f012f02c <strcconcat>
f011365b:	83 c4 10             	add    $0x10,%esp
f011365e:	83 ec 0c             	sub    $0xc,%esp
f0113661:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113667:	50                   	push   %eax
f0113668:	e8 56 e5 fe ff       	call   f0101bc3 <execute_command>
f011366d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113670:	83 ec 04             	sub    $0x4,%esp
f0113673:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113679:	50                   	push   %eax
f011367a:	68 f6 72 13 f0       	push   $0xf01372f6
f011367f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113685:	50                   	push   %eax
f0113686:	e8 a1 b9 01 00       	call   f012f02c <strcconcat>
f011368b:	83 c4 10             	add    $0x10,%esp
f011368e:	83 ec 0c             	sub    $0xc,%esp
f0113691:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113697:	50                   	push   %eax
f0113698:	e8 26 e5 fe ff       	call   f0101bc3 <execute_command>
f011369d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01136a0:	83 ec 04             	sub    $0x4,%esp
f01136a3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136a9:	50                   	push   %eax
f01136aa:	68 00 73 13 f0       	push   $0xf0137300
f01136af:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01136b5:	50                   	push   %eax
f01136b6:	e8 71 b9 01 00       	call   f012f02c <strcconcat>
f01136bb:	83 c4 10             	add    $0x10,%esp
f01136be:	83 ec 0c             	sub    $0xc,%esp
f01136c1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136c7:	50                   	push   %eax
f01136c8:	e8 f6 e4 fe ff       	call   f0101bc3 <execute_command>
f01136cd:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01136d0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01136d6:	bb 99 7a 13 f0       	mov    $0xf0137a99,%ebx
f01136db:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136e0:	89 c7                	mov    %eax,%edi
f01136e2:	89 de                	mov    %ebx,%esi
f01136e4:	89 d1                	mov    %edx,%ecx
f01136e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136e8:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01136ee:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136f3:	b0 00                	mov    $0x0,%al
f01136f5:	89 d7                	mov    %edx,%edi
f01136f7:	f3 aa                	rep stos %al,%es:(%edi)
f01136f9:	83 ec 0c             	sub    $0xc,%esp
f01136fc:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113702:	50                   	push   %eax
f0113703:	e8 bb e4 fe ff       	call   f0101bc3 <execute_command>
f0113708:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011370b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113711:	bb fd 7a 13 f0       	mov    $0xf0137afd,%ebx
f0113716:	ba 0f 00 00 00       	mov    $0xf,%edx
f011371b:	89 c7                	mov    %eax,%edi
f011371d:	89 de                	mov    %ebx,%esi
f011371f:	89 d1                	mov    %edx,%ecx
f0113721:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113723:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113729:	b9 55 00 00 00       	mov    $0x55,%ecx
f011372e:	b0 00                	mov    $0x0,%al
f0113730:	89 d7                	mov    %edx,%edi
f0113732:	f3 aa                	rep stos %al,%es:(%edi)
f0113734:	83 ec 0c             	sub    $0xc,%esp
f0113737:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011373d:	50                   	push   %eax
f011373e:	e8 80 e4 fe ff       	call   f0101bc3 <execute_command>
f0113743:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113746:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011374c:	bb 61 7b 13 f0       	mov    $0xf0137b61,%ebx
f0113751:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113756:	89 c7                	mov    %eax,%edi
f0113758:	89 de                	mov    %ebx,%esi
f011375a:	89 d1                	mov    %edx,%ecx
f011375c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011375e:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113764:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113769:	b0 00                	mov    $0x0,%al
f011376b:	89 d7                	mov    %edx,%edi
f011376d:	f3 aa                	rep stos %al,%es:(%edi)
f011376f:	83 ec 0c             	sub    $0xc,%esp
f0113772:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113778:	50                   	push   %eax
f0113779:	e8 45 e4 fe ff       	call   f0101bc3 <execute_command>
f011377e:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113781:	e8 8c 8e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113786:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113789:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011378c:	89 d0                	mov    %edx,%eax
f011378e:	01 c0                	add    %eax,%eax
f0113790:	01 d0                	add    %edx,%eax
f0113792:	c1 e0 02             	shl    $0x2,%eax
f0113795:	50                   	push   %eax
f0113796:	68 00 00 90 00       	push   $0x900000
f011379b:	68 00 00 80 00       	push   $0x800000
f01137a0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137a3:	e8 33 50 ff ff       	call   f01087db <copy_paste_chunk>
f01137a8:	83 c4 10             	add    $0x10,%esp
f01137ab:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137b1:	e8 5c 8e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01137b6:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01137b9:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01137c0:	75 0b                	jne    f01137cd <test_copy_paste_chunk+0xdc8>
f01137c2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137c5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01137c8:	83 f8 03             	cmp    $0x3,%eax
f01137cb:	74 2e                	je     f01137fb <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01137cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137d0:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01137d3:	83 ec 0c             	sub    $0xc,%esp
f01137d6:	50                   	push   %eax
f01137d7:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01137dd:	68 bc 71 13 f0       	push   $0xf01371bc
f01137e2:	68 cb 02 00 00       	push   $0x2cb
f01137e7:	68 1a 69 13 f0       	push   $0xf013691a
f01137ec:	e8 cd cb fe ff       	call   f01003be <_warn>
f01137f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01137fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137ff:	74 04                	je     f0113805 <test_copy_paste_chunk+0xe00>
f0113801:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113805:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011380c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113813:	83 ec 08             	sub    $0x8,%esp
f0113816:	6a 01                	push   $0x1
f0113818:	6a 07                	push   $0x7
f011381a:	6a 07                	push   $0x7
f011381c:	6a 07                	push   $0x7
f011381e:	6a 07                	push   $0x7
f0113820:	6a 01                	push   $0x1
f0113822:	68 00 30 00 00       	push   $0x3000
f0113827:	68 00 00 90 00       	push   $0x900000
f011382c:	68 00 00 80 00       	push   $0x800000
f0113831:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113834:	e8 89 31 00 00       	call   f01169c2 <CCP>
f0113839:	83 c4 30             	add    $0x30,%esp
f011383c:	83 f8 01             	cmp    $0x1,%eax
f011383f:	74 28                	je     f0113869 <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113841:	83 ec 04             	sub    $0x4,%esp
f0113844:	68 5c 72 13 f0       	push   $0xf013725c
f0113849:	68 d4 02 00 00       	push   $0x2d4
f011384e:	68 1a 69 13 f0       	push   $0xf013691a
f0113853:	e8 66 cb fe ff       	call   f01003be <_warn>
f0113858:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011385b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113862:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113869:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011386d:	74 04                	je     f0113873 <test_copy_paste_chunk+0xe6e>
f011386f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113873:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011387a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011387e:	0f 84 9e 00 00 00    	je     f0113922 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113884:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011388b:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113892:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113899:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f01138a0:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01138a7:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01138ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138b1:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01138b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01138b7:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01138ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138bd:	8a 00                	mov    (%eax),%al
f01138bf:	3c 61                	cmp    $0x61,%al
f01138c1:	75 2d                	jne    f01138f0 <test_copy_paste_chunk+0xeeb>
f01138c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138c6:	8a 00                	mov    (%eax),%al
f01138c8:	3c 61                	cmp    $0x61,%al
f01138ca:	75 24                	jne    f01138f0 <test_copy_paste_chunk+0xeeb>
f01138cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138cf:	8a 00                	mov    (%eax),%al
f01138d1:	3c 79                	cmp    $0x79,%al
f01138d3:	75 1b                	jne    f01138f0 <test_copy_paste_chunk+0xeeb>
f01138d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138d8:	8a 00                	mov    (%eax),%al
f01138da:	3c 62                	cmp    $0x62,%al
f01138dc:	75 12                	jne    f01138f0 <test_copy_paste_chunk+0xeeb>
f01138de:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01138e1:	8a 00                	mov    (%eax),%al
f01138e3:	3c 63                	cmp    $0x63,%al
f01138e5:	75 09                	jne    f01138f0 <test_copy_paste_chunk+0xeeb>
f01138e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01138ea:	8a 00                	mov    (%eax),%al
f01138ec:	3c 7a                	cmp    $0x7a,%al
f01138ee:	74 21                	je     f0113911 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01138f0:	83 ec 04             	sub    $0x4,%esp
f01138f3:	68 10 71 13 f0       	push   $0xf0137110
f01138f8:	68 e6 02 00 00       	push   $0x2e6
f01138fd:	68 1a 69 13 f0       	push   $0xf013691a
f0113902:	e8 b7 ca fe ff       	call   f01003be <_warn>
f0113907:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011390a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113911:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113915:	74 04                	je     f011391b <test_copy_paste_chunk+0xf16>
f0113917:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011391b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113922:	e8 eb 8c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113927:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f011392a:	6a 00                	push   $0x0
f011392c:	6a 02                	push   $0x2
f011392e:	68 00 10 90 00       	push   $0x901000
f0113933:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113936:	e8 c9 2b 00 00       	call   f0116504 <SB>
f011393b:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011393e:	6a 00                	push   $0x0
f0113940:	6a 02                	push   $0x2
f0113942:	68 00 20 90 00       	push   $0x902000
f0113947:	ff 75 d4             	pushl  -0x2c(%ebp)
f011394a:	e8 b5 2b 00 00       	call   f0116504 <SB>
f011394f:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113952:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113955:	c1 e0 03             	shl    $0x3,%eax
f0113958:	50                   	push   %eax
f0113959:	68 00 f0 bf 00       	push   $0xbff000
f011395e:	68 00 10 90 00       	push   $0x901000
f0113963:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113966:	e8 70 4e ff ff       	call   f01087db <copy_paste_chunk>
f011396b:	83 c4 10             	add    $0x10,%esp
f011396e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113974:	e8 99 8c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113979:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011397c:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113983:	75 0b                	jne    f0113990 <test_copy_paste_chunk+0xf8b>
f0113985:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113988:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011398b:	83 f8 03             	cmp    $0x3,%eax
f011398e:	74 2e                	je     f01139be <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113990:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113993:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113996:	83 ec 0c             	sub    $0xc,%esp
f0113999:	50                   	push   %eax
f011399a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01139a0:	68 bc 71 13 f0       	push   $0xf01371bc
f01139a5:	68 f6 02 00 00       	push   $0x2f6
f01139aa:	68 1a 69 13 f0       	push   $0xf013691a
f01139af:	e8 0a ca fe ff       	call   f01003be <_warn>
f01139b4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01139be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139c2:	74 04                	je     f01139c8 <test_copy_paste_chunk+0xfc3>
f01139c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139c8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01139cf:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01139d6:	83 ec 08             	sub    $0x8,%esp
f01139d9:	6a 01                	push   $0x1
f01139db:	6a 07                	push   $0x7
f01139dd:	6a 03                	push   $0x3
f01139df:	6a 07                	push   $0x7
f01139e1:	6a 03                	push   $0x3
f01139e3:	6a 01                	push   $0x1
f01139e5:	68 00 20 00 00       	push   $0x2000
f01139ea:	68 00 f0 bf 00       	push   $0xbff000
f01139ef:	68 00 10 90 00       	push   $0x901000
f01139f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01139f7:	e8 c6 2f 00 00       	call   f01169c2 <CCP>
f01139fc:	83 c4 30             	add    $0x30,%esp
f01139ff:	83 f8 01             	cmp    $0x1,%eax
f0113a02:	74 28                	je     f0113a2c <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113a04:	83 ec 04             	sub    $0x4,%esp
f0113a07:	68 5c 72 13 f0       	push   $0xf013725c
f0113a0c:	68 ff 02 00 00       	push   $0x2ff
f0113a11:	68 1a 69 13 f0       	push   $0xf013691a
f0113a16:	e8 a3 c9 fe ff       	call   f01003be <_warn>
f0113a1b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113a25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113a2c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a30:	74 04                	je     f0113a36 <test_copy_paste_chunk+0x1031>
f0113a32:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113a36:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113a3d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113a41:	74 72                	je     f0113ab5 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113a43:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113a4a:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113a51:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113a58:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113a5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a62:	8a 00                	mov    (%eax),%al
f0113a64:	3c 62                	cmp    $0x62,%al
f0113a66:	75 1b                	jne    f0113a83 <test_copy_paste_chunk+0x107e>
f0113a68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a6b:	8a 00                	mov    (%eax),%al
f0113a6d:	3c 62                	cmp    $0x62,%al
f0113a6f:	75 12                	jne    f0113a83 <test_copy_paste_chunk+0x107e>
f0113a71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a74:	8a 00                	mov    (%eax),%al
f0113a76:	3c 7a                	cmp    $0x7a,%al
f0113a78:	75 09                	jne    f0113a83 <test_copy_paste_chunk+0x107e>
f0113a7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113a7d:	8a 00                	mov    (%eax),%al
f0113a7f:	3c 7a                	cmp    $0x7a,%al
f0113a81:	74 21                	je     f0113aa4 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113a83:	83 ec 04             	sub    $0x4,%esp
f0113a86:	68 10 71 13 f0       	push   $0xf0137110
f0113a8b:	68 0b 03 00 00       	push   $0x30b
f0113a90:	68 1a 69 13 f0       	push   $0xf013691a
f0113a95:	e8 24 c9 fe ff       	call   f01003be <_warn>
f0113a9a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113a9d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113aa4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113aa8:	74 04                	je     f0113aae <test_copy_paste_chunk+0x10a9>
f0113aaa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113aae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113ab5:	83 ec 0c             	sub    $0xc,%esp
f0113ab8:	68 0a 73 13 f0       	push   $0xf013730a
f0113abd:	e8 6f d3 fe ff       	call   f0100e31 <cprintf>
f0113ac2:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113ac5:	83 ec 08             	sub    $0x8,%esp
f0113ac8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113acb:	68 1c 73 13 f0       	push   $0xf013731c
f0113ad0:	e8 5c d3 fe ff       	call   f0100e31 <cprintf>
f0113ad5:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113ad8:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113adc:	75 10                	jne    f0113aee <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113ade:	83 ec 0c             	sub    $0xc,%esp
f0113ae1:	68 50 73 13 f0       	push   $0xf0137350
f0113ae6:	e8 46 d3 fe ff       	call   f0100e31 <cprintf>
f0113aeb:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113aee:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0113af3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113af6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113af9:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113afc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113b01:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113b04:	5b                   	pop    %ebx
f0113b05:	5e                   	pop    %esi
f0113b06:	5f                   	pop    %edi
f0113b07:	5d                   	pop    %ebp
f0113b08:	c3                   	ret    

f0113b09 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113b09:	55                   	push   %ebp
f0113b0a:	89 e5                	mov    %esp,%ebp
f0113b0c:	57                   	push   %edi
f0113b0d:	56                   	push   %esi
f0113b0e:	53                   	push   %ebx
f0113b0f:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113b15:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113b1b:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f0113b20:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113b25:	89 c7                	mov    %eax,%edi
f0113b27:	89 de                	mov    %ebx,%esi
f0113b29:	89 d1                	mov    %edx,%ecx
f0113b2b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113b2d:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113b33:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113b38:	b0 00                	mov    $0x0,%al
f0113b3a:	89 d7                	mov    %edx,%edi
f0113b3c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113b3e:	6a 00                	push   $0x0
f0113b40:	6a 0a                	push   $0xa
f0113b42:	6a 14                	push   $0x14
f0113b44:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113b4a:	50                   	push   %eax
f0113b4b:	e8 af 4d ff ff       	call   f01088ff <env_create>
f0113b50:	83 c4 10             	add    $0x10,%esp
f0113b53:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113b56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b59:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113b5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113b62:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b65:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113b6b:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113b6e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113b71:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113b74:	83 ec 0c             	sub    $0xc,%esp
f0113b77:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b7a:	e8 0f 2e 00 00       	call   f011698e <ClearUserSpace>
f0113b7f:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113b82:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113b89:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113b90:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113b97:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113b9b:	83 ec 0c             	sub    $0xc,%esp
f0113b9e:	68 c8 7b 13 f0       	push   $0xf0137bc8
f0113ba3:	e8 89 d2 fe ff       	call   f0100e31 <cprintf>
f0113ba8:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113bab:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113bb2:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113bb9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113bbc:	8a 00                	mov    (%eax),%al
f0113bbe:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113bc4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113bc7:	8a 00                	mov    (%eax),%al
f0113bc9:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113bcf:	e8 3e 8a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113bd4:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113bd7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113bda:	89 d0                	mov    %edx,%eax
f0113bdc:	01 c0                	add    %eax,%eax
f0113bde:	01 d0                	add    %edx,%eax
f0113be0:	01 c0                	add    %eax,%eax
f0113be2:	83 ec 0c             	sub    $0xc,%esp
f0113be5:	6a 02                	push   $0x2
f0113be7:	50                   	push   %eax
f0113be8:	68 00 40 10 f0       	push   $0xf0104000
f0113bed:	68 00 00 10 f0       	push   $0xf0100000
f0113bf2:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bf5:	e8 fb 4b ff ff       	call   f01087f5 <share_chunk>
f0113bfa:	83 c4 20             	add    $0x20,%esp
f0113bfd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c00:	e8 0d 8a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113c05:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113c08:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113c0c:	75 08                	jne    f0113c16 <test_share_chunk+0x10d>
f0113c0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c11:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113c14:	74 28                	je     f0113c3e <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113c16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c19:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c1c:	83 ec 0c             	sub    $0xc,%esp
f0113c1f:	50                   	push   %eax
f0113c20:	ff 75 b0             	pushl  -0x50(%ebp)
f0113c23:	68 f4 7b 13 f0       	push   $0xf0137bf4
f0113c28:	68 47 03 00 00       	push   $0x347
f0113c2d:	68 1a 69 13 f0       	push   $0xf013691a
f0113c32:	e8 87 c7 fe ff       	call   f01003be <_warn>
f0113c37:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c3a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c3e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c42:	74 04                	je     f0113c48 <test_share_chunk+0x13f>
f0113c44:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c48:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113c4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c4f:	c1 e0 03             	shl    $0x3,%eax
f0113c52:	83 ec 08             	sub    $0x8,%esp
f0113c55:	68 fd 00 00 00       	push   $0xfd
f0113c5a:	6a 07                	push   $0x7
f0113c5c:	6a 03                	push   $0x3
f0113c5e:	6a 07                	push   $0x7
f0113c60:	6a 03                	push   $0x3
f0113c62:	6a 01                	push   $0x1
f0113c64:	50                   	push   %eax
f0113c65:	68 00 40 10 f0       	push   $0xf0104000
f0113c6a:	68 00 00 10 f0       	push   $0xf0100000
f0113c6f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c72:	e8 4b 2d 00 00       	call   f01169c2 <CCP>
f0113c77:	83 c4 30             	add    $0x30,%esp
f0113c7a:	85 c0                	test   %eax,%eax
f0113c7c:	75 1e                	jne    f0113c9c <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c7e:	83 ec 04             	sub    $0x4,%esp
f0113c81:	68 50 7c 13 f0       	push   $0xf0137c50
f0113c86:	68 4f 03 00 00       	push   $0x34f
f0113c8b:	68 1a 69 13 f0       	push   $0xf013691a
f0113c90:	e8 29 c7 fe ff       	call   f01003be <_warn>
f0113c95:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ca0:	74 04                	je     f0113ca6 <test_share_chunk+0x19d>
f0113ca2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113ca6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ca9:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113cac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113caf:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113cb2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cb5:	8a 00                	mov    (%eax),%al
f0113cb7:	3c 41                	cmp    $0x41,%al
f0113cb9:	75 09                	jne    f0113cc4 <test_share_chunk+0x1bb>
f0113cbb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113cbe:	8a 00                	mov    (%eax),%al
f0113cc0:	3c 42                	cmp    $0x42,%al
f0113cc2:	74 1e                	je     f0113ce2 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113cc4:	83 ec 04             	sub    $0x4,%esp
f0113cc7:	68 98 7c 13 f0       	push   $0xf0137c98
f0113ccc:	68 59 03 00 00       	push   $0x359
f0113cd1:	68 1a 69 13 f0       	push   $0xf013691a
f0113cd6:	e8 e3 c6 fe ff       	call   f01003be <_warn>
f0113cdb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113cde:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113ce2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ce6:	74 04                	je     f0113cec <test_share_chunk+0x1e3>
f0113ce8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113cec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113cf0:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113cf6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cf9:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113cfb:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113d01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d04:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113d06:	83 ec 0c             	sub    $0xc,%esp
f0113d09:	68 cd 7c 13 f0       	push   $0xf0137ccd
f0113d0e:	e8 1e d1 fe ff       	call   f0100e31 <cprintf>
f0113d13:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113d16:	83 ec 0c             	sub    $0xc,%esp
f0113d19:	68 dc 7c 13 f0       	push   $0xf0137cdc
f0113d1e:	e8 0e d1 fe ff       	call   f0100e31 <cprintf>
f0113d23:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d26:	e8 e7 88 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113d2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113d2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d31:	c1 e0 05             	shl    $0x5,%eax
f0113d34:	83 ec 0c             	sub    $0xc,%esp
f0113d37:	68 02 0e 00 00       	push   $0xe02
f0113d3c:	50                   	push   %eax
f0113d3d:	68 00 00 00 40       	push   $0x40000000
f0113d42:	68 00 00 00 f0       	push   $0xf0000000
f0113d47:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d4a:	e8 a6 4a ff ff       	call   f01087f5 <share_chunk>
f0113d4f:	83 c4 20             	add    $0x20,%esp
f0113d52:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d55:	e8 b8 88 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113d5a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113d5d:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113d61:	75 1f                	jne    f0113d82 <test_share_chunk+0x279>
f0113d63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d66:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d69:	89 c1                	mov    %eax,%ecx
f0113d6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d6e:	c1 e0 05             	shl    $0x5,%eax
f0113d71:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113d74:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113d7b:	99                   	cltd   
f0113d7c:	f7 fb                	idiv   %ebx
f0113d7e:	39 c1                	cmp    %eax,%ecx
f0113d80:	74 28                	je     f0113daa <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d82:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d85:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d88:	83 ec 0c             	sub    $0xc,%esp
f0113d8b:	50                   	push   %eax
f0113d8c:	ff 75 a8             	pushl  -0x58(%ebp)
f0113d8f:	68 18 7d 13 f0       	push   $0xf0137d18
f0113d94:	68 71 03 00 00       	push   $0x371
f0113d99:	68 1a 69 13 f0       	push   $0xf013691a
f0113d9e:	e8 1b c6 fe ff       	call   f01003be <_warn>
f0113da3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113da6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113daa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dae:	74 04                	je     f0113db4 <test_share_chunk+0x2ab>
f0113db0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113db4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113db8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113dbf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113dc2:	c1 e0 05             	shl    $0x5,%eax
f0113dc5:	83 ec 08             	sub    $0x8,%esp
f0113dc8:	6a 02                	push   $0x2
f0113dca:	6a 07                	push   $0x7
f0113dcc:	6a 03                	push   $0x3
f0113dce:	68 07 0e 00 00       	push   $0xe07
f0113dd3:	68 03 0e 00 00       	push   $0xe03
f0113dd8:	6a ff                	push   $0xffffffff
f0113dda:	50                   	push   %eax
f0113ddb:	68 00 00 00 40       	push   $0x40000000
f0113de0:	68 00 00 00 f0       	push   $0xf0000000
f0113de5:	ff 75 cc             	pushl  -0x34(%ebp)
f0113de8:	e8 d5 2b 00 00       	call   f01169c2 <CCP>
f0113ded:	83 c4 30             	add    $0x30,%esp
f0113df0:	85 c0                	test   %eax,%eax
f0113df2:	75 25                	jne    f0113e19 <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113df4:	83 ec 04             	sub    $0x4,%esp
f0113df7:	68 50 7c 13 f0       	push   $0xf0137c50
f0113dfc:	68 7a 03 00 00       	push   $0x37a
f0113e01:	68 1a 69 13 f0       	push   $0xf013691a
f0113e06:	e8 b3 c5 fe ff       	call   f01003be <_warn>
f0113e0b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e0e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113e12:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113e19:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e1c:	89 d0                	mov    %edx,%eax
f0113e1e:	01 c0                	add    %eax,%eax
f0113e20:	01 d0                	add    %edx,%eax
f0113e22:	c1 e0 02             	shl    $0x2,%eax
f0113e25:	83 ec 08             	sub    $0x8,%esp
f0113e28:	6a 02                	push   $0x2
f0113e2a:	6a 07                	push   $0x7
f0113e2c:	6a 03                	push   $0x3
f0113e2e:	68 07 0e 00 00       	push   $0xe07
f0113e33:	68 03 0e 00 00       	push   $0xe03
f0113e38:	6a 02                	push   $0x2
f0113e3a:	50                   	push   %eax
f0113e3b:	68 00 00 00 40       	push   $0x40000000
f0113e40:	68 00 00 00 f0       	push   $0xf0000000
f0113e45:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e48:	e8 75 2b 00 00       	call   f01169c2 <CCP>
f0113e4d:	83 c4 30             	add    $0x30,%esp
f0113e50:	85 c0                	test   %eax,%eax
f0113e52:	75 1e                	jne    f0113e72 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e54:	83 ec 04             	sub    $0x4,%esp
f0113e57:	68 50 7c 13 f0       	push   $0xf0137c50
f0113e5c:	68 81 03 00 00       	push   $0x381
f0113e61:	68 1a 69 13 f0       	push   $0xf013691a
f0113e66:	e8 53 c5 fe ff       	call   f01003be <_warn>
f0113e6b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e72:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e76:	74 04                	je     f0113e7c <test_share_chunk+0x373>
f0113e78:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e7c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113e80:	b8 2c e6 2d f0       	mov    $0xf02de62c,%eax
f0113e85:	05 00 00 00 10       	add    $0x10000000,%eax
f0113e8a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113e8d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113e90:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113e95:	83 ec 08             	sub    $0x8,%esp
f0113e98:	6a 02                	push   $0x2
f0113e9a:	6a 07                	push   $0x7
f0113e9c:	6a 03                	push   $0x3
f0113e9e:	68 07 0e 00 00       	push   $0xe07
f0113ea3:	68 03 0e 00 00       	push   $0xe03
f0113ea8:	6a 02                	push   $0x2
f0113eaa:	50                   	push   %eax
f0113eab:	68 00 00 0a 40       	push   $0x400a0000
f0113eb0:	68 00 00 0a f0       	push   $0xf00a0000
f0113eb5:	ff 75 cc             	pushl  -0x34(%ebp)
f0113eb8:	e8 05 2b 00 00       	call   f01169c2 <CCP>
f0113ebd:	83 c4 30             	add    $0x30,%esp
f0113ec0:	85 c0                	test   %eax,%eax
f0113ec2:	75 1e                	jne    f0113ee2 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ec4:	83 ec 04             	sub    $0x4,%esp
f0113ec7:	68 50 7c 13 f0       	push   $0xf0137c50
f0113ecc:	68 8b 03 00 00       	push   $0x38b
f0113ed1:	68 1a 69 13 f0       	push   $0xf013691a
f0113ed6:	e8 e3 c4 fe ff       	call   f01003be <_warn>
f0113edb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ede:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ee2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ee6:	74 04                	je     f0113eec <test_share_chunk+0x3e3>
f0113ee8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113eec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113ef0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113ef4:	0f 84 a4 00 00 00    	je     f0113f9e <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113efa:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113f01:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f04:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113f07:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113f0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f11:	8a 00                	mov    (%eax),%al
f0113f13:	3c 41                	cmp    $0x41,%al
f0113f15:	75 09                	jne    f0113f20 <test_share_chunk+0x417>
f0113f17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f1a:	8a 00                	mov    (%eax),%al
f0113f1c:	3c 41                	cmp    $0x41,%al
f0113f1e:	74 1e                	je     f0113f3e <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f20:	83 ec 04             	sub    $0x4,%esp
f0113f23:	68 98 7c 13 f0       	push   $0xf0137c98
f0113f28:	68 98 03 00 00       	push   $0x398
f0113f2d:	68 1a 69 13 f0       	push   $0xf013691a
f0113f32:	e8 87 c4 fe ff       	call   f01003be <_warn>
f0113f37:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f3a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f3e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f42:	74 04                	je     f0113f48 <test_share_chunk+0x43f>
f0113f44:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f48:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113f4c:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113f53:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f56:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113f59:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113f60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f63:	8a 00                	mov    (%eax),%al
f0113f65:	3c 43                	cmp    $0x43,%al
f0113f67:	75 09                	jne    f0113f72 <test_share_chunk+0x469>
f0113f69:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f6c:	8a 00                	mov    (%eax),%al
f0113f6e:	3c 43                	cmp    $0x43,%al
f0113f70:	74 1e                	je     f0113f90 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f72:	83 ec 04             	sub    $0x4,%esp
f0113f75:	68 98 7c 13 f0       	push   $0xf0137c98
f0113f7a:	68 a3 03 00 00       	push   $0x3a3
f0113f7f:	68 1a 69 13 f0       	push   $0xf013691a
f0113f84:	e8 35 c4 fe ff       	call   f01003be <_warn>
f0113f89:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f8c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f90:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f94:	74 04                	je     f0113f9a <test_share_chunk+0x491>
f0113f96:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f9a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113f9e:	83 ec 0c             	sub    $0xc,%esp
f0113fa1:	68 a7 72 13 f0       	push   $0xf01372a7
f0113fa6:	e8 86 ce fe ff       	call   f0100e31 <cprintf>
f0113fab:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113fae:	83 ec 0c             	sub    $0xc,%esp
f0113fb1:	68 68 7d 13 f0       	push   $0xf0137d68
f0113fb6:	e8 76 ce fe ff       	call   f0100e31 <cprintf>
f0113fbb:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113fbe:	e8 4f 86 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113fc3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113fc6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fc9:	89 d0                	mov    %edx,%eax
f0113fcb:	c1 e0 03             	shl    $0x3,%eax
f0113fce:	01 d0                	add    %edx,%eax
f0113fd0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113fd7:	01 d0                	add    %edx,%eax
f0113fd9:	c1 e0 03             	shl    $0x3,%eax
f0113fdc:	83 ec 0c             	sub    $0xc,%esp
f0113fdf:	6a 06                	push   $0x6
f0113fe1:	50                   	push   %eax
f0113fe2:	6a 00                	push   $0x0
f0113fe4:	68 00 00 00 40       	push   $0x40000000
f0113fe9:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fec:	e8 04 48 ff ff       	call   f01087f5 <share_chunk>
f0113ff1:	83 c4 20             	add    $0x20,%esp
f0113ff4:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ff7:	e8 16 86 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0113ffc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113fff:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114003:	75 0b                	jne    f0114010 <test_share_chunk+0x507>
f0114005:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114008:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011400b:	83 f8 01             	cmp    $0x1,%eax
f011400e:	74 28                	je     f0114038 <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114010:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114013:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114016:	83 ec 0c             	sub    $0xc,%esp
f0114019:	50                   	push   %eax
f011401a:	ff 75 a0             	pushl  -0x60(%ebp)
f011401d:	68 18 7d 13 f0       	push   $0xf0137d18
f0114022:	68 b9 03 00 00       	push   $0x3b9
f0114027:	68 1a 69 13 f0       	push   $0xf013691a
f011402c:	e8 8d c3 fe ff       	call   f01003be <_warn>
f0114031:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114034:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114038:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011403c:	74 04                	je     f0114042 <test_share_chunk+0x539>
f011403e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114042:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114046:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011404d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114050:	05 00 80 02 00       	add    $0x28000,%eax
f0114055:	c1 e0 02             	shl    $0x2,%eax
f0114058:	83 ec 08             	sub    $0x8,%esp
f011405b:	6a 02                	push   $0x2
f011405d:	6a 07                	push   $0x7
f011405f:	6a 03                	push   $0x3
f0114061:	6a 07                	push   $0x7
f0114063:	6a 07                	push   $0x7
f0114065:	6a ff                	push   $0xffffffff
f0114067:	50                   	push   %eax
f0114068:	6a 00                	push   $0x0
f011406a:	68 00 00 00 40       	push   $0x40000000
f011406f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114072:	e8 4b 29 00 00       	call   f01169c2 <CCP>
f0114077:	83 c4 30             	add    $0x30,%esp
f011407a:	85 c0                	test   %eax,%eax
f011407c:	75 25                	jne    f01140a3 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011407e:	83 ec 04             	sub    $0x4,%esp
f0114081:	68 50 7c 13 f0       	push   $0xf0137c50
f0114086:	68 c2 03 00 00       	push   $0x3c2
f011408b:	68 1a 69 13 f0       	push   $0xf013691a
f0114090:	e8 29 c3 fe ff       	call   f01003be <_warn>
f0114095:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114098:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011409c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01140a3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140a6:	89 d0                	mov    %edx,%eax
f01140a8:	01 c0                	add    %eax,%eax
f01140aa:	01 d0                	add    %edx,%eax
f01140ac:	c1 e0 02             	shl    $0x2,%eax
f01140af:	83 ec 08             	sub    $0x8,%esp
f01140b2:	6a 02                	push   $0x2
f01140b4:	6a 07                	push   $0x7
f01140b6:	6a 03                	push   $0x3
f01140b8:	6a 07                	push   $0x7
f01140ba:	6a 07                	push   $0x7
f01140bc:	6a 03                	push   $0x3
f01140be:	50                   	push   %eax
f01140bf:	6a 00                	push   $0x0
f01140c1:	68 00 00 00 40       	push   $0x40000000
f01140c6:	ff 75 cc             	pushl  -0x34(%ebp)
f01140c9:	e8 f4 28 00 00       	call   f01169c2 <CCP>
f01140ce:	83 c4 30             	add    $0x30,%esp
f01140d1:	85 c0                	test   %eax,%eax
f01140d3:	75 1e                	jne    f01140f3 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140d5:	83 ec 04             	sub    $0x4,%esp
f01140d8:	68 50 7c 13 f0       	push   $0xf0137c50
f01140dd:	68 c9 03 00 00       	push   $0x3c9
f01140e2:	68 1a 69 13 f0       	push   $0xf013691a
f01140e7:	e8 d2 c2 fe ff       	call   f01003be <_warn>
f01140ec:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140f7:	74 04                	je     f01140fd <test_share_chunk+0x5f4>
f01140f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114101:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114104:	89 d0                	mov    %edx,%eax
f0114106:	01 c0                	add    %eax,%eax
f0114108:	01 d0                	add    %edx,%eax
f011410a:	c1 e0 02             	shl    $0x2,%eax
f011410d:	f7 d8                	neg    %eax
f011410f:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114114:	83 ec 08             	sub    $0x8,%esp
f0114117:	6a 02                	push   $0x2
f0114119:	6a 07                	push   $0x7
f011411b:	6a 03                	push   $0x3
f011411d:	6a 07                	push   $0x7
f011411f:	6a 07                	push   $0x7
f0114121:	6a 02                	push   $0x2
f0114123:	50                   	push   %eax
f0114124:	68 00 30 00 00       	push   $0x3000
f0114129:	68 00 30 00 40       	push   $0x40003000
f011412e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114131:	e8 8c 28 00 00       	call   f01169c2 <CCP>
f0114136:	83 c4 30             	add    $0x30,%esp
f0114139:	85 c0                	test   %eax,%eax
f011413b:	75 1e                	jne    f011415b <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011413d:	83 ec 04             	sub    $0x4,%esp
f0114140:	68 50 7c 13 f0       	push   $0xf0137c50
f0114145:	68 d1 03 00 00       	push   $0x3d1
f011414a:	68 1a 69 13 f0       	push   $0xf013691a
f011414f:	e8 6a c2 fe ff       	call   f01003be <_warn>
f0114154:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114157:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011415b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011415f:	74 04                	je     f0114165 <test_share_chunk+0x65c>
f0114161:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114165:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114169:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011416c:	c1 e0 02             	shl    $0x2,%eax
f011416f:	83 ec 08             	sub    $0x8,%esp
f0114172:	6a 02                	push   $0x2
f0114174:	6a 07                	push   $0x7
f0114176:	6a 03                	push   $0x3
f0114178:	6a 07                	push   $0x7
f011417a:	6a 07                	push   $0x7
f011417c:	6a 03                	push   $0x3
f011417e:	50                   	push   %eax
f011417f:	68 00 00 0a 00       	push   $0xa0000
f0114184:	68 00 00 0a 40       	push   $0x400a0000
f0114189:	ff 75 cc             	pushl  -0x34(%ebp)
f011418c:	e8 31 28 00 00       	call   f01169c2 <CCP>
f0114191:	83 c4 30             	add    $0x30,%esp
f0114194:	85 c0                	test   %eax,%eax
f0114196:	75 1e                	jne    f01141b6 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114198:	83 ec 04             	sub    $0x4,%esp
f011419b:	68 50 7c 13 f0       	push   $0xf0137c50
f01141a0:	68 d9 03 00 00       	push   $0x3d9
f01141a5:	68 1a 69 13 f0       	push   $0xf013691a
f01141aa:	e8 0f c2 fe ff       	call   f01003be <_warn>
f01141af:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ba:	74 04                	je     f01141c0 <test_share_chunk+0x6b7>
f01141bc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01141c4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01141c8:	0f 84 92 00 00 00    	je     f0114260 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f01141ce:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01141d5:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01141dc:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01141e3:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01141ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01141ed:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01141f0:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01141f7:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01141fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114201:	8a 00                	mov    (%eax),%al
f0114203:	3c 41                	cmp    $0x41,%al
f0114205:	75 2d                	jne    f0114234 <test_share_chunk+0x72b>
f0114207:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011420a:	8a 00                	mov    (%eax),%al
f011420c:	3c 41                	cmp    $0x41,%al
f011420e:	75 24                	jne    f0114234 <test_share_chunk+0x72b>
f0114210:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114213:	8a 00                	mov    (%eax),%al
f0114215:	3c 41                	cmp    $0x41,%al
f0114217:	75 1b                	jne    f0114234 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114219:	8b 45 98             	mov    -0x68(%ebp),%eax
f011421c:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011421e:	3c 44                	cmp    $0x44,%al
f0114220:	75 12                	jne    f0114234 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114222:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114225:	8a 00                	mov    (%eax),%al
f0114227:	3c 44                	cmp    $0x44,%al
f0114229:	75 09                	jne    f0114234 <test_share_chunk+0x72b>
f011422b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011422e:	8a 00                	mov    (%eax),%al
f0114230:	3c 44                	cmp    $0x44,%al
f0114232:	74 1e                	je     f0114252 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114234:	83 ec 04             	sub    $0x4,%esp
f0114237:	68 98 7c 13 f0       	push   $0xf0137c98
f011423c:	68 eb 03 00 00       	push   $0x3eb
f0114241:	68 1a 69 13 f0       	push   $0xf013691a
f0114246:	e8 73 c1 fe ff       	call   f01003be <_warn>
f011424b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011424e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114252:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114256:	74 04                	je     f011425c <test_share_chunk+0x753>
f0114258:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011425c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114260:	83 ec 0c             	sub    $0xc,%esp
f0114263:	68 0a 73 13 f0       	push   $0xf013730a
f0114268:	e8 c4 cb fe ff       	call   f0100e31 <cprintf>
f011426d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114270:	83 ec 0c             	sub    $0xc,%esp
f0114273:	68 a4 7d 13 f0       	push   $0xf0137da4
f0114278:	e8 b4 cb fe ff       	call   f0100e31 <cprintf>
f011427d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114280:	e8 8d 83 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114285:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114288:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011428b:	89 d0                	mov    %edx,%eax
f011428d:	01 c0                	add    %eax,%eax
f011428f:	01 d0                	add    %edx,%eax
f0114291:	01 c0                	add    %eax,%eax
f0114293:	01 d0                	add    %edx,%eax
f0114295:	83 ec 0c             	sub    $0xc,%esp
f0114298:	6a 04                	push   $0x4
f011429a:	50                   	push   %eax
f011429b:	68 00 fc 3f 00       	push   $0x3ffc00
f01142a0:	68 00 fc 09 00       	push   $0x9fc00
f01142a5:	ff 75 cc             	pushl  -0x34(%ebp)
f01142a8:	e8 48 45 ff ff       	call   f01087f5 <share_chunk>
f01142ad:	83 c4 20             	add    $0x20,%esp
f01142b0:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01142b3:	e8 5a 83 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01142b8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01142bb:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01142bf:	75 0b                	jne    f01142cc <test_share_chunk+0x7c3>
f01142c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142c7:	83 f8 01             	cmp    $0x1,%eax
f01142ca:	74 28                	je     f01142f4 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01142cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142cf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142d2:	83 ec 0c             	sub    $0xc,%esp
f01142d5:	50                   	push   %eax
f01142d6:	ff 75 8c             	pushl  -0x74(%ebp)
f01142d9:	68 18 7d 13 f0       	push   $0xf0137d18
f01142de:	68 01 04 00 00       	push   $0x401
f01142e3:	68 1a 69 13 f0       	push   $0xf013691a
f01142e8:	e8 d1 c0 fe ff       	call   f01003be <_warn>
f01142ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01142f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f8:	74 04                	je     f01142fe <test_share_chunk+0x7f5>
f01142fa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01142fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114302:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114309:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011430c:	89 d0                	mov    %edx,%eax
f011430e:	01 c0                	add    %eax,%eax
f0114310:	01 d0                	add    %edx,%eax
f0114312:	c1 e0 02             	shl    $0x2,%eax
f0114315:	83 ec 08             	sub    $0x8,%esp
f0114318:	6a 02                	push   $0x2
f011431a:	6a 07                	push   $0x7
f011431c:	6a 07                	push   $0x7
f011431e:	6a 07                	push   $0x7
f0114320:	6a 05                	push   $0x5
f0114322:	6a ff                	push   $0xffffffff
f0114324:	50                   	push   %eax
f0114325:	68 00 f0 3f 00       	push   $0x3ff000
f011432a:	68 00 f0 09 00       	push   $0x9f000
f011432f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114332:	e8 8b 26 00 00       	call   f01169c2 <CCP>
f0114337:	83 c4 30             	add    $0x30,%esp
f011433a:	85 c0                	test   %eax,%eax
f011433c:	75 25                	jne    f0114363 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011433e:	83 ec 04             	sub    $0x4,%esp
f0114341:	68 50 7c 13 f0       	push   $0xf0137c50
f0114346:	68 0a 04 00 00       	push   $0x40a
f011434b:	68 1a 69 13 f0       	push   $0xf013691a
f0114350:	e8 69 c0 fe ff       	call   f01003be <_warn>
f0114355:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114358:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011435c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114363:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114367:	74 04                	je     f011436d <test_share_chunk+0x864>
f0114369:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011436d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114371:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114374:	c1 e0 02             	shl    $0x2,%eax
f0114377:	83 ec 08             	sub    $0x8,%esp
f011437a:	6a 02                	push   $0x2
f011437c:	6a 07                	push   $0x7
f011437e:	6a 07                	push   $0x7
f0114380:	6a 07                	push   $0x7
f0114382:	6a 05                	push   $0x5
f0114384:	6a 03                	push   $0x3
f0114386:	50                   	push   %eax
f0114387:	68 00 f0 3f 00       	push   $0x3ff000
f011438c:	68 00 f0 09 00       	push   $0x9f000
f0114391:	ff 75 cc             	pushl  -0x34(%ebp)
f0114394:	e8 29 26 00 00       	call   f01169c2 <CCP>
f0114399:	83 c4 30             	add    $0x30,%esp
f011439c:	85 c0                	test   %eax,%eax
f011439e:	75 1e                	jne    f01143be <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143a0:	83 ec 04             	sub    $0x4,%esp
f01143a3:	68 50 7c 13 f0       	push   $0xf0137c50
f01143a8:	68 13 04 00 00       	push   $0x413
f01143ad:	68 1a 69 13 f0       	push   $0xf013691a
f01143b2:	e8 07 c0 fe ff       	call   f01003be <_warn>
f01143b7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143c2:	74 04                	je     f01143c8 <test_share_chunk+0x8bf>
f01143c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01143cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143cf:	c1 e0 03             	shl    $0x3,%eax
f01143d2:	83 ec 08             	sub    $0x8,%esp
f01143d5:	6a 02                	push   $0x2
f01143d7:	6a 07                	push   $0x7
f01143d9:	6a 07                	push   $0x7
f01143db:	6a 07                	push   $0x7
f01143dd:	6a 05                	push   $0x5
f01143df:	6a 04                	push   $0x4
f01143e1:	50                   	push   %eax
f01143e2:	68 00 00 40 00       	push   $0x400000
f01143e7:	68 00 00 0a 00       	push   $0xa0000
f01143ec:	ff 75 cc             	pushl  -0x34(%ebp)
f01143ef:	e8 ce 25 00 00       	call   f01169c2 <CCP>
f01143f4:	83 c4 30             	add    $0x30,%esp
f01143f7:	85 c0                	test   %eax,%eax
f01143f9:	75 1e                	jne    f0114419 <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143fb:	83 ec 04             	sub    $0x4,%esp
f01143fe:	68 50 7c 13 f0       	push   $0xf0137c50
f0114403:	68 1b 04 00 00       	push   $0x41b
f0114408:	68 1a 69 13 f0       	push   $0xf013691a
f011440d:	e8 ac bf fe ff       	call   f01003be <_warn>
f0114412:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114415:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114419:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011441d:	74 04                	je     f0114423 <test_share_chunk+0x91a>
f011441f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114423:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114427:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011442b:	0f 84 b2 00 00 00    	je     f01144e3 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0114431:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0114438:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f011443f:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114446:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f011444d:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114454:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011445b:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114462:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114469:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011446c:	8a 00                	mov    (%eax),%al
f011446e:	3c 44                	cmp    $0x44,%al
f0114470:	75 45                	jne    f01144b7 <test_share_chunk+0x9ae>
f0114472:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114475:	8a 00                	mov    (%eax),%al
f0114477:	3c 44                	cmp    $0x44,%al
f0114479:	75 3c                	jne    f01144b7 <test_share_chunk+0x9ae>
f011447b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011447e:	8a 00                	mov    (%eax),%al
f0114480:	3c 44                	cmp    $0x44,%al
f0114482:	75 33                	jne    f01144b7 <test_share_chunk+0x9ae>
f0114484:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114487:	8a 00                	mov    (%eax),%al
f0114489:	3c 44                	cmp    $0x44,%al
f011448b:	75 2a                	jne    f01144b7 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011448d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114490:	8a 10                	mov    (%eax),%dl
f0114492:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114495:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114497:	38 c2                	cmp    %al,%dl
f0114499:	75 1c                	jne    f01144b7 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011449b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011449e:	8a 10                	mov    (%eax),%dl
f01144a0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01144a3:	8a 00                	mov    (%eax),%al
f01144a5:	38 c2                	cmp    %al,%dl
f01144a7:	75 0e                	jne    f01144b7 <test_share_chunk+0x9ae>
f01144a9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01144ac:	8a 10                	mov    (%eax),%dl
f01144ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01144b1:	8a 00                	mov    (%eax),%al
f01144b3:	38 c2                	cmp    %al,%dl
f01144b5:	74 1e                	je     f01144d5 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01144b7:	83 ec 04             	sub    $0x4,%esp
f01144ba:	68 98 7c 13 f0       	push   $0xf0137c98
f01144bf:	68 30 04 00 00       	push   $0x430
f01144c4:	68 1a 69 13 f0       	push   $0xf013691a
f01144c9:	e8 f0 be fe ff       	call   f01003be <_warn>
f01144ce:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01144d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01144d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144d9:	74 04                	je     f01144df <test_share_chunk+0x9d6>
f01144db:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01144df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01144e3:	83 ec 0c             	sub    $0xc,%esp
f01144e6:	68 dc 7d 13 f0       	push   $0xf0137ddc
f01144eb:	e8 41 c9 fe ff       	call   f0100e31 <cprintf>
f01144f0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01144f3:	83 ec 08             	sub    $0x8,%esp
f01144f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01144f9:	68 ec 7d 13 f0       	push   $0xf0137dec
f01144fe:	e8 2e c9 fe ff       	call   f0100e31 <cprintf>
f0114503:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114506:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011450a:	75 10                	jne    f011451c <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011450c:	83 ec 0c             	sub    $0xc,%esp
f011450f:	68 1c 7e 13 f0       	push   $0xf0137e1c
f0114514:	e8 18 c9 fe ff       	call   f0100e31 <cprintf>
f0114519:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011451c:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0114521:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114524:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114527:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011452a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011452f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114532:	5b                   	pop    %ebx
f0114533:	5e                   	pop    %esi
f0114534:	5f                   	pop    %edi
f0114535:	5d                   	pop    %ebp
f0114536:	c3                   	ret    

f0114537 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114537:	55                   	push   %ebp
f0114538:	89 e5                	mov    %esp,%ebp
f011453a:	57                   	push   %edi
f011453b:	56                   	push   %esi
f011453c:	53                   	push   %ebx
f011453d:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114543:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114549:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f011454e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114553:	89 c7                	mov    %eax,%edi
f0114555:	89 de                	mov    %ebx,%esi
f0114557:	89 d1                	mov    %edx,%ecx
f0114559:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011455b:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114561:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114566:	b0 00                	mov    $0x0,%al
f0114568:	89 d7                	mov    %edx,%edi
f011456a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011456c:	6a 00                	push   $0x0
f011456e:	6a 0a                	push   $0xa
f0114570:	6a 14                	push   $0x14
f0114572:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114578:	50                   	push   %eax
f0114579:	e8 81 43 ff ff       	call   f01088ff <env_create>
f011457e:	83 c4 10             	add    $0x10,%esp
f0114581:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114584:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114587:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011458d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114590:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114593:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114599:	89 45 90             	mov    %eax,-0x70(%ebp)
f011459c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011459f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01145a2:	83 ec 0c             	sub    $0xc,%esp
f01145a5:	ff 75 cc             	pushl  -0x34(%ebp)
f01145a8:	e8 e1 23 00 00       	call   f011698e <ClearUserSpace>
f01145ad:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01145b0:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01145b7:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01145be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f01145c5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01145c9:	83 ec 0c             	sub    $0xc,%esp
f01145cc:	68 58 7e 13 f0       	push   $0xf0137e58
f01145d1:	e8 5b c8 fe ff       	call   f0100e31 <cprintf>
f01145d6:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01145d9:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01145e0:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f01145e7:	eb 03                	jmp    f01145ec <test_allocate_chunk+0xb5>
f01145e9:	ff 4d e4             	decl   -0x1c(%ebp)
f01145ec:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01145f3:	76 09                	jbe    f01145fe <test_allocate_chunk+0xc7>
f01145f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01145f8:	8a 00                	mov    (%eax),%al
f01145fa:	84 c0                	test   %al,%al
f01145fc:	74 eb                	je     f01145e9 <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f01145fe:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114605:	75 06                	jne    f011460d <test_allocate_chunk+0xd6>
f0114607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011460a:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f011460d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114610:	8a 00                	mov    (%eax),%al
f0114612:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114618:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011461b:	8a 00                	mov    (%eax),%al
f011461d:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114626:	8a 00                	mov    (%eax),%al
f0114628:	0f be c0             	movsbl %al,%eax
f011462b:	83 ec 08             	sub    $0x8,%esp
f011462e:	50                   	push   %eax
f011462f:	68 82 7e 13 f0       	push   $0xf0137e82
f0114634:	e8 f8 c7 fe ff       	call   f0100e31 <cprintf>
f0114639:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f011463c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011463f:	8a 00                	mov    (%eax),%al
f0114641:	0f be c0             	movsbl %al,%eax
f0114644:	83 ec 08             	sub    $0x8,%esp
f0114647:	50                   	push   %eax
f0114648:	68 8e 7e 13 f0       	push   $0xf0137e8e
f011464d:	e8 df c7 fe ff       	call   f0100e31 <cprintf>
f0114652:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114655:	83 ec 08             	sub    $0x8,%esp
f0114658:	68 00 f0 bf ef       	push   $0xefbff000
f011465d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114660:	e8 90 22 00 00       	call   f01168f5 <GP>
f0114665:	83 c4 10             	add    $0x10,%esp
f0114668:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011466b:	e8 a2 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114670:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114673:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114676:	c1 e0 02             	shl    $0x2,%eax
f0114679:	6a 02                	push   $0x2
f011467b:	50                   	push   %eax
f011467c:	68 00 f0 bf ef       	push   $0xefbff000
f0114681:	ff 75 cc             	pushl  -0x34(%ebp)
f0114684:	e8 86 41 ff ff       	call   f010880f <allocate_chunk>
f0114689:	83 c4 10             	add    $0x10,%esp
f011468c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011468f:	e8 7e 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114694:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114697:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011469b:	75 08                	jne    f01146a5 <test_allocate_chunk+0x16e>
f011469d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146a0:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01146a3:	74 2a                	je     f01146cf <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01146a5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146a8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146ab:	83 ec 08             	sub    $0x8,%esp
f01146ae:	6a 00                	push   $0x0
f01146b0:	50                   	push   %eax
f01146b1:	ff 75 b0             	pushl  -0x50(%ebp)
f01146b4:	68 9c 7e 13 f0       	push   $0xf0137e9c
f01146b9:	68 70 04 00 00       	push   $0x470
f01146be:	68 1a 69 13 f0       	push   $0xf013691a
f01146c3:	e8 f6 bc fe ff       	call   f01003be <_warn>
f01146c8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146cb:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01146cf:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01146d3:	74 04                	je     f01146d9 <test_allocate_chunk+0x1a2>
f01146d5:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01146d9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01146dd:	e8 30 7f ff ff       	call   f010c612 <sys_calculate_free_frames>
f01146e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01146e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146e8:	01 c0                	add    %eax,%eax
f01146ea:	89 c1                	mov    %eax,%ecx
f01146ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146ef:	89 d0                	mov    %edx,%eax
f01146f1:	c1 e0 02             	shl    $0x2,%eax
f01146f4:	01 d0                	add    %edx,%eax
f01146f6:	f7 d8                	neg    %eax
f01146f8:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01146fd:	6a 02                	push   $0x2
f01146ff:	51                   	push   %ecx
f0114700:	50                   	push   %eax
f0114701:	ff 75 cc             	pushl  -0x34(%ebp)
f0114704:	e8 06 41 ff ff       	call   f010880f <allocate_chunk>
f0114709:	83 c4 10             	add    $0x10,%esp
f011470c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011470f:	e8 fe 7e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114714:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114717:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011471b:	75 08                	jne    f0114725 <test_allocate_chunk+0x1ee>
f011471d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114720:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114723:	74 2a                	je     f011474f <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114725:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114728:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011472b:	83 ec 08             	sub    $0x8,%esp
f011472e:	6a 00                	push   $0x0
f0114730:	50                   	push   %eax
f0114731:	ff 75 b0             	pushl  -0x50(%ebp)
f0114734:	68 9c 7e 13 f0       	push   $0xf0137e9c
f0114739:	68 7e 04 00 00       	push   $0x47e
f011473e:	68 1a 69 13 f0       	push   $0xf013691a
f0114743:	e8 76 bc fe ff       	call   f01003be <_warn>
f0114748:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011474b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011474f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114753:	74 04                	je     f0114759 <test_allocate_chunk+0x222>
f0114755:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114759:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f011475d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114760:	c1 e0 02             	shl    $0x2,%eax
f0114763:	83 ec 08             	sub    $0x8,%esp
f0114766:	6a 03                	push   $0x3
f0114768:	6a 00                	push   $0x0
f011476a:	6a 00                	push   $0x0
f011476c:	68 ff 0f 00 00       	push   $0xfff
f0114771:	ff 75 b8             	pushl  -0x48(%ebp)
f0114774:	6a 01                	push   $0x1
f0114776:	50                   	push   %eax
f0114777:	68 00 f0 bf ef       	push   $0xefbff000
f011477c:	6a 00                	push   $0x0
f011477e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114781:	e8 3c 22 00 00       	call   f01169c2 <CCP>
f0114786:	83 c4 30             	add    $0x30,%esp
f0114789:	85 c0                	test   %eax,%eax
f011478b:	75 1e                	jne    f01147ab <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011478d:	83 ec 04             	sub    $0x4,%esp
f0114790:	68 04 7f 13 f0       	push   $0xf0137f04
f0114795:	68 86 04 00 00       	push   $0x486
f011479a:	68 1a 69 13 f0       	push   $0xf013691a
f011479f:	e8 1a bc fe ff       	call   f01003be <_warn>
f01147a4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147a7:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01147ab:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01147af:	74 04                	je     f01147b5 <test_allocate_chunk+0x27e>
f01147b1:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01147b5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01147b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01147bc:	8a 10                	mov    (%eax),%dl
f01147be:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01147c4:	38 c2                	cmp    %al,%dl
f01147c6:	75 0f                	jne    f01147d7 <test_allocate_chunk+0x2a0>
f01147c8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147cb:	8a 10                	mov    (%eax),%dl
f01147cd:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01147d3:	38 c2                	cmp    %al,%dl
f01147d5:	74 1e                	je     f01147f5 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01147d7:	83 ec 04             	sub    $0x4,%esp
f01147da:	68 50 7f 13 f0       	push   $0xf0137f50
f01147df:	68 8e 04 00 00       	push   $0x48e
f01147e4:	68 1a 69 13 f0       	push   $0xf013691a
f01147e9:	e8 d0 bb fe ff       	call   f01003be <_warn>
f01147ee:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147f1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01147f5:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01147f9:	74 04                	je     f01147ff <test_allocate_chunk+0x2c8>
f01147fb:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01147ff:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114803:	83 ec 0c             	sub    $0xc,%esp
f0114806:	68 cd 7c 13 f0       	push   $0xf0137ccd
f011480b:	e8 21 c6 fe ff       	call   f0100e31 <cprintf>
f0114810:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114813:	83 ec 0c             	sub    $0xc,%esp
f0114816:	68 88 7f 13 f0       	push   $0xf0137f88
f011481b:	e8 11 c6 fe ff       	call   f0100e31 <cprintf>
f0114820:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114823:	e8 ea 7d ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114828:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011482b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011482e:	c1 e0 05             	shl    $0x5,%eax
f0114831:	68 02 0e 00 00       	push   $0xe02
f0114836:	50                   	push   %eax
f0114837:	6a 00                	push   $0x0
f0114839:	ff 75 cc             	pushl  -0x34(%ebp)
f011483c:	e8 ce 3f ff ff       	call   f010880f <allocate_chunk>
f0114841:	83 c4 10             	add    $0x10,%esp
f0114844:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114847:	e8 c6 7d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011484c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f011484f:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114853:	75 36                	jne    f011488b <test_allocate_chunk+0x354>
f0114855:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114858:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011485b:	89 c1                	mov    %eax,%ecx
f011485d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114860:	c1 e0 05             	shl    $0x5,%eax
f0114863:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114866:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011486d:	99                   	cltd   
f011486e:	f7 fe                	idiv   %esi
f0114870:	89 c3                	mov    %eax,%ebx
f0114872:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114875:	c1 e0 05             	shl    $0x5,%eax
f0114878:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011487b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114882:	99                   	cltd   
f0114883:	f7 fe                	idiv   %esi
f0114885:	01 d8                	add    %ebx,%eax
f0114887:	39 c1                	cmp    %eax,%ecx
f0114889:	74 54                	je     f01148df <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f011488b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011488e:	c1 e0 05             	shl    $0x5,%eax
f0114891:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114894:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011489b:	99                   	cltd   
f011489c:	f7 ff                	idiv   %edi
f011489e:	89 c1                	mov    %eax,%ecx
f01148a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148a3:	c1 e0 05             	shl    $0x5,%eax
f01148a6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01148a9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01148b0:	99                   	cltd   
f01148b1:	f7 fe                	idiv   %esi
f01148b3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01148b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148b9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148bc:	83 ec 08             	sub    $0x8,%esp
f01148bf:	52                   	push   %edx
f01148c0:	50                   	push   %eax
f01148c1:	ff 75 a8             	pushl  -0x58(%ebp)
f01148c4:	68 c8 7f 13 f0       	push   $0xf0137fc8
f01148c9:	68 a3 04 00 00       	push   $0x4a3
f01148ce:	68 1a 69 13 f0       	push   $0xf013691a
f01148d3:	e8 e6 ba fe ff       	call   f01003be <_warn>
f01148d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148db:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01148df:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01148e3:	74 04                	je     f01148e9 <test_allocate_chunk+0x3b2>
f01148e5:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01148e9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01148ed:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01148f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148f7:	c1 e0 05             	shl    $0x5,%eax
f01148fa:	83 ec 08             	sub    $0x8,%esp
f01148fd:	6a 03                	push   $0x3
f01148ff:	6a 00                	push   $0x0
f0114901:	6a 00                	push   $0x0
f0114903:	68 07 0e 00 00       	push   $0xe07
f0114908:	68 03 0e 00 00       	push   $0xe03
f011490d:	6a 01                	push   $0x1
f011490f:	50                   	push   %eax
f0114910:	6a 00                	push   $0x0
f0114912:	6a 00                	push   $0x0
f0114914:	ff 75 cc             	pushl  -0x34(%ebp)
f0114917:	e8 a6 20 00 00       	call   f01169c2 <CCP>
f011491c:	83 c4 30             	add    $0x30,%esp
f011491f:	85 c0                	test   %eax,%eax
f0114921:	75 25                	jne    f0114948 <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114923:	83 ec 04             	sub    $0x4,%esp
f0114926:	68 04 7f 13 f0       	push   $0xf0137f04
f011492b:	68 ac 04 00 00       	push   $0x4ac
f0114930:	68 1a 69 13 f0       	push   $0xf013691a
f0114935:	e8 84 ba fe ff       	call   f01003be <_warn>
f011493a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011493d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114941:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114948:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011494c:	74 04                	je     f0114952 <test_allocate_chunk+0x41b>
f011494e:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114952:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114956:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011495a:	74 5a                	je     f01149b6 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f011495c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011495f:	01 c0                	add    %eax,%eax
f0114961:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114964:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114967:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f011496a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011496d:	01 c0                	add    %eax,%eax
f011496f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114972:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114975:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114978:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011497b:	8a 00                	mov    (%eax),%al
f011497d:	3c 4b                	cmp    $0x4b,%al
f011497f:	75 09                	jne    f011498a <test_allocate_chunk+0x453>
f0114981:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114984:	8a 00                	mov    (%eax),%al
f0114986:	3c 4d                	cmp    $0x4d,%al
f0114988:	74 1e                	je     f01149a8 <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011498a:	83 ec 04             	sub    $0x4,%esp
f011498d:	68 50 7f 13 f0       	push   $0xf0137f50
f0114992:	68 ba 04 00 00       	push   $0x4ba
f0114997:	68 1a 69 13 f0       	push   $0xf013691a
f011499c:	e8 1d ba fe ff       	call   f01003be <_warn>
f01149a1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01149a4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f01149a8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01149ac:	74 04                	je     f01149b2 <test_allocate_chunk+0x47b>
f01149ae:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01149b2:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01149b6:	83 ec 0c             	sub    $0xc,%esp
f01149b9:	68 a7 72 13 f0       	push   $0xf01372a7
f01149be:	e8 6e c4 fe ff       	call   f0100e31 <cprintf>
f01149c3:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01149c6:	83 ec 0c             	sub    $0xc,%esp
f01149c9:	68 28 80 13 f0       	push   $0xf0138028
f01149ce:	e8 5e c4 fe ff       	call   f0100e31 <cprintf>
f01149d3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149d6:	e8 37 7c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01149db:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01149de:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149e1:	c1 e0 06             	shl    $0x6,%eax
f01149e4:	89 c2                	mov    %eax,%edx
f01149e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149e9:	c1 e0 05             	shl    $0x5,%eax
f01149ec:	6a 00                	push   $0x0
f01149ee:	52                   	push   %edx
f01149ef:	50                   	push   %eax
f01149f0:	ff 75 cc             	pushl  -0x34(%ebp)
f01149f3:	e8 17 3e ff ff       	call   f010880f <allocate_chunk>
f01149f8:	83 c4 10             	add    $0x10,%esp
f01149fb:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149fe:	e8 0f 7c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114a03:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114a06:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114a0a:	75 36                	jne    f0114a42 <test_allocate_chunk+0x50b>
f0114a0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a0f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a12:	89 c1                	mov    %eax,%ecx
f0114a14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a17:	c1 e0 06             	shl    $0x6,%eax
f0114a1a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114a1d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114a24:	99                   	cltd   
f0114a25:	f7 ff                	idiv   %edi
f0114a27:	89 c3                	mov    %eax,%ebx
f0114a29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a2c:	c1 e0 06             	shl    $0x6,%eax
f0114a2f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a32:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114a39:	99                   	cltd   
f0114a3a:	f7 fe                	idiv   %esi
f0114a3c:	01 d8                	add    %ebx,%eax
f0114a3e:	39 c1                	cmp    %eax,%ecx
f0114a40:	74 54                	je     f0114a96 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114a42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a45:	c1 e0 06             	shl    $0x6,%eax
f0114a48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114a4b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a52:	99                   	cltd   
f0114a53:	f7 fb                	idiv   %ebx
f0114a55:	89 c1                	mov    %eax,%ecx
f0114a57:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a5a:	c1 e0 06             	shl    $0x6,%eax
f0114a5d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a60:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114a67:	99                   	cltd   
f0114a68:	f7 ff                	idiv   %edi
f0114a6a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114a6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a70:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a73:	83 ec 08             	sub    $0x8,%esp
f0114a76:	52                   	push   %edx
f0114a77:	50                   	push   %eax
f0114a78:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114a7b:	68 c8 7f 13 f0       	push   $0xf0137fc8
f0114a80:	68 d0 04 00 00       	push   $0x4d0
f0114a85:	68 1a 69 13 f0       	push   $0xf013691a
f0114a8a:	e8 2f b9 fe ff       	call   f01003be <_warn>
f0114a8f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a92:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114a96:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a9a:	74 04                	je     f0114aa0 <test_allocate_chunk+0x569>
f0114a9c:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114aa0:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114aa4:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114aab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114aae:	c1 e0 06             	shl    $0x6,%eax
f0114ab1:	89 c2                	mov    %eax,%edx
f0114ab3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ab6:	c1 e0 05             	shl    $0x5,%eax
f0114ab9:	83 ec 08             	sub    $0x8,%esp
f0114abc:	6a 03                	push   $0x3
f0114abe:	6a 00                	push   $0x0
f0114ac0:	6a 00                	push   $0x0
f0114ac2:	68 07 0e 00 00       	push   $0xe07
f0114ac7:	6a 01                	push   $0x1
f0114ac9:	6a 01                	push   $0x1
f0114acb:	52                   	push   %edx
f0114acc:	50                   	push   %eax
f0114acd:	6a 00                	push   $0x0
f0114acf:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ad2:	e8 eb 1e 00 00       	call   f01169c2 <CCP>
f0114ad7:	83 c4 30             	add    $0x30,%esp
f0114ada:	85 c0                	test   %eax,%eax
f0114adc:	75 25                	jne    f0114b03 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114ade:	83 ec 04             	sub    $0x4,%esp
f0114ae1:	68 04 7f 13 f0       	push   $0xf0137f04
f0114ae6:	68 d9 04 00 00       	push   $0x4d9
f0114aeb:	68 1a 69 13 f0       	push   $0xf013691a
f0114af0:	e8 c9 b8 fe ff       	call   f01003be <_warn>
f0114af5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114af8:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114afc:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114b03:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b07:	74 04                	je     f0114b0d <test_allocate_chunk+0x5d6>
f0114b09:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114b0d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114b11:	83 ec 0c             	sub    $0xc,%esp
f0114b14:	68 0a 73 13 f0       	push   $0xf013730a
f0114b19:	e8 13 c3 fe ff       	call   f0100e31 <cprintf>
f0114b1e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114b21:	83 ec 0c             	sub    $0xc,%esp
f0114b24:	68 68 80 13 f0       	push   $0xf0138068
f0114b29:	e8 03 c3 fe ff       	call   f0100e31 <cprintf>
f0114b2e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b31:	e8 dc 7a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114b36:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114b39:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b3c:	c1 e0 06             	shl    $0x6,%eax
f0114b3f:	68 06 0e 00 00       	push   $0xe06
f0114b44:	50                   	push   %eax
f0114b45:	68 00 00 00 80       	push   $0x80000000
f0114b4a:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b4d:	e8 bd 3c ff ff       	call   f010880f <allocate_chunk>
f0114b52:	83 c4 10             	add    $0x10,%esp
f0114b55:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b58:	e8 b5 7a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114b5d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114b60:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114b64:	75 36                	jne    f0114b9c <test_allocate_chunk+0x665>
f0114b66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b69:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b6c:	89 c1                	mov    %eax,%ecx
f0114b6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b71:	c1 e0 06             	shl    $0x6,%eax
f0114b74:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b77:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b7e:	99                   	cltd   
f0114b7f:	f7 fb                	idiv   %ebx
f0114b81:	89 c3                	mov    %eax,%ebx
f0114b83:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b86:	c1 e0 06             	shl    $0x6,%eax
f0114b89:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114b8c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b93:	99                   	cltd   
f0114b94:	f7 fe                	idiv   %esi
f0114b96:	01 d8                	add    %ebx,%eax
f0114b98:	39 c1                	cmp    %eax,%ecx
f0114b9a:	74 54                	je     f0114bf0 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114b9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b9f:	c1 e0 06             	shl    $0x6,%eax
f0114ba2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ba5:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114bac:	99                   	cltd   
f0114bad:	f7 ff                	idiv   %edi
f0114baf:	89 c1                	mov    %eax,%ecx
f0114bb1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bb4:	c1 e0 06             	shl    $0x6,%eax
f0114bb7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114bba:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114bc1:	99                   	cltd   
f0114bc2:	f7 fb                	idiv   %ebx
f0114bc4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114bc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bca:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bcd:	83 ec 08             	sub    $0x8,%esp
f0114bd0:	52                   	push   %edx
f0114bd1:	50                   	push   %eax
f0114bd2:	ff 75 9c             	pushl  -0x64(%ebp)
f0114bd5:	68 c8 7f 13 f0       	push   $0xf0137fc8
f0114bda:	68 ef 04 00 00       	push   $0x4ef
f0114bdf:	68 1a 69 13 f0       	push   $0xf013691a
f0114be4:	e8 d5 b7 fe ff       	call   f01003be <_warn>
f0114be9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bec:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114bf0:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114bf4:	74 04                	je     f0114bfa <test_allocate_chunk+0x6c3>
f0114bf6:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114bfa:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114bfe:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114c05:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c08:	c1 e0 06             	shl    $0x6,%eax
f0114c0b:	83 ec 08             	sub    $0x8,%esp
f0114c0e:	6a 03                	push   $0x3
f0114c10:	6a 00                	push   $0x0
f0114c12:	6a 00                	push   $0x0
f0114c14:	68 07 0e 00 00       	push   $0xe07
f0114c19:	68 07 0e 00 00       	push   $0xe07
f0114c1e:	6a 01                	push   $0x1
f0114c20:	50                   	push   %eax
f0114c21:	68 00 00 00 80       	push   $0x80000000
f0114c26:	6a 00                	push   $0x0
f0114c28:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c2b:	e8 92 1d 00 00       	call   f01169c2 <CCP>
f0114c30:	83 c4 30             	add    $0x30,%esp
f0114c33:	85 c0                	test   %eax,%eax
f0114c35:	75 25                	jne    f0114c5c <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c37:	83 ec 04             	sub    $0x4,%esp
f0114c3a:	68 04 7f 13 f0       	push   $0xf0137f04
f0114c3f:	68 f8 04 00 00       	push   $0x4f8
f0114c44:	68 1a 69 13 f0       	push   $0xf013691a
f0114c49:	e8 70 b7 fe ff       	call   f01003be <_warn>
f0114c4e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c51:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114c55:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0114c5c:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c60:	74 04                	je     f0114c66 <test_allocate_chunk+0x72f>
f0114c62:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114c66:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114c6a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114c6e:	74 6f                	je     f0114cdf <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114c70:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c73:	01 c0                	add    %eax,%eax
f0114c75:	05 00 00 00 80       	add    $0x80000000,%eax
f0114c7a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114c7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c80:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114c83:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114c86:	89 d0                	mov    %edx,%eax
f0114c88:	c1 e0 02             	shl    $0x2,%eax
f0114c8b:	01 d0                	add    %edx,%eax
f0114c8d:	01 c0                	add    %eax,%eax
f0114c8f:	01 d0                	add    %edx,%eax
f0114c91:	01 c0                	add    %eax,%eax
f0114c93:	05 00 00 00 80       	add    $0x80000000,%eax
f0114c98:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114c9b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c9e:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114ca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ca4:	8a 00                	mov    (%eax),%al
f0114ca6:	3c 4b                	cmp    $0x4b,%al
f0114ca8:	75 09                	jne    f0114cb3 <test_allocate_chunk+0x77c>
f0114caa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114cad:	8a 00                	mov    (%eax),%al
f0114caf:	3c 4d                	cmp    $0x4d,%al
f0114cb1:	74 1e                	je     f0114cd1 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114cb3:	83 ec 04             	sub    $0x4,%esp
f0114cb6:	68 50 7f 13 f0       	push   $0xf0137f50
f0114cbb:	68 06 05 00 00       	push   $0x506
f0114cc0:	68 1a 69 13 f0       	push   $0xf013691a
f0114cc5:	e8 f4 b6 fe ff       	call   f01003be <_warn>
f0114cca:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114ccd:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114cd1:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cd5:	74 04                	je     f0114cdb <test_allocate_chunk+0x7a4>
f0114cd7:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114cdb:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114cdf:	83 ec 0c             	sub    $0xc,%esp
f0114ce2:	68 dc 7d 13 f0       	push   $0xf0137ddc
f0114ce7:	e8 45 c1 fe ff       	call   f0100e31 <cprintf>
f0114cec:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114cef:	83 ec 0c             	sub    $0xc,%esp
f0114cf2:	68 a4 80 13 f0       	push   $0xf01380a4
f0114cf7:	e8 35 c1 fe ff       	call   f0100e31 <cprintf>
f0114cfc:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114cff:	e8 0e 79 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114d04:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114d07:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d0a:	89 d0                	mov    %edx,%eax
f0114d0c:	01 c0                	add    %eax,%eax
f0114d0e:	01 d0                	add    %edx,%eax
f0114d10:	01 c0                	add    %eax,%eax
f0114d12:	01 d0                	add    %edx,%eax
f0114d14:	68 04 0e 00 00       	push   $0xe04
f0114d19:	50                   	push   %eax
f0114d1a:	68 00 fc 3f 40       	push   $0x403ffc00
f0114d1f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d22:	e8 e8 3a ff ff       	call   f010880f <allocate_chunk>
f0114d27:	83 c4 10             	add    $0x10,%esp
f0114d2a:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d2d:	e8 e0 78 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0114d32:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114d35:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114d39:	75 0b                	jne    f0114d46 <test_allocate_chunk+0x80f>
f0114d3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d3e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d41:	83 f8 05             	cmp    $0x5,%eax
f0114d44:	74 2a                	je     f0114d70 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114d46:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d49:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d4c:	83 ec 08             	sub    $0x8,%esp
f0114d4f:	6a 05                	push   $0x5
f0114d51:	50                   	push   %eax
f0114d52:	ff 75 98             	pushl  -0x68(%ebp)
f0114d55:	68 c8 7f 13 f0       	push   $0xf0137fc8
f0114d5a:	68 1d 05 00 00       	push   $0x51d
f0114d5f:	68 1a 69 13 f0       	push   $0xf013691a
f0114d64:	e8 55 b6 fe ff       	call   f01003be <_warn>
f0114d69:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d6c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114d70:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d74:	74 04                	je     f0114d7a <test_allocate_chunk+0x843>
f0114d76:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114d7a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114d7e:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d85:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d88:	89 d0                	mov    %edx,%eax
f0114d8a:	01 c0                	add    %eax,%eax
f0114d8c:	01 d0                	add    %edx,%eax
f0114d8e:	c1 e0 02             	shl    $0x2,%eax
f0114d91:	83 ec 08             	sub    $0x8,%esp
f0114d94:	6a 03                	push   $0x3
f0114d96:	6a 00                	push   $0x0
f0114d98:	6a 00                	push   $0x0
f0114d9a:	68 07 0e 00 00       	push   $0xe07
f0114d9f:	68 05 0e 00 00       	push   $0xe05
f0114da4:	6a 01                	push   $0x1
f0114da6:	50                   	push   %eax
f0114da7:	68 00 f0 3f 40       	push   $0x403ff000
f0114dac:	6a 00                	push   $0x0
f0114dae:	ff 75 cc             	pushl  -0x34(%ebp)
f0114db1:	e8 0c 1c 00 00       	call   f01169c2 <CCP>
f0114db6:	83 c4 30             	add    $0x30,%esp
f0114db9:	85 c0                	test   %eax,%eax
f0114dbb:	75 25                	jne    f0114de2 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114dbd:	83 ec 04             	sub    $0x4,%esp
f0114dc0:	68 04 7f 13 f0       	push   $0xf0137f04
f0114dc5:	68 26 05 00 00       	push   $0x526
f0114dca:	68 1a 69 13 f0       	push   $0xf013691a
f0114dcf:	e8 ea b5 fe ff       	call   f01003be <_warn>
f0114dd4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114dd7:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114ddb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114de2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114de6:	74 04                	je     f0114dec <test_allocate_chunk+0x8b5>
f0114de8:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114dec:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114df0:	83 ec 0c             	sub    $0xc,%esp
f0114df3:	68 db 80 13 f0       	push   $0xf01380db
f0114df8:	e8 34 c0 fe ff       	call   f0100e31 <cprintf>
f0114dfd:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114e00:	83 ec 08             	sub    $0x8,%esp
f0114e03:	ff 75 e0             	pushl  -0x20(%ebp)
f0114e06:	68 ec 80 13 f0       	push   $0xf01380ec
f0114e0b:	e8 21 c0 fe ff       	call   f0100e31 <cprintf>
f0114e10:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114e13:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0114e17:	75 10                	jne    f0114e29 <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114e19:	83 ec 0c             	sub    $0xc,%esp
f0114e1c:	68 20 81 13 f0       	push   $0xf0138120
f0114e21:	e8 0b c0 fe ff       	call   f0100e31 <cprintf>
f0114e26:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114e29:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0114e2e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114e31:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e34:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114e37:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114e3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114e3f:	5b                   	pop    %ebx
f0114e40:	5e                   	pop    %esi
f0114e41:	5f                   	pop    %edi
f0114e42:	5d                   	pop    %ebp
f0114e43:	c3                   	ret    

f0114e44 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114e44:	55                   	push   %ebp
f0114e45:	89 e5                	mov    %esp,%ebp
f0114e47:	57                   	push   %edi
f0114e48:	56                   	push   %esi
f0114e49:	53                   	push   %ebx
f0114e4a:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114e50:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e53:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f0114e58:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114e5d:	89 c7                	mov    %eax,%edi
f0114e5f:	89 de                	mov    %ebx,%esi
f0114e61:	89 d1                	mov    %edx,%ecx
f0114e63:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114e65:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114e68:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114e6d:	b0 00                	mov    $0x0,%al
f0114e6f:	89 d7                	mov    %edx,%edi
f0114e71:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114e73:	6a 00                	push   $0x0
f0114e75:	6a 0a                	push   $0xa
f0114e77:	6a 14                	push   $0x14
f0114e79:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e7c:	50                   	push   %eax
f0114e7d:	e8 7d 3a ff ff       	call   f01088ff <env_create>
f0114e82:	83 c4 10             	add    $0x10,%esp
f0114e85:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114e88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e8b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114e91:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114e94:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e97:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114e9d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114ea0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ea3:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114ea6:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114ead:	75 70 20 
f0114eb0:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114eb7:	00 00 00 
f0114eba:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114ebd:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114ec2:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ec7:	89 d7                	mov    %edx,%edi
f0114ec9:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114ece:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114ed1:	83 ec 08             	sub    $0x8,%esp
f0114ed4:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114eda:	52                   	push   %edx
f0114edb:	50                   	push   %eax
f0114edc:	e8 53 a0 01 00       	call   f012ef34 <ltostr>
f0114ee1:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114ee4:	83 ec 04             	sub    $0x4,%esp
f0114ee7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114eed:	50                   	push   %eax
f0114eee:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114ef4:	50                   	push   %eax
f0114ef5:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114efb:	50                   	push   %eax
f0114efc:	e8 2b a1 01 00       	call   f012f02c <strcconcat>
f0114f01:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114f04:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114f0b:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114f12:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114f19:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114f20:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114f24:	83 ec 0c             	sub    $0xc,%esp
f0114f27:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f2a:	e8 5f 1a 00 00       	call   f011698e <ClearUserSpace>
f0114f2f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114f32:	83 ec 0c             	sub    $0xc,%esp
f0114f35:	68 60 81 13 f0       	push   $0xf0138160
f0114f3a:	e8 f2 be fe ff       	call   f0100e31 <cprintf>
f0114f3f:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114f42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f45:	c1 e0 03             	shl    $0x3,%eax
f0114f48:	83 ec 04             	sub    $0x4,%esp
f0114f4b:	50                   	push   %eax
f0114f4c:	6a 00                	push   $0x0
f0114f4e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f51:	e8 ed 38 ff ff       	call   f0108843 <calculate_required_frames>
f0114f56:	83 c4 10             	add    $0x10,%esp
f0114f59:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f5c:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f60:	74 23                	je     f0114f85 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f62:	83 ec 0c             	sub    $0xc,%esp
f0114f65:	6a 03                	push   $0x3
f0114f67:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f6a:	68 94 81 13 f0       	push   $0xf0138194
f0114f6f:	68 5f 05 00 00       	push   $0x55f
f0114f74:	68 1a 69 13 f0       	push   $0xf013691a
f0114f79:	e8 40 b4 fe ff       	call   f01003be <_warn>
f0114f7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f89:	74 04                	je     f0114f8f <test_calculate_required_frames+0x14b>
f0114f8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114f93:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f96:	c1 e0 02             	shl    $0x2,%eax
f0114f99:	83 ec 04             	sub    $0x4,%esp
f0114f9c:	50                   	push   %eax
f0114f9d:	6a 00                	push   $0x0
f0114f9f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fa2:	e8 9c 38 ff ff       	call   f0108843 <calculate_required_frames>
f0114fa7:	83 c4 10             	add    $0x10,%esp
f0114faa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114fad:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114fb4:	74 26                	je     f0114fdc <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114fb6:	83 ec 0c             	sub    $0xc,%esp
f0114fb9:	68 01 04 00 00       	push   $0x401
f0114fbe:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fc1:	68 94 81 13 f0       	push   $0xf0138194
f0114fc6:	68 69 05 00 00       	push   $0x569
f0114fcb:	68 1a 69 13 f0       	push   $0xf013691a
f0114fd0:	e8 e9 b3 fe ff       	call   f01003be <_warn>
f0114fd5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fd8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fdc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fe0:	74 04                	je     f0114fe6 <test_calculate_required_frames+0x1a2>
f0114fe2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fe6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114fea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fed:	c1 e0 0a             	shl    $0xa,%eax
f0114ff0:	83 ec 04             	sub    $0x4,%esp
f0114ff3:	50                   	push   %eax
f0114ff4:	6a 00                	push   $0x0
f0114ff6:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ff9:	e8 45 38 ff ff       	call   f0108843 <calculate_required_frames>
f0114ffe:	83 c4 10             	add    $0x10,%esp
f0115001:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115004:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115007:	c1 e0 0a             	shl    $0xa,%eax
f011500a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011500d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115014:	99                   	cltd   
f0115015:	f7 fb                	idiv   %ebx
f0115017:	89 c1                	mov    %eax,%ecx
f0115019:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011501c:	c1 e0 0a             	shl    $0xa,%eax
f011501f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115022:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115029:	99                   	cltd   
f011502a:	f7 fe                	idiv   %esi
f011502c:	01 c8                	add    %ecx,%eax
f011502e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115031:	74 4c                	je     f011507f <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115033:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115036:	c1 e0 0a             	shl    $0xa,%eax
f0115039:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011503c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115043:	99                   	cltd   
f0115044:	f7 fb                	idiv   %ebx
f0115046:	89 c1                	mov    %eax,%ecx
f0115048:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011504b:	c1 e0 0a             	shl    $0xa,%eax
f011504e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115051:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115058:	99                   	cltd   
f0115059:	f7 fe                	idiv   %esi
f011505b:	01 c8                	add    %ecx,%eax
f011505d:	83 ec 0c             	sub    $0xc,%esp
f0115060:	50                   	push   %eax
f0115061:	ff 75 c8             	pushl  -0x38(%ebp)
f0115064:	68 94 81 13 f0       	push   $0xf0138194
f0115069:	68 73 05 00 00       	push   $0x573
f011506e:	68 1a 69 13 f0       	push   $0xf013691a
f0115073:	e8 46 b3 fe ff       	call   f01003be <_warn>
f0115078:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011507b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011507f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115083:	74 04                	je     f0115089 <test_calculate_required_frames+0x245>
f0115085:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115089:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011508d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115090:	89 d0                	mov    %edx,%eax
f0115092:	01 c0                	add    %eax,%eax
f0115094:	01 d0                	add    %edx,%eax
f0115096:	01 c0                	add    %eax,%eax
f0115098:	83 ec 04             	sub    $0x4,%esp
f011509b:	50                   	push   %eax
f011509c:	68 00 10 00 00       	push   $0x1000
f01150a1:	ff 75 d8             	pushl  -0x28(%ebp)
f01150a4:	e8 9a 37 ff ff       	call   f0108843 <calculate_required_frames>
f01150a9:	83 c4 10             	add    $0x10,%esp
f01150ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01150af:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01150b3:	74 23                	je     f01150d8 <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01150b5:	83 ec 0c             	sub    $0xc,%esp
f01150b8:	6a 03                	push   $0x3
f01150ba:	ff 75 c8             	pushl  -0x38(%ebp)
f01150bd:	68 94 81 13 f0       	push   $0xf0138194
f01150c2:	68 7f 05 00 00       	push   $0x57f
f01150c7:	68 1a 69 13 f0       	push   $0xf013691a
f01150cc:	e8 ed b2 fe ff       	call   f01003be <_warn>
f01150d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150dc:	74 04                	je     f01150e2 <test_calculate_required_frames+0x29e>
f01150de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01150e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01150e9:	89 c2                	mov    %eax,%edx
f01150eb:	01 d2                	add    %edx,%edx
f01150ed:	01 d0                	add    %edx,%eax
f01150ef:	83 ec 04             	sub    $0x4,%esp
f01150f2:	50                   	push   %eax
f01150f3:	68 00 18 00 00       	push   $0x1800
f01150f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01150fb:	e8 43 37 ff ff       	call   f0108843 <calculate_required_frames>
f0115100:	83 c4 10             	add    $0x10,%esp
f0115103:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115106:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011510a:	74 23                	je     f011512f <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011510c:	83 ec 0c             	sub    $0xc,%esp
f011510f:	6a 03                	push   $0x3
f0115111:	ff 75 c8             	pushl  -0x38(%ebp)
f0115114:	68 94 81 13 f0       	push   $0xf0138194
f0115119:	68 89 05 00 00       	push   $0x589
f011511e:	68 1a 69 13 f0       	push   $0xf013691a
f0115123:	e8 96 b2 fe ff       	call   f01003be <_warn>
f0115128:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011512b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011512f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115133:	74 04                	je     f0115139 <test_calculate_required_frames+0x2f5>
f0115135:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115139:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011513d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115140:	89 d0                	mov    %edx,%eax
f0115142:	c1 e0 02             	shl    $0x2,%eax
f0115145:	01 d0                	add    %edx,%eax
f0115147:	01 c0                	add    %eax,%eax
f0115149:	83 ec 04             	sub    $0x4,%esp
f011514c:	50                   	push   %eax
f011514d:	68 00 00 40 00       	push   $0x400000
f0115152:	ff 75 d8             	pushl  -0x28(%ebp)
f0115155:	e8 e9 36 ff ff       	call   f0108843 <calculate_required_frames>
f011515a:	83 c4 10             	add    $0x10,%esp
f011515d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115160:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115167:	74 26                	je     f011518f <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115169:	83 ec 0c             	sub    $0xc,%esp
f011516c:	68 03 0a 00 00       	push   $0xa03
f0115171:	ff 75 c8             	pushl  -0x38(%ebp)
f0115174:	68 94 81 13 f0       	push   $0xf0138194
f0115179:	68 93 05 00 00       	push   $0x593
f011517e:	68 1a 69 13 f0       	push   $0xf013691a
f0115183:	e8 36 b2 fe ff       	call   f01003be <_warn>
f0115188:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011518b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011518f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115193:	74 04                	je     f0115199 <test_calculate_required_frames+0x355>
f0115195:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115199:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011519d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151a0:	01 c0                	add    %eax,%eax
f01151a2:	83 ec 04             	sub    $0x4,%esp
f01151a5:	50                   	push   %eax
f01151a6:	68 00 00 70 00       	push   $0x700000
f01151ab:	ff 75 d8             	pushl  -0x28(%ebp)
f01151ae:	e8 90 36 ff ff       	call   f0108843 <calculate_required_frames>
f01151b3:	83 c4 10             	add    $0x10,%esp
f01151b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01151b9:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01151c0:	74 26                	je     f01151e8 <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01151c2:	83 ec 0c             	sub    $0xc,%esp
f01151c5:	68 02 02 00 00       	push   $0x202
f01151ca:	ff 75 c8             	pushl  -0x38(%ebp)
f01151cd:	68 94 81 13 f0       	push   $0xf0138194
f01151d2:	68 9f 05 00 00       	push   $0x59f
f01151d7:	68 1a 69 13 f0       	push   $0xf013691a
f01151dc:	e8 dd b1 fe ff       	call   f01003be <_warn>
f01151e1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01151e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151ec:	74 04                	je     f01151f2 <test_calculate_required_frames+0x3ae>
f01151ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01151f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01151f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151f9:	83 ec 04             	sub    $0x4,%esp
f01151fc:	50                   	push   %eax
f01151fd:	68 ff ff 3f 00       	push   $0x3fffff
f0115202:	ff 75 d8             	pushl  -0x28(%ebp)
f0115205:	e8 39 36 ff ff       	call   f0108843 <calculate_required_frames>
f011520a:	83 c4 10             	add    $0x10,%esp
f011520d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115210:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115214:	74 23                	je     f0115239 <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115216:	83 ec 0c             	sub    $0xc,%esp
f0115219:	6a 04                	push   $0x4
f011521b:	ff 75 c8             	pushl  -0x38(%ebp)
f011521e:	68 94 81 13 f0       	push   $0xf0138194
f0115223:	68 a9 05 00 00       	push   $0x5a9
f0115228:	68 1a 69 13 f0       	push   $0xf013691a
f011522d:	e8 8c b1 fe ff       	call   f01003be <_warn>
f0115232:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115235:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115239:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011523d:	74 04                	je     f0115243 <test_calculate_required_frames+0x3ff>
f011523f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115243:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115247:	83 ec 0c             	sub    $0xc,%esp
f011524a:	68 cd 7c 13 f0       	push   $0xf0137ccd
f011524f:	e8 dd bb fe ff       	call   f0100e31 <cprintf>
f0115254:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115257:	83 ec 0c             	sub    $0xc,%esp
f011525a:	68 ec 81 13 f0       	push   $0xf01381ec
f011525f:	e8 cd bb fe ff       	call   f0100e31 <cprintf>
f0115264:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115267:	83 ec 04             	sub    $0x4,%esp
f011526a:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115270:	50                   	push   %eax
f0115271:	68 86 70 13 f0       	push   $0xf0137086
f0115276:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011527c:	50                   	push   %eax
f011527d:	e8 aa 9d 01 00       	call   f012f02c <strcconcat>
f0115282:	83 c4 10             	add    $0x10,%esp
f0115285:	83 ec 0c             	sub    $0xc,%esp
f0115288:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011528e:	50                   	push   %eax
f011528f:	e8 2f c9 fe ff       	call   f0101bc3 <execute_command>
f0115294:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115297:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011529a:	c1 e0 03             	shl    $0x3,%eax
f011529d:	83 ec 04             	sub    $0x4,%esp
f01152a0:	50                   	push   %eax
f01152a1:	6a 00                	push   $0x0
f01152a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01152a6:	e8 98 35 ff ff       	call   f0108843 <calculate_required_frames>
f01152ab:	83 c4 10             	add    $0x10,%esp
f01152ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01152b1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01152b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01152bb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01152be:	74 24                	je     f01152e4 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01152c0:	83 ec 0c             	sub    $0xc,%esp
f01152c3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01152c6:	ff 75 c8             	pushl  -0x38(%ebp)
f01152c9:	68 94 81 13 f0       	push   $0xf0138194
f01152ce:	68 bd 05 00 00       	push   $0x5bd
f01152d3:	68 1a 69 13 f0       	push   $0xf013691a
f01152d8:	e8 e1 b0 fe ff       	call   f01003be <_warn>
f01152dd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152e4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152e8:	74 04                	je     f01152ee <test_calculate_required_frames+0x4aa>
f01152ea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152ee:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01152f2:	83 ec 04             	sub    $0x4,%esp
f01152f5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01152fb:	50                   	push   %eax
f01152fc:	68 93 70 13 f0       	push   $0xf0137093
f0115301:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115307:	50                   	push   %eax
f0115308:	e8 1f 9d 01 00       	call   f012f02c <strcconcat>
f011530d:	83 c4 10             	add    $0x10,%esp
f0115310:	83 ec 0c             	sub    $0xc,%esp
f0115313:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115319:	50                   	push   %eax
f011531a:	e8 a4 c8 fe ff       	call   f0101bc3 <execute_command>
f011531f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115322:	83 ec 04             	sub    $0x4,%esp
f0115325:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011532b:	50                   	push   %eax
f011532c:	68 20 82 13 f0       	push   $0xf0138220
f0115331:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115337:	50                   	push   %eax
f0115338:	e8 ef 9c 01 00       	call   f012f02c <strcconcat>
f011533d:	83 c4 10             	add    $0x10,%esp
f0115340:	83 ec 0c             	sub    $0xc,%esp
f0115343:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115349:	50                   	push   %eax
f011534a:	e8 74 c8 fe ff       	call   f0101bc3 <execute_command>
f011534f:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115352:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115355:	c1 e0 03             	shl    $0x3,%eax
f0115358:	83 ec 04             	sub    $0x4,%esp
f011535b:	50                   	push   %eax
f011535c:	6a 00                	push   $0x0
f011535e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115361:	e8 dd 34 ff ff       	call   f0108843 <calculate_required_frames>
f0115366:	83 c4 10             	add    $0x10,%esp
f0115369:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011536c:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115373:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115376:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115379:	74 24                	je     f011539f <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011537b:	83 ec 0c             	sub    $0xc,%esp
f011537e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115381:	ff 75 c8             	pushl  -0x38(%ebp)
f0115384:	68 94 81 13 f0       	push   $0xf0138194
f0115389:	68 cb 05 00 00       	push   $0x5cb
f011538e:	68 1a 69 13 f0       	push   $0xf013691a
f0115393:	e8 26 b0 fe ff       	call   f01003be <_warn>
f0115398:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011539b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011539f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153a3:	74 04                	je     f01153a9 <test_calculate_required_frames+0x565>
f01153a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153a9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01153ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153b0:	c1 e0 0a             	shl    $0xa,%eax
f01153b3:	83 ec 04             	sub    $0x4,%esp
f01153b6:	50                   	push   %eax
f01153b7:	6a 00                	push   $0x0
f01153b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01153bc:	e8 82 34 ff ff       	call   f0108843 <calculate_required_frames>
f01153c1:	83 c4 10             	add    $0x10,%esp
f01153c4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01153c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153ca:	c1 e0 0a             	shl    $0xa,%eax
f01153cd:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01153d0:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01153d7:	99                   	cltd   
f01153d8:	f7 fb                	idiv   %ebx
f01153da:	89 c1                	mov    %eax,%ecx
f01153dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153df:	c1 e0 0a             	shl    $0xa,%eax
f01153e2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153e5:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153ec:	99                   	cltd   
f01153ed:	f7 fe                	idiv   %esi
f01153ef:	01 c8                	add    %ecx,%eax
f01153f1:	83 e8 05             	sub    $0x5,%eax
f01153f4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01153f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153fa:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153fd:	74 24                	je     f0115423 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01153ff:	83 ec 0c             	sub    $0xc,%esp
f0115402:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115405:	ff 75 c8             	pushl  -0x38(%ebp)
f0115408:	68 94 81 13 f0       	push   $0xf0138194
f011540d:	68 d6 05 00 00       	push   $0x5d6
f0115412:	68 1a 69 13 f0       	push   $0xf013691a
f0115417:	e8 a2 af fe ff       	call   f01003be <_warn>
f011541c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011541f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115423:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115427:	74 04                	je     f011542d <test_calculate_required_frames+0x5e9>
f0115429:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011542d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115431:	83 ec 04             	sub    $0x4,%esp
f0115434:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011543a:	50                   	push   %eax
f011543b:	68 2c 82 13 f0       	push   $0xf013822c
f0115440:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115446:	50                   	push   %eax
f0115447:	e8 e0 9b 01 00       	call   f012f02c <strcconcat>
f011544c:	83 c4 10             	add    $0x10,%esp
f011544f:	83 ec 0c             	sub    $0xc,%esp
f0115452:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115458:	50                   	push   %eax
f0115459:	e8 65 c7 fe ff       	call   f0101bc3 <execute_command>
f011545e:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115461:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115464:	89 c2                	mov    %eax,%edx
f0115466:	01 d2                	add    %edx,%edx
f0115468:	01 d0                	add    %edx,%eax
f011546a:	83 ec 04             	sub    $0x4,%esp
f011546d:	50                   	push   %eax
f011546e:	68 00 18 00 00       	push   $0x1800
f0115473:	ff 75 d8             	pushl  -0x28(%ebp)
f0115476:	e8 c8 33 ff ff       	call   f0108843 <calculate_required_frames>
f011547b:	83 c4 10             	add    $0x10,%esp
f011547e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115481:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115488:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011548b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011548e:	74 24                	je     f01154b4 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115490:	83 ec 0c             	sub    $0xc,%esp
f0115493:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115496:	ff 75 c8             	pushl  -0x38(%ebp)
f0115499:	68 94 81 13 f0       	push   $0xf0138194
f011549e:	68 e5 05 00 00       	push   $0x5e5
f01154a3:	68 1a 69 13 f0       	push   $0xf013691a
f01154a8:	e8 11 af fe ff       	call   f01003be <_warn>
f01154ad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154b0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154b4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154b8:	74 04                	je     f01154be <test_calculate_required_frames+0x67a>
f01154ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154be:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01154c2:	83 ec 04             	sub    $0x4,%esp
f01154c5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01154cb:	50                   	push   %eax
f01154cc:	68 ec 72 13 f0       	push   $0xf01372ec
f01154d1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154d7:	50                   	push   %eax
f01154d8:	e8 4f 9b 01 00       	call   f012f02c <strcconcat>
f01154dd:	83 c4 10             	add    $0x10,%esp
f01154e0:	83 ec 0c             	sub    $0xc,%esp
f01154e3:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01154e9:	50                   	push   %eax
f01154ea:	e8 d4 c6 fe ff       	call   f0101bc3 <execute_command>
f01154ef:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01154f2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154f5:	89 d0                	mov    %edx,%eax
f01154f7:	c1 e0 02             	shl    $0x2,%eax
f01154fa:	01 d0                	add    %edx,%eax
f01154fc:	01 c0                	add    %eax,%eax
f01154fe:	83 ec 04             	sub    $0x4,%esp
f0115501:	50                   	push   %eax
f0115502:	68 00 00 40 00       	push   $0x400000
f0115507:	ff 75 d8             	pushl  -0x28(%ebp)
f011550a:	e8 34 33 ff ff       	call   f0108843 <calculate_required_frames>
f011550f:	83 c4 10             	add    $0x10,%esp
f0115512:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115515:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011551c:	74 26                	je     f0115544 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011551e:	83 ec 0c             	sub    $0xc,%esp
f0115521:	68 03 0a 00 00       	push   $0xa03
f0115526:	ff 75 c8             	pushl  -0x38(%ebp)
f0115529:	68 94 81 13 f0       	push   $0xf0138194
f011552e:	68 f1 05 00 00       	push   $0x5f1
f0115533:	68 1a 69 13 f0       	push   $0xf013691a
f0115538:	e8 81 ae fe ff       	call   f01003be <_warn>
f011553d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115540:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115544:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115548:	74 04                	je     f011554e <test_calculate_required_frames+0x70a>
f011554a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011554e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115552:	83 ec 04             	sub    $0x4,%esp
f0115555:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011555b:	50                   	push   %eax
f011555c:	68 f6 72 13 f0       	push   $0xf01372f6
f0115561:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115567:	50                   	push   %eax
f0115568:	e8 bf 9a 01 00       	call   f012f02c <strcconcat>
f011556d:	83 c4 10             	add    $0x10,%esp
f0115570:	83 ec 0c             	sub    $0xc,%esp
f0115573:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115579:	50                   	push   %eax
f011557a:	e8 44 c6 fe ff       	call   f0101bc3 <execute_command>
f011557f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115582:	83 ec 04             	sub    $0x4,%esp
f0115585:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011558b:	50                   	push   %eax
f011558c:	68 34 82 13 f0       	push   $0xf0138234
f0115591:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115597:	50                   	push   %eax
f0115598:	e8 8f 9a 01 00       	call   f012f02c <strcconcat>
f011559d:	83 c4 10             	add    $0x10,%esp
f01155a0:	83 ec 0c             	sub    $0xc,%esp
f01155a3:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01155a9:	50                   	push   %eax
f01155aa:	e8 14 c6 fe ff       	call   f0101bc3 <execute_command>
f01155af:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01155b2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155b5:	01 c0                	add    %eax,%eax
f01155b7:	83 ec 04             	sub    $0x4,%esp
f01155ba:	50                   	push   %eax
f01155bb:	68 00 00 70 00       	push   $0x700000
f01155c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01155c3:	e8 7b 32 ff ff       	call   f0108843 <calculate_required_frames>
f01155c8:	83 c4 10             	add    $0x10,%esp
f01155cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01155ce:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01155d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155d8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155db:	74 24                	je     f0115601 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155dd:	83 ec 0c             	sub    $0xc,%esp
f01155e0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01155e6:	68 94 81 13 f0       	push   $0xf0138194
f01155eb:	68 01 06 00 00       	push   $0x601
f01155f0:	68 1a 69 13 f0       	push   $0xf013691a
f01155f5:	e8 c4 ad fe ff       	call   f01003be <_warn>
f01155fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115601:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115605:	74 04                	je     f011560b <test_calculate_required_frames+0x7c7>
f0115607:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011560b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011560f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115612:	83 ec 04             	sub    $0x4,%esp
f0115615:	50                   	push   %eax
f0115616:	68 ff ff 3f 00       	push   $0x3fffff
f011561b:	ff 75 d8             	pushl  -0x28(%ebp)
f011561e:	e8 20 32 ff ff       	call   f0108843 <calculate_required_frames>
f0115623:	83 c4 10             	add    $0x10,%esp
f0115626:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115629:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115630:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115633:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115636:	74 24                	je     f011565c <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115638:	83 ec 0c             	sub    $0xc,%esp
f011563b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011563e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115641:	68 94 81 13 f0       	push   $0xf0138194
f0115646:	68 0c 06 00 00       	push   $0x60c
f011564b:	68 1a 69 13 f0       	push   $0xf013691a
f0115650:	e8 69 ad fe ff       	call   f01003be <_warn>
f0115655:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115658:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011565c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115660:	74 04                	je     f0115666 <test_calculate_required_frames+0x822>
f0115662:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115666:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011566a:	83 ec 0c             	sub    $0xc,%esp
f011566d:	68 a7 72 13 f0       	push   $0xf01372a7
f0115672:	e8 ba b7 fe ff       	call   f0100e31 <cprintf>
f0115677:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011567a:	83 ec 08             	sub    $0x8,%esp
f011567d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115680:	68 40 82 13 f0       	push   $0xf0138240
f0115685:	e8 a7 b7 fe ff       	call   f0100e31 <cprintf>
f011568a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011568d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115691:	75 10                	jne    f01156a3 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115693:	83 ec 0c             	sub    $0xc,%esp
f0115696:	68 80 82 13 f0       	push   $0xf0138280
f011569b:	e8 91 b7 fe ff       	call   f0100e31 <cprintf>
f01156a0:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01156a3:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f01156a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01156ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01156ae:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01156b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01156b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01156b9:	5b                   	pop    %ebx
f01156ba:	5e                   	pop    %esi
f01156bb:	5f                   	pop    %edi
f01156bc:	5d                   	pop    %ebp
f01156bd:	c3                   	ret    

f01156be <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01156be:	55                   	push   %ebp
f01156bf:	89 e5                	mov    %esp,%ebp
f01156c1:	57                   	push   %edi
f01156c2:	56                   	push   %esi
f01156c3:	53                   	push   %ebx
f01156c4:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01156ca:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01156cd:	bb 1c 70 13 f0       	mov    $0xf013701c,%ebx
f01156d2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01156d7:	89 c7                	mov    %eax,%edi
f01156d9:	89 de                	mov    %ebx,%esi
f01156db:	89 d1                	mov    %edx,%ecx
f01156dd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01156df:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01156e2:	b9 23 00 00 00       	mov    $0x23,%ecx
f01156e7:	b0 00                	mov    $0x0,%al
f01156e9:	89 d7                	mov    %edx,%edi
f01156eb:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01156ed:	6a 00                	push   $0x0
f01156ef:	6a 0a                	push   $0xa
f01156f1:	6a 14                	push   $0x14
f01156f3:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01156f6:	50                   	push   %eax
f01156f7:	e8 03 32 ff ff       	call   f01088ff <env_create>
f01156fc:	83 c4 10             	add    $0x10,%esp
f01156ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115702:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115705:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011570b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011570e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115711:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115717:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011571a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011571d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115720:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115727:	75 70 20 
f011572a:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115731:	00 00 00 
f0115734:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115737:	b9 03 00 00 00       	mov    $0x3,%ecx
f011573c:	b8 00 00 00 00       	mov    $0x0,%eax
f0115741:	89 d7                	mov    %edx,%edi
f0115743:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115745:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115748:	8b 40 4c             	mov    0x4c(%eax),%eax
f011574b:	83 ec 08             	sub    $0x8,%esp
f011574e:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115754:	52                   	push   %edx
f0115755:	50                   	push   %eax
f0115756:	e8 d9 97 01 00       	call   f012ef34 <ltostr>
f011575b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011575e:	83 ec 04             	sub    $0x4,%esp
f0115761:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115767:	50                   	push   %eax
f0115768:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011576e:	50                   	push   %eax
f011576f:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115775:	50                   	push   %eax
f0115776:	e8 b1 98 01 00       	call   f012f02c <strcconcat>
f011577b:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011577e:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115785:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011578c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115793:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115797:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011579e:	00 00 00 
	uint32 num_tables = 0;
f01157a1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01157a8:	00 00 00 
	ClearUserSpace(proc_directory);
f01157ab:	83 ec 0c             	sub    $0xc,%esp
f01157ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01157b1:	e8 d8 11 00 00       	call   f011698e <ClearUserSpace>
f01157b6:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01157b9:	83 ec 0c             	sub    $0xc,%esp
f01157bc:	68 60 81 13 f0       	push   $0xf0138160
f01157c1:	e8 6b b6 fe ff       	call   f0100e31 <cprintf>
f01157c6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01157c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157cc:	c1 e0 03             	shl    $0x3,%eax
f01157cf:	89 c2                	mov    %eax,%edx
f01157d1:	83 ec 0c             	sub    $0xc,%esp
f01157d4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157da:	50                   	push   %eax
f01157db:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157e1:	50                   	push   %eax
f01157e2:	52                   	push   %edx
f01157e3:	6a 00                	push   $0x0
f01157e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01157e8:	e8 3c 30 ff ff       	call   f0108829 <calculate_allocated_space>
f01157ed:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157f6:	85 c0                	test   %eax,%eax
f01157f8:	74 27                	je     f0115821 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115800:	83 ec 0c             	sub    $0xc,%esp
f0115803:	6a 00                	push   $0x0
f0115805:	50                   	push   %eax
f0115806:	68 cc 82 13 f0       	push   $0xf01382cc
f011580b:	68 41 06 00 00       	push   $0x641
f0115810:	68 1a 69 13 f0       	push   $0xf013691a
f0115815:	e8 a4 ab fe ff       	call   f01003be <_warn>
f011581a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011581d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115821:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115827:	85 c0                	test   %eax,%eax
f0115829:	74 27                	je     f0115852 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011582b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115831:	83 ec 0c             	sub    $0xc,%esp
f0115834:	6a 00                	push   $0x0
f0115836:	50                   	push   %eax
f0115837:	68 2c 83 13 f0       	push   $0xf013832c
f011583c:	68 46 06 00 00       	push   $0x646
f0115841:	68 1a 69 13 f0       	push   $0xf013691a
f0115846:	e8 73 ab fe ff       	call   f01003be <_warn>
f011584b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011584e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115852:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115856:	74 04                	je     f011585c <test_calculate_allocated_space+0x19e>
f0115858:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011585c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115860:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115867:	00 00 00 
		num_pages = 0;
f011586a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115871:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115874:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115877:	c1 e0 02             	shl    $0x2,%eax
f011587a:	89 c2                	mov    %eax,%edx
f011587c:	83 ec 0c             	sub    $0xc,%esp
f011587f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115885:	50                   	push   %eax
f0115886:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011588c:	50                   	push   %eax
f011588d:	52                   	push   %edx
f011588e:	6a 00                	push   $0x0
f0115890:	ff 75 d8             	pushl  -0x28(%ebp)
f0115893:	e8 91 2f ff ff       	call   f0108829 <calculate_allocated_space>
f0115898:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011589b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158a1:	85 c0                	test   %eax,%eax
f01158a3:	74 27                	je     f01158cc <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01158a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158ab:	83 ec 0c             	sub    $0xc,%esp
f01158ae:	6a 00                	push   $0x0
f01158b0:	50                   	push   %eax
f01158b1:	68 cc 82 13 f0       	push   $0xf01382cc
f01158b6:	68 52 06 00 00       	push   $0x652
f01158bb:	68 1a 69 13 f0       	push   $0xf013691a
f01158c0:	e8 f9 aa fe ff       	call   f01003be <_warn>
f01158c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01158cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158d2:	85 c0                	test   %eax,%eax
f01158d4:	74 27                	je     f01158fd <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01158d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158dc:	83 ec 0c             	sub    $0xc,%esp
f01158df:	6a 00                	push   $0x0
f01158e1:	50                   	push   %eax
f01158e2:	68 2c 83 13 f0       	push   $0xf013832c
f01158e7:	68 57 06 00 00       	push   $0x657
f01158ec:	68 1a 69 13 f0       	push   $0xf013691a
f01158f1:	e8 c8 aa fe ff       	call   f01003be <_warn>
f01158f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158f9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158fd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115901:	74 04                	je     f0115907 <test_calculate_allocated_space+0x249>
f0115903:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115907:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011590b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115912:	00 00 00 
		num_pages = 0;
f0115915:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011591c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011591f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115922:	c1 e0 0a             	shl    $0xa,%eax
f0115925:	89 c2                	mov    %eax,%edx
f0115927:	83 ec 0c             	sub    $0xc,%esp
f011592a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115930:	50                   	push   %eax
f0115931:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115937:	50                   	push   %eax
f0115938:	52                   	push   %edx
f0115939:	6a 00                	push   $0x0
f011593b:	ff 75 d8             	pushl  -0x28(%ebp)
f011593e:	e8 e6 2e ff ff       	call   f0108829 <calculate_allocated_space>
f0115943:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115946:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011594c:	85 c0                	test   %eax,%eax
f011594e:	74 27                	je     f0115977 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115950:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115956:	83 ec 0c             	sub    $0xc,%esp
f0115959:	6a 00                	push   $0x0
f011595b:	50                   	push   %eax
f011595c:	68 cc 82 13 f0       	push   $0xf01382cc
f0115961:	68 63 06 00 00       	push   $0x663
f0115966:	68 1a 69 13 f0       	push   $0xf013691a
f011596b:	e8 4e aa fe ff       	call   f01003be <_warn>
f0115970:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115973:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115977:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011597d:	85 c0                	test   %eax,%eax
f011597f:	74 27                	je     f01159a8 <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115981:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115987:	83 ec 0c             	sub    $0xc,%esp
f011598a:	6a 00                	push   $0x0
f011598c:	50                   	push   %eax
f011598d:	68 2c 83 13 f0       	push   $0xf013832c
f0115992:	68 68 06 00 00       	push   $0x668
f0115997:	68 1a 69 13 f0       	push   $0xf013691a
f011599c:	e8 1d aa fe ff       	call   f01003be <_warn>
f01159a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159ac:	74 04                	je     f01159b2 <test_calculate_allocated_space+0x2f4>
f01159ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01159b6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159bd:	00 00 00 
		num_pages = 0;
f01159c0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159c7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01159ca:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01159cd:	89 d0                	mov    %edx,%eax
f01159cf:	01 c0                	add    %eax,%eax
f01159d1:	01 d0                	add    %edx,%eax
f01159d3:	01 c0                	add    %eax,%eax
f01159d5:	05 00 10 00 00       	add    $0x1000,%eax
f01159da:	89 c2                	mov    %eax,%edx
f01159dc:	83 ec 0c             	sub    $0xc,%esp
f01159df:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159e5:	50                   	push   %eax
f01159e6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159ec:	50                   	push   %eax
f01159ed:	52                   	push   %edx
f01159ee:	68 00 10 00 00       	push   $0x1000
f01159f3:	ff 75 d8             	pushl  -0x28(%ebp)
f01159f6:	e8 2e 2e ff ff       	call   f0108829 <calculate_allocated_space>
f01159fb:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159fe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a04:	85 c0                	test   %eax,%eax
f0115a06:	74 27                	je     f0115a2f <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a0e:	83 ec 0c             	sub    $0xc,%esp
f0115a11:	6a 00                	push   $0x0
f0115a13:	50                   	push   %eax
f0115a14:	68 cc 82 13 f0       	push   $0xf01382cc
f0115a19:	68 75 06 00 00       	push   $0x675
f0115a1e:	68 1a 69 13 f0       	push   $0xf013691a
f0115a23:	e8 96 a9 fe ff       	call   f01003be <_warn>
f0115a28:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a2b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a2f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a35:	85 c0                	test   %eax,%eax
f0115a37:	74 27                	je     f0115a60 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a3f:	83 ec 0c             	sub    $0xc,%esp
f0115a42:	6a 00                	push   $0x0
f0115a44:	50                   	push   %eax
f0115a45:	68 2c 83 13 f0       	push   $0xf013832c
f0115a4a:	68 7a 06 00 00       	push   $0x67a
f0115a4f:	68 1a 69 13 f0       	push   $0xf013691a
f0115a54:	e8 65 a9 fe ff       	call   f01003be <_warn>
f0115a59:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a5c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a60:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a64:	74 04                	je     f0115a6a <test_calculate_allocated_space+0x3ac>
f0115a66:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a6a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115a6e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a75:	00 00 00 
		num_pages = 0;
f0115a78:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a7f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115a82:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a85:	89 c2                	mov    %eax,%edx
f0115a87:	01 d2                	add    %edx,%edx
f0115a89:	01 d0                	add    %edx,%eax
f0115a8b:	05 00 18 00 00       	add    $0x1800,%eax
f0115a90:	89 c2                	mov    %eax,%edx
f0115a92:	83 ec 0c             	sub    $0xc,%esp
f0115a95:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a9b:	50                   	push   %eax
f0115a9c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115aa2:	50                   	push   %eax
f0115aa3:	52                   	push   %edx
f0115aa4:	68 00 18 00 00       	push   $0x1800
f0115aa9:	ff 75 d8             	pushl  -0x28(%ebp)
f0115aac:	e8 78 2d ff ff       	call   f0108829 <calculate_allocated_space>
f0115ab1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ab4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115aba:	85 c0                	test   %eax,%eax
f0115abc:	74 27                	je     f0115ae5 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115abe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ac4:	83 ec 0c             	sub    $0xc,%esp
f0115ac7:	6a 00                	push   $0x0
f0115ac9:	50                   	push   %eax
f0115aca:	68 cc 82 13 f0       	push   $0xf01382cc
f0115acf:	68 86 06 00 00       	push   $0x686
f0115ad4:	68 1a 69 13 f0       	push   $0xf013691a
f0115ad9:	e8 e0 a8 fe ff       	call   f01003be <_warn>
f0115ade:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ae1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ae5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115aeb:	85 c0                	test   %eax,%eax
f0115aed:	74 27                	je     f0115b16 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115aef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115af5:	83 ec 0c             	sub    $0xc,%esp
f0115af8:	6a 00                	push   $0x0
f0115afa:	50                   	push   %eax
f0115afb:	68 2c 83 13 f0       	push   $0xf013832c
f0115b00:	68 8b 06 00 00       	push   $0x68b
f0115b05:	68 1a 69 13 f0       	push   $0xf013691a
f0115b0a:	e8 af a8 fe ff       	call   f01003be <_warn>
f0115b0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b16:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b1a:	74 04                	je     f0115b20 <test_calculate_allocated_space+0x462>
f0115b1c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b20:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115b24:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b2b:	00 00 00 
		num_pages = 0;
f0115b2e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b35:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115b38:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115b3b:	89 d0                	mov    %edx,%eax
f0115b3d:	c1 e0 02             	shl    $0x2,%eax
f0115b40:	01 d0                	add    %edx,%eax
f0115b42:	01 c0                	add    %eax,%eax
f0115b44:	05 00 00 40 00       	add    $0x400000,%eax
f0115b49:	89 c2                	mov    %eax,%edx
f0115b4b:	83 ec 0c             	sub    $0xc,%esp
f0115b4e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b54:	50                   	push   %eax
f0115b55:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b5b:	50                   	push   %eax
f0115b5c:	52                   	push   %edx
f0115b5d:	68 00 00 40 00       	push   $0x400000
f0115b62:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b65:	e8 bf 2c ff ff       	call   f0108829 <calculate_allocated_space>
f0115b6a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b6d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b73:	85 c0                	test   %eax,%eax
f0115b75:	74 27                	je     f0115b9e <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b77:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b7d:	83 ec 0c             	sub    $0xc,%esp
f0115b80:	6a 00                	push   $0x0
f0115b82:	50                   	push   %eax
f0115b83:	68 cc 82 13 f0       	push   $0xf01382cc
f0115b88:	68 97 06 00 00       	push   $0x697
f0115b8d:	68 1a 69 13 f0       	push   $0xf013691a
f0115b92:	e8 27 a8 fe ff       	call   f01003be <_warn>
f0115b97:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b9a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b9e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ba4:	85 c0                	test   %eax,%eax
f0115ba6:	74 27                	je     f0115bcf <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ba8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bae:	83 ec 0c             	sub    $0xc,%esp
f0115bb1:	6a 00                	push   $0x0
f0115bb3:	50                   	push   %eax
f0115bb4:	68 2c 83 13 f0       	push   $0xf013832c
f0115bb9:	68 9c 06 00 00       	push   $0x69c
f0115bbe:	68 1a 69 13 f0       	push   $0xf013691a
f0115bc3:	e8 f6 a7 fe ff       	call   f01003be <_warn>
f0115bc8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bcb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bcf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bd3:	74 04                	je     f0115bd9 <test_calculate_allocated_space+0x51b>
f0115bd5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115bd9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115bdd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115be4:	00 00 00 
		num_pages = 0;
f0115be7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bee:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115bf1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bf4:	05 00 00 38 00       	add    $0x380000,%eax
f0115bf9:	01 c0                	add    %eax,%eax
f0115bfb:	89 c2                	mov    %eax,%edx
f0115bfd:	83 ec 0c             	sub    $0xc,%esp
f0115c00:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c06:	50                   	push   %eax
f0115c07:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c0d:	50                   	push   %eax
f0115c0e:	52                   	push   %edx
f0115c0f:	68 00 00 70 00       	push   $0x700000
f0115c14:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c17:	e8 0d 2c ff ff       	call   f0108829 <calculate_allocated_space>
f0115c1c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c25:	85 c0                	test   %eax,%eax
f0115c27:	74 27                	je     f0115c50 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c29:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c2f:	83 ec 0c             	sub    $0xc,%esp
f0115c32:	6a 00                	push   $0x0
f0115c34:	50                   	push   %eax
f0115c35:	68 cc 82 13 f0       	push   $0xf01382cc
f0115c3a:	68 a9 06 00 00       	push   $0x6a9
f0115c3f:	68 1a 69 13 f0       	push   $0xf013691a
f0115c44:	e8 75 a7 fe ff       	call   f01003be <_warn>
f0115c49:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c50:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c56:	85 c0                	test   %eax,%eax
f0115c58:	74 27                	je     f0115c81 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c5a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c60:	83 ec 0c             	sub    $0xc,%esp
f0115c63:	6a 00                	push   $0x0
f0115c65:	50                   	push   %eax
f0115c66:	68 2c 83 13 f0       	push   $0xf013832c
f0115c6b:	68 ae 06 00 00       	push   $0x6ae
f0115c70:	68 1a 69 13 f0       	push   $0xf013691a
f0115c75:	e8 44 a7 fe ff       	call   f01003be <_warn>
f0115c7a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c7d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c81:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c85:	74 04                	je     f0115c8b <test_calculate_allocated_space+0x5cd>
f0115c87:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c8b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115c8f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c96:	00 00 00 
		num_pages = 0;
f0115c99:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ca0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115ca3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ca6:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115cab:	89 c2                	mov    %eax,%edx
f0115cad:	83 ec 0c             	sub    $0xc,%esp
f0115cb0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cb6:	50                   	push   %eax
f0115cb7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cbd:	50                   	push   %eax
f0115cbe:	52                   	push   %edx
f0115cbf:	68 ff ff 3f 00       	push   $0x3fffff
f0115cc4:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cc7:	e8 5d 2b ff ff       	call   f0108829 <calculate_allocated_space>
f0115ccc:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ccf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cd5:	85 c0                	test   %eax,%eax
f0115cd7:	74 27                	je     f0115d00 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cd9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cdf:	83 ec 0c             	sub    $0xc,%esp
f0115ce2:	6a 00                	push   $0x0
f0115ce4:	50                   	push   %eax
f0115ce5:	68 cc 82 13 f0       	push   $0xf01382cc
f0115cea:	68 ba 06 00 00       	push   $0x6ba
f0115cef:	68 1a 69 13 f0       	push   $0xf013691a
f0115cf4:	e8 c5 a6 fe ff       	call   f01003be <_warn>
f0115cf9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cfc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d00:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d06:	85 c0                	test   %eax,%eax
f0115d08:	74 27                	je     f0115d31 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d0a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d10:	83 ec 0c             	sub    $0xc,%esp
f0115d13:	6a 00                	push   $0x0
f0115d15:	50                   	push   %eax
f0115d16:	68 2c 83 13 f0       	push   $0xf013832c
f0115d1b:	68 bf 06 00 00       	push   $0x6bf
f0115d20:	68 1a 69 13 f0       	push   $0xf013691a
f0115d25:	e8 94 a6 fe ff       	call   f01003be <_warn>
f0115d2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115d31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d35:	74 04                	je     f0115d3b <test_calculate_allocated_space+0x67d>
f0115d37:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115d3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115d3f:	83 ec 0c             	sub    $0xc,%esp
f0115d42:	68 cd 7c 13 f0       	push   $0xf0137ccd
f0115d47:	e8 e5 b0 fe ff       	call   f0100e31 <cprintf>
f0115d4c:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115d4f:	83 ec 0c             	sub    $0xc,%esp
f0115d52:	68 ec 81 13 f0       	push   $0xf01381ec
f0115d57:	e8 d5 b0 fe ff       	call   f0100e31 <cprintf>
f0115d5c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115d5f:	83 ec 04             	sub    $0x4,%esp
f0115d62:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115d68:	50                   	push   %eax
f0115d69:	68 86 70 13 f0       	push   $0xf0137086
f0115d6e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d74:	50                   	push   %eax
f0115d75:	e8 b2 92 01 00       	call   f012f02c <strcconcat>
f0115d7a:	83 c4 10             	add    $0x10,%esp
f0115d7d:	83 ec 0c             	sub    $0xc,%esp
f0115d80:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115d86:	50                   	push   %eax
f0115d87:	e8 37 be fe ff       	call   f0101bc3 <execute_command>
f0115d8c:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115d8f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d96:	00 00 00 
		num_pages = 0;
f0115d99:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115da0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115da3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115da6:	c1 e0 03             	shl    $0x3,%eax
f0115da9:	89 c2                	mov    %eax,%edx
f0115dab:	83 ec 0c             	sub    $0xc,%esp
f0115dae:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115db4:	50                   	push   %eax
f0115db5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115dbb:	50                   	push   %eax
f0115dbc:	52                   	push   %edx
f0115dbd:	6a 00                	push   $0x0
f0115dbf:	ff 75 d8             	pushl  -0x28(%ebp)
f0115dc2:	e8 62 2a ff ff       	call   f0108829 <calculate_allocated_space>
f0115dc7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115dca:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115dd1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115dd8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dde:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115de1:	74 28                	je     f0115e0b <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115de3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115de9:	83 ec 0c             	sub    $0xc,%esp
f0115dec:	ff 75 c8             	pushl  -0x38(%ebp)
f0115def:	50                   	push   %eax
f0115df0:	68 cc 82 13 f0       	push   $0xf01382cc
f0115df5:	68 d6 06 00 00       	push   $0x6d6
f0115dfa:	68 1a 69 13 f0       	push   $0xf013691a
f0115dff:	e8 ba a5 fe ff       	call   f01003be <_warn>
f0115e04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115e0b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e11:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e14:	74 28                	je     f0115e3e <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e16:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e1c:	83 ec 0c             	sub    $0xc,%esp
f0115e1f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e22:	50                   	push   %eax
f0115e23:	68 2c 83 13 f0       	push   $0xf013832c
f0115e28:	68 db 06 00 00       	push   $0x6db
f0115e2d:	68 1a 69 13 f0       	push   $0xf013691a
f0115e32:	e8 87 a5 fe ff       	call   f01003be <_warn>
f0115e37:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e3a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e3e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e42:	74 04                	je     f0115e48 <test_calculate_allocated_space+0x78a>
f0115e44:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e48:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115e4c:	83 ec 04             	sub    $0x4,%esp
f0115e4f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e55:	50                   	push   %eax
f0115e56:	68 93 70 13 f0       	push   $0xf0137093
f0115e5b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e61:	50                   	push   %eax
f0115e62:	e8 c5 91 01 00       	call   f012f02c <strcconcat>
f0115e67:	83 c4 10             	add    $0x10,%esp
f0115e6a:	83 ec 0c             	sub    $0xc,%esp
f0115e6d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e73:	50                   	push   %eax
f0115e74:	e8 4a bd fe ff       	call   f0101bc3 <execute_command>
f0115e79:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115e7c:	83 ec 04             	sub    $0x4,%esp
f0115e7f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115e85:	50                   	push   %eax
f0115e86:	68 20 82 13 f0       	push   $0xf0138220
f0115e8b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e91:	50                   	push   %eax
f0115e92:	e8 95 91 01 00       	call   f012f02c <strcconcat>
f0115e97:	83 c4 10             	add    $0x10,%esp
f0115e9a:	83 ec 0c             	sub    $0xc,%esp
f0115e9d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115ea3:	50                   	push   %eax
f0115ea4:	e8 1a bd fe ff       	call   f0101bc3 <execute_command>
f0115ea9:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115eac:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eb3:	00 00 00 
		num_pages = 0;
f0115eb6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ebd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115ec0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ec3:	c1 e0 03             	shl    $0x3,%eax
f0115ec6:	89 c2                	mov    %eax,%edx
f0115ec8:	83 ec 0c             	sub    $0xc,%esp
f0115ecb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ed1:	50                   	push   %eax
f0115ed2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ed8:	50                   	push   %eax
f0115ed9:	52                   	push   %edx
f0115eda:	6a 00                	push   $0x0
f0115edc:	ff 75 d8             	pushl  -0x28(%ebp)
f0115edf:	e8 45 29 ff ff       	call   f0108829 <calculate_allocated_space>
f0115ee4:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115ee7:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115eee:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ef5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115efb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115efe:	74 28                	je     f0115f28 <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115f00:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f06:	83 ec 0c             	sub    $0xc,%esp
f0115f09:	ff 75 c8             	pushl  -0x38(%ebp)
f0115f0c:	50                   	push   %eax
f0115f0d:	68 cc 82 13 f0       	push   $0xf01382cc
f0115f12:	68 ec 06 00 00       	push   $0x6ec
f0115f17:	68 1a 69 13 f0       	push   $0xf013691a
f0115f1c:	e8 9d a4 fe ff       	call   f01003be <_warn>
f0115f21:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f24:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115f28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f2e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115f31:	74 28                	je     f0115f5b <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115f33:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f39:	83 ec 0c             	sub    $0xc,%esp
f0115f3c:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115f3f:	50                   	push   %eax
f0115f40:	68 2c 83 13 f0       	push   $0xf013832c
f0115f45:	68 f1 06 00 00       	push   $0x6f1
f0115f4a:	68 1a 69 13 f0       	push   $0xf013691a
f0115f4f:	e8 6a a4 fe ff       	call   f01003be <_warn>
f0115f54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f5b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f5f:	74 04                	je     f0115f65 <test_calculate_allocated_space+0x8a7>
f0115f61:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f65:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115f69:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f70:	00 00 00 
		num_pages = 0;
f0115f73:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f7a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115f7d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f80:	c1 e0 0a             	shl    $0xa,%eax
f0115f83:	89 c2                	mov    %eax,%edx
f0115f85:	83 ec 0c             	sub    $0xc,%esp
f0115f88:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f8e:	50                   	push   %eax
f0115f8f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f95:	50                   	push   %eax
f0115f96:	52                   	push   %edx
f0115f97:	6a 00                	push   $0x0
f0115f99:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f9c:	e8 88 28 ff ff       	call   f0108829 <calculate_allocated_space>
f0115fa1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115fa4:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115fab:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115fb2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fb8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115fbb:	74 28                	je     f0115fe5 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115fbd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fc3:	83 ec 0c             	sub    $0xc,%esp
f0115fc6:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fc9:	50                   	push   %eax
f0115fca:	68 cc 82 13 f0       	push   $0xf01382cc
f0115fcf:	68 ff 06 00 00       	push   $0x6ff
f0115fd4:	68 1a 69 13 f0       	push   $0xf013691a
f0115fd9:	e8 e0 a3 fe ff       	call   f01003be <_warn>
f0115fde:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fe1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115fe5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115feb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115fee:	74 28                	je     f0116018 <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ff0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ff6:	83 ec 0c             	sub    $0xc,%esp
f0115ff9:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ffc:	50                   	push   %eax
f0115ffd:	68 2c 83 13 f0       	push   $0xf013832c
f0116002:	68 04 07 00 00       	push   $0x704
f0116007:	68 1a 69 13 f0       	push   $0xf013691a
f011600c:	e8 ad a3 fe ff       	call   f01003be <_warn>
f0116011:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116014:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116018:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011601c:	74 04                	je     f0116022 <test_calculate_allocated_space+0x964>
f011601e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116022:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116026:	83 ec 04             	sub    $0x4,%esp
f0116029:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011602f:	50                   	push   %eax
f0116030:	68 2c 82 13 f0       	push   $0xf013822c
f0116035:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011603b:	50                   	push   %eax
f011603c:	e8 eb 8f 01 00       	call   f012f02c <strcconcat>
f0116041:	83 c4 10             	add    $0x10,%esp
f0116044:	83 ec 0c             	sub    $0xc,%esp
f0116047:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011604d:	50                   	push   %eax
f011604e:	e8 70 bb fe ff       	call   f0101bc3 <execute_command>
f0116053:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116056:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011605d:	00 00 00 
		num_pages = 0;
f0116060:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116067:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011606a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011606d:	89 c2                	mov    %eax,%edx
f011606f:	01 d2                	add    %edx,%edx
f0116071:	01 d0                	add    %edx,%eax
f0116073:	05 00 18 00 00       	add    $0x1800,%eax
f0116078:	89 c2                	mov    %eax,%edx
f011607a:	83 ec 0c             	sub    $0xc,%esp
f011607d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116083:	50                   	push   %eax
f0116084:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011608a:	50                   	push   %eax
f011608b:	52                   	push   %edx
f011608c:	68 00 18 00 00       	push   $0x1800
f0116091:	ff 75 d8             	pushl  -0x28(%ebp)
f0116094:	e8 90 27 ff ff       	call   f0108829 <calculate_allocated_space>
f0116099:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011609c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01160a3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160aa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160b0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01160b3:	74 28                	je     f01160dd <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01160b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160bb:	83 ec 0c             	sub    $0xc,%esp
f01160be:	ff 75 c8             	pushl  -0x38(%ebp)
f01160c1:	50                   	push   %eax
f01160c2:	68 cc 82 13 f0       	push   $0xf01382cc
f01160c7:	68 15 07 00 00       	push   $0x715
f01160cc:	68 1a 69 13 f0       	push   $0xf013691a
f01160d1:	e8 e8 a2 fe ff       	call   f01003be <_warn>
f01160d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01160dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160e3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01160e6:	74 28                	je     f0116110 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01160e8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160ee:	83 ec 0c             	sub    $0xc,%esp
f01160f1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01160f4:	50                   	push   %eax
f01160f5:	68 2c 83 13 f0       	push   $0xf013832c
f01160fa:	68 1a 07 00 00       	push   $0x71a
f01160ff:	68 1a 69 13 f0       	push   $0xf013691a
f0116104:	e8 b5 a2 fe ff       	call   f01003be <_warn>
f0116109:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011610c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116110:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116114:	74 04                	je     f011611a <test_calculate_allocated_space+0xa5c>
f0116116:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011611a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011611e:	83 ec 04             	sub    $0x4,%esp
f0116121:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116127:	50                   	push   %eax
f0116128:	68 ec 72 13 f0       	push   $0xf01372ec
f011612d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116133:	50                   	push   %eax
f0116134:	e8 f3 8e 01 00       	call   f012f02c <strcconcat>
f0116139:	83 c4 10             	add    $0x10,%esp
f011613c:	83 ec 0c             	sub    $0xc,%esp
f011613f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116145:	50                   	push   %eax
f0116146:	e8 78 ba fe ff       	call   f0101bc3 <execute_command>
f011614b:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011614e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116155:	00 00 00 
		num_pages = 0;
f0116158:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011615f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116162:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116165:	89 d0                	mov    %edx,%eax
f0116167:	c1 e0 02             	shl    $0x2,%eax
f011616a:	01 d0                	add    %edx,%eax
f011616c:	01 c0                	add    %eax,%eax
f011616e:	05 00 00 40 00       	add    $0x400000,%eax
f0116173:	89 c2                	mov    %eax,%edx
f0116175:	83 ec 0c             	sub    $0xc,%esp
f0116178:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011617e:	50                   	push   %eax
f011617f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116185:	50                   	push   %eax
f0116186:	52                   	push   %edx
f0116187:	68 00 00 40 00       	push   $0x400000
f011618c:	ff 75 d8             	pushl  -0x28(%ebp)
f011618f:	e8 95 26 ff ff       	call   f0108829 <calculate_allocated_space>
f0116194:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116197:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011619e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161ab:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161ae:	74 28                	je     f01161d8 <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161b6:	83 ec 0c             	sub    $0xc,%esp
f01161b9:	ff 75 c8             	pushl  -0x38(%ebp)
f01161bc:	50                   	push   %eax
f01161bd:	68 cc 82 13 f0       	push   $0xf01382cc
f01161c2:	68 2a 07 00 00       	push   $0x72a
f01161c7:	68 1a 69 13 f0       	push   $0xf013691a
f01161cc:	e8 ed a1 fe ff       	call   f01003be <_warn>
f01161d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01161d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161de:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01161e1:	74 28                	je     f011620b <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01161e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161e9:	83 ec 0c             	sub    $0xc,%esp
f01161ec:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161ef:	50                   	push   %eax
f01161f0:	68 2c 83 13 f0       	push   $0xf013832c
f01161f5:	68 2f 07 00 00       	push   $0x72f
f01161fa:	68 1a 69 13 f0       	push   $0xf013691a
f01161ff:	e8 ba a1 fe ff       	call   f01003be <_warn>
f0116204:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116207:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011620b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011620f:	74 04                	je     f0116215 <test_calculate_allocated_space+0xb57>
f0116211:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116215:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116219:	83 ec 04             	sub    $0x4,%esp
f011621c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116222:	50                   	push   %eax
f0116223:	68 f6 72 13 f0       	push   $0xf01372f6
f0116228:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011622e:	50                   	push   %eax
f011622f:	e8 f8 8d 01 00       	call   f012f02c <strcconcat>
f0116234:	83 c4 10             	add    $0x10,%esp
f0116237:	83 ec 0c             	sub    $0xc,%esp
f011623a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116240:	50                   	push   %eax
f0116241:	e8 7d b9 fe ff       	call   f0101bc3 <execute_command>
f0116246:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116249:	83 ec 04             	sub    $0x4,%esp
f011624c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116252:	50                   	push   %eax
f0116253:	68 34 82 13 f0       	push   $0xf0138234
f0116258:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011625e:	50                   	push   %eax
f011625f:	e8 c8 8d 01 00       	call   f012f02c <strcconcat>
f0116264:	83 c4 10             	add    $0x10,%esp
f0116267:	83 ec 0c             	sub    $0xc,%esp
f011626a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116270:	50                   	push   %eax
f0116271:	e8 4d b9 fe ff       	call   f0101bc3 <execute_command>
f0116276:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116279:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116280:	00 00 00 
		num_pages = 0;
f0116283:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011628a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011628d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116290:	05 00 00 38 00       	add    $0x380000,%eax
f0116295:	01 c0                	add    %eax,%eax
f0116297:	89 c2                	mov    %eax,%edx
f0116299:	83 ec 0c             	sub    $0xc,%esp
f011629c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162a2:	50                   	push   %eax
f01162a3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162a9:	50                   	push   %eax
f01162aa:	52                   	push   %edx
f01162ab:	68 00 00 70 00       	push   $0x700000
f01162b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01162b3:	e8 71 25 ff ff       	call   f0108829 <calculate_allocated_space>
f01162b8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01162bb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01162c2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162cf:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162d2:	74 28                	je     f01162fc <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162da:	83 ec 0c             	sub    $0xc,%esp
f01162dd:	ff 75 c8             	pushl  -0x38(%ebp)
f01162e0:	50                   	push   %eax
f01162e1:	68 cc 82 13 f0       	push   $0xf01382cc
f01162e6:	68 41 07 00 00       	push   $0x741
f01162eb:	68 1a 69 13 f0       	push   $0xf013691a
f01162f0:	e8 c9 a0 fe ff       	call   f01003be <_warn>
f01162f5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162f8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116302:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116305:	74 28                	je     f011632f <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116307:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011630d:	83 ec 0c             	sub    $0xc,%esp
f0116310:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116313:	50                   	push   %eax
f0116314:	68 2c 83 13 f0       	push   $0xf013832c
f0116319:	68 46 07 00 00       	push   $0x746
f011631e:	68 1a 69 13 f0       	push   $0xf013691a
f0116323:	e8 96 a0 fe ff       	call   f01003be <_warn>
f0116328:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011632b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011632f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116333:	74 04                	je     f0116339 <test_calculate_allocated_space+0xc7b>
f0116335:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116339:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011633d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116344:	00 00 00 
		num_pages = 0;
f0116347:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011634e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116351:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116354:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116359:	89 c2                	mov    %eax,%edx
f011635b:	83 ec 0c             	sub    $0xc,%esp
f011635e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116364:	50                   	push   %eax
f0116365:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011636b:	50                   	push   %eax
f011636c:	52                   	push   %edx
f011636d:	68 ff ff 3f 00       	push   $0x3fffff
f0116372:	ff 75 d8             	pushl  -0x28(%ebp)
f0116375:	e8 af 24 ff ff       	call   f0108829 <calculate_allocated_space>
f011637a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011637d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116384:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011638b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116391:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116394:	74 28                	je     f01163be <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116396:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011639c:	83 ec 0c             	sub    $0xc,%esp
f011639f:	ff 75 c8             	pushl  -0x38(%ebp)
f01163a2:	50                   	push   %eax
f01163a3:	68 cc 82 13 f0       	push   $0xf01382cc
f01163a8:	68 54 07 00 00       	push   $0x754
f01163ad:	68 1a 69 13 f0       	push   $0xf013691a
f01163b2:	e8 07 a0 fe ff       	call   f01003be <_warn>
f01163b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01163be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163c4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01163c7:	74 28                	je     f01163f1 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01163c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163cf:	83 ec 0c             	sub    $0xc,%esp
f01163d2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01163d5:	50                   	push   %eax
f01163d6:	68 2c 83 13 f0       	push   $0xf013832c
f01163db:	68 59 07 00 00       	push   $0x759
f01163e0:	68 1a 69 13 f0       	push   $0xf013691a
f01163e5:	e8 d4 9f fe ff       	call   f01003be <_warn>
f01163ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01163f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163f5:	74 04                	je     f01163fb <test_calculate_allocated_space+0xd3d>
f01163f7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01163fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01163ff:	83 ec 0c             	sub    $0xc,%esp
f0116402:	68 a7 72 13 f0       	push   $0xf01372a7
f0116407:	e8 25 aa fe ff       	call   f0100e31 <cprintf>
f011640c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f011640f:	83 ec 08             	sub    $0x8,%esp
f0116412:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116415:	68 88 83 13 f0       	push   $0xf0138388
f011641a:	e8 12 aa fe ff       	call   f0100e31 <cprintf>
f011641f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116422:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116426:	75 10                	jne    f0116438 <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116428:	83 ec 0c             	sub    $0xc,%esp
f011642b:	68 c8 83 13 f0       	push   $0xf01383c8
f0116430:	e8 fc a9 fe ff       	call   f0100e31 <cprintf>
f0116435:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116438:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f011643d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116440:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116443:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116446:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011644b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011644e:	5b                   	pop    %ebx
f011644f:	5e                   	pop    %esi
f0116450:	5f                   	pop    %edi
f0116451:	5d                   	pop    %ebp
f0116452:	c3                   	ret    

f0116453 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116453:	55                   	push   %ebp
f0116454:	89 e5                	mov    %esp,%ebp
f0116456:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116459:	8b 45 10             	mov    0x10(%ebp),%eax
f011645c:	ba 01 00 00 00       	mov    $0x1,%edx
f0116461:	88 c1                	mov    %al,%cl
f0116463:	d3 e2                	shl    %cl,%edx
f0116465:	89 d0                	mov    %edx,%eax
f0116467:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011646a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011646d:	c1 e8 16             	shr    $0x16,%eax
f0116470:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116477:	8b 45 08             	mov    0x8(%ebp),%eax
f011647a:	01 d0                	add    %edx,%eax
f011647c:	8b 00                	mov    (%eax),%eax
f011647e:	83 e0 01             	and    $0x1,%eax
f0116481:	85 c0                	test   %eax,%eax
f0116483:	75 07                	jne    f011648c <CB+0x39>
f0116485:	b8 00 00 00 00       	mov    $0x0,%eax
f011648a:	eb 76                	jmp    f0116502 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011648c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011648f:	c1 e8 16             	shr    $0x16,%eax
f0116492:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116499:	8b 45 08             	mov    0x8(%ebp),%eax
f011649c:	01 d0                	add    %edx,%eax
f011649e:	8b 00                	mov    (%eax),%eax
f01164a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01164a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01164a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01164ab:	c1 e8 0c             	shr    $0xc,%eax
f01164ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01164b1:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01164b6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01164b9:	72 17                	jb     f01164d2 <CB+0x7f>
f01164bb:	ff 75 f0             	pushl  -0x10(%ebp)
f01164be:	68 14 84 13 f0       	push   $0xf0138414
f01164c3:	68 74 07 00 00       	push   $0x774
f01164c8:	68 1a 69 13 f0       	push   $0xf013691a
f01164cd:	e8 de 9c fe ff       	call   f01001b0 <_panic>
f01164d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01164d5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01164da:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01164dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01164e0:	c1 e8 0c             	shr    $0xc,%eax
f01164e3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01164e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01164f2:	01 d0                	add    %edx,%eax
f01164f4:	8b 00                	mov    (%eax),%eax
f01164f6:	23 45 f4             	and    -0xc(%ebp),%eax
f01164f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01164fc:	0f 94 c0             	sete   %al
f01164ff:	0f b6 c0             	movzbl %al,%eax
}
f0116502:	c9                   	leave  
f0116503:	c3                   	ret    

f0116504 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116504:	55                   	push   %ebp
f0116505:	89 e5                	mov    %esp,%ebp
f0116507:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011650a:	8b 45 10             	mov    0x10(%ebp),%eax
f011650d:	ba 01 00 00 00       	mov    $0x1,%edx
f0116512:	88 c1                	mov    %al,%cl
f0116514:	d3 e2                	shl    %cl,%edx
f0116516:	89 d0                	mov    %edx,%eax
f0116518:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011651b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011651e:	c1 e8 16             	shr    $0x16,%eax
f0116521:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116528:	8b 45 08             	mov    0x8(%ebp),%eax
f011652b:	01 d0                	add    %edx,%eax
f011652d:	8b 00                	mov    (%eax),%eax
f011652f:	83 e0 01             	and    $0x1,%eax
f0116532:	85 c0                	test   %eax,%eax
f0116534:	75 0a                	jne    f0116540 <SB+0x3c>
f0116536:	b8 00 00 00 00       	mov    $0x0,%eax
f011653b:	e9 cd 00 00 00       	jmp    f011660d <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116543:	c1 e8 16             	shr    $0x16,%eax
f0116546:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011654d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116550:	01 d0                	add    %edx,%eax
f0116552:	8b 00                	mov    (%eax),%eax
f0116554:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116559:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011655c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011655f:	c1 e8 0c             	shr    $0xc,%eax
f0116562:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116565:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f011656a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011656d:	72 17                	jb     f0116586 <SB+0x82>
f011656f:	ff 75 f0             	pushl  -0x10(%ebp)
f0116572:	68 14 84 13 f0       	push   $0xf0138414
f0116577:	68 7c 07 00 00       	push   $0x77c
f011657c:	68 1a 69 13 f0       	push   $0xf013691a
f0116581:	e8 2a 9c fe ff       	call   f01001b0 <_panic>
f0116586:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011658e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116591:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116595:	74 3c                	je     f01165d3 <SB+0xcf>
f0116597:	8b 45 0c             	mov    0xc(%ebp),%eax
f011659a:	c1 e8 0c             	shr    $0xc,%eax
f011659d:	25 ff 03 00 00       	and    $0x3ff,%eax
f01165a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01165ac:	01 d0                	add    %edx,%eax
f01165ae:	8b 55 0c             	mov    0xc(%ebp),%edx
f01165b1:	c1 ea 0c             	shr    $0xc,%edx
f01165b4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01165ba:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01165c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01165c4:	01 ca                	add    %ecx,%edx
f01165c6:	8b 12                	mov    (%edx),%edx
f01165c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01165cb:	f7 d1                	not    %ecx
f01165cd:	21 ca                	and    %ecx,%edx
f01165cf:	89 10                	mov    %edx,(%eax)
f01165d1:	eb 35                	jmp    f0116608 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f01165d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165d6:	c1 e8 0c             	shr    $0xc,%eax
f01165d9:	25 ff 03 00 00       	and    $0x3ff,%eax
f01165de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01165e8:	01 c2                	add    %eax,%edx
f01165ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165ed:	c1 e8 0c             	shr    $0xc,%eax
f01165f0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01165f5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01165fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01165ff:	01 c8                	add    %ecx,%eax
f0116601:	8b 00                	mov    (%eax),%eax
f0116603:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116606:	89 02                	mov    %eax,(%edx)
	return 0;
f0116608:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011660d:	c9                   	leave  
f011660e:	c3                   	ret    

f011660f <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011660f:	55                   	push   %ebp
f0116610:	89 e5                	mov    %esp,%ebp
f0116612:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116615:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116618:	c1 e8 16             	shr    $0x16,%eax
f011661b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116622:	8b 45 08             	mov    0x8(%ebp),%eax
f0116625:	01 d0                	add    %edx,%eax
f0116627:	8b 00                	mov    (%eax),%eax
f0116629:	83 e0 01             	and    $0x1,%eax
f011662c:	85 c0                	test   %eax,%eax
f011662e:	75 0a                	jne    f011663a <CPs+0x2b>
f0116630:	b8 00 00 00 00       	mov    $0x0,%eax
f0116635:	e9 b8 00 00 00       	jmp    f01166f2 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011663a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011663d:	c1 e8 16             	shr    $0x16,%eax
f0116640:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116647:	8b 45 08             	mov    0x8(%ebp),%eax
f011664a:	01 d0                	add    %edx,%eax
f011664c:	8b 00                	mov    (%eax),%eax
f011664e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116653:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116656:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116659:	c1 e8 0c             	shr    $0xc,%eax
f011665c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011665f:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116664:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116667:	72 17                	jb     f0116680 <CPs+0x71>
f0116669:	ff 75 f0             	pushl  -0x10(%ebp)
f011666c:	68 14 84 13 f0       	push   $0xf0138414
f0116671:	68 85 07 00 00       	push   $0x785
f0116676:	68 1a 69 13 f0       	push   $0xf013691a
f011667b:	e8 30 9b fe ff       	call   f01001b0 <_panic>
f0116680:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116683:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116688:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f011668b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116692:	eb 53                	jmp    f01166e7 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116694:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116697:	ba 01 00 00 00       	mov    $0x1,%edx
f011669c:	88 c1                	mov    %al,%cl
f011669e:	d3 e2                	shl    %cl,%edx
f01166a0:	89 d0                	mov    %edx,%eax
f01166a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f01166a5:	8b 45 14             	mov    0x14(%ebp),%eax
f01166a8:	23 45 e4             	and    -0x1c(%ebp),%eax
f01166ab:	85 c0                	test   %eax,%eax
f01166ad:	74 34                	je     f01166e3 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f01166af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166b2:	c1 e8 0c             	shr    $0xc,%eax
f01166b5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01166ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01166c4:	01 d0                	add    %edx,%eax
f01166c6:	8b 00                	mov    (%eax),%eax
f01166c8:	33 45 10             	xor    0x10(%ebp),%eax
f01166cb:	23 45 e4             	and    -0x1c(%ebp),%eax
f01166ce:	85 c0                	test   %eax,%eax
f01166d0:	0f 94 c0             	sete   %al
f01166d3:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f01166d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01166da:	75 08                	jne    f01166e4 <CPs+0xd5>
f01166dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01166e1:	eb 0f                	jmp    f01166f2 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f01166e3:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f01166e4:	ff 45 f4             	incl   -0xc(%ebp)
f01166e7:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f01166eb:	7e a7                	jle    f0116694 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f01166ed:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01166f2:	c9                   	leave  
f01166f3:	c3                   	ret    

f01166f4 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f01166f4:	55                   	push   %ebp
f01166f5:	89 e5                	mov    %esp,%ebp
f01166f7:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166fd:	c1 e8 16             	shr    $0x16,%eax
f0116700:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116707:	8b 45 08             	mov    0x8(%ebp),%eax
f011670a:	01 d0                	add    %edx,%eax
f011670c:	8b 00                	mov    (%eax),%eax
f011670e:	83 e0 01             	and    $0x1,%eax
f0116711:	85 c0                	test   %eax,%eax
f0116713:	75 07                	jne    f011671c <CA+0x28>
f0116715:	b8 00 00 00 00       	mov    $0x0,%eax
f011671a:	eb 6f                	jmp    f011678b <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011671c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011671f:	c1 e8 16             	shr    $0x16,%eax
f0116722:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116729:	8b 45 08             	mov    0x8(%ebp),%eax
f011672c:	01 d0                	add    %edx,%eax
f011672e:	8b 00                	mov    (%eax),%eax
f0116730:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116735:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116738:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011673b:	c1 e8 0c             	shr    $0xc,%eax
f011673e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116741:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116746:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116749:	72 17                	jb     f0116762 <CA+0x6e>
f011674b:	ff 75 f4             	pushl  -0xc(%ebp)
f011674e:	68 14 84 13 f0       	push   $0xf0138414
f0116753:	68 94 07 00 00       	push   $0x794
f0116758:	68 1a 69 13 f0       	push   $0xf013691a
f011675d:	e8 4e 9a fe ff       	call   f01001b0 <_panic>
f0116762:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116765:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011676a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f011676d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116770:	c1 e8 0c             	shr    $0xc,%eax
f0116773:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116778:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011677f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116782:	01 d0                	add    %edx,%eax
f0116784:	8b 00                	mov    (%eax),%eax
f0116786:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f011678b:	c9                   	leave  
f011678c:	c3                   	ret    

f011678d <CE>:

int CE(uint32 *_d, uint32 va)
{
f011678d:	55                   	push   %ebp
f011678e:	89 e5                	mov    %esp,%ebp
f0116790:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116793:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116796:	c1 e8 16             	shr    $0x16,%eax
f0116799:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01167a3:	01 d0                	add    %edx,%eax
f01167a5:	8b 00                	mov    (%eax),%eax
f01167a7:	83 e0 01             	and    $0x1,%eax
f01167aa:	85 c0                	test   %eax,%eax
f01167ac:	75 07                	jne    f01167b5 <CE+0x28>
f01167ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01167b3:	eb 7a                	jmp    f011682f <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167b8:	c1 e8 16             	shr    $0x16,%eax
f01167bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01167c5:	01 d0                	add    %edx,%eax
f01167c7:	8b 00                	mov    (%eax),%eax
f01167c9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01167d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167d4:	c1 e8 0c             	shr    $0xc,%eax
f01167d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01167da:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f01167df:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01167e2:	72 17                	jb     f01167fb <CE+0x6e>
f01167e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01167e7:	68 14 84 13 f0       	push   $0xf0138414
f01167ec:	68 9b 07 00 00       	push   $0x79b
f01167f1:	68 1a 69 13 f0       	push   $0xf013691a
f01167f6:	e8 b5 99 fe ff       	call   f01001b0 <_panic>
f01167fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167fe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116803:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116806:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116809:	c1 e8 0c             	shr    $0xc,%eax
f011680c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116811:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116818:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011681b:	01 d0                	add    %edx,%eax
f011681d:	8b 00                	mov    (%eax),%eax
f011681f:	85 c0                	test   %eax,%eax
f0116821:	74 07                	je     f011682a <CE+0x9d>
f0116823:	b8 00 00 00 00       	mov    $0x0,%eax
f0116828:	eb 05                	jmp    f011682f <CE+0xa2>
	return 1;
f011682a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011682f:	c9                   	leave  
f0116830:	c3                   	ret    

f0116831 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116831:	55                   	push   %ebp
f0116832:	89 e5                	mov    %esp,%ebp
f0116834:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116837:	8b 45 0c             	mov    0xc(%ebp),%eax
f011683a:	c1 e8 16             	shr    $0x16,%eax
f011683d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116844:	8b 45 08             	mov    0x8(%ebp),%eax
f0116847:	01 d0                	add    %edx,%eax
f0116849:	8b 00                	mov    (%eax),%eax
f011684b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f011684e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116851:	83 e0 01             	and    $0x1,%eax
f0116854:	85 c0                	test   %eax,%eax
f0116856:	0f 84 92 00 00 00    	je     f01168ee <CP+0xbd>
	{
		uint32 *t = NULL;
f011685c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116866:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011686b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011686e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116871:	c1 e8 0c             	shr    $0xc,%eax
f0116874:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116877:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f011687c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f011687f:	72 17                	jb     f0116898 <CP+0x67>
f0116881:	ff 75 ec             	pushl  -0x14(%ebp)
f0116884:	68 14 84 13 f0       	push   $0xf0138414
f0116889:	68 a7 07 00 00       	push   $0x7a7
f011688e:	68 1a 69 13 f0       	push   $0xf013691a
f0116893:	e8 18 99 fe ff       	call   f01001b0 <_panic>
f0116898:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011689b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01168a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f01168a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168a6:	c1 e8 0c             	shr    $0xc,%eax
f01168a9:	25 ff 03 00 00       	and    $0x3ff,%eax
f01168ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168b8:	01 d0                	add    %edx,%eax
f01168ba:	8b 00                	mov    (%eax),%eax
f01168bc:	23 45 10             	and    0x10(%ebp),%eax
f01168bf:	3b 45 10             	cmp    0x10(%ebp),%eax
f01168c2:	75 2a                	jne    f01168ee <CP+0xbd>
f01168c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168c7:	c1 e8 0c             	shr    $0xc,%eax
f01168ca:	25 ff 03 00 00       	and    $0x3ff,%eax
f01168cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168d9:	01 d0                	add    %edx,%eax
f01168db:	8b 00                	mov    (%eax),%eax
f01168dd:	f7 d0                	not    %eax
f01168df:	23 45 14             	and    0x14(%ebp),%eax
f01168e2:	3b 45 14             	cmp    0x14(%ebp),%eax
f01168e5:	75 07                	jne    f01168ee <CP+0xbd>
			return 1;
f01168e7:	b8 01 00 00 00       	mov    $0x1,%eax
f01168ec:	eb 05                	jmp    f01168f3 <CP+0xc2>
	}
	return 0;
f01168ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01168f3:	c9                   	leave  
f01168f4:	c3                   	ret    

f01168f5 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01168f5:	55                   	push   %ebp
f01168f6:	89 e5                	mov    %esp,%ebp
f01168f8:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01168fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168fe:	c1 e8 16             	shr    $0x16,%eax
f0116901:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116908:	8b 45 08             	mov    0x8(%ebp),%eax
f011690b:	01 d0                	add    %edx,%eax
f011690d:	8b 00                	mov    (%eax),%eax
f011690f:	83 e0 01             	and    $0x1,%eax
f0116912:	85 c0                	test   %eax,%eax
f0116914:	75 07                	jne    f011691d <GP+0x28>
f0116916:	b8 00 00 00 00       	mov    $0x0,%eax
f011691b:	eb 6f                	jmp    f011698c <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011691d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116920:	c1 e8 16             	shr    $0x16,%eax
f0116923:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011692a:	8b 45 08             	mov    0x8(%ebp),%eax
f011692d:	01 d0                	add    %edx,%eax
f011692f:	8b 00                	mov    (%eax),%eax
f0116931:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116936:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116939:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011693c:	c1 e8 0c             	shr    $0xc,%eax
f011693f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116942:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f0116947:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011694a:	72 17                	jb     f0116963 <GP+0x6e>
f011694c:	ff 75 f4             	pushl  -0xc(%ebp)
f011694f:	68 14 84 13 f0       	push   $0xf0138414
f0116954:	68 b4 07 00 00       	push   $0x7b4
f0116959:	68 1a 69 13 f0       	push   $0xf013691a
f011695e:	e8 4d 98 fe ff       	call   f01001b0 <_panic>
f0116963:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116966:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011696b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f011696e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116971:	c1 e8 0c             	shr    $0xc,%eax
f0116974:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116979:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116980:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116983:	01 d0                	add    %edx,%eax
f0116985:	8b 00                	mov    (%eax),%eax
f0116987:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f011698c:	c9                   	leave  
f011698d:	c3                   	ret    

f011698e <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f011698e:	55                   	push   %ebp
f011698f:	89 e5                	mov    %esp,%ebp
f0116991:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116994:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011699b:	eb 18                	jmp    f01169b5 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011699d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01169a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01169aa:	01 d0                	add    %edx,%eax
f01169ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01169b2:	ff 45 fc             	incl   -0x4(%ebp)
f01169b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01169b8:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01169bd:	76 de                	jbe    f011699d <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01169bf:	90                   	nop
f01169c0:	c9                   	leave  
f01169c1:	c3                   	ret    

f01169c2 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01169c2:	55                   	push   %ebp
f01169c3:	89 e5                	mov    %esp,%ebp
f01169c5:	83 ec 38             	sub    $0x38,%esp
f01169c8:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01169cb:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01169ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01169d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01169d9:	8b 45 10             	mov    0x10(%ebp),%eax
f01169dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01169e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01169e4:	e9 ea 01 00 00       	jmp    f0116bd3 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01169e9:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01169ed:	74 44                	je     f0116a33 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01169ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01169f2:	83 ec 04             	sub    $0x4,%esp
f01169f5:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01169f8:	52                   	push   %edx
f01169f9:	50                   	push   %eax
f01169fa:	ff 75 08             	pushl  0x8(%ebp)
f01169fd:	e8 b1 09 ff ff       	call   f01073b3 <get_frame_info>
f0116a02:	83 c4 10             	add    $0x10,%esp
f0116a05:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116a08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116a0b:	85 c0                	test   %eax,%eax
f0116a0d:	75 24                	jne    f0116a33 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116a0f:	83 ec 04             	sub    $0x4,%esp
f0116a12:	68 44 84 13 f0       	push   $0xf0138444
f0116a17:	68 cf 07 00 00       	push   $0x7cf
f0116a1c:	68 1a 69 13 f0       	push   $0xf013691a
f0116a21:	e8 98 99 fe ff       	call   f01003be <_warn>
f0116a26:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a2e:	e9 b6 01 00 00       	jmp    f0116be9 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116a33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a36:	83 ec 04             	sub    $0x4,%esp
f0116a39:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116a3c:	52                   	push   %edx
f0116a3d:	50                   	push   %eax
f0116a3e:	ff 75 08             	pushl  0x8(%ebp)
f0116a41:	e8 6d 09 ff ff       	call   f01073b3 <get_frame_info>
f0116a46:	83 c4 10             	add    $0x10,%esp
f0116a49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116a4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a4f:	85 c0                	test   %eax,%eax
f0116a51:	75 24                	jne    f0116a77 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116a53:	83 ec 04             	sub    $0x4,%esp
f0116a56:	68 70 84 13 f0       	push   $0xf0138470
f0116a5b:	68 d6 07 00 00       	push   $0x7d6
f0116a60:	68 1a 69 13 f0       	push   $0xf013691a
f0116a65:	e8 54 99 fe ff       	call   f01003be <_warn>
f0116a6a:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116a6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a72:	e9 72 01 00 00       	jmp    f0116be9 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116a77:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116a7b:	75 70                	jne    f0116aed <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116a7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116a80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116a83:	c1 ea 0c             	shr    $0xc,%edx
f0116a86:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a8c:	c1 e2 02             	shl    $0x2,%edx
f0116a8f:	01 d0                	add    %edx,%eax
f0116a91:	8b 00                	mov    (%eax),%eax
f0116a93:	c1 e8 0c             	shr    $0xc,%eax
f0116a96:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116a99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116a9f:	c1 ea 0c             	shr    $0xc,%edx
f0116aa2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116aa8:	c1 e2 02             	shl    $0x2,%edx
f0116aab:	01 d0                	add    %edx,%eax
f0116aad:	8b 00                	mov    (%eax),%eax
f0116aaf:	c1 e8 0c             	shr    $0xc,%eax
f0116ab2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116ab8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116abb:	74 30                	je     f0116aed <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116abd:	83 ec 04             	sub    $0x4,%esp
f0116ac0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116ac3:	ff 75 e8             	pushl  -0x18(%ebp)
f0116ac6:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ac9:	ff 75 f4             	pushl  -0xc(%ebp)
f0116acc:	68 9c 84 13 f0       	push   $0xf013849c
f0116ad1:	68 e0 07 00 00       	push   $0x7e0
f0116ad6:	68 1a 69 13 f0       	push   $0xf013691a
f0116adb:	e8 de 98 fe ff       	call   f01003be <_warn>
f0116ae0:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116ae3:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ae8:	e9 fc 00 00 00       	jmp    f0116be9 <CCP+0x227>
			}
		}
		if (ref != -1)
f0116aed:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116af1:	74 52                	je     f0116b45 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116af3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116af7:	74 0e                	je     f0116b07 <CCP+0x145>
f0116af9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116afc:	8b 40 08             	mov    0x8(%eax),%eax
f0116aff:	0f b7 c0             	movzwl %ax,%eax
f0116b02:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116b05:	74 3e                	je     f0116b45 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116b07:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116b0b:	74 0b                	je     f0116b18 <CCP+0x156>
f0116b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b10:	8b 40 08             	mov    0x8(%eax),%eax
f0116b13:	0f b7 c0             	movzwl %ax,%eax
f0116b16:	eb 05                	jmp    f0116b1d <CCP+0x15b>
f0116b18:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b1d:	83 ec 0c             	sub    $0xc,%esp
f0116b20:	50                   	push   %eax
f0116b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0116b24:	68 f8 84 13 f0       	push   $0xf01384f8
f0116b29:	68 e8 07 00 00       	push   $0x7e8
f0116b2e:	68 1a 69 13 f0       	push   $0xf013691a
f0116b33:	e8 86 98 fe ff       	call   f01003be <_warn>
f0116b38:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116b3b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b40:	e9 a4 00 00 00       	jmp    f0116be9 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116b45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116b48:	ff 75 20             	pushl  0x20(%ebp)
f0116b4b:	ff 75 1c             	pushl  0x1c(%ebp)
f0116b4e:	50                   	push   %eax
f0116b4f:	ff 75 08             	pushl  0x8(%ebp)
f0116b52:	e8 b8 fa ff ff       	call   f011660f <CPs>
f0116b57:	83 c4 10             	add    $0x10,%esp
f0116b5a:	85 c0                	test   %eax,%eax
f0116b5c:	7f 21                	jg     f0116b7f <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116b5e:	83 ec 04             	sub    $0x4,%esp
f0116b61:	68 68 85 13 f0       	push   $0xf0138568
f0116b66:	68 ee 07 00 00       	push   $0x7ee
f0116b6b:	68 1a 69 13 f0       	push   $0xf013691a
f0116b70:	e8 49 98 fe ff       	call   f01003be <_warn>
f0116b75:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116b78:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b7d:	eb 6a                	jmp    f0116be9 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116b7f:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116b83:	74 3a                	je     f0116bbf <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116b85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b88:	ff 75 28             	pushl  0x28(%ebp)
f0116b8b:	ff 75 24             	pushl  0x24(%ebp)
f0116b8e:	50                   	push   %eax
f0116b8f:	ff 75 08             	pushl  0x8(%ebp)
f0116b92:	e8 78 fa ff ff       	call   f011660f <CPs>
f0116b97:	83 c4 10             	add    $0x10,%esp
f0116b9a:	85 c0                	test   %eax,%eax
f0116b9c:	7f 21                	jg     f0116bbf <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116b9e:	83 ec 04             	sub    $0x4,%esp
f0116ba1:	68 b0 85 13 f0       	push   $0xf01385b0
f0116ba6:	68 f5 07 00 00       	push   $0x7f5
f0116bab:	68 1a 69 13 f0       	push   $0xf013691a
f0116bb0:	e8 09 98 fe ff       	call   f01003be <_warn>
f0116bb5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116bb8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bbd:	eb 2a                	jmp    f0116be9 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116bbf:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116bc3:	74 07                	je     f0116bcc <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116bc5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116bcc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116bd3:	8b 55 10             	mov    0x10(%ebp),%edx
f0116bd6:	8b 45 14             	mov    0x14(%ebp),%eax
f0116bd9:	01 d0                	add    %edx,%eax
f0116bdb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116bde:	0f 87 05 fe ff ff    	ja     f01169e9 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116be4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116be9:	c9                   	leave  
f0116bea:	c3                   	ret    

f0116beb <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116beb:	55                   	push   %ebp
f0116bec:	89 e5                	mov    %esp,%ebp
f0116bee:	57                   	push   %edi
f0116bef:	56                   	push   %esi
f0116bf0:	53                   	push   %ebx
f0116bf1:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116bf7:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f0116bfc:	84 c0                	test   %al,%al
f0116bfe:	0f 84 38 0a 00 00    	je     f011763c <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116c04:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0116c0b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116c11:	bb 6c 88 13 f0       	mov    $0xf013886c,%ebx
f0116c16:	ba 04 00 00 00       	mov    $0x4,%edx
f0116c1b:	89 c7                	mov    %eax,%edi
f0116c1d:	89 de                	mov    %ebx,%esi
f0116c1f:	89 d1                	mov    %edx,%ecx
f0116c21:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116c23:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116c29:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116c2e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c33:	89 d7                	mov    %edx,%edi
f0116c35:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116c37:	83 ec 0c             	sub    $0xc,%esp
f0116c3a:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116c40:	50                   	push   %eax
f0116c41:	e8 7d af fe ff       	call   f0101bc3 <execute_command>
f0116c46:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116c49:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116c4f:	bb d0 88 13 f0       	mov    $0xf01388d0,%ebx
f0116c54:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116c59:	89 c7                	mov    %eax,%edi
f0116c5b:	89 de                	mov    %ebx,%esi
f0116c5d:	89 d1                	mov    %edx,%ecx
f0116c5f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c61:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116c67:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116c6c:	b0 00                	mov    $0x0,%al
f0116c6e:	89 d7                	mov    %edx,%edi
f0116c70:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116c72:	83 ec 0c             	sub    $0xc,%esp
f0116c75:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116c7b:	50                   	push   %eax
f0116c7c:	e8 42 af fe ff       	call   f0101bc3 <execute_command>
f0116c81:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116c84:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116c8a:	bb 34 89 13 f0       	mov    $0xf0138934,%ebx
f0116c8f:	ba 17 00 00 00       	mov    $0x17,%edx
f0116c94:	89 c7                	mov    %eax,%edi
f0116c96:	89 de                	mov    %ebx,%esi
f0116c98:	89 d1                	mov    %edx,%ecx
f0116c9a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c9c:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116ca2:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116ca7:	b0 00                	mov    $0x0,%al
f0116ca9:	89 d7                	mov    %edx,%edi
f0116cab:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116cad:	83 ec 0c             	sub    $0xc,%esp
f0116cb0:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116cb6:	50                   	push   %eax
f0116cb7:	e8 07 af fe ff       	call   f0101bc3 <execute_command>
f0116cbc:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0116cbf:	83 ec 04             	sub    $0x4,%esp
f0116cc2:	6a 00                	push   $0x0
f0116cc4:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116cc7:	50                   	push   %eax
f0116cc8:	6a 10                	push   $0x10
f0116cca:	e8 33 29 ff ff       	call   f0109602 <envid2env>
f0116ccf:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0116cd2:	83 ec 04             	sub    $0x4,%esp
f0116cd5:	6a 00                	push   $0x0
f0116cd7:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116cda:	50                   	push   %eax
f0116cdb:	6a 11                	push   $0x11
f0116cdd:	e8 20 29 ff ff       	call   f0109602 <envid2env>
f0116ce2:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0116ce5:	83 ec 04             	sub    $0x4,%esp
f0116ce8:	6a 00                	push   $0x0
f0116cea:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116ced:	50                   	push   %eax
f0116cee:	6a 12                	push   $0x12
f0116cf0:	e8 0d 29 ff ff       	call   f0109602 <envid2env>
f0116cf5:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116cf8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116cfb:	85 c0                	test   %eax,%eax
f0116cfd:	74 0e                	je     f0116d0d <test_priority_normal_and_higher+0x122>
f0116cff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d02:	85 c0                	test   %eax,%eax
f0116d04:	74 07                	je     f0116d0d <test_priority_normal_and_higher+0x122>
f0116d06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d09:	85 c0                	test   %eax,%eax
f0116d0b:	75 14                	jne    f0116d21 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f0116d0d:	83 ec 04             	sub    $0x4,%esp
f0116d10:	68 f0 85 13 f0       	push   $0xf01385f0
f0116d15:	6a 29                	push   $0x29
f0116d17:	68 09 86 13 f0       	push   $0xf0138609
f0116d1c:	e8 8f 94 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116d21:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d24:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116d2a:	83 f8 14             	cmp    $0x14,%eax
f0116d2d:	75 1c                	jne    f0116d4b <test_priority_normal_and_higher+0x160>
f0116d2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d32:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116d38:	83 f8 0f             	cmp    $0xf,%eax
f0116d3b:	75 0e                	jne    f0116d4b <test_priority_normal_and_higher+0x160>
f0116d3d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d40:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116d46:	83 f8 0a             	cmp    $0xa,%eax
f0116d49:	74 32                	je     f0116d7d <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0116d4b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d4e:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f0116d54:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d57:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0116d5d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d60:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116d66:	83 ec 08             	sub    $0x8,%esp
f0116d69:	51                   	push   %ecx
f0116d6a:	52                   	push   %edx
f0116d6b:	50                   	push   %eax
f0116d6c:	68 24 86 13 f0       	push   $0xf0138624
f0116d71:	6a 2c                	push   $0x2c
f0116d73:	68 09 86 13 f0       	push   $0xf0138609
f0116d78:	e8 33 94 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0116d7d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116d84:	eb 47                	jmp    f0116dcd <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d86:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0116d89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116d8c:	89 d0                	mov    %edx,%eax
f0116d8e:	01 c0                	add    %eax,%eax
f0116d90:	01 d0                	add    %edx,%eax
f0116d92:	c1 e0 03             	shl    $0x3,%eax
f0116d95:	01 c8                	add    %ecx,%eax
f0116d97:	05 b8 00 00 00       	add    $0xb8,%eax
f0116d9c:	8b 10                	mov    (%eax),%edx
f0116d9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116da1:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116da8:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0116dab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116dae:	89 d0                	mov    %edx,%eax
f0116db0:	01 c0                	add    %eax,%eax
f0116db2:	01 d0                	add    %edx,%eax
f0116db4:	c1 e0 03             	shl    $0x3,%eax
f0116db7:	01 c8                	add    %ecx,%eax
f0116db9:	05 c0 00 00 00       	add    $0xc0,%eax
f0116dbe:	8b 10                	mov    (%eax),%edx
f0116dc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116dc3:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0116dca:	ff 45 e4             	incl   -0x1c(%ebp)
f0116dcd:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116dd1:	7e b3                	jle    f0116d86 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116dd3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116dda:	eb 47                	jmp    f0116e23 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116ddc:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116ddf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116de2:	89 d0                	mov    %edx,%eax
f0116de4:	01 c0                	add    %eax,%eax
f0116de6:	01 d0                	add    %edx,%eax
f0116de8:	c1 e0 03             	shl    $0x3,%eax
f0116deb:	01 c8                	add    %ecx,%eax
f0116ded:	05 b8 00 00 00       	add    $0xb8,%eax
f0116df2:	8b 10                	mov    (%eax),%edx
f0116df4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116df7:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116dfe:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116e01:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116e04:	89 d0                	mov    %edx,%eax
f0116e06:	01 c0                	add    %eax,%eax
f0116e08:	01 d0                	add    %edx,%eax
f0116e0a:	c1 e0 03             	shl    $0x3,%eax
f0116e0d:	01 c8                	add    %ecx,%eax
f0116e0f:	05 c0 00 00 00       	add    $0xc0,%eax
f0116e14:	8b 10                	mov    (%eax),%edx
f0116e16:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116e19:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116e20:	ff 45 e0             	incl   -0x20(%ebp)
f0116e23:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116e27:	7e b3                	jle    f0116ddc <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116e29:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116e30:	eb 47                	jmp    f0116e79 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116e32:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116e35:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e38:	89 d0                	mov    %edx,%eax
f0116e3a:	01 c0                	add    %eax,%eax
f0116e3c:	01 d0                	add    %edx,%eax
f0116e3e:	c1 e0 03             	shl    $0x3,%eax
f0116e41:	01 c8                	add    %ecx,%eax
f0116e43:	05 b8 00 00 00       	add    $0xb8,%eax
f0116e48:	8b 10                	mov    (%eax),%edx
f0116e4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e4d:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116e54:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116e57:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e5a:	89 d0                	mov    %edx,%eax
f0116e5c:	01 c0                	add    %eax,%eax
f0116e5e:	01 d0                	add    %edx,%eax
f0116e60:	c1 e0 03             	shl    $0x3,%eax
f0116e63:	01 c8                	add    %ecx,%eax
f0116e65:	05 c0 00 00 00       	add    $0xc0,%eax
f0116e6a:	8b 10                	mov    (%eax),%edx
f0116e6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e6f:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116e76:	ff 45 dc             	incl   -0x24(%ebp)
f0116e79:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116e7d:	7e b3                	jle    f0116e32 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116e7f:	e8 8e 57 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116e84:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116e87:	e8 2c d4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116e8c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116e8f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e92:	83 ec 08             	sub    $0x8,%esp
f0116e95:	6a 03                	push   $0x3
f0116e97:	50                   	push   %eax
f0116e98:	e8 5c 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116e9d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116ea0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ea3:	83 ec 08             	sub    $0x8,%esp
f0116ea6:	6a 03                	push   $0x3
f0116ea8:	50                   	push   %eax
f0116ea9:	e8 4b 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116eae:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116eb1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116eb4:	83 ec 08             	sub    $0x8,%esp
f0116eb7:	6a 03                	push   $0x3
f0116eb9:	50                   	push   %eax
f0116eba:	e8 3a 3c ff ff       	call   f010aaf9 <set_program_priority>
f0116ebf:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ec2:	e8 f1 d3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116ec7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116eca:	74 14                	je     f0116ee0 <test_priority_normal_and_higher+0x2f5>
f0116ecc:	83 ec 04             	sub    $0x4,%esp
f0116ecf:	68 8c 86 13 f0       	push   $0xf013868c
f0116ed4:	6a 48                	push   $0x48
f0116ed6:	68 09 86 13 f0       	push   $0xf0138609
f0116edb:	e8 d0 92 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116ee0:	e8 2d 57 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116ee5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ee8:	74 14                	je     f0116efe <test_priority_normal_and_higher+0x313>
f0116eea:	83 ec 04             	sub    $0x4,%esp
f0116eed:	68 8c 86 13 f0       	push   $0xf013868c
f0116ef2:	6a 49                	push   $0x49
f0116ef4:	68 09 86 13 f0       	push   $0xf0138609
f0116ef9:	e8 b2 92 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116efe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f01:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f07:	83 f8 14             	cmp    $0x14,%eax
f0116f0a:	75 1c                	jne    f0116f28 <test_priority_normal_and_higher+0x33d>
f0116f0c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f0f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f15:	83 f8 0f             	cmp    $0xf,%eax
f0116f18:	75 0e                	jne    f0116f28 <test_priority_normal_and_higher+0x33d>
f0116f1a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f1d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116f23:	83 f8 0a             	cmp    $0xa,%eax
f0116f26:	74 14                	je     f0116f3c <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116f28:	83 ec 04             	sub    $0x4,%esp
f0116f2b:	68 b8 86 13 f0       	push   $0xf01386b8
f0116f30:	6a 4c                	push   $0x4c
f0116f32:	68 09 86 13 f0       	push   $0xf0138609
f0116f37:	e8 74 92 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116f3c:	e8 d1 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116f41:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f44:	e8 6f d3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116f49:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116f4c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f4f:	83 ec 08             	sub    $0x8,%esp
f0116f52:	6a 04                	push   $0x4
f0116f54:	50                   	push   %eax
f0116f55:	e8 9f 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f5a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116f5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f60:	83 ec 08             	sub    $0x8,%esp
f0116f63:	6a 04                	push   $0x4
f0116f65:	50                   	push   %eax
f0116f66:	e8 8e 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f6b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116f6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f71:	83 ec 08             	sub    $0x8,%esp
f0116f74:	6a 04                	push   $0x4
f0116f76:	50                   	push   %eax
f0116f77:	e8 7d 3b ff ff       	call   f010aaf9 <set_program_priority>
f0116f7c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f7f:	e8 34 d3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0116f84:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f87:	74 14                	je     f0116f9d <test_priority_normal_and_higher+0x3b2>
f0116f89:	83 ec 04             	sub    $0x4,%esp
f0116f8c:	68 8c 86 13 f0       	push   $0xf013868c
f0116f91:	6a 56                	push   $0x56
f0116f93:	68 09 86 13 f0       	push   $0xf0138609
f0116f98:	e8 13 92 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116f9d:	e8 70 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116fa2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116fa5:	74 14                	je     f0116fbb <test_priority_normal_and_higher+0x3d0>
f0116fa7:	83 ec 04             	sub    $0x4,%esp
f0116faa:	68 0c 87 13 f0       	push   $0xf013870c
f0116faf:	6a 57                	push   $0x57
f0116fb1:	68 09 86 13 f0       	push   $0xf0138609
f0116fb6:	e8 f5 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116fbb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fbe:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116fc4:	83 f8 14             	cmp    $0x14,%eax
f0116fc7:	75 1c                	jne    f0116fe5 <test_priority_normal_and_higher+0x3fa>
f0116fc9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fcc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116fd2:	83 f8 0f             	cmp    $0xf,%eax
f0116fd5:	75 0e                	jne    f0116fe5 <test_priority_normal_and_higher+0x3fa>
f0116fd7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fda:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0116fe0:	83 f8 14             	cmp    $0x14,%eax
f0116fe3:	74 14                	je     f0116ff9 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116fe5:	83 ec 04             	sub    $0x4,%esp
f0116fe8:	68 3c 87 13 f0       	push   $0xf013873c
f0116fed:	6a 5a                	push   $0x5a
f0116fef:	68 09 86 13 f0       	push   $0xf0138609
f0116ff4:	e8 b7 91 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ff9:	e8 14 56 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0116ffe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117001:	e8 b2 d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117006:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0117009:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011700c:	83 ec 08             	sub    $0x8,%esp
f011700f:	6a 04                	push   $0x4
f0117011:	50                   	push   %eax
f0117012:	e8 e2 3a ff ff       	call   f010aaf9 <set_program_priority>
f0117017:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011701a:	e8 99 d2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011701f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117022:	74 14                	je     f0117038 <test_priority_normal_and_higher+0x44d>
f0117024:	83 ec 04             	sub    $0x4,%esp
f0117027:	68 8c 86 13 f0       	push   $0xf013868c
f011702c:	6a 62                	push   $0x62
f011702e:	68 09 86 13 f0       	push   $0xf0138609
f0117033:	e8 78 91 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117038:	e8 d5 55 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011703d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117040:	74 14                	je     f0117056 <test_priority_normal_and_higher+0x46b>
f0117042:	83 ec 04             	sub    $0x4,%esp
f0117045:	68 8c 86 13 f0       	push   $0xf013868c
f011704a:	6a 63                	push   $0x63
f011704c:	68 09 86 13 f0       	push   $0xf0138609
f0117051:	e8 5a 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117056:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117059:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011705f:	83 f8 14             	cmp    $0x14,%eax
f0117062:	75 1c                	jne    f0117080 <test_priority_normal_and_higher+0x495>
f0117064:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117067:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011706d:	83 f8 0f             	cmp    $0xf,%eax
f0117070:	75 0e                	jne    f0117080 <test_priority_normal_and_higher+0x495>
f0117072:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117075:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011707b:	83 f8 14             	cmp    $0x14,%eax
f011707e:	74 14                	je     f0117094 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0117080:	83 ec 04             	sub    $0x4,%esp
f0117083:	68 84 87 13 f0       	push   $0xf0138784
f0117088:	6a 66                	push   $0x66
f011708a:	68 09 86 13 f0       	push   $0xf0138609
f011708f:	e8 1c 91 fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117094:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011709b:	eb 1c                	jmp    f01170b9 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011709d:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01170a0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01170a3:	89 d0                	mov    %edx,%eax
f01170a5:	01 c0                	add    %eax,%eax
f01170a7:	01 d0                	add    %edx,%eax
f01170a9:	c1 e0 03             	shl    $0x3,%eax
f01170ac:	01 c8                	add    %ecx,%eax
f01170ae:	05 bc 00 00 00       	add    $0xbc,%eax
f01170b3:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01170b6:	ff 45 d8             	incl   -0x28(%ebp)
f01170b9:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f01170bd:	7e de                	jle    f011709d <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01170bf:	e8 4e 55 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01170c4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170c7:	e8 ec d1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01170cc:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f01170cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170d2:	83 ec 08             	sub    $0x8,%esp
f01170d5:	6a 04                	push   $0x4
f01170d7:	50                   	push   %eax
f01170d8:	e8 1c 3a ff ff       	call   f010aaf9 <set_program_priority>
f01170dd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01170e0:	e8 d3 d1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01170e5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01170e8:	74 14                	je     f01170fe <test_priority_normal_and_higher+0x513>
f01170ea:	83 ec 04             	sub    $0x4,%esp
f01170ed:	68 8c 86 13 f0       	push   $0xf013868c
f01170f2:	6a 73                	push   $0x73
f01170f4:	68 09 86 13 f0       	push   $0xf0138609
f01170f9:	e8 b2 90 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01170fe:	e8 0f 55 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117103:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117106:	74 14                	je     f011711c <test_priority_normal_and_higher+0x531>
f0117108:	83 ec 04             	sub    $0x4,%esp
f011710b:	68 8c 86 13 f0       	push   $0xf013868c
f0117110:	6a 74                	push   $0x74
f0117112:	68 09 86 13 f0       	push   $0xf0138609
f0117117:	e8 94 90 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011711c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011711f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117125:	83 f8 14             	cmp    $0x14,%eax
f0117128:	75 1c                	jne    f0117146 <test_priority_normal_and_higher+0x55b>
f011712a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011712d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117133:	83 f8 0f             	cmp    $0xf,%eax
f0117136:	75 0e                	jne    f0117146 <test_priority_normal_and_higher+0x55b>
f0117138:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011713b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117141:	83 f8 14             	cmp    $0x14,%eax
f0117144:	74 14                	je     f011715a <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0117146:	83 ec 04             	sub    $0x4,%esp
f0117149:	68 84 87 13 f0       	push   $0xf0138784
f011714e:	6a 77                	push   $0x77
f0117150:	68 09 86 13 f0       	push   $0xf0138609
f0117155:	e8 56 90 fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f011715a:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117161:	eb 1c                	jmp    f011717f <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117163:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117166:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117169:	89 d0                	mov    %edx,%eax
f011716b:	01 c0                	add    %eax,%eax
f011716d:	01 d0                	add    %edx,%eax
f011716f:	c1 e0 03             	shl    $0x3,%eax
f0117172:	01 c8                	add    %ecx,%eax
f0117174:	05 bc 00 00 00       	add    $0xbc,%eax
f0117179:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011717c:	ff 45 d4             	incl   -0x2c(%ebp)
f011717f:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117183:	7e de                	jle    f0117163 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117185:	e8 88 54 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011718a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011718d:	e8 26 d1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117192:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117195:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117198:	83 ec 08             	sub    $0x8,%esp
f011719b:	6a 05                	push   $0x5
f011719d:	50                   	push   %eax
f011719e:	e8 56 39 ff ff       	call   f010aaf9 <set_program_priority>
f01171a3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01171a6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171a9:	83 ec 08             	sub    $0x8,%esp
f01171ac:	6a 05                	push   $0x5
f01171ae:	50                   	push   %eax
f01171af:	e8 45 39 ff ff       	call   f010aaf9 <set_program_priority>
f01171b4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01171b7:	e8 fc d0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01171bc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01171bf:	74 17                	je     f01171d8 <test_priority_normal_and_higher+0x5ed>
f01171c1:	83 ec 04             	sub    $0x4,%esp
f01171c4:	68 8c 86 13 f0       	push   $0xf013868c
f01171c9:	68 82 00 00 00       	push   $0x82
f01171ce:	68 09 86 13 f0       	push   $0xf0138609
f01171d3:	e8 d8 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01171d8:	e8 35 54 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01171dd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01171e0:	74 17                	je     f01171f9 <test_priority_normal_and_higher+0x60e>
f01171e2:	83 ec 04             	sub    $0x4,%esp
f01171e5:	68 8c 86 13 f0       	push   $0xf013868c
f01171ea:	68 83 00 00 00       	push   $0x83
f01171ef:	68 09 86 13 f0       	push   $0xf0138609
f01171f4:	e8 b7 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01171f9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171fc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117202:	83 f8 14             	cmp    $0x14,%eax
f0117205:	75 1c                	jne    f0117223 <test_priority_normal_and_higher+0x638>
f0117207:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011720a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117210:	83 f8 1e             	cmp    $0x1e,%eax
f0117213:	75 0e                	jne    f0117223 <test_priority_normal_and_higher+0x638>
f0117215:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117218:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011721e:	83 f8 28             	cmp    $0x28,%eax
f0117221:	74 17                	je     f011723a <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117223:	83 ec 04             	sub    $0x4,%esp
f0117226:	68 c0 87 13 f0       	push   $0xf01387c0
f011722b:	68 86 00 00 00       	push   $0x86
f0117230:	68 09 86 13 f0       	push   $0xf0138609
f0117235:	e8 76 8f fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f011723a:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117241:	eb 1c                	jmp    f011725f <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117243:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117246:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117249:	89 d0                	mov    %edx,%eax
f011724b:	01 c0                	add    %eax,%eax
f011724d:	01 d0                	add    %edx,%eax
f011724f:	c1 e0 03             	shl    $0x3,%eax
f0117252:	01 c8                	add    %ecx,%eax
f0117254:	05 bc 00 00 00       	add    $0xbc,%eax
f0117259:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011725c:	ff 45 d0             	incl   -0x30(%ebp)
f011725f:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117263:	7e de                	jle    f0117243 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117265:	e8 a8 53 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011726a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011726d:	e8 46 d0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117272:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117275:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117278:	83 ec 08             	sub    $0x8,%esp
f011727b:	6a 05                	push   $0x5
f011727d:	50                   	push   %eax
f011727e:	e8 76 38 ff ff       	call   f010aaf9 <set_program_priority>
f0117283:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117286:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117289:	83 ec 08             	sub    $0x8,%esp
f011728c:	6a 04                	push   $0x4
f011728e:	50                   	push   %eax
f011728f:	e8 65 38 ff ff       	call   f010aaf9 <set_program_priority>
f0117294:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117297:	e8 1c d0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011729c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011729f:	74 17                	je     f01172b8 <test_priority_normal_and_higher+0x6cd>
f01172a1:	83 ec 04             	sub    $0x4,%esp
f01172a4:	68 8c 86 13 f0       	push   $0xf013868c
f01172a9:	68 91 00 00 00       	push   $0x91
f01172ae:	68 09 86 13 f0       	push   $0xf0138609
f01172b3:	e8 f8 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01172b8:	e8 55 53 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01172bd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01172c0:	74 17                	je     f01172d9 <test_priority_normal_and_higher+0x6ee>
f01172c2:	83 ec 04             	sub    $0x4,%esp
f01172c5:	68 8c 86 13 f0       	push   $0xf013868c
f01172ca:	68 92 00 00 00       	push   $0x92
f01172cf:	68 09 86 13 f0       	push   $0xf0138609
f01172d4:	e8 d7 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01172d9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172dc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172e2:	83 f8 14             	cmp    $0x14,%eax
f01172e5:	75 1c                	jne    f0117303 <test_priority_normal_and_higher+0x718>
f01172e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172ea:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172f0:	83 f8 1e             	cmp    $0x1e,%eax
f01172f3:	75 0e                	jne    f0117303 <test_priority_normal_and_higher+0x718>
f01172f5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172f8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172fe:	83 f8 28             	cmp    $0x28,%eax
f0117301:	74 17                	je     f011731a <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117303:	83 ec 04             	sub    $0x4,%esp
f0117306:	68 c0 87 13 f0       	push   $0xf01387c0
f011730b:	68 95 00 00 00       	push   $0x95
f0117310:	68 09 86 13 f0       	push   $0xf0138609
f0117315:	e8 96 8e fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f011731a:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0117321:	eb 1c                	jmp    f011733f <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117323:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117326:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117329:	89 d0                	mov    %edx,%eax
f011732b:	01 c0                	add    %eax,%eax
f011732d:	01 d0                	add    %edx,%eax
f011732f:	c1 e0 03             	shl    $0x3,%eax
f0117332:	01 c8                	add    %ecx,%eax
f0117334:	05 bc 00 00 00       	add    $0xbc,%eax
f0117339:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011733c:	ff 45 cc             	incl   -0x34(%ebp)
f011733f:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0117343:	7e de                	jle    f0117323 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117345:	e8 c8 52 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011734a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011734d:	e8 66 cf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117352:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117355:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117358:	83 ec 08             	sub    $0x8,%esp
f011735b:	6a 05                	push   $0x5
f011735d:	50                   	push   %eax
f011735e:	e8 96 37 ff ff       	call   f010aaf9 <set_program_priority>
f0117363:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117366:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117369:	83 ec 08             	sub    $0x8,%esp
f011736c:	6a 04                	push   $0x4
f011736e:	50                   	push   %eax
f011736f:	e8 85 37 ff ff       	call   f010aaf9 <set_program_priority>
f0117374:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117377:	e8 3c cf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011737c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011737f:	74 17                	je     f0117398 <test_priority_normal_and_higher+0x7ad>
f0117381:	83 ec 04             	sub    $0x4,%esp
f0117384:	68 8c 86 13 f0       	push   $0xf013868c
f0117389:	68 a0 00 00 00       	push   $0xa0
f011738e:	68 09 86 13 f0       	push   $0xf0138609
f0117393:	e8 18 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117398:	e8 75 52 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011739d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01173a0:	74 17                	je     f01173b9 <test_priority_normal_and_higher+0x7ce>
f01173a2:	83 ec 04             	sub    $0x4,%esp
f01173a5:	68 8c 86 13 f0       	push   $0xf013868c
f01173aa:	68 a1 00 00 00       	push   $0xa1
f01173af:	68 09 86 13 f0       	push   $0xf0138609
f01173b4:	e8 f7 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01173b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01173bc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173c2:	83 f8 14             	cmp    $0x14,%eax
f01173c5:	75 1c                	jne    f01173e3 <test_priority_normal_and_higher+0x7f8>
f01173c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173ca:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173d0:	83 f8 3c             	cmp    $0x3c,%eax
f01173d3:	75 0e                	jne    f01173e3 <test_priority_normal_and_higher+0x7f8>
f01173d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173d8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173de:	83 f8 28             	cmp    $0x28,%eax
f01173e1:	74 17                	je     f01173fa <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f01173e3:	83 ec 04             	sub    $0x4,%esp
f01173e6:	68 c0 87 13 f0       	push   $0xf01387c0
f01173eb:	68 a4 00 00 00       	push   $0xa4
f01173f0:	68 09 86 13 f0       	push   $0xf0138609
f01173f5:	e8 b6 8d fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f01173fa:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117401:	eb 1c                	jmp    f011741f <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117403:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117406:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117409:	89 d0                	mov    %edx,%eax
f011740b:	01 c0                	add    %eax,%eax
f011740d:	01 d0                	add    %edx,%eax
f011740f:	c1 e0 03             	shl    $0x3,%eax
f0117412:	01 c8                	add    %ecx,%eax
f0117414:	05 bc 00 00 00       	add    $0xbc,%eax
f0117419:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011741c:	ff 45 c8             	incl   -0x38(%ebp)
f011741f:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117423:	7e de                	jle    f0117403 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117425:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011742c:	eb 1c                	jmp    f011744a <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f011742e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117431:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117434:	89 d0                	mov    %edx,%eax
f0117436:	01 c0                	add    %eax,%eax
f0117438:	01 d0                	add    %edx,%eax
f011743a:	c1 e0 03             	shl    $0x3,%eax
f011743d:	01 c8                	add    %ecx,%eax
f011743f:	05 bc 00 00 00       	add    $0xbc,%eax
f0117444:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117447:	ff 45 c4             	incl   -0x3c(%ebp)
f011744a:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f011744e:	7e de                	jle    f011742e <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117450:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117457:	eb 7d                	jmp    f01174d6 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117459:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011745c:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117463:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117466:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117469:	89 d0                	mov    %edx,%eax
f011746b:	01 c0                	add    %eax,%eax
f011746d:	01 d0                	add    %edx,%eax
f011746f:	c1 e0 03             	shl    $0x3,%eax
f0117472:	01 d8                	add    %ebx,%eax
f0117474:	05 b8 00 00 00       	add    $0xb8,%eax
f0117479:	8b 00                	mov    (%eax),%eax
f011747b:	39 c1                	cmp    %eax,%ecx
f011747d:	74 17                	je     f0117496 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f011747f:	83 ec 04             	sub    $0x4,%esp
f0117482:	68 fc 87 13 f0       	push   $0xf01387fc
f0117487:	68 b2 00 00 00       	push   $0xb2
f011748c:	68 09 86 13 f0       	push   $0xf0138609
f0117491:	e8 1a 8d fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117496:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117499:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01174a0:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01174a3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01174a6:	89 d0                	mov    %edx,%eax
f01174a8:	01 c0                	add    %eax,%eax
f01174aa:	01 d0                	add    %edx,%eax
f01174ac:	c1 e0 03             	shl    $0x3,%eax
f01174af:	01 d8                	add    %ebx,%eax
f01174b1:	05 c0 00 00 00       	add    $0xc0,%eax
f01174b6:	8b 00                	mov    (%eax),%eax
f01174b8:	39 c1                	cmp    %eax,%ecx
f01174ba:	74 17                	je     f01174d3 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f01174bc:	83 ec 04             	sub    $0x4,%esp
f01174bf:	68 fc 87 13 f0       	push   $0xf01387fc
f01174c4:	68 b5 00 00 00       	push   $0xb5
f01174c9:	68 09 86 13 f0       	push   $0xf0138609
f01174ce:	e8 dd 8c fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01174d3:	ff 45 c0             	incl   -0x40(%ebp)
f01174d6:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f01174da:	0f 8e 79 ff ff ff    	jle    f0117459 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01174e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01174e7:	eb 7d                	jmp    f0117566 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01174e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01174ec:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01174f3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01174f6:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01174f9:	89 d0                	mov    %edx,%eax
f01174fb:	01 c0                	add    %eax,%eax
f01174fd:	01 d0                	add    %edx,%eax
f01174ff:	c1 e0 03             	shl    $0x3,%eax
f0117502:	01 d8                	add    %ebx,%eax
f0117504:	05 b8 00 00 00       	add    $0xb8,%eax
f0117509:	8b 00                	mov    (%eax),%eax
f011750b:	39 c1                	cmp    %eax,%ecx
f011750d:	74 17                	je     f0117526 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f011750f:	83 ec 04             	sub    $0x4,%esp
f0117512:	68 fc 87 13 f0       	push   $0xf01387fc
f0117517:	68 bb 00 00 00       	push   $0xbb
f011751c:	68 09 86 13 f0       	push   $0xf0138609
f0117521:	e8 8a 8c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117526:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117529:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117530:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117533:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117536:	89 d0                	mov    %edx,%eax
f0117538:	01 c0                	add    %eax,%eax
f011753a:	01 d0                	add    %edx,%eax
f011753c:	c1 e0 03             	shl    $0x3,%eax
f011753f:	01 d8                	add    %ebx,%eax
f0117541:	05 c0 00 00 00       	add    $0xc0,%eax
f0117546:	8b 00                	mov    (%eax),%eax
f0117548:	39 c1                	cmp    %eax,%ecx
f011754a:	74 17                	je     f0117563 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f011754c:	83 ec 04             	sub    $0x4,%esp
f011754f:	68 fc 87 13 f0       	push   $0xf01387fc
f0117554:	68 be 00 00 00       	push   $0xbe
f0117559:	68 09 86 13 f0       	push   $0xf0138609
f011755e:	e8 4d 8c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117563:	ff 45 bc             	incl   -0x44(%ebp)
f0117566:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011756a:	0f 8e 79 ff ff ff    	jle    f01174e9 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117570:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117577:	eb 7d                	jmp    f01175f6 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117579:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011757c:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117583:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117586:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117589:	89 d0                	mov    %edx,%eax
f011758b:	01 c0                	add    %eax,%eax
f011758d:	01 d0                	add    %edx,%eax
f011758f:	c1 e0 03             	shl    $0x3,%eax
f0117592:	01 d8                	add    %ebx,%eax
f0117594:	05 b8 00 00 00       	add    $0xb8,%eax
f0117599:	8b 00                	mov    (%eax),%eax
f011759b:	39 c1                	cmp    %eax,%ecx
f011759d:	74 17                	je     f01175b6 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f011759f:	83 ec 04             	sub    $0x4,%esp
f01175a2:	68 fc 87 13 f0       	push   $0xf01387fc
f01175a7:	68 c4 00 00 00       	push   $0xc4
f01175ac:	68 09 86 13 f0       	push   $0xf0138609
f01175b1:	e8 fa 8b fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01175b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175b9:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01175c0:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01175c3:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01175c6:	89 d0                	mov    %edx,%eax
f01175c8:	01 c0                	add    %eax,%eax
f01175ca:	01 d0                	add    %edx,%eax
f01175cc:	c1 e0 03             	shl    $0x3,%eax
f01175cf:	01 d8                	add    %ebx,%eax
f01175d1:	05 c0 00 00 00       	add    $0xc0,%eax
f01175d6:	8b 00                	mov    (%eax),%eax
f01175d8:	39 c1                	cmp    %eax,%ecx
f01175da:	74 17                	je     f01175f3 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f01175dc:	83 ec 04             	sub    $0x4,%esp
f01175df:	68 fc 87 13 f0       	push   $0xf01387fc
f01175e4:	68 c7 00 00 00       	push   $0xc7
f01175e9:	68 09 86 13 f0       	push   $0xf0138609
f01175ee:	e8 bd 8b fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01175f3:	ff 45 b8             	incl   -0x48(%ebp)
f01175f6:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01175fa:	0f 8e 79 ff ff ff    	jle    f0117579 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117600:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117607:	75 6e 61 
f011760a:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117611:	6c 00 00 
f0117614:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011761a:	b9 17 00 00 00       	mov    $0x17,%ecx
f011761f:	b8 00 00 00 00       	mov    $0x0,%eax
f0117624:	89 d7                	mov    %edx,%edi
f0117626:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117628:	83 ec 0c             	sub    $0xc,%esp
f011762b:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117631:	50                   	push   %eax
f0117632:	e8 8c a5 fe ff       	call   f0101bc3 <execute_command>
f0117637:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f011763a:	eb 10                	jmp    f011764c <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011763c:	83 ec 0c             	sub    $0xc,%esp
f011763f:	68 30 88 13 f0       	push   $0xf0138830
f0117644:	e8 e8 97 fe ff       	call   f0100e31 <cprintf>
f0117649:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011764c:	90                   	nop
f011764d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117650:	5b                   	pop    %ebx
f0117651:	5e                   	pop    %esi
f0117652:	5f                   	pop    %edi
f0117653:	5d                   	pop    %ebp
f0117654:	c3                   	ret    

f0117655 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117655:	55                   	push   %ebp
f0117656:	89 e5                	mov    %esp,%ebp
f0117658:	57                   	push   %edi
f0117659:	56                   	push   %esi
f011765a:	53                   	push   %ebx
f011765b:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117661:	a0 1c cb 18 f0       	mov    0xf018cb1c,%al
f0117666:	84 c0                	test   %al,%al
f0117668:	0f 84 1b 0a 00 00    	je     f0118089 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011766e:	c6 05 1c cb 18 f0 00 	movb   $0x0,0xf018cb1c
		char command[100] = "load fos_add 20";
f0117675:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011767b:	bb 6c 88 13 f0       	mov    $0xf013886c,%ebx
f0117680:	ba 04 00 00 00       	mov    $0x4,%edx
f0117685:	89 c7                	mov    %eax,%edi
f0117687:	89 de                	mov    %ebx,%esi
f0117689:	89 d1                	mov    %edx,%ecx
f011768b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011768d:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117693:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117698:	b8 00 00 00 00       	mov    $0x0,%eax
f011769d:	89 d7                	mov    %edx,%edi
f011769f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01176a1:	83 ec 0c             	sub    $0xc,%esp
f01176a4:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01176aa:	50                   	push   %eax
f01176ab:	e8 13 a5 fe ff       	call   f0101bc3 <execute_command>
f01176b0:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01176b3:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01176b9:	bb 74 8b 13 f0       	mov    $0xf0138b74,%ebx
f01176be:	ba 0d 00 00 00       	mov    $0xd,%edx
f01176c3:	89 c7                	mov    %eax,%edi
f01176c5:	89 de                	mov    %ebx,%esi
f01176c7:	89 d1                	mov    %edx,%ecx
f01176c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01176cb:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01176d1:	b9 57 00 00 00       	mov    $0x57,%ecx
f01176d6:	b0 00                	mov    $0x0,%al
f01176d8:	89 d7                	mov    %edx,%edi
f01176da:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01176dc:	83 ec 0c             	sub    $0xc,%esp
f01176df:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01176e5:	50                   	push   %eax
f01176e6:	e8 d8 a4 fe ff       	call   f0101bc3 <execute_command>
f01176eb:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01176ee:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01176f4:	bb d8 8b 13 f0       	mov    $0xf0138bd8,%ebx
f01176f9:	ba 17 00 00 00       	mov    $0x17,%edx
f01176fe:	89 c7                	mov    %eax,%edi
f0117700:	89 de                	mov    %ebx,%esi
f0117702:	89 d1                	mov    %edx,%ecx
f0117704:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117706:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011770c:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117711:	b0 00                	mov    $0x0,%al
f0117713:	89 d7                	mov    %edx,%edi
f0117715:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117717:	83 ec 0c             	sub    $0xc,%esp
f011771a:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117720:	50                   	push   %eax
f0117721:	e8 9d a4 fe ff       	call   f0101bc3 <execute_command>
f0117726:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117729:	83 ec 04             	sub    $0x4,%esp
f011772c:	6a 00                	push   $0x0
f011772e:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117731:	50                   	push   %eax
f0117732:	68 00 10 00 00       	push   $0x1000
f0117737:	e8 c6 1e ff ff       	call   f0109602 <envid2env>
f011773c:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011773f:	83 ec 04             	sub    $0x4,%esp
f0117742:	6a 00                	push   $0x0
f0117744:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117747:	50                   	push   %eax
f0117748:	68 01 10 00 00       	push   $0x1001
f011774d:	e8 b0 1e ff ff       	call   f0109602 <envid2env>
f0117752:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117755:	83 ec 04             	sub    $0x4,%esp
f0117758:	6a 00                	push   $0x0
f011775a:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011775d:	50                   	push   %eax
f011775e:	68 02 10 00 00       	push   $0x1002
f0117763:	e8 9a 1e ff ff       	call   f0109602 <envid2env>
f0117768:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011776b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011776e:	85 c0                	test   %eax,%eax
f0117770:	74 0e                	je     f0117780 <test_priority_normal_and_lower+0x12b>
f0117772:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117775:	85 c0                	test   %eax,%eax
f0117777:	74 07                	je     f0117780 <test_priority_normal_and_lower+0x12b>
f0117779:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011777c:	85 c0                	test   %eax,%eax
f011777e:	75 17                	jne    f0117797 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117780:	83 ec 04             	sub    $0x4,%esp
f0117783:	68 f0 85 13 f0       	push   $0xf01385f0
f0117788:	68 f2 00 00 00       	push   $0xf2
f011778d:	68 09 86 13 f0       	push   $0xf0138609
f0117792:	e8 19 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117797:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011779a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01177a0:	83 f8 14             	cmp    $0x14,%eax
f01177a3:	75 1c                	jne    f01177c1 <test_priority_normal_and_lower+0x16c>
f01177a5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177a8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01177ae:	83 f8 1e             	cmp    $0x1e,%eax
f01177b1:	75 0e                	jne    f01177c1 <test_priority_normal_and_lower+0x16c>
f01177b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177b6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01177bc:	83 f8 28             	cmp    $0x28,%eax
f01177bf:	74 17                	je     f01177d8 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f01177c1:	83 ec 04             	sub    $0x4,%esp
f01177c4:	68 98 89 13 f0       	push   $0xf0138998
f01177c9:	68 f5 00 00 00       	push   $0xf5
f01177ce:	68 09 86 13 f0       	push   $0xf0138609
f01177d3:	e8 d8 89 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f01177d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01177df:	eb 47                	jmp    f0117828 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01177e1:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01177e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01177e7:	89 d0                	mov    %edx,%eax
f01177e9:	01 c0                	add    %eax,%eax
f01177eb:	01 d0                	add    %edx,%eax
f01177ed:	c1 e0 03             	shl    $0x3,%eax
f01177f0:	01 c8                	add    %ecx,%eax
f01177f2:	05 b8 00 00 00       	add    $0xb8,%eax
f01177f7:	8b 10                	mov    (%eax),%edx
f01177f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177fc:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117803:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117806:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117809:	89 d0                	mov    %edx,%eax
f011780b:	01 c0                	add    %eax,%eax
f011780d:	01 d0                	add    %edx,%eax
f011780f:	c1 e0 03             	shl    $0x3,%eax
f0117812:	01 c8                	add    %ecx,%eax
f0117814:	05 c0 00 00 00       	add    $0xc0,%eax
f0117819:	8b 10                	mov    (%eax),%edx
f011781b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011781e:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117825:	ff 45 e4             	incl   -0x1c(%ebp)
f0117828:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011782c:	7e b3                	jle    f01177e1 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011782e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117835:	eb 47                	jmp    f011787e <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117837:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011783a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011783d:	89 d0                	mov    %edx,%eax
f011783f:	01 c0                	add    %eax,%eax
f0117841:	01 d0                	add    %edx,%eax
f0117843:	c1 e0 03             	shl    $0x3,%eax
f0117846:	01 c8                	add    %ecx,%eax
f0117848:	05 b8 00 00 00       	add    $0xb8,%eax
f011784d:	8b 10                	mov    (%eax),%edx
f011784f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117852:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117859:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011785c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011785f:	89 d0                	mov    %edx,%eax
f0117861:	01 c0                	add    %eax,%eax
f0117863:	01 d0                	add    %edx,%eax
f0117865:	c1 e0 03             	shl    $0x3,%eax
f0117868:	01 c8                	add    %ecx,%eax
f011786a:	05 c0 00 00 00       	add    $0xc0,%eax
f011786f:	8b 10                	mov    (%eax),%edx
f0117871:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117874:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011787b:	ff 45 e0             	incl   -0x20(%ebp)
f011787e:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117882:	7e b3                	jle    f0117837 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117884:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011788b:	eb 47                	jmp    f01178d4 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011788d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117890:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117893:	89 d0                	mov    %edx,%eax
f0117895:	01 c0                	add    %eax,%eax
f0117897:	01 d0                	add    %edx,%eax
f0117899:	c1 e0 03             	shl    $0x3,%eax
f011789c:	01 c8                	add    %ecx,%eax
f011789e:	05 b8 00 00 00       	add    $0xb8,%eax
f01178a3:	8b 10                	mov    (%eax),%edx
f01178a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01178a8:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01178af:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01178b2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01178b5:	89 d0                	mov    %edx,%eax
f01178b7:	01 c0                	add    %eax,%eax
f01178b9:	01 d0                	add    %edx,%eax
f01178bb:	c1 e0 03             	shl    $0x3,%eax
f01178be:	01 c8                	add    %ecx,%eax
f01178c0:	05 c0 00 00 00       	add    $0xc0,%eax
f01178c5:	8b 10                	mov    (%eax),%edx
f01178c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01178ca:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01178d1:	ff 45 dc             	incl   -0x24(%ebp)
f01178d4:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01178d8:	7e b3                	jle    f011788d <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01178da:	e8 33 4d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01178df:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01178e2:	e8 d1 c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01178e7:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01178ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178ed:	83 ec 08             	sub    $0x8,%esp
f01178f0:	6a 03                	push   $0x3
f01178f2:	50                   	push   %eax
f01178f3:	e8 01 32 ff ff       	call   f010aaf9 <set_program_priority>
f01178f8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01178fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178fe:	83 ec 08             	sub    $0x8,%esp
f0117901:	6a 03                	push   $0x3
f0117903:	50                   	push   %eax
f0117904:	e8 f0 31 ff ff       	call   f010aaf9 <set_program_priority>
f0117909:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011790c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011790f:	83 ec 08             	sub    $0x8,%esp
f0117912:	6a 03                	push   $0x3
f0117914:	50                   	push   %eax
f0117915:	e8 df 31 ff ff       	call   f010aaf9 <set_program_priority>
f011791a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011791d:	e8 96 c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117922:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117925:	74 17                	je     f011793e <test_priority_normal_and_lower+0x2e9>
f0117927:	83 ec 04             	sub    $0x4,%esp
f011792a:	68 8c 86 13 f0       	push   $0xf013868c
f011792f:	68 11 01 00 00       	push   $0x111
f0117934:	68 09 86 13 f0       	push   $0xf0138609
f0117939:	e8 72 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011793e:	e8 cf 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117943:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117946:	74 17                	je     f011795f <test_priority_normal_and_lower+0x30a>
f0117948:	83 ec 04             	sub    $0x4,%esp
f011794b:	68 8c 86 13 f0       	push   $0xf013868c
f0117950:	68 12 01 00 00       	push   $0x112
f0117955:	68 09 86 13 f0       	push   $0xf0138609
f011795a:	e8 51 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011795f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117962:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117968:	83 f8 14             	cmp    $0x14,%eax
f011796b:	75 1c                	jne    f0117989 <test_priority_normal_and_lower+0x334>
f011796d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117970:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117976:	83 f8 1e             	cmp    $0x1e,%eax
f0117979:	75 0e                	jne    f0117989 <test_priority_normal_and_lower+0x334>
f011797b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011797e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117984:	83 f8 28             	cmp    $0x28,%eax
f0117987:	74 17                	je     f01179a0 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117989:	83 ec 04             	sub    $0x4,%esp
f011798c:	68 b8 86 13 f0       	push   $0xf01386b8
f0117991:	68 15 01 00 00       	push   $0x115
f0117996:	68 09 86 13 f0       	push   $0xf0138609
f011799b:	e8 10 88 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01179a0:	e8 6d 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01179a5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179a8:	e8 0b c9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01179ad:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01179b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179b3:	83 ec 08             	sub    $0x8,%esp
f01179b6:	6a 02                	push   $0x2
f01179b8:	50                   	push   %eax
f01179b9:	e8 3b 31 ff ff       	call   f010aaf9 <set_program_priority>
f01179be:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01179c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01179c4:	83 ec 08             	sub    $0x8,%esp
f01179c7:	6a 02                	push   $0x2
f01179c9:	50                   	push   %eax
f01179ca:	e8 2a 31 ff ff       	call   f010aaf9 <set_program_priority>
f01179cf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01179d2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179d5:	83 ec 08             	sub    $0x8,%esp
f01179d8:	6a 02                	push   $0x2
f01179da:	50                   	push   %eax
f01179db:	e8 19 31 ff ff       	call   f010aaf9 <set_program_priority>
f01179e0:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01179e3:	e8 d0 c8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01179e8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01179eb:	74 17                	je     f0117a04 <test_priority_normal_and_lower+0x3af>
f01179ed:	83 ec 04             	sub    $0x4,%esp
f01179f0:	68 8c 86 13 f0       	push   $0xf013868c
f01179f5:	68 1f 01 00 00       	push   $0x11f
f01179fa:	68 09 86 13 f0       	push   $0xf0138609
f01179ff:	e8 ac 87 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117a04:	e8 09 4c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a09:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117a0c:	74 21                	je     f0117a2f <test_priority_normal_and_lower+0x3da>
f0117a0e:	e8 ff 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a13:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117a16:	29 c2                	sub    %eax,%edx
f0117a18:	89 d0                	mov    %edx,%eax
f0117a1a:	50                   	push   %eax
f0117a1b:	68 0c 87 13 f0       	push   $0xf013870c
f0117a20:	68 20 01 00 00       	push   $0x120
f0117a25:	68 09 86 13 f0       	push   $0xf0138609
f0117a2a:	e8 81 87 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117a2f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a32:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a38:	83 f8 0a             	cmp    $0xa,%eax
f0117a3b:	75 1c                	jne    f0117a59 <test_priority_normal_and_lower+0x404>
f0117a3d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a40:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a46:	83 f8 0f             	cmp    $0xf,%eax
f0117a49:	75 0e                	jne    f0117a59 <test_priority_normal_and_lower+0x404>
f0117a4b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a4e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a54:	83 f8 14             	cmp    $0x14,%eax
f0117a57:	74 17                	je     f0117a70 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117a59:	83 ec 04             	sub    $0x4,%esp
f0117a5c:	68 3c 87 13 f0       	push   $0xf013873c
f0117a61:	68 23 01 00 00       	push   $0x123
f0117a66:	68 09 86 13 f0       	push   $0xf0138609
f0117a6b:	e8 40 87 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117a70:	e8 9d 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117a75:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a78:	e8 3b c8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117a7d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117a80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a83:	83 ec 08             	sub    $0x8,%esp
f0117a86:	6a 02                	push   $0x2
f0117a88:	50                   	push   %eax
f0117a89:	e8 6b 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117a8e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117a91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a94:	83 ec 08             	sub    $0x8,%esp
f0117a97:	6a 02                	push   $0x2
f0117a99:	50                   	push   %eax
f0117a9a:	e8 5a 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117a9f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117aa2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117aa5:	83 ec 08             	sub    $0x8,%esp
f0117aa8:	6a 02                	push   $0x2
f0117aaa:	50                   	push   %eax
f0117aab:	e8 49 30 ff ff       	call   f010aaf9 <set_program_priority>
f0117ab0:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ab3:	e8 00 c8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117ab8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117abb:	74 17                	je     f0117ad4 <test_priority_normal_and_lower+0x47f>
f0117abd:	83 ec 04             	sub    $0x4,%esp
f0117ac0:	68 8c 86 13 f0       	push   $0xf013868c
f0117ac5:	68 2d 01 00 00       	push   $0x12d
f0117aca:	68 09 86 13 f0       	push   $0xf0138609
f0117acf:	e8 dc 86 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117ad4:	e8 39 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117ad9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117adc:	74 21                	je     f0117aff <test_priority_normal_and_lower+0x4aa>
f0117ade:	e8 2f 4b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117ae3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117ae6:	29 c2                	sub    %eax,%edx
f0117ae8:	89 d0                	mov    %edx,%eax
f0117aea:	50                   	push   %eax
f0117aeb:	68 0c 87 13 f0       	push   $0xf013870c
f0117af0:	68 2e 01 00 00       	push   $0x12e
f0117af5:	68 09 86 13 f0       	push   $0xf0138609
f0117afa:	e8 b1 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117aff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b02:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b08:	83 f8 0a             	cmp    $0xa,%eax
f0117b0b:	75 1c                	jne    f0117b29 <test_priority_normal_and_lower+0x4d4>
f0117b0d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b10:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b16:	83 f8 0f             	cmp    $0xf,%eax
f0117b19:	75 0e                	jne    f0117b29 <test_priority_normal_and_lower+0x4d4>
f0117b1b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b1e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b24:	83 f8 0a             	cmp    $0xa,%eax
f0117b27:	74 17                	je     f0117b40 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117b29:	83 ec 04             	sub    $0x4,%esp
f0117b2c:	68 3c 87 13 f0       	push   $0xf013873c
f0117b31:	68 31 01 00 00       	push   $0x131
f0117b36:	68 09 86 13 f0       	push   $0xf0138609
f0117b3b:	e8 70 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117b40:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117b47:	eb 7d                	jmp    f0117bc6 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117b49:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117b4c:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117b53:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117b56:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117b59:	89 d0                	mov    %edx,%eax
f0117b5b:	01 c0                	add    %eax,%eax
f0117b5d:	01 d0                	add    %edx,%eax
f0117b5f:	c1 e0 03             	shl    $0x3,%eax
f0117b62:	01 d8                	add    %ebx,%eax
f0117b64:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b69:	8b 00                	mov    (%eax),%eax
f0117b6b:	39 c1                	cmp    %eax,%ecx
f0117b6d:	74 17                	je     f0117b86 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117b6f:	83 ec 04             	sub    $0x4,%esp
f0117b72:	68 fc 87 13 f0       	push   $0xf01387fc
f0117b77:	68 36 01 00 00       	push   $0x136
f0117b7c:	68 09 86 13 f0       	push   $0xf0138609
f0117b81:	e8 2a 86 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117b89:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117b90:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117b93:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117b96:	89 d0                	mov    %edx,%eax
f0117b98:	01 c0                	add    %eax,%eax
f0117b9a:	01 d0                	add    %edx,%eax
f0117b9c:	c1 e0 03             	shl    $0x3,%eax
f0117b9f:	01 d8                	add    %ebx,%eax
f0117ba1:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ba6:	8b 00                	mov    (%eax),%eax
f0117ba8:	39 c1                	cmp    %eax,%ecx
f0117baa:	74 17                	je     f0117bc3 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117bac:	83 ec 04             	sub    $0x4,%esp
f0117baf:	68 fc 87 13 f0       	push   $0xf01387fc
f0117bb4:	68 39 01 00 00       	push   $0x139
f0117bb9:	68 09 86 13 f0       	push   $0xf0138609
f0117bbe:	e8 ed 85 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117bc3:	ff 45 d8             	incl   -0x28(%ebp)
f0117bc6:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117bca:	0f 8e 79 ff ff ff    	jle    f0117b49 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117bd0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117bd7:	eb 7d                	jmp    f0117c56 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117bd9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117bdc:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117be3:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117be6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117be9:	89 d0                	mov    %edx,%eax
f0117beb:	01 c0                	add    %eax,%eax
f0117bed:	01 d0                	add    %edx,%eax
f0117bef:	c1 e0 03             	shl    $0x3,%eax
f0117bf2:	01 d8                	add    %ebx,%eax
f0117bf4:	05 b8 00 00 00       	add    $0xb8,%eax
f0117bf9:	8b 00                	mov    (%eax),%eax
f0117bfb:	39 c1                	cmp    %eax,%ecx
f0117bfd:	74 17                	je     f0117c16 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117bff:	83 ec 04             	sub    $0x4,%esp
f0117c02:	68 fc 87 13 f0       	push   $0xf01387fc
f0117c07:	68 3f 01 00 00       	push   $0x13f
f0117c0c:	68 09 86 13 f0       	push   $0xf0138609
f0117c11:	e8 9a 85 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117c16:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117c19:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117c20:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117c23:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117c26:	89 d0                	mov    %edx,%eax
f0117c28:	01 c0                	add    %eax,%eax
f0117c2a:	01 d0                	add    %edx,%eax
f0117c2c:	c1 e0 03             	shl    $0x3,%eax
f0117c2f:	01 d8                	add    %ebx,%eax
f0117c31:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c36:	8b 00                	mov    (%eax),%eax
f0117c38:	39 c1                	cmp    %eax,%ecx
f0117c3a:	74 17                	je     f0117c53 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117c3c:	83 ec 04             	sub    $0x4,%esp
f0117c3f:	68 fc 87 13 f0       	push   $0xf01387fc
f0117c44:	68 42 01 00 00       	push   $0x142
f0117c49:	68 09 86 13 f0       	push   $0xf0138609
f0117c4e:	e8 5d 85 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117c53:	ff 45 d4             	incl   -0x2c(%ebp)
f0117c56:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117c5a:	0f 8e 79 ff ff ff    	jle    f0117bd9 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117c60:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117c67:	eb 7d                	jmp    f0117ce6 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117c69:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c6c:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117c73:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117c76:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117c79:	89 d0                	mov    %edx,%eax
f0117c7b:	01 c0                	add    %eax,%eax
f0117c7d:	01 d0                	add    %edx,%eax
f0117c7f:	c1 e0 03             	shl    $0x3,%eax
f0117c82:	01 d8                	add    %ebx,%eax
f0117c84:	05 b8 00 00 00       	add    $0xb8,%eax
f0117c89:	8b 00                	mov    (%eax),%eax
f0117c8b:	39 c1                	cmp    %eax,%ecx
f0117c8d:	74 17                	je     f0117ca6 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0117c8f:	83 ec 04             	sub    $0x4,%esp
f0117c92:	68 fc 87 13 f0       	push   $0xf01387fc
f0117c97:	68 48 01 00 00       	push   $0x148
f0117c9c:	68 09 86 13 f0       	push   $0xf0138609
f0117ca1:	e8 0a 85 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ca6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ca9:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117cb0:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117cb3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117cb6:	89 d0                	mov    %edx,%eax
f0117cb8:	01 c0                	add    %eax,%eax
f0117cba:	01 d0                	add    %edx,%eax
f0117cbc:	c1 e0 03             	shl    $0x3,%eax
f0117cbf:	01 d8                	add    %ebx,%eax
f0117cc1:	05 c0 00 00 00       	add    $0xc0,%eax
f0117cc6:	8b 00                	mov    (%eax),%eax
f0117cc8:	39 c1                	cmp    %eax,%ecx
f0117cca:	74 17                	je     f0117ce3 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0117ccc:	83 ec 04             	sub    $0x4,%esp
f0117ccf:	68 fc 87 13 f0       	push   $0xf01387fc
f0117cd4:	68 4b 01 00 00       	push   $0x14b
f0117cd9:	68 09 86 13 f0       	push   $0xf0138609
f0117cde:	e8 cd 84 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117ce3:	ff 45 d0             	incl   -0x30(%ebp)
f0117ce6:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117cea:	0f 8e 79 ff ff ff    	jle    f0117c69 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117cf0:	e8 1d 49 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117cf5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117cf8:	e8 bb c5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117cfd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117d00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d03:	83 ec 08             	sub    $0x8,%esp
f0117d06:	6a 01                	push   $0x1
f0117d08:	50                   	push   %eax
f0117d09:	e8 eb 2d ff ff       	call   f010aaf9 <set_program_priority>
f0117d0e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117d11:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d14:	83 ec 08             	sub    $0x8,%esp
f0117d17:	6a 01                	push   $0x1
f0117d19:	50                   	push   %eax
f0117d1a:	e8 da 2d ff ff       	call   f010aaf9 <set_program_priority>
f0117d1f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117d22:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d25:	83 ec 08             	sub    $0x8,%esp
f0117d28:	6a 01                	push   $0x1
f0117d2a:	50                   	push   %eax
f0117d2b:	e8 c9 2d ff ff       	call   f010aaf9 <set_program_priority>
f0117d30:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d33:	e8 80 c5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117d38:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d3b:	74 17                	je     f0117d54 <test_priority_normal_and_lower+0x6ff>
f0117d3d:	83 ec 04             	sub    $0x4,%esp
f0117d40:	68 8c 86 13 f0       	push   $0xf013868c
f0117d45:	68 54 01 00 00       	push   $0x154
f0117d4a:	68 09 86 13 f0       	push   $0xf0138609
f0117d4f:	e8 5c 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117d54:	e8 b9 48 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117d59:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117d5c:	83 f8 0d             	cmp    $0xd,%eax
f0117d5f:	74 17                	je     f0117d78 <test_priority_normal_and_lower+0x723>
f0117d61:	83 ec 04             	sub    $0x4,%esp
f0117d64:	68 e4 89 13 f0       	push   $0xf01389e4
f0117d69:	68 55 01 00 00       	push   $0x155
f0117d6e:	68 09 86 13 f0       	push   $0xf0138609
f0117d73:	e8 38 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117d78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d7b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d81:	83 f8 05             	cmp    $0x5,%eax
f0117d84:	75 1c                	jne    f0117da2 <test_priority_normal_and_lower+0x74d>
f0117d86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d89:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d8f:	83 f8 07             	cmp    $0x7,%eax
f0117d92:	75 0e                	jne    f0117da2 <test_priority_normal_and_lower+0x74d>
f0117d94:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d97:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d9d:	83 f8 05             	cmp    $0x5,%eax
f0117da0:	74 17                	je     f0117db9 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0117da2:	83 ec 04             	sub    $0x4,%esp
f0117da5:	68 2c 8a 13 f0       	push   $0xf0138a2c
f0117daa:	68 58 01 00 00       	push   $0x158
f0117daf:	68 09 86 13 f0       	push   $0xf0138609
f0117db4:	e8 f7 83 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117db9:	e8 54 48 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117dbe:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117dc1:	e8 f2 c4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117dc6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117dc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117dcc:	83 ec 08             	sub    $0x8,%esp
f0117dcf:	6a 01                	push   $0x1
f0117dd1:	50                   	push   %eax
f0117dd2:	e8 22 2d ff ff       	call   f010aaf9 <set_program_priority>
f0117dd7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117dda:	e8 d9 c4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0117ddf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117de2:	74 17                	je     f0117dfb <test_priority_normal_and_lower+0x7a6>
f0117de4:	83 ec 04             	sub    $0x4,%esp
f0117de7:	68 8c 86 13 f0       	push   $0xf013868c
f0117dec:	68 5e 01 00 00       	push   $0x15e
f0117df1:	68 09 86 13 f0       	push   $0xf0138609
f0117df6:	e8 b5 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117dfb:	e8 12 48 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0117e00:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117e03:	83 f8 03             	cmp    $0x3,%eax
f0117e06:	74 17                	je     f0117e1f <test_priority_normal_and_lower+0x7ca>
f0117e08:	83 ec 04             	sub    $0x4,%esp
f0117e0b:	68 8c 86 13 f0       	push   $0xf013868c
f0117e10:	68 5f 01 00 00       	push   $0x15f
f0117e15:	68 09 86 13 f0       	push   $0xf0138609
f0117e1a:	e8 91 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117e1f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e22:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e28:	83 f8 02             	cmp    $0x2,%eax
f0117e2b:	75 1c                	jne    f0117e49 <test_priority_normal_and_lower+0x7f4>
f0117e2d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e30:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e36:	83 f8 07             	cmp    $0x7,%eax
f0117e39:	75 0e                	jne    f0117e49 <test_priority_normal_and_lower+0x7f4>
f0117e3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e3e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e44:	83 f8 05             	cmp    $0x5,%eax
f0117e47:	74 17                	je     f0117e60 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0117e49:	83 ec 04             	sub    $0x4,%esp
f0117e4c:	68 c0 87 13 f0       	push   $0xf01387c0
f0117e51:	68 62 01 00 00       	push   $0x162
f0117e56:	68 09 86 13 f0       	push   $0xf0138609
f0117e5b:	e8 50 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f0117e60:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117e67:	e9 83 00 00 00       	jmp    f0117eef <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117e6c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117e6f:	83 c0 08             	add    $0x8,%eax
f0117e72:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117e79:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117e7c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117e7f:	89 d0                	mov    %edx,%eax
f0117e81:	01 c0                	add    %eax,%eax
f0117e83:	01 d0                	add    %edx,%eax
f0117e85:	c1 e0 03             	shl    $0x3,%eax
f0117e88:	01 d8                	add    %ebx,%eax
f0117e8a:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e8f:	8b 00                	mov    (%eax),%eax
f0117e91:	39 c1                	cmp    %eax,%ecx
f0117e93:	74 17                	je     f0117eac <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e95:	83 ec 04             	sub    $0x4,%esp
f0117e98:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0117e9d:	68 67 01 00 00       	push   $0x167
f0117ea2:	68 09 86 13 f0       	push   $0xf0138609
f0117ea7:	e8 04 83 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117eac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117eaf:	83 c0 08             	add    $0x8,%eax
f0117eb2:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117eb9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117ebc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117ebf:	89 d0                	mov    %edx,%eax
f0117ec1:	01 c0                	add    %eax,%eax
f0117ec3:	01 d0                	add    %edx,%eax
f0117ec5:	c1 e0 03             	shl    $0x3,%eax
f0117ec8:	01 d8                	add    %ebx,%eax
f0117eca:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ecf:	8b 00                	mov    (%eax),%eax
f0117ed1:	39 c1                	cmp    %eax,%ecx
f0117ed3:	74 17                	je     f0117eec <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117ed5:	83 ec 04             	sub    $0x4,%esp
f0117ed8:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0117edd:	68 6a 01 00 00       	push   $0x16a
f0117ee2:	68 09 86 13 f0       	push   $0xf0138609
f0117ee7:	e8 c4 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117eec:	ff 45 cc             	incl   -0x34(%ebp)
f0117eef:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117ef3:	0f 8e 73 ff ff ff    	jle    f0117e6c <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117ef9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117f00:	e9 83 00 00 00       	jmp    f0117f88 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f05:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117f08:	83 c0 03             	add    $0x3,%eax
f0117f0b:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117f12:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f15:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117f18:	89 d0                	mov    %edx,%eax
f0117f1a:	01 c0                	add    %eax,%eax
f0117f1c:	01 d0                	add    %edx,%eax
f0117f1e:	c1 e0 03             	shl    $0x3,%eax
f0117f21:	01 d8                	add    %ebx,%eax
f0117f23:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f28:	8b 00                	mov    (%eax),%eax
f0117f2a:	39 c1                	cmp    %eax,%ecx
f0117f2c:	74 17                	je     f0117f45 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117f2e:	ff 75 c8             	pushl  -0x38(%ebp)
f0117f31:	68 c8 8a 13 f0       	push   $0xf0138ac8
f0117f36:	68 70 01 00 00       	push   $0x170
f0117f3b:	68 09 86 13 f0       	push   $0xf0138609
f0117f40:	e8 6b 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f45:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117f48:	83 c0 03             	add    $0x3,%eax
f0117f4b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117f52:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f55:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117f58:	89 d0                	mov    %edx,%eax
f0117f5a:	01 c0                	add    %eax,%eax
f0117f5c:	01 d0                	add    %edx,%eax
f0117f5e:	c1 e0 03             	shl    $0x3,%eax
f0117f61:	01 d8                	add    %ebx,%eax
f0117f63:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f68:	8b 00                	mov    (%eax),%eax
f0117f6a:	39 c1                	cmp    %eax,%ecx
f0117f6c:	74 17                	je     f0117f85 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117f6e:	83 ec 04             	sub    $0x4,%esp
f0117f71:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0117f76:	68 73 01 00 00       	push   $0x173
f0117f7b:	68 09 86 13 f0       	push   $0xf0138609
f0117f80:	e8 2b 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117f85:	ff 45 c8             	incl   -0x38(%ebp)
f0117f88:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117f8c:	0f 8e 73 ff ff ff    	jle    f0117f05 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117f92:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117f99:	e9 83 00 00 00       	jmp    f0118021 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117fa1:	83 c0 05             	add    $0x5,%eax
f0117fa4:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117fab:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117fae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117fb1:	89 d0                	mov    %edx,%eax
f0117fb3:	01 c0                	add    %eax,%eax
f0117fb5:	01 d0                	add    %edx,%eax
f0117fb7:	c1 e0 03             	shl    $0x3,%eax
f0117fba:	01 d8                	add    %ebx,%eax
f0117fbc:	05 b8 00 00 00       	add    $0xb8,%eax
f0117fc1:	8b 00                	mov    (%eax),%eax
f0117fc3:	39 c1                	cmp    %eax,%ecx
f0117fc5:	74 17                	je     f0117fde <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117fc7:	83 ec 04             	sub    $0x4,%esp
f0117fca:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0117fcf:	68 79 01 00 00       	push   $0x179
f0117fd4:	68 09 86 13 f0       	push   $0xf0138609
f0117fd9:	e8 d2 81 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117fde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117fe1:	83 c0 05             	add    $0x5,%eax
f0117fe4:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117feb:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117fee:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117ff1:	89 d0                	mov    %edx,%eax
f0117ff3:	01 c0                	add    %eax,%eax
f0117ff5:	01 d0                	add    %edx,%eax
f0117ff7:	c1 e0 03             	shl    $0x3,%eax
f0117ffa:	01 d8                	add    %ebx,%eax
f0117ffc:	05 c0 00 00 00       	add    $0xc0,%eax
f0118001:	8b 00                	mov    (%eax),%eax
f0118003:	39 c1                	cmp    %eax,%ecx
f0118005:	74 17                	je     f011801e <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118007:	83 ec 04             	sub    $0x4,%esp
f011800a:	68 5c 8a 13 f0       	push   $0xf0138a5c
f011800f:	68 7c 01 00 00       	push   $0x17c
f0118014:	68 09 86 13 f0       	push   $0xf0138609
f0118019:	e8 92 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011801e:	ff 45 c4             	incl   -0x3c(%ebp)
f0118021:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118025:	0f 8e 73 ff ff ff    	jle    f0117f9e <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011802b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011802e:	83 ec 08             	sub    $0x8,%esp
f0118031:	6a 05                	push   $0x5
f0118033:	50                   	push   %eax
f0118034:	e8 c0 2a ff ff       	call   f010aaf9 <set_program_priority>
f0118039:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011803c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011803f:	83 ec 08             	sub    $0x8,%esp
f0118042:	6a 05                	push   $0x5
f0118044:	50                   	push   %eax
f0118045:	e8 af 2a ff ff       	call   f010aaf9 <set_program_priority>
f011804a:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011804d:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118054:	75 6e 61 
f0118057:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011805e:	6c 00 00 
f0118061:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118067:	b9 17 00 00 00       	mov    $0x17,%ecx
f011806c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118071:	89 d7                	mov    %edx,%edi
f0118073:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118075:	83 ec 0c             	sub    $0xc,%esp
f0118078:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011807e:	50                   	push   %eax
f011807f:	e8 3f 9b fe ff       	call   f0101bc3 <execute_command>
f0118084:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118087:	eb 10                	jmp    f0118099 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0118089:	83 ec 0c             	sub    $0xc,%esp
f011808c:	68 38 8b 13 f0       	push   $0xf0138b38
f0118091:	e8 9b 8d fe ff       	call   f0100e31 <cprintf>
f0118096:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0118099:	90                   	nop
f011809a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011809d:	5b                   	pop    %ebx
f011809e:	5e                   	pop    %esi
f011809f:	5f                   	pop    %edi
f01180a0:	5d                   	pop    %ebp
f01180a1:	c3                   	ret    

f01180a2 <isKHeapPlacementStrategyNEXTFIT>:
f01180a2:	55                   	push   %ebp
f01180a3:	89 e5                	mov    %esp,%ebp
f01180a5:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01180aa:	83 f8 03             	cmp    $0x3,%eax
f01180ad:	75 04                	jne    f01180b3 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01180af:	b0 01                	mov    $0x1,%al
f01180b1:	eb 02                	jmp    f01180b5 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01180b3:	b0 00                	mov    $0x0,%al
f01180b5:	5d                   	pop    %ebp
f01180b6:	c3                   	ret    

f01180b7 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01180b7:	55                   	push   %ebp
f01180b8:	89 e5                	mov    %esp,%ebp
f01180ba:	57                   	push   %edi
f01180bb:	53                   	push   %ebx
f01180bc:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f01180c2:	83 ec 0c             	sub    $0xc,%esp
f01180c5:	68 3c 8c 13 f0       	push   $0xf0138c3c
f01180ca:	e8 62 8d fe ff       	call   f0100e31 <cprintf>
f01180cf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01180d2:	83 ec 0c             	sub    $0xc,%esp
f01180d5:	68 6c 8c 13 f0       	push   $0xf0138c6c
f01180da:	e8 52 8d fe ff       	call   f0100e31 <cprintf>
f01180df:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01180e2:	83 ec 0c             	sub    $0xc,%esp
f01180e5:	68 3c 8c 13 f0       	push   $0xf0138c3c
f01180ea:	e8 42 8d fe ff       	call   f0100e31 <cprintf>
f01180ef:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01180f2:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01180f6:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01180fa:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118100:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118106:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011810d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118114:	e8 f9 44 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118119:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011811c:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118122:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118127:	b8 00 00 00 00       	mov    $0x0,%eax
f011812c:	89 d7                	mov    %edx,%edi
f011812e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0118130:	e8 dd 44 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118135:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0118138:	e8 7b c1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011813d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0118140:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0118147:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011814c:	0f b6 d0             	movzbl %al,%edx
f011814f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118152:	01 d0                	add    %edx,%eax
f0118154:	48                   	dec    %eax
f0118155:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0118158:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011815b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118160:	f7 75 d4             	divl   -0x2c(%ebp)
f0118163:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118166:	29 d0                	sub    %edx,%eax
f0118168:	89 c1                	mov    %eax,%ecx
f011816a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0118171:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118176:	0f b6 c0             	movzbl %al,%eax
f0118179:	c1 e0 04             	shl    $0x4,%eax
f011817c:	89 c2                	mov    %eax,%edx
f011817e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118181:	01 d0                	add    %edx,%eax
f0118183:	48                   	dec    %eax
f0118184:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0118187:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011818a:	ba 00 00 00 00       	mov    $0x0,%edx
f011818f:	f7 75 cc             	divl   -0x34(%ebp)
f0118192:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118195:	29 d0                	sub    %edx,%eax
f0118197:	01 c8                	add    %ecx,%eax
f0118199:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011819e:	29 c2                	sub    %eax,%edx
f01181a0:	89 d0                	mov    %edx,%eax
f01181a2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01181a5:	83 ec 0c             	sub    $0xc,%esp
f01181a8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01181ab:	e8 e3 f9 fe ff       	call   f0107b93 <kmalloc>
f01181b0:	83 c4 10             	add    $0x10,%esp
f01181b3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01181b9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01181bf:	85 c0                	test   %eax,%eax
f01181c1:	74 14                	je     f01181d7 <test_kmalloc+0x120>
f01181c3:	83 ec 04             	sub    $0x4,%esp
f01181c6:	68 c8 8c 13 f0       	push   $0xf0138cc8
f01181cb:	6a 40                	push   $0x40
f01181cd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01181d2:	e8 d9 7f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181d7:	e8 dc c0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01181dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181df:	74 14                	je     f01181f5 <test_kmalloc+0x13e>
f01181e1:	83 ec 04             	sub    $0x4,%esp
f01181e4:	68 14 8d 13 f0       	push   $0xf0138d14
f01181e9:	6a 41                	push   $0x41
f01181eb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01181f0:	e8 bb 7f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181f5:	e8 18 44 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01181fa:	89 c2                	mov    %eax,%edx
f01181fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01181ff:	39 c2                	cmp    %eax,%edx
f0118201:	74 14                	je     f0118217 <test_kmalloc+0x160>
f0118203:	83 ec 04             	sub    $0x4,%esp
f0118206:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011820b:	6a 42                	push   $0x42
f011820d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118212:	e8 99 7f fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118217:	83 ec 0c             	sub    $0xc,%esp
f011821a:	68 bc 8d 13 f0       	push   $0xf0138dbc
f011821f:	e8 0d 8c fe ff       	call   f0100e31 <cprintf>
f0118224:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118227:	e8 e6 43 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011822c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011822f:	e8 84 c0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118234:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118237:	83 ec 0c             	sub    $0xc,%esp
f011823a:	68 00 fc 1f 00       	push   $0x1ffc00
f011823f:	e8 4f f9 fe ff       	call   f0107b93 <kmalloc>
f0118244:	83 c4 10             	add    $0x10,%esp
f0118247:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011824d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118253:	89 c1                	mov    %eax,%ecx
f0118255:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011825c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118261:	0f b6 d0             	movzbl %al,%edx
f0118264:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118267:	01 d0                	add    %edx,%eax
f0118269:	48                   	dec    %eax
f011826a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011826d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118270:	ba 00 00 00 00       	mov    $0x0,%edx
f0118275:	f7 75 c0             	divl   -0x40(%ebp)
f0118278:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011827b:	29 d0                	sub    %edx,%eax
f011827d:	89 c3                	mov    %eax,%ebx
f011827f:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118286:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011828b:	0f b6 c0             	movzbl %al,%eax
f011828e:	c1 e0 04             	shl    $0x4,%eax
f0118291:	89 c2                	mov    %eax,%edx
f0118293:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118296:	01 d0                	add    %edx,%eax
f0118298:	48                   	dec    %eax
f0118299:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011829c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011829f:	ba 00 00 00 00       	mov    $0x0,%edx
f01182a4:	f7 75 b8             	divl   -0x48(%ebp)
f01182a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01182aa:	29 d0                	sub    %edx,%eax
f01182ac:	01 d8                	add    %ebx,%eax
f01182ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01182b3:	39 c1                	cmp    %eax,%ecx
f01182b5:	74 14                	je     f01182cb <test_kmalloc+0x214>
f01182b7:	83 ec 04             	sub    $0x4,%esp
f01182ba:	68 e0 8d 13 f0       	push   $0xf0138de0
f01182bf:	6a 49                	push   $0x49
f01182c1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01182c6:	e8 e5 7e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182cb:	e8 e8 bf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01182d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01182d3:	74 14                	je     f01182e9 <test_kmalloc+0x232>
f01182d5:	83 ec 04             	sub    $0x4,%esp
f01182d8:	68 14 8d 13 f0       	push   $0xf0138d14
f01182dd:	6a 4a                	push   $0x4a
f01182df:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01182e4:	e8 c7 7e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01182e9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01182ec:	e8 21 43 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01182f1:	29 c3                	sub    %eax,%ebx
f01182f3:	89 d8                	mov    %ebx,%eax
f01182f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01182fa:	74 14                	je     f0118310 <test_kmalloc+0x259>
f01182fc:	83 ec 04             	sub    $0x4,%esp
f01182ff:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0118304:	6a 4b                	push   $0x4b
f0118306:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011830b:	e8 a0 7e fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118310:	e8 fd 42 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118315:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118318:	e8 9b bf fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011831d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118320:	83 ec 0c             	sub    $0xc,%esp
f0118323:	68 00 fc 1f 00       	push   $0x1ffc00
f0118328:	e8 66 f8 fe ff       	call   f0107b93 <kmalloc>
f011832d:	83 c4 10             	add    $0x10,%esp
f0118330:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118336:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011833c:	89 c1                	mov    %eax,%ecx
f011833e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118345:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011834a:	0f b6 d0             	movzbl %al,%edx
f011834d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118350:	01 d0                	add    %edx,%eax
f0118352:	48                   	dec    %eax
f0118353:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118356:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118359:	ba 00 00 00 00       	mov    $0x0,%edx
f011835e:	f7 75 b0             	divl   -0x50(%ebp)
f0118361:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118364:	29 d0                	sub    %edx,%eax
f0118366:	89 c3                	mov    %eax,%ebx
f0118368:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011836f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118374:	0f b6 c0             	movzbl %al,%eax
f0118377:	c1 e0 04             	shl    $0x4,%eax
f011837a:	89 c2                	mov    %eax,%edx
f011837c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011837f:	01 d0                	add    %edx,%eax
f0118381:	48                   	dec    %eax
f0118382:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118385:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118388:	ba 00 00 00 00       	mov    $0x0,%edx
f011838d:	f7 75 a8             	divl   -0x58(%ebp)
f0118390:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118393:	29 d0                	sub    %edx,%eax
f0118395:	01 d8                	add    %ebx,%eax
f0118397:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011839c:	39 c1                	cmp    %eax,%ecx
f011839e:	74 14                	je     f01183b4 <test_kmalloc+0x2fd>
f01183a0:	83 ec 04             	sub    $0x4,%esp
f01183a3:	68 e0 8d 13 f0       	push   $0xf0138de0
f01183a8:	6a 51                	push   $0x51
f01183aa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01183af:	e8 fc 7d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01183b4:	e8 ff be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01183b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01183bc:	74 14                	je     f01183d2 <test_kmalloc+0x31b>
f01183be:	83 ec 04             	sub    $0x4,%esp
f01183c1:	68 14 8d 13 f0       	push   $0xf0138d14
f01183c6:	6a 52                	push   $0x52
f01183c8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01183cd:	e8 de 7d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01183d2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01183d5:	e8 38 42 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01183da:	29 c3                	sub    %eax,%ebx
f01183dc:	89 d8                	mov    %ebx,%eax
f01183de:	3d 00 02 00 00       	cmp    $0x200,%eax
f01183e3:	74 14                	je     f01183f9 <test_kmalloc+0x342>
f01183e5:	83 ec 04             	sub    $0x4,%esp
f01183e8:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01183ed:	6a 53                	push   $0x53
f01183ef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01183f4:	e8 b7 7d fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01183f9:	e8 14 42 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01183fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118401:	e8 b2 be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118406:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118409:	83 ec 0c             	sub    $0xc,%esp
f011840c:	68 00 08 00 00       	push   $0x800
f0118411:	e8 7d f7 fe ff       	call   f0107b93 <kmalloc>
f0118416:	83 c4 10             	add    $0x10,%esp
f0118419:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011841f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118425:	89 c1                	mov    %eax,%ecx
f0118427:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011842e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118433:	0f b6 d0             	movzbl %al,%edx
f0118436:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118439:	01 d0                	add    %edx,%eax
f011843b:	48                   	dec    %eax
f011843c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011843f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118442:	ba 00 00 00 00       	mov    $0x0,%edx
f0118447:	f7 75 a0             	divl   -0x60(%ebp)
f011844a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011844d:	29 d0                	sub    %edx,%eax
f011844f:	89 c3                	mov    %eax,%ebx
f0118451:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118458:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011845d:	0f b6 c0             	movzbl %al,%eax
f0118460:	c1 e0 04             	shl    $0x4,%eax
f0118463:	89 c2                	mov    %eax,%edx
f0118465:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118468:	01 d0                	add    %edx,%eax
f011846a:	48                   	dec    %eax
f011846b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011846e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118471:	ba 00 00 00 00       	mov    $0x0,%edx
f0118476:	f7 75 98             	divl   -0x68(%ebp)
f0118479:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011847c:	29 d0                	sub    %edx,%eax
f011847e:	01 d8                	add    %ebx,%eax
f0118480:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118485:	39 c1                	cmp    %eax,%ecx
f0118487:	74 14                	je     f011849d <test_kmalloc+0x3e6>
f0118489:	83 ec 04             	sub    $0x4,%esp
f011848c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0118491:	6a 59                	push   $0x59
f0118493:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118498:	e8 13 7d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011849d:	e8 16 be fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01184a2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01184a5:	74 14                	je     f01184bb <test_kmalloc+0x404>
f01184a7:	83 ec 04             	sub    $0x4,%esp
f01184aa:	68 14 8d 13 f0       	push   $0xf0138d14
f01184af:	6a 5a                	push   $0x5a
f01184b1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01184b6:	e8 f5 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01184bb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01184be:	e8 4f 41 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01184c3:	29 c3                	sub    %eax,%ebx
f01184c5:	89 d8                	mov    %ebx,%eax
f01184c7:	83 f8 01             	cmp    $0x1,%eax
f01184ca:	74 14                	je     f01184e0 <test_kmalloc+0x429>
f01184cc:	83 ec 04             	sub    $0x4,%esp
f01184cf:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01184d4:	6a 5b                	push   $0x5b
f01184d6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01184db:	e8 d0 7c fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01184e0:	e8 2d 41 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01184e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184e8:	e8 cb bd fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01184ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01184f0:	83 ec 0c             	sub    $0xc,%esp
f01184f3:	68 00 08 00 00       	push   $0x800
f01184f8:	e8 96 f6 fe ff       	call   f0107b93 <kmalloc>
f01184fd:	83 c4 10             	add    $0x10,%esp
f0118500:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118506:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011850c:	89 c1                	mov    %eax,%ecx
f011850e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118515:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011851a:	0f b6 d0             	movzbl %al,%edx
f011851d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118520:	01 d0                	add    %edx,%eax
f0118522:	48                   	dec    %eax
f0118523:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118526:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118529:	ba 00 00 00 00       	mov    $0x0,%edx
f011852e:	f7 75 90             	divl   -0x70(%ebp)
f0118531:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118534:	29 d0                	sub    %edx,%eax
f0118536:	89 c3                	mov    %eax,%ebx
f0118538:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011853f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118544:	0f b6 c0             	movzbl %al,%eax
f0118547:	c1 e0 04             	shl    $0x4,%eax
f011854a:	89 c2                	mov    %eax,%edx
f011854c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011854f:	01 d0                	add    %edx,%eax
f0118551:	48                   	dec    %eax
f0118552:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118555:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118558:	ba 00 00 00 00       	mov    $0x0,%edx
f011855d:	f7 75 88             	divl   -0x78(%ebp)
f0118560:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118563:	29 d0                	sub    %edx,%eax
f0118565:	01 d8                	add    %ebx,%eax
f0118567:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011856c:	39 c1                	cmp    %eax,%ecx
f011856e:	74 14                	je     f0118584 <test_kmalloc+0x4cd>
f0118570:	83 ec 04             	sub    $0x4,%esp
f0118573:	68 e0 8d 13 f0       	push   $0xf0138de0
f0118578:	6a 61                	push   $0x61
f011857a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011857f:	e8 2c 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118584:	e8 2f bd fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118589:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011858c:	74 14                	je     f01185a2 <test_kmalloc+0x4eb>
f011858e:	83 ec 04             	sub    $0x4,%esp
f0118591:	68 14 8d 13 f0       	push   $0xf0138d14
f0118596:	6a 62                	push   $0x62
f0118598:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011859d:	e8 0e 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01185a2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01185a5:	e8 68 40 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01185aa:	29 c3                	sub    %eax,%ebx
f01185ac:	89 d8                	mov    %ebx,%eax
f01185ae:	83 f8 01             	cmp    $0x1,%eax
f01185b1:	74 14                	je     f01185c7 <test_kmalloc+0x510>
f01185b3:	83 ec 04             	sub    $0x4,%esp
f01185b6:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01185bb:	6a 63                	push   $0x63
f01185bd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01185c2:	e8 e9 7b fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01185c7:	e8 46 40 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01185cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01185cf:	e8 e4 bc fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01185d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01185d7:	83 ec 0c             	sub    $0xc,%esp
f01185da:	68 00 1c 00 00       	push   $0x1c00
f01185df:	e8 af f5 fe ff       	call   f0107b93 <kmalloc>
f01185e4:	83 c4 10             	add    $0x10,%esp
f01185e7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01185ed:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01185f3:	89 c1                	mov    %eax,%ecx
f01185f5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01185fc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118601:	0f b6 d0             	movzbl %al,%edx
f0118604:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118607:	01 d0                	add    %edx,%eax
f0118609:	48                   	dec    %eax
f011860a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118610:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118616:	ba 00 00 00 00       	mov    $0x0,%edx
f011861b:	f7 75 80             	divl   -0x80(%ebp)
f011861e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118624:	29 d0                	sub    %edx,%eax
f0118626:	89 c3                	mov    %eax,%ebx
f0118628:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011862f:	10 00 00 
f0118632:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118637:	0f b6 c0             	movzbl %al,%eax
f011863a:	c1 e0 04             	shl    $0x4,%eax
f011863d:	89 c2                	mov    %eax,%edx
f011863f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118645:	01 d0                	add    %edx,%eax
f0118647:	48                   	dec    %eax
f0118648:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011864e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118654:	ba 00 00 00 00       	mov    $0x0,%edx
f0118659:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011865f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118665:	29 d0                	sub    %edx,%eax
f0118667:	01 d8                	add    %ebx,%eax
f0118669:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011866e:	39 c1                	cmp    %eax,%ecx
f0118670:	74 14                	je     f0118686 <test_kmalloc+0x5cf>
f0118672:	83 ec 04             	sub    $0x4,%esp
f0118675:	68 e0 8d 13 f0       	push   $0xf0138de0
f011867a:	6a 69                	push   $0x69
f011867c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118681:	e8 2a 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118686:	e8 2d bc fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011868b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011868e:	74 14                	je     f01186a4 <test_kmalloc+0x5ed>
f0118690:	83 ec 04             	sub    $0x4,%esp
f0118693:	68 14 8d 13 f0       	push   $0xf0138d14
f0118698:	6a 6a                	push   $0x6a
f011869a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011869f:	e8 0c 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01186a4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01186a7:	e8 66 3f ff ff       	call   f010c612 <sys_calculate_free_frames>
f01186ac:	29 c3                	sub    %eax,%ebx
f01186ae:	89 d8                	mov    %ebx,%eax
f01186b0:	83 f8 02             	cmp    $0x2,%eax
f01186b3:	74 14                	je     f01186c9 <test_kmalloc+0x612>
f01186b5:	83 ec 04             	sub    $0x4,%esp
f01186b8:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01186bd:	6a 6b                	push   $0x6b
f01186bf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01186c4:	e8 e7 7a fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01186c9:	e8 44 3f ff ff       	call   f010c612 <sys_calculate_free_frames>
f01186ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01186d1:	e8 e2 bb fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01186d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01186d9:	83 ec 0c             	sub    $0xc,%esp
f01186dc:	68 00 fc 2f 00       	push   $0x2ffc00
f01186e1:	e8 ad f4 fe ff       	call   f0107b93 <kmalloc>
f01186e6:	83 c4 10             	add    $0x10,%esp
f01186e9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01186ef:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01186f5:	89 c1                	mov    %eax,%ecx
f01186f7:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01186fe:	10 00 00 
f0118701:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118706:	0f b6 d0             	movzbl %al,%edx
f0118709:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011870f:	01 d0                	add    %edx,%eax
f0118711:	48                   	dec    %eax
f0118712:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118718:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011871e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118723:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118729:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011872f:	29 d0                	sub    %edx,%eax
f0118731:	89 c3                	mov    %eax,%ebx
f0118733:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011873a:	10 00 00 
f011873d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118742:	0f b6 c0             	movzbl %al,%eax
f0118745:	c1 e0 04             	shl    $0x4,%eax
f0118748:	89 c2                	mov    %eax,%edx
f011874a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118750:	01 d0                	add    %edx,%eax
f0118752:	48                   	dec    %eax
f0118753:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118759:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011875f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118764:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011876a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118770:	29 d0                	sub    %edx,%eax
f0118772:	01 d8                	add    %ebx,%eax
f0118774:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118779:	39 c1                	cmp    %eax,%ecx
f011877b:	74 14                	je     f0118791 <test_kmalloc+0x6da>
f011877d:	83 ec 04             	sub    $0x4,%esp
f0118780:	68 e0 8d 13 f0       	push   $0xf0138de0
f0118785:	6a 71                	push   $0x71
f0118787:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011878c:	e8 1f 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118791:	e8 22 bb fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118796:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118799:	74 14                	je     f01187af <test_kmalloc+0x6f8>
f011879b:	83 ec 04             	sub    $0x4,%esp
f011879e:	68 14 8d 13 f0       	push   $0xf0138d14
f01187a3:	6a 72                	push   $0x72
f01187a5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01187aa:	e8 01 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01187af:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01187b2:	e8 5b 3e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01187b7:	29 c3                	sub    %eax,%ebx
f01187b9:	89 d8                	mov    %ebx,%eax
f01187bb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01187c0:	74 14                	je     f01187d6 <test_kmalloc+0x71f>
f01187c2:	83 ec 04             	sub    $0x4,%esp
f01187c5:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01187ca:	6a 73                	push   $0x73
f01187cc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01187d1:	e8 da 79 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01187d6:	e8 37 3e ff ff       	call   f010c612 <sys_calculate_free_frames>
f01187db:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187de:	e8 d5 ba fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01187e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01187e6:	83 ec 0c             	sub    $0xc,%esp
f01187e9:	68 00 fc 5f 00       	push   $0x5ffc00
f01187ee:	e8 a0 f3 fe ff       	call   f0107b93 <kmalloc>
f01187f3:	83 c4 10             	add    $0x10,%esp
f01187f6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187fc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118802:	89 c1                	mov    %eax,%ecx
f0118804:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011880b:	10 00 00 
f011880e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118813:	0f b6 d0             	movzbl %al,%edx
f0118816:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011881c:	01 d0                	add    %edx,%eax
f011881e:	48                   	dec    %eax
f011881f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118825:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011882b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118830:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118836:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011883c:	29 d0                	sub    %edx,%eax
f011883e:	89 c3                	mov    %eax,%ebx
f0118840:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118847:	10 00 00 
f011884a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011884f:	0f b6 c0             	movzbl %al,%eax
f0118852:	c1 e0 04             	shl    $0x4,%eax
f0118855:	89 c2                	mov    %eax,%edx
f0118857:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011885d:	01 d0                	add    %edx,%eax
f011885f:	48                   	dec    %eax
f0118860:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118866:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011886c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118871:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118877:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011887d:	29 d0                	sub    %edx,%eax
f011887f:	01 d8                	add    %ebx,%eax
f0118881:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118886:	39 c1                	cmp    %eax,%ecx
f0118888:	74 14                	je     f011889e <test_kmalloc+0x7e7>
f011888a:	83 ec 04             	sub    $0x4,%esp
f011888d:	68 e0 8d 13 f0       	push   $0xf0138de0
f0118892:	6a 79                	push   $0x79
f0118894:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118899:	e8 12 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011889e:	e8 15 ba fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01188a3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188a6:	74 14                	je     f01188bc <test_kmalloc+0x805>
f01188a8:	83 ec 04             	sub    $0x4,%esp
f01188ab:	68 14 8d 13 f0       	push   $0xf0138d14
f01188b0:	6a 7a                	push   $0x7a
f01188b2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01188b7:	e8 f4 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188bc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01188bf:	e8 4e 3d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01188c4:	29 c3                	sub    %eax,%ebx
f01188c6:	89 d8                	mov    %ebx,%eax
f01188c8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01188cd:	74 14                	je     f01188e3 <test_kmalloc+0x82c>
f01188cf:	83 ec 04             	sub    $0x4,%esp
f01188d2:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01188d7:	6a 7b                	push   $0x7b
f01188d9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01188de:	e8 cd 78 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01188e3:	e8 2a 3d ff ff       	call   f010c612 <sys_calculate_free_frames>
f01188e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188eb:	e8 c8 b9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01188f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01188f3:	83 ec 0c             	sub    $0xc,%esp
f01188f6:	68 00 38 00 00       	push   $0x3800
f01188fb:	e8 93 f2 fe ff       	call   f0107b93 <kmalloc>
f0118900:	83 c4 10             	add    $0x10,%esp
f0118903:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118909:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011890f:	89 c1                	mov    %eax,%ecx
f0118911:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118918:	10 00 00 
f011891b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118920:	0f b6 d0             	movzbl %al,%edx
f0118923:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118929:	01 d0                	add    %edx,%eax
f011892b:	48                   	dec    %eax
f011892c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118932:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118938:	ba 00 00 00 00       	mov    $0x0,%edx
f011893d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118943:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118949:	29 d0                	sub    %edx,%eax
f011894b:	89 c3                	mov    %eax,%ebx
f011894d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118954:	10 00 00 
f0118957:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011895c:	0f b6 c0             	movzbl %al,%eax
f011895f:	c1 e0 04             	shl    $0x4,%eax
f0118962:	89 c2                	mov    %eax,%edx
f0118964:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011896a:	01 d0                	add    %edx,%eax
f011896c:	48                   	dec    %eax
f011896d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118973:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118979:	ba 00 00 00 00       	mov    $0x0,%edx
f011897e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118984:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011898a:	29 d0                	sub    %edx,%eax
f011898c:	01 d8                	add    %ebx,%eax
f011898e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118993:	39 c1                	cmp    %eax,%ecx
f0118995:	74 17                	je     f01189ae <test_kmalloc+0x8f7>
f0118997:	83 ec 04             	sub    $0x4,%esp
f011899a:	68 e0 8d 13 f0       	push   $0xf0138de0
f011899f:	68 81 00 00 00       	push   $0x81
f01189a4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01189a9:	e8 02 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189ae:	e8 05 b9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01189b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189b6:	74 17                	je     f01189cf <test_kmalloc+0x918>
f01189b8:	83 ec 04             	sub    $0x4,%esp
f01189bb:	68 14 8d 13 f0       	push   $0xf0138d14
f01189c0:	68 82 00 00 00       	push   $0x82
f01189c5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01189ca:	e8 e1 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189cf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189d2:	e8 3b 3c ff ff       	call   f010c612 <sys_calculate_free_frames>
f01189d7:	29 c3                	sub    %eax,%ebx
f01189d9:	89 d8                	mov    %ebx,%eax
f01189db:	83 f8 04             	cmp    $0x4,%eax
f01189de:	74 17                	je     f01189f7 <test_kmalloc+0x940>
f01189e0:	83 ec 04             	sub    $0x4,%esp
f01189e3:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01189e8:	68 83 00 00 00       	push   $0x83
f01189ed:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01189f2:	e8 b9 77 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f01189f7:	83 ec 0c             	sub    $0xc,%esp
f01189fa:	68 46 8e 13 f0       	push   $0xf0138e46
f01189ff:	e8 2d 84 fe ff       	call   f0100e31 <cprintf>
f0118a04:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118a07:	e8 06 3c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118a0f:	e8 a4 b8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118a14:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118a17:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118a1e:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118a21:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118a27:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118a2d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118a33:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a36:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118a38:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118a3e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118a44:	01 c2                	add    %eax,%edx
f0118a46:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a49:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118a4b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a51:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118a57:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118a5e:	fd 0f 00 
			shortArr[0] = minShort;
f0118a61:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a6a:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118a6d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118a73:	01 c0                	add    %eax,%eax
f0118a75:	89 c2                	mov    %eax,%edx
f0118a77:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118a7d:	01 c2                	add    %eax,%edx
f0118a7f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118a83:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118a86:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a8c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118a92:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118a99:	01 00 00 
			intArr[0] = minInt;
f0118a9c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118aa2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118aa5:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118aa7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118aad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118ab4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118aba:	01 c2                	add    %eax,%edx
f0118abc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118abf:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118ac1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118ac7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118acd:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118ad4:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118ad7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118add:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118ae0:	88 10                	mov    %dl,(%eax)
f0118ae2:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118ae8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118aeb:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118aef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118af5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118af8:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118afb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118b01:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b08:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118b0e:	01 c2                	add    %eax,%edx
f0118b10:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b13:	88 02                	mov    %al,(%edx)
f0118b15:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118b1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b22:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118b28:	01 c2                	add    %eax,%edx
f0118b2a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b2e:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b32:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118b38:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b3f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118b45:	01 c2                	add    %eax,%edx
f0118b47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b4a:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118b4d:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118b54:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118b57:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118b5d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118b63:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b69:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b6c:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118b6e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118b74:	89 c2                	mov    %eax,%edx
f0118b76:	c1 ea 1f             	shr    $0x1f,%edx
f0118b79:	01 d0                	add    %edx,%eax
f0118b7b:	d1 f8                	sar    %eax
f0118b7d:	89 c2                	mov    %eax,%edx
f0118b7f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118b85:	01 c2                	add    %eax,%edx
f0118b87:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b8a:	88 c1                	mov    %al,%cl
f0118b8c:	c0 e9 07             	shr    $0x7,%cl
f0118b8f:	01 c8                	add    %ecx,%eax
f0118b91:	d0 f8                	sar    %al
f0118b93:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118b95:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118b9b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ba1:	01 c2                	add    %eax,%edx
f0118ba3:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118ba6:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118ba8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118bae:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118bb4:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118bbb:	1b 00 00 
			shortArr2[0] = minShort;
f0118bbe:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118bc7:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118bca:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118bd0:	01 c0                	add    %eax,%eax
f0118bd2:	89 c2                	mov    %eax,%edx
f0118bd4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118bda:	01 c2                	add    %eax,%edx
f0118bdc:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118be0:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118be3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118be9:	8a 00                	mov    (%eax),%al
f0118beb:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118bee:	75 15                	jne    f0118c05 <test_kmalloc+0xb4e>
f0118bf0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118bf6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118bfc:	01 d0                	add    %edx,%eax
f0118bfe:	8a 00                	mov    (%eax),%al
f0118c00:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118c03:	74 17                	je     f0118c1c <test_kmalloc+0xb65>
f0118c05:	83 ec 04             	sub    $0x4,%esp
f0118c08:	68 50 8e 13 f0       	push   $0xf0138e50
f0118c0d:	68 b2 00 00 00       	push   $0xb2
f0118c12:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118c17:	e8 94 75 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118c1c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118c22:	66 8b 00             	mov    (%eax),%ax
f0118c25:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118c29:	75 1b                	jne    f0118c46 <test_kmalloc+0xb8f>
f0118c2b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118c31:	01 c0                	add    %eax,%eax
f0118c33:	89 c2                	mov    %eax,%edx
f0118c35:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118c3b:	01 d0                	add    %edx,%eax
f0118c3d:	66 8b 00             	mov    (%eax),%ax
f0118c40:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118c44:	74 17                	je     f0118c5d <test_kmalloc+0xba6>
f0118c46:	83 ec 04             	sub    $0x4,%esp
f0118c49:	68 50 8e 13 f0       	push   $0xf0138e50
f0118c4e:	68 b3 00 00 00       	push   $0xb3
f0118c53:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118c58:	e8 53 75 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118c5d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118c63:	8b 00                	mov    (%eax),%eax
f0118c65:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c68:	75 1c                	jne    f0118c86 <test_kmalloc+0xbcf>
f0118c6a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118c70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118c77:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118c7d:	01 d0                	add    %edx,%eax
f0118c7f:	8b 00                	mov    (%eax),%eax
f0118c81:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118c84:	74 17                	je     f0118c9d <test_kmalloc+0xbe6>
f0118c86:	83 ec 04             	sub    $0x4,%esp
f0118c89:	68 50 8e 13 f0       	push   $0xf0138e50
f0118c8e:	68 b4 00 00 00       	push   $0xb4
f0118c93:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118c98:	e8 13 75 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118c9d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ca3:	8a 00                	mov    (%eax),%al
f0118ca5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118ca8:	75 1c                	jne    f0118cc6 <test_kmalloc+0xc0f>
f0118caa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118cb0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118cbd:	01 d0                	add    %edx,%eax
f0118cbf:	8a 00                	mov    (%eax),%al
f0118cc1:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118cc4:	74 17                	je     f0118cdd <test_kmalloc+0xc26>
f0118cc6:	83 ec 04             	sub    $0x4,%esp
f0118cc9:	68 50 8e 13 f0       	push   $0xf0138e50
f0118cce:	68 b6 00 00 00       	push   $0xb6
f0118cd3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118cd8:	e8 d3 74 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118cdd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ce3:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118ce7:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118ceb:	75 1f                	jne    f0118d0c <test_kmalloc+0xc55>
f0118ced:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118cf3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cfa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118d00:	01 d0                	add    %edx,%eax
f0118d02:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d06:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118d0a:	74 17                	je     f0118d23 <test_kmalloc+0xc6c>
f0118d0c:	83 ec 04             	sub    $0x4,%esp
f0118d0f:	68 50 8e 13 f0       	push   $0xf0138e50
f0118d14:	68 b7 00 00 00       	push   $0xb7
f0118d19:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118d1e:	e8 8d 74 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d23:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118d29:	8b 40 04             	mov    0x4(%eax),%eax
f0118d2c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118d2f:	75 1d                	jne    f0118d4e <test_kmalloc+0xc97>
f0118d31:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118d37:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d3e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118d44:	01 d0                	add    %edx,%eax
f0118d46:	8b 40 04             	mov    0x4(%eax),%eax
f0118d49:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d4c:	74 17                	je     f0118d65 <test_kmalloc+0xcae>
f0118d4e:	83 ec 04             	sub    $0x4,%esp
f0118d51:	68 50 8e 13 f0       	push   $0xf0138e50
f0118d56:	68 b8 00 00 00       	push   $0xb8
f0118d5b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118d60:	e8 4b 74 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118d65:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118d6b:	8a 00                	mov    (%eax),%al
f0118d6d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d70:	75 40                	jne    f0118db2 <test_kmalloc+0xcfb>
f0118d72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118d78:	89 c2                	mov    %eax,%edx
f0118d7a:	c1 ea 1f             	shr    $0x1f,%edx
f0118d7d:	01 d0                	add    %edx,%eax
f0118d7f:	d1 f8                	sar    %eax
f0118d81:	89 c2                	mov    %eax,%edx
f0118d83:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118d89:	01 d0                	add    %edx,%eax
f0118d8b:	8a 10                	mov    (%eax),%dl
f0118d8d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118d90:	88 c1                	mov    %al,%cl
f0118d92:	c0 e9 07             	shr    $0x7,%cl
f0118d95:	01 c8                	add    %ecx,%eax
f0118d97:	d0 f8                	sar    %al
f0118d99:	38 c2                	cmp    %al,%dl
f0118d9b:	75 15                	jne    f0118db2 <test_kmalloc+0xcfb>
f0118d9d:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118da3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118da9:	01 d0                	add    %edx,%eax
f0118dab:	8a 00                	mov    (%eax),%al
f0118dad:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118db0:	74 17                	je     f0118dc9 <test_kmalloc+0xd12>
f0118db2:	83 ec 04             	sub    $0x4,%esp
f0118db5:	68 50 8e 13 f0       	push   $0xf0138e50
f0118dba:	68 ba 00 00 00       	push   $0xba
f0118dbf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118dc4:	e8 e7 73 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118dc9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118dcf:	66 8b 00             	mov    (%eax),%ax
f0118dd2:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118dd6:	75 1b                	jne    f0118df3 <test_kmalloc+0xd3c>
f0118dd8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118dde:	01 c0                	add    %eax,%eax
f0118de0:	89 c2                	mov    %eax,%edx
f0118de2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118de8:	01 d0                	add    %edx,%eax
f0118dea:	66 8b 00             	mov    (%eax),%ax
f0118ded:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118df1:	74 17                	je     f0118e0a <test_kmalloc+0xd53>
f0118df3:	83 ec 04             	sub    $0x4,%esp
f0118df6:	68 50 8e 13 f0       	push   $0xf0138e50
f0118dfb:	68 bb 00 00 00       	push   $0xbb
f0118e00:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118e05:	e8 a6 73 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e0a:	e8 03 38 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118e0f:	89 c2                	mov    %eax,%edx
f0118e11:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e14:	39 c2                	cmp    %eax,%edx
f0118e16:	74 17                	je     f0118e2f <test_kmalloc+0xd78>
f0118e18:	83 ec 04             	sub    $0x4,%esp
f0118e1b:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0118e20:	68 bd 00 00 00       	push   $0xbd
f0118e25:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118e2a:	e8 81 73 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e2f:	e8 84 b4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118e34:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e37:	74 17                	je     f0118e50 <test_kmalloc+0xd99>
f0118e39:	83 ec 04             	sub    $0x4,%esp
f0118e3c:	68 14 8d 13 f0       	push   $0xf0138d14
f0118e41:	68 be 00 00 00       	push   $0xbe
f0118e46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118e4b:	e8 60 73 fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f0118e50:	83 ec 0c             	sub    $0xc,%esp
f0118e53:	68 85 8e 13 f0       	push   $0xf0138e85
f0118e58:	e8 d4 7f fe ff       	call   f0100e31 <cprintf>
f0118e5d:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118e60:	e8 ad 37 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118e65:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e68:	e8 4b b4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118e6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118e70:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118e77:	10 00 00 
f0118e7a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118e7f:	0f b6 d0             	movzbl %al,%edx
f0118e82:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118e88:	01 d0                	add    %edx,%eax
f0118e8a:	48                   	dec    %eax
f0118e8b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118e91:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118e97:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e9c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118ea2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118ea8:	29 d0                	sub    %edx,%eax
f0118eaa:	89 c1                	mov    %eax,%ecx
f0118eac:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118eb3:	10 00 00 
f0118eb6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118ebb:	0f b6 c0             	movzbl %al,%eax
f0118ebe:	c1 e0 04             	shl    $0x4,%eax
f0118ec1:	89 c2                	mov    %eax,%edx
f0118ec3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118ec9:	01 d0                	add    %edx,%eax
f0118ecb:	48                   	dec    %eax
f0118ecc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118ed2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118edd:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118ee3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118ee9:	29 d0                	sub    %edx,%eax
f0118eeb:	01 c8                	add    %ecx,%eax
f0118eed:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118ef2:	29 c2                	sub    %eax,%edx
f0118ef4:	89 d0                	mov    %edx,%eax
f0118ef6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118efc:	83 ec 0c             	sub    $0xc,%esp
f0118eff:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0118f05:	e8 89 ec fe ff       	call   f0107b93 <kmalloc>
f0118f0a:	83 c4 10             	add    $0x10,%esp
f0118f0d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118f13:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f19:	85 c0                	test   %eax,%eax
f0118f1b:	74 17                	je     f0118f34 <test_kmalloc+0xe7d>
f0118f1d:	83 ec 04             	sub    $0x4,%esp
f0118f20:	68 c8 8c 13 f0       	push   $0xf0138cc8
f0118f25:	68 c8 00 00 00       	push   $0xc8
f0118f2a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118f2f:	e8 7c 72 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f34:	e8 7f b3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0118f39:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f3c:	74 17                	je     f0118f55 <test_kmalloc+0xe9e>
f0118f3e:	83 ec 04             	sub    $0x4,%esp
f0118f41:	68 14 8d 13 f0       	push   $0xf0138d14
f0118f46:	68 c9 00 00 00       	push   $0xc9
f0118f4b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118f50:	e8 5b 72 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f55:	e8 b8 36 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0118f5a:	89 c2                	mov    %eax,%edx
f0118f5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118f5f:	39 c2                	cmp    %eax,%edx
f0118f61:	74 17                	je     f0118f7a <test_kmalloc+0xec3>
f0118f63:	83 ec 04             	sub    $0x4,%esp
f0118f66:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0118f6b:	68 ca 00 00 00       	push   $0xca
f0118f70:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0118f75:	e8 36 72 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f0118f7a:	83 ec 0c             	sub    $0xc,%esp
f0118f7d:	68 8c 8e 13 f0       	push   $0xf0138e8c
f0118f82:	e8 aa 7e fe ff       	call   f0100e31 <cprintf>
f0118f87:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118f8a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f90:	05 00 40 00 00       	add    $0x4000,%eax
f0118f95:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118f9b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118fa2:	10 00 00 
f0118fa5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118faa:	0f b6 d0             	movzbl %al,%edx
f0118fad:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118fb3:	01 d0                	add    %edx,%eax
f0118fb5:	48                   	dec    %eax
f0118fb6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118fbc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118fc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fc7:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118fcd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118fd3:	29 d0                	sub    %edx,%eax
f0118fd5:	89 c1                	mov    %eax,%ecx
f0118fd7:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118fde:	10 00 00 
f0118fe1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0118fe6:	0f b6 c0             	movzbl %al,%eax
f0118fe9:	c1 e0 04             	shl    $0x4,%eax
f0118fec:	89 c2                	mov    %eax,%edx
f0118fee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118ff4:	01 d0                	add    %edx,%eax
f0118ff6:	48                   	dec    %eax
f0118ff7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118ffd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119003:	ba 00 00 00 00       	mov    $0x0,%edx
f0119008:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011900e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119014:	29 d0                	sub    %edx,%eax
f0119016:	01 c8                	add    %ecx,%eax
f0119018:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011901d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119020:	eb 6a                	jmp    f011908c <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119022:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0119027:	83 ec 04             	sub    $0x4,%esp
f011902a:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f0119030:	52                   	push   %edx
f0119031:	ff 75 f4             	pushl  -0xc(%ebp)
f0119034:	50                   	push   %eax
f0119035:	e8 e1 e0 fe ff       	call   f010711b <get_page_table>
f011903a:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011903d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119043:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119046:	c1 ea 0c             	shr    $0xc,%edx
f0119049:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011904f:	c1 e2 02             	shl    $0x2,%edx
f0119052:	01 d0                	add    %edx,%eax
f0119054:	8b 00                	mov    (%eax),%eax
f0119056:	25 ff 0f 00 00       	and    $0xfff,%eax
f011905b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119061:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119067:	83 e0 04             	and    $0x4,%eax
f011906a:	85 c0                	test   %eax,%eax
f011906c:	74 17                	je     f0119085 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011906e:	83 ec 04             	sub    $0x4,%esp
f0119071:	68 94 8e 13 f0       	push   $0xf0138e94
f0119076:	68 d7 00 00 00       	push   $0xd7
f011907b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119080:	e8 2b 71 fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119085:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011908c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011908f:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119095:	72 8b                	jb     f0119022 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119097:	83 ec 0c             	sub    $0xc,%esp
f011909a:	68 de 8e 13 f0       	push   $0xf0138ede
f011909f:	e8 8d 7d fe ff       	call   f0100e31 <cprintf>
f01190a4:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01190a7:	83 ec 0c             	sub    $0xc,%esp
f01190aa:	68 e8 8e 13 f0       	push   $0xf0138ee8
f01190af:	e8 7d 7d fe ff       	call   f0100e31 <cprintf>
f01190b4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01190b7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01190bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01190bf:	5b                   	pop    %ebx
f01190c0:	5f                   	pop    %edi
f01190c1:	5d                   	pop    %ebp
f01190c2:	c3                   	ret    

f01190c3 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01190c3:	55                   	push   %ebp
f01190c4:	89 e5                	mov    %esp,%ebp
f01190c6:	57                   	push   %edi
f01190c7:	53                   	push   %ebx
f01190c8:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f01190ce:	83 ec 0c             	sub    $0xc,%esp
f01190d1:	68 3c 8c 13 f0       	push   $0xf0138c3c
f01190d6:	e8 56 7d fe ff       	call   f0100e31 <cprintf>
f01190db:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01190de:	83 ec 0c             	sub    $0xc,%esp
f01190e1:	68 6c 8c 13 f0       	push   $0xf0138c6c
f01190e6:	e8 46 7d fe ff       	call   f0100e31 <cprintf>
f01190eb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01190ee:	83 ec 0c             	sub    $0xc,%esp
f01190f1:	68 3c 8c 13 f0       	push   $0xf0138c3c
f01190f6:	e8 36 7d fe ff       	call   f0100e31 <cprintf>
f01190fb:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01190fe:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119104:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119109:	b8 00 00 00 00       	mov    $0x0,%eax
f011910e:	89 d7                	mov    %edx,%edi
f0119110:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119112:	83 ec 0c             	sub    $0xc,%esp
f0119115:	68 24 8f 13 f0       	push   $0xf0138f24
f011911a:	e8 12 7d fe ff       	call   f0100e31 <cprintf>
f011911f:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119122:	e8 eb 34 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119127:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011912a:	e8 89 b1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011912f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119132:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119139:	eb 1f                	jmp    f011915a <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011913b:	83 ec 0c             	sub    $0xc,%esp
f011913e:	68 00 00 20 00       	push   $0x200000
f0119143:	e8 4b ea fe ff       	call   f0107b93 <kmalloc>
f0119148:	83 c4 10             	add    $0x10,%esp
f011914b:	89 c2                	mov    %eax,%edx
f011914d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119150:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119157:	ff 45 f4             	incl   -0xc(%ebp)
f011915a:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011915e:	7e db                	jle    f011913b <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0119160:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119167:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011916c:	0f b6 d0             	movzbl %al,%edx
f011916f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119172:	01 d0                	add    %edx,%eax
f0119174:	48                   	dec    %eax
f0119175:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119178:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011917b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119180:	f7 75 e8             	divl   -0x18(%ebp)
f0119183:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119186:	29 d0                	sub    %edx,%eax
f0119188:	89 c1                	mov    %eax,%ecx
f011918a:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119191:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119196:	0f b6 c0             	movzbl %al,%eax
f0119199:	c1 e0 04             	shl    $0x4,%eax
f011919c:	89 c2                	mov    %eax,%edx
f011919e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01191a1:	01 d0                	add    %edx,%eax
f01191a3:	48                   	dec    %eax
f01191a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01191a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01191af:	f7 75 e0             	divl   -0x20(%ebp)
f01191b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191b5:	29 d0                	sub    %edx,%eax
f01191b7:	01 c8                	add    %ecx,%eax
f01191b9:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01191be:	29 c2                	sub    %eax,%edx
f01191c0:	89 d0                	mov    %edx,%eax
f01191c2:	83 ec 0c             	sub    $0xc,%esp
f01191c5:	50                   	push   %eax
f01191c6:	e8 c8 e9 fe ff       	call   f0107b93 <kmalloc>
f01191cb:	83 c4 10             	add    $0x10,%esp
f01191ce:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01191d4:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f01191da:	89 c1                	mov    %eax,%ecx
f01191dc:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01191e3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01191e8:	0f b6 d0             	movzbl %al,%edx
f01191eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191ee:	01 d0                	add    %edx,%eax
f01191f0:	48                   	dec    %eax
f01191f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01191f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01191f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01191fc:	f7 75 d8             	divl   -0x28(%ebp)
f01191ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119202:	29 d0                	sub    %edx,%eax
f0119204:	89 c3                	mov    %eax,%ebx
f0119206:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011920d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119212:	0f b6 c0             	movzbl %al,%eax
f0119215:	c1 e0 04             	shl    $0x4,%eax
f0119218:	89 c2                	mov    %eax,%edx
f011921a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011921d:	01 d0                	add    %edx,%eax
f011921f:	48                   	dec    %eax
f0119220:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119223:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119226:	ba 00 00 00 00       	mov    $0x0,%edx
f011922b:	f7 75 d0             	divl   -0x30(%ebp)
f011922e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119231:	29 d0                	sub    %edx,%eax
f0119233:	01 d8                	add    %ebx,%eax
f0119235:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011923a:	39 c1                	cmp    %eax,%ecx
f011923c:	0f 85 4f 03 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119242:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119248:	89 c1                	mov    %eax,%ecx
f011924a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119251:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119256:	0f b6 d0             	movzbl %al,%edx
f0119259:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011925c:	01 d0                	add    %edx,%eax
f011925e:	48                   	dec    %eax
f011925f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119262:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119265:	ba 00 00 00 00       	mov    $0x0,%edx
f011926a:	f7 75 c8             	divl   -0x38(%ebp)
f011926d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119270:	29 d0                	sub    %edx,%eax
f0119272:	89 c3                	mov    %eax,%ebx
f0119274:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011927b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119280:	0f b6 c0             	movzbl %al,%eax
f0119283:	c1 e0 04             	shl    $0x4,%eax
f0119286:	89 c2                	mov    %eax,%edx
f0119288:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011928b:	01 d0                	add    %edx,%eax
f011928d:	48                   	dec    %eax
f011928e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119291:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119294:	ba 00 00 00 00       	mov    $0x0,%edx
f0119299:	f7 75 c0             	divl   -0x40(%ebp)
f011929c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011929f:	29 d0                	sub    %edx,%eax
f01192a1:	01 d8                	add    %ebx,%eax
f01192a3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01192a8:	39 c1                	cmp    %eax,%ecx
f01192aa:	0f 85 e1 02 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01192b0:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f01192b6:	89 c1                	mov    %eax,%ecx
f01192b8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01192bf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01192c4:	0f b6 d0             	movzbl %al,%edx
f01192c7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01192ca:	01 d0                	add    %edx,%eax
f01192cc:	48                   	dec    %eax
f01192cd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01192d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01192d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d8:	f7 75 b8             	divl   -0x48(%ebp)
f01192db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01192de:	29 d0                	sub    %edx,%eax
f01192e0:	89 c3                	mov    %eax,%ebx
f01192e2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01192e9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01192ee:	0f b6 c0             	movzbl %al,%eax
f01192f1:	c1 e0 04             	shl    $0x4,%eax
f01192f4:	89 c2                	mov    %eax,%edx
f01192f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01192f9:	01 d0                	add    %edx,%eax
f01192fb:	48                   	dec    %eax
f01192fc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01192ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119302:	ba 00 00 00 00       	mov    $0x0,%edx
f0119307:	f7 75 b0             	divl   -0x50(%ebp)
f011930a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011930d:	29 d0                	sub    %edx,%eax
f011930f:	01 d8                	add    %ebx,%eax
f0119311:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119316:	39 c1                	cmp    %eax,%ecx
f0119318:	0f 85 73 02 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011931e:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119324:	89 c1                	mov    %eax,%ecx
f0119326:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011932d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119332:	0f b6 d0             	movzbl %al,%edx
f0119335:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119338:	01 d0                	add    %edx,%eax
f011933a:	48                   	dec    %eax
f011933b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011933e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119341:	ba 00 00 00 00       	mov    $0x0,%edx
f0119346:	f7 75 a8             	divl   -0x58(%ebp)
f0119349:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011934c:	29 d0                	sub    %edx,%eax
f011934e:	89 c3                	mov    %eax,%ebx
f0119350:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119357:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011935c:	0f b6 c0             	movzbl %al,%eax
f011935f:	c1 e0 04             	shl    $0x4,%eax
f0119362:	89 c2                	mov    %eax,%edx
f0119364:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119367:	01 d0                	add    %edx,%eax
f0119369:	48                   	dec    %eax
f011936a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011936d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119370:	ba 00 00 00 00       	mov    $0x0,%edx
f0119375:	f7 75 a0             	divl   -0x60(%ebp)
f0119378:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011937b:	29 d0                	sub    %edx,%eax
f011937d:	01 d8                	add    %ebx,%eax
f011937f:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119384:	39 c1                	cmp    %eax,%ecx
f0119386:	0f 85 05 02 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011938c:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119392:	89 c1                	mov    %eax,%ecx
f0119394:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011939b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01193a0:	0f b6 d0             	movzbl %al,%edx
f01193a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01193a6:	01 d0                	add    %edx,%eax
f01193a8:	48                   	dec    %eax
f01193a9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01193ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193af:	ba 00 00 00 00       	mov    $0x0,%edx
f01193b4:	f7 75 98             	divl   -0x68(%ebp)
f01193b7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193ba:	29 d0                	sub    %edx,%eax
f01193bc:	89 c3                	mov    %eax,%ebx
f01193be:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01193c5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01193ca:	0f b6 c0             	movzbl %al,%eax
f01193cd:	c1 e0 04             	shl    $0x4,%eax
f01193d0:	89 c2                	mov    %eax,%edx
f01193d2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01193d5:	01 d0                	add    %edx,%eax
f01193d7:	48                   	dec    %eax
f01193d8:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01193db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01193de:	ba 00 00 00 00       	mov    $0x0,%edx
f01193e3:	f7 75 90             	divl   -0x70(%ebp)
f01193e6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01193e9:	29 d0                	sub    %edx,%eax
f01193eb:	01 d8                	add    %ebx,%eax
f01193ed:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01193f2:	39 c1                	cmp    %eax,%ecx
f01193f4:	0f 85 97 01 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01193fa:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119400:	89 c1                	mov    %eax,%ecx
f0119402:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0119409:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011940e:	0f b6 d0             	movzbl %al,%edx
f0119411:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119414:	01 d0                	add    %edx,%eax
f0119416:	48                   	dec    %eax
f0119417:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011941a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011941d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119422:	f7 75 88             	divl   -0x78(%ebp)
f0119425:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119428:	29 d0                	sub    %edx,%eax
f011942a:	89 c3                	mov    %eax,%ebx
f011942c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119433:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119438:	0f b6 c0             	movzbl %al,%eax
f011943b:	c1 e0 04             	shl    $0x4,%eax
f011943e:	89 c2                	mov    %eax,%edx
f0119440:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119443:	01 d0                	add    %edx,%eax
f0119445:	48                   	dec    %eax
f0119446:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011944c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119452:	ba 00 00 00 00       	mov    $0x0,%edx
f0119457:	f7 75 80             	divl   -0x80(%ebp)
f011945a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119460:	29 d0                	sub    %edx,%eax
f0119462:	01 d8                	add    %ebx,%eax
f0119464:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119469:	39 c1                	cmp    %eax,%ecx
f011946b:	0f 85 20 01 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119471:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119477:	89 c1                	mov    %eax,%ecx
f0119479:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119480:	10 00 00 
f0119483:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119488:	0f b6 d0             	movzbl %al,%edx
f011948b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119491:	01 d0                	add    %edx,%eax
f0119493:	48                   	dec    %eax
f0119494:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011949a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01194a5:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01194ab:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194b1:	29 d0                	sub    %edx,%eax
f01194b3:	89 c3                	mov    %eax,%ebx
f01194b5:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01194bc:	10 00 00 
f01194bf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01194c4:	0f b6 c0             	movzbl %al,%eax
f01194c7:	c1 e0 04             	shl    $0x4,%eax
f01194ca:	89 c2                	mov    %eax,%edx
f01194cc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01194d2:	01 d0                	add    %edx,%eax
f01194d4:	48                   	dec    %eax
f01194d5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01194db:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01194e6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01194ec:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194f2:	29 d0                	sub    %edx,%eax
f01194f4:	01 d8                	add    %ebx,%eax
f01194f6:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01194fb:	39 c1                	cmp    %eax,%ecx
f01194fd:	0f 85 8e 00 00 00    	jne    f0119591 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119503:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119509:	89 c1                	mov    %eax,%ecx
f011950b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119512:	10 00 00 
f0119515:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011951a:	0f b6 d0             	movzbl %al,%edx
f011951d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119523:	01 d0                	add    %edx,%eax
f0119525:	48                   	dec    %eax
f0119526:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011952c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119532:	ba 00 00 00 00       	mov    $0x0,%edx
f0119537:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011953d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119543:	29 d0                	sub    %edx,%eax
f0119545:	89 c3                	mov    %eax,%ebx
f0119547:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011954e:	10 00 00 
f0119551:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119556:	0f b6 c0             	movzbl %al,%eax
f0119559:	c1 e0 04             	shl    $0x4,%eax
f011955c:	89 c2                	mov    %eax,%edx
f011955e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119564:	01 d0                	add    %edx,%eax
f0119566:	48                   	dec    %eax
f0119567:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011956d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119573:	ba 00 00 00 00       	mov    $0x0,%edx
f0119578:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011957e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119584:	29 d0                	sub    %edx,%eax
f0119586:	01 d8                	add    %ebx,%eax
f0119588:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011958d:	39 c1                	cmp    %eax,%ecx
f011958f:	74 17                	je     f01195a8 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119591:	83 ec 04             	sub    $0x4,%esp
f0119594:	68 74 8f 13 f0       	push   $0xf0138f74
f0119599:	68 03 01 00 00       	push   $0x103
f011959e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01195a3:	e8 08 6c fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01195a8:	e8 0b ad fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01195ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01195b0:	74 17                	je     f01195c9 <test_kmalloc_nextfit+0x506>
f01195b2:	83 ec 04             	sub    $0x4,%esp
f01195b5:	68 14 8d 13 f0       	push   $0xf0138d14
f01195ba:	68 05 01 00 00       	push   $0x105
f01195bf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01195c4:	e8 e7 6b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01195c9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01195cc:	e8 41 30 ff ff       	call   f010c612 <sys_calculate_free_frames>
f01195d1:	29 c3                	sub    %eax,%ebx
f01195d3:	89 d9                	mov    %ebx,%ecx
f01195d5:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01195dc:	10 00 00 
f01195df:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01195e4:	0f b6 d0             	movzbl %al,%edx
f01195e7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01195ed:	01 d0                	add    %edx,%eax
f01195ef:	48                   	dec    %eax
f01195f0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01195f6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119601:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119607:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011960d:	29 d0                	sub    %edx,%eax
f011960f:	89 c3                	mov    %eax,%ebx
f0119611:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119618:	10 00 00 
f011961b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119620:	0f b6 c0             	movzbl %al,%eax
f0119623:	c1 e0 04             	shl    $0x4,%eax
f0119626:	89 c2                	mov    %eax,%edx
f0119628:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011962e:	01 d0                	add    %edx,%eax
f0119630:	48                   	dec    %eax
f0119631:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119637:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011963d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119642:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119648:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011964e:	29 d0                	sub    %edx,%eax
f0119650:	01 d8                	add    %ebx,%eax
f0119652:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119657:	29 c2                	sub    %eax,%edx
f0119659:	89 d0                	mov    %edx,%eax
f011965b:	c1 e8 0c             	shr    $0xc,%eax
f011965e:	39 c1                	cmp    %eax,%ecx
f0119660:	74 17                	je     f0119679 <test_kmalloc_nextfit+0x5b6>
f0119662:	83 ec 04             	sub    $0x4,%esp
f0119665:	68 b7 8f 13 f0       	push   $0xf0138fb7
f011966a:	68 06 01 00 00       	push   $0x106
f011966f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119674:	e8 37 6b fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119679:	e8 3a ac fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011967e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119681:	e8 8c 2f ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119686:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119689:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011968f:	83 ec 0c             	sub    $0xc,%esp
f0119692:	50                   	push   %eax
f0119693:	e8 15 e5 fe ff       	call   f0107bad <kfree>
f0119698:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011969b:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01196a1:	83 ec 0c             	sub    $0xc,%esp
f01196a4:	50                   	push   %eax
f01196a5:	e8 03 e5 fe ff       	call   f0107bad <kfree>
f01196aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01196ad:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f01196b3:	83 ec 0c             	sub    $0xc,%esp
f01196b6:	50                   	push   %eax
f01196b7:	e8 f1 e4 fe ff       	call   f0107bad <kfree>
f01196bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01196bf:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f01196c5:	83 ec 0c             	sub    $0xc,%esp
f01196c8:	50                   	push   %eax
f01196c9:	e8 df e4 fe ff       	call   f0107bad <kfree>
f01196ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01196d1:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01196d7:	83 ec 0c             	sub    $0xc,%esp
f01196da:	50                   	push   %eax
f01196db:	e8 cd e4 fe ff       	call   f0107bad <kfree>
f01196e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01196e3:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f01196e9:	83 ec 0c             	sub    $0xc,%esp
f01196ec:	50                   	push   %eax
f01196ed:	e8 bb e4 fe ff       	call   f0107bad <kfree>
f01196f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01196f5:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f01196fb:	83 ec 0c             	sub    $0xc,%esp
f01196fe:	50                   	push   %eax
f01196ff:	e8 a9 e4 fe ff       	call   f0107bad <kfree>
f0119704:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119707:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f011970d:	83 ec 0c             	sub    $0xc,%esp
f0119710:	50                   	push   %eax
f0119711:	e8 97 e4 fe ff       	call   f0107bad <kfree>
f0119716:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119719:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f011971f:	83 ec 0c             	sub    $0xc,%esp
f0119722:	50                   	push   %eax
f0119723:	e8 85 e4 fe ff       	call   f0107bad <kfree>
f0119728:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011972b:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119731:	83 ec 0c             	sub    $0xc,%esp
f0119734:	50                   	push   %eax
f0119735:	e8 73 e4 fe ff       	call   f0107bad <kfree>
f011973a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011973d:	e8 76 ab fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119742:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119745:	74 17                	je     f011975e <test_kmalloc_nextfit+0x69b>
f0119747:	83 ec 04             	sub    $0x4,%esp
f011974a:	68 14 8d 13 f0       	push   $0xf0138d14
f011974f:	68 17 01 00 00       	push   $0x117
f0119754:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119759:	e8 52 6a fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011975e:	e8 af 2e ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119763:	89 c2                	mov    %eax,%edx
f0119765:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119768:	89 d1                	mov    %edx,%ecx
f011976a:	29 c1                	sub    %eax,%ecx
f011976c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119773:	10 00 00 
f0119776:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011977b:	0f b6 d0             	movzbl %al,%edx
f011977e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119784:	01 d0                	add    %edx,%eax
f0119786:	48                   	dec    %eax
f0119787:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011978d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119793:	ba 00 00 00 00       	mov    $0x0,%edx
f0119798:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011979e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01197a4:	29 d0                	sub    %edx,%eax
f01197a6:	89 c3                	mov    %eax,%ebx
f01197a8:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01197af:	10 00 00 
f01197b2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01197b7:	0f b6 c0             	movzbl %al,%eax
f01197ba:	c1 e0 04             	shl    $0x4,%eax
f01197bd:	89 c2                	mov    %eax,%edx
f01197bf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01197c5:	01 d0                	add    %edx,%eax
f01197c7:	48                   	dec    %eax
f01197c8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01197ce:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01197d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01197d9:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01197df:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01197e5:	29 d0                	sub    %edx,%eax
f01197e7:	01 d8                	add    %ebx,%eax
f01197e9:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01197ee:	29 c2                	sub    %eax,%edx
f01197f0:	89 d0                	mov    %edx,%eax
f01197f2:	c1 e8 0c             	shr    $0xc,%eax
f01197f5:	39 c1                	cmp    %eax,%ecx
f01197f7:	74 17                	je     f0119810 <test_kmalloc_nextfit+0x74d>
f01197f9:	83 ec 04             	sub    $0x4,%esp
f01197fc:	68 c8 8f 13 f0       	push   $0xf0138fc8
f0119801:	68 18 01 00 00       	push   $0x118
f0119806:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011980b:	e8 a0 69 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119810:	e8 a3 aa fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119815:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119818:	e8 f5 2d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011981d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119820:	83 ec 0c             	sub    $0xc,%esp
f0119823:	68 00 fc 0f 00       	push   $0xffc00
f0119828:	e8 66 e3 fe ff       	call   f0107b93 <kmalloc>
f011982d:	83 c4 10             	add    $0x10,%esp
f0119830:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119836:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011983d:	10 00 00 
f0119840:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119845:	0f b6 d0             	movzbl %al,%edx
f0119848:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011984e:	01 d0                	add    %edx,%eax
f0119850:	48                   	dec    %eax
f0119851:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119857:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011985d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119862:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119868:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011986e:	29 d0                	sub    %edx,%eax
f0119870:	89 c1                	mov    %eax,%ecx
f0119872:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119879:	10 00 00 
f011987c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119881:	0f b6 c0             	movzbl %al,%eax
f0119884:	c1 e0 04             	shl    $0x4,%eax
f0119887:	89 c2                	mov    %eax,%edx
f0119889:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011988f:	01 d0                	add    %edx,%eax
f0119891:	48                   	dec    %eax
f0119892:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119898:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011989e:	ba 00 00 00 00       	mov    $0x0,%edx
f01198a3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01198a9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01198af:	29 d0                	sub    %edx,%eax
f01198b1:	01 c8                	add    %ecx,%eax
f01198b3:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f01198b9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01198bf:	39 c2                	cmp    %eax,%edx
f01198c1:	74 17                	je     f01198da <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f01198c3:	83 ec 04             	sub    $0x4,%esp
f01198c6:	68 08 90 13 f0       	push   $0xf0139008
f01198cb:	68 1f 01 00 00       	push   $0x11f
f01198d0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01198d5:	e8 d6 68 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198da:	e8 d9 a9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01198df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198e2:	74 17                	je     f01198fb <test_kmalloc_nextfit+0x838>
f01198e4:	83 ec 04             	sub    $0x4,%esp
f01198e7:	68 14 8d 13 f0       	push   $0xf0138d14
f01198ec:	68 20 01 00 00       	push   $0x120
f01198f1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01198f6:	e8 b5 68 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01198fb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198fe:	e8 0f 2d ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119903:	29 c3                	sub    %eax,%ebx
f0119905:	89 d8                	mov    %ebx,%eax
f0119907:	3d 00 01 00 00       	cmp    $0x100,%eax
f011990c:	74 17                	je     f0119925 <test_kmalloc_nextfit+0x862>
f011990e:	83 ec 04             	sub    $0x4,%esp
f0119911:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119916:	68 21 01 00 00       	push   $0x121
f011991b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119920:	e8 8b 68 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119925:	e8 8e a9 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011992a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011992d:	e8 e0 2c ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119932:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119935:	83 ec 0c             	sub    $0xc,%esp
f0119938:	68 00 04 00 00       	push   $0x400
f011993d:	e8 51 e2 fe ff       	call   f0107b93 <kmalloc>
f0119942:	83 c4 10             	add    $0x10,%esp
f0119945:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f011994b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119952:	10 00 00 
f0119955:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011995a:	0f b6 d0             	movzbl %al,%edx
f011995d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119963:	01 d0                	add    %edx,%eax
f0119965:	48                   	dec    %eax
f0119966:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011996c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119972:	ba 00 00 00 00       	mov    $0x0,%edx
f0119977:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011997d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119983:	29 d0                	sub    %edx,%eax
f0119985:	89 c1                	mov    %eax,%ecx
f0119987:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011998e:	10 00 00 
f0119991:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119996:	0f b6 c0             	movzbl %al,%eax
f0119999:	c1 e0 04             	shl    $0x4,%eax
f011999c:	89 c2                	mov    %eax,%edx
f011999e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01199a4:	01 d0                	add    %edx,%eax
f01199a6:	48                   	dec    %eax
f01199a7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01199ad:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01199b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01199be:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01199c4:	29 d0                	sub    %edx,%eax
f01199c6:	01 c8                	add    %ecx,%eax
f01199c8:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01199ce:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01199d4:	39 c2                	cmp    %eax,%edx
f01199d6:	74 17                	je     f01199ef <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f01199d8:	83 ec 04             	sub    $0x4,%esp
f01199db:	68 08 90 13 f0       	push   $0xf0139008
f01199e0:	68 27 01 00 00       	push   $0x127
f01199e5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01199ea:	e8 c1 67 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199ef:	e8 c4 a8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01199f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199f7:	74 17                	je     f0119a10 <test_kmalloc_nextfit+0x94d>
f01199f9:	83 ec 04             	sub    $0x4,%esp
f01199fc:	68 14 8d 13 f0       	push   $0xf0138d14
f0119a01:	68 28 01 00 00       	push   $0x128
f0119a06:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119a0b:	e8 a0 67 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119a10:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a13:	e8 fa 2b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119a18:	29 c3                	sub    %eax,%ebx
f0119a1a:	89 d8                	mov    %ebx,%eax
f0119a1c:	83 f8 01             	cmp    $0x1,%eax
f0119a1f:	74 17                	je     f0119a38 <test_kmalloc_nextfit+0x975>
f0119a21:	83 ec 04             	sub    $0x4,%esp
f0119a24:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119a29:	68 29 01 00 00       	push   $0x129
f0119a2e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119a33:	e8 78 67 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a38:	e8 7b a8 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119a3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a40:	e8 cd 2b ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119a45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119a48:	83 ec 0c             	sub    $0xc,%esp
f0119a4b:	68 00 00 50 00       	push   $0x500000
f0119a50:	e8 3e e1 fe ff       	call   f0107b93 <kmalloc>
f0119a55:	83 c4 10             	add    $0x10,%esp
f0119a58:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119a5e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119a65:	10 00 00 
f0119a68:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119a6d:	0f b6 d0             	movzbl %al,%edx
f0119a70:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119a76:	01 d0                	add    %edx,%eax
f0119a78:	48                   	dec    %eax
f0119a79:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119a7f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119a85:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a8a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119a90:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119a96:	29 d0                	sub    %edx,%eax
f0119a98:	89 c1                	mov    %eax,%ecx
f0119a9a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119aa1:	10 00 00 
f0119aa4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119aa9:	0f b6 c0             	movzbl %al,%eax
f0119aac:	c1 e0 04             	shl    $0x4,%eax
f0119aaf:	89 c2                	mov    %eax,%edx
f0119ab1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119ab7:	01 d0                	add    %edx,%eax
f0119ab9:	48                   	dec    %eax
f0119aba:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119ac0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119ac6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119acb:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119ad1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119ad7:	29 d0                	sub    %edx,%eax
f0119ad9:	01 c8                	add    %ecx,%eax
f0119adb:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119ae1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119ae7:	39 c2                	cmp    %eax,%edx
f0119ae9:	74 17                	je     f0119b02 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119aeb:	83 ec 04             	sub    $0x4,%esp
f0119aee:	68 08 90 13 f0       	push   $0xf0139008
f0119af3:	68 2f 01 00 00       	push   $0x12f
f0119af8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119afd:	e8 ae 66 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b02:	e8 b1 a7 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119b07:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b0a:	74 17                	je     f0119b23 <test_kmalloc_nextfit+0xa60>
f0119b0c:	83 ec 04             	sub    $0x4,%esp
f0119b0f:	68 14 8d 13 f0       	push   $0xf0138d14
f0119b14:	68 30 01 00 00       	push   $0x130
f0119b19:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119b1e:	e8 8d 66 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119b23:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b26:	e8 e7 2a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119b2b:	29 c3                	sub    %eax,%ebx
f0119b2d:	89 d8                	mov    %ebx,%eax
f0119b2f:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119b34:	74 17                	je     f0119b4d <test_kmalloc_nextfit+0xa8a>
f0119b36:	83 ec 04             	sub    $0x4,%esp
f0119b39:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119b3e:	68 31 01 00 00       	push   $0x131
f0119b43:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119b48:	e8 63 66 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b4d:	e8 66 a7 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b55:	e8 b8 2a ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119b5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119b5d:	83 ec 0c             	sub    $0xc,%esp
f0119b60:	68 00 00 10 00       	push   $0x100000
f0119b65:	e8 29 e0 fe ff       	call   f0107b93 <kmalloc>
f0119b6a:	83 c4 10             	add    $0x10,%esp
f0119b6d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119b73:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119b7a:	10 00 00 
f0119b7d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119b82:	0f b6 d0             	movzbl %al,%edx
f0119b85:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119b8b:	01 d0                	add    %edx,%eax
f0119b8d:	48                   	dec    %eax
f0119b8e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119b94:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119b9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b9f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119ba5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119bab:	29 d0                	sub    %edx,%eax
f0119bad:	89 c1                	mov    %eax,%ecx
f0119baf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119bb6:	10 00 00 
f0119bb9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119bbe:	0f b6 c0             	movzbl %al,%eax
f0119bc1:	c1 e0 04             	shl    $0x4,%eax
f0119bc4:	89 c2                	mov    %eax,%edx
f0119bc6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119bcc:	01 d0                	add    %edx,%eax
f0119bce:	48                   	dec    %eax
f0119bcf:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119bd5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119bdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119be0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119be6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119bec:	29 d0                	sub    %edx,%eax
f0119bee:	01 c8                	add    %ecx,%eax
f0119bf0:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119bf6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119bfc:	39 c2                	cmp    %eax,%edx
f0119bfe:	74 17                	je     f0119c17 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119c00:	83 ec 04             	sub    $0x4,%esp
f0119c03:	68 08 90 13 f0       	push   $0xf0139008
f0119c08:	68 37 01 00 00       	push   $0x137
f0119c0d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119c12:	e8 99 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c17:	e8 9c a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c1c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c1f:	74 17                	je     f0119c38 <test_kmalloc_nextfit+0xb75>
f0119c21:	83 ec 04             	sub    $0x4,%esp
f0119c24:	68 14 8d 13 f0       	push   $0xf0138d14
f0119c29:	68 38 01 00 00       	push   $0x138
f0119c2e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119c33:	e8 78 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c38:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c3b:	e8 d2 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119c40:	29 c3                	sub    %eax,%ebx
f0119c42:	89 d8                	mov    %ebx,%eax
f0119c44:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c49:	74 17                	je     f0119c62 <test_kmalloc_nextfit+0xb9f>
f0119c4b:	83 ec 04             	sub    $0x4,%esp
f0119c4e:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119c53:	68 39 01 00 00       	push   $0x139
f0119c58:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119c5d:	e8 4e 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c62:	e8 51 a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c6a:	e8 a3 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119c6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119c72:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119c78:	83 ec 0c             	sub    $0xc,%esp
f0119c7b:	50                   	push   %eax
f0119c7c:	e8 2c df fe ff       	call   f0107bad <kfree>
f0119c81:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c84:	e8 2f a6 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119c89:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c8c:	74 17                	je     f0119ca5 <test_kmalloc_nextfit+0xbe2>
f0119c8e:	83 ec 04             	sub    $0x4,%esp
f0119c91:	68 14 8d 13 f0       	push   $0xf0138d14
f0119c96:	68 3e 01 00 00       	push   $0x13e
f0119c9b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119ca0:	e8 0b 65 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119ca5:	e8 68 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119caa:	89 c2                	mov    %eax,%edx
f0119cac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119caf:	29 c2                	sub    %eax,%edx
f0119cb1:	89 d0                	mov    %edx,%eax
f0119cb3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119cb8:	74 17                	je     f0119cd1 <test_kmalloc_nextfit+0xc0e>
f0119cba:	83 ec 04             	sub    $0x4,%esp
f0119cbd:	68 c8 8f 13 f0       	push   $0xf0138fc8
f0119cc2:	68 3f 01 00 00       	push   $0x13f
f0119cc7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119ccc:	e8 df 64 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119cd1:	e8 e2 a5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119cd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119cd9:	e8 34 29 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119cde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119ce1:	83 ec 0c             	sub    $0xc,%esp
f0119ce4:	68 00 04 00 00       	push   $0x400
f0119ce9:	e8 a5 de fe ff       	call   f0107b93 <kmalloc>
f0119cee:	83 c4 10             	add    $0x10,%esp
f0119cf1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119cf7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0119cfe:	10 00 00 
f0119d01:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119d06:	0f b6 d0             	movzbl %al,%edx
f0119d09:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119d0f:	01 d0                	add    %edx,%eax
f0119d11:	48                   	dec    %eax
f0119d12:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0119d18:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d23:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0119d29:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119d2f:	29 d0                	sub    %edx,%eax
f0119d31:	89 c1                	mov    %eax,%ecx
f0119d33:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0119d3a:	10 00 00 
f0119d3d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119d42:	0f b6 c0             	movzbl %al,%eax
f0119d45:	c1 e0 04             	shl    $0x4,%eax
f0119d48:	89 c2                	mov    %eax,%edx
f0119d4a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119d50:	01 d0                	add    %edx,%eax
f0119d52:	48                   	dec    %eax
f0119d53:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0119d59:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119d5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d64:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0119d6a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119d70:	29 d0                	sub    %edx,%eax
f0119d72:	01 c8                	add    %ecx,%eax
f0119d74:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119d7a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d80:	39 c2                	cmp    %eax,%edx
f0119d82:	74 17                	je     f0119d9b <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f0119d84:	83 ec 04             	sub    $0x4,%esp
f0119d87:	68 08 90 13 f0       	push   $0xf0139008
f0119d8c:	68 45 01 00 00       	push   $0x145
f0119d91:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119d96:	e8 15 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d9b:	e8 18 a5 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119da0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119da3:	74 17                	je     f0119dbc <test_kmalloc_nextfit+0xcf9>
f0119da5:	83 ec 04             	sub    $0x4,%esp
f0119da8:	68 14 8d 13 f0       	push   $0xf0138d14
f0119dad:	68 46 01 00 00       	push   $0x146
f0119db2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119db7:	e8 f4 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119dbc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119dbf:	e8 4e 28 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119dc4:	29 c3                	sub    %eax,%ebx
f0119dc6:	89 d8                	mov    %ebx,%eax
f0119dc8:	83 f8 01             	cmp    $0x1,%eax
f0119dcb:	74 17                	je     f0119de4 <test_kmalloc_nextfit+0xd21>
f0119dcd:	83 ec 04             	sub    $0x4,%esp
f0119dd0:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119dd5:	68 47 01 00 00       	push   $0x147
f0119dda:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119ddf:	e8 cc 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119de4:	e8 cf a4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119de9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119dec:	e8 21 28 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119df4:	83 ec 0c             	sub    $0xc,%esp
f0119df7:	68 00 e0 1f 00       	push   $0x1fe000
f0119dfc:	e8 92 dd fe ff       	call   f0107b93 <kmalloc>
f0119e01:	83 c4 10             	add    $0x10,%esp
f0119e04:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119e0a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0119e11:	10 00 00 
f0119e14:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119e19:	0f b6 d0             	movzbl %al,%edx
f0119e1c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119e22:	01 d0                	add    %edx,%eax
f0119e24:	48                   	dec    %eax
f0119e25:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0119e2b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e36:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0119e3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e42:	29 d0                	sub    %edx,%eax
f0119e44:	89 c1                	mov    %eax,%ecx
f0119e46:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119e4d:	10 00 00 
f0119e50:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119e55:	0f b6 c0             	movzbl %al,%eax
f0119e58:	c1 e0 04             	shl    $0x4,%eax
f0119e5b:	89 c2                	mov    %eax,%edx
f0119e5d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119e63:	01 d0                	add    %edx,%eax
f0119e65:	48                   	dec    %eax
f0119e66:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119e6c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119e72:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e77:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119e7d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119e83:	29 d0                	sub    %edx,%eax
f0119e85:	01 c8                	add    %ecx,%eax
f0119e87:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119e8d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e93:	39 c2                	cmp    %eax,%edx
f0119e95:	74 17                	je     f0119eae <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f0119e97:	83 ec 04             	sub    $0x4,%esp
f0119e9a:	68 08 90 13 f0       	push   $0xf0139008
f0119e9f:	68 4d 01 00 00       	push   $0x14d
f0119ea4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119ea9:	e8 02 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119eae:	e8 05 a4 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119eb3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119eb6:	74 17                	je     f0119ecf <test_kmalloc_nextfit+0xe0c>
f0119eb8:	83 ec 04             	sub    $0x4,%esp
f0119ebb:	68 14 8d 13 f0       	push   $0xf0138d14
f0119ec0:	68 4e 01 00 00       	push   $0x14e
f0119ec5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119eca:	e8 e1 62 fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119ecf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ed2:	e8 3b 27 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119ed7:	29 c3                	sub    %eax,%ebx
f0119ed9:	89 d8                	mov    %ebx,%eax
f0119edb:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119ee0:	74 17                	je     f0119ef9 <test_kmalloc_nextfit+0xe36>
f0119ee2:	83 ec 04             	sub    $0x4,%esp
f0119ee5:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119eea:	68 50 01 00 00       	push   $0x150
f0119eef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119ef4:	e8 b7 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ef9:	e8 ba a3 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119efe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f01:	e8 0c 27 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119f06:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119f09:	83 ec 0c             	sub    $0xc,%esp
f0119f0c:	68 00 00 08 00       	push   $0x80000
f0119f11:	e8 7d dc fe ff       	call   f0107b93 <kmalloc>
f0119f16:	83 c4 10             	add    $0x10,%esp
f0119f19:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119f1f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119f26:	10 00 00 
f0119f29:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119f2e:	0f b6 d0             	movzbl %al,%edx
f0119f31:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119f37:	01 d0                	add    %edx,%eax
f0119f39:	48                   	dec    %eax
f0119f3a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119f40:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119f46:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f4b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119f51:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119f57:	29 d0                	sub    %edx,%eax
f0119f59:	89 c1                	mov    %eax,%ecx
f0119f5b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119f62:	10 00 00 
f0119f65:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0119f6a:	0f b6 c0             	movzbl %al,%eax
f0119f6d:	c1 e0 04             	shl    $0x4,%eax
f0119f70:	89 c2                	mov    %eax,%edx
f0119f72:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119f78:	01 d0                	add    %edx,%eax
f0119f7a:	48                   	dec    %eax
f0119f7b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119f81:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f8c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119f92:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119f98:	29 d0                	sub    %edx,%eax
f0119f9a:	01 c8                	add    %ecx,%eax
f0119f9c:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119fa2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119fa8:	39 c2                	cmp    %eax,%edx
f0119faa:	74 17                	je     f0119fc3 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f0119fac:	83 ec 04             	sub    $0x4,%esp
f0119faf:	68 08 90 13 f0       	push   $0xf0139008
f0119fb4:	68 56 01 00 00       	push   $0x156
f0119fb9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119fbe:	e8 ed 61 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fc3:	e8 f0 a2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0119fc8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fcb:	74 17                	je     f0119fe4 <test_kmalloc_nextfit+0xf21>
f0119fcd:	83 ec 04             	sub    $0x4,%esp
f0119fd0:	68 14 8d 13 f0       	push   $0xf0138d14
f0119fd5:	68 57 01 00 00       	push   $0x157
f0119fda:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0119fdf:	e8 cc 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119fe4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fe7:	e8 26 26 ff ff       	call   f010c612 <sys_calculate_free_frames>
f0119fec:	29 c3                	sub    %eax,%ebx
f0119fee:	89 d8                	mov    %ebx,%eax
f0119ff0:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119ff5:	74 17                	je     f011a00e <test_kmalloc_nextfit+0xf4b>
f0119ff7:	83 ec 04             	sub    $0x4,%esp
f0119ffa:	68 b7 8f 13 f0       	push   $0xf0138fb7
f0119fff:	68 58 01 00 00       	push   $0x158
f011a004:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a009:	e8 a2 61 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a00e:	83 ec 0c             	sub    $0xc,%esp
f011a011:	68 28 90 13 f0       	push   $0xf0139028
f011a016:	e8 16 6e fe ff       	call   f0100e31 <cprintf>
f011a01b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a01e:	e8 95 a2 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a023:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a026:	e8 e7 25 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a02b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a02e:	83 ec 0c             	sub    $0xc,%esp
f011a031:	68 00 00 38 00       	push   $0x380000
f011a036:	e8 58 db fe ff       	call   f0107b93 <kmalloc>
f011a03b:	83 c4 10             	add    $0x10,%esp
f011a03e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a044:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a04b:	10 00 00 
f011a04e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a053:	0f b6 d0             	movzbl %al,%edx
f011a056:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a05c:	01 d0                	add    %edx,%eax
f011a05e:	48                   	dec    %eax
f011a05f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a065:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a06b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a070:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a076:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a07c:	29 d0                	sub    %edx,%eax
f011a07e:	89 c1                	mov    %eax,%ecx
f011a080:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a087:	10 00 00 
f011a08a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a08f:	0f b6 c0             	movzbl %al,%eax
f011a092:	c1 e0 04             	shl    $0x4,%eax
f011a095:	89 c2                	mov    %eax,%edx
f011a097:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a09d:	01 d0                	add    %edx,%eax
f011a09f:	48                   	dec    %eax
f011a0a0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a0a6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a0ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0b1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a0b7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a0bd:	29 d0                	sub    %edx,%eax
f011a0bf:	01 c8                	add    %ecx,%eax
f011a0c1:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a0c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a0cd:	39 c2                	cmp    %eax,%edx
f011a0cf:	74 17                	je     f011a0e8 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a0d1:	83 ec 04             	sub    $0x4,%esp
f011a0d4:	68 08 90 13 f0       	push   $0xf0139008
f011a0d9:	68 62 01 00 00       	push   $0x162
f011a0de:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a0e3:	e8 c8 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0e8:	e8 cb a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a0ed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a0f0:	74 17                	je     f011a109 <test_kmalloc_nextfit+0x1046>
f011a0f2:	83 ec 04             	sub    $0x4,%esp
f011a0f5:	68 14 8d 13 f0       	push   $0xf0138d14
f011a0fa:	68 63 01 00 00       	push   $0x163
f011a0ff:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a104:	e8 a7 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a109:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a10c:	e8 01 25 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a111:	29 c3                	sub    %eax,%ebx
f011a113:	89 d8                	mov    %ebx,%eax
f011a115:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a11a:	74 17                	je     f011a133 <test_kmalloc_nextfit+0x1070>
f011a11c:	83 ec 04             	sub    $0x4,%esp
f011a11f:	68 b7 8f 13 f0       	push   $0xf0138fb7
f011a124:	68 64 01 00 00       	push   $0x164
f011a129:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a12e:	e8 7d 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a133:	e8 80 a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a138:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a13b:	e8 d2 24 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a140:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a143:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a149:	83 ec 0c             	sub    $0xc,%esp
f011a14c:	50                   	push   %eax
f011a14d:	e8 5b da fe ff       	call   f0107bad <kfree>
f011a152:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a155:	e8 5e a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a15a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a15d:	74 17                	je     f011a176 <test_kmalloc_nextfit+0x10b3>
f011a15f:	83 ec 04             	sub    $0x4,%esp
f011a162:	68 14 8d 13 f0       	push   $0xf0138d14
f011a167:	68 69 01 00 00       	push   $0x169
f011a16c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a171:	e8 3a 60 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a176:	e8 97 24 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a17b:	89 c2                	mov    %eax,%edx
f011a17d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a180:	29 c2                	sub    %eax,%edx
f011a182:	89 d0                	mov    %edx,%eax
f011a184:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a189:	74 17                	je     f011a1a2 <test_kmalloc_nextfit+0x10df>
f011a18b:	83 ec 04             	sub    $0x4,%esp
f011a18e:	68 c8 8f 13 f0       	push   $0xf0138fc8
f011a193:	68 6a 01 00 00       	push   $0x16a
f011a198:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a19d:	e8 0e 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1a2:	e8 11 a1 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a1a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1aa:	e8 63 24 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a1af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a1b2:	83 ec 0c             	sub    $0xc,%esp
f011a1b5:	68 00 fc 3f 00       	push   $0x3ffc00
f011a1ba:	e8 d4 d9 fe ff       	call   f0107b93 <kmalloc>
f011a1bf:	83 c4 10             	add    $0x10,%esp
f011a1c2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a1c8:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a1cf:	10 00 00 
f011a1d2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a1d7:	0f b6 d0             	movzbl %al,%edx
f011a1da:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a1e0:	01 d0                	add    %edx,%eax
f011a1e2:	48                   	dec    %eax
f011a1e3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a1e9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a1ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1f4:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a1fa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a200:	29 d0                	sub    %edx,%eax
f011a202:	89 c1                	mov    %eax,%ecx
f011a204:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a20b:	10 00 00 
f011a20e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a213:	0f b6 c0             	movzbl %al,%eax
f011a216:	c1 e0 04             	shl    $0x4,%eax
f011a219:	89 c2                	mov    %eax,%edx
f011a21b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a221:	01 d0                	add    %edx,%eax
f011a223:	48                   	dec    %eax
f011a224:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a22a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a230:	ba 00 00 00 00       	mov    $0x0,%edx
f011a235:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a23b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a241:	29 d0                	sub    %edx,%eax
f011a243:	01 c8                	add    %ecx,%eax
f011a245:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a24b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a251:	39 c2                	cmp    %eax,%edx
f011a253:	74 17                	je     f011a26c <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a255:	83 ec 04             	sub    $0x4,%esp
f011a258:	68 08 90 13 f0       	push   $0xf0139008
f011a25d:	68 70 01 00 00       	push   $0x170
f011a262:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a267:	e8 44 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a26c:	e8 47 a0 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a271:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a274:	74 17                	je     f011a28d <test_kmalloc_nextfit+0x11ca>
f011a276:	83 ec 04             	sub    $0x4,%esp
f011a279:	68 14 8d 13 f0       	push   $0xf0138d14
f011a27e:	68 71 01 00 00       	push   $0x171
f011a283:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a288:	e8 23 5f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a28d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a290:	e8 7d 23 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a295:	29 c3                	sub    %eax,%ebx
f011a297:	89 d8                	mov    %ebx,%eax
f011a299:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a29e:	74 17                	je     f011a2b7 <test_kmalloc_nextfit+0x11f4>
f011a2a0:	83 ec 04             	sub    $0x4,%esp
f011a2a3:	68 b7 8f 13 f0       	push   $0xf0138fb7
f011a2a8:	68 72 01 00 00       	push   $0x172
f011a2ad:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a2b2:	e8 f9 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a2b7:	83 ec 0c             	sub    $0xc,%esp
f011a2ba:	68 64 90 13 f0       	push   $0xf0139064
f011a2bf:	e8 6d 6b fe ff       	call   f0100e31 <cprintf>
f011a2c4:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a2c7:	e8 ec 9f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a2cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a2cf:	e8 3e 23 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a2d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a2d7:	83 ec 0c             	sub    $0xc,%esp
f011a2da:	68 00 00 60 00       	push   $0x600000
f011a2df:	e8 af d8 fe ff       	call   f0107b93 <kmalloc>
f011a2e4:	83 c4 10             	add    $0x10,%esp
f011a2e7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a2ed:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a2f3:	85 c0                	test   %eax,%eax
f011a2f5:	74 17                	je     f011a30e <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a2f7:	83 ec 04             	sub    $0x4,%esp
f011a2fa:	68 08 90 13 f0       	push   $0xf0139008
f011a2ff:	68 7c 01 00 00       	push   $0x17c
f011a304:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a309:	e8 a2 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a30e:	e8 a5 9f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a313:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a316:	74 17                	je     f011a32f <test_kmalloc_nextfit+0x126c>
f011a318:	83 ec 04             	sub    $0x4,%esp
f011a31b:	68 14 8d 13 f0       	push   $0xf0138d14
f011a320:	68 7d 01 00 00       	push   $0x17d
f011a325:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a32a:	e8 81 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a32f:	e8 de 22 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a334:	89 c2                	mov    %eax,%edx
f011a336:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a339:	39 c2                	cmp    %eax,%edx
f011a33b:	74 17                	je     f011a354 <test_kmalloc_nextfit+0x1291>
f011a33d:	83 ec 04             	sub    $0x4,%esp
f011a340:	68 b7 8f 13 f0       	push   $0xf0138fb7
f011a345:	68 7e 01 00 00       	push   $0x17e
f011a34a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a34f:	e8 5c 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a354:	83 ec 0c             	sub    $0xc,%esp
f011a357:	68 9c 90 13 f0       	push   $0xf013909c
f011a35c:	e8 d0 6a fe ff       	call   f0100e31 <cprintf>
f011a361:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a364:	83 ec 0c             	sub    $0xc,%esp
f011a367:	68 d8 90 13 f0       	push   $0xf01390d8
f011a36c:	e8 c0 6a fe ff       	call   f0100e31 <cprintf>
f011a371:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a374:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a379:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a37c:	5b                   	pop    %ebx
f011a37d:	5f                   	pop    %edi
f011a37e:	5d                   	pop    %ebp
f011a37f:	c3                   	ret    

f011a380 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a380:	55                   	push   %ebp
f011a381:	89 e5                	mov    %esp,%ebp
f011a383:	57                   	push   %edi
f011a384:	53                   	push   %ebx
f011a385:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a38b:	83 ec 0c             	sub    $0xc,%esp
f011a38e:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011a393:	e8 99 6a fe ff       	call   f0100e31 <cprintf>
f011a398:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a39b:	83 ec 0c             	sub    $0xc,%esp
f011a39e:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011a3a3:	e8 89 6a fe ff       	call   f0100e31 <cprintf>
f011a3a8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a3ab:	83 ec 0c             	sub    $0xc,%esp
f011a3ae:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011a3b3:	e8 79 6a fe ff       	call   f0100e31 <cprintf>
f011a3b8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a3bb:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a3c1:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a3c6:	b8 00 00 00 00       	mov    $0x0,%eax
f011a3cb:	89 d7                	mov    %edx,%edi
f011a3cd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a3cf:	e8 3e 22 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a3d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3d7:	e8 dc 9e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a3dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a3df:	83 ec 0c             	sub    $0xc,%esp
f011a3e2:	68 00 fc 2f 00       	push   $0x2ffc00
f011a3e7:	e8 a7 d7 fe ff       	call   f0107b93 <kmalloc>
f011a3ec:	83 c4 10             	add    $0x10,%esp
f011a3ef:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a3f5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a3fb:	89 c1                	mov    %eax,%ecx
f011a3fd:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a404:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a409:	0f b6 d0             	movzbl %al,%edx
f011a40c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a40f:	01 d0                	add    %edx,%eax
f011a411:	48                   	dec    %eax
f011a412:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a415:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a418:	ba 00 00 00 00       	mov    $0x0,%edx
f011a41d:	f7 75 ec             	divl   -0x14(%ebp)
f011a420:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a423:	29 d0                	sub    %edx,%eax
f011a425:	89 c3                	mov    %eax,%ebx
f011a427:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a42e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a433:	0f b6 c0             	movzbl %al,%eax
f011a436:	c1 e0 04             	shl    $0x4,%eax
f011a439:	89 c2                	mov    %eax,%edx
f011a43b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a43e:	01 d0                	add    %edx,%eax
f011a440:	48                   	dec    %eax
f011a441:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a444:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a447:	ba 00 00 00 00       	mov    $0x0,%edx
f011a44c:	f7 75 e4             	divl   -0x1c(%ebp)
f011a44f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a452:	29 d0                	sub    %edx,%eax
f011a454:	01 d8                	add    %ebx,%eax
f011a456:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a45b:	39 c1                	cmp    %eax,%ecx
f011a45d:	74 17                	je     f011a476 <test_kmalloc_bestfit1+0xf6>
f011a45f:	83 ec 04             	sub    $0x4,%esp
f011a462:	68 14 91 13 f0       	push   $0xf0139114
f011a467:	68 98 01 00 00       	push   $0x198
f011a46c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a471:	e8 3a 5d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a476:	e8 3d 9e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a47b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a47e:	74 17                	je     f011a497 <test_kmalloc_bestfit1+0x117>
f011a480:	83 ec 04             	sub    $0x4,%esp
f011a483:	68 14 8d 13 f0       	push   $0xf0138d14
f011a488:	68 99 01 00 00       	push   $0x199
f011a48d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a492:	e8 19 5d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a497:	e8 76 21 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a49c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a49f:	29 c2                	sub    %eax,%edx
f011a4a1:	89 d0                	mov    %edx,%eax
f011a4a3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a4a8:	74 17                	je     f011a4c1 <test_kmalloc_bestfit1+0x141>
f011a4aa:	83 ec 04             	sub    $0x4,%esp
f011a4ad:	68 44 91 13 f0       	push   $0xf0139144
f011a4b2:	68 9a 01 00 00       	push   $0x19a
f011a4b7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a4bc:	e8 ef 5c fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a4c1:	e8 4c 21 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a4c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4c9:	e8 ea 9d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a4ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a4d1:	83 ec 0c             	sub    $0xc,%esp
f011a4d4:	68 00 fc 2f 00       	push   $0x2ffc00
f011a4d9:	e8 b5 d6 fe ff       	call   f0107b93 <kmalloc>
f011a4de:	83 c4 10             	add    $0x10,%esp
f011a4e1:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a4e7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a4ed:	89 c1                	mov    %eax,%ecx
f011a4ef:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a4f6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a4fb:	0f b6 d0             	movzbl %al,%edx
f011a4fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a501:	01 d0                	add    %edx,%eax
f011a503:	48                   	dec    %eax
f011a504:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a507:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a50a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a50f:	f7 75 dc             	divl   -0x24(%ebp)
f011a512:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a515:	29 d0                	sub    %edx,%eax
f011a517:	89 c3                	mov    %eax,%ebx
f011a519:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a520:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a525:	0f b6 c0             	movzbl %al,%eax
f011a528:	c1 e0 04             	shl    $0x4,%eax
f011a52b:	89 c2                	mov    %eax,%edx
f011a52d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a530:	01 d0                	add    %edx,%eax
f011a532:	48                   	dec    %eax
f011a533:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a536:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a539:	ba 00 00 00 00       	mov    $0x0,%edx
f011a53e:	f7 75 d4             	divl   -0x2c(%ebp)
f011a541:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a544:	29 d0                	sub    %edx,%eax
f011a546:	01 d8                	add    %ebx,%eax
f011a548:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a54d:	39 c1                	cmp    %eax,%ecx
f011a54f:	74 17                	je     f011a568 <test_kmalloc_bestfit1+0x1e8>
f011a551:	83 ec 04             	sub    $0x4,%esp
f011a554:	68 14 91 13 f0       	push   $0xf0139114
f011a559:	68 a0 01 00 00       	push   $0x1a0
f011a55e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a563:	e8 48 5c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a568:	e8 4b 9d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a56d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a570:	74 17                	je     f011a589 <test_kmalloc_bestfit1+0x209>
f011a572:	83 ec 04             	sub    $0x4,%esp
f011a575:	68 14 8d 13 f0       	push   $0xf0138d14
f011a57a:	68 a1 01 00 00       	push   $0x1a1
f011a57f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a584:	e8 27 5c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a589:	e8 84 20 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a58e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a591:	29 c2                	sub    %eax,%edx
f011a593:	89 d0                	mov    %edx,%eax
f011a595:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a59a:	74 17                	je     f011a5b3 <test_kmalloc_bestfit1+0x233>
f011a59c:	83 ec 04             	sub    $0x4,%esp
f011a59f:	68 44 91 13 f0       	push   $0xf0139144
f011a5a4:	68 a2 01 00 00       	push   $0x1a2
f011a5a9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a5ae:	e8 fd 5b fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a5b3:	e8 5a 20 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a5b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a5bb:	e8 f8 9c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a5c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a5c3:	83 ec 0c             	sub    $0xc,%esp
f011a5c6:	68 00 fc 1f 00       	push   $0x1ffc00
f011a5cb:	e8 c3 d5 fe ff       	call   f0107b93 <kmalloc>
f011a5d0:	83 c4 10             	add    $0x10,%esp
f011a5d3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a5d9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a5df:	89 c1                	mov    %eax,%ecx
f011a5e1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a5e8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a5ed:	0f b6 d0             	movzbl %al,%edx
f011a5f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a5f3:	01 d0                	add    %edx,%eax
f011a5f5:	48                   	dec    %eax
f011a5f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a5f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a601:	f7 75 cc             	divl   -0x34(%ebp)
f011a604:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a607:	29 d0                	sub    %edx,%eax
f011a609:	89 c3                	mov    %eax,%ebx
f011a60b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a612:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a617:	0f b6 c0             	movzbl %al,%eax
f011a61a:	c1 e0 04             	shl    $0x4,%eax
f011a61d:	89 c2                	mov    %eax,%edx
f011a61f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a622:	01 d0                	add    %edx,%eax
f011a624:	48                   	dec    %eax
f011a625:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a628:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a62b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a630:	f7 75 c4             	divl   -0x3c(%ebp)
f011a633:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a636:	29 d0                	sub    %edx,%eax
f011a638:	01 d8                	add    %ebx,%eax
f011a63a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a63f:	39 c1                	cmp    %eax,%ecx
f011a641:	74 17                	je     f011a65a <test_kmalloc_bestfit1+0x2da>
f011a643:	83 ec 04             	sub    $0x4,%esp
f011a646:	68 14 91 13 f0       	push   $0xf0139114
f011a64b:	68 a8 01 00 00       	push   $0x1a8
f011a650:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a655:	e8 56 5b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a65a:	e8 59 9c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a65f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a662:	74 17                	je     f011a67b <test_kmalloc_bestfit1+0x2fb>
f011a664:	83 ec 04             	sub    $0x4,%esp
f011a667:	68 14 8d 13 f0       	push   $0xf0138d14
f011a66c:	68 a9 01 00 00       	push   $0x1a9
f011a671:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a676:	e8 35 5b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a67b:	e8 92 1f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a680:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a683:	29 c2                	sub    %eax,%edx
f011a685:	89 d0                	mov    %edx,%eax
f011a687:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a68c:	74 17                	je     f011a6a5 <test_kmalloc_bestfit1+0x325>
f011a68e:	83 ec 04             	sub    $0x4,%esp
f011a691:	68 44 91 13 f0       	push   $0xf0139144
f011a696:	68 aa 01 00 00       	push   $0x1aa
f011a69b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a6a0:	e8 0b 5b fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6a5:	e8 68 1f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a6aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6ad:	e8 06 9c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a6b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a6b5:	83 ec 0c             	sub    $0xc,%esp
f011a6b8:	68 00 fc 1f 00       	push   $0x1ffc00
f011a6bd:	e8 d1 d4 fe ff       	call   f0107b93 <kmalloc>
f011a6c2:	83 c4 10             	add    $0x10,%esp
f011a6c5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a6cb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a6d1:	89 c1                	mov    %eax,%ecx
f011a6d3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a6da:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a6df:	0f b6 d0             	movzbl %al,%edx
f011a6e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a6e5:	01 d0                	add    %edx,%eax
f011a6e7:	48                   	dec    %eax
f011a6e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a6eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6f3:	f7 75 bc             	divl   -0x44(%ebp)
f011a6f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a6f9:	29 d0                	sub    %edx,%eax
f011a6fb:	89 c3                	mov    %eax,%ebx
f011a6fd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a704:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a709:	0f b6 c0             	movzbl %al,%eax
f011a70c:	c1 e0 04             	shl    $0x4,%eax
f011a70f:	89 c2                	mov    %eax,%edx
f011a711:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a714:	01 d0                	add    %edx,%eax
f011a716:	48                   	dec    %eax
f011a717:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a71a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a71d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a722:	f7 75 b4             	divl   -0x4c(%ebp)
f011a725:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a728:	29 d0                	sub    %edx,%eax
f011a72a:	01 d8                	add    %ebx,%eax
f011a72c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a731:	39 c1                	cmp    %eax,%ecx
f011a733:	74 17                	je     f011a74c <test_kmalloc_bestfit1+0x3cc>
f011a735:	83 ec 04             	sub    $0x4,%esp
f011a738:	68 14 91 13 f0       	push   $0xf0139114
f011a73d:	68 b0 01 00 00       	push   $0x1b0
f011a742:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a747:	e8 64 5a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a74c:	e8 67 9b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a751:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a754:	74 17                	je     f011a76d <test_kmalloc_bestfit1+0x3ed>
f011a756:	83 ec 04             	sub    $0x4,%esp
f011a759:	68 14 8d 13 f0       	push   $0xf0138d14
f011a75e:	68 b1 01 00 00       	push   $0x1b1
f011a763:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a768:	e8 43 5a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a76d:	e8 a0 1e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a772:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a775:	29 c2                	sub    %eax,%edx
f011a777:	89 d0                	mov    %edx,%eax
f011a779:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a77e:	74 17                	je     f011a797 <test_kmalloc_bestfit1+0x417>
f011a780:	83 ec 04             	sub    $0x4,%esp
f011a783:	68 44 91 13 f0       	push   $0xf0139144
f011a788:	68 b2 01 00 00       	push   $0x1b2
f011a78d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a792:	e8 19 5a fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a797:	e8 76 1e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a79c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a79f:	e8 14 9b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a7a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a7a7:	83 ec 0c             	sub    $0xc,%esp
f011a7aa:	68 00 fc 0f 00       	push   $0xffc00
f011a7af:	e8 df d3 fe ff       	call   f0107b93 <kmalloc>
f011a7b4:	83 c4 10             	add    $0x10,%esp
f011a7b7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a7bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a7c3:	89 c1                	mov    %eax,%ecx
f011a7c5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a7cc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a7d1:	0f b6 d0             	movzbl %al,%edx
f011a7d4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a7d7:	01 d0                	add    %edx,%eax
f011a7d9:	48                   	dec    %eax
f011a7da:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a7dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7e5:	f7 75 ac             	divl   -0x54(%ebp)
f011a7e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7eb:	29 d0                	sub    %edx,%eax
f011a7ed:	89 c3                	mov    %eax,%ebx
f011a7ef:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a7f6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a7fb:	0f b6 c0             	movzbl %al,%eax
f011a7fe:	c1 e0 04             	shl    $0x4,%eax
f011a801:	89 c2                	mov    %eax,%edx
f011a803:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a806:	01 d0                	add    %edx,%eax
f011a808:	48                   	dec    %eax
f011a809:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a80c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a80f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a814:	f7 75 a4             	divl   -0x5c(%ebp)
f011a817:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a81a:	29 d0                	sub    %edx,%eax
f011a81c:	01 d8                	add    %ebx,%eax
f011a81e:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a823:	39 c1                	cmp    %eax,%ecx
f011a825:	74 17                	je     f011a83e <test_kmalloc_bestfit1+0x4be>
f011a827:	83 ec 04             	sub    $0x4,%esp
f011a82a:	68 14 91 13 f0       	push   $0xf0139114
f011a82f:	68 b8 01 00 00       	push   $0x1b8
f011a834:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a839:	e8 72 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a83e:	e8 75 9a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a843:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a846:	74 17                	je     f011a85f <test_kmalloc_bestfit1+0x4df>
f011a848:	83 ec 04             	sub    $0x4,%esp
f011a84b:	68 14 8d 13 f0       	push   $0xf0138d14
f011a850:	68 b9 01 00 00       	push   $0x1b9
f011a855:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a85a:	e8 51 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a85f:	e8 ae 1d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a867:	29 c2                	sub    %eax,%edx
f011a869:	89 d0                	mov    %edx,%eax
f011a86b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a870:	74 17                	je     f011a889 <test_kmalloc_bestfit1+0x509>
f011a872:	83 ec 04             	sub    $0x4,%esp
f011a875:	68 44 91 13 f0       	push   $0xf0139144
f011a87a:	68 ba 01 00 00       	push   $0x1ba
f011a87f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a884:	e8 27 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a889:	e8 84 1d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a88e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a891:	e8 22 9a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a896:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a899:	83 ec 0c             	sub    $0xc,%esp
f011a89c:	68 00 fc 0f 00       	push   $0xffc00
f011a8a1:	e8 ed d2 fe ff       	call   f0107b93 <kmalloc>
f011a8a6:	83 c4 10             	add    $0x10,%esp
f011a8a9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a8af:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a8b5:	89 c1                	mov    %eax,%ecx
f011a8b7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a8be:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a8c3:	0f b6 d0             	movzbl %al,%edx
f011a8c6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8c9:	01 d0                	add    %edx,%eax
f011a8cb:	48                   	dec    %eax
f011a8cc:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a8cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8d7:	f7 75 9c             	divl   -0x64(%ebp)
f011a8da:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8dd:	29 d0                	sub    %edx,%eax
f011a8df:	89 c3                	mov    %eax,%ebx
f011a8e1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a8e8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a8ed:	0f b6 c0             	movzbl %al,%eax
f011a8f0:	c1 e0 04             	shl    $0x4,%eax
f011a8f3:	89 c2                	mov    %eax,%edx
f011a8f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a8f8:	01 d0                	add    %edx,%eax
f011a8fa:	48                   	dec    %eax
f011a8fb:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a8fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a901:	ba 00 00 00 00       	mov    $0x0,%edx
f011a906:	f7 75 94             	divl   -0x6c(%ebp)
f011a909:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a90c:	29 d0                	sub    %edx,%eax
f011a90e:	01 d8                	add    %ebx,%eax
f011a910:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a915:	39 c1                	cmp    %eax,%ecx
f011a917:	74 17                	je     f011a930 <test_kmalloc_bestfit1+0x5b0>
f011a919:	83 ec 04             	sub    $0x4,%esp
f011a91c:	68 14 91 13 f0       	push   $0xf0139114
f011a921:	68 c0 01 00 00       	push   $0x1c0
f011a926:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a92b:	e8 80 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a930:	e8 83 99 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a935:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a938:	74 17                	je     f011a951 <test_kmalloc_bestfit1+0x5d1>
f011a93a:	83 ec 04             	sub    $0x4,%esp
f011a93d:	68 14 8d 13 f0       	push   $0xf0138d14
f011a942:	68 c1 01 00 00       	push   $0x1c1
f011a947:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a94c:	e8 5f 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a951:	e8 bc 1c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a959:	29 c2                	sub    %eax,%edx
f011a95b:	89 d0                	mov    %edx,%eax
f011a95d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a962:	74 17                	je     f011a97b <test_kmalloc_bestfit1+0x5fb>
f011a964:	83 ec 04             	sub    $0x4,%esp
f011a967:	68 44 91 13 f0       	push   $0xf0139144
f011a96c:	68 c2 01 00 00       	push   $0x1c2
f011a971:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011a976:	e8 35 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a97b:	e8 92 1c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011a980:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a983:	e8 30 99 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011a988:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a98b:	83 ec 0c             	sub    $0xc,%esp
f011a98e:	68 00 fc 0f 00       	push   $0xffc00
f011a993:	e8 fb d1 fe ff       	call   f0107b93 <kmalloc>
f011a998:	83 c4 10             	add    $0x10,%esp
f011a99b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a9a1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a9a7:	89 c1                	mov    %eax,%ecx
f011a9a9:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a9b0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a9b5:	0f b6 d0             	movzbl %al,%edx
f011a9b8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a9bb:	01 d0                	add    %edx,%eax
f011a9bd:	48                   	dec    %eax
f011a9be:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a9c1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a9c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9c9:	f7 75 8c             	divl   -0x74(%ebp)
f011a9cc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a9cf:	29 d0                	sub    %edx,%eax
f011a9d1:	89 c3                	mov    %eax,%ebx
f011a9d3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a9da:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011a9df:	0f b6 c0             	movzbl %al,%eax
f011a9e2:	c1 e0 04             	shl    $0x4,%eax
f011a9e5:	89 c2                	mov    %eax,%edx
f011a9e7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a9ea:	01 d0                	add    %edx,%eax
f011a9ec:	48                   	dec    %eax
f011a9ed:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a9f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a9f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9f8:	f7 75 84             	divl   -0x7c(%ebp)
f011a9fb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a9fe:	29 d0                	sub    %edx,%eax
f011aa00:	01 d8                	add    %ebx,%eax
f011aa02:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011aa07:	39 c1                	cmp    %eax,%ecx
f011aa09:	74 17                	je     f011aa22 <test_kmalloc_bestfit1+0x6a2>
f011aa0b:	83 ec 04             	sub    $0x4,%esp
f011aa0e:	68 14 91 13 f0       	push   $0xf0139114
f011aa13:	68 c8 01 00 00       	push   $0x1c8
f011aa18:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aa1d:	e8 8e 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa22:	e8 91 98 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aa27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa2a:	74 17                	je     f011aa43 <test_kmalloc_bestfit1+0x6c3>
f011aa2c:	83 ec 04             	sub    $0x4,%esp
f011aa2f:	68 14 8d 13 f0       	push   $0xf0138d14
f011aa34:	68 c9 01 00 00       	push   $0x1c9
f011aa39:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aa3e:	e8 6d 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aa43:	e8 ca 1b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aa48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa4b:	29 c2                	sub    %eax,%edx
f011aa4d:	89 d0                	mov    %edx,%eax
f011aa4f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa54:	74 17                	je     f011aa6d <test_kmalloc_bestfit1+0x6ed>
f011aa56:	83 ec 04             	sub    $0x4,%esp
f011aa59:	68 44 91 13 f0       	push   $0xf0139144
f011aa5e:	68 ca 01 00 00       	push   $0x1ca
f011aa63:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aa68:	e8 43 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa6d:	e8 a0 1b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aa72:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa75:	e8 3e 98 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aa7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011aa7d:	83 ec 0c             	sub    $0xc,%esp
f011aa80:	68 00 fc 0f 00       	push   $0xffc00
f011aa85:	e8 09 d1 fe ff       	call   f0107b93 <kmalloc>
f011aa8a:	83 c4 10             	add    $0x10,%esp
f011aa8d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011aa93:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011aa99:	89 c1                	mov    %eax,%ecx
f011aa9b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011aaa2:	10 00 00 
f011aaa5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aaaa:	0f b6 d0             	movzbl %al,%edx
f011aaad:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011aab3:	01 d0                	add    %edx,%eax
f011aab5:	48                   	dec    %eax
f011aab6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011aabc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aac2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aac7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011aacd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aad3:	29 d0                	sub    %edx,%eax
f011aad5:	89 c3                	mov    %eax,%ebx
f011aad7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011aade:	10 00 00 
f011aae1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011aae6:	0f b6 c0             	movzbl %al,%eax
f011aae9:	c1 e0 04             	shl    $0x4,%eax
f011aaec:	89 c2                	mov    %eax,%edx
f011aaee:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aaf4:	01 d0                	add    %edx,%eax
f011aaf6:	48                   	dec    %eax
f011aaf7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aafd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ab03:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab08:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ab0e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ab14:	29 d0                	sub    %edx,%eax
f011ab16:	01 d8                	add    %ebx,%eax
f011ab18:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ab1d:	39 c1                	cmp    %eax,%ecx
f011ab1f:	74 17                	je     f011ab38 <test_kmalloc_bestfit1+0x7b8>
f011ab21:	83 ec 04             	sub    $0x4,%esp
f011ab24:	68 14 91 13 f0       	push   $0xf0139114
f011ab29:	68 d0 01 00 00       	push   $0x1d0
f011ab2e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ab33:	e8 78 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab38:	e8 7b 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ab3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab40:	74 17                	je     f011ab59 <test_kmalloc_bestfit1+0x7d9>
f011ab42:	83 ec 04             	sub    $0x4,%esp
f011ab45:	68 14 8d 13 f0       	push   $0xf0138d14
f011ab4a:	68 d1 01 00 00       	push   $0x1d1
f011ab4f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ab54:	e8 57 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ab59:	e8 b4 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ab5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab61:	29 c2                	sub    %eax,%edx
f011ab63:	89 d0                	mov    %edx,%eax
f011ab65:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab6a:	74 17                	je     f011ab83 <test_kmalloc_bestfit1+0x803>
f011ab6c:	83 ec 04             	sub    $0x4,%esp
f011ab6f:	68 44 91 13 f0       	push   $0xf0139144
f011ab74:	68 d2 01 00 00       	push   $0x1d2
f011ab79:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ab7e:	e8 2d 56 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ab83:	e8 8a 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ab88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab8b:	e8 28 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ab90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ab93:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ab99:	83 ec 0c             	sub    $0xc,%esp
f011ab9c:	50                   	push   %eax
f011ab9d:	e8 0b d0 fe ff       	call   f0107bad <kfree>
f011aba2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aba5:	e8 0e 97 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011abaa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abad:	74 17                	je     f011abc6 <test_kmalloc_bestfit1+0x846>
f011abaf:	83 ec 04             	sub    $0x4,%esp
f011abb2:	68 14 8d 13 f0       	push   $0xf0138d14
f011abb7:	68 db 01 00 00       	push   $0x1db
f011abbc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011abc1:	e8 ea 55 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011abc6:	e8 47 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011abcb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011abce:	3d 00 03 00 00       	cmp    $0x300,%eax
f011abd3:	74 17                	je     f011abec <test_kmalloc_bestfit1+0x86c>
f011abd5:	83 ec 04             	sub    $0x4,%esp
f011abd8:	68 57 91 13 f0       	push   $0xf0139157
f011abdd:	68 dc 01 00 00       	push   $0x1dc
f011abe2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011abe7:	e8 c4 55 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011abec:	e8 21 1a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011abf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abf4:	e8 bf 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011abf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011abfc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ac02:	83 ec 0c             	sub    $0xc,%esp
f011ac05:	50                   	push   %eax
f011ac06:	e8 a2 cf fe ff       	call   f0107bad <kfree>
f011ac0b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac0e:	e8 a5 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac13:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac16:	74 17                	je     f011ac2f <test_kmalloc_bestfit1+0x8af>
f011ac18:	83 ec 04             	sub    $0x4,%esp
f011ac1b:	68 14 8d 13 f0       	push   $0xf0138d14
f011ac20:	68 e2 01 00 00       	push   $0x1e2
f011ac25:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ac2a:	e8 81 55 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ac2f:	e8 de 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac34:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ac37:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac3c:	74 17                	je     f011ac55 <test_kmalloc_bestfit1+0x8d5>
f011ac3e:	83 ec 04             	sub    $0x4,%esp
f011ac41:	68 57 91 13 f0       	push   $0xf0139157
f011ac46:	68 e3 01 00 00       	push   $0x1e3
f011ac4b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ac50:	e8 5b 55 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ac55:	e8 b8 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac5d:	e8 56 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac62:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ac65:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac6b:	83 ec 0c             	sub    $0xc,%esp
f011ac6e:	50                   	push   %eax
f011ac6f:	e8 39 cf fe ff       	call   f0107bad <kfree>
f011ac74:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac77:	e8 3c 96 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ac7c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac7f:	74 17                	je     f011ac98 <test_kmalloc_bestfit1+0x918>
f011ac81:	83 ec 04             	sub    $0x4,%esp
f011ac84:	68 14 8d 13 f0       	push   $0xf0138d14
f011ac89:	68 e9 01 00 00       	push   $0x1e9
f011ac8e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ac93:	e8 18 55 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ac98:	e8 75 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ac9d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aca0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aca5:	74 17                	je     f011acbe <test_kmalloc_bestfit1+0x93e>
f011aca7:	83 ec 04             	sub    $0x4,%esp
f011acaa:	68 57 91 13 f0       	push   $0xf0139157
f011acaf:	68 ea 01 00 00       	push   $0x1ea
f011acb4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011acb9:	e8 f2 54 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011acbe:	e8 4f 19 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011acc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acc6:	e8 ed 95 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011accb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011acce:	83 ec 0c             	sub    $0xc,%esp
f011acd1:	68 00 00 08 00       	push   $0x80000
f011acd6:	e8 b8 ce fe ff       	call   f0107b93 <kmalloc>
f011acdb:	83 c4 10             	add    $0x10,%esp
f011acde:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ace4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011acea:	89 c1                	mov    %eax,%ecx
f011acec:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011acf3:	10 00 00 
f011acf6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011acfb:	0f b6 d0             	movzbl %al,%edx
f011acfe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ad04:	01 d0                	add    %edx,%eax
f011ad06:	48                   	dec    %eax
f011ad07:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ad0d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad13:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad18:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ad1e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad24:	29 d0                	sub    %edx,%eax
f011ad26:	89 c3                	mov    %eax,%ebx
f011ad28:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ad2f:	10 00 00 
f011ad32:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ad37:	0f b6 c0             	movzbl %al,%eax
f011ad3a:	c1 e0 04             	shl    $0x4,%eax
f011ad3d:	89 c2                	mov    %eax,%edx
f011ad3f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ad45:	01 d0                	add    %edx,%eax
f011ad47:	48                   	dec    %eax
f011ad48:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ad4e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad59:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ad5f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad65:	29 d0                	sub    %edx,%eax
f011ad67:	01 d8                	add    %ebx,%eax
f011ad69:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ad6e:	39 c1                	cmp    %eax,%ecx
f011ad70:	74 17                	je     f011ad89 <test_kmalloc_bestfit1+0xa09>
f011ad72:	83 ec 04             	sub    $0x4,%esp
f011ad75:	68 14 91 13 f0       	push   $0xf0139114
f011ad7a:	68 f3 01 00 00       	push   $0x1f3
f011ad7f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ad84:	e8 27 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad89:	e8 2a 95 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ad8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad91:	74 17                	je     f011adaa <test_kmalloc_bestfit1+0xa2a>
f011ad93:	83 ec 04             	sub    $0x4,%esp
f011ad96:	68 14 8d 13 f0       	push   $0xf0138d14
f011ad9b:	68 f4 01 00 00       	push   $0x1f4
f011ada0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ada5:	e8 06 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011adaa:	e8 63 18 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011adaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adb2:	29 c2                	sub    %eax,%edx
f011adb4:	89 d0                	mov    %edx,%eax
f011adb6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011adbb:	74 17                	je     f011add4 <test_kmalloc_bestfit1+0xa54>
f011adbd:	83 ec 04             	sub    $0x4,%esp
f011adc0:	68 44 91 13 f0       	push   $0xf0139144
f011adc5:	68 f5 01 00 00       	push   $0x1f5
f011adca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011adcf:	e8 dc 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011add4:	e8 39 18 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011add9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011addc:	e8 d7 94 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ade1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ade4:	83 ec 0c             	sub    $0xc,%esp
f011ade7:	68 00 fc 0f 00       	push   $0xffc00
f011adec:	e8 a2 cd fe ff       	call   f0107b93 <kmalloc>
f011adf1:	83 c4 10             	add    $0x10,%esp
f011adf4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011adfa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ae00:	89 c1                	mov    %eax,%ecx
f011ae02:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ae09:	10 00 00 
f011ae0c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ae11:	0f b6 d0             	movzbl %al,%edx
f011ae14:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ae1a:	01 d0                	add    %edx,%eax
f011ae1c:	48                   	dec    %eax
f011ae1d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ae23:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ae29:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae2e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ae34:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ae3a:	29 d0                	sub    %edx,%eax
f011ae3c:	89 c3                	mov    %eax,%ebx
f011ae3e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ae45:	10 00 00 
f011ae48:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ae4d:	0f b6 c0             	movzbl %al,%eax
f011ae50:	c1 e0 04             	shl    $0x4,%eax
f011ae53:	89 c2                	mov    %eax,%edx
f011ae55:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ae5b:	01 d0                	add    %edx,%eax
f011ae5d:	48                   	dec    %eax
f011ae5e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ae64:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ae6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae6f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ae75:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ae7b:	29 d0                	sub    %edx,%eax
f011ae7d:	01 d8                	add    %ebx,%eax
f011ae7f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ae84:	39 c1                	cmp    %eax,%ecx
f011ae86:	74 17                	je     f011ae9f <test_kmalloc_bestfit1+0xb1f>
f011ae88:	83 ec 04             	sub    $0x4,%esp
f011ae8b:	68 14 91 13 f0       	push   $0xf0139114
f011ae90:	68 fb 01 00 00       	push   $0x1fb
f011ae95:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ae9a:	e8 11 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae9f:	e8 14 94 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aea4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aea7:	74 17                	je     f011aec0 <test_kmalloc_bestfit1+0xb40>
f011aea9:	83 ec 04             	sub    $0x4,%esp
f011aeac:	68 14 8d 13 f0       	push   $0xf0138d14
f011aeb1:	68 fc 01 00 00       	push   $0x1fc
f011aeb6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aebb:	e8 f0 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aec0:	e8 4d 17 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aec5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aec8:	29 c2                	sub    %eax,%edx
f011aeca:	89 d0                	mov    %edx,%eax
f011aecc:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aed1:	74 17                	je     f011aeea <test_kmalloc_bestfit1+0xb6a>
f011aed3:	83 ec 04             	sub    $0x4,%esp
f011aed6:	68 44 91 13 f0       	push   $0xf0139144
f011aedb:	68 fd 01 00 00       	push   $0x1fd
f011aee0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aee5:	e8 c6 52 fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011aeea:	e8 23 17 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011aeef:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aef2:	e8 c1 93 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011aef7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011aefa:	83 ec 0c             	sub    $0xc,%esp
f011aefd:	68 00 fc 03 00       	push   $0x3fc00
f011af02:	e8 8c cc fe ff       	call   f0107b93 <kmalloc>
f011af07:	83 c4 10             	add    $0x10,%esp
f011af0a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011af10:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011af16:	89 c1                	mov    %eax,%ecx
f011af18:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011af1f:	10 00 00 
f011af22:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011af27:	0f b6 d0             	movzbl %al,%edx
f011af2a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011af30:	01 d0                	add    %edx,%eax
f011af32:	48                   	dec    %eax
f011af33:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011af39:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011af44:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011af4a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af50:	29 d0                	sub    %edx,%eax
f011af52:	89 c3                	mov    %eax,%ebx
f011af54:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011af5b:	10 00 00 
f011af5e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011af63:	0f b6 c0             	movzbl %al,%eax
f011af66:	c1 e0 04             	shl    $0x4,%eax
f011af69:	89 c2                	mov    %eax,%edx
f011af6b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011af71:	01 d0                	add    %edx,%eax
f011af73:	48                   	dec    %eax
f011af74:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011af7a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011af80:	ba 00 00 00 00       	mov    $0x0,%edx
f011af85:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011af8b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011af91:	29 d0                	sub    %edx,%eax
f011af93:	01 d8                	add    %ebx,%eax
f011af95:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011af9a:	39 c1                	cmp    %eax,%ecx
f011af9c:	74 17                	je     f011afb5 <test_kmalloc_bestfit1+0xc35>
f011af9e:	83 ec 04             	sub    $0x4,%esp
f011afa1:	68 14 91 13 f0       	push   $0xf0139114
f011afa6:	68 03 02 00 00       	push   $0x203
f011afab:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011afb0:	e8 fb 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afb5:	e8 fe 92 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011afba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afbd:	74 17                	je     f011afd6 <test_kmalloc_bestfit1+0xc56>
f011afbf:	83 ec 04             	sub    $0x4,%esp
f011afc2:	68 14 8d 13 f0       	push   $0xf0138d14
f011afc7:	68 04 02 00 00       	push   $0x204
f011afcc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011afd1:	e8 da 51 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011afd6:	e8 37 16 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011afdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011afde:	29 c2                	sub    %eax,%edx
f011afe0:	89 d0                	mov    %edx,%eax
f011afe2:	83 f8 40             	cmp    $0x40,%eax
f011afe5:	74 17                	je     f011affe <test_kmalloc_bestfit1+0xc7e>
f011afe7:	83 ec 04             	sub    $0x4,%esp
f011afea:	68 44 91 13 f0       	push   $0xf0139144
f011afef:	68 05 02 00 00       	push   $0x205
f011aff4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011aff9:	e8 b2 51 fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011affe:	e8 0f 16 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b003:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b006:	e8 ad 92 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b00b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b00e:	83 ec 0c             	sub    $0xc,%esp
f011b011:	68 00 fc 3f 00       	push   $0x3ffc00
f011b016:	e8 78 cb fe ff       	call   f0107b93 <kmalloc>
f011b01b:	83 c4 10             	add    $0x10,%esp
f011b01e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b024:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b02a:	89 c1                	mov    %eax,%ecx
f011b02c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b033:	10 00 00 
f011b036:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b03b:	0f b6 d0             	movzbl %al,%edx
f011b03e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b044:	01 d0                	add    %edx,%eax
f011b046:	48                   	dec    %eax
f011b047:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b04d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b053:	ba 00 00 00 00       	mov    $0x0,%edx
f011b058:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b05e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b064:	29 d0                	sub    %edx,%eax
f011b066:	89 c3                	mov    %eax,%ebx
f011b068:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b06f:	10 00 00 
f011b072:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b077:	0f b6 c0             	movzbl %al,%eax
f011b07a:	c1 e0 04             	shl    $0x4,%eax
f011b07d:	89 c2                	mov    %eax,%edx
f011b07f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b085:	01 d0                	add    %edx,%eax
f011b087:	48                   	dec    %eax
f011b088:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b08e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b094:	ba 00 00 00 00       	mov    $0x0,%edx
f011b099:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b09f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b0a5:	29 d0                	sub    %edx,%eax
f011b0a7:	01 d8                	add    %ebx,%eax
f011b0a9:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b0ae:	39 c1                	cmp    %eax,%ecx
f011b0b0:	74 17                	je     f011b0c9 <test_kmalloc_bestfit1+0xd49>
f011b0b2:	83 ec 04             	sub    $0x4,%esp
f011b0b5:	68 14 91 13 f0       	push   $0xf0139114
f011b0ba:	68 0b 02 00 00       	push   $0x20b
f011b0bf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b0c4:	e8 e7 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0c9:	e8 ea 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b0ce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0d1:	74 17                	je     f011b0ea <test_kmalloc_bestfit1+0xd6a>
f011b0d3:	83 ec 04             	sub    $0x4,%esp
f011b0d6:	68 14 8d 13 f0       	push   $0xf0138d14
f011b0db:	68 0c 02 00 00       	push   $0x20c
f011b0e0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b0e5:	e8 c6 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b0ea:	e8 23 15 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b0ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0f2:	29 c2                	sub    %eax,%edx
f011b0f4:	89 d0                	mov    %edx,%eax
f011b0f6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b0fb:	74 17                	je     f011b114 <test_kmalloc_bestfit1+0xd94>
f011b0fd:	83 ec 04             	sub    $0x4,%esp
f011b100:	68 44 91 13 f0       	push   $0xf0139144
f011b105:	68 0d 02 00 00       	push   $0x20d
f011b10a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b10f:	e8 9c 50 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b114:	e8 f9 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b119:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b11c:	e8 97 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b121:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b124:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b12a:	83 ec 0c             	sub    $0xc,%esp
f011b12d:	50                   	push   %eax
f011b12e:	e8 7a ca fe ff       	call   f0107bad <kfree>
f011b133:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b136:	e8 7d 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b13b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b13e:	74 17                	je     f011b157 <test_kmalloc_bestfit1+0xdd7>
f011b140:	83 ec 04             	sub    $0x4,%esp
f011b143:	68 14 8d 13 f0       	push   $0xf0138d14
f011b148:	68 16 02 00 00       	push   $0x216
f011b14d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b152:	e8 59 50 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b157:	e8 b6 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b15c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b15f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b164:	74 17                	je     f011b17d <test_kmalloc_bestfit1+0xdfd>
f011b166:	83 ec 04             	sub    $0x4,%esp
f011b169:	68 57 91 13 f0       	push   $0xf0139157
f011b16e:	68 17 02 00 00       	push   $0x217
f011b173:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b178:	e8 33 50 fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b17d:	e8 90 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b182:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b185:	e8 2e 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b18a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b18d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b193:	83 ec 0c             	sub    $0xc,%esp
f011b196:	50                   	push   %eax
f011b197:	e8 11 ca fe ff       	call   f0107bad <kfree>
f011b19c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b19f:	e8 14 91 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b1a4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1a7:	74 17                	je     f011b1c0 <test_kmalloc_bestfit1+0xe40>
f011b1a9:	83 ec 04             	sub    $0x4,%esp
f011b1ac:	68 14 8d 13 f0       	push   $0xf0138d14
f011b1b1:	68 1d 02 00 00       	push   $0x21d
f011b1b6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b1bb:	e8 f0 4f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b1c0:	e8 4d 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b1c5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b1c8:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b1cd:	74 17                	je     f011b1e6 <test_kmalloc_bestfit1+0xe66>
f011b1cf:	83 ec 04             	sub    $0x4,%esp
f011b1d2:	68 57 91 13 f0       	push   $0xf0139157
f011b1d7:	68 1e 02 00 00       	push   $0x21e
f011b1dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b1e1:	e8 ca 4f fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b1e6:	e8 27 14 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b1eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1ee:	e8 c5 90 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b1f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b1f6:	83 ec 0c             	sub    $0xc,%esp
f011b1f9:	68 00 fc 1f 00       	push   $0x1ffc00
f011b1fe:	e8 90 c9 fe ff       	call   f0107b93 <kmalloc>
f011b203:	83 c4 10             	add    $0x10,%esp
f011b206:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b20c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b212:	89 c1                	mov    %eax,%ecx
f011b214:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b21b:	10 00 00 
f011b21e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b223:	0f b6 d0             	movzbl %al,%edx
f011b226:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b22c:	01 d0                	add    %edx,%eax
f011b22e:	48                   	dec    %eax
f011b22f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b235:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b23b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b240:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b246:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b24c:	29 d0                	sub    %edx,%eax
f011b24e:	89 c3                	mov    %eax,%ebx
f011b250:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b257:	10 00 00 
f011b25a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b25f:	0f b6 c0             	movzbl %al,%eax
f011b262:	c1 e0 04             	shl    $0x4,%eax
f011b265:	89 c2                	mov    %eax,%edx
f011b267:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b26d:	01 d0                	add    %edx,%eax
f011b26f:	48                   	dec    %eax
f011b270:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b276:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b27c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b281:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b287:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b28d:	29 d0                	sub    %edx,%eax
f011b28f:	01 d8                	add    %ebx,%eax
f011b291:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b296:	39 c1                	cmp    %eax,%ecx
f011b298:	74 17                	je     f011b2b1 <test_kmalloc_bestfit1+0xf31>
f011b29a:	83 ec 04             	sub    $0x4,%esp
f011b29d:	68 14 91 13 f0       	push   $0xf0139114
f011b2a2:	68 27 02 00 00       	push   $0x227
f011b2a7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b2ac:	e8 ff 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2b1:	e8 02 90 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b2b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2b9:	74 17                	je     f011b2d2 <test_kmalloc_bestfit1+0xf52>
f011b2bb:	83 ec 04             	sub    $0x4,%esp
f011b2be:	68 14 8d 13 f0       	push   $0xf0138d14
f011b2c3:	68 28 02 00 00       	push   $0x228
f011b2c8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b2cd:	e8 de 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b2d2:	e8 3b 13 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b2d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2da:	29 c2                	sub    %eax,%edx
f011b2dc:	89 d0                	mov    %edx,%eax
f011b2de:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b2e3:	74 17                	je     f011b2fc <test_kmalloc_bestfit1+0xf7c>
f011b2e5:	83 ec 04             	sub    $0x4,%esp
f011b2e8:	68 44 91 13 f0       	push   $0xf0139144
f011b2ed:	68 29 02 00 00       	push   $0x229
f011b2f2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b2f7:	e8 b4 4e fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b2fc:	83 ec 0c             	sub    $0xc,%esp
f011b2ff:	68 64 91 13 f0       	push   $0xf0139164
f011b304:	e8 28 5b fe ff       	call   f0100e31 <cprintf>
f011b309:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b30c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b311:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b314:	5b                   	pop    %ebx
f011b315:	5f                   	pop    %edi
f011b316:	5d                   	pop    %ebp
f011b317:	c3                   	ret    

f011b318 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b318:	55                   	push   %ebp
f011b319:	89 e5                	mov    %esp,%ebp
f011b31b:	57                   	push   %edi
f011b31c:	53                   	push   %ebx
f011b31d:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b323:	83 ec 0c             	sub    $0xc,%esp
f011b326:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011b32b:	e8 01 5b fe ff       	call   f0100e31 <cprintf>
f011b330:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b333:	83 ec 0c             	sub    $0xc,%esp
f011b336:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011b33b:	e8 f1 5a fe ff       	call   f0100e31 <cprintf>
f011b340:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b343:	83 ec 0c             	sub    $0xc,%esp
f011b346:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011b34b:	e8 e1 5a fe ff       	call   f0100e31 <cprintf>
f011b350:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b353:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b359:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b35e:	b8 00 00 00 00       	mov    $0x0,%eax
f011b363:	89 d7                	mov    %edx,%edi
f011b365:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b367:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b36e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b373:	0f b6 d0             	movzbl %al,%edx
f011b376:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b379:	01 d0                	add    %edx,%eax
f011b37b:	48                   	dec    %eax
f011b37c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b37f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b382:	ba 00 00 00 00       	mov    $0x0,%edx
f011b387:	f7 75 f4             	divl   -0xc(%ebp)
f011b38a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b38d:	29 d0                	sub    %edx,%eax
f011b38f:	89 c1                	mov    %eax,%ecx
f011b391:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b398:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b39d:	0f b6 c0             	movzbl %al,%eax
f011b3a0:	c1 e0 04             	shl    $0x4,%eax
f011b3a3:	89 c2                	mov    %eax,%edx
f011b3a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b3a8:	01 d0                	add    %edx,%eax
f011b3aa:	48                   	dec    %eax
f011b3ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b3ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b3b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3b6:	f7 75 ec             	divl   -0x14(%ebp)
f011b3b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b3bc:	29 d0                	sub    %edx,%eax
f011b3be:	01 c8                	add    %ecx,%eax
f011b3c0:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b3c5:	29 c2                	sub    %eax,%edx
f011b3c7:	89 d0                	mov    %edx,%eax
f011b3c9:	83 ec 0c             	sub    $0xc,%esp
f011b3cc:	50                   	push   %eax
f011b3cd:	e8 c1 c7 fe ff       	call   f0107b93 <kmalloc>
f011b3d2:	83 c4 10             	add    $0x10,%esp
f011b3d5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b3db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b3e1:	85 c0                	test   %eax,%eax
f011b3e3:	74 17                	je     f011b3fc <test_kmalloc_bestfit2+0xe4>
f011b3e5:	83 ec 04             	sub    $0x4,%esp
f011b3e8:	68 ac 91 13 f0       	push   $0xf01391ac
f011b3ed:	68 3f 02 00 00       	push   $0x23f
f011b3f2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b3f7:	e8 b4 4d fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b3fc:	e8 11 12 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b401:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b404:	e8 af 8e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b409:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b40c:	83 ec 0c             	sub    $0xc,%esp
f011b40f:	68 00 fc 1f 00       	push   $0x1ffc00
f011b414:	e8 7a c7 fe ff       	call   f0107b93 <kmalloc>
f011b419:	83 c4 10             	add    $0x10,%esp
f011b41c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b422:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b428:	89 c1                	mov    %eax,%ecx
f011b42a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b431:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b436:	0f b6 d0             	movzbl %al,%edx
f011b439:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b43c:	01 d0                	add    %edx,%eax
f011b43e:	48                   	dec    %eax
f011b43f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b442:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b445:	ba 00 00 00 00       	mov    $0x0,%edx
f011b44a:	f7 75 dc             	divl   -0x24(%ebp)
f011b44d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b450:	29 d0                	sub    %edx,%eax
f011b452:	89 c3                	mov    %eax,%ebx
f011b454:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b45b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b460:	0f b6 c0             	movzbl %al,%eax
f011b463:	c1 e0 04             	shl    $0x4,%eax
f011b466:	89 c2                	mov    %eax,%edx
f011b468:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b46b:	01 d0                	add    %edx,%eax
f011b46d:	48                   	dec    %eax
f011b46e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b471:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b474:	ba 00 00 00 00       	mov    $0x0,%edx
f011b479:	f7 75 d4             	divl   -0x2c(%ebp)
f011b47c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b47f:	29 d0                	sub    %edx,%eax
f011b481:	01 d8                	add    %ebx,%eax
f011b483:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b488:	39 c1                	cmp    %eax,%ecx
f011b48a:	74 17                	je     f011b4a3 <test_kmalloc_bestfit2+0x18b>
f011b48c:	83 ec 04             	sub    $0x4,%esp
f011b48f:	68 14 91 13 f0       	push   $0xf0139114
f011b494:	68 49 02 00 00       	push   $0x249
f011b499:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b49e:	e8 0d 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4a3:	e8 10 8e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b4a8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b4ab:	74 17                	je     f011b4c4 <test_kmalloc_bestfit2+0x1ac>
f011b4ad:	83 ec 04             	sub    $0x4,%esp
f011b4b0:	68 14 8d 13 f0       	push   $0xf0138d14
f011b4b5:	68 4a 02 00 00       	push   $0x24a
f011b4ba:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b4bf:	e8 ec 4c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b4c4:	e8 49 11 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b4c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b4cc:	29 c2                	sub    %eax,%edx
f011b4ce:	89 d0                	mov    %edx,%eax
f011b4d0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b4d5:	74 17                	je     f011b4ee <test_kmalloc_bestfit2+0x1d6>
f011b4d7:	83 ec 04             	sub    $0x4,%esp
f011b4da:	68 44 91 13 f0       	push   $0xf0139144
f011b4df:	68 4b 02 00 00       	push   $0x24b
f011b4e4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b4e9:	e8 c2 4c fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b4ee:	e8 1f 11 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b4f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4f6:	e8 bd 8d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b4fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b4fe:	83 ec 0c             	sub    $0xc,%esp
f011b501:	68 00 fc 1f 00       	push   $0x1ffc00
f011b506:	e8 88 c6 fe ff       	call   f0107b93 <kmalloc>
f011b50b:	83 c4 10             	add    $0x10,%esp
f011b50e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b514:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b51a:	89 c1                	mov    %eax,%ecx
f011b51c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b523:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b528:	0f b6 d0             	movzbl %al,%edx
f011b52b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b52e:	01 d0                	add    %edx,%eax
f011b530:	48                   	dec    %eax
f011b531:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b534:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b537:	ba 00 00 00 00       	mov    $0x0,%edx
f011b53c:	f7 75 cc             	divl   -0x34(%ebp)
f011b53f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b542:	29 d0                	sub    %edx,%eax
f011b544:	89 c3                	mov    %eax,%ebx
f011b546:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b54d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b552:	0f b6 c0             	movzbl %al,%eax
f011b555:	c1 e0 04             	shl    $0x4,%eax
f011b558:	89 c2                	mov    %eax,%edx
f011b55a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b55d:	01 d0                	add    %edx,%eax
f011b55f:	48                   	dec    %eax
f011b560:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b563:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b566:	ba 00 00 00 00       	mov    $0x0,%edx
f011b56b:	f7 75 c4             	divl   -0x3c(%ebp)
f011b56e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b571:	29 d0                	sub    %edx,%eax
f011b573:	01 d8                	add    %ebx,%eax
f011b575:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b57a:	39 c1                	cmp    %eax,%ecx
f011b57c:	74 17                	je     f011b595 <test_kmalloc_bestfit2+0x27d>
f011b57e:	83 ec 04             	sub    $0x4,%esp
f011b581:	68 14 91 13 f0       	push   $0xf0139114
f011b586:	68 51 02 00 00       	push   $0x251
f011b58b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b590:	e8 1b 4c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b595:	e8 1e 8d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b59a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b59d:	74 17                	je     f011b5b6 <test_kmalloc_bestfit2+0x29e>
f011b59f:	83 ec 04             	sub    $0x4,%esp
f011b5a2:	68 14 8d 13 f0       	push   $0xf0138d14
f011b5a7:	68 52 02 00 00       	push   $0x252
f011b5ac:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b5b1:	e8 fa 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b5b6:	e8 57 10 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b5bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b5be:	29 c2                	sub    %eax,%edx
f011b5c0:	89 d0                	mov    %edx,%eax
f011b5c2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b5c7:	74 17                	je     f011b5e0 <test_kmalloc_bestfit2+0x2c8>
f011b5c9:	83 ec 04             	sub    $0x4,%esp
f011b5cc:	68 44 91 13 f0       	push   $0xf0139144
f011b5d1:	68 53 02 00 00       	push   $0x253
f011b5d6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b5db:	e8 d0 4b fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b5e0:	e8 2d 10 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b5e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5e8:	e8 cb 8c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b5ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b5f0:	83 ec 0c             	sub    $0xc,%esp
f011b5f3:	68 00 08 00 00       	push   $0x800
f011b5f8:	e8 96 c5 fe ff       	call   f0107b93 <kmalloc>
f011b5fd:	83 c4 10             	add    $0x10,%esp
f011b600:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b606:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b60c:	89 c1                	mov    %eax,%ecx
f011b60e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b615:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b61a:	0f b6 d0             	movzbl %al,%edx
f011b61d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b620:	01 d0                	add    %edx,%eax
f011b622:	48                   	dec    %eax
f011b623:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b626:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b629:	ba 00 00 00 00       	mov    $0x0,%edx
f011b62e:	f7 75 bc             	divl   -0x44(%ebp)
f011b631:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b634:	29 d0                	sub    %edx,%eax
f011b636:	89 c3                	mov    %eax,%ebx
f011b638:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b63f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b644:	0f b6 c0             	movzbl %al,%eax
f011b647:	c1 e0 04             	shl    $0x4,%eax
f011b64a:	89 c2                	mov    %eax,%edx
f011b64c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b64f:	01 d0                	add    %edx,%eax
f011b651:	48                   	dec    %eax
f011b652:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b655:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b658:	ba 00 00 00 00       	mov    $0x0,%edx
f011b65d:	f7 75 b4             	divl   -0x4c(%ebp)
f011b660:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b663:	29 d0                	sub    %edx,%eax
f011b665:	01 d8                	add    %ebx,%eax
f011b667:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b66c:	39 c1                	cmp    %eax,%ecx
f011b66e:	74 17                	je     f011b687 <test_kmalloc_bestfit2+0x36f>
f011b670:	83 ec 04             	sub    $0x4,%esp
f011b673:	68 14 91 13 f0       	push   $0xf0139114
f011b678:	68 59 02 00 00       	push   $0x259
f011b67d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b682:	e8 29 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b687:	e8 2c 8c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b68c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b68f:	74 17                	je     f011b6a8 <test_kmalloc_bestfit2+0x390>
f011b691:	83 ec 04             	sub    $0x4,%esp
f011b694:	68 14 8d 13 f0       	push   $0xf0138d14
f011b699:	68 5a 02 00 00       	push   $0x25a
f011b69e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b6a3:	e8 08 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b6a8:	e8 65 0f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b6ad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b6b0:	29 c2                	sub    %eax,%edx
f011b6b2:	89 d0                	mov    %edx,%eax
f011b6b4:	83 f8 01             	cmp    $0x1,%eax
f011b6b7:	74 17                	je     f011b6d0 <test_kmalloc_bestfit2+0x3b8>
f011b6b9:	83 ec 04             	sub    $0x4,%esp
f011b6bc:	68 44 91 13 f0       	push   $0xf0139144
f011b6c1:	68 5b 02 00 00       	push   $0x25b
f011b6c6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b6cb:	e8 e0 4a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b6d0:	e8 3d 0f ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b6d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6d8:	e8 db 8b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b6dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b6e0:	83 ec 0c             	sub    $0xc,%esp
f011b6e3:	68 00 08 00 00       	push   $0x800
f011b6e8:	e8 a6 c4 fe ff       	call   f0107b93 <kmalloc>
f011b6ed:	83 c4 10             	add    $0x10,%esp
f011b6f0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b6f6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b6fc:	89 c1                	mov    %eax,%ecx
f011b6fe:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b705:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b70a:	0f b6 d0             	movzbl %al,%edx
f011b70d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b710:	01 d0                	add    %edx,%eax
f011b712:	48                   	dec    %eax
f011b713:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b716:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b719:	ba 00 00 00 00       	mov    $0x0,%edx
f011b71e:	f7 75 ac             	divl   -0x54(%ebp)
f011b721:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b724:	29 d0                	sub    %edx,%eax
f011b726:	89 c3                	mov    %eax,%ebx
f011b728:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b72f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b734:	0f b6 c0             	movzbl %al,%eax
f011b737:	c1 e0 04             	shl    $0x4,%eax
f011b73a:	89 c2                	mov    %eax,%edx
f011b73c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b73f:	01 d0                	add    %edx,%eax
f011b741:	48                   	dec    %eax
f011b742:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b745:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b748:	ba 00 00 00 00       	mov    $0x0,%edx
f011b74d:	f7 75 a4             	divl   -0x5c(%ebp)
f011b750:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b753:	29 d0                	sub    %edx,%eax
f011b755:	01 d8                	add    %ebx,%eax
f011b757:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b75c:	39 c1                	cmp    %eax,%ecx
f011b75e:	74 17                	je     f011b777 <test_kmalloc_bestfit2+0x45f>
f011b760:	83 ec 04             	sub    $0x4,%esp
f011b763:	68 14 91 13 f0       	push   $0xf0139114
f011b768:	68 61 02 00 00       	push   $0x261
f011b76d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b772:	e8 39 4a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b777:	e8 3c 8b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b77c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b77f:	74 17                	je     f011b798 <test_kmalloc_bestfit2+0x480>
f011b781:	83 ec 04             	sub    $0x4,%esp
f011b784:	68 14 8d 13 f0       	push   $0xf0138d14
f011b789:	68 62 02 00 00       	push   $0x262
f011b78e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b793:	e8 18 4a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b798:	e8 75 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b79d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b7a0:	29 c2                	sub    %eax,%edx
f011b7a2:	89 d0                	mov    %edx,%eax
f011b7a4:	83 f8 01             	cmp    $0x1,%eax
f011b7a7:	74 17                	je     f011b7c0 <test_kmalloc_bestfit2+0x4a8>
f011b7a9:	83 ec 04             	sub    $0x4,%esp
f011b7ac:	68 44 91 13 f0       	push   $0xf0139144
f011b7b1:	68 63 02 00 00       	push   $0x263
f011b7b6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b7bb:	e8 f0 49 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b7c0:	e8 4d 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b7c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b7c8:	e8 eb 8a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b7cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011b7d0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b7d6:	83 ec 0c             	sub    $0xc,%esp
f011b7d9:	50                   	push   %eax
f011b7da:	e8 ce c3 fe ff       	call   f0107bad <kfree>
f011b7df:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7e2:	e8 d1 8a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b7e7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b7ea:	74 17                	je     f011b803 <test_kmalloc_bestfit2+0x4eb>
f011b7ec:	83 ec 04             	sub    $0x4,%esp
f011b7ef:	68 14 8d 13 f0       	push   $0xf0138d14
f011b7f4:	68 69 02 00 00       	push   $0x269
f011b7f9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b7fe:	e8 ad 49 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b803:	e8 0a 0e ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b808:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011b80b:	83 f8 01             	cmp    $0x1,%eax
f011b80e:	74 17                	je     f011b827 <test_kmalloc_bestfit2+0x50f>
f011b810:	83 ec 04             	sub    $0x4,%esp
f011b813:	68 44 91 13 f0       	push   $0xf0139144
f011b818:	68 6a 02 00 00       	push   $0x26a
f011b81d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b822:	e8 89 49 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b827:	e8 e6 0d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b82c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b82f:	e8 84 8a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b834:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b837:	83 ec 0c             	sub    $0xc,%esp
f011b83a:	68 00 1c 00 00       	push   $0x1c00
f011b83f:	e8 4f c3 fe ff       	call   f0107b93 <kmalloc>
f011b844:	83 c4 10             	add    $0x10,%esp
f011b847:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b84d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b853:	89 c1                	mov    %eax,%ecx
f011b855:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b85c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b861:	0f b6 d0             	movzbl %al,%edx
f011b864:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b867:	01 d0                	add    %edx,%eax
f011b869:	48                   	dec    %eax
f011b86a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b86d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b870:	ba 00 00 00 00       	mov    $0x0,%edx
f011b875:	f7 75 9c             	divl   -0x64(%ebp)
f011b878:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b87b:	29 d0                	sub    %edx,%eax
f011b87d:	89 c3                	mov    %eax,%ebx
f011b87f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b886:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b88b:	0f b6 c0             	movzbl %al,%eax
f011b88e:	c1 e0 04             	shl    $0x4,%eax
f011b891:	89 c2                	mov    %eax,%edx
f011b893:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b896:	01 d0                	add    %edx,%eax
f011b898:	48                   	dec    %eax
f011b899:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b89c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b89f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8a4:	f7 75 94             	divl   -0x6c(%ebp)
f011b8a7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b8aa:	29 d0                	sub    %edx,%eax
f011b8ac:	01 d8                	add    %ebx,%eax
f011b8ae:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b8b3:	39 c1                	cmp    %eax,%ecx
f011b8b5:	74 17                	je     f011b8ce <test_kmalloc_bestfit2+0x5b6>
f011b8b7:	83 ec 04             	sub    $0x4,%esp
f011b8ba:	68 14 91 13 f0       	push   $0xf0139114
f011b8bf:	68 70 02 00 00       	push   $0x270
f011b8c4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b8c9:	e8 e2 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8ce:	e8 e5 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b8d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b8d6:	74 17                	je     f011b8ef <test_kmalloc_bestfit2+0x5d7>
f011b8d8:	83 ec 04             	sub    $0x4,%esp
f011b8db:	68 14 8d 13 f0       	push   $0xf0138d14
f011b8e0:	68 71 02 00 00       	push   $0x271
f011b8e5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b8ea:	e8 c1 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b8ef:	e8 1e 0d ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b8f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b8f7:	29 c2                	sub    %eax,%edx
f011b8f9:	89 d0                	mov    %edx,%eax
f011b8fb:	83 f8 02             	cmp    $0x2,%eax
f011b8fe:	74 17                	je     f011b917 <test_kmalloc_bestfit2+0x5ff>
f011b900:	83 ec 04             	sub    $0x4,%esp
f011b903:	68 44 91 13 f0       	push   $0xf0139144
f011b908:	68 72 02 00 00       	push   $0x272
f011b90d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b912:	e8 99 48 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b917:	e8 f6 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b91c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b91f:	e8 94 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b924:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011b927:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b92d:	83 ec 0c             	sub    $0xc,%esp
f011b930:	50                   	push   %eax
f011b931:	e8 77 c2 fe ff       	call   f0107bad <kfree>
f011b936:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b939:	e8 7a 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b93e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b941:	74 17                	je     f011b95a <test_kmalloc_bestfit2+0x642>
f011b943:	83 ec 04             	sub    $0x4,%esp
f011b946:	68 14 8d 13 f0       	push   $0xf0138d14
f011b94b:	68 78 02 00 00       	push   $0x278
f011b950:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b955:	e8 56 48 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b95a:	e8 b3 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b95f:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011b962:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b967:	74 17                	je     f011b980 <test_kmalloc_bestfit2+0x668>
f011b969:	83 ec 04             	sub    $0x4,%esp
f011b96c:	68 c8 8f 13 f0       	push   $0xf0138fc8
f011b971:	68 79 02 00 00       	push   $0x279
f011b976:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011b97b:	e8 30 48 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b980:	e8 8d 0c ff ff       	call   f010c612 <sys_calculate_free_frames>
f011b985:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b988:	e8 2b 89 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011b98d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b990:	83 ec 0c             	sub    $0xc,%esp
f011b993:	68 00 fc 2f 00       	push   $0x2ffc00
f011b998:	e8 f6 c1 fe ff       	call   f0107b93 <kmalloc>
f011b99d:	83 c4 10             	add    $0x10,%esp
f011b9a0:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b9a6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b9ac:	89 c1                	mov    %eax,%ecx
f011b9ae:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b9b5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b9ba:	0f b6 d0             	movzbl %al,%edx
f011b9bd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b9c0:	01 d0                	add    %edx,%eax
f011b9c2:	48                   	dec    %eax
f011b9c3:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b9c6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b9c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ce:	f7 75 8c             	divl   -0x74(%ebp)
f011b9d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b9d4:	29 d0                	sub    %edx,%eax
f011b9d6:	89 c3                	mov    %eax,%ebx
f011b9d8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b9df:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011b9e4:	0f b6 c0             	movzbl %al,%eax
f011b9e7:	c1 e0 04             	shl    $0x4,%eax
f011b9ea:	89 c2                	mov    %eax,%edx
f011b9ec:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b9ef:	01 d0                	add    %edx,%eax
f011b9f1:	48                   	dec    %eax
f011b9f2:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b9f5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b9f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9fd:	f7 75 84             	divl   -0x7c(%ebp)
f011ba00:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ba03:	29 d0                	sub    %edx,%eax
f011ba05:	01 d8                	add    %ebx,%eax
f011ba07:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ba0c:	39 c1                	cmp    %eax,%ecx
f011ba0e:	74 17                	je     f011ba27 <test_kmalloc_bestfit2+0x70f>
f011ba10:	83 ec 04             	sub    $0x4,%esp
f011ba13:	68 14 91 13 f0       	push   $0xf0139114
f011ba18:	68 7f 02 00 00       	push   $0x27f
f011ba1d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ba22:	e8 89 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba27:	e8 8c 88 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ba2c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ba2f:	74 17                	je     f011ba48 <test_kmalloc_bestfit2+0x730>
f011ba31:	83 ec 04             	sub    $0x4,%esp
f011ba34:	68 14 8d 13 f0       	push   $0xf0138d14
f011ba39:	68 80 02 00 00       	push   $0x280
f011ba3e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ba43:	e8 68 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011ba48:	e8 c5 0b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ba4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba50:	29 c2                	sub    %eax,%edx
f011ba52:	89 d0                	mov    %edx,%eax
f011ba54:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ba59:	74 17                	je     f011ba72 <test_kmalloc_bestfit2+0x75a>
f011ba5b:	83 ec 04             	sub    $0x4,%esp
f011ba5e:	68 44 91 13 f0       	push   $0xf0139144
f011ba63:	68 81 02 00 00       	push   $0x281
f011ba68:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ba6d:	e8 3e 47 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba72:	e8 9b 0b ff ff       	call   f010c612 <sys_calculate_free_frames>
f011ba77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba7a:	e8 39 88 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ba7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ba82:	83 ec 0c             	sub    $0xc,%esp
f011ba85:	68 00 18 20 00       	push   $0x201800
f011ba8a:	e8 04 c1 fe ff       	call   f0107b93 <kmalloc>
f011ba8f:	83 c4 10             	add    $0x10,%esp
f011ba92:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba98:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ba9e:	89 c1                	mov    %eax,%ecx
f011baa0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011baa7:	10 00 00 
f011baaa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011baaf:	0f b6 d0             	movzbl %al,%edx
f011bab2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bab8:	01 d0                	add    %edx,%eax
f011baba:	48                   	dec    %eax
f011babb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bac1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bac7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bacc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bad2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bad8:	29 d0                	sub    %edx,%eax
f011bada:	89 c3                	mov    %eax,%ebx
f011badc:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bae3:	10 00 00 
f011bae6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011baeb:	0f b6 c0             	movzbl %al,%eax
f011baee:	c1 e0 04             	shl    $0x4,%eax
f011baf1:	89 c2                	mov    %eax,%edx
f011baf3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011baf9:	01 d0                	add    %edx,%eax
f011bafb:	48                   	dec    %eax
f011bafc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bb02:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bb08:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb0d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bb13:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bb19:	29 d0                	sub    %edx,%eax
f011bb1b:	01 d8                	add    %ebx,%eax
f011bb1d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bb22:	39 c1                	cmp    %eax,%ecx
f011bb24:	74 17                	je     f011bb3d <test_kmalloc_bestfit2+0x825>
f011bb26:	83 ec 04             	sub    $0x4,%esp
f011bb29:	68 14 91 13 f0       	push   $0xf0139114
f011bb2e:	68 87 02 00 00       	push   $0x287
f011bb33:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bb38:	e8 73 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb3d:	e8 76 87 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bb42:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb45:	74 17                	je     f011bb5e <test_kmalloc_bestfit2+0x846>
f011bb47:	83 ec 04             	sub    $0x4,%esp
f011bb4a:	68 14 8d 13 f0       	push   $0xf0138d14
f011bb4f:	68 88 02 00 00       	push   $0x288
f011bb54:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bb59:	e8 52 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bb5e:	e8 af 0a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bb63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb66:	29 c2                	sub    %eax,%edx
f011bb68:	89 d0                	mov    %edx,%eax
f011bb6a:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bb6f:	74 17                	je     f011bb88 <test_kmalloc_bestfit2+0x870>
f011bb71:	83 ec 04             	sub    $0x4,%esp
f011bb74:	68 44 91 13 f0       	push   $0xf0139144
f011bb79:	68 89 02 00 00       	push   $0x289
f011bb7e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bb83:	e8 28 46 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb88:	e8 85 0a ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bb8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb90:	e8 23 87 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bb95:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bb98:	83 ec 0c             	sub    $0xc,%esp
f011bb9b:	68 00 fc 4f 00       	push   $0x4ffc00
f011bba0:	e8 ee bf fe ff       	call   f0107b93 <kmalloc>
f011bba5:	83 c4 10             	add    $0x10,%esp
f011bba8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bbae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bbb4:	89 c1                	mov    %eax,%ecx
f011bbb6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bbbd:	10 00 00 
f011bbc0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bbc5:	0f b6 d0             	movzbl %al,%edx
f011bbc8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bbce:	01 d0                	add    %edx,%eax
f011bbd0:	48                   	dec    %eax
f011bbd1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bbd7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bbdd:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbe2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bbe8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bbee:	29 d0                	sub    %edx,%eax
f011bbf0:	89 c3                	mov    %eax,%ebx
f011bbf2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bbf9:	10 00 00 
f011bbfc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bc01:	0f b6 c0             	movzbl %al,%eax
f011bc04:	c1 e0 04             	shl    $0x4,%eax
f011bc07:	89 c2                	mov    %eax,%edx
f011bc09:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bc0f:	01 d0                	add    %edx,%eax
f011bc11:	48                   	dec    %eax
f011bc12:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bc18:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bc1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc23:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bc29:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bc2f:	29 d0                	sub    %edx,%eax
f011bc31:	01 d8                	add    %ebx,%eax
f011bc33:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bc38:	39 c1                	cmp    %eax,%ecx
f011bc3a:	74 17                	je     f011bc53 <test_kmalloc_bestfit2+0x93b>
f011bc3c:	83 ec 04             	sub    $0x4,%esp
f011bc3f:	68 14 91 13 f0       	push   $0xf0139114
f011bc44:	68 8f 02 00 00       	push   $0x28f
f011bc49:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bc4e:	e8 5d 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc53:	e8 60 86 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bc58:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc5b:	74 17                	je     f011bc74 <test_kmalloc_bestfit2+0x95c>
f011bc5d:	83 ec 04             	sub    $0x4,%esp
f011bc60:	68 14 8d 13 f0       	push   $0xf0138d14
f011bc65:	68 90 02 00 00       	push   $0x290
f011bc6a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bc6f:	e8 3c 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bc74:	e8 99 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bc79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc7c:	29 c2                	sub    %eax,%edx
f011bc7e:	89 d0                	mov    %edx,%eax
f011bc80:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bc85:	74 17                	je     f011bc9e <test_kmalloc_bestfit2+0x986>
f011bc87:	83 ec 04             	sub    $0x4,%esp
f011bc8a:	68 44 91 13 f0       	push   $0xf0139144
f011bc8f:	68 91 02 00 00       	push   $0x291
f011bc94:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bc99:	e8 12 45 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc9e:	e8 6f 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bca3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bca6:	e8 0d 86 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bcab:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011bcae:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bcb4:	83 ec 0c             	sub    $0xc,%esp
f011bcb7:	50                   	push   %eax
f011bcb8:	e8 f0 be fe ff       	call   f0107bad <kfree>
f011bcbd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcc0:	e8 f3 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bcc5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bcc8:	74 17                	je     f011bce1 <test_kmalloc_bestfit2+0x9c9>
f011bcca:	83 ec 04             	sub    $0x4,%esp
f011bccd:	68 14 8d 13 f0       	push   $0xf0138d14
f011bcd2:	68 97 02 00 00       	push   $0x297
f011bcd7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bcdc:	e8 cf 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011bce1:	e8 2c 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bce6:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bce9:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bcee:	74 17                	je     f011bd07 <test_kmalloc_bestfit2+0x9ef>
f011bcf0:	83 ec 04             	sub    $0x4,%esp
f011bcf3:	68 c8 8f 13 f0       	push   $0xf0138fc8
f011bcf8:	68 98 02 00 00       	push   $0x298
f011bcfd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bd02:	e8 a9 44 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd07:	e8 06 09 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bd0c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd0f:	e8 a4 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bd14:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011bd17:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bd1d:	83 ec 0c             	sub    $0xc,%esp
f011bd20:	50                   	push   %eax
f011bd21:	e8 87 be fe ff       	call   f0107bad <kfree>
f011bd26:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd29:	e8 8a 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bd2e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bd31:	74 17                	je     f011bd4a <test_kmalloc_bestfit2+0xa32>
f011bd33:	83 ec 04             	sub    $0x4,%esp
f011bd36:	68 14 8d 13 f0       	push   $0xf0138d14
f011bd3b:	68 9e 02 00 00       	push   $0x29e
f011bd40:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bd45:	e8 66 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bd4a:	e8 c3 08 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bd4f:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bd52:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd57:	74 17                	je     f011bd70 <test_kmalloc_bestfit2+0xa58>
f011bd59:	83 ec 04             	sub    $0x4,%esp
f011bd5c:	68 f4 91 13 f0       	push   $0xf01391f4
f011bd61:	68 9f 02 00 00       	push   $0x29f
f011bd66:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bd6b:	e8 40 44 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd70:	e8 9d 08 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bd75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd78:	e8 3b 85 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bd7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011bd80:	83 ec 0c             	sub    $0xc,%esp
f011bd83:	68 00 fc 1f 00       	push   $0x1ffc00
f011bd88:	e8 06 be fe ff       	call   f0107b93 <kmalloc>
f011bd8d:	83 c4 10             	add    $0x10,%esp
f011bd90:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bd9c:	89 c1                	mov    %eax,%ecx
f011bd9e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bda5:	10 00 00 
f011bda8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bdad:	0f b6 d0             	movzbl %al,%edx
f011bdb0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bdb6:	01 d0                	add    %edx,%eax
f011bdb8:	48                   	dec    %eax
f011bdb9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bdbf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bdc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdca:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bdd0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bdd6:	29 d0                	sub    %edx,%eax
f011bdd8:	89 c3                	mov    %eax,%ebx
f011bdda:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bde1:	10 00 00 
f011bde4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bde9:	0f b6 c0             	movzbl %al,%eax
f011bdec:	c1 e0 04             	shl    $0x4,%eax
f011bdef:	89 c2                	mov    %eax,%edx
f011bdf1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bdf7:	01 d0                	add    %edx,%eax
f011bdf9:	48                   	dec    %eax
f011bdfa:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011be00:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be06:	ba 00 00 00 00       	mov    $0x0,%edx
f011be0b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011be11:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011be17:	29 d0                	sub    %edx,%eax
f011be19:	01 d8                	add    %ebx,%eax
f011be1b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011be20:	39 c1                	cmp    %eax,%ecx
f011be22:	74 17                	je     f011be3b <test_kmalloc_bestfit2+0xb23>
f011be24:	83 ec 04             	sub    $0x4,%esp
f011be27:	68 14 91 13 f0       	push   $0xf0139114
f011be2c:	68 a5 02 00 00       	push   $0x2a5
f011be31:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011be36:	e8 75 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be3b:	e8 78 84 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011be40:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011be43:	74 17                	je     f011be5c <test_kmalloc_bestfit2+0xb44>
f011be45:	83 ec 04             	sub    $0x4,%esp
f011be48:	68 14 8d 13 f0       	push   $0xf0138d14
f011be4d:	68 a6 02 00 00       	push   $0x2a6
f011be52:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011be57:	e8 54 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011be5c:	e8 b1 07 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011be61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011be64:	29 c2                	sub    %eax,%edx
f011be66:	89 d0                	mov    %edx,%eax
f011be68:	3d 00 02 00 00       	cmp    $0x200,%eax
f011be6d:	74 17                	je     f011be86 <test_kmalloc_bestfit2+0xb6e>
f011be6f:	83 ec 04             	sub    $0x4,%esp
f011be72:	68 32 92 13 f0       	push   $0xf0139232
f011be77:	68 a7 02 00 00       	push   $0x2a7
f011be7c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011be81:	e8 2a 43 fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011be86:	e8 87 07 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011be8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be8e:	e8 25 84 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011be93:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011be96:	83 ec 0c             	sub    $0xc,%esp
f011be99:	68 00 18 00 00       	push   $0x1800
f011be9e:	e8 f0 bc fe ff       	call   f0107b93 <kmalloc>
f011bea3:	83 c4 10             	add    $0x10,%esp
f011bea6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011beac:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011beb2:	89 c1                	mov    %eax,%ecx
f011beb4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bebb:	10 00 00 
f011bebe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011bec3:	0f b6 d0             	movzbl %al,%edx
f011bec6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011becc:	01 d0                	add    %edx,%eax
f011bece:	48                   	dec    %eax
f011becf:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bed5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bedb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bee0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bee6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011beec:	29 d0                	sub    %edx,%eax
f011beee:	89 c3                	mov    %eax,%ebx
f011bef0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bef7:	10 00 00 
f011befa:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011beff:	0f b6 c0             	movzbl %al,%eax
f011bf02:	c1 e0 04             	shl    $0x4,%eax
f011bf05:	89 c2                	mov    %eax,%edx
f011bf07:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bf0d:	01 d0                	add    %edx,%eax
f011bf0f:	48                   	dec    %eax
f011bf10:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bf16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf21:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bf27:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bf2d:	29 d0                	sub    %edx,%eax
f011bf2f:	01 d8                	add    %ebx,%eax
f011bf31:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011bf36:	39 c1                	cmp    %eax,%ecx
f011bf38:	74 17                	je     f011bf51 <test_kmalloc_bestfit2+0xc39>
f011bf3a:	83 ec 04             	sub    $0x4,%esp
f011bf3d:	68 14 91 13 f0       	push   $0xf0139114
f011bf42:	68 ad 02 00 00       	push   $0x2ad
f011bf47:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bf4c:	e8 5f 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf51:	e8 62 83 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bf56:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf59:	74 17                	je     f011bf72 <test_kmalloc_bestfit2+0xc5a>
f011bf5b:	83 ec 04             	sub    $0x4,%esp
f011bf5e:	68 14 8d 13 f0       	push   $0xf0138d14
f011bf63:	68 ae 02 00 00       	push   $0x2ae
f011bf68:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bf6d:	e8 3e 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bf72:	e8 9b 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bf77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bf7a:	29 c2                	sub    %eax,%edx
f011bf7c:	89 d0                	mov    %edx,%eax
f011bf7e:	83 f8 02             	cmp    $0x2,%eax
f011bf81:	74 17                	je     f011bf9a <test_kmalloc_bestfit2+0xc82>
f011bf83:	83 ec 04             	sub    $0x4,%esp
f011bf86:	68 32 92 13 f0       	push   $0xf0139232
f011bf8b:	68 af 02 00 00       	push   $0x2af
f011bf90:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bf95:	e8 16 42 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bf9a:	e8 73 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bf9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfa2:	e8 11 83 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bfa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011bfaa:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bfb0:	83 ec 0c             	sub    $0xc,%esp
f011bfb3:	50                   	push   %eax
f011bfb4:	e8 f4 bb fe ff       	call   f0107bad <kfree>
f011bfb9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfbc:	e8 f7 82 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011bfc1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bfc4:	74 17                	je     f011bfdd <test_kmalloc_bestfit2+0xcc5>
f011bfc6:	83 ec 04             	sub    $0x4,%esp
f011bfc9:	68 14 8d 13 f0       	push   $0xf0138d14
f011bfce:	68 b5 02 00 00       	push   $0x2b5
f011bfd3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bfd8:	e8 d3 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bfdd:	e8 30 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011bfe2:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bfe5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bfea:	74 17                	je     f011c003 <test_kmalloc_bestfit2+0xceb>
f011bfec:	83 ec 04             	sub    $0x4,%esp
f011bfef:	68 f4 91 13 f0       	push   $0xf01391f4
f011bff4:	68 b6 02 00 00       	push   $0x2b6
f011bff9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011bffe:	e8 ad 41 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c003:	e8 0a 06 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c008:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c00b:	e8 a8 82 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c010:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c013:	83 ec 0c             	sub    $0xc,%esp
f011c016:	68 00 fc 2f 00       	push   $0x2ffc00
f011c01b:	e8 73 bb fe ff       	call   f0107b93 <kmalloc>
f011c020:	83 c4 10             	add    $0x10,%esp
f011c023:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c029:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c02f:	89 c1                	mov    %eax,%ecx
f011c031:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c038:	10 00 00 
f011c03b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c040:	0f b6 d0             	movzbl %al,%edx
f011c043:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c049:	01 d0                	add    %edx,%eax
f011c04b:	48                   	dec    %eax
f011c04c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c052:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c058:	ba 00 00 00 00       	mov    $0x0,%edx
f011c05d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c063:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c069:	29 d0                	sub    %edx,%eax
f011c06b:	89 c3                	mov    %eax,%ebx
f011c06d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c074:	10 00 00 
f011c077:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c07c:	0f b6 c0             	movzbl %al,%eax
f011c07f:	c1 e0 04             	shl    $0x4,%eax
f011c082:	89 c2                	mov    %eax,%edx
f011c084:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c08a:	01 d0                	add    %edx,%eax
f011c08c:	48                   	dec    %eax
f011c08d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c093:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c099:	ba 00 00 00 00       	mov    $0x0,%edx
f011c09e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c0a4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c0aa:	29 d0                	sub    %edx,%eax
f011c0ac:	01 d8                	add    %ebx,%eax
f011c0ae:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c0b3:	39 c1                	cmp    %eax,%ecx
f011c0b5:	74 17                	je     f011c0ce <test_kmalloc_bestfit2+0xdb6>
f011c0b7:	83 ec 04             	sub    $0x4,%esp
f011c0ba:	68 14 91 13 f0       	push   $0xf0139114
f011c0bf:	68 bc 02 00 00       	push   $0x2bc
f011c0c4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c0c9:	e8 e2 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0ce:	e8 e5 81 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c0d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c0d6:	74 17                	je     f011c0ef <test_kmalloc_bestfit2+0xdd7>
f011c0d8:	83 ec 04             	sub    $0x4,%esp
f011c0db:	68 14 8d 13 f0       	push   $0xf0138d14
f011c0e0:	68 bd 02 00 00       	push   $0x2bd
f011c0e5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c0ea:	e8 c1 40 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0ef:	e8 1e 05 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c0f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c0f7:	29 c2                	sub    %eax,%edx
f011c0f9:	89 d0                	mov    %edx,%eax
f011c0fb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c100:	74 17                	je     f011c119 <test_kmalloc_bestfit2+0xe01>
f011c102:	83 ec 04             	sub    $0x4,%esp
f011c105:	68 f4 91 13 f0       	push   $0xf01391f4
f011c10a:	68 be 02 00 00       	push   $0x2be
f011c10f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c114:	e8 97 40 fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c119:	e8 f4 04 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c11e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c121:	e8 92 81 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c126:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c129:	83 ec 0c             	sub    $0xc,%esp
f011c12c:	68 00 fc 3f 00       	push   $0x3ffc00
f011c131:	e8 5d ba fe ff       	call   f0107b93 <kmalloc>
f011c136:	83 c4 10             	add    $0x10,%esp
f011c139:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c13f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c145:	89 c1                	mov    %eax,%ecx
f011c147:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c14e:	10 00 00 
f011c151:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c156:	0f b6 d0             	movzbl %al,%edx
f011c159:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c15f:	01 d0                	add    %edx,%eax
f011c161:	48                   	dec    %eax
f011c162:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c168:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c16e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c173:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c179:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c17f:	29 d0                	sub    %edx,%eax
f011c181:	89 c3                	mov    %eax,%ebx
f011c183:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c18a:	10 00 00 
f011c18d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c192:	0f b6 c0             	movzbl %al,%eax
f011c195:	c1 e0 04             	shl    $0x4,%eax
f011c198:	89 c2                	mov    %eax,%edx
f011c19a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c1a0:	01 d0                	add    %edx,%eax
f011c1a2:	48                   	dec    %eax
f011c1a3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c1a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c1af:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1b4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c1ba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c1c0:	29 d0                	sub    %edx,%eax
f011c1c2:	01 d8                	add    %ebx,%eax
f011c1c4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c1c9:	39 c1                	cmp    %eax,%ecx
f011c1cb:	74 17                	je     f011c1e4 <test_kmalloc_bestfit2+0xecc>
f011c1cd:	83 ec 04             	sub    $0x4,%esp
f011c1d0:	68 14 91 13 f0       	push   $0xf0139114
f011c1d5:	68 c4 02 00 00       	push   $0x2c4
f011c1da:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c1df:	e8 cc 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1e4:	e8 cf 80 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c1e9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1ec:	74 17                	je     f011c205 <test_kmalloc_bestfit2+0xeed>
f011c1ee:	83 ec 04             	sub    $0x4,%esp
f011c1f1:	68 14 8d 13 f0       	push   $0xf0138d14
f011c1f6:	68 c5 02 00 00       	push   $0x2c5
f011c1fb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c200:	e8 ab 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c205:	e8 08 04 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c20a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c20d:	29 c2                	sub    %eax,%edx
f011c20f:	89 d0                	mov    %edx,%eax
f011c211:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c216:	74 17                	je     f011c22f <test_kmalloc_bestfit2+0xf17>
f011c218:	83 ec 04             	sub    $0x4,%esp
f011c21b:	68 f4 91 13 f0       	push   $0xf01391f4
f011c220:	68 c6 02 00 00       	push   $0x2c6
f011c225:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c22a:	e8 81 3f fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c22f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c236:	10 00 00 
f011c239:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c23e:	0f b6 d0             	movzbl %al,%edx
f011c241:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c247:	01 d0                	add    %edx,%eax
f011c249:	48                   	dec    %eax
f011c24a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c250:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c256:	ba 00 00 00 00       	mov    $0x0,%edx
f011c25b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c261:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c267:	29 d0                	sub    %edx,%eax
f011c269:	89 c1                	mov    %eax,%ecx
f011c26b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c272:	10 00 00 
f011c275:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c27a:	0f b6 c0             	movzbl %al,%eax
f011c27d:	c1 e0 04             	shl    $0x4,%eax
f011c280:	89 c2                	mov    %eax,%edx
f011c282:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c288:	01 d0                	add    %edx,%eax
f011c28a:	48                   	dec    %eax
f011c28b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c291:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c297:	ba 00 00 00 00       	mov    $0x0,%edx
f011c29c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c2a2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2a8:	29 d0                	sub    %edx,%eax
f011c2aa:	01 c8                	add    %ecx,%eax
f011c2ac:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c2b1:	29 c2                	sub    %eax,%edx
f011c2b3:	89 d0                	mov    %edx,%eax
f011c2b5:	83 ec 0c             	sub    $0xc,%esp
f011c2b8:	50                   	push   %eax
f011c2b9:	e8 d5 b8 fe ff       	call   f0107b93 <kmalloc>
f011c2be:	83 c4 10             	add    $0x10,%esp
f011c2c1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c2c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c2cd:	85 c0                	test   %eax,%eax
f011c2cf:	74 17                	je     f011c2e8 <test_kmalloc_bestfit2+0xfd0>
f011c2d1:	83 ec 04             	sub    $0x4,%esp
f011c2d4:	68 44 92 13 f0       	push   $0xf0139244
f011c2d9:	68 ce 02 00 00       	push   $0x2ce
f011c2de:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c2e3:	e8 c8 3e fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c2e8:	83 ec 0c             	sub    $0xc,%esp
f011c2eb:	68 a8 92 13 f0       	push   $0xf01392a8
f011c2f0:	e8 3c 4b fe ff       	call   f0100e31 <cprintf>
f011c2f5:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c2f8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c2fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c300:	5b                   	pop    %ebx
f011c301:	5f                   	pop    %edi
f011c302:	5d                   	pop    %ebp
f011c303:	c3                   	ret    

f011c304 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c304:	55                   	push   %ebp
f011c305:	89 e5                	mov    %esp,%ebp
f011c307:	57                   	push   %edi
f011c308:	53                   	push   %ebx
f011c309:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c30f:	83 ec 0c             	sub    $0xc,%esp
f011c312:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011c317:	e8 15 4b fe ff       	call   f0100e31 <cprintf>
f011c31c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c31f:	83 ec 0c             	sub    $0xc,%esp
f011c322:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011c327:	e8 05 4b fe ff       	call   f0100e31 <cprintf>
f011c32c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c32f:	83 ec 0c             	sub    $0xc,%esp
f011c332:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011c337:	e8 f5 4a fe ff       	call   f0100e31 <cprintf>
f011c33c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c33f:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c345:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c34a:	b8 00 00 00 00       	mov    $0x0,%eax
f011c34f:	89 d7                	mov    %edx,%edi
f011c351:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c353:	e8 ba 02 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c358:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c35b:	e8 58 7f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c360:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c363:	83 ec 0c             	sub    $0xc,%esp
f011c366:	68 00 fc 0f 00       	push   $0xffc00
f011c36b:	e8 23 b8 fe ff       	call   f0107b93 <kmalloc>
f011c370:	83 c4 10             	add    $0x10,%esp
f011c373:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c379:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c37f:	89 c1                	mov    %eax,%ecx
f011c381:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c388:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c38d:	0f b6 d0             	movzbl %al,%edx
f011c390:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c393:	01 d0                	add    %edx,%eax
f011c395:	48                   	dec    %eax
f011c396:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c399:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c39c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3a1:	f7 75 ec             	divl   -0x14(%ebp)
f011c3a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c3a7:	29 d0                	sub    %edx,%eax
f011c3a9:	89 c3                	mov    %eax,%ebx
f011c3ab:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c3b2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c3b7:	0f b6 c0             	movzbl %al,%eax
f011c3ba:	c1 e0 04             	shl    $0x4,%eax
f011c3bd:	89 c2                	mov    %eax,%edx
f011c3bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c3c2:	01 d0                	add    %edx,%eax
f011c3c4:	48                   	dec    %eax
f011c3c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c3c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c3cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3d0:	f7 75 e4             	divl   -0x1c(%ebp)
f011c3d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c3d6:	29 d0                	sub    %edx,%eax
f011c3d8:	01 d8                	add    %ebx,%eax
f011c3da:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c3df:	39 c1                	cmp    %eax,%ecx
f011c3e1:	74 17                	je     f011c3fa <test_kmalloc_firstfit1+0xf6>
f011c3e3:	83 ec 04             	sub    $0x4,%esp
f011c3e6:	68 14 91 13 f0       	push   $0xf0139114
f011c3eb:	68 e6 02 00 00       	push   $0x2e6
f011c3f0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c3f5:	e8 b6 3d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3fa:	e8 b9 7e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c3ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c402:	74 17                	je     f011c41b <test_kmalloc_firstfit1+0x117>
f011c404:	83 ec 04             	sub    $0x4,%esp
f011c407:	68 14 8d 13 f0       	push   $0xf0138d14
f011c40c:	68 e7 02 00 00       	push   $0x2e7
f011c411:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c416:	e8 95 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c41b:	e8 f2 01 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c420:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c423:	29 c2                	sub    %eax,%edx
f011c425:	89 d0                	mov    %edx,%eax
f011c427:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c42c:	74 17                	je     f011c445 <test_kmalloc_firstfit1+0x141>
f011c42e:	83 ec 04             	sub    $0x4,%esp
f011c431:	68 44 91 13 f0       	push   $0xf0139144
f011c436:	68 e8 02 00 00       	push   $0x2e8
f011c43b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c440:	e8 6b 3d fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c445:	e8 c8 01 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c44a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c44d:	e8 66 7e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c452:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c455:	83 ec 0c             	sub    $0xc,%esp
f011c458:	68 00 fc 0f 00       	push   $0xffc00
f011c45d:	e8 31 b7 fe ff       	call   f0107b93 <kmalloc>
f011c462:	83 c4 10             	add    $0x10,%esp
f011c465:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c46b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c471:	89 c1                	mov    %eax,%ecx
f011c473:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c47a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c47f:	0f b6 d0             	movzbl %al,%edx
f011c482:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c485:	01 d0                	add    %edx,%eax
f011c487:	48                   	dec    %eax
f011c488:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c48b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c48e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c493:	f7 75 dc             	divl   -0x24(%ebp)
f011c496:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c499:	29 d0                	sub    %edx,%eax
f011c49b:	89 c3                	mov    %eax,%ebx
f011c49d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c4a4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c4a9:	0f b6 c0             	movzbl %al,%eax
f011c4ac:	c1 e0 04             	shl    $0x4,%eax
f011c4af:	89 c2                	mov    %eax,%edx
f011c4b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c4b4:	01 d0                	add    %edx,%eax
f011c4b6:	48                   	dec    %eax
f011c4b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c4ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c4bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4c2:	f7 75 d4             	divl   -0x2c(%ebp)
f011c4c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c4c8:	29 d0                	sub    %edx,%eax
f011c4ca:	01 d8                	add    %ebx,%eax
f011c4cc:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c4d1:	39 c1                	cmp    %eax,%ecx
f011c4d3:	74 17                	je     f011c4ec <test_kmalloc_firstfit1+0x1e8>
f011c4d5:	83 ec 04             	sub    $0x4,%esp
f011c4d8:	68 14 91 13 f0       	push   $0xf0139114
f011c4dd:	68 ee 02 00 00       	push   $0x2ee
f011c4e2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c4e7:	e8 c4 3c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4ec:	e8 c7 7d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c4f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4f4:	74 17                	je     f011c50d <test_kmalloc_firstfit1+0x209>
f011c4f6:	83 ec 04             	sub    $0x4,%esp
f011c4f9:	68 14 8d 13 f0       	push   $0xf0138d14
f011c4fe:	68 ef 02 00 00       	push   $0x2ef
f011c503:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c508:	e8 a3 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c50d:	e8 00 01 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c512:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c515:	29 c2                	sub    %eax,%edx
f011c517:	89 d0                	mov    %edx,%eax
f011c519:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c51e:	74 17                	je     f011c537 <test_kmalloc_firstfit1+0x233>
f011c520:	83 ec 04             	sub    $0x4,%esp
f011c523:	68 44 91 13 f0       	push   $0xf0139144
f011c528:	68 f0 02 00 00       	push   $0x2f0
f011c52d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c532:	e8 79 3c fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c537:	e8 d6 00 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c53c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c53f:	e8 74 7d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c544:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c547:	83 ec 0c             	sub    $0xc,%esp
f011c54a:	68 00 fc 0f 00       	push   $0xffc00
f011c54f:	e8 3f b6 fe ff       	call   f0107b93 <kmalloc>
f011c554:	83 c4 10             	add    $0x10,%esp
f011c557:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c55d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c563:	89 c1                	mov    %eax,%ecx
f011c565:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c56c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c571:	0f b6 d0             	movzbl %al,%edx
f011c574:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c577:	01 d0                	add    %edx,%eax
f011c579:	48                   	dec    %eax
f011c57a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c57d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c580:	ba 00 00 00 00       	mov    $0x0,%edx
f011c585:	f7 75 cc             	divl   -0x34(%ebp)
f011c588:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c58b:	29 d0                	sub    %edx,%eax
f011c58d:	89 c3                	mov    %eax,%ebx
f011c58f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c596:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c59b:	0f b6 c0             	movzbl %al,%eax
f011c59e:	c1 e0 04             	shl    $0x4,%eax
f011c5a1:	89 c2                	mov    %eax,%edx
f011c5a3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c5a6:	01 d0                	add    %edx,%eax
f011c5a8:	48                   	dec    %eax
f011c5a9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c5ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c5af:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5b4:	f7 75 c4             	divl   -0x3c(%ebp)
f011c5b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c5ba:	29 d0                	sub    %edx,%eax
f011c5bc:	01 d8                	add    %ebx,%eax
f011c5be:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c5c3:	39 c1                	cmp    %eax,%ecx
f011c5c5:	74 17                	je     f011c5de <test_kmalloc_firstfit1+0x2da>
f011c5c7:	83 ec 04             	sub    $0x4,%esp
f011c5ca:	68 14 91 13 f0       	push   $0xf0139114
f011c5cf:	68 f6 02 00 00       	push   $0x2f6
f011c5d4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c5d9:	e8 d2 3b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5de:	e8 d5 7c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c5e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c5e6:	74 17                	je     f011c5ff <test_kmalloc_firstfit1+0x2fb>
f011c5e8:	83 ec 04             	sub    $0x4,%esp
f011c5eb:	68 14 8d 13 f0       	push   $0xf0138d14
f011c5f0:	68 f7 02 00 00       	push   $0x2f7
f011c5f5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c5fa:	e8 b1 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c5ff:	e8 0e 00 ff ff       	call   f010c612 <sys_calculate_free_frames>
f011c604:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c607:	29 c2                	sub    %eax,%edx
f011c609:	89 d0                	mov    %edx,%eax
f011c60b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c610:	74 17                	je     f011c629 <test_kmalloc_firstfit1+0x325>
f011c612:	83 ec 04             	sub    $0x4,%esp
f011c615:	68 44 91 13 f0       	push   $0xf0139144
f011c61a:	68 f8 02 00 00       	push   $0x2f8
f011c61f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c624:	e8 87 3b fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c629:	e8 e4 ff fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c62e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c631:	e8 82 7c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c636:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c639:	83 ec 0c             	sub    $0xc,%esp
f011c63c:	68 00 fc 0f 00       	push   $0xffc00
f011c641:	e8 4d b5 fe ff       	call   f0107b93 <kmalloc>
f011c646:	83 c4 10             	add    $0x10,%esp
f011c649:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c64f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c655:	89 c1                	mov    %eax,%ecx
f011c657:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c65e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c663:	0f b6 d0             	movzbl %al,%edx
f011c666:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c669:	01 d0                	add    %edx,%eax
f011c66b:	48                   	dec    %eax
f011c66c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c66f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c672:	ba 00 00 00 00       	mov    $0x0,%edx
f011c677:	f7 75 bc             	divl   -0x44(%ebp)
f011c67a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c67d:	29 d0                	sub    %edx,%eax
f011c67f:	89 c3                	mov    %eax,%ebx
f011c681:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c688:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c68d:	0f b6 c0             	movzbl %al,%eax
f011c690:	c1 e0 04             	shl    $0x4,%eax
f011c693:	89 c2                	mov    %eax,%edx
f011c695:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c698:	01 d0                	add    %edx,%eax
f011c69a:	48                   	dec    %eax
f011c69b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c69e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6a6:	f7 75 b4             	divl   -0x4c(%ebp)
f011c6a9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c6ac:	29 d0                	sub    %edx,%eax
f011c6ae:	01 d8                	add    %ebx,%eax
f011c6b0:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c6b5:	39 c1                	cmp    %eax,%ecx
f011c6b7:	74 17                	je     f011c6d0 <test_kmalloc_firstfit1+0x3cc>
f011c6b9:	83 ec 04             	sub    $0x4,%esp
f011c6bc:	68 14 91 13 f0       	push   $0xf0139114
f011c6c1:	68 fe 02 00 00       	push   $0x2fe
f011c6c6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c6cb:	e8 e0 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6d0:	e8 e3 7b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c6d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c6d8:	74 17                	je     f011c6f1 <test_kmalloc_firstfit1+0x3ed>
f011c6da:	83 ec 04             	sub    $0x4,%esp
f011c6dd:	68 14 8d 13 f0       	push   $0xf0138d14
f011c6e2:	68 ff 02 00 00       	push   $0x2ff
f011c6e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c6ec:	e8 bf 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c6f1:	e8 1c ff fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c6f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6f9:	29 c2                	sub    %eax,%edx
f011c6fb:	89 d0                	mov    %edx,%eax
f011c6fd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c702:	74 17                	je     f011c71b <test_kmalloc_firstfit1+0x417>
f011c704:	83 ec 04             	sub    $0x4,%esp
f011c707:	68 44 91 13 f0       	push   $0xf0139144
f011c70c:	68 00 03 00 00       	push   $0x300
f011c711:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c716:	e8 95 3a fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c71b:	e8 f2 fe fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c720:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c723:	e8 90 7b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c728:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c72b:	83 ec 0c             	sub    $0xc,%esp
f011c72e:	68 00 fc 1f 00       	push   $0x1ffc00
f011c733:	e8 5b b4 fe ff       	call   f0107b93 <kmalloc>
f011c738:	83 c4 10             	add    $0x10,%esp
f011c73b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c741:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c747:	89 c1                	mov    %eax,%ecx
f011c749:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c750:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c755:	0f b6 d0             	movzbl %al,%edx
f011c758:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c75b:	01 d0                	add    %edx,%eax
f011c75d:	48                   	dec    %eax
f011c75e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c761:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c764:	ba 00 00 00 00       	mov    $0x0,%edx
f011c769:	f7 75 ac             	divl   -0x54(%ebp)
f011c76c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c76f:	29 d0                	sub    %edx,%eax
f011c771:	89 c3                	mov    %eax,%ebx
f011c773:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c77a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c77f:	0f b6 c0             	movzbl %al,%eax
f011c782:	c1 e0 04             	shl    $0x4,%eax
f011c785:	89 c2                	mov    %eax,%edx
f011c787:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c78a:	01 d0                	add    %edx,%eax
f011c78c:	48                   	dec    %eax
f011c78d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c790:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c793:	ba 00 00 00 00       	mov    $0x0,%edx
f011c798:	f7 75 a4             	divl   -0x5c(%ebp)
f011c79b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c79e:	29 d0                	sub    %edx,%eax
f011c7a0:	01 d8                	add    %ebx,%eax
f011c7a2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c7a7:	39 c1                	cmp    %eax,%ecx
f011c7a9:	74 17                	je     f011c7c2 <test_kmalloc_firstfit1+0x4be>
f011c7ab:	83 ec 04             	sub    $0x4,%esp
f011c7ae:	68 14 91 13 f0       	push   $0xf0139114
f011c7b3:	68 06 03 00 00       	push   $0x306
f011c7b8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c7bd:	e8 ee 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7c2:	e8 f1 7a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c7c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7ca:	74 17                	je     f011c7e3 <test_kmalloc_firstfit1+0x4df>
f011c7cc:	83 ec 04             	sub    $0x4,%esp
f011c7cf:	68 14 8d 13 f0       	push   $0xf0138d14
f011c7d4:	68 07 03 00 00       	push   $0x307
f011c7d9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c7de:	e8 cd 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c7e3:	e8 2a fe fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c7e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7eb:	29 c2                	sub    %eax,%edx
f011c7ed:	89 d0                	mov    %edx,%eax
f011c7ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7f4:	74 17                	je     f011c80d <test_kmalloc_firstfit1+0x509>
f011c7f6:	83 ec 04             	sub    $0x4,%esp
f011c7f9:	68 44 91 13 f0       	push   $0xf0139144
f011c7fe:	68 08 03 00 00       	push   $0x308
f011c803:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c808:	e8 a3 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c80d:	e8 00 fe fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c812:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c815:	e8 9e 7a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c81a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c81d:	83 ec 0c             	sub    $0xc,%esp
f011c820:	68 00 fc 1f 00       	push   $0x1ffc00
f011c825:	e8 69 b3 fe ff       	call   f0107b93 <kmalloc>
f011c82a:	83 c4 10             	add    $0x10,%esp
f011c82d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c833:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c839:	89 c1                	mov    %eax,%ecx
f011c83b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c842:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c847:	0f b6 d0             	movzbl %al,%edx
f011c84a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c84d:	01 d0                	add    %edx,%eax
f011c84f:	48                   	dec    %eax
f011c850:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c853:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c856:	ba 00 00 00 00       	mov    $0x0,%edx
f011c85b:	f7 75 9c             	divl   -0x64(%ebp)
f011c85e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c861:	29 d0                	sub    %edx,%eax
f011c863:	89 c3                	mov    %eax,%ebx
f011c865:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c86c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c871:	0f b6 c0             	movzbl %al,%eax
f011c874:	c1 e0 04             	shl    $0x4,%eax
f011c877:	89 c2                	mov    %eax,%edx
f011c879:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c87c:	01 d0                	add    %edx,%eax
f011c87e:	48                   	dec    %eax
f011c87f:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c882:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c885:	ba 00 00 00 00       	mov    $0x0,%edx
f011c88a:	f7 75 94             	divl   -0x6c(%ebp)
f011c88d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c890:	29 d0                	sub    %edx,%eax
f011c892:	01 d8                	add    %ebx,%eax
f011c894:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c899:	39 c1                	cmp    %eax,%ecx
f011c89b:	74 17                	je     f011c8b4 <test_kmalloc_firstfit1+0x5b0>
f011c89d:	83 ec 04             	sub    $0x4,%esp
f011c8a0:	68 14 91 13 f0       	push   $0xf0139114
f011c8a5:	68 0e 03 00 00       	push   $0x30e
f011c8aa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c8af:	e8 fc 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8b4:	e8 ff 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c8b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8bc:	74 17                	je     f011c8d5 <test_kmalloc_firstfit1+0x5d1>
f011c8be:	83 ec 04             	sub    $0x4,%esp
f011c8c1:	68 14 8d 13 f0       	push   $0xf0138d14
f011c8c6:	68 0f 03 00 00       	push   $0x30f
f011c8cb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c8d0:	e8 db 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c8d5:	e8 38 fd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c8da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c8dd:	29 c2                	sub    %eax,%edx
f011c8df:	89 d0                	mov    %edx,%eax
f011c8e1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c8e6:	74 17                	je     f011c8ff <test_kmalloc_firstfit1+0x5fb>
f011c8e8:	83 ec 04             	sub    $0x4,%esp
f011c8eb:	68 44 91 13 f0       	push   $0xf0139144
f011c8f0:	68 10 03 00 00       	push   $0x310
f011c8f5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c8fa:	e8 b1 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8ff:	e8 0e fd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c904:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c907:	e8 ac 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c90c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c90f:	83 ec 0c             	sub    $0xc,%esp
f011c912:	68 00 fc 2f 00       	push   $0x2ffc00
f011c917:	e8 77 b2 fe ff       	call   f0107b93 <kmalloc>
f011c91c:	83 c4 10             	add    $0x10,%esp
f011c91f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c925:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c92b:	89 c1                	mov    %eax,%ecx
f011c92d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c934:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c939:	0f b6 d0             	movzbl %al,%edx
f011c93c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c93f:	01 d0                	add    %edx,%eax
f011c941:	48                   	dec    %eax
f011c942:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c945:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c948:	ba 00 00 00 00       	mov    $0x0,%edx
f011c94d:	f7 75 8c             	divl   -0x74(%ebp)
f011c950:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c953:	29 d0                	sub    %edx,%eax
f011c955:	89 c3                	mov    %eax,%ebx
f011c957:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c95e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011c963:	0f b6 c0             	movzbl %al,%eax
f011c966:	c1 e0 04             	shl    $0x4,%eax
f011c969:	89 c2                	mov    %eax,%edx
f011c96b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c96e:	01 d0                	add    %edx,%eax
f011c970:	48                   	dec    %eax
f011c971:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c974:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c977:	ba 00 00 00 00       	mov    $0x0,%edx
f011c97c:	f7 75 84             	divl   -0x7c(%ebp)
f011c97f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c982:	29 d0                	sub    %edx,%eax
f011c984:	01 d8                	add    %ebx,%eax
f011c986:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c98b:	39 c1                	cmp    %eax,%ecx
f011c98d:	74 17                	je     f011c9a6 <test_kmalloc_firstfit1+0x6a2>
f011c98f:	83 ec 04             	sub    $0x4,%esp
f011c992:	68 14 91 13 f0       	push   $0xf0139114
f011c997:	68 16 03 00 00       	push   $0x316
f011c99c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c9a1:	e8 0a 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9a6:	e8 0d 79 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c9ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9ae:	74 17                	je     f011c9c7 <test_kmalloc_firstfit1+0x6c3>
f011c9b0:	83 ec 04             	sub    $0x4,%esp
f011c9b3:	68 14 8d 13 f0       	push   $0xf0138d14
f011c9b8:	68 17 03 00 00       	push   $0x317
f011c9bd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c9c2:	e8 e9 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c9c7:	e8 46 fc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c9cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c9cf:	29 c2                	sub    %eax,%edx
f011c9d1:	89 d0                	mov    %edx,%eax
f011c9d3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c9d8:	74 17                	je     f011c9f1 <test_kmalloc_firstfit1+0x6ed>
f011c9da:	83 ec 04             	sub    $0x4,%esp
f011c9dd:	68 44 91 13 f0       	push   $0xf0139144
f011c9e2:	68 18 03 00 00       	push   $0x318
f011c9e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011c9ec:	e8 bf 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9f1:	e8 1c fc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011c9f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9f9:	e8 ba 78 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011c9fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011ca01:	83 ec 0c             	sub    $0xc,%esp
f011ca04:	68 00 fc 2f 00       	push   $0x2ffc00
f011ca09:	e8 85 b1 fe ff       	call   f0107b93 <kmalloc>
f011ca0e:	83 c4 10             	add    $0x10,%esp
f011ca11:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ca17:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ca1d:	89 c1                	mov    %eax,%ecx
f011ca1f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ca26:	10 00 00 
f011ca29:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ca2e:	0f b6 d0             	movzbl %al,%edx
f011ca31:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ca37:	01 d0                	add    %edx,%eax
f011ca39:	48                   	dec    %eax
f011ca3a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ca40:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ca46:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca4b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ca51:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ca57:	29 d0                	sub    %edx,%eax
f011ca59:	89 c3                	mov    %eax,%ebx
f011ca5b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ca62:	10 00 00 
f011ca65:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ca6a:	0f b6 c0             	movzbl %al,%eax
f011ca6d:	c1 e0 04             	shl    $0x4,%eax
f011ca70:	89 c2                	mov    %eax,%edx
f011ca72:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ca78:	01 d0                	add    %edx,%eax
f011ca7a:	48                   	dec    %eax
f011ca7b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ca81:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ca87:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca8c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ca92:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ca98:	29 d0                	sub    %edx,%eax
f011ca9a:	01 d8                	add    %ebx,%eax
f011ca9c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011caa1:	39 c1                	cmp    %eax,%ecx
f011caa3:	74 17                	je     f011cabc <test_kmalloc_firstfit1+0x7b8>
f011caa5:	83 ec 04             	sub    $0x4,%esp
f011caa8:	68 14 91 13 f0       	push   $0xf0139114
f011caad:	68 1e 03 00 00       	push   $0x31e
f011cab2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cab7:	e8 f4 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cabc:	e8 f7 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cac1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cac4:	74 17                	je     f011cadd <test_kmalloc_firstfit1+0x7d9>
f011cac6:	83 ec 04             	sub    $0x4,%esp
f011cac9:	68 14 8d 13 f0       	push   $0xf0138d14
f011cace:	68 1f 03 00 00       	push   $0x31f
f011cad3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cad8:	e8 d3 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cadd:	e8 30 fb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cae2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cae5:	29 c2                	sub    %eax,%edx
f011cae7:	89 d0                	mov    %edx,%eax
f011cae9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011caee:	74 17                	je     f011cb07 <test_kmalloc_firstfit1+0x803>
f011caf0:	83 ec 04             	sub    $0x4,%esp
f011caf3:	68 44 91 13 f0       	push   $0xf0139144
f011caf8:	68 20 03 00 00       	push   $0x320
f011cafd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cb02:	e8 a9 36 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb07:	e8 06 fb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb0f:	e8 a4 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb14:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cb17:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cb1d:	83 ec 0c             	sub    $0xc,%esp
f011cb20:	50                   	push   %eax
f011cb21:	e8 87 b0 fe ff       	call   f0107bad <kfree>
f011cb26:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb29:	e8 8a 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb31:	74 17                	je     f011cb4a <test_kmalloc_firstfit1+0x846>
f011cb33:	83 ec 04             	sub    $0x4,%esp
f011cb36:	68 14 8d 13 f0       	push   $0xf0138d14
f011cb3b:	68 29 03 00 00       	push   $0x329
f011cb40:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cb45:	e8 66 36 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cb4a:	e8 c3 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb4f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb52:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb57:	74 17                	je     f011cb70 <test_kmalloc_firstfit1+0x86c>
f011cb59:	83 ec 04             	sub    $0x4,%esp
f011cb5c:	68 57 91 13 f0       	push   $0xf0139157
f011cb61:	68 2a 03 00 00       	push   $0x32a
f011cb66:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cb6b:	e8 40 36 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cb70:	e8 9d fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cb75:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb78:	e8 3b 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cb80:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cb86:	83 ec 0c             	sub    $0xc,%esp
f011cb89:	50                   	push   %eax
f011cb8a:	e8 1e b0 fe ff       	call   f0107bad <kfree>
f011cb8f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb92:	e8 21 77 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cb97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb9a:	74 17                	je     f011cbb3 <test_kmalloc_firstfit1+0x8af>
f011cb9c:	83 ec 04             	sub    $0x4,%esp
f011cb9f:	68 14 8d 13 f0       	push   $0xf0138d14
f011cba4:	68 30 03 00 00       	push   $0x330
f011cba9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cbae:	e8 fd 35 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cbb3:	e8 5a fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cbb8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cbbb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cbc0:	74 17                	je     f011cbd9 <test_kmalloc_firstfit1+0x8d5>
f011cbc2:	83 ec 04             	sub    $0x4,%esp
f011cbc5:	68 57 91 13 f0       	push   $0xf0139157
f011cbca:	68 31 03 00 00       	push   $0x331
f011cbcf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cbd4:	e8 d7 35 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cbd9:	e8 34 fa fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cbde:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbe1:	e8 d2 76 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cbe6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cbe9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cbef:	83 ec 0c             	sub    $0xc,%esp
f011cbf2:	50                   	push   %eax
f011cbf3:	e8 b5 af fe ff       	call   f0107bad <kfree>
f011cbf8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbfb:	e8 b8 76 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cc00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc03:	74 17                	je     f011cc1c <test_kmalloc_firstfit1+0x918>
f011cc05:	83 ec 04             	sub    $0x4,%esp
f011cc08:	68 14 8d 13 f0       	push   $0xf0138d14
f011cc0d:	68 37 03 00 00       	push   $0x337
f011cc12:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cc17:	e8 94 35 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cc1c:	e8 f1 f9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cc21:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cc24:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cc29:	74 17                	je     f011cc42 <test_kmalloc_firstfit1+0x93e>
f011cc2b:	83 ec 04             	sub    $0x4,%esp
f011cc2e:	68 57 91 13 f0       	push   $0xf0139157
f011cc33:	68 38 03 00 00       	push   $0x338
f011cc38:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cc3d:	e8 6e 35 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cc42:	e8 cb f9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cc47:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc4a:	e8 69 76 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cc4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cc52:	83 ec 0c             	sub    $0xc,%esp
f011cc55:	68 00 fc 07 00       	push   $0x7fc00
f011cc5a:	e8 34 af fe ff       	call   f0107b93 <kmalloc>
f011cc5f:	83 c4 10             	add    $0x10,%esp
f011cc62:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cc68:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cc6e:	89 c1                	mov    %eax,%ecx
f011cc70:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cc77:	10 00 00 
f011cc7a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cc7f:	0f b6 d0             	movzbl %al,%edx
f011cc82:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cc88:	01 d0                	add    %edx,%eax
f011cc8a:	48                   	dec    %eax
f011cc8b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cc91:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cc97:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc9c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cca2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cca8:	29 d0                	sub    %edx,%eax
f011ccaa:	89 c3                	mov    %eax,%ebx
f011ccac:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ccb3:	10 00 00 
f011ccb6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ccbb:	0f b6 c0             	movzbl %al,%eax
f011ccbe:	c1 e0 04             	shl    $0x4,%eax
f011ccc1:	89 c2                	mov    %eax,%edx
f011ccc3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ccc9:	01 d0                	add    %edx,%eax
f011cccb:	48                   	dec    %eax
f011cccc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ccd2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ccd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccdd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cce3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cce9:	29 d0                	sub    %edx,%eax
f011cceb:	01 d8                	add    %ebx,%eax
f011cced:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011ccf2:	39 c1                	cmp    %eax,%ecx
f011ccf4:	74 17                	je     f011cd0d <test_kmalloc_firstfit1+0xa09>
f011ccf6:	83 ec 04             	sub    $0x4,%esp
f011ccf9:	68 14 91 13 f0       	push   $0xf0139114
f011ccfe:	68 41 03 00 00       	push   $0x341
f011cd03:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cd08:	e8 a3 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd0d:	e8 a6 75 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cd12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd15:	74 17                	je     f011cd2e <test_kmalloc_firstfit1+0xa2a>
f011cd17:	83 ec 04             	sub    $0x4,%esp
f011cd1a:	68 14 8d 13 f0       	push   $0xf0138d14
f011cd1f:	68 42 03 00 00       	push   $0x342
f011cd24:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cd29:	e8 82 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cd2e:	e8 df f8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cd33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd36:	29 c2                	sub    %eax,%edx
f011cd38:	89 d0                	mov    %edx,%eax
f011cd3a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011cd3f:	74 17                	je     f011cd58 <test_kmalloc_firstfit1+0xa54>
f011cd41:	83 ec 04             	sub    $0x4,%esp
f011cd44:	68 44 91 13 f0       	push   $0xf0139144
f011cd49:	68 43 03 00 00       	push   $0x343
f011cd4e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cd53:	e8 58 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cd58:	e8 b5 f8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cd5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd60:	e8 53 75 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cd65:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cd68:	83 ec 0c             	sub    $0xc,%esp
f011cd6b:	68 00 fc 0f 00       	push   $0xffc00
f011cd70:	e8 1e ae fe ff       	call   f0107b93 <kmalloc>
f011cd75:	83 c4 10             	add    $0x10,%esp
f011cd78:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cd7e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cd84:	89 c1                	mov    %eax,%ecx
f011cd86:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011cd8d:	10 00 00 
f011cd90:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cd95:	0f b6 d0             	movzbl %al,%edx
f011cd98:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011cd9e:	01 d0                	add    %edx,%eax
f011cda0:	48                   	dec    %eax
f011cda1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011cda7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cdad:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdb2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011cdb8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cdbe:	29 d0                	sub    %edx,%eax
f011cdc0:	89 c3                	mov    %eax,%ebx
f011cdc2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011cdc9:	10 00 00 
f011cdcc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cdd1:	0f b6 c0             	movzbl %al,%eax
f011cdd4:	c1 e0 04             	shl    $0x4,%eax
f011cdd7:	89 c2                	mov    %eax,%edx
f011cdd9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cddf:	01 d0                	add    %edx,%eax
f011cde1:	48                   	dec    %eax
f011cde2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cde8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cdee:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdf3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cdf9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cdff:	29 d0                	sub    %edx,%eax
f011ce01:	01 d8                	add    %ebx,%eax
f011ce03:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ce08:	39 c1                	cmp    %eax,%ecx
f011ce0a:	74 17                	je     f011ce23 <test_kmalloc_firstfit1+0xb1f>
f011ce0c:	83 ec 04             	sub    $0x4,%esp
f011ce0f:	68 14 91 13 f0       	push   $0xf0139114
f011ce14:	68 49 03 00 00       	push   $0x349
f011ce19:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ce1e:	e8 8d 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce23:	e8 90 74 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ce28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce2b:	74 17                	je     f011ce44 <test_kmalloc_firstfit1+0xb40>
f011ce2d:	83 ec 04             	sub    $0x4,%esp
f011ce30:	68 14 8d 13 f0       	push   $0xf0138d14
f011ce35:	68 4a 03 00 00       	push   $0x34a
f011ce3a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ce3f:	e8 6c 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ce44:	e8 c9 f7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ce49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce4c:	29 c2                	sub    %eax,%edx
f011ce4e:	89 d0                	mov    %edx,%eax
f011ce50:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce55:	74 17                	je     f011ce6e <test_kmalloc_firstfit1+0xb6a>
f011ce57:	83 ec 04             	sub    $0x4,%esp
f011ce5a:	68 44 91 13 f0       	push   $0xf0139144
f011ce5f:	68 4b 03 00 00       	push   $0x34b
f011ce64:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ce69:	e8 42 33 fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ce6e:	e8 9f f7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ce73:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce76:	e8 3d 74 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ce7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ce7e:	83 ec 0c             	sub    $0xc,%esp
f011ce81:	68 00 fc 03 00       	push   $0x3fc00
f011ce86:	e8 08 ad fe ff       	call   f0107b93 <kmalloc>
f011ce8b:	83 c4 10             	add    $0x10,%esp
f011ce8e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ce94:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ce9a:	89 c1                	mov    %eax,%ecx
f011ce9c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011cea3:	10 00 00 
f011cea6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ceab:	0f b6 d0             	movzbl %al,%edx
f011ceae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ceb4:	01 d0                	add    %edx,%eax
f011ceb6:	48                   	dec    %eax
f011ceb7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011cebd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cec3:	ba 00 00 00 00       	mov    $0x0,%edx
f011cec8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011cece:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ced4:	29 d0                	sub    %edx,%eax
f011ced6:	89 c3                	mov    %eax,%ebx
f011ced8:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011cedf:	10 00 00 
f011cee2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cee7:	0f b6 c0             	movzbl %al,%eax
f011ceea:	c1 e0 04             	shl    $0x4,%eax
f011ceed:	89 c2                	mov    %eax,%edx
f011ceef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011cef5:	01 d0                	add    %edx,%eax
f011cef7:	48                   	dec    %eax
f011cef8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011cefe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cf04:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf09:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011cf0f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cf15:	29 d0                	sub    %edx,%eax
f011cf17:	01 d8                	add    %ebx,%eax
f011cf19:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cf1e:	39 c1                	cmp    %eax,%ecx
f011cf20:	74 17                	je     f011cf39 <test_kmalloc_firstfit1+0xc35>
f011cf22:	83 ec 04             	sub    $0x4,%esp
f011cf25:	68 14 91 13 f0       	push   $0xf0139114
f011cf2a:	68 52 03 00 00       	push   $0x352
f011cf2f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cf34:	e8 77 32 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf39:	e8 7a 73 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cf3e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf41:	74 17                	je     f011cf5a <test_kmalloc_firstfit1+0xc56>
f011cf43:	83 ec 04             	sub    $0x4,%esp
f011cf46:	68 14 8d 13 f0       	push   $0xf0138d14
f011cf4b:	68 53 03 00 00       	push   $0x353
f011cf50:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cf55:	e8 56 32 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011cf5a:	e8 b3 f6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cf5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf62:	29 c2                	sub    %eax,%edx
f011cf64:	89 d0                	mov    %edx,%eax
f011cf66:	83 f8 40             	cmp    $0x40,%eax
f011cf69:	74 17                	je     f011cf82 <test_kmalloc_firstfit1+0xc7e>
f011cf6b:	83 ec 04             	sub    $0x4,%esp
f011cf6e:	68 44 91 13 f0       	push   $0xf0139144
f011cf73:	68 54 03 00 00       	push   $0x354
f011cf78:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011cf7d:	e8 2e 32 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011cf82:	e8 8b f6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011cf87:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf8a:	e8 29 73 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011cf8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011cf92:	83 ec 0c             	sub    $0xc,%esp
f011cf95:	68 00 00 20 00       	push   $0x200000
f011cf9a:	e8 f4 ab fe ff       	call   f0107b93 <kmalloc>
f011cf9f:	83 c4 10             	add    $0x10,%esp
f011cfa2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cfa8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cfae:	89 c1                	mov    %eax,%ecx
f011cfb0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011cfb7:	10 00 00 
f011cfba:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cfbf:	0f b6 d0             	movzbl %al,%edx
f011cfc2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011cfc8:	01 d0                	add    %edx,%eax
f011cfca:	48                   	dec    %eax
f011cfcb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011cfd1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cfd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfdc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011cfe2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cfe8:	29 d0                	sub    %edx,%eax
f011cfea:	89 c3                	mov    %eax,%ebx
f011cfec:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011cff3:	10 00 00 
f011cff6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011cffb:	0f b6 c0             	movzbl %al,%eax
f011cffe:	c1 e0 04             	shl    $0x4,%eax
f011d001:	89 c2                	mov    %eax,%edx
f011d003:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d009:	01 d0                	add    %edx,%eax
f011d00b:	48                   	dec    %eax
f011d00c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d012:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d018:	ba 00 00 00 00       	mov    $0x0,%edx
f011d01d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d023:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d029:	29 d0                	sub    %edx,%eax
f011d02b:	01 d8                	add    %ebx,%eax
f011d02d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d032:	39 c1                	cmp    %eax,%ecx
f011d034:	74 17                	je     f011d04d <test_kmalloc_firstfit1+0xd49>
f011d036:	83 ec 04             	sub    $0x4,%esp
f011d039:	68 14 91 13 f0       	push   $0xf0139114
f011d03e:	68 5a 03 00 00       	push   $0x35a
f011d043:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d048:	e8 63 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d04d:	e8 c0 f5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d052:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d055:	29 c2                	sub    %eax,%edx
f011d057:	89 d0                	mov    %edx,%eax
f011d059:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d05e:	74 17                	je     f011d077 <test_kmalloc_firstfit1+0xd73>
f011d060:	83 ec 04             	sub    $0x4,%esp
f011d063:	68 44 91 13 f0       	push   $0xf0139144
f011d068:	68 5b 03 00 00       	push   $0x35b
f011d06d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d072:	e8 39 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d077:	e8 3c 72 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d07c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d07f:	74 17                	je     f011d098 <test_kmalloc_firstfit1+0xd94>
f011d081:	83 ec 04             	sub    $0x4,%esp
f011d084:	68 14 8d 13 f0       	push   $0xf0138d14
f011d089:	68 5c 03 00 00       	push   $0x35c
f011d08e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d093:	e8 18 31 fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d098:	e8 75 f5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d09d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0a0:	e8 13 72 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d0a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d0a8:	83 ec 0c             	sub    $0xc,%esp
f011d0ab:	68 00 fc 3f 00       	push   $0x3ffc00
f011d0b0:	e8 de aa fe ff       	call   f0107b93 <kmalloc>
f011d0b5:	83 c4 10             	add    $0x10,%esp
f011d0b8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d0be:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d0c4:	89 c1                	mov    %eax,%ecx
f011d0c6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d0cd:	10 00 00 
f011d0d0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d0d5:	0f b6 d0             	movzbl %al,%edx
f011d0d8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d0de:	01 d0                	add    %edx,%eax
f011d0e0:	48                   	dec    %eax
f011d0e1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d0e7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0f2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d0f8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0fe:	29 d0                	sub    %edx,%eax
f011d100:	89 c3                	mov    %eax,%ebx
f011d102:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d109:	10 00 00 
f011d10c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d111:	0f b6 c0             	movzbl %al,%eax
f011d114:	c1 e0 04             	shl    $0x4,%eax
f011d117:	89 c2                	mov    %eax,%edx
f011d119:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d11f:	01 d0                	add    %edx,%eax
f011d121:	48                   	dec    %eax
f011d122:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d128:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d12e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d133:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d139:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d13f:	29 d0                	sub    %edx,%eax
f011d141:	01 d8                	add    %ebx,%eax
f011d143:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d148:	39 c1                	cmp    %eax,%ecx
f011d14a:	74 17                	je     f011d163 <test_kmalloc_firstfit1+0xe5f>
f011d14c:	83 ec 04             	sub    $0x4,%esp
f011d14f:	68 14 91 13 f0       	push   $0xf0139114
f011d154:	68 63 03 00 00       	push   $0x363
f011d159:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d15e:	e8 4d 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d163:	e8 50 71 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d168:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d16b:	74 17                	je     f011d184 <test_kmalloc_firstfit1+0xe80>
f011d16d:	83 ec 04             	sub    $0x4,%esp
f011d170:	68 14 8d 13 f0       	push   $0xf0138d14
f011d175:	68 64 03 00 00       	push   $0x364
f011d17a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d17f:	e8 2c 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d184:	e8 89 f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d189:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d18c:	29 c2                	sub    %eax,%edx
f011d18e:	89 d0                	mov    %edx,%eax
f011d190:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d195:	74 17                	je     f011d1ae <test_kmalloc_firstfit1+0xeaa>
f011d197:	83 ec 04             	sub    $0x4,%esp
f011d19a:	68 44 91 13 f0       	push   $0xf0139144
f011d19f:	68 65 03 00 00       	push   $0x365
f011d1a4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d1a9:	e8 02 30 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d1ae:	e8 5f f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d1b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1b6:	e8 fd 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d1bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d1be:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d1c4:	83 ec 0c             	sub    $0xc,%esp
f011d1c7:	50                   	push   %eax
f011d1c8:	e8 e0 a9 fe ff       	call   f0107bad <kfree>
f011d1cd:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1d0:	e8 e3 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d1d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1d8:	74 17                	je     f011d1f1 <test_kmalloc_firstfit1+0xeed>
f011d1da:	83 ec 04             	sub    $0x4,%esp
f011d1dd:	68 14 8d 13 f0       	push   $0xf0138d14
f011d1e2:	68 6e 03 00 00       	push   $0x36e
f011d1e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d1ec:	e8 bf 2f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d1f1:	e8 1c f4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d1f6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d1f9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1fe:	74 17                	je     f011d217 <test_kmalloc_firstfit1+0xf13>
f011d200:	83 ec 04             	sub    $0x4,%esp
f011d203:	68 57 91 13 f0       	push   $0xf0139157
f011d208:	68 6f 03 00 00       	push   $0x36f
f011d20d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d212:	e8 99 2f fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d217:	e8 f6 f3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d21c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d21f:	e8 94 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d224:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d227:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d22d:	83 ec 0c             	sub    $0xc,%esp
f011d230:	50                   	push   %eax
f011d231:	e8 77 a9 fe ff       	call   f0107bad <kfree>
f011d236:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d239:	e8 7a 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d23e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d241:	74 17                	je     f011d25a <test_kmalloc_firstfit1+0xf56>
f011d243:	83 ec 04             	sub    $0x4,%esp
f011d246:	68 14 8d 13 f0       	push   $0xf0138d14
f011d24b:	68 75 03 00 00       	push   $0x375
f011d250:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d255:	e8 56 2f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d25a:	e8 b3 f3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d25f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d262:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d267:	74 17                	je     f011d280 <test_kmalloc_firstfit1+0xf7c>
f011d269:	83 ec 04             	sub    $0x4,%esp
f011d26c:	68 57 91 13 f0       	push   $0xf0139157
f011d271:	68 76 03 00 00       	push   $0x376
f011d276:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d27b:	e8 30 2f fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d280:	e8 8d f3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d285:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d288:	e8 2b 70 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d28d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d290:	83 ec 0c             	sub    $0xc,%esp
f011d293:	68 00 00 10 00       	push   $0x100000
f011d298:	e8 f6 a8 fe ff       	call   f0107b93 <kmalloc>
f011d29d:	83 c4 10             	add    $0x10,%esp
f011d2a0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d2a6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d2ac:	89 c1                	mov    %eax,%ecx
f011d2ae:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d2b5:	10 00 00 
f011d2b8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d2bd:	0f b6 d0             	movzbl %al,%edx
f011d2c0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d2c6:	01 d0                	add    %edx,%eax
f011d2c8:	48                   	dec    %eax
f011d2c9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d2cf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d2d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2da:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d2e0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d2e6:	29 d0                	sub    %edx,%eax
f011d2e8:	89 c3                	mov    %eax,%ebx
f011d2ea:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d2f1:	10 00 00 
f011d2f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d2f9:	0f b6 c0             	movzbl %al,%eax
f011d2fc:	c1 e0 04             	shl    $0x4,%eax
f011d2ff:	89 c2                	mov    %eax,%edx
f011d301:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d307:	01 d0                	add    %edx,%eax
f011d309:	48                   	dec    %eax
f011d30a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d310:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d316:	ba 00 00 00 00       	mov    $0x0,%edx
f011d31b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d321:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d327:	29 d0                	sub    %edx,%eax
f011d329:	01 d8                	add    %ebx,%eax
f011d32b:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d330:	39 c1                	cmp    %eax,%ecx
f011d332:	74 17                	je     f011d34b <test_kmalloc_firstfit1+0x1047>
f011d334:	83 ec 04             	sub    $0x4,%esp
f011d337:	68 14 91 13 f0       	push   $0xf0139114
f011d33c:	68 80 03 00 00       	push   $0x380
f011d341:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d346:	e8 65 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d34b:	e8 68 6f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d350:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d353:	74 17                	je     f011d36c <test_kmalloc_firstfit1+0x1068>
f011d355:	83 ec 04             	sub    $0x4,%esp
f011d358:	68 14 8d 13 f0       	push   $0xf0138d14
f011d35d:	68 81 03 00 00       	push   $0x381
f011d362:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d367:	e8 44 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d36c:	e8 a1 f2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d371:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d374:	29 c2                	sub    %eax,%edx
f011d376:	89 d0                	mov    %edx,%eax
f011d378:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d37d:	74 17                	je     f011d396 <test_kmalloc_firstfit1+0x1092>
f011d37f:	83 ec 04             	sub    $0x4,%esp
f011d382:	68 44 91 13 f0       	push   $0xf0139144
f011d387:	68 82 03 00 00       	push   $0x382
f011d38c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d391:	e8 1a 2e fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d396:	83 ec 0c             	sub    $0xc,%esp
f011d399:	68 f0 92 13 f0       	push   $0xf01392f0
f011d39e:	e8 8e 3a fe ff       	call   f0100e31 <cprintf>
f011d3a3:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d3a6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d3ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d3ae:	5b                   	pop    %ebx
f011d3af:	5f                   	pop    %edi
f011d3b0:	5d                   	pop    %ebp
f011d3b1:	c3                   	ret    

f011d3b2 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d3b2:	55                   	push   %ebp
f011d3b3:	89 e5                	mov    %esp,%ebp
f011d3b5:	57                   	push   %edi
f011d3b6:	53                   	push   %ebx
f011d3b7:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d3bd:	83 ec 0c             	sub    $0xc,%esp
f011d3c0:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011d3c5:	e8 67 3a fe ff       	call   f0100e31 <cprintf>
f011d3ca:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d3cd:	83 ec 0c             	sub    $0xc,%esp
f011d3d0:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011d3d5:	e8 57 3a fe ff       	call   f0100e31 <cprintf>
f011d3da:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d3dd:	83 ec 0c             	sub    $0xc,%esp
f011d3e0:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011d3e5:	e8 47 3a fe ff       	call   f0100e31 <cprintf>
f011d3ea:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d3ed:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d3f3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d3f8:	b8 00 00 00 00       	mov    $0x0,%eax
f011d3fd:	89 d7                	mov    %edx,%edi
f011d3ff:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d401:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d408:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d40d:	0f b6 d0             	movzbl %al,%edx
f011d410:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d413:	01 d0                	add    %edx,%eax
f011d415:	48                   	dec    %eax
f011d416:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d419:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d41c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d421:	f7 75 f4             	divl   -0xc(%ebp)
f011d424:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d427:	29 d0                	sub    %edx,%eax
f011d429:	89 c1                	mov    %eax,%ecx
f011d42b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d432:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d437:	0f b6 c0             	movzbl %al,%eax
f011d43a:	c1 e0 04             	shl    $0x4,%eax
f011d43d:	89 c2                	mov    %eax,%edx
f011d43f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d442:	01 d0                	add    %edx,%eax
f011d444:	48                   	dec    %eax
f011d445:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d448:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d44b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d450:	f7 75 ec             	divl   -0x14(%ebp)
f011d453:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d456:	29 d0                	sub    %edx,%eax
f011d458:	01 c8                	add    %ecx,%eax
f011d45a:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d45f:	29 c2                	sub    %eax,%edx
f011d461:	89 d0                	mov    %edx,%eax
f011d463:	83 ec 0c             	sub    $0xc,%esp
f011d466:	50                   	push   %eax
f011d467:	e8 27 a7 fe ff       	call   f0107b93 <kmalloc>
f011d46c:	83 c4 10             	add    $0x10,%esp
f011d46f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d475:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d47b:	85 c0                	test   %eax,%eax
f011d47d:	74 17                	je     f011d496 <test_kmalloc_firstfit2+0xe4>
f011d47f:	83 ec 04             	sub    $0x4,%esp
f011d482:	68 3c 93 13 f0       	push   $0xf013933c
f011d487:	68 97 03 00 00       	push   $0x397
f011d48c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d491:	e8 1a 2d fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d496:	e8 77 f1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d49b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d49e:	e8 15 6e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d4a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d4a6:	83 ec 0c             	sub    $0xc,%esp
f011d4a9:	68 00 fc 1f 00       	push   $0x1ffc00
f011d4ae:	e8 e0 a6 fe ff       	call   f0107b93 <kmalloc>
f011d4b3:	83 c4 10             	add    $0x10,%esp
f011d4b6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d4bc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d4c2:	89 c1                	mov    %eax,%ecx
f011d4c4:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d4cb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d4d0:	0f b6 d0             	movzbl %al,%edx
f011d4d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d4d6:	01 d0                	add    %edx,%eax
f011d4d8:	48                   	dec    %eax
f011d4d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d4dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d4df:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4e4:	f7 75 dc             	divl   -0x24(%ebp)
f011d4e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d4ea:	29 d0                	sub    %edx,%eax
f011d4ec:	89 c3                	mov    %eax,%ebx
f011d4ee:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d4f5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d4fa:	0f b6 c0             	movzbl %al,%eax
f011d4fd:	c1 e0 04             	shl    $0x4,%eax
f011d500:	89 c2                	mov    %eax,%edx
f011d502:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d505:	01 d0                	add    %edx,%eax
f011d507:	48                   	dec    %eax
f011d508:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d50b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d50e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d513:	f7 75 d4             	divl   -0x2c(%ebp)
f011d516:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d519:	29 d0                	sub    %edx,%eax
f011d51b:	01 d8                	add    %ebx,%eax
f011d51d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d522:	39 c1                	cmp    %eax,%ecx
f011d524:	74 17                	je     f011d53d <test_kmalloc_firstfit2+0x18b>
f011d526:	83 ec 04             	sub    $0x4,%esp
f011d529:	68 14 91 13 f0       	push   $0xf0139114
f011d52e:	68 a1 03 00 00       	push   $0x3a1
f011d533:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d538:	e8 73 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d53d:	e8 76 6d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d542:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d545:	74 17                	je     f011d55e <test_kmalloc_firstfit2+0x1ac>
f011d547:	83 ec 04             	sub    $0x4,%esp
f011d54a:	68 14 8d 13 f0       	push   $0xf0138d14
f011d54f:	68 a2 03 00 00       	push   $0x3a2
f011d554:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d559:	e8 52 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d55e:	e8 af f0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d563:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d566:	29 c2                	sub    %eax,%edx
f011d568:	89 d0                	mov    %edx,%eax
f011d56a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d56f:	74 17                	je     f011d588 <test_kmalloc_firstfit2+0x1d6>
f011d571:	83 ec 04             	sub    $0x4,%esp
f011d574:	68 44 91 13 f0       	push   $0xf0139144
f011d579:	68 a3 03 00 00       	push   $0x3a3
f011d57e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d583:	e8 28 2c fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d588:	e8 85 f0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d58d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d590:	e8 23 6d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d595:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d598:	83 ec 0c             	sub    $0xc,%esp
f011d59b:	68 00 fc 1f 00       	push   $0x1ffc00
f011d5a0:	e8 ee a5 fe ff       	call   f0107b93 <kmalloc>
f011d5a5:	83 c4 10             	add    $0x10,%esp
f011d5a8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d5ae:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d5b4:	89 c1                	mov    %eax,%ecx
f011d5b6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d5bd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d5c2:	0f b6 d0             	movzbl %al,%edx
f011d5c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d5c8:	01 d0                	add    %edx,%eax
f011d5ca:	48                   	dec    %eax
f011d5cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d5ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d5d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5d6:	f7 75 cc             	divl   -0x34(%ebp)
f011d5d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d5dc:	29 d0                	sub    %edx,%eax
f011d5de:	89 c3                	mov    %eax,%ebx
f011d5e0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d5e7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d5ec:	0f b6 c0             	movzbl %al,%eax
f011d5ef:	c1 e0 04             	shl    $0x4,%eax
f011d5f2:	89 c2                	mov    %eax,%edx
f011d5f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d5f7:	01 d0                	add    %edx,%eax
f011d5f9:	48                   	dec    %eax
f011d5fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d5fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d600:	ba 00 00 00 00       	mov    $0x0,%edx
f011d605:	f7 75 c4             	divl   -0x3c(%ebp)
f011d608:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d60b:	29 d0                	sub    %edx,%eax
f011d60d:	01 d8                	add    %ebx,%eax
f011d60f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d614:	39 c1                	cmp    %eax,%ecx
f011d616:	74 17                	je     f011d62f <test_kmalloc_firstfit2+0x27d>
f011d618:	83 ec 04             	sub    $0x4,%esp
f011d61b:	68 14 91 13 f0       	push   $0xf0139114
f011d620:	68 a9 03 00 00       	push   $0x3a9
f011d625:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d62a:	e8 81 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d62f:	e8 84 6c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d634:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d637:	74 17                	je     f011d650 <test_kmalloc_firstfit2+0x29e>
f011d639:	83 ec 04             	sub    $0x4,%esp
f011d63c:	68 14 8d 13 f0       	push   $0xf0138d14
f011d641:	68 aa 03 00 00       	push   $0x3aa
f011d646:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d64b:	e8 60 2b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d650:	e8 bd ef fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d655:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d658:	29 c2                	sub    %eax,%edx
f011d65a:	89 d0                	mov    %edx,%eax
f011d65c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d661:	74 17                	je     f011d67a <test_kmalloc_firstfit2+0x2c8>
f011d663:	83 ec 04             	sub    $0x4,%esp
f011d666:	68 44 91 13 f0       	push   $0xf0139144
f011d66b:	68 ab 03 00 00       	push   $0x3ab
f011d670:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d675:	e8 36 2b fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d67a:	e8 93 ef fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d67f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d682:	e8 31 6c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d687:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d68a:	83 ec 0c             	sub    $0xc,%esp
f011d68d:	68 00 08 00 00       	push   $0x800
f011d692:	e8 fc a4 fe ff       	call   f0107b93 <kmalloc>
f011d697:	83 c4 10             	add    $0x10,%esp
f011d69a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d6a0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d6a6:	89 c1                	mov    %eax,%ecx
f011d6a8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d6af:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d6b4:	0f b6 d0             	movzbl %al,%edx
f011d6b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d6ba:	01 d0                	add    %edx,%eax
f011d6bc:	48                   	dec    %eax
f011d6bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d6c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6c8:	f7 75 bc             	divl   -0x44(%ebp)
f011d6cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d6ce:	29 d0                	sub    %edx,%eax
f011d6d0:	89 c3                	mov    %eax,%ebx
f011d6d2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d6d9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d6de:	0f b6 c0             	movzbl %al,%eax
f011d6e1:	c1 e0 04             	shl    $0x4,%eax
f011d6e4:	89 c2                	mov    %eax,%edx
f011d6e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d6e9:	01 d0                	add    %edx,%eax
f011d6eb:	48                   	dec    %eax
f011d6ec:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d6ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d6f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6f7:	f7 75 b4             	divl   -0x4c(%ebp)
f011d6fa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d6fd:	29 d0                	sub    %edx,%eax
f011d6ff:	01 d8                	add    %ebx,%eax
f011d701:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d706:	39 c1                	cmp    %eax,%ecx
f011d708:	73 17                	jae    f011d721 <test_kmalloc_firstfit2+0x36f>
f011d70a:	83 ec 04             	sub    $0x4,%esp
f011d70d:	68 14 91 13 f0       	push   $0xf0139114
f011d712:	68 b1 03 00 00       	push   $0x3b1
f011d717:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d71c:	e8 8f 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d721:	e8 92 6b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d726:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d729:	74 17                	je     f011d742 <test_kmalloc_firstfit2+0x390>
f011d72b:	83 ec 04             	sub    $0x4,%esp
f011d72e:	68 14 8d 13 f0       	push   $0xf0138d14
f011d733:	68 b2 03 00 00       	push   $0x3b2
f011d738:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d73d:	e8 6e 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d742:	e8 cb ee fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d747:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d74a:	29 c2                	sub    %eax,%edx
f011d74c:	89 d0                	mov    %edx,%eax
f011d74e:	83 f8 01             	cmp    $0x1,%eax
f011d751:	74 17                	je     f011d76a <test_kmalloc_firstfit2+0x3b8>
f011d753:	83 ec 04             	sub    $0x4,%esp
f011d756:	68 44 91 13 f0       	push   $0xf0139144
f011d75b:	68 b3 03 00 00       	push   $0x3b3
f011d760:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d765:	e8 46 2a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d76a:	e8 a3 ee fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d76f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d772:	e8 41 6b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d777:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d77a:	83 ec 0c             	sub    $0xc,%esp
f011d77d:	68 00 08 00 00       	push   $0x800
f011d782:	e8 0c a4 fe ff       	call   f0107b93 <kmalloc>
f011d787:	83 c4 10             	add    $0x10,%esp
f011d78a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d790:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d796:	89 c1                	mov    %eax,%ecx
f011d798:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d79f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d7a4:	0f b6 d0             	movzbl %al,%edx
f011d7a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d7aa:	01 d0                	add    %edx,%eax
f011d7ac:	48                   	dec    %eax
f011d7ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d7b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d7b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7b8:	f7 75 ac             	divl   -0x54(%ebp)
f011d7bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d7be:	29 d0                	sub    %edx,%eax
f011d7c0:	89 c3                	mov    %eax,%ebx
f011d7c2:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d7c9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d7ce:	0f b6 c0             	movzbl %al,%eax
f011d7d1:	c1 e0 04             	shl    $0x4,%eax
f011d7d4:	89 c2                	mov    %eax,%edx
f011d7d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d7d9:	01 d0                	add    %edx,%eax
f011d7db:	48                   	dec    %eax
f011d7dc:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d7df:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d7e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7e7:	f7 75 a4             	divl   -0x5c(%ebp)
f011d7ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d7ed:	29 d0                	sub    %edx,%eax
f011d7ef:	01 d8                	add    %ebx,%eax
f011d7f1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d7f6:	39 c1                	cmp    %eax,%ecx
f011d7f8:	74 17                	je     f011d811 <test_kmalloc_firstfit2+0x45f>
f011d7fa:	83 ec 04             	sub    $0x4,%esp
f011d7fd:	68 14 91 13 f0       	push   $0xf0139114
f011d802:	68 b9 03 00 00       	push   $0x3b9
f011d807:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d80c:	e8 9f 29 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d811:	e8 a2 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d816:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d819:	74 17                	je     f011d832 <test_kmalloc_firstfit2+0x480>
f011d81b:	83 ec 04             	sub    $0x4,%esp
f011d81e:	68 14 8d 13 f0       	push   $0xf0138d14
f011d823:	68 ba 03 00 00       	push   $0x3ba
f011d828:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d82d:	e8 7e 29 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d832:	e8 db ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d837:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d83a:	29 c2                	sub    %eax,%edx
f011d83c:	89 d0                	mov    %edx,%eax
f011d83e:	83 f8 01             	cmp    $0x1,%eax
f011d841:	74 17                	je     f011d85a <test_kmalloc_firstfit2+0x4a8>
f011d843:	83 ec 04             	sub    $0x4,%esp
f011d846:	68 44 91 13 f0       	push   $0xf0139144
f011d84b:	68 bb 03 00 00       	push   $0x3bb
f011d850:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d855:	e8 56 29 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d85a:	e8 b3 ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d85f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d862:	e8 51 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d867:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011d86a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d870:	83 ec 0c             	sub    $0xc,%esp
f011d873:	50                   	push   %eax
f011d874:	e8 34 a3 fe ff       	call   f0107bad <kfree>
f011d879:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d87c:	e8 37 6a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d881:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d884:	74 17                	je     f011d89d <test_kmalloc_firstfit2+0x4eb>
f011d886:	83 ec 04             	sub    $0x4,%esp
f011d889:	68 14 8d 13 f0       	push   $0xf0138d14
f011d88e:	68 c1 03 00 00       	push   $0x3c1
f011d893:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d898:	e8 13 29 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d89d:	e8 70 ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d8a2:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011d8a5:	83 f8 01             	cmp    $0x1,%eax
f011d8a8:	74 17                	je     f011d8c1 <test_kmalloc_firstfit2+0x50f>
f011d8aa:	83 ec 04             	sub    $0x4,%esp
f011d8ad:	68 57 91 13 f0       	push   $0xf0139157
f011d8b2:	68 c2 03 00 00       	push   $0x3c2
f011d8b7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d8bc:	e8 ef 28 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d8c1:	e8 4c ed fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d8c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8c9:	e8 ea 69 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d8ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d8d1:	83 ec 0c             	sub    $0xc,%esp
f011d8d4:	68 00 1c 00 00       	push   $0x1c00
f011d8d9:	e8 b5 a2 fe ff       	call   f0107b93 <kmalloc>
f011d8de:	83 c4 10             	add    $0x10,%esp
f011d8e1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d8e7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d8ed:	89 c1                	mov    %eax,%ecx
f011d8ef:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d8f6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d8fb:	0f b6 d0             	movzbl %al,%edx
f011d8fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d901:	01 d0                	add    %edx,%eax
f011d903:	48                   	dec    %eax
f011d904:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d907:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d90a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d90f:	f7 75 9c             	divl   -0x64(%ebp)
f011d912:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d915:	29 d0                	sub    %edx,%eax
f011d917:	89 c3                	mov    %eax,%ebx
f011d919:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d920:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011d925:	0f b6 c0             	movzbl %al,%eax
f011d928:	c1 e0 04             	shl    $0x4,%eax
f011d92b:	89 c2                	mov    %eax,%edx
f011d92d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d930:	01 d0                	add    %edx,%eax
f011d932:	48                   	dec    %eax
f011d933:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d936:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d939:	ba 00 00 00 00       	mov    $0x0,%edx
f011d93e:	f7 75 94             	divl   -0x6c(%ebp)
f011d941:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d944:	29 d0                	sub    %edx,%eax
f011d946:	01 d8                	add    %ebx,%eax
f011d948:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d94d:	39 c1                	cmp    %eax,%ecx
f011d94f:	74 17                	je     f011d968 <test_kmalloc_firstfit2+0x5b6>
f011d951:	83 ec 04             	sub    $0x4,%esp
f011d954:	68 14 91 13 f0       	push   $0xf0139114
f011d959:	68 c8 03 00 00       	push   $0x3c8
f011d95e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d963:	e8 48 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d968:	e8 4b 69 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d96d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d970:	74 17                	je     f011d989 <test_kmalloc_firstfit2+0x5d7>
f011d972:	83 ec 04             	sub    $0x4,%esp
f011d975:	68 14 8d 13 f0       	push   $0xf0138d14
f011d97a:	68 c9 03 00 00       	push   $0x3c9
f011d97f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d984:	e8 27 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d989:	e8 84 ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d98e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d991:	29 c2                	sub    %eax,%edx
f011d993:	89 d0                	mov    %edx,%eax
f011d995:	83 f8 02             	cmp    $0x2,%eax
f011d998:	74 17                	je     f011d9b1 <test_kmalloc_firstfit2+0x5ff>
f011d99a:	83 ec 04             	sub    $0x4,%esp
f011d99d:	68 44 91 13 f0       	push   $0xf0139144
f011d9a2:	68 ca 03 00 00       	push   $0x3ca
f011d9a7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d9ac:	e8 ff 27 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d9b1:	e8 5c ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d9b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9b9:	e8 fa 68 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d9be:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011d9c1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d9c7:	83 ec 0c             	sub    $0xc,%esp
f011d9ca:	50                   	push   %eax
f011d9cb:	e8 dd a1 fe ff       	call   f0107bad <kfree>
f011d9d0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9d3:	e8 e0 68 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011d9d8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d9db:	74 17                	je     f011d9f4 <test_kmalloc_firstfit2+0x642>
f011d9dd:	83 ec 04             	sub    $0x4,%esp
f011d9e0:	68 14 8d 13 f0       	push   $0xf0138d14
f011d9e5:	68 d0 03 00 00       	push   $0x3d0
f011d9ea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011d9ef:	e8 bc 27 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d9f4:	e8 19 ec fe ff       	call   f010c612 <sys_calculate_free_frames>
f011d9f9:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011d9fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da01:	74 17                	je     f011da1a <test_kmalloc_firstfit2+0x668>
f011da03:	83 ec 04             	sub    $0x4,%esp
f011da06:	68 57 91 13 f0       	push   $0xf0139157
f011da0b:	68 d1 03 00 00       	push   $0x3d1
f011da10:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011da15:	e8 96 27 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011da1a:	e8 f3 eb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011da1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da22:	e8 91 68 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011da27:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011da2a:	83 ec 0c             	sub    $0xc,%esp
f011da2d:	68 00 fc 2f 00       	push   $0x2ffc00
f011da32:	e8 5c a1 fe ff       	call   f0107b93 <kmalloc>
f011da37:	83 c4 10             	add    $0x10,%esp
f011da3a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011da40:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da46:	89 c1                	mov    %eax,%ecx
f011da48:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011da4f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011da54:	0f b6 d0             	movzbl %al,%edx
f011da57:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011da5a:	01 d0                	add    %edx,%eax
f011da5c:	48                   	dec    %eax
f011da5d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011da60:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da63:	ba 00 00 00 00       	mov    $0x0,%edx
f011da68:	f7 75 8c             	divl   -0x74(%ebp)
f011da6b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da6e:	29 d0                	sub    %edx,%eax
f011da70:	89 c3                	mov    %eax,%ebx
f011da72:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011da79:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011da7e:	0f b6 c0             	movzbl %al,%eax
f011da81:	c1 e0 04             	shl    $0x4,%eax
f011da84:	89 c2                	mov    %eax,%edx
f011da86:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011da89:	01 d0                	add    %edx,%eax
f011da8b:	48                   	dec    %eax
f011da8c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011da8f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011da92:	ba 00 00 00 00       	mov    $0x0,%edx
f011da97:	f7 75 84             	divl   -0x7c(%ebp)
f011da9a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011da9d:	29 d0                	sub    %edx,%eax
f011da9f:	01 d8                	add    %ebx,%eax
f011daa1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011daa6:	39 c1                	cmp    %eax,%ecx
f011daa8:	74 17                	je     f011dac1 <test_kmalloc_firstfit2+0x70f>
f011daaa:	83 ec 04             	sub    $0x4,%esp
f011daad:	68 14 91 13 f0       	push   $0xf0139114
f011dab2:	68 d7 03 00 00       	push   $0x3d7
f011dab7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dabc:	e8 ef 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dac1:	e8 f2 67 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dac6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dac9:	74 17                	je     f011dae2 <test_kmalloc_firstfit2+0x730>
f011dacb:	83 ec 04             	sub    $0x4,%esp
f011dace:	68 14 8d 13 f0       	push   $0xf0138d14
f011dad3:	68 d8 03 00 00       	push   $0x3d8
f011dad8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dadd:	e8 ce 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dae2:	e8 2b eb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011daea:	29 c2                	sub    %eax,%edx
f011daec:	89 d0                	mov    %edx,%eax
f011daee:	3d 00 03 00 00       	cmp    $0x300,%eax
f011daf3:	74 17                	je     f011db0c <test_kmalloc_firstfit2+0x75a>
f011daf5:	83 ec 04             	sub    $0x4,%esp
f011daf8:	68 44 91 13 f0       	push   $0xf0139144
f011dafd:	68 d9 03 00 00       	push   $0x3d9
f011db02:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011db07:	e8 a4 26 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011db0c:	e8 01 eb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011db11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db14:	e8 9f 67 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011db19:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011db1c:	83 ec 0c             	sub    $0xc,%esp
f011db1f:	68 00 18 20 00       	push   $0x201800
f011db24:	e8 6a a0 fe ff       	call   f0107b93 <kmalloc>
f011db29:	83 c4 10             	add    $0x10,%esp
f011db2c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011db32:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011db38:	89 c1                	mov    %eax,%ecx
f011db3a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011db41:	10 00 00 
f011db44:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011db49:	0f b6 d0             	movzbl %al,%edx
f011db4c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011db52:	01 d0                	add    %edx,%eax
f011db54:	48                   	dec    %eax
f011db55:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011db5b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db61:	ba 00 00 00 00       	mov    $0x0,%edx
f011db66:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011db6c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db72:	29 d0                	sub    %edx,%eax
f011db74:	89 c3                	mov    %eax,%ebx
f011db76:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011db7d:	10 00 00 
f011db80:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011db85:	0f b6 c0             	movzbl %al,%eax
f011db88:	c1 e0 04             	shl    $0x4,%eax
f011db8b:	89 c2                	mov    %eax,%edx
f011db8d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011db93:	01 d0                	add    %edx,%eax
f011db95:	48                   	dec    %eax
f011db96:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011db9c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dba2:	ba 00 00 00 00       	mov    $0x0,%edx
f011dba7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dbad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dbb3:	29 d0                	sub    %edx,%eax
f011dbb5:	01 d8                	add    %ebx,%eax
f011dbb7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dbbc:	39 c1                	cmp    %eax,%ecx
f011dbbe:	74 17                	je     f011dbd7 <test_kmalloc_firstfit2+0x825>
f011dbc0:	83 ec 04             	sub    $0x4,%esp
f011dbc3:	68 14 91 13 f0       	push   $0xf0139114
f011dbc8:	68 df 03 00 00       	push   $0x3df
f011dbcd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dbd2:	e8 d9 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbd7:	e8 dc 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dbdc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dbdf:	74 17                	je     f011dbf8 <test_kmalloc_firstfit2+0x846>
f011dbe1:	83 ec 04             	sub    $0x4,%esp
f011dbe4:	68 14 8d 13 f0       	push   $0xf0138d14
f011dbe9:	68 e0 03 00 00       	push   $0x3e0
f011dbee:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dbf3:	e8 b8 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dbf8:	e8 15 ea fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dbfd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dc00:	29 c2                	sub    %eax,%edx
f011dc02:	89 d0                	mov    %edx,%eax
f011dc04:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dc09:	74 17                	je     f011dc22 <test_kmalloc_firstfit2+0x870>
f011dc0b:	83 ec 04             	sub    $0x4,%esp
f011dc0e:	68 44 91 13 f0       	push   $0xf0139144
f011dc13:	68 e1 03 00 00       	push   $0x3e1
f011dc18:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dc1d:	e8 8e 25 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dc22:	e8 eb e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc2a:	e8 89 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dc2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011dc32:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dc38:	83 ec 0c             	sub    $0xc,%esp
f011dc3b:	50                   	push   %eax
f011dc3c:	e8 6c 9f fe ff       	call   f0107bad <kfree>
f011dc41:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc44:	e8 6f 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dc49:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc4c:	74 17                	je     f011dc65 <test_kmalloc_firstfit2+0x8b3>
f011dc4e:	83 ec 04             	sub    $0x4,%esp
f011dc51:	68 14 8d 13 f0       	push   $0xf0138d14
f011dc56:	68 e7 03 00 00       	push   $0x3e7
f011dc5b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dc60:	e8 4b 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dc65:	e8 a8 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc6a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc6d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dc72:	74 17                	je     f011dc8b <test_kmalloc_firstfit2+0x8d9>
f011dc74:	83 ec 04             	sub    $0x4,%esp
f011dc77:	68 57 91 13 f0       	push   $0xf0139157
f011dc7c:	68 e8 03 00 00       	push   $0x3e8
f011dc81:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dc86:	e8 25 25 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dc8b:	e8 82 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dc90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc93:	e8 20 66 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dc98:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011dc9b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dca1:	83 ec 0c             	sub    $0xc,%esp
f011dca4:	50                   	push   %eax
f011dca5:	e8 03 9f fe ff       	call   f0107bad <kfree>
f011dcaa:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dcad:	e8 60 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dcb2:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dcb5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dcba:	74 17                	je     f011dcd3 <test_kmalloc_firstfit2+0x921>
f011dcbc:	83 ec 04             	sub    $0x4,%esp
f011dcbf:	68 57 91 13 f0       	push   $0xf0139157
f011dcc4:	68 ee 03 00 00       	push   $0x3ee
f011dcc9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dcce:	e8 dd 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcd3:	e8 e0 65 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dcd8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dcdb:	74 17                	je     f011dcf4 <test_kmalloc_firstfit2+0x942>
f011dcdd:	83 ec 04             	sub    $0x4,%esp
f011dce0:	68 14 8d 13 f0       	push   $0xf0138d14
f011dce5:	68 ef 03 00 00       	push   $0x3ef
f011dcea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dcef:	e8 bc 24 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011dcf4:	e8 19 e9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dcf9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcfc:	e8 b7 65 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011dd01:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011dd04:	83 ec 0c             	sub    $0xc,%esp
f011dd07:	68 00 fc 4f 00       	push   $0x4ffc00
f011dd0c:	e8 82 9e fe ff       	call   f0107b93 <kmalloc>
f011dd11:	83 c4 10             	add    $0x10,%esp
f011dd14:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011dd1a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dd20:	89 c1                	mov    %eax,%ecx
f011dd22:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dd29:	10 00 00 
f011dd2c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dd31:	0f b6 d0             	movzbl %al,%edx
f011dd34:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dd3a:	01 d0                	add    %edx,%eax
f011dd3c:	48                   	dec    %eax
f011dd3d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dd43:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dd49:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd4e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dd54:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dd5a:	29 d0                	sub    %edx,%eax
f011dd5c:	89 c3                	mov    %eax,%ebx
f011dd5e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dd65:	10 00 00 
f011dd68:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011dd6d:	0f b6 c0             	movzbl %al,%eax
f011dd70:	c1 e0 04             	shl    $0x4,%eax
f011dd73:	89 c2                	mov    %eax,%edx
f011dd75:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dd7b:	01 d0                	add    %edx,%eax
f011dd7d:	48                   	dec    %eax
f011dd7e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dd84:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dd8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd8f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dd95:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dd9b:	29 d0                	sub    %edx,%eax
f011dd9d:	01 d8                	add    %ebx,%eax
f011dd9f:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011dda4:	39 c1                	cmp    %eax,%ecx
f011dda6:	74 17                	je     f011ddbf <test_kmalloc_firstfit2+0xa0d>
f011dda8:	83 ec 04             	sub    $0x4,%esp
f011ddab:	68 14 91 13 f0       	push   $0xf0139114
f011ddb0:	68 f5 03 00 00       	push   $0x3f5
f011ddb5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ddba:	e8 f1 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddbf:	e8 f4 64 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ddc4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ddc7:	74 17                	je     f011dde0 <test_kmalloc_firstfit2+0xa2e>
f011ddc9:	83 ec 04             	sub    $0x4,%esp
f011ddcc:	68 14 8d 13 f0       	push   $0xf0138d14
f011ddd1:	68 f6 03 00 00       	push   $0x3f6
f011ddd6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dddb:	e8 d0 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dde0:	e8 2d e8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011dde5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dde8:	29 c2                	sub    %eax,%edx
f011ddea:	89 d0                	mov    %edx,%eax
f011ddec:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ddf1:	74 17                	je     f011de0a <test_kmalloc_firstfit2+0xa58>
f011ddf3:	83 ec 04             	sub    $0x4,%esp
f011ddf6:	68 44 91 13 f0       	push   $0xf0139144
f011ddfb:	68 f7 03 00 00       	push   $0x3f7
f011de00:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011de05:	e8 a6 23 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011de0a:	e8 03 e8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011de0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de12:	e8 a1 64 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011de17:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011de1a:	83 ec 0c             	sub    $0xc,%esp
f011de1d:	68 00 fc 2f 00       	push   $0x2ffc00
f011de22:	e8 6c 9d fe ff       	call   f0107b93 <kmalloc>
f011de27:	83 c4 10             	add    $0x10,%esp
f011de2a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011de30:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011de36:	89 c1                	mov    %eax,%ecx
f011de38:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011de3f:	10 00 00 
f011de42:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011de47:	0f b6 d0             	movzbl %al,%edx
f011de4a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011de50:	01 d0                	add    %edx,%eax
f011de52:	48                   	dec    %eax
f011de53:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011de59:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011de5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011de64:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011de6a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011de70:	29 d0                	sub    %edx,%eax
f011de72:	89 c3                	mov    %eax,%ebx
f011de74:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011de7b:	10 00 00 
f011de7e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011de83:	0f b6 c0             	movzbl %al,%eax
f011de86:	c1 e0 04             	shl    $0x4,%eax
f011de89:	89 c2                	mov    %eax,%edx
f011de8b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011de91:	01 d0                	add    %edx,%eax
f011de93:	48                   	dec    %eax
f011de94:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011de9a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dea0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dea5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011deab:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011deb1:	29 d0                	sub    %edx,%eax
f011deb3:	01 d8                	add    %ebx,%eax
f011deb5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011deba:	39 c1                	cmp    %eax,%ecx
f011debc:	74 17                	je     f011ded5 <test_kmalloc_firstfit2+0xb23>
f011debe:	83 ec 04             	sub    $0x4,%esp
f011dec1:	68 14 91 13 f0       	push   $0xf0139114
f011dec6:	68 05 04 00 00       	push   $0x405
f011decb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ded0:	e8 db 22 fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ded5:	e8 de 63 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011deda:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dedd:	74 17                	je     f011def6 <test_kmalloc_firstfit2+0xb44>
f011dedf:	83 ec 04             	sub    $0x4,%esp
f011dee2:	68 14 8d 13 f0       	push   $0xf0138d14
f011dee7:	68 06 04 00 00       	push   $0x406
f011deec:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011def1:	e8 ba 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011def6:	e8 17 e7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011defb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011defe:	29 c2                	sub    %eax,%edx
f011df00:	89 d0                	mov    %edx,%eax
f011df02:	3d 00 03 00 00       	cmp    $0x300,%eax
f011df07:	74 17                	je     f011df20 <test_kmalloc_firstfit2+0xb6e>
f011df09:	83 ec 04             	sub    $0x4,%esp
f011df0c:	68 44 91 13 f0       	push   $0xf0139144
f011df11:	68 07 04 00 00       	push   $0x407
f011df16:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011df1b:	e8 90 22 fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011df20:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011df27:	10 00 00 
f011df2a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011df2f:	0f b6 d0             	movzbl %al,%edx
f011df32:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011df38:	01 d0                	add    %edx,%eax
f011df3a:	48                   	dec    %eax
f011df3b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011df41:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011df47:	ba 00 00 00 00       	mov    $0x0,%edx
f011df4c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011df52:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011df58:	29 d0                	sub    %edx,%eax
f011df5a:	89 c1                	mov    %eax,%ecx
f011df5c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011df63:	10 00 00 
f011df66:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011df6b:	0f b6 c0             	movzbl %al,%eax
f011df6e:	c1 e0 04             	shl    $0x4,%eax
f011df71:	89 c2                	mov    %eax,%edx
f011df73:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011df79:	01 d0                	add    %edx,%eax
f011df7b:	48                   	dec    %eax
f011df7c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011df82:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df88:	ba 00 00 00 00       	mov    $0x0,%edx
f011df8d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011df93:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df99:	29 d0                	sub    %edx,%eax
f011df9b:	01 c8                	add    %ecx,%eax
f011df9d:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011dfa2:	29 c2                	sub    %eax,%edx
f011dfa4:	89 d0                	mov    %edx,%eax
f011dfa6:	83 ec 0c             	sub    $0xc,%esp
f011dfa9:	50                   	push   %eax
f011dfaa:	e8 e4 9b fe ff       	call   f0107b93 <kmalloc>
f011dfaf:	83 c4 10             	add    $0x10,%esp
f011dfb2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011dfb8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011dfbe:	85 c0                	test   %eax,%eax
f011dfc0:	74 17                	je     f011dfd9 <test_kmalloc_firstfit2+0xc27>
f011dfc2:	83 ec 04             	sub    $0x4,%esp
f011dfc5:	68 44 92 13 f0       	push   $0xf0139244
f011dfca:	68 0d 04 00 00       	push   $0x40d
f011dfcf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011dfd4:	e8 d7 21 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011dfd9:	83 ec 0c             	sub    $0xc,%esp
f011dfdc:	68 84 93 13 f0       	push   $0xf0139384
f011dfe1:	e8 4b 2e fe ff       	call   f0100e31 <cprintf>
f011dfe6:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011dfe9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dfee:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dff1:	5b                   	pop    %ebx
f011dff2:	5f                   	pop    %edi
f011dff3:	5d                   	pop    %ebp
f011dff4:	c3                   	ret    

f011dff5 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011dff5:	55                   	push   %ebp
f011dff6:	89 e5                	mov    %esp,%ebp
f011dff8:	57                   	push   %edi
f011dff9:	53                   	push   %ebx
f011dffa:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e000:	83 ec 0c             	sub    $0xc,%esp
f011e003:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011e008:	e8 24 2e fe ff       	call   f0100e31 <cprintf>
f011e00d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e010:	83 ec 0c             	sub    $0xc,%esp
f011e013:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011e018:	e8 14 2e fe ff       	call   f0100e31 <cprintf>
f011e01d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e020:	83 ec 0c             	sub    $0xc,%esp
f011e023:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011e028:	e8 04 2e fe ff       	call   f0100e31 <cprintf>
f011e02d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e030:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e036:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e03b:	b8 00 00 00 00       	mov    $0x0,%eax
f011e040:	89 d7                	mov    %edx,%edi
f011e042:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e044:	e8 c9 e5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e049:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e04c:	e8 67 62 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e051:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e054:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e05b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e062:	eb 1f                	jmp    f011e083 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e064:	83 ec 0c             	sub    $0xc,%esp
f011e067:	68 00 00 20 00       	push   $0x200000
f011e06c:	e8 22 9b fe ff       	call   f0107b93 <kmalloc>
f011e071:	83 c4 10             	add    $0x10,%esp
f011e074:	89 c2                	mov    %eax,%edx
f011e076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e079:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e080:	ff 45 f4             	incl   -0xc(%ebp)
f011e083:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e087:	7e db                	jle    f011e064 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e089:	83 ec 0c             	sub    $0xc,%esp
f011e08c:	68 00 b0 1f 00       	push   $0x1fb000
f011e091:	e8 fd 9a fe ff       	call   f0107b93 <kmalloc>
f011e096:	83 c4 10             	add    $0x10,%esp
f011e099:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e09f:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e0a5:	89 c1                	mov    %eax,%ecx
f011e0a7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e0ae:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e0b3:	0f b6 d0             	movzbl %al,%edx
f011e0b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e0b9:	01 d0                	add    %edx,%eax
f011e0bb:	48                   	dec    %eax
f011e0bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e0bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0c7:	f7 75 e4             	divl   -0x1c(%ebp)
f011e0ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0cd:	29 d0                	sub    %edx,%eax
f011e0cf:	89 c3                	mov    %eax,%ebx
f011e0d1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e0d8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e0dd:	0f b6 c0             	movzbl %al,%eax
f011e0e0:	c1 e0 04             	shl    $0x4,%eax
f011e0e3:	89 c2                	mov    %eax,%edx
f011e0e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e0e8:	01 d0                	add    %edx,%eax
f011e0ea:	48                   	dec    %eax
f011e0eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e0ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e0f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0f6:	f7 75 dc             	divl   -0x24(%ebp)
f011e0f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e0fc:	29 d0                	sub    %edx,%eax
f011e0fe:	01 d8                	add    %ebx,%eax
f011e100:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e105:	39 c1                	cmp    %eax,%ecx
f011e107:	0f 85 34 03 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e10d:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e113:	89 c1                	mov    %eax,%ecx
f011e115:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e11c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e121:	0f b6 d0             	movzbl %al,%edx
f011e124:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e127:	01 d0                	add    %edx,%eax
f011e129:	48                   	dec    %eax
f011e12a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e12d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e130:	ba 00 00 00 00       	mov    $0x0,%edx
f011e135:	f7 75 d4             	divl   -0x2c(%ebp)
f011e138:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e13b:	29 d0                	sub    %edx,%eax
f011e13d:	89 c3                	mov    %eax,%ebx
f011e13f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e146:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e14b:	0f b6 c0             	movzbl %al,%eax
f011e14e:	c1 e0 04             	shl    $0x4,%eax
f011e151:	89 c2                	mov    %eax,%edx
f011e153:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e156:	01 d0                	add    %edx,%eax
f011e158:	48                   	dec    %eax
f011e159:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e15c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e15f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e164:	f7 75 cc             	divl   -0x34(%ebp)
f011e167:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e16a:	29 d0                	sub    %edx,%eax
f011e16c:	01 d8                	add    %ebx,%eax
f011e16e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e173:	39 c1                	cmp    %eax,%ecx
f011e175:	0f 85 c6 02 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e17b:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e181:	89 c1                	mov    %eax,%ecx
f011e183:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e18a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e18f:	0f b6 d0             	movzbl %al,%edx
f011e192:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e195:	01 d0                	add    %edx,%eax
f011e197:	48                   	dec    %eax
f011e198:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e19b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e19e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a3:	f7 75 c4             	divl   -0x3c(%ebp)
f011e1a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e1a9:	29 d0                	sub    %edx,%eax
f011e1ab:	89 c3                	mov    %eax,%ebx
f011e1ad:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e1b4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e1b9:	0f b6 c0             	movzbl %al,%eax
f011e1bc:	c1 e0 04             	shl    $0x4,%eax
f011e1bf:	89 c2                	mov    %eax,%edx
f011e1c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e1c4:	01 d0                	add    %edx,%eax
f011e1c6:	48                   	dec    %eax
f011e1c7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e1ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e1cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d2:	f7 75 bc             	divl   -0x44(%ebp)
f011e1d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e1d8:	29 d0                	sub    %edx,%eax
f011e1da:	01 d8                	add    %ebx,%eax
f011e1dc:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e1e1:	39 c1                	cmp    %eax,%ecx
f011e1e3:	0f 85 58 02 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e1e9:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e1ef:	89 c1                	mov    %eax,%ecx
f011e1f1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e1f8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e1fd:	0f b6 d0             	movzbl %al,%edx
f011e200:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e203:	01 d0                	add    %edx,%eax
f011e205:	48                   	dec    %eax
f011e206:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e209:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e20c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e211:	f7 75 b4             	divl   -0x4c(%ebp)
f011e214:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e217:	29 d0                	sub    %edx,%eax
f011e219:	89 c3                	mov    %eax,%ebx
f011e21b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e222:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e227:	0f b6 c0             	movzbl %al,%eax
f011e22a:	c1 e0 04             	shl    $0x4,%eax
f011e22d:	89 c2                	mov    %eax,%edx
f011e22f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e232:	01 d0                	add    %edx,%eax
f011e234:	48                   	dec    %eax
f011e235:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e238:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e23b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e240:	f7 75 ac             	divl   -0x54(%ebp)
f011e243:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e246:	29 d0                	sub    %edx,%eax
f011e248:	01 d8                	add    %ebx,%eax
f011e24a:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e24f:	39 c1                	cmp    %eax,%ecx
f011e251:	0f 85 ea 01 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e257:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e25d:	89 c1                	mov    %eax,%ecx
f011e25f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e266:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e26b:	0f b6 d0             	movzbl %al,%edx
f011e26e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e271:	01 d0                	add    %edx,%eax
f011e273:	48                   	dec    %eax
f011e274:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e277:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e27a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e27f:	f7 75 a4             	divl   -0x5c(%ebp)
f011e282:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e285:	29 d0                	sub    %edx,%eax
f011e287:	89 c3                	mov    %eax,%ebx
f011e289:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e290:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e295:	0f b6 c0             	movzbl %al,%eax
f011e298:	c1 e0 04             	shl    $0x4,%eax
f011e29b:	89 c2                	mov    %eax,%edx
f011e29d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e2a0:	01 d0                	add    %edx,%eax
f011e2a2:	48                   	dec    %eax
f011e2a3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e2a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e2a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2ae:	f7 75 9c             	divl   -0x64(%ebp)
f011e2b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e2b4:	29 d0                	sub    %edx,%eax
f011e2b6:	01 d8                	add    %ebx,%eax
f011e2b8:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e2bd:	39 c1                	cmp    %eax,%ecx
f011e2bf:	0f 85 7c 01 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e2c5:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e2cb:	89 c1                	mov    %eax,%ecx
f011e2cd:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e2d4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e2d9:	0f b6 d0             	movzbl %al,%edx
f011e2dc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e2df:	01 d0                	add    %edx,%eax
f011e2e1:	48                   	dec    %eax
f011e2e2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e2e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e2e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2ed:	f7 75 94             	divl   -0x6c(%ebp)
f011e2f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e2f3:	29 d0                	sub    %edx,%eax
f011e2f5:	89 c3                	mov    %eax,%ebx
f011e2f7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e2fe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e303:	0f b6 c0             	movzbl %al,%eax
f011e306:	c1 e0 04             	shl    $0x4,%eax
f011e309:	89 c2                	mov    %eax,%edx
f011e30b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e30e:	01 d0                	add    %edx,%eax
f011e310:	48                   	dec    %eax
f011e311:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e314:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e317:	ba 00 00 00 00       	mov    $0x0,%edx
f011e31c:	f7 75 8c             	divl   -0x74(%ebp)
f011e31f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e322:	29 d0                	sub    %edx,%eax
f011e324:	01 d8                	add    %ebx,%eax
f011e326:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e32b:	39 c1                	cmp    %eax,%ecx
f011e32d:	0f 85 0e 01 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e333:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e339:	89 c1                	mov    %eax,%ecx
f011e33b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e342:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e347:	0f b6 d0             	movzbl %al,%edx
f011e34a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e34d:	01 d0                	add    %edx,%eax
f011e34f:	48                   	dec    %eax
f011e350:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e353:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e356:	ba 00 00 00 00       	mov    $0x0,%edx
f011e35b:	f7 75 84             	divl   -0x7c(%ebp)
f011e35e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e361:	29 d0                	sub    %edx,%eax
f011e363:	89 c3                	mov    %eax,%ebx
f011e365:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e36c:	10 00 00 
f011e36f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e374:	0f b6 c0             	movzbl %al,%eax
f011e377:	c1 e0 04             	shl    $0x4,%eax
f011e37a:	89 c2                	mov    %eax,%edx
f011e37c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e382:	01 d0                	add    %edx,%eax
f011e384:	48                   	dec    %eax
f011e385:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e38b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e391:	ba 00 00 00 00       	mov    $0x0,%edx
f011e396:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e39c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e3a2:	29 d0                	sub    %edx,%eax
f011e3a4:	01 d8                	add    %ebx,%eax
f011e3a6:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e3ab:	39 c1                	cmp    %eax,%ecx
f011e3ad:	0f 85 8e 00 00 00    	jne    f011e441 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e3b3:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e3b9:	89 c1                	mov    %eax,%ecx
f011e3bb:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e3c2:	10 00 00 
f011e3c5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e3ca:	0f b6 d0             	movzbl %al,%edx
f011e3cd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e3d3:	01 d0                	add    %edx,%eax
f011e3d5:	48                   	dec    %eax
f011e3d6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e3dc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3e7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e3ed:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3f3:	29 d0                	sub    %edx,%eax
f011e3f5:	89 c3                	mov    %eax,%ebx
f011e3f7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e3fe:	10 00 00 
f011e401:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e406:	0f b6 c0             	movzbl %al,%eax
f011e409:	c1 e0 04             	shl    $0x4,%eax
f011e40c:	89 c2                	mov    %eax,%edx
f011e40e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e414:	01 d0                	add    %edx,%eax
f011e416:	48                   	dec    %eax
f011e417:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e41d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e423:	ba 00 00 00 00       	mov    $0x0,%edx
f011e428:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e42e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e434:	29 d0                	sub    %edx,%eax
f011e436:	01 d8                	add    %ebx,%eax
f011e438:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e43d:	39 c1                	cmp    %eax,%ecx
f011e43f:	74 17                	je     f011e458 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e441:	83 ec 04             	sub    $0x4,%esp
f011e444:	68 d0 93 13 f0       	push   $0xf01393d0
f011e449:	68 31 04 00 00       	push   $0x431
f011e44e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e453:	e8 58 1d fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e458:	e8 5b 5e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e45d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e460:	74 17                	je     f011e479 <test_kmalloc_worstfit+0x484>
f011e462:	83 ec 04             	sub    $0x4,%esp
f011e465:	68 14 8d 13 f0       	push   $0xf0138d14
f011e46a:	68 33 04 00 00       	push   $0x433
f011e46f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e474:	e8 37 1d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e479:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e47c:	e8 91 e1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e481:	29 c3                	sub    %eax,%ebx
f011e483:	89 d8                	mov    %ebx,%eax
f011e485:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e48a:	74 17                	je     f011e4a3 <test_kmalloc_worstfit+0x4ae>
f011e48c:	83 ec 04             	sub    $0x4,%esp
f011e48f:	68 b7 8f 13 f0       	push   $0xf0138fb7
f011e494:	68 34 04 00 00       	push   $0x434
f011e499:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e49e:	e8 0d 1d fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e4a3:	e8 6a e1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e4a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e4ab:	e8 08 5e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e4b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e4b3:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e4b9:	83 ec 0c             	sub    $0xc,%esp
f011e4bc:	50                   	push   %eax
f011e4bd:	e8 eb 96 fe ff       	call   f0107bad <kfree>
f011e4c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e4c5:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e4cb:	83 ec 0c             	sub    $0xc,%esp
f011e4ce:	50                   	push   %eax
f011e4cf:	e8 d9 96 fe ff       	call   f0107bad <kfree>
f011e4d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e4d7:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e4dd:	83 ec 0c             	sub    $0xc,%esp
f011e4e0:	50                   	push   %eax
f011e4e1:	e8 c7 96 fe ff       	call   f0107bad <kfree>
f011e4e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e4e9:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e4ef:	83 ec 0c             	sub    $0xc,%esp
f011e4f2:	50                   	push   %eax
f011e4f3:	e8 b5 96 fe ff       	call   f0107bad <kfree>
f011e4f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e4fb:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e501:	83 ec 0c             	sub    $0xc,%esp
f011e504:	50                   	push   %eax
f011e505:	e8 a3 96 fe ff       	call   f0107bad <kfree>
f011e50a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e50d:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e513:	83 ec 0c             	sub    $0xc,%esp
f011e516:	50                   	push   %eax
f011e517:	e8 91 96 fe ff       	call   f0107bad <kfree>
f011e51c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e51f:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e525:	83 ec 0c             	sub    $0xc,%esp
f011e528:	50                   	push   %eax
f011e529:	e8 7f 96 fe ff       	call   f0107bad <kfree>
f011e52e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e531:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e537:	83 ec 0c             	sub    $0xc,%esp
f011e53a:	50                   	push   %eax
f011e53b:	e8 6d 96 fe ff       	call   f0107bad <kfree>
f011e540:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e543:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e549:	83 ec 0c             	sub    $0xc,%esp
f011e54c:	50                   	push   %eax
f011e54d:	e8 5b 96 fe ff       	call   f0107bad <kfree>
f011e552:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e555:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e55b:	83 ec 0c             	sub    $0xc,%esp
f011e55e:	50                   	push   %eax
f011e55f:	e8 49 96 fe ff       	call   f0107bad <kfree>
f011e564:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e567:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e56d:	83 ec 0c             	sub    $0xc,%esp
f011e570:	50                   	push   %eax
f011e571:	e8 37 96 fe ff       	call   f0107bad <kfree>
f011e576:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e579:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e57f:	83 ec 0c             	sub    $0xc,%esp
f011e582:	50                   	push   %eax
f011e583:	e8 25 96 fe ff       	call   f0107bad <kfree>
f011e588:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e58b:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e591:	83 ec 0c             	sub    $0xc,%esp
f011e594:	50                   	push   %eax
f011e595:	e8 13 96 fe ff       	call   f0107bad <kfree>
f011e59a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e59d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e5a3:	83 ec 0c             	sub    $0xc,%esp
f011e5a6:	50                   	push   %eax
f011e5a7:	e8 01 96 fe ff       	call   f0107bad <kfree>
f011e5ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e5af:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e5b5:	83 ec 0c             	sub    $0xc,%esp
f011e5b8:	50                   	push   %eax
f011e5b9:	e8 ef 95 fe ff       	call   f0107bad <kfree>
f011e5be:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e5c1:	e8 f2 5c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e5c6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e5c9:	74 17                	je     f011e5e2 <test_kmalloc_worstfit+0x5ed>
f011e5cb:	83 ec 04             	sub    $0x4,%esp
f011e5ce:	68 14 8d 13 f0       	push   $0xf0138d14
f011e5d3:	68 4a 04 00 00       	push   $0x44a
f011e5d8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e5dd:	e8 ce 1b fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e5e2:	e8 2b e0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e5e7:	89 c2                	mov    %eax,%edx
f011e5e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e5ec:	29 c2                	sub    %eax,%edx
f011e5ee:	89 d0                	mov    %edx,%eax
f011e5f0:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e5f5:	74 17                	je     f011e60e <test_kmalloc_worstfit+0x619>
f011e5f7:	83 ec 04             	sub    $0x4,%esp
f011e5fa:	68 c8 8f 13 f0       	push   $0xf0138fc8
f011e5ff:	68 4b 04 00 00       	push   $0x44b
f011e604:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e609:	e8 a2 1b fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e60e:	e8 ff df fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e613:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e616:	e8 9d 5c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e61b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e61e:	83 ec 0c             	sub    $0xc,%esp
f011e621:	68 00 00 10 00       	push   $0x100000
f011e626:	e8 68 95 fe ff       	call   f0107b93 <kmalloc>
f011e62b:	83 c4 10             	add    $0x10,%esp
f011e62e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e634:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e63b:	10 00 00 
f011e63e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e643:	0f b6 d0             	movzbl %al,%edx
f011e646:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e64c:	01 d0                	add    %edx,%eax
f011e64e:	48                   	dec    %eax
f011e64f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011e655:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e65b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e660:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011e666:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e66c:	29 d0                	sub    %edx,%eax
f011e66e:	89 c1                	mov    %eax,%ecx
f011e670:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011e677:	10 00 00 
f011e67a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e67f:	0f b6 c0             	movzbl %al,%eax
f011e682:	c1 e0 04             	shl    $0x4,%eax
f011e685:	89 c2                	mov    %eax,%edx
f011e687:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e68d:	01 d0                	add    %edx,%eax
f011e68f:	48                   	dec    %eax
f011e690:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011e696:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e69c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6a1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011e6a7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e6ad:	29 d0                	sub    %edx,%eax
f011e6af:	01 c8                	add    %ecx,%eax
f011e6b1:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e6b7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e6bd:	39 c2                	cmp    %eax,%edx
f011e6bf:	74 17                	je     f011e6d8 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011e6c1:	83 ec 04             	sub    $0x4,%esp
f011e6c4:	68 14 94 13 f0       	push   $0xf0139414
f011e6c9:	68 52 04 00 00       	push   $0x452
f011e6ce:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e6d3:	e8 d8 1a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6d8:	e8 db 5b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e6dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e6e0:	74 17                	je     f011e6f9 <test_kmalloc_worstfit+0x704>
f011e6e2:	83 ec 04             	sub    $0x4,%esp
f011e6e5:	68 14 8d 13 f0       	push   $0xf0138d14
f011e6ea:	68 53 04 00 00       	push   $0x453
f011e6ef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e6f4:	e8 b7 1a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e6f9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e6fc:	e8 11 df fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e701:	29 c3                	sub    %eax,%ebx
f011e703:	89 d8                	mov    %ebx,%eax
f011e705:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e70a:	74 17                	je     f011e723 <test_kmalloc_worstfit+0x72e>
f011e70c:	83 ec 04             	sub    $0x4,%esp
f011e70f:	68 32 92 13 f0       	push   $0xf0139232
f011e714:	68 54 04 00 00       	push   $0x454
f011e719:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e71e:	e8 8d 1a fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e723:	ff 45 e8             	incl   -0x18(%ebp)
f011e726:	83 ec 08             	sub    $0x8,%esp
f011e729:	ff 75 e8             	pushl  -0x18(%ebp)
f011e72c:	68 34 94 13 f0       	push   $0xf0139434
f011e731:	e8 fb 26 fe ff       	call   f0100e31 <cprintf>
f011e736:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e739:	e8 d4 de fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e73e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e741:	e8 72 5b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e746:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e749:	83 ec 0c             	sub    $0xc,%esp
f011e74c:	68 00 00 40 00       	push   $0x400000
f011e751:	e8 3d 94 fe ff       	call   f0107b93 <kmalloc>
f011e756:	83 c4 10             	add    $0x10,%esp
f011e759:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e75f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011e766:	10 00 00 
f011e769:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e76e:	0f b6 d0             	movzbl %al,%edx
f011e771:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e777:	01 d0                	add    %edx,%eax
f011e779:	48                   	dec    %eax
f011e77a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011e780:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e786:	ba 00 00 00 00       	mov    $0x0,%edx
f011e78b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011e791:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e797:	29 d0                	sub    %edx,%eax
f011e799:	89 c1                	mov    %eax,%ecx
f011e79b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011e7a2:	10 00 00 
f011e7a5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e7aa:	0f b6 c0             	movzbl %al,%eax
f011e7ad:	c1 e0 04             	shl    $0x4,%eax
f011e7b0:	89 c2                	mov    %eax,%edx
f011e7b2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e7b8:	01 d0                	add    %edx,%eax
f011e7ba:	48                   	dec    %eax
f011e7bb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011e7c1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e7c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7cc:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011e7d2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e7d8:	29 d0                	sub    %edx,%eax
f011e7da:	01 c8                	add    %ecx,%eax
f011e7dc:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e7e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e7e8:	39 c2                	cmp    %eax,%edx
f011e7ea:	74 17                	je     f011e803 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011e7ec:	83 ec 04             	sub    $0x4,%esp
f011e7ef:	68 14 94 13 f0       	push   $0xf0139414
f011e7f4:	68 5b 04 00 00       	push   $0x45b
f011e7f9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e7fe:	e8 ad 19 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e803:	e8 b0 5a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e808:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e80b:	74 17                	je     f011e824 <test_kmalloc_worstfit+0x82f>
f011e80d:	83 ec 04             	sub    $0x4,%esp
f011e810:	68 14 8d 13 f0       	push   $0xf0138d14
f011e815:	68 5c 04 00 00       	push   $0x45c
f011e81a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e81f:	e8 8c 19 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e824:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e827:	e8 e6 dd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e82c:	29 c3                	sub    %eax,%ebx
f011e82e:	89 d8                	mov    %ebx,%eax
f011e830:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e835:	74 17                	je     f011e84e <test_kmalloc_worstfit+0x859>
f011e837:	83 ec 04             	sub    $0x4,%esp
f011e83a:	68 32 92 13 f0       	push   $0xf0139232
f011e83f:	68 5d 04 00 00       	push   $0x45d
f011e844:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e849:	e8 62 19 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e84e:	ff 45 e8             	incl   -0x18(%ebp)
f011e851:	83 ec 08             	sub    $0x8,%esp
f011e854:	ff 75 e8             	pushl  -0x18(%ebp)
f011e857:	68 34 94 13 f0       	push   $0xf0139434
f011e85c:	e8 d0 25 fe ff       	call   f0100e31 <cprintf>
f011e861:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e864:	e8 a9 dd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e869:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e86c:	e8 47 5a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e871:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e874:	83 ec 0c             	sub    $0xc,%esp
f011e877:	68 00 00 60 00       	push   $0x600000
f011e87c:	e8 12 93 fe ff       	call   f0107b93 <kmalloc>
f011e881:	83 c4 10             	add    $0x10,%esp
f011e884:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e88a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011e891:	10 00 00 
f011e894:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e899:	0f b6 d0             	movzbl %al,%edx
f011e89c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e8a2:	01 d0                	add    %edx,%eax
f011e8a4:	48                   	dec    %eax
f011e8a5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011e8ab:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e8b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8b6:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011e8bc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e8c2:	29 d0                	sub    %edx,%eax
f011e8c4:	89 c1                	mov    %eax,%ecx
f011e8c6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011e8cd:	10 00 00 
f011e8d0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e8d5:	0f b6 c0             	movzbl %al,%eax
f011e8d8:	c1 e0 04             	shl    $0x4,%eax
f011e8db:	89 c2                	mov    %eax,%edx
f011e8dd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e8e3:	01 d0                	add    %edx,%eax
f011e8e5:	48                   	dec    %eax
f011e8e6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011e8ec:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e8f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8f7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011e8fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e903:	29 d0                	sub    %edx,%eax
f011e905:	01 c8                	add    %ecx,%eax
f011e907:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e90d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e913:	39 c2                	cmp    %eax,%edx
f011e915:	74 17                	je     f011e92e <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011e917:	83 ec 04             	sub    $0x4,%esp
f011e91a:	68 14 94 13 f0       	push   $0xf0139414
f011e91f:	68 64 04 00 00       	push   $0x464
f011e924:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e929:	e8 82 18 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e92e:	e8 85 59 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e933:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e936:	74 17                	je     f011e94f <test_kmalloc_worstfit+0x95a>
f011e938:	83 ec 04             	sub    $0x4,%esp
f011e93b:	68 14 8d 13 f0       	push   $0xf0138d14
f011e940:	68 65 04 00 00       	push   $0x465
f011e945:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e94a:	e8 61 18 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e94f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e952:	e8 bb dc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e957:	29 c3                	sub    %eax,%ebx
f011e959:	89 d8                	mov    %ebx,%eax
f011e95b:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e960:	74 17                	je     f011e979 <test_kmalloc_worstfit+0x984>
f011e962:	83 ec 04             	sub    $0x4,%esp
f011e965:	68 32 92 13 f0       	push   $0xf0139232
f011e96a:	68 66 04 00 00       	push   $0x466
f011e96f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011e974:	e8 37 18 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e979:	ff 45 e8             	incl   -0x18(%ebp)
f011e97c:	83 ec 08             	sub    $0x8,%esp
f011e97f:	ff 75 e8             	pushl  -0x18(%ebp)
f011e982:	68 34 94 13 f0       	push   $0xf0139434
f011e987:	e8 a5 24 fe ff       	call   f0100e31 <cprintf>
f011e98c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e98f:	e8 7e dc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011e994:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e997:	e8 1c 59 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011e99c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e99f:	83 ec 0c             	sub    $0xc,%esp
f011e9a2:	68 00 00 50 00       	push   $0x500000
f011e9a7:	e8 e7 91 fe ff       	call   f0107b93 <kmalloc>
f011e9ac:	83 c4 10             	add    $0x10,%esp
f011e9af:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e9b5:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011e9bc:	10 00 00 
f011e9bf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011e9c4:	0f b6 d0             	movzbl %al,%edx
f011e9c7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e9cd:	01 d0                	add    %edx,%eax
f011e9cf:	48                   	dec    %eax
f011e9d0:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011e9d6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e9dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9e1:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011e9e7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e9ed:	29 d0                	sub    %edx,%eax
f011e9ef:	89 c1                	mov    %eax,%ecx
f011e9f1:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011e9f8:	10 00 00 
f011e9fb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ea00:	0f b6 c0             	movzbl %al,%eax
f011ea03:	c1 e0 04             	shl    $0x4,%eax
f011ea06:	89 c2                	mov    %eax,%edx
f011ea08:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ea0e:	01 d0                	add    %edx,%eax
f011ea10:	48                   	dec    %eax
f011ea11:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011ea17:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea1d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea22:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011ea28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea2e:	29 d0                	sub    %edx,%eax
f011ea30:	01 c8                	add    %ecx,%eax
f011ea32:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ea38:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ea3e:	39 c2                	cmp    %eax,%edx
f011ea40:	74 17                	je     f011ea59 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011ea42:	83 ec 04             	sub    $0x4,%esp
f011ea45:	68 14 94 13 f0       	push   $0xf0139414
f011ea4a:	68 6d 04 00 00       	push   $0x46d
f011ea4f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ea54:	e8 57 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea59:	e8 5a 58 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ea5e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea61:	74 17                	je     f011ea7a <test_kmalloc_worstfit+0xa85>
f011ea63:	83 ec 04             	sub    $0x4,%esp
f011ea66:	68 14 8d 13 f0       	push   $0xf0138d14
f011ea6b:	68 6e 04 00 00       	push   $0x46e
f011ea70:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ea75:	e8 36 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea7d:	e8 90 db fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ea82:	29 c3                	sub    %eax,%ebx
f011ea84:	89 d8                	mov    %ebx,%eax
f011ea86:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ea8b:	74 17                	je     f011eaa4 <test_kmalloc_worstfit+0xaaf>
f011ea8d:	83 ec 04             	sub    $0x4,%esp
f011ea90:	68 32 92 13 f0       	push   $0xf0139232
f011ea95:	68 6f 04 00 00       	push   $0x46f
f011ea9a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ea9f:	e8 0c 17 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eaa4:	ff 45 e8             	incl   -0x18(%ebp)
f011eaa7:	83 ec 08             	sub    $0x8,%esp
f011eaaa:	ff 75 e8             	pushl  -0x18(%ebp)
f011eaad:	68 34 94 13 f0       	push   $0xf0139434
f011eab2:	e8 7a 23 fe ff       	call   f0100e31 <cprintf>
f011eab7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eaba:	e8 53 db fe ff       	call   f010c612 <sys_calculate_free_frames>
f011eabf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eac2:	e8 f1 57 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eac7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011eaca:	83 ec 0c             	sub    $0xc,%esp
f011eacd:	68 00 00 40 00       	push   $0x400000
f011ead2:	e8 bc 90 fe ff       	call   f0107b93 <kmalloc>
f011ead7:	83 c4 10             	add    $0x10,%esp
f011eada:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011eae0:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011eae7:	10 00 00 
f011eaea:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011eaef:	0f b6 d0             	movzbl %al,%edx
f011eaf2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eaf8:	01 d0                	add    %edx,%eax
f011eafa:	48                   	dec    %eax
f011eafb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011eb01:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eb07:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb0c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011eb12:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eb18:	29 d0                	sub    %edx,%eax
f011eb1a:	89 c1                	mov    %eax,%ecx
f011eb1c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eb23:	10 00 00 
f011eb26:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011eb2b:	0f b6 c0             	movzbl %al,%eax
f011eb2e:	c1 e0 04             	shl    $0x4,%eax
f011eb31:	89 c2                	mov    %eax,%edx
f011eb33:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011eb39:	01 d0                	add    %edx,%eax
f011eb3b:	48                   	dec    %eax
f011eb3c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eb42:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eb48:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eb53:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eb59:	29 d0                	sub    %edx,%eax
f011eb5b:	01 c8                	add    %ecx,%eax
f011eb5d:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011eb63:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb69:	39 c2                	cmp    %eax,%edx
f011eb6b:	74 17                	je     f011eb84 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011eb6d:	83 ec 04             	sub    $0x4,%esp
f011eb70:	68 14 94 13 f0       	push   $0xf0139414
f011eb75:	68 76 04 00 00       	push   $0x476
f011eb7a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011eb7f:	e8 2c 16 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb84:	e8 2f 57 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eb89:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb8c:	74 17                	je     f011eba5 <test_kmalloc_worstfit+0xbb0>
f011eb8e:	83 ec 04             	sub    $0x4,%esp
f011eb91:	68 14 8d 13 f0       	push   $0xf0138d14
f011eb96:	68 77 04 00 00       	push   $0x477
f011eb9b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011eba0:	e8 0b 16 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eba5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eba8:	e8 65 da fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ebad:	29 c3                	sub    %eax,%ebx
f011ebaf:	89 d8                	mov    %ebx,%eax
f011ebb1:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ebb6:	74 17                	je     f011ebcf <test_kmalloc_worstfit+0xbda>
f011ebb8:	83 ec 04             	sub    $0x4,%esp
f011ebbb:	68 32 92 13 f0       	push   $0xf0139232
f011ebc0:	68 78 04 00 00       	push   $0x478
f011ebc5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ebca:	e8 e1 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebcf:	ff 45 e8             	incl   -0x18(%ebp)
f011ebd2:	83 ec 08             	sub    $0x8,%esp
f011ebd5:	ff 75 e8             	pushl  -0x18(%ebp)
f011ebd8:	68 34 94 13 f0       	push   $0xf0139434
f011ebdd:	e8 4f 22 fe ff       	call   f0100e31 <cprintf>
f011ebe2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ebe5:	e8 28 da fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ebea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ebed:	e8 c6 56 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ebf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011ebf5:	83 ec 0c             	sub    $0xc,%esp
f011ebf8:	68 00 00 20 00       	push   $0x200000
f011ebfd:	e8 91 8f fe ff       	call   f0107b93 <kmalloc>
f011ec02:	83 c4 10             	add    $0x10,%esp
f011ec05:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011ec0b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ec12:	10 00 00 
f011ec15:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ec1a:	0f b6 d0             	movzbl %al,%edx
f011ec1d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ec23:	01 d0                	add    %edx,%eax
f011ec25:	48                   	dec    %eax
f011ec26:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ec2c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ec32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec37:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ec3d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ec43:	29 d0                	sub    %edx,%eax
f011ec45:	89 c1                	mov    %eax,%ecx
f011ec47:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011ec4e:	10 00 00 
f011ec51:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ec56:	0f b6 c0             	movzbl %al,%eax
f011ec59:	c1 e0 04             	shl    $0x4,%eax
f011ec5c:	89 c2                	mov    %eax,%edx
f011ec5e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ec64:	01 d0                	add    %edx,%eax
f011ec66:	48                   	dec    %eax
f011ec67:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011ec6d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ec73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec78:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011ec7e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ec84:	29 d0                	sub    %edx,%eax
f011ec86:	01 c8                	add    %ecx,%eax
f011ec88:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ec8e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec94:	39 c2                	cmp    %eax,%edx
f011ec96:	74 17                	je     f011ecaf <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011ec98:	83 ec 04             	sub    $0x4,%esp
f011ec9b:	68 14 94 13 f0       	push   $0xf0139414
f011eca0:	68 7f 04 00 00       	push   $0x47f
f011eca5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ecaa:	e8 01 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecaf:	e8 04 56 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ecb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ecb7:	74 17                	je     f011ecd0 <test_kmalloc_worstfit+0xcdb>
f011ecb9:	83 ec 04             	sub    $0x4,%esp
f011ecbc:	68 14 8d 13 f0       	push   $0xf0138d14
f011ecc1:	68 80 04 00 00       	push   $0x480
f011ecc6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011eccb:	e8 e0 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ecd0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ecd3:	e8 3a d9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ecd8:	29 c3                	sub    %eax,%ebx
f011ecda:	89 d8                	mov    %ebx,%eax
f011ecdc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ece1:	74 17                	je     f011ecfa <test_kmalloc_worstfit+0xd05>
f011ece3:	83 ec 04             	sub    $0x4,%esp
f011ece6:	68 32 92 13 f0       	push   $0xf0139232
f011eceb:	68 81 04 00 00       	push   $0x481
f011ecf0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ecf5:	e8 b6 14 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ecfa:	ff 45 e8             	incl   -0x18(%ebp)
f011ecfd:	83 ec 08             	sub    $0x8,%esp
f011ed00:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed03:	68 34 94 13 f0       	push   $0xf0139434
f011ed08:	e8 24 21 fe ff       	call   f0100e31 <cprintf>
f011ed0d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed10:	e8 fd d8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ed15:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed18:	e8 9b 55 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ed1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ed20:	83 ec 0c             	sub    $0xc,%esp
f011ed23:	68 00 00 18 00       	push   $0x180000
f011ed28:	e8 66 8e fe ff       	call   f0107b93 <kmalloc>
f011ed2d:	83 c4 10             	add    $0x10,%esp
f011ed30:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ed36:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011ed3d:	10 00 00 
f011ed40:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ed45:	0f b6 d0             	movzbl %al,%edx
f011ed48:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ed4e:	01 d0                	add    %edx,%eax
f011ed50:	48                   	dec    %eax
f011ed51:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011ed57:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ed5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed62:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011ed68:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ed6e:	29 d0                	sub    %edx,%eax
f011ed70:	89 c1                	mov    %eax,%ecx
f011ed72:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011ed79:	10 00 00 
f011ed7c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ed81:	0f b6 c0             	movzbl %al,%eax
f011ed84:	c1 e0 04             	shl    $0x4,%eax
f011ed87:	89 c2                	mov    %eax,%edx
f011ed89:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ed8f:	01 d0                	add    %edx,%eax
f011ed91:	48                   	dec    %eax
f011ed92:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ed98:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ed9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda3:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011eda9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011edaf:	29 d0                	sub    %edx,%eax
f011edb1:	01 c8                	add    %ecx,%eax
f011edb3:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011edb9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011edbf:	39 c2                	cmp    %eax,%edx
f011edc1:	74 17                	je     f011edda <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011edc3:	83 ec 04             	sub    $0x4,%esp
f011edc6:	68 14 94 13 f0       	push   $0xf0139414
f011edcb:	68 88 04 00 00       	push   $0x488
f011edd0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011edd5:	e8 d6 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edda:	e8 d9 54 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011eddf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ede2:	74 17                	je     f011edfb <test_kmalloc_worstfit+0xe06>
f011ede4:	83 ec 04             	sub    $0x4,%esp
f011ede7:	68 14 8d 13 f0       	push   $0xf0138d14
f011edec:	68 89 04 00 00       	push   $0x489
f011edf1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011edf6:	e8 b5 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011edfb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011edfe:	e8 0f d8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ee03:	29 c3                	sub    %eax,%ebx
f011ee05:	89 d8                	mov    %ebx,%eax
f011ee07:	3d 80 01 00 00       	cmp    $0x180,%eax
f011ee0c:	74 17                	je     f011ee25 <test_kmalloc_worstfit+0xe30>
f011ee0e:	83 ec 04             	sub    $0x4,%esp
f011ee11:	68 32 92 13 f0       	push   $0xf0139232
f011ee16:	68 8a 04 00 00       	push   $0x48a
f011ee1b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ee20:	e8 8b 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee25:	ff 45 e8             	incl   -0x18(%ebp)
f011ee28:	83 ec 08             	sub    $0x8,%esp
f011ee2b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee2e:	68 34 94 13 f0       	push   $0xf0139434
f011ee33:	e8 f9 1f fe ff       	call   f0100e31 <cprintf>
f011ee38:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee3b:	e8 d2 d7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ee40:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee43:	e8 70 54 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ee48:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011ee4b:	83 ec 0c             	sub    $0xc,%esp
f011ee4e:	68 00 00 08 00       	push   $0x80000
f011ee53:	e8 3b 8d fe ff       	call   f0107b93 <kmalloc>
f011ee58:	83 c4 10             	add    $0x10,%esp
f011ee5b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011ee61:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ee68:	10 00 00 
f011ee6b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ee70:	0f b6 d0             	movzbl %al,%edx
f011ee73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ee79:	01 d0                	add    %edx,%eax
f011ee7b:	48                   	dec    %eax
f011ee7c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ee82:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee88:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee8d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ee93:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee99:	29 d0                	sub    %edx,%eax
f011ee9b:	89 c1                	mov    %eax,%ecx
f011ee9d:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011eea4:	10 00 00 
f011eea7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011eeac:	0f b6 c0             	movzbl %al,%eax
f011eeaf:	c1 e0 04             	shl    $0x4,%eax
f011eeb2:	89 c2                	mov    %eax,%edx
f011eeb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eeba:	01 d0                	add    %edx,%eax
f011eebc:	48                   	dec    %eax
f011eebd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011eec3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011eec9:	ba 00 00 00 00       	mov    $0x0,%edx
f011eece:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011eed4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011eeda:	29 d0                	sub    %edx,%eax
f011eedc:	01 c8                	add    %ecx,%eax
f011eede:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011eee4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eeea:	39 c2                	cmp    %eax,%edx
f011eeec:	74 17                	je     f011ef05 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011eeee:	83 ec 04             	sub    $0x4,%esp
f011eef1:	68 14 94 13 f0       	push   $0xf0139414
f011eef6:	68 91 04 00 00       	push   $0x491
f011eefb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ef00:	e8 ab 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef05:	e8 ae 53 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ef0a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef0d:	74 17                	je     f011ef26 <test_kmalloc_worstfit+0xf31>
f011ef0f:	83 ec 04             	sub    $0x4,%esp
f011ef12:	68 14 8d 13 f0       	push   $0xf0138d14
f011ef17:	68 92 04 00 00       	push   $0x492
f011ef1c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ef21:	e8 8a 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ef26:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef29:	e8 e4 d6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ef2e:	29 c3                	sub    %eax,%ebx
f011ef30:	89 d8                	mov    %ebx,%eax
f011ef32:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ef37:	74 17                	je     f011ef50 <test_kmalloc_worstfit+0xf5b>
f011ef39:	83 ec 04             	sub    $0x4,%esp
f011ef3c:	68 32 92 13 f0       	push   $0xf0139232
f011ef41:	68 93 04 00 00       	push   $0x493
f011ef46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ef4b:	e8 60 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef50:	ff 45 e8             	incl   -0x18(%ebp)
f011ef53:	83 ec 08             	sub    $0x8,%esp
f011ef56:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef59:	68 34 94 13 f0       	push   $0xf0139434
f011ef5e:	e8 ce 1e fe ff       	call   f0100e31 <cprintf>
f011ef63:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef66:	e8 a7 d6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011ef6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef6e:	e8 45 53 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011ef73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011ef76:	83 ec 0c             	sub    $0xc,%esp
f011ef79:	68 00 04 00 00       	push   $0x400
f011ef7e:	e8 10 8c fe ff       	call   f0107b93 <kmalloc>
f011ef83:	83 c4 10             	add    $0x10,%esp
f011ef86:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011ef8c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ef93:	10 00 00 
f011ef96:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011ef9b:	0f b6 d0             	movzbl %al,%edx
f011ef9e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011efa4:	01 d0                	add    %edx,%eax
f011efa6:	48                   	dec    %eax
f011efa7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011efad:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011efb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb8:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011efbe:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011efc4:	29 d0                	sub    %edx,%eax
f011efc6:	89 c1                	mov    %eax,%ecx
f011efc8:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011efcf:	10 00 00 
f011efd2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011efd7:	0f b6 c0             	movzbl %al,%eax
f011efda:	c1 e0 04             	shl    $0x4,%eax
f011efdd:	89 c2                	mov    %eax,%edx
f011efdf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011efe5:	01 d0                	add    %edx,%eax
f011efe7:	48                   	dec    %eax
f011efe8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011efee:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011eff4:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff9:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011efff:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f005:	29 d0                	sub    %edx,%eax
f011f007:	01 c8                	add    %ecx,%eax
f011f009:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f00f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f015:	39 c2                	cmp    %eax,%edx
f011f017:	74 17                	je     f011f030 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f019:	83 ec 04             	sub    $0x4,%esp
f011f01c:	68 14 94 13 f0       	push   $0xf0139414
f011f021:	68 9a 04 00 00       	push   $0x49a
f011f026:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f02b:	e8 80 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f030:	e8 83 52 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f035:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f038:	74 17                	je     f011f051 <test_kmalloc_worstfit+0x105c>
f011f03a:	83 ec 04             	sub    $0x4,%esp
f011f03d:	68 14 8d 13 f0       	push   $0xf0138d14
f011f042:	68 9b 04 00 00       	push   $0x49b
f011f047:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f04c:	e8 5f 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f051:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f054:	e8 b9 d5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f059:	29 c3                	sub    %eax,%ebx
f011f05b:	89 d8                	mov    %ebx,%eax
f011f05d:	83 f8 01             	cmp    $0x1,%eax
f011f060:	74 17                	je     f011f079 <test_kmalloc_worstfit+0x1084>
f011f062:	83 ec 04             	sub    $0x4,%esp
f011f065:	68 32 92 13 f0       	push   $0xf0139232
f011f06a:	68 9c 04 00 00       	push   $0x49c
f011f06f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f074:	e8 37 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f079:	ff 45 e8             	incl   -0x18(%ebp)
f011f07c:	83 ec 08             	sub    $0x8,%esp
f011f07f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f082:	68 34 94 13 f0       	push   $0xf0139434
f011f087:	e8 a5 1d fe ff       	call   f0100e31 <cprintf>
f011f08c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f08f:	e8 7e d5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f094:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f097:	e8 1c 52 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f09c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f09f:	83 ec 0c             	sub    $0xc,%esp
f011f0a2:	68 00 f0 1f 00       	push   $0x1ff000
f011f0a7:	e8 e7 8a fe ff       	call   f0107b93 <kmalloc>
f011f0ac:	83 c4 10             	add    $0x10,%esp
f011f0af:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f0b5:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f0bc:	10 00 00 
f011f0bf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f0c4:	0f b6 d0             	movzbl %al,%edx
f011f0c7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f0cd:	01 d0                	add    %edx,%eax
f011f0cf:	48                   	dec    %eax
f011f0d0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f0d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f0dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e1:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f0e7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f0ed:	29 d0                	sub    %edx,%eax
f011f0ef:	89 c1                	mov    %eax,%ecx
f011f0f1:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f0f8:	10 00 00 
f011f0fb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f100:	0f b6 c0             	movzbl %al,%eax
f011f103:	c1 e0 04             	shl    $0x4,%eax
f011f106:	89 c2                	mov    %eax,%edx
f011f108:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f10e:	01 d0                	add    %edx,%eax
f011f110:	48                   	dec    %eax
f011f111:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f117:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f11d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f122:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f128:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f12e:	29 d0                	sub    %edx,%eax
f011f130:	01 c8                	add    %ecx,%eax
f011f132:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f138:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f13e:	39 c2                	cmp    %eax,%edx
f011f140:	74 17                	je     f011f159 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f142:	83 ec 04             	sub    $0x4,%esp
f011f145:	68 14 94 13 f0       	push   $0xf0139414
f011f14a:	68 a3 04 00 00       	push   $0x4a3
f011f14f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f154:	e8 57 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f159:	e8 5a 51 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f15e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f161:	74 17                	je     f011f17a <test_kmalloc_worstfit+0x1185>
f011f163:	83 ec 04             	sub    $0x4,%esp
f011f166:	68 14 8d 13 f0       	push   $0xf0138d14
f011f16b:	68 a4 04 00 00       	push   $0x4a4
f011f170:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f175:	e8 36 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f17a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f17d:	e8 90 d4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f182:	29 c3                	sub    %eax,%ebx
f011f184:	89 d8                	mov    %ebx,%eax
f011f186:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f18b:	74 17                	je     f011f1a4 <test_kmalloc_worstfit+0x11af>
f011f18d:	83 ec 04             	sub    $0x4,%esp
f011f190:	68 32 92 13 f0       	push   $0xf0139232
f011f195:	68 a5 04 00 00       	push   $0x4a5
f011f19a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f19f:	e8 0c 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1a4:	ff 45 e8             	incl   -0x18(%ebp)
f011f1a7:	83 ec 08             	sub    $0x8,%esp
f011f1aa:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1ad:	68 34 94 13 f0       	push   $0xf0139434
f011f1b2:	e8 7a 1c fe ff       	call   f0100e31 <cprintf>
f011f1b7:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f1ba:	e8 53 d4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f1bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1c2:	e8 f1 50 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f1c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f1ca:	83 ec 0c             	sub    $0xc,%esp
f011f1cd:	68 00 00 40 00       	push   $0x400000
f011f1d2:	e8 bc 89 fe ff       	call   f0107b93 <kmalloc>
f011f1d7:	83 c4 10             	add    $0x10,%esp
f011f1da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f1e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f1e6:	85 c0                	test   %eax,%eax
f011f1e8:	74 17                	je     f011f201 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f1ea:	83 ec 04             	sub    $0x4,%esp
f011f1ed:	68 14 94 13 f0       	push   $0xf0139414
f011f1f2:	68 ad 04 00 00       	push   $0x4ad
f011f1f7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f1fc:	e8 af 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f201:	e8 b2 50 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f206:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f209:	74 17                	je     f011f222 <test_kmalloc_worstfit+0x122d>
f011f20b:	83 ec 04             	sub    $0x4,%esp
f011f20e:	68 14 8d 13 f0       	push   $0xf0138d14
f011f213:	68 ae 04 00 00       	push   $0x4ae
f011f218:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f21d:	e8 8e 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f222:	e8 eb d3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f227:	89 c2                	mov    %eax,%edx
f011f229:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f22c:	39 c2                	cmp    %eax,%edx
f011f22e:	74 17                	je     f011f247 <test_kmalloc_worstfit+0x1252>
f011f230:	83 ec 04             	sub    $0x4,%esp
f011f233:	68 32 92 13 f0       	push   $0xf0139232
f011f238:	68 af 04 00 00       	push   $0x4af
f011f23d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f242:	e8 69 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f247:	ff 45 e8             	incl   -0x18(%ebp)
f011f24a:	83 ec 08             	sub    $0x8,%esp
f011f24d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f250:	68 34 94 13 f0       	push   $0xf0139434
f011f255:	e8 d7 1b fe ff       	call   f0100e31 <cprintf>
f011f25a:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f25d:	83 ec 0c             	sub    $0xc,%esp
f011f260:	68 48 94 13 f0       	push   $0xf0139448
f011f265:	e8 c7 1b fe ff       	call   f0100e31 <cprintf>
f011f26a:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f26d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f272:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f275:	5b                   	pop    %ebx
f011f276:	5f                   	pop    %edi
f011f277:	5d                   	pop    %ebp
f011f278:	c3                   	ret    

f011f279 <test_kfree>:

int test_kfree()
{
f011f279:	55                   	push   %ebp
f011f27a:	89 e5                	mov    %esp,%ebp
f011f27c:	57                   	push   %edi
f011f27d:	53                   	push   %ebx
f011f27e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f284:	83 ec 0c             	sub    $0xc,%esp
f011f287:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011f28c:	e8 a0 1b fe ff       	call   f0100e31 <cprintf>
f011f291:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f294:	83 ec 0c             	sub    $0xc,%esp
f011f297:	68 6c 8c 13 f0       	push   $0xf0138c6c
f011f29c:	e8 90 1b fe ff       	call   f0100e31 <cprintf>
f011f2a1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f2a4:	83 ec 0c             	sub    $0xc,%esp
f011f2a7:	68 3c 8c 13 f0       	push   $0xf0138c3c
f011f2ac:	e8 80 1b fe ff       	call   f0100e31 <cprintf>
f011f2b1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f2b4:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f2b8:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f2bc:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f2c2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f2c8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f2cf:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f2d6:	e8 37 d3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f2db:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f2de:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f2e4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2e9:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2ee:	89 d7                	mov    %edx,%edi
f011f2f0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f2f2:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f2f8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2fd:	b8 00 00 00 00       	mov    $0x0,%eax
f011f302:	89 d7                	mov    %edx,%edi
f011f304:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f306:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f30c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f311:	b8 00 00 00 00       	mov    $0x0,%eax
f011f316:	89 d7                	mov    %edx,%edi
f011f318:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f31a:	e8 f3 d2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f31f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f322:	e8 91 4f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f327:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f32a:	83 ec 0c             	sub    $0xc,%esp
f011f32d:	68 00 fc 1f 00       	push   $0x1ffc00
f011f332:	e8 5c 88 fe ff       	call   f0107b93 <kmalloc>
f011f337:	83 c4 10             	add    $0x10,%esp
f011f33a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f340:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f346:	89 c1                	mov    %eax,%ecx
f011f348:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f34f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f354:	0f b6 d0             	movzbl %al,%edx
f011f357:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f35a:	01 d0                	add    %edx,%eax
f011f35c:	48                   	dec    %eax
f011f35d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f360:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f363:	ba 00 00 00 00       	mov    $0x0,%edx
f011f368:	f7 75 c8             	divl   -0x38(%ebp)
f011f36b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f36e:	29 d0                	sub    %edx,%eax
f011f370:	89 c3                	mov    %eax,%ebx
f011f372:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f379:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f37e:	0f b6 c0             	movzbl %al,%eax
f011f381:	c1 e0 04             	shl    $0x4,%eax
f011f384:	89 c2                	mov    %eax,%edx
f011f386:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f389:	01 d0                	add    %edx,%eax
f011f38b:	48                   	dec    %eax
f011f38c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f38f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f392:	ba 00 00 00 00       	mov    $0x0,%edx
f011f397:	f7 75 c0             	divl   -0x40(%ebp)
f011f39a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f39d:	29 d0                	sub    %edx,%eax
f011f39f:	01 d8                	add    %ebx,%eax
f011f3a1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f3a6:	39 c1                	cmp    %eax,%ecx
f011f3a8:	74 17                	je     f011f3c1 <test_kfree+0x148>
f011f3aa:	83 ec 04             	sub    $0x4,%esp
f011f3ad:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f3b2:	68 d7 04 00 00       	push   $0x4d7
f011f3b7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f3bc:	e8 ef 0d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3c1:	e8 f2 4e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f3c6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f3c9:	74 17                	je     f011f3e2 <test_kfree+0x169>
f011f3cb:	83 ec 04             	sub    $0x4,%esp
f011f3ce:	68 14 8d 13 f0       	push   $0xf0138d14
f011f3d3:	68 d8 04 00 00       	push   $0x4d8
f011f3d8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f3dd:	e8 ce 0d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3e2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f3e5:	e8 28 d2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f3ea:	29 c3                	sub    %eax,%ebx
f011f3ec:	89 d8                	mov    %ebx,%eax
f011f3ee:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f3f3:	74 17                	je     f011f40c <test_kfree+0x193>
f011f3f5:	83 ec 04             	sub    $0x4,%esp
f011f3f8:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f3fd:	68 d9 04 00 00       	push   $0x4d9
f011f402:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f407:	e8 a4 0d fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f40c:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f413:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f416:	e8 f7 d1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f41b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f41e:	e8 95 4e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f423:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f426:	83 ec 0c             	sub    $0xc,%esp
f011f429:	68 00 fc 1f 00       	push   $0x1ffc00
f011f42e:	e8 60 87 fe ff       	call   f0107b93 <kmalloc>
f011f433:	83 c4 10             	add    $0x10,%esp
f011f436:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f43c:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f442:	89 c1                	mov    %eax,%ecx
f011f444:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f44b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f450:	0f b6 d0             	movzbl %al,%edx
f011f453:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f456:	01 d0                	add    %edx,%eax
f011f458:	48                   	dec    %eax
f011f459:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f45c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f45f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f464:	f7 75 b8             	divl   -0x48(%ebp)
f011f467:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f46a:	29 d0                	sub    %edx,%eax
f011f46c:	89 c3                	mov    %eax,%ebx
f011f46e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f475:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f47a:	0f b6 c0             	movzbl %al,%eax
f011f47d:	c1 e0 04             	shl    $0x4,%eax
f011f480:	89 c2                	mov    %eax,%edx
f011f482:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f485:	01 d0                	add    %edx,%eax
f011f487:	48                   	dec    %eax
f011f488:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f48b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f48e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f493:	f7 75 b0             	divl   -0x50(%ebp)
f011f496:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f499:	29 d0                	sub    %edx,%eax
f011f49b:	01 d8                	add    %ebx,%eax
f011f49d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f4a2:	39 c1                	cmp    %eax,%ecx
f011f4a4:	74 17                	je     f011f4bd <test_kfree+0x244>
f011f4a6:	83 ec 04             	sub    $0x4,%esp
f011f4a9:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f4ae:	68 e0 04 00 00       	push   $0x4e0
f011f4b3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f4b8:	e8 f3 0c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4bd:	e8 f6 4d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f4c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f4c5:	74 17                	je     f011f4de <test_kfree+0x265>
f011f4c7:	83 ec 04             	sub    $0x4,%esp
f011f4ca:	68 14 8d 13 f0       	push   $0xf0138d14
f011f4cf:	68 e1 04 00 00       	push   $0x4e1
f011f4d4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f4d9:	e8 d2 0c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f4de:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f4e1:	e8 2c d1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f4e6:	29 c3                	sub    %eax,%ebx
f011f4e8:	89 d8                	mov    %ebx,%eax
f011f4ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f4ef:	74 17                	je     f011f508 <test_kfree+0x28f>
f011f4f1:	83 ec 04             	sub    $0x4,%esp
f011f4f4:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f4f9:	68 e2 04 00 00       	push   $0x4e2
f011f4fe:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f503:	e8 a8 0c fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f508:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f50f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f512:	e8 fb d0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f517:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f51a:	e8 99 4d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f51f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f522:	83 ec 0c             	sub    $0xc,%esp
f011f525:	68 00 08 00 00       	push   $0x800
f011f52a:	e8 64 86 fe ff       	call   f0107b93 <kmalloc>
f011f52f:	83 c4 10             	add    $0x10,%esp
f011f532:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f538:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f53e:	89 c1                	mov    %eax,%ecx
f011f540:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f547:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f54c:	0f b6 d0             	movzbl %al,%edx
f011f54f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f552:	01 d0                	add    %edx,%eax
f011f554:	48                   	dec    %eax
f011f555:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f558:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f55b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f560:	f7 75 a8             	divl   -0x58(%ebp)
f011f563:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f566:	29 d0                	sub    %edx,%eax
f011f568:	89 c3                	mov    %eax,%ebx
f011f56a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f571:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f576:	0f b6 c0             	movzbl %al,%eax
f011f579:	c1 e0 04             	shl    $0x4,%eax
f011f57c:	89 c2                	mov    %eax,%edx
f011f57e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f581:	01 d0                	add    %edx,%eax
f011f583:	48                   	dec    %eax
f011f584:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f587:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f58a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f58f:	f7 75 a0             	divl   -0x60(%ebp)
f011f592:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f595:	29 d0                	sub    %edx,%eax
f011f597:	01 d8                	add    %ebx,%eax
f011f599:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f59e:	39 c1                	cmp    %eax,%ecx
f011f5a0:	74 17                	je     f011f5b9 <test_kfree+0x340>
f011f5a2:	83 ec 04             	sub    $0x4,%esp
f011f5a5:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f5aa:	68 e9 04 00 00       	push   $0x4e9
f011f5af:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f5b4:	e8 f7 0b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5b9:	e8 fa 4c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f5be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f5c1:	74 17                	je     f011f5da <test_kfree+0x361>
f011f5c3:	83 ec 04             	sub    $0x4,%esp
f011f5c6:	68 14 8d 13 f0       	push   $0xf0138d14
f011f5cb:	68 ea 04 00 00       	push   $0x4ea
f011f5d0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f5d5:	e8 d6 0b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f5da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f5dd:	e8 30 d0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f5e2:	29 c3                	sub    %eax,%ebx
f011f5e4:	89 d8                	mov    %ebx,%eax
f011f5e6:	83 f8 01             	cmp    $0x1,%eax
f011f5e9:	74 17                	je     f011f602 <test_kfree+0x389>
f011f5eb:	83 ec 04             	sub    $0x4,%esp
f011f5ee:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f5f3:	68 eb 04 00 00       	push   $0x4eb
f011f5f8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f5fd:	e8 ae 0b fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f602:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f609:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f60c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f612:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f615:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f61c:	eb 0e                	jmp    f011f62c <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f61e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f621:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f624:	01 d0                	add    %edx,%eax
f011f626:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f629:	ff 45 f4             	incl   -0xc(%ebp)
f011f62c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f632:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f635:	7f e7                	jg     f011f61e <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f637:	e8 d6 cf fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f63c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f63f:	e8 74 4c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f644:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f647:	83 ec 0c             	sub    $0xc,%esp
f011f64a:	68 00 08 00 00       	push   $0x800
f011f64f:	e8 3f 85 fe ff       	call   f0107b93 <kmalloc>
f011f654:	83 c4 10             	add    $0x10,%esp
f011f657:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f65d:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f663:	89 c1                	mov    %eax,%ecx
f011f665:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f66c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f671:	0f b6 d0             	movzbl %al,%edx
f011f674:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f677:	01 d0                	add    %edx,%eax
f011f679:	48                   	dec    %eax
f011f67a:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f67d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f680:	ba 00 00 00 00       	mov    $0x0,%edx
f011f685:	f7 75 94             	divl   -0x6c(%ebp)
f011f688:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f68b:	29 d0                	sub    %edx,%eax
f011f68d:	89 c3                	mov    %eax,%ebx
f011f68f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f696:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f69b:	0f b6 c0             	movzbl %al,%eax
f011f69e:	c1 e0 04             	shl    $0x4,%eax
f011f6a1:	89 c2                	mov    %eax,%edx
f011f6a3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f6a6:	01 d0                	add    %edx,%eax
f011f6a8:	48                   	dec    %eax
f011f6a9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f6ac:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f6af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b4:	f7 75 8c             	divl   -0x74(%ebp)
f011f6b7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f6ba:	29 d0                	sub    %edx,%eax
f011f6bc:	01 d8                	add    %ebx,%eax
f011f6be:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f6c3:	39 c1                	cmp    %eax,%ecx
f011f6c5:	74 17                	je     f011f6de <test_kfree+0x465>
f011f6c7:	83 ec 04             	sub    $0x4,%esp
f011f6ca:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f6cf:	68 f7 04 00 00       	push   $0x4f7
f011f6d4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f6d9:	e8 d2 0a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6de:	e8 d5 4b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f6e3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f6e6:	74 17                	je     f011f6ff <test_kfree+0x486>
f011f6e8:	83 ec 04             	sub    $0x4,%esp
f011f6eb:	68 14 8d 13 f0       	push   $0xf0138d14
f011f6f0:	68 f8 04 00 00       	push   $0x4f8
f011f6f5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f6fa:	e8 b1 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f6ff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f702:	e8 0b cf fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f707:	29 c3                	sub    %eax,%ebx
f011f709:	89 d8                	mov    %ebx,%eax
f011f70b:	83 f8 01             	cmp    $0x1,%eax
f011f70e:	74 17                	je     f011f727 <test_kfree+0x4ae>
f011f710:	83 ec 04             	sub    $0x4,%esp
f011f713:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f718:	68 f9 04 00 00       	push   $0x4f9
f011f71d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f722:	e8 89 0a fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f727:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011f72e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f731:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f737:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f73a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f741:	eb 0e                	jmp    f011f751 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011f743:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f746:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f749:	01 d0                	add    %edx,%eax
f011f74b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f74e:	ff 45 f4             	incl   -0xc(%ebp)
f011f751:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f757:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f75a:	7f e7                	jg     f011f743 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f75c:	e8 b1 ce fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f761:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f764:	e8 4f 4b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f769:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f76c:	83 ec 0c             	sub    $0xc,%esp
f011f76f:	68 00 1c 00 00       	push   $0x1c00
f011f774:	e8 1a 84 fe ff       	call   f0107b93 <kmalloc>
f011f779:	83 c4 10             	add    $0x10,%esp
f011f77c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f782:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f788:	89 c1                	mov    %eax,%ecx
f011f78a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f791:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f796:	0f b6 d0             	movzbl %al,%edx
f011f799:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f79c:	01 d0                	add    %edx,%eax
f011f79e:	48                   	dec    %eax
f011f79f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f7a2:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f7a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7aa:	f7 75 84             	divl   -0x7c(%ebp)
f011f7ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f7b0:	29 d0                	sub    %edx,%eax
f011f7b2:	89 c3                	mov    %eax,%ebx
f011f7b4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f7bb:	10 00 00 
f011f7be:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f7c3:	0f b6 c0             	movzbl %al,%eax
f011f7c6:	c1 e0 04             	shl    $0x4,%eax
f011f7c9:	89 c2                	mov    %eax,%edx
f011f7cb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f7d1:	01 d0                	add    %edx,%eax
f011f7d3:	48                   	dec    %eax
f011f7d4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f7da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f7e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7e5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f7eb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f7f1:	29 d0                	sub    %edx,%eax
f011f7f3:	01 d8                	add    %ebx,%eax
f011f7f5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f7fa:	39 c1                	cmp    %eax,%ecx
f011f7fc:	74 17                	je     f011f815 <test_kfree+0x59c>
f011f7fe:	83 ec 04             	sub    $0x4,%esp
f011f801:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f806:	68 05 05 00 00       	push   $0x505
f011f80b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f810:	e8 9b 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f815:	e8 9e 4a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f81a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f81d:	74 17                	je     f011f836 <test_kfree+0x5bd>
f011f81f:	83 ec 04             	sub    $0x4,%esp
f011f822:	68 14 8d 13 f0       	push   $0xf0138d14
f011f827:	68 06 05 00 00       	push   $0x506
f011f82c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f831:	e8 7a 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f836:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f839:	e8 d4 cd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f83e:	29 c3                	sub    %eax,%ebx
f011f840:	89 d8                	mov    %ebx,%eax
f011f842:	83 f8 02             	cmp    $0x2,%eax
f011f845:	74 17                	je     f011f85e <test_kfree+0x5e5>
f011f847:	83 ec 04             	sub    $0x4,%esp
f011f84a:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f84f:	68 07 05 00 00       	push   $0x507
f011f854:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f859:	e8 52 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f85e:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011f865:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f868:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f86e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f871:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f878:	eb 0e                	jmp    f011f888 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011f87a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f87d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f880:	01 d0                	add    %edx,%eax
f011f882:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f885:	ff 45 f4             	incl   -0xc(%ebp)
f011f888:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f88e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f891:	7f e7                	jg     f011f87a <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f893:	e8 7a cd fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f898:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f89b:	e8 18 4a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f8a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f8a3:	83 ec 0c             	sub    $0xc,%esp
f011f8a6:	68 00 fc 2f 00       	push   $0x2ffc00
f011f8ab:	e8 e3 82 fe ff       	call   f0107b93 <kmalloc>
f011f8b0:	83 c4 10             	add    $0x10,%esp
f011f8b3:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8b9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f8bf:	89 c1                	mov    %eax,%ecx
f011f8c1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f8c8:	10 00 00 
f011f8cb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f8d0:	0f b6 d0             	movzbl %al,%edx
f011f8d3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f8d9:	01 d0                	add    %edx,%eax
f011f8db:	48                   	dec    %eax
f011f8dc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f8e2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f8e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8ed:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f8f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f8f9:	29 d0                	sub    %edx,%eax
f011f8fb:	89 c3                	mov    %eax,%ebx
f011f8fd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f904:	10 00 00 
f011f907:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011f90c:	0f b6 c0             	movzbl %al,%eax
f011f90f:	c1 e0 04             	shl    $0x4,%eax
f011f912:	89 c2                	mov    %eax,%edx
f011f914:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f91a:	01 d0                	add    %edx,%eax
f011f91c:	48                   	dec    %eax
f011f91d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f923:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f929:	ba 00 00 00 00       	mov    $0x0,%edx
f011f92e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f934:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f93a:	29 d0                	sub    %edx,%eax
f011f93c:	01 d8                	add    %ebx,%eax
f011f93e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011f943:	39 c1                	cmp    %eax,%ecx
f011f945:	74 17                	je     f011f95e <test_kfree+0x6e5>
f011f947:	83 ec 04             	sub    $0x4,%esp
f011f94a:	68 e0 8d 13 f0       	push   $0xf0138de0
f011f94f:	68 13 05 00 00       	push   $0x513
f011f954:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f959:	e8 52 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f95e:	e8 55 49 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f963:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f966:	74 17                	je     f011f97f <test_kfree+0x706>
f011f968:	83 ec 04             	sub    $0x4,%esp
f011f96b:	68 14 8d 13 f0       	push   $0xf0138d14
f011f970:	68 14 05 00 00       	push   $0x514
f011f975:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f97a:	e8 31 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f97f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f982:	e8 8b cc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f987:	29 c3                	sub    %eax,%ebx
f011f989:	89 d8                	mov    %ebx,%eax
f011f98b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f990:	74 17                	je     f011f9a9 <test_kfree+0x730>
f011f992:	83 ec 04             	sub    $0x4,%esp
f011f995:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011f99a:	68 15 05 00 00       	push   $0x515
f011f99f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011f9a4:	e8 07 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011f9a9:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011f9b0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011f9b3:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f9b9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f9bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f9c3:	eb 0e                	jmp    f011f9d3 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011f9c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f9c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f9cb:	01 d0                	add    %edx,%eax
f011f9cd:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f9d0:	ff 45 f4             	incl   -0xc(%ebp)
f011f9d3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f9d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f9dc:	7f e7                	jg     f011f9c5 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f9de:	e8 2f cc fe ff       	call   f010c612 <sys_calculate_free_frames>
f011f9e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9e6:	e8 cd 48 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011f9eb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011f9ee:	83 ec 0c             	sub    $0xc,%esp
f011f9f1:	68 00 fc 5f 00       	push   $0x5ffc00
f011f9f6:	e8 98 81 fe ff       	call   f0107b93 <kmalloc>
f011f9fb:	83 c4 10             	add    $0x10,%esp
f011f9fe:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa04:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fa0a:	89 c1                	mov    %eax,%ecx
f011fa0c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fa13:	10 00 00 
f011fa16:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fa1b:	0f b6 d0             	movzbl %al,%edx
f011fa1e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fa24:	01 d0                	add    %edx,%eax
f011fa26:	48                   	dec    %eax
f011fa27:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fa2d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fa33:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa38:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fa3e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fa44:	29 d0                	sub    %edx,%eax
f011fa46:	89 c3                	mov    %eax,%ebx
f011fa48:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fa4f:	10 00 00 
f011fa52:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fa57:	0f b6 c0             	movzbl %al,%eax
f011fa5a:	c1 e0 04             	shl    $0x4,%eax
f011fa5d:	89 c2                	mov    %eax,%edx
f011fa5f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fa65:	01 d0                	add    %edx,%eax
f011fa67:	48                   	dec    %eax
f011fa68:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fa6e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fa74:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa79:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fa7f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fa85:	29 d0                	sub    %edx,%eax
f011fa87:	01 d8                	add    %ebx,%eax
f011fa89:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fa8e:	39 c1                	cmp    %eax,%ecx
f011fa90:	74 17                	je     f011faa9 <test_kfree+0x830>
f011fa92:	83 ec 04             	sub    $0x4,%esp
f011fa95:	68 e0 8d 13 f0       	push   $0xf0138de0
f011fa9a:	68 21 05 00 00       	push   $0x521
f011fa9f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011faa4:	e8 07 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011faa9:	e8 0a 48 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011faae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fab1:	74 17                	je     f011faca <test_kfree+0x851>
f011fab3:	83 ec 04             	sub    $0x4,%esp
f011fab6:	68 14 8d 13 f0       	push   $0xf0138d14
f011fabb:	68 22 05 00 00       	push   $0x522
f011fac0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fac5:	e8 e6 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011faca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011facd:	e8 40 cb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fad2:	29 c3                	sub    %eax,%ebx
f011fad4:	89 d8                	mov    %ebx,%eax
f011fad6:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fadb:	74 17                	je     f011faf4 <test_kfree+0x87b>
f011fadd:	83 ec 04             	sub    $0x4,%esp
f011fae0:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011fae5:	68 23 05 00 00       	push   $0x523
f011faea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011faef:	e8 bc 06 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011faf4:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011fafb:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fafe:	e8 0f cb fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fb03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb06:	e8 ad 47 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fb0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fb0e:	83 ec 0c             	sub    $0xc,%esp
f011fb11:	68 00 38 00 00       	push   $0x3800
f011fb16:	e8 78 80 fe ff       	call   f0107b93 <kmalloc>
f011fb1b:	83 c4 10             	add    $0x10,%esp
f011fb1e:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb24:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fb2a:	89 c1                	mov    %eax,%ecx
f011fb2c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fb33:	10 00 00 
f011fb36:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fb3b:	0f b6 d0             	movzbl %al,%edx
f011fb3e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fb44:	01 d0                	add    %edx,%eax
f011fb46:	48                   	dec    %eax
f011fb47:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fb4d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fb53:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb58:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fb5e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fb64:	29 d0                	sub    %edx,%eax
f011fb66:	89 c3                	mov    %eax,%ebx
f011fb68:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fb6f:	10 00 00 
f011fb72:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f011fb77:	0f b6 c0             	movzbl %al,%eax
f011fb7a:	c1 e0 04             	shl    $0x4,%eax
f011fb7d:	89 c2                	mov    %eax,%edx
f011fb7f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fb85:	01 d0                	add    %edx,%eax
f011fb87:	48                   	dec    %eax
f011fb88:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fb8e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fb94:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb99:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011fb9f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fba5:	29 d0                	sub    %edx,%eax
f011fba7:	01 d8                	add    %ebx,%eax
f011fba9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011fbae:	39 c1                	cmp    %eax,%ecx
f011fbb0:	74 17                	je     f011fbc9 <test_kfree+0x950>
f011fbb2:	83 ec 04             	sub    $0x4,%esp
f011fbb5:	68 e0 8d 13 f0       	push   $0xf0138de0
f011fbba:	68 2a 05 00 00       	push   $0x52a
f011fbbf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fbc4:	e8 e7 05 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbc9:	e8 ea 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fbce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbd1:	74 17                	je     f011fbea <test_kfree+0x971>
f011fbd3:	83 ec 04             	sub    $0x4,%esp
f011fbd6:	68 14 8d 13 f0       	push   $0xf0138d14
f011fbdb:	68 2b 05 00 00       	push   $0x52b
f011fbe0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fbe5:	e8 c6 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbed:	e8 20 ca fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fbf2:	29 c3                	sub    %eax,%ebx
f011fbf4:	89 d8                	mov    %ebx,%eax
f011fbf6:	83 f8 04             	cmp    $0x4,%eax
f011fbf9:	74 17                	je     f011fc12 <test_kfree+0x999>
f011fbfb:	83 ec 04             	sub    $0x4,%esp
f011fbfe:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011fc03:	68 2c 05 00 00       	push   $0x52c
f011fc08:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fc0d:	e8 9e 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011fc12:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011fc19:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011fc1c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fc22:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fc25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc2c:	eb 0e                	jmp    f011fc3c <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011fc2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc31:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fc34:	01 d0                	add    %edx,%eax
f011fc36:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fc39:	ff 45 f4             	incl   -0xc(%ebp)
f011fc3c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fc42:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc45:	7f e7                	jg     f011fc2e <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fc47:	e8 c6 c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fc4c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fc52:	e8 61 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fc57:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011fc5d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011fc63:	83 ec 0c             	sub    $0xc,%esp
f011fc66:	50                   	push   %eax
f011fc67:	e8 41 7f fe ff       	call   f0107bad <kfree>
f011fc6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc6f:	e8 44 46 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fc74:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fc7a:	74 17                	je     f011fc93 <test_kfree+0xa1a>
f011fc7c:	83 ec 04             	sub    $0x4,%esp
f011fc7f:	68 14 8d 13 f0       	push   $0xf0138d14
f011fc84:	68 3b 05 00 00       	push   $0x53b
f011fc89:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fc8e:	e8 1d 05 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fc93:	e8 7a c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fc98:	89 c2                	mov    %eax,%edx
f011fc9a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fca0:	29 c2                	sub    %eax,%edx
f011fca2:	89 d0                	mov    %edx,%eax
f011fca4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fca9:	74 17                	je     f011fcc2 <test_kfree+0xa49>
f011fcab:	83 ec 04             	sub    $0x4,%esp
f011fcae:	68 84 94 13 f0       	push   $0xf0139484
f011fcb3:	68 3c 05 00 00       	push   $0x53c
f011fcb8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fcbd:	e8 ee 04 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fcc2:	e8 4b c9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fcc7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fccd:	e8 e6 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fcd2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f011fcd8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fcde:	83 ec 0c             	sub    $0xc,%esp
f011fce1:	50                   	push   %eax
f011fce2:	e8 c6 7e fe ff       	call   f0107bad <kfree>
f011fce7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcea:	e8 c9 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fcef:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fcf5:	74 17                	je     f011fd0e <test_kfree+0xa95>
f011fcf7:	83 ec 04             	sub    $0x4,%esp
f011fcfa:	68 14 8d 13 f0       	push   $0xf0138d14
f011fcff:	68 42 05 00 00       	push   $0x542
f011fd04:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fd09:	e8 a2 04 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fd0e:	e8 ff c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fd13:	89 c2                	mov    %eax,%edx
f011fd15:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fd1b:	29 c2                	sub    %eax,%edx
f011fd1d:	89 d0                	mov    %edx,%eax
f011fd1f:	83 f8 01             	cmp    $0x1,%eax
f011fd22:	74 17                	je     f011fd3b <test_kfree+0xac2>
f011fd24:	83 ec 04             	sub    $0x4,%esp
f011fd27:	68 84 94 13 f0       	push   $0xf0139484
f011fd2c:	68 43 05 00 00       	push   $0x543
f011fd31:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fd36:	e8 75 04 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd3b:	e8 d2 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fd40:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd46:	e8 6d 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fd4b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f011fd51:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011fd57:	83 ec 0c             	sub    $0xc,%esp
f011fd5a:	50                   	push   %eax
f011fd5b:	e8 4d 7e fe ff       	call   f0107bad <kfree>
f011fd60:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd63:	e8 50 45 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fd68:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fd6e:	74 17                	je     f011fd87 <test_kfree+0xb0e>
f011fd70:	83 ec 04             	sub    $0x4,%esp
f011fd73:	68 14 8d 13 f0       	push   $0xf0138d14
f011fd78:	68 49 05 00 00       	push   $0x549
f011fd7d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fd82:	e8 29 04 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011fd87:	e8 86 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fd8c:	89 c2                	mov    %eax,%edx
f011fd8e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fd94:	29 c2                	sub    %eax,%edx
f011fd96:	89 d0                	mov    %edx,%eax
f011fd98:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fd9d:	74 17                	je     f011fdb6 <test_kfree+0xb3d>
f011fd9f:	83 ec 04             	sub    $0x4,%esp
f011fda2:	68 84 94 13 f0       	push   $0xf0139484
f011fda7:	68 4a 05 00 00       	push   $0x54a
f011fdac:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fdb1:	e8 fa 03 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fdb6:	e8 57 c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fdbb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdc1:	e8 f2 44 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fdc6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f011fdcc:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fdd2:	83 ec 0c             	sub    $0xc,%esp
f011fdd5:	50                   	push   %eax
f011fdd6:	e8 d2 7d fe ff       	call   f0107bad <kfree>
f011fddb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdde:	e8 d5 44 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f011fde3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fde9:	74 17                	je     f011fe02 <test_kfree+0xb89>
f011fdeb:	83 ec 04             	sub    $0x4,%esp
f011fdee:	68 14 8d 13 f0       	push   $0xf0138d14
f011fdf3:	68 50 05 00 00       	push   $0x550
f011fdf8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fdfd:	e8 ae 03 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011fe02:	e8 0b c8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fe07:	89 c2                	mov    %eax,%edx
f011fe09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fe0f:	29 c2                	sub    %eax,%edx
f011fe11:	89 d0                	mov    %edx,%eax
f011fe13:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fe18:	74 17                	je     f011fe31 <test_kfree+0xbb8>
f011fe1a:	83 ec 04             	sub    $0x4,%esp
f011fe1d:	68 84 94 13 f0       	push   $0xf0139484
f011fe22:	68 51 05 00 00       	push   $0x551
f011fe27:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fe2c:	e8 7f 03 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011fe31:	83 ec 0c             	sub    $0xc,%esp
f011fe34:	68 bc 94 13 f0       	push   $0xf01394bc
f011fe39:	e8 f3 0f fe ff       	call   f0100e31 <cprintf>
f011fe3e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011fe41:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fe47:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fe4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe51:	eb 1e                	jmp    f011fe71 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f011fe53:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011fe59:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fe5c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fe5f:	01 c8                	add    %ecx,%eax
f011fe61:	8a 00                	mov    (%eax),%al
f011fe63:	0f be c0             	movsbl %al,%eax
f011fe66:	01 d0                	add    %edx,%eax
f011fe68:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fe6e:	ff 45 f4             	incl   -0xc(%ebp)
f011fe71:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe7a:	7f d7                	jg     f011fe53 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011fe7c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011fe82:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe88:	89 c1                	mov    %eax,%ecx
f011fe8a:	01 c9                	add    %ecx,%ecx
f011fe8c:	01 c8                	add    %ecx,%eax
f011fe8e:	39 c2                	cmp    %eax,%edx
f011fe90:	74 17                	je     f011fea9 <test_kfree+0xc30>
f011fe92:	83 ec 04             	sub    $0x4,%esp
f011fe95:	68 e0 94 13 f0       	push   $0xf01394e0
f011fe9a:	68 5e 05 00 00       	push   $0x55e
f011fe9f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011fea4:	e8 07 03 fe ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011fea9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011feaf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011feb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011feb9:	eb 1e                	jmp    f011fed9 <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f011febb:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f011fec1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fec4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fec7:	01 c8                	add    %ecx,%eax
f011fec9:	8a 00                	mov    (%eax),%al
f011fecb:	0f be c0             	movsbl %al,%eax
f011fece:	01 d0                	add    %edx,%eax
f011fed0:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fed6:	ff 45 f4             	incl   -0xc(%ebp)
f011fed9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fedf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fee2:	7f d7                	jg     f011febb <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011fee4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011feea:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f011fef0:	c1 e2 02             	shl    $0x2,%edx
f011fef3:	39 d0                	cmp    %edx,%eax
f011fef5:	74 17                	je     f011ff0e <test_kfree+0xc95>
f011fef7:	83 ec 04             	sub    $0x4,%esp
f011fefa:	68 e0 94 13 f0       	push   $0xf01394e0
f011feff:	68 66 05 00 00       	push   $0x566
f011ff04:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ff09:	e8 a2 02 fe ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011ff0e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011ff14:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011ff17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff1e:	eb 1e                	jmp    f011ff3e <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f011ff20:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f011ff26:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ff29:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff2c:	01 c8                	add    %ecx,%eax
f011ff2e:	8a 00                	mov    (%eax),%al
f011ff30:	0f be c0             	movsbl %al,%eax
f011ff33:	01 d0                	add    %edx,%eax
f011ff35:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011ff3b:	ff 45 f4             	incl   -0xc(%ebp)
f011ff3e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ff44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff47:	7f d7                	jg     f011ff20 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011ff49:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f011ff4f:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f011ff55:	89 d0                	mov    %edx,%eax
f011ff57:	c1 e0 02             	shl    $0x2,%eax
f011ff5a:	01 d0                	add    %edx,%eax
f011ff5c:	39 c1                	cmp    %eax,%ecx
f011ff5e:	74 17                	je     f011ff77 <test_kfree+0xcfe>
f011ff60:	83 ec 04             	sub    $0x4,%esp
f011ff63:	68 e0 94 13 f0       	push   $0xf01394e0
f011ff68:	68 6e 05 00 00       	push   $0x56e
f011ff6d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ff72:	e8 39 02 fe ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011ff77:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ff7d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ff80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff87:	eb 1e                	jmp    f011ffa7 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f011ff89:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f011ff8f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ff92:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff95:	01 c8                	add    %ecx,%eax
f011ff97:	8a 00                	mov    (%eax),%al
f011ff99:	0f be c0             	movsbl %al,%eax
f011ff9c:	01 d0                	add    %edx,%eax
f011ff9e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ffa4:	ff 45 f4             	incl   -0xc(%ebp)
f011ffa7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ffad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffb0:	7f d7                	jg     f011ff89 <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011ffb2:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f011ffb8:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f011ffbe:	89 d0                	mov    %edx,%eax
f011ffc0:	01 c0                	add    %eax,%eax
f011ffc2:	01 d0                	add    %edx,%eax
f011ffc4:	01 c0                	add    %eax,%eax
f011ffc6:	01 d0                	add    %edx,%eax
f011ffc8:	39 c1                	cmp    %eax,%ecx
f011ffca:	74 17                	je     f011ffe3 <test_kfree+0xd6a>
f011ffcc:	83 ec 04             	sub    $0x4,%esp
f011ffcf:	68 e0 94 13 f0       	push   $0xf01394e0
f011ffd4:	68 76 05 00 00       	push   $0x576
f011ffd9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f011ffde:	e8 cd 01 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f011ffe3:	83 ec 0c             	sub    $0xc,%esp
f011ffe6:	68 13 95 13 f0       	push   $0xf0139513
f011ffeb:	e8 41 0e fe ff       	call   f0100e31 <cprintf>
f011fff0:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011fff3:	e8 1a c6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f011fff8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fffb:	e8 b8 42 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120000:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120003:	83 ec 0c             	sub    $0xc,%esp
f0120006:	68 00 50 00 00       	push   $0x5000
f012000b:	e8 83 7b fe ff       	call   f0107b93 <kmalloc>
f0120010:	83 c4 10             	add    $0x10,%esp
f0120013:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120019:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012001f:	89 c1                	mov    %eax,%ecx
f0120021:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120028:	10 00 00 
f012002b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120030:	0f b6 d0             	movzbl %al,%edx
f0120033:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120039:	01 d0                	add    %edx,%eax
f012003b:	48                   	dec    %eax
f012003c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120042:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120048:	ba 00 00 00 00       	mov    $0x0,%edx
f012004d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120053:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120059:	29 d0                	sub    %edx,%eax
f012005b:	89 c3                	mov    %eax,%ebx
f012005d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120064:	10 00 00 
f0120067:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012006c:	0f b6 c0             	movzbl %al,%eax
f012006f:	c1 e0 04             	shl    $0x4,%eax
f0120072:	89 c2                	mov    %eax,%edx
f0120074:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012007a:	01 d0                	add    %edx,%eax
f012007c:	48                   	dec    %eax
f012007d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120083:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120089:	ba 00 00 00 00       	mov    $0x0,%edx
f012008e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120094:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012009a:	29 d0                	sub    %edx,%eax
f012009c:	01 d8                	add    %ebx,%eax
f012009e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01200a3:	39 c1                	cmp    %eax,%ecx
f01200a5:	74 17                	je     f01200be <test_kfree+0xe45>
f01200a7:	83 ec 04             	sub    $0x4,%esp
f01200aa:	68 e0 8d 13 f0       	push   $0xf0138de0
f01200af:	68 80 05 00 00       	push   $0x580
f01200b4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01200b9:	e8 f2 00 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200be:	e8 f5 41 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01200c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200c6:	74 17                	je     f01200df <test_kfree+0xe66>
f01200c8:	83 ec 04             	sub    $0x4,%esp
f01200cb:	68 14 8d 13 f0       	push   $0xf0138d14
f01200d0:	68 81 05 00 00       	push   $0x581
f01200d5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01200da:	e8 d1 00 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01200df:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200e2:	e8 2b c5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01200e7:	29 c3                	sub    %eax,%ebx
f01200e9:	89 d8                	mov    %ebx,%eax
f01200eb:	83 f8 05             	cmp    $0x5,%eax
f01200ee:	74 17                	je     f0120107 <test_kfree+0xe8e>
f01200f0:	83 ec 04             	sub    $0x4,%esp
f01200f3:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01200f8:	68 82 05 00 00       	push   $0x582
f01200fd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120102:	e8 a9 00 fe ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120107:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f012010e:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120111:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120117:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012011a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120121:	eb 0e                	jmp    f0120131 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120123:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120126:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120129:	01 d0                	add    %edx,%eax
f012012b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012012e:	ff 45 f4             	incl   -0xc(%ebp)
f0120131:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120137:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012013a:	7f e7                	jg     f0120123 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012013c:	e8 d1 c4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120141:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120144:	e8 6f 41 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120149:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012014c:	83 ec 0c             	sub    $0xc,%esp
f012014f:	68 00 00 10 00       	push   $0x100000
f0120154:	e8 3a 7a fe ff       	call   f0107b93 <kmalloc>
f0120159:	83 c4 10             	add    $0x10,%esp
f012015c:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120162:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120168:	89 c1                	mov    %eax,%ecx
f012016a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120171:	10 00 00 
f0120174:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120179:	0f b6 d0             	movzbl %al,%edx
f012017c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120182:	01 d0                	add    %edx,%eax
f0120184:	48                   	dec    %eax
f0120185:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012018b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120191:	ba 00 00 00 00       	mov    $0x0,%edx
f0120196:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012019c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01201a2:	29 d0                	sub    %edx,%eax
f01201a4:	89 c3                	mov    %eax,%ebx
f01201a6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01201ad:	10 00 00 
f01201b0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01201b5:	0f b6 c0             	movzbl %al,%eax
f01201b8:	c1 e0 04             	shl    $0x4,%eax
f01201bb:	89 c2                	mov    %eax,%edx
f01201bd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01201c3:	01 d0                	add    %edx,%eax
f01201c5:	48                   	dec    %eax
f01201c6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01201cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01201d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01201d7:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01201dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01201e3:	29 d0                	sub    %edx,%eax
f01201e5:	01 d8                	add    %ebx,%eax
f01201e7:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01201ec:	39 c1                	cmp    %eax,%ecx
f01201ee:	74 17                	je     f0120207 <test_kfree+0xf8e>
f01201f0:	83 ec 04             	sub    $0x4,%esp
f01201f3:	68 e0 8d 13 f0       	push   $0xf0138de0
f01201f8:	68 8e 05 00 00       	push   $0x58e
f01201fd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120202:	e8 a9 ff fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120207:	e8 ac 40 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012020c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012020f:	74 17                	je     f0120228 <test_kfree+0xfaf>
f0120211:	83 ec 04             	sub    $0x4,%esp
f0120214:	68 14 8d 13 f0       	push   $0xf0138d14
f0120219:	68 8f 05 00 00       	push   $0x58f
f012021e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120223:	e8 88 ff fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120228:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012022b:	e8 e2 c3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120230:	29 c3                	sub    %eax,%ebx
f0120232:	89 d8                	mov    %ebx,%eax
f0120234:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120239:	74 17                	je     f0120252 <test_kfree+0xfd9>
f012023b:	83 ec 04             	sub    $0x4,%esp
f012023e:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0120243:	68 90 05 00 00       	push   $0x590
f0120248:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012024d:	e8 5e ff fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120252:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0120259:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012025c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120262:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120265:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012026c:	eb 0e                	jmp    f012027c <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f012026e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120271:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120274:	01 d0                	add    %edx,%eax
f0120276:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120279:	ff 45 f4             	incl   -0xc(%ebp)
f012027c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120282:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120285:	7f e7                	jg     f012026e <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120287:	e8 16 7e ff ff       	call   f01180a2 <isKHeapPlacementStrategyNEXTFIT>
f012028c:	84 c0                	test   %al,%al
f012028e:	0f 84 9e 05 00 00    	je     f0120832 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120294:	e8 79 c3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120299:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012029c:	e8 17 40 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01202a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01202a4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01202ab:	10 00 00 
f01202ae:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01202b3:	0f b6 d0             	movzbl %al,%edx
f01202b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01202bc:	01 d0                	add    %edx,%eax
f01202be:	48                   	dec    %eax
f01202bf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01202c5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01202cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01202d0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01202d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01202dc:	29 d0                	sub    %edx,%eax
f01202de:	89 c1                	mov    %eax,%ecx
f01202e0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01202e7:	10 00 00 
f01202ea:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01202ef:	0f b6 c0             	movzbl %al,%eax
f01202f2:	c1 e0 04             	shl    $0x4,%eax
f01202f5:	89 c2                	mov    %eax,%edx
f01202f7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01202fd:	01 d0                	add    %edx,%eax
f01202ff:	48                   	dec    %eax
f0120300:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120306:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012030c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120311:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120317:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012031d:	29 d0                	sub    %edx,%eax
f012031f:	01 c8                	add    %ecx,%eax
f0120321:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120326:	29 c2                	sub    %eax,%edx
f0120328:	89 d0                	mov    %edx,%eax
f012032a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120330:	83 ec 0c             	sub    $0xc,%esp
f0120333:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f0120339:	e8 55 78 fe ff       	call   f0107b93 <kmalloc>
f012033e:	83 c4 10             	add    $0x10,%esp
f0120341:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120347:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012034d:	89 c1                	mov    %eax,%ecx
f012034f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0120356:	10 00 00 
f0120359:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012035e:	0f b6 d0             	movzbl %al,%edx
f0120361:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120367:	01 d0                	add    %edx,%eax
f0120369:	48                   	dec    %eax
f012036a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0120370:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120376:	ba 00 00 00 00       	mov    $0x0,%edx
f012037b:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0120381:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120387:	29 d0                	sub    %edx,%eax
f0120389:	89 c3                	mov    %eax,%ebx
f012038b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120392:	10 00 00 
f0120395:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012039a:	0f b6 c0             	movzbl %al,%eax
f012039d:	c1 e0 04             	shl    $0x4,%eax
f01203a0:	89 c2                	mov    %eax,%edx
f01203a2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01203a8:	01 d0                	add    %edx,%eax
f01203aa:	48                   	dec    %eax
f01203ab:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01203b1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01203b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01203bc:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01203c2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01203c8:	29 d0                	sub    %edx,%eax
f01203ca:	01 d8                	add    %ebx,%eax
f01203cc:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01203d1:	39 c1                	cmp    %eax,%ecx
f01203d3:	74 17                	je     f01203ec <test_kfree+0x1173>
f01203d5:	83 ec 04             	sub    $0x4,%esp
f01203d8:	68 e0 8d 13 f0       	push   $0xf0138de0
f01203dd:	68 9f 05 00 00       	push   $0x59f
f01203e2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01203e7:	e8 c4 fd fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203ec:	e8 c7 3e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01203f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203f4:	74 17                	je     f012040d <test_kfree+0x1194>
f01203f6:	83 ec 04             	sub    $0x4,%esp
f01203f9:	68 14 8d 13 f0       	push   $0xf0138d14
f01203fe:	68 a0 05 00 00       	push   $0x5a0
f0120403:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120408:	e8 a3 fd fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012040d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120410:	e8 fd c1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120415:	29 c3                	sub    %eax,%ebx
f0120417:	89 da                	mov    %ebx,%edx
f0120419:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012041f:	c1 e8 0c             	shr    $0xc,%eax
f0120422:	39 c2                	cmp    %eax,%edx
f0120424:	74 17                	je     f012043d <test_kfree+0x11c4>
f0120426:	83 ec 04             	sub    $0x4,%esp
f0120429:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012042e:	68 a1 05 00 00       	push   $0x5a1
f0120433:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120438:	e8 73 fd fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f012043d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120443:	48                   	dec    %eax
f0120444:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f012044a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120450:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120453:	e8 ba c1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120458:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012045b:	e8 58 3e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120460:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120463:	83 ec 0c             	sub    $0xc,%esp
f0120466:	68 00 00 30 00       	push   $0x300000
f012046b:	e8 23 77 fe ff       	call   f0107b93 <kmalloc>
f0120470:	83 c4 10             	add    $0x10,%esp
f0120473:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120479:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012047f:	89 c1                	mov    %eax,%ecx
f0120481:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0120488:	10 00 00 
f012048b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120490:	0f b6 d0             	movzbl %al,%edx
f0120493:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120499:	01 d0                	add    %edx,%eax
f012049b:	48                   	dec    %eax
f012049c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01204a2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01204a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01204ad:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01204b3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01204b9:	29 d0                	sub    %edx,%eax
f01204bb:	89 c3                	mov    %eax,%ebx
f01204bd:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01204c4:	10 00 00 
f01204c7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01204cc:	0f b6 c0             	movzbl %al,%eax
f01204cf:	c1 e0 04             	shl    $0x4,%eax
f01204d2:	89 c2                	mov    %eax,%edx
f01204d4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01204da:	01 d0                	add    %edx,%eax
f01204dc:	48                   	dec    %eax
f01204dd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01204e3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01204e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01204ee:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01204f4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01204fa:	29 d0                	sub    %edx,%eax
f01204fc:	01 d8                	add    %ebx,%eax
f01204fe:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120503:	39 c1                	cmp    %eax,%ecx
f0120505:	74 17                	je     f012051e <test_kfree+0x12a5>
f0120507:	83 ec 04             	sub    $0x4,%esp
f012050a:	68 e0 8d 13 f0       	push   $0xf0138de0
f012050f:	68 ae 05 00 00       	push   $0x5ae
f0120514:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120519:	e8 92 fc fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012051e:	e8 95 3d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120523:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120526:	74 17                	je     f012053f <test_kfree+0x12c6>
f0120528:	83 ec 04             	sub    $0x4,%esp
f012052b:	68 14 8d 13 f0       	push   $0xf0138d14
f0120530:	68 af 05 00 00       	push   $0x5af
f0120535:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012053a:	e8 71 fc fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012053f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120542:	e8 cb c0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120547:	29 c3                	sub    %eax,%ebx
f0120549:	89 d8                	mov    %ebx,%eax
f012054b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120550:	74 17                	je     f0120569 <test_kfree+0x12f0>
f0120552:	83 ec 04             	sub    $0x4,%esp
f0120555:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012055a:	68 b0 05 00 00       	push   $0x5b0
f012055f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120564:	e8 47 fc fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120569:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120570:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120573:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120579:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012057c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120583:	eb 0e                	jmp    f0120593 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120585:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120588:	8b 45 98             	mov    -0x68(%ebp),%eax
f012058b:	01 d0                	add    %edx,%eax
f012058d:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120590:	ff 45 f4             	incl   -0xc(%ebp)
f0120593:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120599:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012059c:	7f e7                	jg     f0120585 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012059e:	e8 6f c0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01205a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01205a6:	e8 0d 3d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01205ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01205ae:	83 ec 0c             	sub    $0xc,%esp
f01205b1:	68 00 08 00 00       	push   $0x800
f01205b6:	e8 d8 75 fe ff       	call   f0107b93 <kmalloc>
f01205bb:	83 c4 10             	add    $0x10,%esp
f01205be:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205c4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01205ca:	89 c1                	mov    %eax,%ecx
f01205cc:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01205d3:	10 00 00 
f01205d6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01205db:	0f b6 d0             	movzbl %al,%edx
f01205de:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01205e4:	01 d0                	add    %edx,%eax
f01205e6:	48                   	dec    %eax
f01205e7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01205ed:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01205f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01205f8:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01205fe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120604:	29 d0                	sub    %edx,%eax
f0120606:	89 c3                	mov    %eax,%ebx
f0120608:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012060f:	10 00 00 
f0120612:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120617:	0f b6 c0             	movzbl %al,%eax
f012061a:	c1 e0 04             	shl    $0x4,%eax
f012061d:	89 c2                	mov    %eax,%edx
f012061f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120625:	01 d0                	add    %edx,%eax
f0120627:	48                   	dec    %eax
f0120628:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012062e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120634:	ba 00 00 00 00       	mov    $0x0,%edx
f0120639:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012063f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120645:	29 d0                	sub    %edx,%eax
f0120647:	01 d8                	add    %ebx,%eax
f0120649:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012064e:	39 c1                	cmp    %eax,%ecx
f0120650:	74 17                	je     f0120669 <test_kfree+0x13f0>
f0120652:	83 ec 04             	sub    $0x4,%esp
f0120655:	68 e0 8d 13 f0       	push   $0xf0138de0
f012065a:	68 bc 05 00 00       	push   $0x5bc
f012065f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120664:	e8 47 fb fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120669:	e8 4a 3c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012066e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120671:	74 17                	je     f012068a <test_kfree+0x1411>
f0120673:	83 ec 04             	sub    $0x4,%esp
f0120676:	68 14 8d 13 f0       	push   $0xf0138d14
f012067b:	68 bd 05 00 00       	push   $0x5bd
f0120680:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120685:	e8 26 fb fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012068a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012068d:	e8 80 bf fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120692:	29 c3                	sub    %eax,%ebx
f0120694:	89 d8                	mov    %ebx,%eax
f0120696:	83 f8 01             	cmp    $0x1,%eax
f0120699:	74 17                	je     f01206b2 <test_kfree+0x1439>
f012069b:	83 ec 04             	sub    $0x4,%esp
f012069e:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01206a3:	68 be 05 00 00       	push   $0x5be
f01206a8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01206ad:	e8 fe fa fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01206b2:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f01206b9:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01206bc:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01206c2:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01206c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206cc:	eb 0e                	jmp    f01206dc <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f01206ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01206d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01206d4:	01 d0                	add    %edx,%eax
f01206d6:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01206d9:	ff 45 f4             	incl   -0xc(%ebp)
f01206dc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01206e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206e5:	7f e7                	jg     f01206ce <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01206e7:	e8 26 bf fe ff       	call   f010c612 <sys_calculate_free_frames>
f01206ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01206ef:	e8 c4 3b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01206f4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01206f7:	83 ec 0c             	sub    $0xc,%esp
f01206fa:	68 00 00 10 00       	push   $0x100000
f01206ff:	e8 8f 74 fe ff       	call   f0107b93 <kmalloc>
f0120704:	83 c4 10             	add    $0x10,%esp
f0120707:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012070d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120713:	89 c1                	mov    %eax,%ecx
f0120715:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012071c:	10 00 00 
f012071f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120724:	0f b6 d0             	movzbl %al,%edx
f0120727:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012072d:	01 d0                	add    %edx,%eax
f012072f:	48                   	dec    %eax
f0120730:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120736:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012073c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120741:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120747:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012074d:	29 d0                	sub    %edx,%eax
f012074f:	89 c3                	mov    %eax,%ebx
f0120751:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120758:	10 00 00 
f012075b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120760:	0f b6 c0             	movzbl %al,%eax
f0120763:	c1 e0 04             	shl    $0x4,%eax
f0120766:	89 c2                	mov    %eax,%edx
f0120768:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012076e:	01 d0                	add    %edx,%eax
f0120770:	48                   	dec    %eax
f0120771:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120777:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012077d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120782:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120788:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012078e:	29 d0                	sub    %edx,%eax
f0120790:	01 d8                	add    %ebx,%eax
f0120792:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120797:	39 c1                	cmp    %eax,%ecx
f0120799:	74 17                	je     f01207b2 <test_kfree+0x1539>
f012079b:	83 ec 04             	sub    $0x4,%esp
f012079e:	68 e0 8d 13 f0       	push   $0xf0138de0
f01207a3:	68 ca 05 00 00       	push   $0x5ca
f01207a8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01207ad:	e8 fe f9 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207b2:	e8 01 3b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01207b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207ba:	74 17                	je     f01207d3 <test_kfree+0x155a>
f01207bc:	83 ec 04             	sub    $0x4,%esp
f01207bf:	68 14 8d 13 f0       	push   $0xf0138d14
f01207c4:	68 cb 05 00 00       	push   $0x5cb
f01207c9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01207ce:	e8 dd f9 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207d3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207d6:	e8 37 be fe ff       	call   f010c612 <sys_calculate_free_frames>
f01207db:	29 c3                	sub    %eax,%ebx
f01207dd:	89 d8                	mov    %ebx,%eax
f01207df:	3d 00 01 00 00       	cmp    $0x100,%eax
f01207e4:	74 17                	je     f01207fd <test_kfree+0x1584>
f01207e6:	83 ec 04             	sub    $0x4,%esp
f01207e9:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01207ee:	68 cc 05 00 00       	push   $0x5cc
f01207f3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01207f8:	e8 b3 f9 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f01207fd:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120804:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120807:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012080d:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120810:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120817:	eb 0e                	jmp    f0120827 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012081c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012081f:	01 d0                	add    %edx,%eax
f0120821:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120824:	ff 45 f4             	incl   -0xc(%ebp)
f0120827:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012082d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120830:	7f e7                	jg     f0120819 <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120832:	83 ec 0c             	sub    $0xc,%esp
f0120835:	68 1a 95 13 f0       	push   $0xf013951a
f012083a:	e8 f2 05 fe ff       	call   f0100e31 <cprintf>
f012083f:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120842:	e8 cb bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120847:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012084a:	e8 69 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012084f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120852:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120858:	83 ec 0c             	sub    $0xc,%esp
f012085b:	50                   	push   %eax
f012085c:	e8 4c 73 fe ff       	call   f0107bad <kfree>
f0120861:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120864:	e8 4f 3a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120869:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012086c:	74 17                	je     f0120885 <test_kfree+0x160c>
f012086e:	83 ec 04             	sub    $0x4,%esp
f0120871:	68 14 8d 13 f0       	push   $0xf0138d14
f0120876:	68 dd 05 00 00       	push   $0x5dd
f012087b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120880:	e8 2b f9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120885:	e8 88 bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f012088a:	89 c2                	mov    %eax,%edx
f012088c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012088f:	29 c2                	sub    %eax,%edx
f0120891:	89 d0                	mov    %edx,%eax
f0120893:	83 f8 02             	cmp    $0x2,%eax
f0120896:	74 17                	je     f01208af <test_kfree+0x1636>
f0120898:	83 ec 04             	sub    $0x4,%esp
f012089b:	68 84 94 13 f0       	push   $0xf0139484
f01208a0:	68 de 05 00 00       	push   $0x5de
f01208a5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01208aa:	e8 01 f9 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01208af:	e8 5e bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f01208b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208b7:	e8 fc 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01208bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01208bf:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01208c5:	83 ec 0c             	sub    $0xc,%esp
f01208c8:	50                   	push   %eax
f01208c9:	e8 df 72 fe ff       	call   f0107bad <kfree>
f01208ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208d1:	e8 e2 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01208d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208d9:	74 17                	je     f01208f2 <test_kfree+0x1679>
f01208db:	83 ec 04             	sub    $0x4,%esp
f01208de:	68 14 8d 13 f0       	push   $0xf0138d14
f01208e3:	68 e4 05 00 00       	push   $0x5e4
f01208e8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01208ed:	e8 be f8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01208f2:	e8 1b bd fe ff       	call   f010c612 <sys_calculate_free_frames>
f01208f7:	89 c2                	mov    %eax,%edx
f01208f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01208fc:	29 c2                	sub    %eax,%edx
f01208fe:	89 d0                	mov    %edx,%eax
f0120900:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120905:	74 17                	je     f012091e <test_kfree+0x16a5>
f0120907:	83 ec 04             	sub    $0x4,%esp
f012090a:	68 84 94 13 f0       	push   $0xf0139484
f012090f:	68 e5 05 00 00       	push   $0x5e5
f0120914:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120919:	e8 92 f8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012091e:	e8 ef bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120923:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120926:	e8 8d 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012092b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f012092e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120934:	83 ec 0c             	sub    $0xc,%esp
f0120937:	50                   	push   %eax
f0120938:	e8 70 72 fe ff       	call   f0107bad <kfree>
f012093d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120940:	e8 73 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120945:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120948:	74 17                	je     f0120961 <test_kfree+0x16e8>
f012094a:	83 ec 04             	sub    $0x4,%esp
f012094d:	68 14 8d 13 f0       	push   $0xf0138d14
f0120952:	68 eb 05 00 00       	push   $0x5eb
f0120957:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012095c:	e8 4f f8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120961:	e8 ac bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120966:	89 c2                	mov    %eax,%edx
f0120968:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012096b:	29 c2                	sub    %eax,%edx
f012096d:	89 d0                	mov    %edx,%eax
f012096f:	83 f8 01             	cmp    $0x1,%eax
f0120972:	74 17                	je     f012098b <test_kfree+0x1712>
f0120974:	83 ec 04             	sub    $0x4,%esp
f0120977:	68 84 94 13 f0       	push   $0xf0139484
f012097c:	68 ec 05 00 00       	push   $0x5ec
f0120981:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120986:	e8 25 f8 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012098b:	e8 82 bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120990:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120993:	e8 20 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120998:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012099b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01209a1:	83 ec 0c             	sub    $0xc,%esp
f01209a4:	50                   	push   %eax
f01209a5:	e8 03 72 fe ff       	call   f0107bad <kfree>
f01209aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209ad:	e8 06 39 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01209b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209b5:	74 17                	je     f01209ce <test_kfree+0x1755>
f01209b7:	83 ec 04             	sub    $0x4,%esp
f01209ba:	68 14 8d 13 f0       	push   $0xf0138d14
f01209bf:	68 f2 05 00 00       	push   $0x5f2
f01209c4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01209c9:	e8 e2 f7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01209ce:	e8 3f bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f01209d3:	89 c2                	mov    %eax,%edx
f01209d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01209d8:	29 c2                	sub    %eax,%edx
f01209da:	89 d0                	mov    %edx,%eax
f01209dc:	83 f8 04             	cmp    $0x4,%eax
f01209df:	74 17                	je     f01209f8 <test_kfree+0x177f>
f01209e1:	83 ec 04             	sub    $0x4,%esp
f01209e4:	68 84 94 13 f0       	push   $0xf0139484
f01209e9:	68 f3 05 00 00       	push   $0x5f3
f01209ee:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01209f3:	e8 b8 f7 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01209f8:	e8 15 bc fe ff       	call   f010c612 <sys_calculate_free_frames>
f01209fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a00:	e8 b3 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a05:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120a08:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120a0e:	83 ec 0c             	sub    $0xc,%esp
f0120a11:	50                   	push   %eax
f0120a12:	e8 96 71 fe ff       	call   f0107bad <kfree>
f0120a17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a1a:	e8 99 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a1f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a22:	74 17                	je     f0120a3b <test_kfree+0x17c2>
f0120a24:	83 ec 04             	sub    $0x4,%esp
f0120a27:	68 14 8d 13 f0       	push   $0xf0138d14
f0120a2c:	68 f9 05 00 00       	push   $0x5f9
f0120a31:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120a36:	e8 75 f7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a3b:	e8 d2 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120a40:	89 c2                	mov    %eax,%edx
f0120a42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120a45:	29 c2                	sub    %eax,%edx
f0120a47:	89 d0                	mov    %edx,%eax
f0120a49:	83 f8 05             	cmp    $0x5,%eax
f0120a4c:	74 17                	je     f0120a65 <test_kfree+0x17ec>
f0120a4e:	83 ec 04             	sub    $0x4,%esp
f0120a51:	68 84 94 13 f0       	push   $0xf0139484
f0120a56:	68 fa 05 00 00       	push   $0x5fa
f0120a5b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120a60:	e8 4b f7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a65:	e8 a8 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120a6a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a6d:	e8 46 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a72:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120a75:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120a7b:	83 ec 0c             	sub    $0xc,%esp
f0120a7e:	50                   	push   %eax
f0120a7f:	e8 29 71 fe ff       	call   f0107bad <kfree>
f0120a84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a87:	e8 2c 38 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120a8c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a8f:	74 17                	je     f0120aa8 <test_kfree+0x182f>
f0120a91:	83 ec 04             	sub    $0x4,%esp
f0120a94:	68 14 8d 13 f0       	push   $0xf0138d14
f0120a99:	68 00 06 00 00       	push   $0x600
f0120a9e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120aa3:	e8 08 f7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120aa8:	e8 65 bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120aad:	89 c2                	mov    %eax,%edx
f0120aaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ab2:	29 c2                	sub    %eax,%edx
f0120ab4:	89 d0                	mov    %edx,%eax
f0120ab6:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120abb:	74 17                	je     f0120ad4 <test_kfree+0x185b>
f0120abd:	83 ec 04             	sub    $0x4,%esp
f0120ac0:	68 84 94 13 f0       	push   $0xf0139484
f0120ac5:	68 01 06 00 00       	push   $0x601
f0120aca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120acf:	e8 dc f6 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120ad4:	e8 c9 75 ff ff       	call   f01180a2 <isKHeapPlacementStrategyNEXTFIT>
f0120ad9:	84 c0                	test   %al,%al
f0120adb:	0f 84 4a 02 00 00    	je     f0120d2b <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120ae1:	e8 2c bb fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120ae6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120ae9:	e8 ca 37 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120aee:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120af1:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120af7:	83 ec 0c             	sub    $0xc,%esp
f0120afa:	50                   	push   %eax
f0120afb:	e8 ad 70 fe ff       	call   f0107bad <kfree>
f0120b00:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120b03:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120b0a:	10 00 00 
f0120b0d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120b12:	0f b6 d0             	movzbl %al,%edx
f0120b15:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120b1b:	01 d0                	add    %edx,%eax
f0120b1d:	48                   	dec    %eax
f0120b1e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120b24:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120b2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b2f:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120b35:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120b3b:	29 d0                	sub    %edx,%eax
f0120b3d:	89 c1                	mov    %eax,%ecx
f0120b3f:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120b46:	10 00 00 
f0120b49:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0120b4e:	0f b6 c0             	movzbl %al,%eax
f0120b51:	c1 e0 04             	shl    $0x4,%eax
f0120b54:	89 c2                	mov    %eax,%edx
f0120b56:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120b5c:	01 d0                	add    %edx,%eax
f0120b5e:	48                   	dec    %eax
f0120b5f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120b65:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120b6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b70:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120b76:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120b7c:	29 d0                	sub    %edx,%eax
f0120b7e:	01 c8                	add    %ecx,%eax
f0120b80:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120b85:	29 c2                	sub    %eax,%edx
f0120b87:	89 d0                	mov    %edx,%eax
f0120b89:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b8f:	e8 24 37 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120b94:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b97:	74 17                	je     f0120bb0 <test_kfree+0x1937>
f0120b99:	83 ec 04             	sub    $0x4,%esp
f0120b9c:	68 14 8d 13 f0       	push   $0xf0138d14
f0120ba1:	68 0b 06 00 00       	push   $0x60b
f0120ba6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120bab:	e8 00 f6 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bb0:	e8 5d ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120bb5:	89 c2                	mov    %eax,%edx
f0120bb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120bba:	29 c2                	sub    %eax,%edx
f0120bbc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120bc2:	c1 e8 0c             	shr    $0xc,%eax
f0120bc5:	39 c2                	cmp    %eax,%edx
f0120bc7:	74 17                	je     f0120be0 <test_kfree+0x1967>
f0120bc9:	83 ec 04             	sub    $0x4,%esp
f0120bcc:	68 84 94 13 f0       	push   $0xf0139484
f0120bd1:	68 0c 06 00 00       	push   $0x60c
f0120bd6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120bdb:	e8 d0 f5 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120be0:	e8 2d ba fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120be5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120be8:	e8 cb 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120bed:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120bf0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120bf6:	83 ec 0c             	sub    $0xc,%esp
f0120bf9:	50                   	push   %eax
f0120bfa:	e8 ae 6f fe ff       	call   f0107bad <kfree>
f0120bff:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c02:	e8 b1 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c0a:	74 17                	je     f0120c23 <test_kfree+0x19aa>
f0120c0c:	83 ec 04             	sub    $0x4,%esp
f0120c0f:	68 14 8d 13 f0       	push   $0xf0138d14
f0120c14:	68 12 06 00 00       	push   $0x612
f0120c19:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120c1e:	e8 8d f5 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c23:	e8 ea b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c28:	89 c2                	mov    %eax,%edx
f0120c2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c2d:	29 c2                	sub    %eax,%edx
f0120c2f:	89 d0                	mov    %edx,%eax
f0120c31:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c36:	74 17                	je     f0120c4f <test_kfree+0x19d6>
f0120c38:	83 ec 04             	sub    $0x4,%esp
f0120c3b:	68 84 94 13 f0       	push   $0xf0139484
f0120c40:	68 13 06 00 00       	push   $0x613
f0120c45:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120c4a:	e8 61 f5 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120c4f:	e8 be b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c54:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c57:	e8 5c 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120c5f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120c65:	83 ec 0c             	sub    $0xc,%esp
f0120c68:	50                   	push   %eax
f0120c69:	e8 3f 6f fe ff       	call   f0107bad <kfree>
f0120c6e:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c71:	e8 42 36 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120c76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c79:	74 17                	je     f0120c92 <test_kfree+0x1a19>
f0120c7b:	83 ec 04             	sub    $0x4,%esp
f0120c7e:	68 14 8d 13 f0       	push   $0xf0138d14
f0120c83:	68 19 06 00 00       	push   $0x619
f0120c88:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120c8d:	e8 1e f5 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c92:	e8 7b b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120c97:	89 c2                	mov    %eax,%edx
f0120c99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c9c:	29 c2                	sub    %eax,%edx
f0120c9e:	89 d0                	mov    %edx,%eax
f0120ca0:	83 f8 01             	cmp    $0x1,%eax
f0120ca3:	74 17                	je     f0120cbc <test_kfree+0x1a43>
f0120ca5:	83 ec 04             	sub    $0x4,%esp
f0120ca8:	68 84 94 13 f0       	push   $0xf0139484
f0120cad:	68 1a 06 00 00       	push   $0x61a
f0120cb2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120cb7:	e8 f4 f4 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120cbc:	e8 51 b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120cc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120cc4:	e8 ef 35 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120cc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120ccc:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120cd2:	83 ec 0c             	sub    $0xc,%esp
f0120cd5:	50                   	push   %eax
f0120cd6:	e8 d2 6e fe ff       	call   f0107bad <kfree>
f0120cdb:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cde:	e8 d5 35 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120ce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ce6:	74 17                	je     f0120cff <test_kfree+0x1a86>
f0120ce8:	83 ec 04             	sub    $0x4,%esp
f0120ceb:	68 14 8d 13 f0       	push   $0xf0138d14
f0120cf0:	68 20 06 00 00       	push   $0x620
f0120cf5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120cfa:	e8 b1 f4 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cff:	e8 0e b9 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120d04:	89 c2                	mov    %eax,%edx
f0120d06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d09:	29 c2                	sub    %eax,%edx
f0120d0b:	89 d0                	mov    %edx,%eax
f0120d0d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120d12:	74 17                	je     f0120d2b <test_kfree+0x1ab2>
f0120d14:	83 ec 04             	sub    $0x4,%esp
f0120d17:	68 84 94 13 f0       	push   $0xf0139484
f0120d1c:	68 21 06 00 00       	push   $0x621
f0120d21:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120d26:	e8 85 f4 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0120d2b:	e8 e2 b8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120d30:	89 c2                	mov    %eax,%edx
f0120d32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120d35:	39 c2                	cmp    %eax,%edx
f0120d37:	74 17                	je     f0120d50 <test_kfree+0x1ad7>
f0120d39:	83 ec 04             	sub    $0x4,%esp
f0120d3c:	68 24 95 13 f0       	push   $0xf0139524
f0120d41:	68 24 06 00 00       	push   $0x624
f0120d46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120d4b:	e8 60 f4 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0120d50:	83 ec 0c             	sub    $0xc,%esp
f0120d53:	68 58 95 13 f0       	push   $0xf0139558
f0120d58:	e8 d4 00 fe ff       	call   f0100e31 <cprintf>
f0120d5d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0120d60:	83 ec 0c             	sub    $0xc,%esp
f0120d63:	6a 03                	push   $0x3
f0120d65:	e8 43 bd fe ff       	call   f010caad <sys_bypassPageFault>
f0120d6a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0120d6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d74:	e9 82 00 00 00       	jmp    f0120dfb <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f0120d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d7c:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0120d83:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0120d86:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d89:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d8c:	e8 0a bd fe ff       	call   f010ca9b <sys_rcr2>
f0120d91:	89 c2                	mov    %eax,%edx
f0120d93:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d96:	39 c2                	cmp    %eax,%edx
f0120d98:	74 17                	je     f0120db1 <test_kfree+0x1b38>
f0120d9a:	83 ec 04             	sub    $0x4,%esp
f0120d9d:	68 60 95 13 f0       	push   $0xf0139560
f0120da2:	68 33 06 00 00       	push   $0x633
f0120da7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120dac:	e8 ff f3 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0120db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120db4:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0120dbb:	89 c2                	mov    %eax,%edx
f0120dbd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120dc0:	01 d0                	add    %edx,%eax
f0120dc2:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120dc5:	e8 d1 bc fe ff       	call   f010ca9b <sys_rcr2>
f0120dca:	89 c2                	mov    %eax,%edx
f0120dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120dcf:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0120dd6:	89 c1                	mov    %eax,%ecx
f0120dd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120ddb:	01 c8                	add    %ecx,%eax
f0120ddd:	39 c2                	cmp    %eax,%edx
f0120ddf:	74 17                	je     f0120df8 <test_kfree+0x1b7f>
f0120de1:	83 ec 04             	sub    $0x4,%esp
f0120de4:	68 60 95 13 f0       	push   $0xf0139560
f0120de9:	68 35 06 00 00       	push   $0x635
f0120dee:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120df3:	e8 b8 f3 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0120df8:	ff 45 f4             	incl   -0xc(%ebp)
f0120dfb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0120dff:	0f 8e 74 ff ff ff    	jle    f0120d79 <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0120e05:	83 ec 0c             	sub    $0xc,%esp
f0120e08:	6a 00                	push   $0x0
f0120e0a:	e8 9e bc fe ff       	call   f010caad <sys_bypassPageFault>
f0120e0f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0120e12:	83 ec 0c             	sub    $0xc,%esp
f0120e15:	68 a5 95 13 f0       	push   $0xf01395a5
f0120e1a:	e8 12 00 fe ff       	call   f0100e31 <cprintf>
f0120e1f:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e22:	e8 eb b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e2a:	e8 89 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120e2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0120e32:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0120e38:	83 ec 0c             	sub    $0xc,%esp
f0120e3b:	50                   	push   %eax
f0120e3c:	e8 6c 6d fe ff       	call   f0107bad <kfree>
f0120e41:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e44:	e8 6f 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120e49:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e4c:	74 17                	je     f0120e65 <test_kfree+0x1bec>
f0120e4e:	83 ec 04             	sub    $0x4,%esp
f0120e51:	68 14 8d 13 f0       	push   $0xf0138d14
f0120e56:	68 43 06 00 00       	push   $0x643
f0120e5b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120e60:	e8 4b f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e65:	e8 a8 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e6a:	89 c2                	mov    %eax,%edx
f0120e6c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e6f:	39 c2                	cmp    %eax,%edx
f0120e71:	74 17                	je     f0120e8a <test_kfree+0x1c11>
f0120e73:	83 ec 04             	sub    $0x4,%esp
f0120e76:	68 ac 95 13 f0       	push   $0xf01395ac
f0120e7b:	68 44 06 00 00       	push   $0x644
f0120e80:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120e85:	e8 26 f3 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e8a:	e8 83 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120e8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e92:	e8 21 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120e97:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0120e9a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0120ea0:	83 ec 0c             	sub    $0xc,%esp
f0120ea3:	50                   	push   %eax
f0120ea4:	e8 04 6d fe ff       	call   f0107bad <kfree>
f0120ea9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eac:	e8 07 34 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120eb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eb4:	74 17                	je     f0120ecd <test_kfree+0x1c54>
f0120eb6:	83 ec 04             	sub    $0x4,%esp
f0120eb9:	68 14 8d 13 f0       	push   $0xf0138d14
f0120ebe:	68 4a 06 00 00       	push   $0x64a
f0120ec3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120ec8:	e8 e3 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120ecd:	e8 40 b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120ed2:	89 c2                	mov    %eax,%edx
f0120ed4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ed7:	39 c2                	cmp    %eax,%edx
f0120ed9:	74 17                	je     f0120ef2 <test_kfree+0x1c79>
f0120edb:	83 ec 04             	sub    $0x4,%esp
f0120ede:	68 ac 95 13 f0       	push   $0xf01395ac
f0120ee3:	68 4b 06 00 00       	push   $0x64b
f0120ee8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120eed:	e8 be f2 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ef2:	e8 1b b7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120ef7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120efa:	e8 b9 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120eff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120f02:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120f08:	83 ec 0c             	sub    $0xc,%esp
f0120f0b:	50                   	push   %eax
f0120f0c:	e8 9c 6c fe ff       	call   f0107bad <kfree>
f0120f11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f14:	e8 9f 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120f19:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f1c:	74 17                	je     f0120f35 <test_kfree+0x1cbc>
f0120f1e:	83 ec 04             	sub    $0x4,%esp
f0120f21:	68 14 8d 13 f0       	push   $0xf0138d14
f0120f26:	68 51 06 00 00       	push   $0x651
f0120f2b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120f30:	e8 7b f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f35:	e8 d8 b6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120f3a:	89 c2                	mov    %eax,%edx
f0120f3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f3f:	39 c2                	cmp    %eax,%edx
f0120f41:	74 17                	je     f0120f5a <test_kfree+0x1ce1>
f0120f43:	83 ec 04             	sub    $0x4,%esp
f0120f46:	68 ac 95 13 f0       	push   $0xf01395ac
f0120f4b:	68 52 06 00 00       	push   $0x652
f0120f50:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120f55:	e8 56 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f5a:	e8 b3 b6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120f5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f62:	e8 51 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120f67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120f6a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120f70:	83 ec 0c             	sub    $0xc,%esp
f0120f73:	50                   	push   %eax
f0120f74:	e8 34 6c fe ff       	call   f0107bad <kfree>
f0120f79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f7c:	e8 37 33 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0120f81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f84:	74 17                	je     f0120f9d <test_kfree+0x1d24>
f0120f86:	83 ec 04             	sub    $0x4,%esp
f0120f89:	68 14 8d 13 f0       	push   $0xf0138d14
f0120f8e:	68 58 06 00 00       	push   $0x658
f0120f93:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120f98:	e8 13 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f9d:	e8 70 b6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0120fa2:	89 c2                	mov    %eax,%edx
f0120fa4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fa7:	39 c2                	cmp    %eax,%edx
f0120fa9:	74 17                	je     f0120fc2 <test_kfree+0x1d49>
f0120fab:	83 ec 04             	sub    $0x4,%esp
f0120fae:	68 ac 95 13 f0       	push   $0xf01395ac
f0120fb3:	68 59 06 00 00       	push   $0x659
f0120fb8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0120fbd:	e8 ee f1 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0120fc2:	83 ec 0c             	sub    $0xc,%esp
f0120fc5:	68 f3 95 13 f0       	push   $0xf01395f3
f0120fca:	e8 62 fe fd ff       	call   f0100e31 <cprintf>
f0120fcf:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120fd2:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0120fd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120fe0:	eb 48                	jmp    f012102a <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0120fe2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0120fe5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0120fea:	83 ec 04             	sub    $0x4,%esp
f0120fed:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0120ff3:	51                   	push   %ecx
f0120ff4:	52                   	push   %edx
f0120ff5:	50                   	push   %eax
f0120ff6:	e8 20 61 fe ff       	call   f010711b <get_page_table>
f0120ffb:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0120ffe:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121004:	85 c0                	test   %eax,%eax
f0121006:	75 17                	jne    f012101f <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121008:	83 ec 04             	sub    $0x4,%esp
f012100b:	68 fc 95 13 f0       	push   $0xf01395fc
f0121010:	68 67 06 00 00       	push   $0x667
f0121015:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012101a:	e8 91 f1 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012101f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121026:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012102a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012102e:	78 b2                	js     f0120fe2 <test_kfree+0x1d69>
f0121030:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121034:	7f 09                	jg     f012103f <test_kfree+0x1dc6>
f0121036:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012103d:	76 a3                	jbe    f0120fe2 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012103f:	83 ec 0c             	sub    $0xc,%esp
f0121042:	68 de 8e 13 f0       	push   $0xf0138ede
f0121047:	e8 e5 fd fd ff       	call   f0100e31 <cprintf>
f012104c:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012104f:	83 ec 0c             	sub    $0xc,%esp
f0121052:	68 64 96 13 f0       	push   $0xf0139664
f0121057:	e8 d5 fd fd ff       	call   f0100e31 <cprintf>
f012105c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012105f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121064:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121067:	5b                   	pop    %ebx
f0121068:	5f                   	pop    %edi
f0121069:	5d                   	pop    %ebp
f012106a:	c3                   	ret    

f012106b <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012106b:	55                   	push   %ebp
f012106c:	89 e5                	mov    %esp,%ebp
f012106e:	57                   	push   %edi
f012106f:	53                   	push   %ebx
f0121070:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f0121076:	83 ec 0c             	sub    $0xc,%esp
f0121079:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012107e:	e8 ae fd fd ff       	call   f0100e31 <cprintf>
f0121083:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121086:	83 ec 0c             	sub    $0xc,%esp
f0121089:	68 6c 8c 13 f0       	push   $0xf0138c6c
f012108e:	e8 9e fd fd ff       	call   f0100e31 <cprintf>
f0121093:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121096:	83 ec 0c             	sub    $0xc,%esp
f0121099:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012109e:	e8 8e fd fd ff       	call   f0100e31 <cprintf>
f01210a3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01210a6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01210aa:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01210ae:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01210b4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01210ba:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01210c1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01210c8:	e8 45 b5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01210cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01210d0:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01210d6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01210db:	b8 00 00 00 00       	mov    $0x0,%eax
f01210e0:	89 d7                	mov    %edx,%edi
f01210e2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01210e4:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f01210ea:	b9 14 00 00 00       	mov    $0x14,%ecx
f01210ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01210f4:	89 d7                	mov    %edx,%edi
f01210f6:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01210f8:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f01210fe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121103:	b8 00 00 00 00       	mov    $0x0,%eax
f0121108:	89 d7                	mov    %edx,%edi
f012110a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012110c:	e8 01 b5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121111:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121114:	e8 9f 31 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121119:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012111c:	83 ec 0c             	sub    $0xc,%esp
f012111f:	68 00 fc 1f 00       	push   $0x1ffc00
f0121124:	e8 6a 6a fe ff       	call   f0107b93 <kmalloc>
f0121129:	83 c4 10             	add    $0x10,%esp
f012112c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121132:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121138:	89 c1                	mov    %eax,%ecx
f012113a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121141:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121146:	0f b6 d0             	movzbl %al,%edx
f0121149:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012114c:	01 d0                	add    %edx,%eax
f012114e:	48                   	dec    %eax
f012114f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121152:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121155:	ba 00 00 00 00       	mov    $0x0,%edx
f012115a:	f7 75 c8             	divl   -0x38(%ebp)
f012115d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121160:	29 d0                	sub    %edx,%eax
f0121162:	89 c3                	mov    %eax,%ebx
f0121164:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012116b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121170:	0f b6 c0             	movzbl %al,%eax
f0121173:	c1 e0 04             	shl    $0x4,%eax
f0121176:	89 c2                	mov    %eax,%edx
f0121178:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012117b:	01 d0                	add    %edx,%eax
f012117d:	48                   	dec    %eax
f012117e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121181:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121184:	ba 00 00 00 00       	mov    $0x0,%edx
f0121189:	f7 75 c0             	divl   -0x40(%ebp)
f012118c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012118f:	29 d0                	sub    %edx,%eax
f0121191:	01 d8                	add    %ebx,%eax
f0121193:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121198:	39 c1                	cmp    %eax,%ecx
f012119a:	74 17                	je     f01211b3 <test_kfree_bestfirstfit+0x148>
f012119c:	83 ec 04             	sub    $0x4,%esp
f012119f:	68 e0 8d 13 f0       	push   $0xf0138de0
f01211a4:	68 95 06 00 00       	push   $0x695
f01211a9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01211ae:	e8 fd ef fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211b3:	e8 00 31 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01211b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211bb:	74 17                	je     f01211d4 <test_kfree_bestfirstfit+0x169>
f01211bd:	83 ec 04             	sub    $0x4,%esp
f01211c0:	68 14 8d 13 f0       	push   $0xf0138d14
f01211c5:	68 96 06 00 00       	push   $0x696
f01211ca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01211cf:	e8 dc ef fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01211d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01211d7:	e8 36 b4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01211dc:	29 c3                	sub    %eax,%ebx
f01211de:	89 d8                	mov    %ebx,%eax
f01211e0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211e5:	74 17                	je     f01211fe <test_kfree_bestfirstfit+0x193>
f01211e7:	83 ec 04             	sub    $0x4,%esp
f01211ea:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01211ef:	68 97 06 00 00       	push   $0x697
f01211f4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01211f9:	e8 b2 ef fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01211fe:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121205:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121208:	e8 05 b4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012120d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121210:	e8 a3 30 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121215:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121218:	83 ec 0c             	sub    $0xc,%esp
f012121b:	68 00 fc 1f 00       	push   $0x1ffc00
f0121220:	e8 6e 69 fe ff       	call   f0107b93 <kmalloc>
f0121225:	83 c4 10             	add    $0x10,%esp
f0121228:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012122e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121234:	89 c1                	mov    %eax,%ecx
f0121236:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012123d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121242:	0f b6 d0             	movzbl %al,%edx
f0121245:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121248:	01 d0                	add    %edx,%eax
f012124a:	48                   	dec    %eax
f012124b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012124e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121251:	ba 00 00 00 00       	mov    $0x0,%edx
f0121256:	f7 75 b8             	divl   -0x48(%ebp)
f0121259:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012125c:	29 d0                	sub    %edx,%eax
f012125e:	89 c3                	mov    %eax,%ebx
f0121260:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121267:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012126c:	0f b6 c0             	movzbl %al,%eax
f012126f:	c1 e0 04             	shl    $0x4,%eax
f0121272:	89 c2                	mov    %eax,%edx
f0121274:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121277:	01 d0                	add    %edx,%eax
f0121279:	48                   	dec    %eax
f012127a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012127d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121280:	ba 00 00 00 00       	mov    $0x0,%edx
f0121285:	f7 75 b0             	divl   -0x50(%ebp)
f0121288:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012128b:	29 d0                	sub    %edx,%eax
f012128d:	01 d8                	add    %ebx,%eax
f012128f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121294:	39 c1                	cmp    %eax,%ecx
f0121296:	74 17                	je     f01212af <test_kfree_bestfirstfit+0x244>
f0121298:	83 ec 04             	sub    $0x4,%esp
f012129b:	68 e0 8d 13 f0       	push   $0xf0138de0
f01212a0:	68 9e 06 00 00       	push   $0x69e
f01212a5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01212aa:	e8 01 ef fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212af:	e8 04 30 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01212b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212b7:	74 17                	je     f01212d0 <test_kfree_bestfirstfit+0x265>
f01212b9:	83 ec 04             	sub    $0x4,%esp
f01212bc:	68 14 8d 13 f0       	push   $0xf0138d14
f01212c1:	68 9f 06 00 00       	push   $0x69f
f01212c6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01212cb:	e8 e0 ee fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01212d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01212d3:	e8 3a b3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01212d8:	29 c3                	sub    %eax,%ebx
f01212da:	89 d8                	mov    %ebx,%eax
f01212dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01212e1:	74 17                	je     f01212fa <test_kfree_bestfirstfit+0x28f>
f01212e3:	83 ec 04             	sub    $0x4,%esp
f01212e6:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01212eb:	68 a0 06 00 00       	push   $0x6a0
f01212f0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01212f5:	e8 b6 ee fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01212fa:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121301:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121304:	e8 09 b3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121309:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012130c:	e8 a7 2f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121311:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121314:	83 ec 0c             	sub    $0xc,%esp
f0121317:	68 00 08 00 00       	push   $0x800
f012131c:	e8 72 68 fe ff       	call   f0107b93 <kmalloc>
f0121321:	83 c4 10             	add    $0x10,%esp
f0121324:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012132a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121330:	89 c1                	mov    %eax,%ecx
f0121332:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121339:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012133e:	0f b6 d0             	movzbl %al,%edx
f0121341:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121344:	01 d0                	add    %edx,%eax
f0121346:	48                   	dec    %eax
f0121347:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012134a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012134d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121352:	f7 75 a8             	divl   -0x58(%ebp)
f0121355:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121358:	29 d0                	sub    %edx,%eax
f012135a:	89 c3                	mov    %eax,%ebx
f012135c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121363:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121368:	0f b6 c0             	movzbl %al,%eax
f012136b:	c1 e0 04             	shl    $0x4,%eax
f012136e:	89 c2                	mov    %eax,%edx
f0121370:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121373:	01 d0                	add    %edx,%eax
f0121375:	48                   	dec    %eax
f0121376:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121379:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012137c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121381:	f7 75 a0             	divl   -0x60(%ebp)
f0121384:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121387:	29 d0                	sub    %edx,%eax
f0121389:	01 d8                	add    %ebx,%eax
f012138b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121390:	39 c1                	cmp    %eax,%ecx
f0121392:	74 17                	je     f01213ab <test_kfree_bestfirstfit+0x340>
f0121394:	83 ec 04             	sub    $0x4,%esp
f0121397:	68 e0 8d 13 f0       	push   $0xf0138de0
f012139c:	68 a7 06 00 00       	push   $0x6a7
f01213a1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01213a6:	e8 05 ee fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213ab:	e8 08 2f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01213b0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213b3:	74 17                	je     f01213cc <test_kfree_bestfirstfit+0x361>
f01213b5:	83 ec 04             	sub    $0x4,%esp
f01213b8:	68 14 8d 13 f0       	push   $0xf0138d14
f01213bd:	68 a8 06 00 00       	push   $0x6a8
f01213c2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01213c7:	e8 e4 ed fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01213cc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01213cf:	e8 3e b2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01213d4:	29 c3                	sub    %eax,%ebx
f01213d6:	89 d8                	mov    %ebx,%eax
f01213d8:	83 f8 01             	cmp    $0x1,%eax
f01213db:	74 17                	je     f01213f4 <test_kfree_bestfirstfit+0x389>
f01213dd:	83 ec 04             	sub    $0x4,%esp
f01213e0:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01213e5:	68 a9 06 00 00       	push   $0x6a9
f01213ea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01213ef:	e8 bc ed fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01213f4:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01213fb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01213fe:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121404:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121407:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012140e:	eb 0e                	jmp    f012141e <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121410:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121413:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121416:	01 d0                	add    %edx,%eax
f0121418:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012141b:	ff 45 f4             	incl   -0xc(%ebp)
f012141e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121424:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121427:	7f e7                	jg     f0121410 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121429:	e8 e4 b1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012142e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121431:	e8 82 2e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121436:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121439:	83 ec 0c             	sub    $0xc,%esp
f012143c:	68 00 08 00 00       	push   $0x800
f0121441:	e8 4d 67 fe ff       	call   f0107b93 <kmalloc>
f0121446:	83 c4 10             	add    $0x10,%esp
f0121449:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012144f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121455:	89 c1                	mov    %eax,%ecx
f0121457:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012145e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121463:	0f b6 d0             	movzbl %al,%edx
f0121466:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121469:	01 d0                	add    %edx,%eax
f012146b:	48                   	dec    %eax
f012146c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012146f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121472:	ba 00 00 00 00       	mov    $0x0,%edx
f0121477:	f7 75 94             	divl   -0x6c(%ebp)
f012147a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012147d:	29 d0                	sub    %edx,%eax
f012147f:	89 c3                	mov    %eax,%ebx
f0121481:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0121488:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012148d:	0f b6 c0             	movzbl %al,%eax
f0121490:	c1 e0 04             	shl    $0x4,%eax
f0121493:	89 c2                	mov    %eax,%edx
f0121495:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121498:	01 d0                	add    %edx,%eax
f012149a:	48                   	dec    %eax
f012149b:	89 45 88             	mov    %eax,-0x78(%ebp)
f012149e:	8b 45 88             	mov    -0x78(%ebp),%eax
f01214a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01214a6:	f7 75 8c             	divl   -0x74(%ebp)
f01214a9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01214ac:	29 d0                	sub    %edx,%eax
f01214ae:	01 d8                	add    %ebx,%eax
f01214b0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01214b5:	39 c1                	cmp    %eax,%ecx
f01214b7:	74 17                	je     f01214d0 <test_kfree_bestfirstfit+0x465>
f01214b9:	83 ec 04             	sub    $0x4,%esp
f01214bc:	68 e0 8d 13 f0       	push   $0xf0138de0
f01214c1:	68 b5 06 00 00       	push   $0x6b5
f01214c6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01214cb:	e8 e0 ec fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214d0:	e8 e3 2d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01214d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214d8:	74 17                	je     f01214f1 <test_kfree_bestfirstfit+0x486>
f01214da:	83 ec 04             	sub    $0x4,%esp
f01214dd:	68 14 8d 13 f0       	push   $0xf0138d14
f01214e2:	68 b6 06 00 00       	push   $0x6b6
f01214e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01214ec:	e8 bf ec fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214f1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01214f4:	e8 19 b1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01214f9:	29 c3                	sub    %eax,%ebx
f01214fb:	89 d8                	mov    %ebx,%eax
f01214fd:	83 f8 01             	cmp    $0x1,%eax
f0121500:	74 17                	je     f0121519 <test_kfree_bestfirstfit+0x4ae>
f0121502:	83 ec 04             	sub    $0x4,%esp
f0121505:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012150a:	68 b7 06 00 00       	push   $0x6b7
f012150f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121514:	e8 97 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121519:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121520:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121523:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121529:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012152c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121533:	eb 0e                	jmp    f0121543 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121535:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121538:	8b 45 98             	mov    -0x68(%ebp),%eax
f012153b:	01 d0                	add    %edx,%eax
f012153d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121540:	ff 45 f4             	incl   -0xc(%ebp)
f0121543:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121549:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012154c:	7f e7                	jg     f0121535 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012154e:	e8 bf b0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121553:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121556:	e8 5d 2d fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012155b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012155e:	83 ec 0c             	sub    $0xc,%esp
f0121561:	68 00 1c 00 00       	push   $0x1c00
f0121566:	e8 28 66 fe ff       	call   f0107b93 <kmalloc>
f012156b:	83 c4 10             	add    $0x10,%esp
f012156e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121574:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012157a:	89 c1                	mov    %eax,%ecx
f012157c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121583:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121588:	0f b6 d0             	movzbl %al,%edx
f012158b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012158e:	01 d0                	add    %edx,%eax
f0121590:	48                   	dec    %eax
f0121591:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121594:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121597:	ba 00 00 00 00       	mov    $0x0,%edx
f012159c:	f7 75 84             	divl   -0x7c(%ebp)
f012159f:	8b 45 80             	mov    -0x80(%ebp),%eax
f01215a2:	29 d0                	sub    %edx,%eax
f01215a4:	89 c3                	mov    %eax,%ebx
f01215a6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01215ad:	10 00 00 
f01215b0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01215b5:	0f b6 c0             	movzbl %al,%eax
f01215b8:	c1 e0 04             	shl    $0x4,%eax
f01215bb:	89 c2                	mov    %eax,%edx
f01215bd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01215c3:	01 d0                	add    %edx,%eax
f01215c5:	48                   	dec    %eax
f01215c6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01215cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01215d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01215d7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01215dd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01215e3:	29 d0                	sub    %edx,%eax
f01215e5:	01 d8                	add    %ebx,%eax
f01215e7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01215ec:	39 c1                	cmp    %eax,%ecx
f01215ee:	74 17                	je     f0121607 <test_kfree_bestfirstfit+0x59c>
f01215f0:	83 ec 04             	sub    $0x4,%esp
f01215f3:	68 e0 8d 13 f0       	push   $0xf0138de0
f01215f8:	68 c3 06 00 00       	push   $0x6c3
f01215fd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121602:	e8 a9 eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121607:	e8 ac 2c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012160c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012160f:	74 17                	je     f0121628 <test_kfree_bestfirstfit+0x5bd>
f0121611:	83 ec 04             	sub    $0x4,%esp
f0121614:	68 14 8d 13 f0       	push   $0xf0138d14
f0121619:	68 c4 06 00 00       	push   $0x6c4
f012161e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121623:	e8 88 eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121628:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012162b:	e8 e2 af fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121630:	29 c3                	sub    %eax,%ebx
f0121632:	89 d8                	mov    %ebx,%eax
f0121634:	83 f8 02             	cmp    $0x2,%eax
f0121637:	74 17                	je     f0121650 <test_kfree_bestfirstfit+0x5e5>
f0121639:	83 ec 04             	sub    $0x4,%esp
f012163c:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0121641:	68 c5 06 00 00       	push   $0x6c5
f0121646:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012164b:	e8 60 eb fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121650:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0121657:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012165a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121660:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121663:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012166a:	eb 0e                	jmp    f012167a <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f012166c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012166f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121672:	01 d0                	add    %edx,%eax
f0121674:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121677:	ff 45 f4             	incl   -0xc(%ebp)
f012167a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121680:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121683:	7f e7                	jg     f012166c <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121685:	e8 88 af fe ff       	call   f010c612 <sys_calculate_free_frames>
f012168a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012168d:	e8 26 2c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121692:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121695:	83 ec 0c             	sub    $0xc,%esp
f0121698:	68 00 fc 2f 00       	push   $0x2ffc00
f012169d:	e8 f1 64 fe ff       	call   f0107b93 <kmalloc>
f01216a2:	83 c4 10             	add    $0x10,%esp
f01216a5:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216ab:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01216b1:	89 c1                	mov    %eax,%ecx
f01216b3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01216ba:	10 00 00 
f01216bd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01216c2:	0f b6 d0             	movzbl %al,%edx
f01216c5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01216cb:	01 d0                	add    %edx,%eax
f01216cd:	48                   	dec    %eax
f01216ce:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01216d4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01216da:	ba 00 00 00 00       	mov    $0x0,%edx
f01216df:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01216e5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01216eb:	29 d0                	sub    %edx,%eax
f01216ed:	89 c3                	mov    %eax,%ebx
f01216ef:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01216f6:	10 00 00 
f01216f9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01216fe:	0f b6 c0             	movzbl %al,%eax
f0121701:	c1 e0 04             	shl    $0x4,%eax
f0121704:	89 c2                	mov    %eax,%edx
f0121706:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012170c:	01 d0                	add    %edx,%eax
f012170e:	48                   	dec    %eax
f012170f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121715:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012171b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121720:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121726:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012172c:	29 d0                	sub    %edx,%eax
f012172e:	01 d8                	add    %ebx,%eax
f0121730:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121735:	39 c1                	cmp    %eax,%ecx
f0121737:	74 17                	je     f0121750 <test_kfree_bestfirstfit+0x6e5>
f0121739:	83 ec 04             	sub    $0x4,%esp
f012173c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0121741:	68 d1 06 00 00       	push   $0x6d1
f0121746:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012174b:	e8 60 ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121750:	e8 63 2b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121755:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121758:	74 17                	je     f0121771 <test_kfree_bestfirstfit+0x706>
f012175a:	83 ec 04             	sub    $0x4,%esp
f012175d:	68 14 8d 13 f0       	push   $0xf0138d14
f0121762:	68 d2 06 00 00       	push   $0x6d2
f0121767:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012176c:	e8 3f ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121771:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121774:	e8 99 ae fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121779:	29 c3                	sub    %eax,%ebx
f012177b:	89 d8                	mov    %ebx,%eax
f012177d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121782:	74 17                	je     f012179b <test_kfree_bestfirstfit+0x730>
f0121784:	83 ec 04             	sub    $0x4,%esp
f0121787:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012178c:	68 d3 06 00 00       	push   $0x6d3
f0121791:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121796:	e8 15 ea fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012179b:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f01217a2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01217a5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01217ab:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01217ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217b5:	eb 0e                	jmp    f01217c5 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f01217b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217ba:	8b 45 98             	mov    -0x68(%ebp),%eax
f01217bd:	01 d0                	add    %edx,%eax
f01217bf:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01217c2:	ff 45 f4             	incl   -0xc(%ebp)
f01217c5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01217cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217ce:	7f e7                	jg     f01217b7 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01217d0:	e8 3d ae fe ff       	call   f010c612 <sys_calculate_free_frames>
f01217d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217d8:	e8 db 2a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01217dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01217e0:	83 ec 0c             	sub    $0xc,%esp
f01217e3:	68 00 fc 5f 00       	push   $0x5ffc00
f01217e8:	e8 a6 63 fe ff       	call   f0107b93 <kmalloc>
f01217ed:	83 c4 10             	add    $0x10,%esp
f01217f0:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217f6:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01217fc:	89 c1                	mov    %eax,%ecx
f01217fe:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121805:	10 00 00 
f0121808:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012180d:	0f b6 d0             	movzbl %al,%edx
f0121810:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121816:	01 d0                	add    %edx,%eax
f0121818:	48                   	dec    %eax
f0121819:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012181f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121825:	ba 00 00 00 00       	mov    $0x0,%edx
f012182a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121830:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121836:	29 d0                	sub    %edx,%eax
f0121838:	89 c3                	mov    %eax,%ebx
f012183a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121841:	10 00 00 
f0121844:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121849:	0f b6 c0             	movzbl %al,%eax
f012184c:	c1 e0 04             	shl    $0x4,%eax
f012184f:	89 c2                	mov    %eax,%edx
f0121851:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121857:	01 d0                	add    %edx,%eax
f0121859:	48                   	dec    %eax
f012185a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121860:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121866:	ba 00 00 00 00       	mov    $0x0,%edx
f012186b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121871:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121877:	29 d0                	sub    %edx,%eax
f0121879:	01 d8                	add    %ebx,%eax
f012187b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121880:	39 c1                	cmp    %eax,%ecx
f0121882:	74 17                	je     f012189b <test_kfree_bestfirstfit+0x830>
f0121884:	83 ec 04             	sub    $0x4,%esp
f0121887:	68 e0 8d 13 f0       	push   $0xf0138de0
f012188c:	68 df 06 00 00       	push   $0x6df
f0121891:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121896:	e8 15 e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012189b:	e8 18 2a fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01218a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218a3:	74 17                	je     f01218bc <test_kfree_bestfirstfit+0x851>
f01218a5:	83 ec 04             	sub    $0x4,%esp
f01218a8:	68 14 8d 13 f0       	push   $0xf0138d14
f01218ad:	68 e0 06 00 00       	push   $0x6e0
f01218b2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01218b7:	e8 f4 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218bf:	e8 4e ad fe ff       	call   f010c612 <sys_calculate_free_frames>
f01218c4:	29 c3                	sub    %eax,%ebx
f01218c6:	89 d8                	mov    %ebx,%eax
f01218c8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01218cd:	74 17                	je     f01218e6 <test_kfree_bestfirstfit+0x87b>
f01218cf:	83 ec 04             	sub    $0x4,%esp
f01218d2:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01218d7:	68 e1 06 00 00       	push   $0x6e1
f01218dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01218e1:	e8 ca e8 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01218e6:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01218ed:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01218f0:	e8 1d ad fe ff       	call   f010c612 <sys_calculate_free_frames>
f01218f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218f8:	e8 bb 29 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01218fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121900:	83 ec 0c             	sub    $0xc,%esp
f0121903:	68 00 38 00 00       	push   $0x3800
f0121908:	e8 86 62 fe ff       	call   f0107b93 <kmalloc>
f012190d:	83 c4 10             	add    $0x10,%esp
f0121910:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121916:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012191c:	89 c1                	mov    %eax,%ecx
f012191e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121925:	10 00 00 
f0121928:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012192d:	0f b6 d0             	movzbl %al,%edx
f0121930:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121936:	01 d0                	add    %edx,%eax
f0121938:	48                   	dec    %eax
f0121939:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012193f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121945:	ba 00 00 00 00       	mov    $0x0,%edx
f012194a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121950:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121956:	29 d0                	sub    %edx,%eax
f0121958:	89 c3                	mov    %eax,%ebx
f012195a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121961:	10 00 00 
f0121964:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121969:	0f b6 c0             	movzbl %al,%eax
f012196c:	c1 e0 04             	shl    $0x4,%eax
f012196f:	89 c2                	mov    %eax,%edx
f0121971:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121977:	01 d0                	add    %edx,%eax
f0121979:	48                   	dec    %eax
f012197a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121980:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121986:	ba 00 00 00 00       	mov    $0x0,%edx
f012198b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121991:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121997:	29 d0                	sub    %edx,%eax
f0121999:	01 d8                	add    %ebx,%eax
f012199b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01219a0:	39 c1                	cmp    %eax,%ecx
f01219a2:	74 17                	je     f01219bb <test_kfree_bestfirstfit+0x950>
f01219a4:	83 ec 04             	sub    $0x4,%esp
f01219a7:	68 e0 8d 13 f0       	push   $0xf0138de0
f01219ac:	68 e8 06 00 00       	push   $0x6e8
f01219b1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01219b6:	e8 f5 e7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219bb:	e8 f8 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01219c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219c3:	74 17                	je     f01219dc <test_kfree_bestfirstfit+0x971>
f01219c5:	83 ec 04             	sub    $0x4,%esp
f01219c8:	68 14 8d 13 f0       	push   $0xf0138d14
f01219cd:	68 e9 06 00 00       	push   $0x6e9
f01219d2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01219d7:	e8 d4 e7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219dc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219df:	e8 2e ac fe ff       	call   f010c612 <sys_calculate_free_frames>
f01219e4:	29 c3                	sub    %eax,%ebx
f01219e6:	89 d8                	mov    %ebx,%eax
f01219e8:	83 f8 04             	cmp    $0x4,%eax
f01219eb:	74 17                	je     f0121a04 <test_kfree_bestfirstfit+0x999>
f01219ed:	83 ec 04             	sub    $0x4,%esp
f01219f0:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01219f5:	68 ea 06 00 00       	push   $0x6ea
f01219fa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01219ff:	e8 ac e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121a04:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121a0b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121a0e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121a14:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121a17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a1e:	eb 0e                	jmp    f0121a2e <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121a20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a23:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121a26:	01 d0                	add    %edx,%eax
f0121a28:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121a2b:	ff 45 f4             	incl   -0xc(%ebp)
f0121a2e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121a34:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a37:	7f e7                	jg     f0121a20 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121a39:	e8 d4 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121a3e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121a44:	e8 6f 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121a49:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121a4f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121a55:	83 ec 0c             	sub    $0xc,%esp
f0121a58:	50                   	push   %eax
f0121a59:	e8 4f 61 fe ff       	call   f0107bad <kfree>
f0121a5e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a61:	e8 52 28 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121a66:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121a6c:	74 17                	je     f0121a85 <test_kfree_bestfirstfit+0xa1a>
f0121a6e:	83 ec 04             	sub    $0x4,%esp
f0121a71:	68 14 8d 13 f0       	push   $0xf0138d14
f0121a76:	68 f9 06 00 00       	push   $0x6f9
f0121a7b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121a80:	e8 2b e7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a85:	e8 88 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121a8a:	89 c2                	mov    %eax,%edx
f0121a8c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121a92:	29 c2                	sub    %eax,%edx
f0121a94:	89 d0                	mov    %edx,%eax
f0121a96:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121a9b:	74 17                	je     f0121ab4 <test_kfree_bestfirstfit+0xa49>
f0121a9d:	83 ec 04             	sub    $0x4,%esp
f0121aa0:	68 84 94 13 f0       	push   $0xf0139484
f0121aa5:	68 fa 06 00 00       	push   $0x6fa
f0121aaa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121aaf:	e8 fc e6 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ab4:	e8 59 ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121ab9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121abf:	e8 f4 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121ac4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121aca:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121ad0:	83 ec 0c             	sub    $0xc,%esp
f0121ad3:	50                   	push   %eax
f0121ad4:	e8 d4 60 fe ff       	call   f0107bad <kfree>
f0121ad9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121adc:	e8 d7 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121ae1:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121ae7:	74 17                	je     f0121b00 <test_kfree_bestfirstfit+0xa95>
f0121ae9:	83 ec 04             	sub    $0x4,%esp
f0121aec:	68 14 8d 13 f0       	push   $0xf0138d14
f0121af1:	68 00 07 00 00       	push   $0x700
f0121af6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121afb:	e8 b0 e6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b00:	e8 0d ab fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121b05:	89 c2                	mov    %eax,%edx
f0121b07:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121b0d:	29 c2                	sub    %eax,%edx
f0121b0f:	89 d0                	mov    %edx,%eax
f0121b11:	83 f8 01             	cmp    $0x1,%eax
f0121b14:	74 17                	je     f0121b2d <test_kfree_bestfirstfit+0xac2>
f0121b16:	83 ec 04             	sub    $0x4,%esp
f0121b19:	68 84 94 13 f0       	push   $0xf0139484
f0121b1e:	68 01 07 00 00       	push   $0x701
f0121b23:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121b28:	e8 83 e6 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b2d:	e8 e0 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121b32:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b38:	e8 7b 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121b3d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121b43:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121b49:	83 ec 0c             	sub    $0xc,%esp
f0121b4c:	50                   	push   %eax
f0121b4d:	e8 5b 60 fe ff       	call   f0107bad <kfree>
f0121b52:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b55:	e8 5e 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121b5a:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121b60:	74 17                	je     f0121b79 <test_kfree_bestfirstfit+0xb0e>
f0121b62:	83 ec 04             	sub    $0x4,%esp
f0121b65:	68 14 8d 13 f0       	push   $0xf0138d14
f0121b6a:	68 07 07 00 00       	push   $0x707
f0121b6f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121b74:	e8 37 e6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b79:	e8 94 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121b7e:	89 c2                	mov    %eax,%edx
f0121b80:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121b86:	29 c2                	sub    %eax,%edx
f0121b88:	89 d0                	mov    %edx,%eax
f0121b8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121b8f:	74 17                	je     f0121ba8 <test_kfree_bestfirstfit+0xb3d>
f0121b91:	83 ec 04             	sub    $0x4,%esp
f0121b94:	68 84 94 13 f0       	push   $0xf0139484
f0121b99:	68 08 07 00 00       	push   $0x708
f0121b9e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121ba3:	e8 08 e6 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ba8:	e8 65 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121bad:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bb3:	e8 00 27 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121bb8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121bbe:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121bc4:	83 ec 0c             	sub    $0xc,%esp
f0121bc7:	50                   	push   %eax
f0121bc8:	e8 e0 5f fe ff       	call   f0107bad <kfree>
f0121bcd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bd0:	e8 e3 26 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121bd5:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121bdb:	74 17                	je     f0121bf4 <test_kfree_bestfirstfit+0xb89>
f0121bdd:	83 ec 04             	sub    $0x4,%esp
f0121be0:	68 14 8d 13 f0       	push   $0xf0138d14
f0121be5:	68 0e 07 00 00       	push   $0x70e
f0121bea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121bef:	e8 bc e5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121bf4:	e8 19 aa fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121bf9:	89 c2                	mov    %eax,%edx
f0121bfb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121c01:	29 c2                	sub    %eax,%edx
f0121c03:	89 d0                	mov    %edx,%eax
f0121c05:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121c0a:	74 17                	je     f0121c23 <test_kfree_bestfirstfit+0xbb8>
f0121c0c:	83 ec 04             	sub    $0x4,%esp
f0121c0f:	68 84 94 13 f0       	push   $0xf0139484
f0121c14:	68 0f 07 00 00       	push   $0x70f
f0121c19:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121c1e:	e8 8d e5 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121c23:	83 ec 0c             	sub    $0xc,%esp
f0121c26:	68 bc 94 13 f0       	push   $0xf01394bc
f0121c2b:	e8 01 f2 fd ff       	call   f0100e31 <cprintf>
f0121c30:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121c33:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121c39:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121c3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c43:	eb 1e                	jmp    f0121c63 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121c45:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121c4b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121c4e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c51:	01 c8                	add    %ecx,%eax
f0121c53:	8a 00                	mov    (%eax),%al
f0121c55:	0f be c0             	movsbl %al,%eax
f0121c58:	01 d0                	add    %edx,%eax
f0121c5a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121c60:	ff 45 f4             	incl   -0xc(%ebp)
f0121c63:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121c69:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c6c:	7f d7                	jg     f0121c45 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121c6e:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121c74:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121c7a:	89 c1                	mov    %eax,%ecx
f0121c7c:	01 c9                	add    %ecx,%ecx
f0121c7e:	01 c8                	add    %ecx,%eax
f0121c80:	39 c2                	cmp    %eax,%edx
f0121c82:	74 17                	je     f0121c9b <test_kfree_bestfirstfit+0xc30>
f0121c84:	83 ec 04             	sub    $0x4,%esp
f0121c87:	68 e0 94 13 f0       	push   $0xf01394e0
f0121c8c:	68 1c 07 00 00       	push   $0x71c
f0121c91:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121c96:	e8 15 e5 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121c9b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121ca1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121ca4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121cab:	eb 1e                	jmp    f0121ccb <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f0121cad:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0121cb3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121cb6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121cb9:	01 c8                	add    %ecx,%eax
f0121cbb:	8a 00                	mov    (%eax),%al
f0121cbd:	0f be c0             	movsbl %al,%eax
f0121cc0:	01 d0                	add    %edx,%eax
f0121cc2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121cc8:	ff 45 f4             	incl   -0xc(%ebp)
f0121ccb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121cd1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121cd4:	7f d7                	jg     f0121cad <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121cd6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121cdc:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0121ce2:	c1 e2 02             	shl    $0x2,%edx
f0121ce5:	39 d0                	cmp    %edx,%eax
f0121ce7:	74 17                	je     f0121d00 <test_kfree_bestfirstfit+0xc95>
f0121ce9:	83 ec 04             	sub    $0x4,%esp
f0121cec:	68 e0 94 13 f0       	push   $0xf01394e0
f0121cf1:	68 24 07 00 00       	push   $0x724
f0121cf6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121cfb:	e8 b0 e4 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121d00:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121d06:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121d09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d10:	eb 1e                	jmp    f0121d30 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0121d12:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0121d18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121d1b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d1e:	01 c8                	add    %ecx,%eax
f0121d20:	8a 00                	mov    (%eax),%al
f0121d22:	0f be c0             	movsbl %al,%eax
f0121d25:	01 d0                	add    %edx,%eax
f0121d27:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121d2d:	ff 45 f4             	incl   -0xc(%ebp)
f0121d30:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121d36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d39:	7f d7                	jg     f0121d12 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121d3b:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0121d41:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0121d47:	89 d0                	mov    %edx,%eax
f0121d49:	c1 e0 02             	shl    $0x2,%eax
f0121d4c:	01 d0                	add    %edx,%eax
f0121d4e:	39 c1                	cmp    %eax,%ecx
f0121d50:	74 17                	je     f0121d69 <test_kfree_bestfirstfit+0xcfe>
f0121d52:	83 ec 04             	sub    $0x4,%esp
f0121d55:	68 e0 94 13 f0       	push   $0xf01394e0
f0121d5a:	68 2c 07 00 00       	push   $0x72c
f0121d5f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121d64:	e8 47 e4 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121d69:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121d6f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121d72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d79:	eb 1e                	jmp    f0121d99 <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f0121d7b:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0121d81:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121d84:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d87:	01 c8                	add    %ecx,%eax
f0121d89:	8a 00                	mov    (%eax),%al
f0121d8b:	0f be c0             	movsbl %al,%eax
f0121d8e:	01 d0                	add    %edx,%eax
f0121d90:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121d96:	ff 45 f4             	incl   -0xc(%ebp)
f0121d99:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121d9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121da2:	7f d7                	jg     f0121d7b <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121da4:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0121daa:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0121db0:	89 d0                	mov    %edx,%eax
f0121db2:	01 c0                	add    %eax,%eax
f0121db4:	01 d0                	add    %edx,%eax
f0121db6:	01 c0                	add    %eax,%eax
f0121db8:	01 d0                	add    %edx,%eax
f0121dba:	39 c1                	cmp    %eax,%ecx
f0121dbc:	74 17                	je     f0121dd5 <test_kfree_bestfirstfit+0xd6a>
f0121dbe:	83 ec 04             	sub    $0x4,%esp
f0121dc1:	68 e0 94 13 f0       	push   $0xf01394e0
f0121dc6:	68 34 07 00 00       	push   $0x734
f0121dcb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121dd0:	e8 db e3 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0121dd5:	83 ec 0c             	sub    $0xc,%esp
f0121dd8:	68 13 95 13 f0       	push   $0xf0139513
f0121ddd:	e8 4f f0 fd ff       	call   f0100e31 <cprintf>
f0121de2:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121de5:	e8 28 a8 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121dea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ded:	e8 c6 24 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121df2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0121df5:	83 ec 0c             	sub    $0xc,%esp
f0121df8:	68 00 00 30 00       	push   $0x300000
f0121dfd:	e8 91 5d fe ff       	call   f0107b93 <kmalloc>
f0121e02:	83 c4 10             	add    $0x10,%esp
f0121e05:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e0b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121e11:	89 c1                	mov    %eax,%ecx
f0121e13:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121e1a:	10 00 00 
f0121e1d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121e22:	0f b6 d0             	movzbl %al,%edx
f0121e25:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121e2b:	01 d0                	add    %edx,%eax
f0121e2d:	48                   	dec    %eax
f0121e2e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121e34:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121e3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e3f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121e45:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121e4b:	29 d0                	sub    %edx,%eax
f0121e4d:	89 c3                	mov    %eax,%ebx
f0121e4f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0121e56:	10 00 00 
f0121e59:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121e5e:	0f b6 c0             	movzbl %al,%eax
f0121e61:	c1 e0 04             	shl    $0x4,%eax
f0121e64:	89 c2                	mov    %eax,%edx
f0121e66:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0121e6c:	01 d0                	add    %edx,%eax
f0121e6e:	48                   	dec    %eax
f0121e6f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0121e75:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121e7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e80:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121e86:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121e8c:	29 d0                	sub    %edx,%eax
f0121e8e:	01 d8                	add    %ebx,%eax
f0121e90:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121e95:	39 c1                	cmp    %eax,%ecx
f0121e97:	74 17                	je     f0121eb0 <test_kfree_bestfirstfit+0xe45>
f0121e99:	83 ec 04             	sub    $0x4,%esp
f0121e9c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0121ea1:	68 3f 07 00 00       	push   $0x73f
f0121ea6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121eab:	e8 00 e3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121eb0:	e8 03 24 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121eb5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121eb8:	74 17                	je     f0121ed1 <test_kfree_bestfirstfit+0xe66>
f0121eba:	83 ec 04             	sub    $0x4,%esp
f0121ebd:	68 14 8d 13 f0       	push   $0xf0138d14
f0121ec2:	68 40 07 00 00       	push   $0x740
f0121ec7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121ecc:	e8 df e2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ed1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ed4:	e8 39 a7 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121ed9:	29 c3                	sub    %eax,%ebx
f0121edb:	89 d8                	mov    %ebx,%eax
f0121edd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121ee2:	74 17                	je     f0121efb <test_kfree_bestfirstfit+0xe90>
f0121ee4:	83 ec 04             	sub    $0x4,%esp
f0121ee7:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0121eec:	68 41 07 00 00       	push   $0x741
f0121ef1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121ef6:	e8 b5 e2 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0121efb:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0121f02:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0121f05:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121f0b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121f0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f15:	eb 0e                	jmp    f0121f25 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0121f17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f1a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121f1d:	01 d0                	add    %edx,%eax
f0121f1f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121f22:	ff 45 f4             	incl   -0xc(%ebp)
f0121f25:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0121f2b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f2e:	7f e7                	jg     f0121f17 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f30:	e8 dd a6 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0121f35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f38:	e8 7b 23 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0121f3d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0121f40:	83 ec 0c             	sub    $0xc,%esp
f0121f43:	68 00 08 00 00       	push   $0x800
f0121f48:	e8 46 5c fe ff       	call   f0107b93 <kmalloc>
f0121f4d:	83 c4 10             	add    $0x10,%esp
f0121f50:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f56:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121f5c:	89 c1                	mov    %eax,%ecx
f0121f5e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121f65:	10 00 00 
f0121f68:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121f6d:	0f b6 d0             	movzbl %al,%edx
f0121f70:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0121f76:	01 d0                	add    %edx,%eax
f0121f78:	48                   	dec    %eax
f0121f79:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121f7f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121f85:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f8a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121f90:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121f96:	29 d0                	sub    %edx,%eax
f0121f98:	89 c3                	mov    %eax,%ebx
f0121f9a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121fa1:	10 00 00 
f0121fa4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0121fa9:	0f b6 c0             	movzbl %al,%eax
f0121fac:	c1 e0 04             	shl    $0x4,%eax
f0121faf:	89 c2                	mov    %eax,%edx
f0121fb1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121fb7:	01 d0                	add    %edx,%eax
f0121fb9:	48                   	dec    %eax
f0121fba:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121fc0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121fc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fcb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121fd1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121fd7:	29 d0                	sub    %edx,%eax
f0121fd9:	01 d8                	add    %ebx,%eax
f0121fdb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121fe0:	39 c1                	cmp    %eax,%ecx
f0121fe2:	74 17                	je     f0121ffb <test_kfree_bestfirstfit+0xf90>
f0121fe4:	83 ec 04             	sub    $0x4,%esp
f0121fe7:	68 e0 8d 13 f0       	push   $0xf0138de0
f0121fec:	68 4d 07 00 00       	push   $0x74d
f0121ff1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0121ff6:	e8 b5 e1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ffb:	e8 b8 22 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122000:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122003:	74 17                	je     f012201c <test_kfree_bestfirstfit+0xfb1>
f0122005:	83 ec 04             	sub    $0x4,%esp
f0122008:	68 14 8d 13 f0       	push   $0xf0138d14
f012200d:	68 4e 07 00 00       	push   $0x74e
f0122012:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122017:	e8 94 e1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012201c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012201f:	e8 ee a5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122024:	29 c3                	sub    %eax,%ebx
f0122026:	89 d8                	mov    %ebx,%eax
f0122028:	83 f8 01             	cmp    $0x1,%eax
f012202b:	74 17                	je     f0122044 <test_kfree_bestfirstfit+0xfd9>
f012202d:	83 ec 04             	sub    $0x4,%esp
f0122030:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122035:	68 4f 07 00 00       	push   $0x74f
f012203a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012203f:	e8 6c e1 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122044:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f012204b:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f012204e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122054:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122057:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012205e:	eb 0e                	jmp    f012206e <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f0122060:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122063:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122066:	01 d0                	add    %edx,%eax
f0122068:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012206b:	ff 45 f4             	incl   -0xc(%ebp)
f012206e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122074:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122077:	7f e7                	jg     f0122060 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122079:	e8 94 a5 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012207e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122081:	e8 32 22 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122086:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122089:	83 ec 0c             	sub    $0xc,%esp
f012208c:	68 00 00 10 00       	push   $0x100000
f0122091:	e8 fd 5a fe ff       	call   f0107b93 <kmalloc>
f0122096:	83 c4 10             	add    $0x10,%esp
f0122099:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012209f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01220a5:	89 c1                	mov    %eax,%ecx
f01220a7:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01220ae:	10 00 00 
f01220b1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01220b6:	0f b6 d0             	movzbl %al,%edx
f01220b9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01220bf:	01 d0                	add    %edx,%eax
f01220c1:	48                   	dec    %eax
f01220c2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01220c8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01220ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01220d3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01220d9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01220df:	29 d0                	sub    %edx,%eax
f01220e1:	89 c3                	mov    %eax,%ebx
f01220e3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01220ea:	10 00 00 
f01220ed:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01220f2:	0f b6 c0             	movzbl %al,%eax
f01220f5:	c1 e0 04             	shl    $0x4,%eax
f01220f8:	89 c2                	mov    %eax,%edx
f01220fa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122100:	01 d0                	add    %edx,%eax
f0122102:	48                   	dec    %eax
f0122103:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122109:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012210f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122114:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012211a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122120:	29 d0                	sub    %edx,%eax
f0122122:	01 d8                	add    %ebx,%eax
f0122124:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122129:	39 c1                	cmp    %eax,%ecx
f012212b:	74 17                	je     f0122144 <test_kfree_bestfirstfit+0x10d9>
f012212d:	83 ec 04             	sub    $0x4,%esp
f0122130:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122135:	68 5b 07 00 00       	push   $0x75b
f012213a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012213f:	e8 6c e0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122144:	e8 6f 21 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122149:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012214c:	74 17                	je     f0122165 <test_kfree_bestfirstfit+0x10fa>
f012214e:	83 ec 04             	sub    $0x4,%esp
f0122151:	68 14 8d 13 f0       	push   $0xf0138d14
f0122156:	68 5c 07 00 00       	push   $0x75c
f012215b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122160:	e8 4b e0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122165:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122168:	e8 a5 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012216d:	29 c3                	sub    %eax,%ebx
f012216f:	89 d8                	mov    %ebx,%eax
f0122171:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122176:	74 17                	je     f012218f <test_kfree_bestfirstfit+0x1124>
f0122178:	83 ec 04             	sub    $0x4,%esp
f012217b:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122180:	68 5d 07 00 00       	push   $0x75d
f0122185:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012218a:	e8 21 e0 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012218f:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f0122196:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122199:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012219f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01221a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221a9:	eb 0e                	jmp    f01221b9 <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f01221ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221ae:	8b 45 98             	mov    -0x68(%ebp),%eax
f01221b1:	01 d0                	add    %edx,%eax
f01221b3:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01221b6:	ff 45 f4             	incl   -0xc(%ebp)
f01221b9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01221bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221c2:	7f e7                	jg     f01221ab <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01221c4:	83 ec 0c             	sub    $0xc,%esp
f01221c7:	68 1a 95 13 f0       	push   $0xf013951a
f01221cc:	e8 60 ec fd ff       	call   f0100e31 <cprintf>
f01221d1:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01221d4:	e8 39 a4 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01221d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221dc:	e8 d7 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01221e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01221e4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01221ea:	83 ec 0c             	sub    $0xc,%esp
f01221ed:	50                   	push   %eax
f01221ee:	e8 ba 59 fe ff       	call   f0107bad <kfree>
f01221f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221f6:	e8 bd 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01221fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221fe:	74 17                	je     f0122217 <test_kfree_bestfirstfit+0x11ac>
f0122200:	83 ec 04             	sub    $0x4,%esp
f0122203:	68 14 8d 13 f0       	push   $0xf0138d14
f0122208:	68 6d 07 00 00       	push   $0x76d
f012220d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122212:	e8 99 df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122217:	e8 f6 a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012221c:	89 c2                	mov    %eax,%edx
f012221e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122221:	29 c2                	sub    %eax,%edx
f0122223:	89 d0                	mov    %edx,%eax
f0122225:	83 f8 02             	cmp    $0x2,%eax
f0122228:	74 17                	je     f0122241 <test_kfree_bestfirstfit+0x11d6>
f012222a:	83 ec 04             	sub    $0x4,%esp
f012222d:	68 84 94 13 f0       	push   $0xf0139484
f0122232:	68 6e 07 00 00       	push   $0x76e
f0122237:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012223c:	e8 6f df fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122241:	e8 cc a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122246:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122249:	e8 6a 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012224e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122251:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122257:	83 ec 0c             	sub    $0xc,%esp
f012225a:	50                   	push   %eax
f012225b:	e8 4d 59 fe ff       	call   f0107bad <kfree>
f0122260:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122263:	e8 50 20 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122268:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012226b:	74 17                	je     f0122284 <test_kfree_bestfirstfit+0x1219>
f012226d:	83 ec 04             	sub    $0x4,%esp
f0122270:	68 14 8d 13 f0       	push   $0xf0138d14
f0122275:	68 74 07 00 00       	push   $0x774
f012227a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012227f:	e8 2c df fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122284:	e8 89 a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122289:	89 c2                	mov    %eax,%edx
f012228b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012228e:	29 c2                	sub    %eax,%edx
f0122290:	89 d0                	mov    %edx,%eax
f0122292:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122297:	74 17                	je     f01222b0 <test_kfree_bestfirstfit+0x1245>
f0122299:	83 ec 04             	sub    $0x4,%esp
f012229c:	68 84 94 13 f0       	push   $0xf0139484
f01222a1:	68 75 07 00 00       	push   $0x775
f01222a6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01222ab:	e8 00 df fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01222b0:	e8 5d a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01222b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222b8:	e8 fb 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01222bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01222c0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01222c6:	83 ec 0c             	sub    $0xc,%esp
f01222c9:	50                   	push   %eax
f01222ca:	e8 de 58 fe ff       	call   f0107bad <kfree>
f01222cf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222d2:	e8 e1 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01222d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222da:	74 17                	je     f01222f3 <test_kfree_bestfirstfit+0x1288>
f01222dc:	83 ec 04             	sub    $0x4,%esp
f01222df:	68 14 8d 13 f0       	push   $0xf0138d14
f01222e4:	68 7b 07 00 00       	push   $0x77b
f01222e9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01222ee:	e8 bd de fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01222f3:	e8 1a a3 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01222f8:	89 c2                	mov    %eax,%edx
f01222fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222fd:	29 c2                	sub    %eax,%edx
f01222ff:	89 d0                	mov    %edx,%eax
f0122301:	83 f8 01             	cmp    $0x1,%eax
f0122304:	74 17                	je     f012231d <test_kfree_bestfirstfit+0x12b2>
f0122306:	83 ec 04             	sub    $0x4,%esp
f0122309:	68 84 94 13 f0       	push   $0xf0139484
f012230e:	68 7c 07 00 00       	push   $0x77c
f0122313:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122318:	e8 93 de fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012231d:	e8 f0 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122322:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122325:	e8 8e 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012232a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012232d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122333:	83 ec 0c             	sub    $0xc,%esp
f0122336:	50                   	push   %eax
f0122337:	e8 71 58 fe ff       	call   f0107bad <kfree>
f012233c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012233f:	e8 74 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122344:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122347:	74 17                	je     f0122360 <test_kfree_bestfirstfit+0x12f5>
f0122349:	83 ec 04             	sub    $0x4,%esp
f012234c:	68 14 8d 13 f0       	push   $0xf0138d14
f0122351:	68 82 07 00 00       	push   $0x782
f0122356:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012235b:	e8 50 de fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122360:	e8 ad a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122365:	89 c2                	mov    %eax,%edx
f0122367:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012236a:	29 c2                	sub    %eax,%edx
f012236c:	89 d0                	mov    %edx,%eax
f012236e:	83 f8 04             	cmp    $0x4,%eax
f0122371:	74 17                	je     f012238a <test_kfree_bestfirstfit+0x131f>
f0122373:	83 ec 04             	sub    $0x4,%esp
f0122376:	68 84 94 13 f0       	push   $0xf0139484
f012237b:	68 83 07 00 00       	push   $0x783
f0122380:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122385:	e8 26 de fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012238a:	e8 83 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012238f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122392:	e8 21 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122397:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012239a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01223a0:	83 ec 0c             	sub    $0xc,%esp
f01223a3:	50                   	push   %eax
f01223a4:	e8 04 58 fe ff       	call   f0107bad <kfree>
f01223a9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223ac:	e8 07 1f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01223b1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223b4:	74 17                	je     f01223cd <test_kfree_bestfirstfit+0x1362>
f01223b6:	83 ec 04             	sub    $0x4,%esp
f01223b9:	68 14 8d 13 f0       	push   $0xf0138d14
f01223be:	68 89 07 00 00       	push   $0x789
f01223c3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01223c8:	e8 e3 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01223cd:	e8 40 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01223d2:	89 c2                	mov    %eax,%edx
f01223d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223d7:	29 c2                	sub    %eax,%edx
f01223d9:	89 d0                	mov    %edx,%eax
f01223db:	3d 00 03 00 00       	cmp    $0x300,%eax
f01223e0:	74 17                	je     f01223f9 <test_kfree_bestfirstfit+0x138e>
f01223e2:	83 ec 04             	sub    $0x4,%esp
f01223e5:	68 84 94 13 f0       	push   $0xf0139484
f01223ea:	68 8a 07 00 00       	push   $0x78a
f01223ef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01223f4:	e8 b7 dd fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01223f9:	e8 14 a2 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01223fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122401:	e8 b2 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122406:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122409:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012240f:	83 ec 0c             	sub    $0xc,%esp
f0122412:	50                   	push   %eax
f0122413:	e8 95 57 fe ff       	call   f0107bad <kfree>
f0122418:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012241b:	e8 98 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122420:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122423:	74 17                	je     f012243c <test_kfree_bestfirstfit+0x13d1>
f0122425:	83 ec 04             	sub    $0x4,%esp
f0122428:	68 14 8d 13 f0       	push   $0xf0138d14
f012242d:	68 90 07 00 00       	push   $0x790
f0122432:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122437:	e8 74 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012243c:	e8 d1 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122441:	89 c2                	mov    %eax,%edx
f0122443:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122446:	29 c2                	sub    %eax,%edx
f0122448:	89 d0                	mov    %edx,%eax
f012244a:	83 f8 01             	cmp    $0x1,%eax
f012244d:	74 17                	je     f0122466 <test_kfree_bestfirstfit+0x13fb>
f012244f:	83 ec 04             	sub    $0x4,%esp
f0122452:	68 84 94 13 f0       	push   $0xf0139484
f0122457:	68 91 07 00 00       	push   $0x791
f012245c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122461:	e8 4a dd fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122466:	e8 a7 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012246b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012246e:	e8 45 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122473:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122476:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012247c:	83 ec 0c             	sub    $0xc,%esp
f012247f:	50                   	push   %eax
f0122480:	e8 28 57 fe ff       	call   f0107bad <kfree>
f0122485:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122488:	e8 2b 1e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012248d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122490:	74 17                	je     f01224a9 <test_kfree_bestfirstfit+0x143e>
f0122492:	83 ec 04             	sub    $0x4,%esp
f0122495:	68 14 8d 13 f0       	push   $0xf0138d14
f012249a:	68 97 07 00 00       	push   $0x797
f012249f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01224a4:	e8 07 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01224a9:	e8 64 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01224ae:	89 c2                	mov    %eax,%edx
f01224b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01224b3:	29 c2                	sub    %eax,%edx
f01224b5:	89 d0                	mov    %edx,%eax
f01224b7:	3d 00 01 00 00       	cmp    $0x100,%eax
f01224bc:	74 17                	je     f01224d5 <test_kfree_bestfirstfit+0x146a>
f01224be:	83 ec 04             	sub    $0x4,%esp
f01224c1:	68 84 94 13 f0       	push   $0xf0139484
f01224c6:	68 98 07 00 00       	push   $0x798
f01224cb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01224d0:	e8 db dc fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01224d5:	e8 38 a1 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01224da:	89 c2                	mov    %eax,%edx
f01224dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01224df:	39 c2                	cmp    %eax,%edx
f01224e1:	74 17                	je     f01224fa <test_kfree_bestfirstfit+0x148f>
f01224e3:	83 ec 04             	sub    $0x4,%esp
f01224e6:	68 24 95 13 f0       	push   $0xf0139524
f01224eb:	68 9a 07 00 00       	push   $0x79a
f01224f0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01224f5:	e8 b6 dc fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01224fa:	83 ec 0c             	sub    $0xc,%esp
f01224fd:	68 58 95 13 f0       	push   $0xf0139558
f0122502:	e8 2a e9 fd ff       	call   f0100e31 <cprintf>
f0122507:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012250a:	83 ec 0c             	sub    $0xc,%esp
f012250d:	6a 03                	push   $0x3
f012250f:	e8 99 a5 fe ff       	call   f010caad <sys_bypassPageFault>
f0122514:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122517:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012251e:	e9 82 00 00 00       	jmp    f01225a5 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122523:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122526:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f012252d:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122530:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122533:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122536:	e8 60 a5 fe ff       	call   f010ca9b <sys_rcr2>
f012253b:	89 c2                	mov    %eax,%edx
f012253d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122540:	39 c2                	cmp    %eax,%edx
f0122542:	74 17                	je     f012255b <test_kfree_bestfirstfit+0x14f0>
f0122544:	83 ec 04             	sub    $0x4,%esp
f0122547:	68 60 95 13 f0       	push   $0xf0139560
f012254c:	68 a9 07 00 00       	push   $0x7a9
f0122551:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122556:	e8 55 dc fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012255b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012255e:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122565:	89 c2                	mov    %eax,%edx
f0122567:	8b 45 98             	mov    -0x68(%ebp),%eax
f012256a:	01 d0                	add    %edx,%eax
f012256c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012256f:	e8 27 a5 fe ff       	call   f010ca9b <sys_rcr2>
f0122574:	89 c2                	mov    %eax,%edx
f0122576:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122579:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122580:	89 c1                	mov    %eax,%ecx
f0122582:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122585:	01 c8                	add    %ecx,%eax
f0122587:	39 c2                	cmp    %eax,%edx
f0122589:	74 17                	je     f01225a2 <test_kfree_bestfirstfit+0x1537>
f012258b:	83 ec 04             	sub    $0x4,%esp
f012258e:	68 60 95 13 f0       	push   $0xf0139560
f0122593:	68 ab 07 00 00       	push   $0x7ab
f0122598:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012259d:	e8 0e dc fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01225a2:	ff 45 f4             	incl   -0xc(%ebp)
f01225a5:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01225a9:	0f 8e 74 ff ff ff    	jle    f0122523 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01225af:	83 ec 0c             	sub    $0xc,%esp
f01225b2:	6a 00                	push   $0x0
f01225b4:	e8 f4 a4 fe ff       	call   f010caad <sys_bypassPageFault>
f01225b9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01225bc:	83 ec 0c             	sub    $0xc,%esp
f01225bf:	68 a5 95 13 f0       	push   $0xf01395a5
f01225c4:	e8 68 e8 fd ff       	call   f0100e31 <cprintf>
f01225c9:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01225cc:	e8 41 a0 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01225d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225d4:	e8 df 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01225d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01225dc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01225e2:	83 ec 0c             	sub    $0xc,%esp
f01225e5:	50                   	push   %eax
f01225e6:	e8 c2 55 fe ff       	call   f0107bad <kfree>
f01225eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225ee:	e8 c5 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01225f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225f6:	74 17                	je     f012260f <test_kfree_bestfirstfit+0x15a4>
f01225f8:	83 ec 04             	sub    $0x4,%esp
f01225fb:	68 14 8d 13 f0       	push   $0xf0138d14
f0122600:	68 b9 07 00 00       	push   $0x7b9
f0122605:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012260a:	e8 a1 db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012260f:	e8 fe 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122614:	89 c2                	mov    %eax,%edx
f0122616:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122619:	39 c2                	cmp    %eax,%edx
f012261b:	74 17                	je     f0122634 <test_kfree_bestfirstfit+0x15c9>
f012261d:	83 ec 04             	sub    $0x4,%esp
f0122620:	68 ac 95 13 f0       	push   $0xf01395ac
f0122625:	68 ba 07 00 00       	push   $0x7ba
f012262a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012262f:	e8 7c db fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122634:	e8 d9 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122639:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012263c:	e8 77 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122641:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122644:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012264a:	83 ec 0c             	sub    $0xc,%esp
f012264d:	50                   	push   %eax
f012264e:	e8 5a 55 fe ff       	call   f0107bad <kfree>
f0122653:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122656:	e8 5d 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012265b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012265e:	74 17                	je     f0122677 <test_kfree_bestfirstfit+0x160c>
f0122660:	83 ec 04             	sub    $0x4,%esp
f0122663:	68 14 8d 13 f0       	push   $0xf0138d14
f0122668:	68 c0 07 00 00       	push   $0x7c0
f012266d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122672:	e8 39 db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122677:	e8 96 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012267c:	89 c2                	mov    %eax,%edx
f012267e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122681:	39 c2                	cmp    %eax,%edx
f0122683:	74 17                	je     f012269c <test_kfree_bestfirstfit+0x1631>
f0122685:	83 ec 04             	sub    $0x4,%esp
f0122688:	68 ac 95 13 f0       	push   $0xf01395ac
f012268d:	68 c1 07 00 00       	push   $0x7c1
f0122692:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122697:	e8 14 db fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012269c:	e8 71 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01226a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226a4:	e8 0f 1c fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01226a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01226ac:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01226b2:	83 ec 0c             	sub    $0xc,%esp
f01226b5:	50                   	push   %eax
f01226b6:	e8 f2 54 fe ff       	call   f0107bad <kfree>
f01226bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226be:	e8 f5 1b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01226c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226c6:	74 17                	je     f01226df <test_kfree_bestfirstfit+0x1674>
f01226c8:	83 ec 04             	sub    $0x4,%esp
f01226cb:	68 14 8d 13 f0       	push   $0xf0138d14
f01226d0:	68 c7 07 00 00       	push   $0x7c7
f01226d5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01226da:	e8 d1 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01226df:	e8 2e 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01226e4:	89 c2                	mov    %eax,%edx
f01226e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226e9:	39 c2                	cmp    %eax,%edx
f01226eb:	74 17                	je     f0122704 <test_kfree_bestfirstfit+0x1699>
f01226ed:	83 ec 04             	sub    $0x4,%esp
f01226f0:	68 ac 95 13 f0       	push   $0xf01395ac
f01226f5:	68 c8 07 00 00       	push   $0x7c8
f01226fa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01226ff:	e8 ac da fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122704:	e8 09 9f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122709:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012270c:	e8 a7 1b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122711:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122714:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012271a:	83 ec 0c             	sub    $0xc,%esp
f012271d:	50                   	push   %eax
f012271e:	e8 8a 54 fe ff       	call   f0107bad <kfree>
f0122723:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122726:	e8 8d 1b fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012272b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012272e:	74 17                	je     f0122747 <test_kfree_bestfirstfit+0x16dc>
f0122730:	83 ec 04             	sub    $0x4,%esp
f0122733:	68 14 8d 13 f0       	push   $0xf0138d14
f0122738:	68 ce 07 00 00       	push   $0x7ce
f012273d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122742:	e8 69 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122747:	e8 c6 9e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012274c:	89 c2                	mov    %eax,%edx
f012274e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122751:	39 c2                	cmp    %eax,%edx
f0122753:	74 17                	je     f012276c <test_kfree_bestfirstfit+0x1701>
f0122755:	83 ec 04             	sub    $0x4,%esp
f0122758:	68 ac 95 13 f0       	push   $0xf01395ac
f012275d:	68 cf 07 00 00       	push   $0x7cf
f0122762:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122767:	e8 44 da fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f012276c:	83 ec 0c             	sub    $0xc,%esp
f012276f:	68 f3 95 13 f0       	push   $0xf01395f3
f0122774:	e8 b8 e6 fd ff       	call   f0100e31 <cprintf>
f0122779:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012277c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122783:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012278a:	eb 48                	jmp    f01227d4 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012278c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012278f:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0122794:	83 ec 04             	sub    $0x4,%esp
f0122797:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f012279d:	51                   	push   %ecx
f012279e:	52                   	push   %edx
f012279f:	50                   	push   %eax
f01227a0:	e8 76 49 fe ff       	call   f010711b <get_page_table>
f01227a5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01227a8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01227ae:	85 c0                	test   %eax,%eax
f01227b0:	75 17                	jne    f01227c9 <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01227b2:	83 ec 04             	sub    $0x4,%esp
f01227b5:	68 fc 95 13 f0       	push   $0xf01395fc
f01227ba:	68 dd 07 00 00       	push   $0x7dd
f01227bf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01227c4:	e8 e7 d9 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01227c9:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01227d0:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01227d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01227d8:	78 b2                	js     f012278c <test_kfree_bestfirstfit+0x1721>
f01227da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01227de:	7f 09                	jg     f01227e9 <test_kfree_bestfirstfit+0x177e>
f01227e0:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01227e7:	76 a3                	jbe    f012278c <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01227e9:	83 ec 0c             	sub    $0xc,%esp
f01227ec:	68 de 8e 13 f0       	push   $0xf0138ede
f01227f1:	e8 3b e6 fd ff       	call   f0100e31 <cprintf>
f01227f6:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01227f9:	83 ec 0c             	sub    $0xc,%esp
f01227fc:	68 64 96 13 f0       	push   $0xf0139664
f0122801:	e8 2b e6 fd ff       	call   f0100e31 <cprintf>
f0122806:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122809:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012280e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122811:	5b                   	pop    %ebx
f0122812:	5f                   	pop    %edi
f0122813:	5d                   	pop    %ebp
f0122814:	c3                   	ret    

f0122815 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122815:	55                   	push   %ebp
f0122816:	89 e5                	mov    %esp,%ebp
f0122818:	57                   	push   %edi
f0122819:	56                   	push   %esi
f012281a:	53                   	push   %ebx
f012281b:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122821:	83 ec 0c             	sub    $0xc,%esp
f0122824:	68 3c 8c 13 f0       	push   $0xf0138c3c
f0122829:	e8 03 e6 fd ff       	call   f0100e31 <cprintf>
f012282e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122831:	83 ec 0c             	sub    $0xc,%esp
f0122834:	68 6c 8c 13 f0       	push   $0xf0138c6c
f0122839:	e8 f3 e5 fd ff       	call   f0100e31 <cprintf>
f012283e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122841:	83 ec 0c             	sub    $0xc,%esp
f0122844:	68 3c 8c 13 f0       	push   $0xf0138c3c
f0122849:	e8 e3 e5 fd ff       	call   f0100e31 <cprintf>
f012284e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122851:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122855:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122859:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f012285f:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122865:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012286c:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122873:	e8 9a 9d fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122878:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012287b:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122881:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122886:	b8 00 00 00 00       	mov    $0x0,%eax
f012288b:	89 d7                	mov    %edx,%edi
f012288d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012288f:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122895:	b9 14 00 00 00       	mov    $0x14,%ecx
f012289a:	b8 00 00 00 00       	mov    $0x0,%eax
f012289f:	89 d7                	mov    %edx,%edi
f01228a1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01228a3:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f01228a9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01228ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01228b3:	89 d7                	mov    %edx,%edi
f01228b5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01228b7:	e8 56 9d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01228bc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228bf:	e8 f4 19 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01228c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01228c7:	83 ec 0c             	sub    $0xc,%esp
f01228ca:	68 00 fc 1f 00       	push   $0x1ffc00
f01228cf:	e8 bf 52 fe ff       	call   f0107b93 <kmalloc>
f01228d4:	83 c4 10             	add    $0x10,%esp
f01228d7:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228dd:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01228e3:	89 c1                	mov    %eax,%ecx
f01228e5:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01228ec:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01228f1:	0f b6 d0             	movzbl %al,%edx
f01228f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01228f7:	01 d0                	add    %edx,%eax
f01228f9:	48                   	dec    %eax
f01228fa:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01228fd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122900:	ba 00 00 00 00       	mov    $0x0,%edx
f0122905:	f7 75 a0             	divl   -0x60(%ebp)
f0122908:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012290b:	29 d0                	sub    %edx,%eax
f012290d:	89 c3                	mov    %eax,%ebx
f012290f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122916:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012291b:	0f b6 c0             	movzbl %al,%eax
f012291e:	c1 e0 04             	shl    $0x4,%eax
f0122921:	89 c2                	mov    %eax,%edx
f0122923:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122926:	01 d0                	add    %edx,%eax
f0122928:	48                   	dec    %eax
f0122929:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012292c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012292f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122934:	f7 75 98             	divl   -0x68(%ebp)
f0122937:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012293a:	29 d0                	sub    %edx,%eax
f012293c:	01 d8                	add    %ebx,%eax
f012293e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122943:	39 c1                	cmp    %eax,%ecx
f0122945:	74 17                	je     f012295e <test_kheap_phys_addr+0x149>
f0122947:	83 ec 04             	sub    $0x4,%esp
f012294a:	68 e0 8d 13 f0       	push   $0xf0138de0
f012294f:	68 0a 08 00 00       	push   $0x80a
f0122954:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122959:	e8 52 d8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012295e:	e8 55 19 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122963:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122966:	74 17                	je     f012297f <test_kheap_phys_addr+0x16a>
f0122968:	83 ec 04             	sub    $0x4,%esp
f012296b:	68 14 8d 13 f0       	push   $0xf0138d14
f0122970:	68 0b 08 00 00       	push   $0x80b
f0122975:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012297a:	e8 31 d8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012297f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122982:	e8 8b 9c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122987:	29 c3                	sub    %eax,%ebx
f0122989:	89 d8                	mov    %ebx,%eax
f012298b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122990:	74 17                	je     f01229a9 <test_kheap_phys_addr+0x194>
f0122992:	83 ec 04             	sub    $0x4,%esp
f0122995:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012299a:	68 0c 08 00 00       	push   $0x80c
f012299f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01229a4:	e8 07 d8 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01229a9:	e8 64 9c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01229ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229b1:	e8 02 19 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01229b6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01229b9:	83 ec 0c             	sub    $0xc,%esp
f01229bc:	68 00 fc 1f 00       	push   $0x1ffc00
f01229c1:	e8 cd 51 fe ff       	call   f0107b93 <kmalloc>
f01229c6:	83 c4 10             	add    $0x10,%esp
f01229c9:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01229cf:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01229d5:	89 c1                	mov    %eax,%ecx
f01229d7:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01229de:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01229e3:	0f b6 d0             	movzbl %al,%edx
f01229e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01229e9:	01 d0                	add    %edx,%eax
f01229eb:	48                   	dec    %eax
f01229ec:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01229ef:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01229f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01229f7:	f7 75 90             	divl   -0x70(%ebp)
f01229fa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01229fd:	29 d0                	sub    %edx,%eax
f01229ff:	89 c3                	mov    %eax,%ebx
f0122a01:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122a08:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122a0d:	0f b6 c0             	movzbl %al,%eax
f0122a10:	c1 e0 04             	shl    $0x4,%eax
f0122a13:	89 c2                	mov    %eax,%edx
f0122a15:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122a18:	01 d0                	add    %edx,%eax
f0122a1a:	48                   	dec    %eax
f0122a1b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122a1e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a26:	f7 75 88             	divl   -0x78(%ebp)
f0122a29:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122a2c:	29 d0                	sub    %edx,%eax
f0122a2e:	01 d8                	add    %ebx,%eax
f0122a30:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122a35:	39 c1                	cmp    %eax,%ecx
f0122a37:	74 17                	je     f0122a50 <test_kheap_phys_addr+0x23b>
f0122a39:	83 ec 04             	sub    $0x4,%esp
f0122a3c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122a41:	68 12 08 00 00       	push   $0x812
f0122a46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122a4b:	e8 60 d7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a50:	e8 63 18 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122a55:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122a58:	74 17                	je     f0122a71 <test_kheap_phys_addr+0x25c>
f0122a5a:	83 ec 04             	sub    $0x4,%esp
f0122a5d:	68 14 8d 13 f0       	push   $0xf0138d14
f0122a62:	68 13 08 00 00       	push   $0x813
f0122a67:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122a6c:	e8 3f d7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a71:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122a74:	e8 99 9b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122a79:	29 c3                	sub    %eax,%ebx
f0122a7b:	89 d8                	mov    %ebx,%eax
f0122a7d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a82:	74 17                	je     f0122a9b <test_kheap_phys_addr+0x286>
f0122a84:	83 ec 04             	sub    $0x4,%esp
f0122a87:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122a8c:	68 14 08 00 00       	push   $0x814
f0122a91:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122a96:	e8 15 d7 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a9b:	e8 72 9b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122aa0:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122aa3:	e8 10 18 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122aa8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122aab:	83 ec 0c             	sub    $0xc,%esp
f0122aae:	68 00 08 00 00       	push   $0x800
f0122ab3:	e8 db 50 fe ff       	call   f0107b93 <kmalloc>
f0122ab8:	83 c4 10             	add    $0x10,%esp
f0122abb:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ac1:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122ac7:	89 c1                	mov    %eax,%ecx
f0122ac9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122ad0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122ad5:	0f b6 d0             	movzbl %al,%edx
f0122ad8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122adb:	01 d0                	add    %edx,%eax
f0122add:	48                   	dec    %eax
f0122ade:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122ae4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122aea:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aef:	f7 75 80             	divl   -0x80(%ebp)
f0122af2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122af8:	29 d0                	sub    %edx,%eax
f0122afa:	89 c3                	mov    %eax,%ebx
f0122afc:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122b03:	10 00 00 
f0122b06:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122b0b:	0f b6 c0             	movzbl %al,%eax
f0122b0e:	c1 e0 04             	shl    $0x4,%eax
f0122b11:	89 c2                	mov    %eax,%edx
f0122b13:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122b19:	01 d0                	add    %edx,%eax
f0122b1b:	48                   	dec    %eax
f0122b1c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122b22:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122b28:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b2d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122b33:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122b39:	29 d0                	sub    %edx,%eax
f0122b3b:	01 d8                	add    %ebx,%eax
f0122b3d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122b42:	39 c1                	cmp    %eax,%ecx
f0122b44:	74 17                	je     f0122b5d <test_kheap_phys_addr+0x348>
f0122b46:	83 ec 04             	sub    $0x4,%esp
f0122b49:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122b4e:	68 1a 08 00 00       	push   $0x81a
f0122b53:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122b58:	e8 53 d6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b5d:	e8 56 17 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122b62:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122b65:	74 17                	je     f0122b7e <test_kheap_phys_addr+0x369>
f0122b67:	83 ec 04             	sub    $0x4,%esp
f0122b6a:	68 14 8d 13 f0       	push   $0xf0138d14
f0122b6f:	68 1b 08 00 00       	push   $0x81b
f0122b74:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122b79:	e8 32 d6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b7e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122b81:	e8 8c 9a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122b86:	29 c3                	sub    %eax,%ebx
f0122b88:	89 d8                	mov    %ebx,%eax
f0122b8a:	83 f8 01             	cmp    $0x1,%eax
f0122b8d:	74 17                	je     f0122ba6 <test_kheap_phys_addr+0x391>
f0122b8f:	83 ec 04             	sub    $0x4,%esp
f0122b92:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122b97:	68 1c 08 00 00       	push   $0x81c
f0122b9c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122ba1:	e8 0a d6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ba6:	e8 67 9a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122bab:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bae:	e8 05 17 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122bb3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122bb6:	83 ec 0c             	sub    $0xc,%esp
f0122bb9:	68 00 08 00 00       	push   $0x800
f0122bbe:	e8 d0 4f fe ff       	call   f0107b93 <kmalloc>
f0122bc3:	83 c4 10             	add    $0x10,%esp
f0122bc6:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bcc:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122bd2:	89 c1                	mov    %eax,%ecx
f0122bd4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122bdb:	10 00 00 
f0122bde:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122be3:	0f b6 d0             	movzbl %al,%edx
f0122be6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122bec:	01 d0                	add    %edx,%eax
f0122bee:	48                   	dec    %eax
f0122bef:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122bf5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122bfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c00:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122c06:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122c0c:	29 d0                	sub    %edx,%eax
f0122c0e:	89 c3                	mov    %eax,%ebx
f0122c10:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122c17:	10 00 00 
f0122c1a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122c1f:	0f b6 c0             	movzbl %al,%eax
f0122c22:	c1 e0 04             	shl    $0x4,%eax
f0122c25:	89 c2                	mov    %eax,%edx
f0122c27:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c2d:	01 d0                	add    %edx,%eax
f0122c2f:	48                   	dec    %eax
f0122c30:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122c36:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c41:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122c47:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122c4d:	29 d0                	sub    %edx,%eax
f0122c4f:	01 d8                	add    %ebx,%eax
f0122c51:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122c56:	39 c1                	cmp    %eax,%ecx
f0122c58:	74 17                	je     f0122c71 <test_kheap_phys_addr+0x45c>
f0122c5a:	83 ec 04             	sub    $0x4,%esp
f0122c5d:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122c62:	68 22 08 00 00       	push   $0x822
f0122c67:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122c6c:	e8 3f d5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c71:	e8 42 16 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122c76:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122c79:	74 17                	je     f0122c92 <test_kheap_phys_addr+0x47d>
f0122c7b:	83 ec 04             	sub    $0x4,%esp
f0122c7e:	68 14 8d 13 f0       	push   $0xf0138d14
f0122c83:	68 23 08 00 00       	push   $0x823
f0122c88:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122c8d:	e8 1e d5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c92:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122c95:	e8 78 99 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122c9a:	29 c3                	sub    %eax,%ebx
f0122c9c:	89 d8                	mov    %ebx,%eax
f0122c9e:	83 f8 01             	cmp    $0x1,%eax
f0122ca1:	74 17                	je     f0122cba <test_kheap_phys_addr+0x4a5>
f0122ca3:	83 ec 04             	sub    $0x4,%esp
f0122ca6:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122cab:	68 24 08 00 00       	push   $0x824
f0122cb0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122cb5:	e8 f6 d4 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cba:	e8 53 99 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122cbf:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cc2:	e8 f1 15 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122cc7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122cca:	83 ec 0c             	sub    $0xc,%esp
f0122ccd:	68 00 1c 00 00       	push   $0x1c00
f0122cd2:	e8 bc 4e fe ff       	call   f0107b93 <kmalloc>
f0122cd7:	83 c4 10             	add    $0x10,%esp
f0122cda:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ce0:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0122ce6:	89 c1                	mov    %eax,%ecx
f0122ce8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0122cef:	10 00 00 
f0122cf2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122cf7:	0f b6 d0             	movzbl %al,%edx
f0122cfa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d00:	01 d0                	add    %edx,%eax
f0122d02:	48                   	dec    %eax
f0122d03:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0122d09:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d14:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0122d1a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d20:	29 d0                	sub    %edx,%eax
f0122d22:	89 c3                	mov    %eax,%ebx
f0122d24:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0122d2b:	10 00 00 
f0122d2e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122d33:	0f b6 c0             	movzbl %al,%eax
f0122d36:	c1 e0 04             	shl    $0x4,%eax
f0122d39:	89 c2                	mov    %eax,%edx
f0122d3b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d41:	01 d0                	add    %edx,%eax
f0122d43:	48                   	dec    %eax
f0122d44:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0122d4a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d55:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0122d5b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122d61:	29 d0                	sub    %edx,%eax
f0122d63:	01 d8                	add    %ebx,%eax
f0122d65:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122d6a:	39 c1                	cmp    %eax,%ecx
f0122d6c:	74 17                	je     f0122d85 <test_kheap_phys_addr+0x570>
f0122d6e:	83 ec 04             	sub    $0x4,%esp
f0122d71:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122d76:	68 2a 08 00 00       	push   $0x82a
f0122d7b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122d80:	e8 2b d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d85:	e8 2e 15 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122d8a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122d8d:	74 17                	je     f0122da6 <test_kheap_phys_addr+0x591>
f0122d8f:	83 ec 04             	sub    $0x4,%esp
f0122d92:	68 14 8d 13 f0       	push   $0xf0138d14
f0122d97:	68 2b 08 00 00       	push   $0x82b
f0122d9c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122da1:	e8 0a d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122da6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122da9:	e8 64 98 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122dae:	29 c3                	sub    %eax,%ebx
f0122db0:	89 d8                	mov    %ebx,%eax
f0122db2:	83 f8 02             	cmp    $0x2,%eax
f0122db5:	74 17                	je     f0122dce <test_kheap_phys_addr+0x5b9>
f0122db7:	83 ec 04             	sub    $0x4,%esp
f0122dba:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122dbf:	68 2c 08 00 00       	push   $0x82c
f0122dc4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122dc9:	e8 e2 d3 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122dce:	e8 3f 98 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122dd3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122dd6:	e8 dd 14 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122ddb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122dde:	83 ec 0c             	sub    $0xc,%esp
f0122de1:	68 00 fc 2f 00       	push   $0x2ffc00
f0122de6:	e8 a8 4d fe ff       	call   f0107b93 <kmalloc>
f0122deb:	83 c4 10             	add    $0x10,%esp
f0122dee:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122df4:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0122dfa:	89 c1                	mov    %eax,%ecx
f0122dfc:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0122e03:	10 00 00 
f0122e06:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122e0b:	0f b6 d0             	movzbl %al,%edx
f0122e0e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122e14:	01 d0                	add    %edx,%eax
f0122e16:	48                   	dec    %eax
f0122e17:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0122e1d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122e23:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e28:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0122e2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122e34:	29 d0                	sub    %edx,%eax
f0122e36:	89 c3                	mov    %eax,%ebx
f0122e38:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0122e3f:	10 00 00 
f0122e42:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122e47:	0f b6 c0             	movzbl %al,%eax
f0122e4a:	c1 e0 04             	shl    $0x4,%eax
f0122e4d:	89 c2                	mov    %eax,%edx
f0122e4f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122e55:	01 d0                	add    %edx,%eax
f0122e57:	48                   	dec    %eax
f0122e58:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0122e5e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122e64:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e69:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0122e6f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122e75:	29 d0                	sub    %edx,%eax
f0122e77:	01 d8                	add    %ebx,%eax
f0122e79:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122e7e:	39 c1                	cmp    %eax,%ecx
f0122e80:	74 17                	je     f0122e99 <test_kheap_phys_addr+0x684>
f0122e82:	83 ec 04             	sub    $0x4,%esp
f0122e85:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122e8a:	68 32 08 00 00       	push   $0x832
f0122e8f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122e94:	e8 17 d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e99:	e8 1a 14 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122e9e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ea1:	74 17                	je     f0122eba <test_kheap_phys_addr+0x6a5>
f0122ea3:	83 ec 04             	sub    $0x4,%esp
f0122ea6:	68 14 8d 13 f0       	push   $0xf0138d14
f0122eab:	68 33 08 00 00       	push   $0x833
f0122eb0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122eb5:	e8 f6 d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122eba:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ebd:	e8 50 97 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122ec2:	29 c3                	sub    %eax,%ebx
f0122ec4:	89 d8                	mov    %ebx,%eax
f0122ec6:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122ecb:	74 17                	je     f0122ee4 <test_kheap_phys_addr+0x6cf>
f0122ecd:	83 ec 04             	sub    $0x4,%esp
f0122ed0:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122ed5:	68 34 08 00 00       	push   $0x834
f0122eda:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122edf:	e8 cc d2 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ee4:	e8 29 97 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122ee9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122eec:	e8 c7 13 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122ef1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122ef4:	83 ec 0c             	sub    $0xc,%esp
f0122ef7:	68 00 fc 5f 00       	push   $0x5ffc00
f0122efc:	e8 92 4c fe ff       	call   f0107b93 <kmalloc>
f0122f01:	83 c4 10             	add    $0x10,%esp
f0122f04:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f0a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0122f10:	89 c1                	mov    %eax,%ecx
f0122f12:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0122f19:	10 00 00 
f0122f1c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122f21:	0f b6 d0             	movzbl %al,%edx
f0122f24:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f2a:	01 d0                	add    %edx,%eax
f0122f2c:	48                   	dec    %eax
f0122f2d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0122f33:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f3e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0122f44:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f4a:	29 d0                	sub    %edx,%eax
f0122f4c:	89 c3                	mov    %eax,%ebx
f0122f4e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0122f55:	10 00 00 
f0122f58:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0122f5d:	0f b6 c0             	movzbl %al,%eax
f0122f60:	c1 e0 04             	shl    $0x4,%eax
f0122f63:	89 c2                	mov    %eax,%edx
f0122f65:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f6b:	01 d0                	add    %edx,%eax
f0122f6d:	48                   	dec    %eax
f0122f6e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0122f74:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f7f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0122f85:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122f8b:	29 d0                	sub    %edx,%eax
f0122f8d:	01 d8                	add    %ebx,%eax
f0122f8f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122f94:	39 c1                	cmp    %eax,%ecx
f0122f96:	74 17                	je     f0122faf <test_kheap_phys_addr+0x79a>
f0122f98:	83 ec 04             	sub    $0x4,%esp
f0122f9b:	68 e0 8d 13 f0       	push   $0xf0138de0
f0122fa0:	68 3a 08 00 00       	push   $0x83a
f0122fa5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122faa:	e8 01 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122faf:	e8 04 13 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0122fb4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122fb7:	74 17                	je     f0122fd0 <test_kheap_phys_addr+0x7bb>
f0122fb9:	83 ec 04             	sub    $0x4,%esp
f0122fbc:	68 14 8d 13 f0       	push   $0xf0138d14
f0122fc1:	68 3b 08 00 00       	push   $0x83b
f0122fc6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122fcb:	e8 e0 d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122fd0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122fd3:	e8 3a 96 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122fd8:	29 c3                	sub    %eax,%ebx
f0122fda:	89 d8                	mov    %ebx,%eax
f0122fdc:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122fe1:	74 17                	je     f0122ffa <test_kheap_phys_addr+0x7e5>
f0122fe3:	83 ec 04             	sub    $0x4,%esp
f0122fe6:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0122feb:	68 3c 08 00 00       	push   $0x83c
f0122ff0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0122ff5:	e8 b6 d1 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ffa:	e8 13 96 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0122fff:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123002:	e8 b1 12 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123007:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012300a:	83 ec 0c             	sub    $0xc,%esp
f012300d:	68 00 38 00 00       	push   $0x3800
f0123012:	e8 7c 4b fe ff       	call   f0107b93 <kmalloc>
f0123017:	83 c4 10             	add    $0x10,%esp
f012301a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123020:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123026:	89 c1                	mov    %eax,%ecx
f0123028:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012302f:	10 00 00 
f0123032:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123037:	0f b6 d0             	movzbl %al,%edx
f012303a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123040:	01 d0                	add    %edx,%eax
f0123042:	48                   	dec    %eax
f0123043:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123049:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012304f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123054:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012305a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123060:	29 d0                	sub    %edx,%eax
f0123062:	89 c3                	mov    %eax,%ebx
f0123064:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012306b:	10 00 00 
f012306e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123073:	0f b6 c0             	movzbl %al,%eax
f0123076:	c1 e0 04             	shl    $0x4,%eax
f0123079:	89 c2                	mov    %eax,%edx
f012307b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123081:	01 d0                	add    %edx,%eax
f0123083:	48                   	dec    %eax
f0123084:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012308a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123090:	ba 00 00 00 00       	mov    $0x0,%edx
f0123095:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012309b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01230a1:	29 d0                	sub    %edx,%eax
f01230a3:	01 d8                	add    %ebx,%eax
f01230a5:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01230aa:	39 c1                	cmp    %eax,%ecx
f01230ac:	74 17                	je     f01230c5 <test_kheap_phys_addr+0x8b0>
f01230ae:	83 ec 04             	sub    $0x4,%esp
f01230b1:	68 e0 8d 13 f0       	push   $0xf0138de0
f01230b6:	68 42 08 00 00       	push   $0x842
f01230bb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01230c0:	e8 eb d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230c5:	e8 ee 11 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01230ca:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01230cd:	74 17                	je     f01230e6 <test_kheap_phys_addr+0x8d1>
f01230cf:	83 ec 04             	sub    $0x4,%esp
f01230d2:	68 14 8d 13 f0       	push   $0xf0138d14
f01230d7:	68 43 08 00 00       	push   $0x843
f01230dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01230e1:	e8 ca d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01230e6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01230e9:	e8 24 95 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01230ee:	29 c3                	sub    %eax,%ebx
f01230f0:	89 d8                	mov    %ebx,%eax
f01230f2:	83 f8 04             	cmp    $0x4,%eax
f01230f5:	74 17                	je     f012310e <test_kheap_phys_addr+0x8f9>
f01230f7:	83 ec 04             	sub    $0x4,%esp
f01230fa:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01230ff:	68 44 08 00 00       	push   $0x844
f0123104:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123109:	e8 a2 d0 fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f012310e:	89 e0                	mov    %esp,%eax
f0123110:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123112:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123119:	10 00 00 
f012311c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123121:	0f b6 d0             	movzbl %al,%edx
f0123124:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012312a:	01 d0                	add    %edx,%eax
f012312c:	48                   	dec    %eax
f012312d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123133:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123139:	ba 00 00 00 00       	mov    $0x0,%edx
f012313e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123144:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012314a:	29 d0                	sub    %edx,%eax
f012314c:	89 c1                	mov    %eax,%ecx
f012314e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123155:	10 00 00 
f0123158:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012315d:	0f b6 c0             	movzbl %al,%eax
f0123160:	c1 e0 04             	shl    $0x4,%eax
f0123163:	89 c2                	mov    %eax,%edx
f0123165:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012316b:	01 d0                	add    %edx,%eax
f012316d:	48                   	dec    %eax
f012316e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123174:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012317a:	ba 00 00 00 00       	mov    $0x0,%edx
f012317f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123185:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012318b:	29 d0                	sub    %edx,%eax
f012318d:	01 c8                	add    %ecx,%eax
f012318f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123194:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012319a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01231a1:	10 00 00 
f01231a4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01231a9:	0f b6 d0             	movzbl %al,%edx
f01231ac:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01231b2:	01 d0                	add    %edx,%eax
f01231b4:	48                   	dec    %eax
f01231b5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01231bb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01231c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01231c6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01231cc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01231d2:	29 d0                	sub    %edx,%eax
f01231d4:	89 c1                	mov    %eax,%ecx
f01231d6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01231dd:	10 00 00 
f01231e0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01231e5:	0f b6 c0             	movzbl %al,%eax
f01231e8:	c1 e0 04             	shl    $0x4,%eax
f01231eb:	89 c2                	mov    %eax,%edx
f01231ed:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01231f3:	01 d0                	add    %edx,%eax
f01231f5:	48                   	dec    %eax
f01231f6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01231fc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123202:	ba 00 00 00 00       	mov    $0x0,%edx
f0123207:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012320d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123213:	29 d0                	sub    %edx,%eax
f0123215:	01 c8                	add    %ecx,%eax
f0123217:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012321c:	c1 e8 0c             	shr    $0xc,%eax
f012321f:	89 c2                	mov    %eax,%edx
f0123221:	4a                   	dec    %edx
f0123222:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f0123228:	c1 e0 02             	shl    $0x2,%eax
f012322b:	8d 50 03             	lea    0x3(%eax),%edx
f012322e:	b8 10 00 00 00       	mov    $0x10,%eax
f0123233:	48                   	dec    %eax
f0123234:	01 d0                	add    %edx,%eax
f0123236:	bf 10 00 00 00       	mov    $0x10,%edi
f012323b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123240:	f7 f7                	div    %edi
f0123242:	6b c0 10             	imul   $0x10,%eax,%eax
f0123245:	29 c4                	sub    %eax,%esp
f0123247:	89 e0                	mov    %esp,%eax
f0123249:	83 c0 03             	add    $0x3,%eax
f012324c:	c1 e8 02             	shr    $0x2,%eax
f012324f:	c1 e0 02             	shl    $0x2,%eax
f0123252:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0123258:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012325f:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123266:	eb 29                	jmp    f0123291 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123268:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012326b:	8d 43 01             	lea    0x1(%ebx),%eax
f012326e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123271:	83 ec 0c             	sub    $0xc,%esp
f0123274:	ff 75 e0             	pushl  -0x20(%ebp)
f0123277:	e8 65 49 fe ff       	call   f0107be1 <kheap_physical_address>
f012327c:	83 c4 10             	add    $0x10,%esp
f012327f:	89 c2                	mov    %eax,%edx
f0123281:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123287:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012328a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123291:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123294:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012329a:	72 cc                	jb     f0123268 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012329c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012329f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f01232a5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01232ac:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01232b3:	e9 ab 00 00 00       	jmp    f0123363 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01232b8:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01232bd:	83 ec 04             	sub    $0x4,%esp
f01232c0:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f01232c6:	52                   	push   %edx
f01232c7:	ff 75 e0             	pushl  -0x20(%ebp)
f01232ca:	50                   	push   %eax
f01232cb:	e8 4b 3e fe ff       	call   f010711b <get_page_table>
f01232d0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01232d3:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01232d9:	85 c0                	test   %eax,%eax
f01232db:	75 17                	jne    f01232f4 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01232dd:	83 ec 04             	sub    $0x4,%esp
f01232e0:	68 9c 96 13 f0       	push   $0xf013969c
f01232e5:	68 59 08 00 00       	push   $0x859
f01232ea:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01232ef:	e8 bc ce fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01232f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01232f7:	c1 e8 0c             	shr    $0xc,%eax
f01232fa:	25 ff 03 00 00       	and    $0x3ff,%eax
f01232ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123302:	eb 4b                	jmp    f012334f <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123304:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012330a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012330d:	c1 e2 02             	shl    $0x2,%edx
f0123310:	01 d0                	add    %edx,%eax
f0123312:	8b 00                	mov    (%eax),%eax
f0123314:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123319:	89 c1                	mov    %eax,%ecx
f012331b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123321:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123324:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123327:	39 c1                	cmp    %eax,%ecx
f0123329:	74 17                	je     f0123342 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012332b:	83 ec 04             	sub    $0x4,%esp
f012332e:	68 f5 96 13 f0       	push   $0xf01396f5
f0123333:	68 60 08 00 00       	push   $0x860
f0123338:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012333d:	e8 6e ce fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0123342:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123349:	ff 45 dc             	incl   -0x24(%ebp)
f012334c:	ff 45 e4             	incl   -0x1c(%ebp)
f012334f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123352:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0123358:	7d 09                	jge    f0123363 <test_kheap_phys_addr+0xb4e>
f012335a:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123361:	7e a1                	jle    f0123304 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123363:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123366:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012336c:	0f 82 46 ff ff ff    	jb     f01232b8 <test_kheap_phys_addr+0xaa3>
f0123372:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123374:	83 ec 0c             	sub    $0xc,%esp
f0123377:	68 14 97 13 f0       	push   $0xf0139714
f012337c:	e8 b0 da fd ff       	call   f0100e31 <cprintf>
f0123381:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123384:	e8 89 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123389:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012338f:	e8 24 0f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123394:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012339a:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01233a0:	83 ec 0c             	sub    $0xc,%esp
f01233a3:	50                   	push   %eax
f01233a4:	e8 04 48 fe ff       	call   f0107bad <kfree>
f01233a9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233ac:	e8 07 0f fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01233b1:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01233b7:	74 17                	je     f01233d0 <test_kheap_phys_addr+0xbbb>
f01233b9:	83 ec 04             	sub    $0x4,%esp
f01233bc:	68 14 8d 13 f0       	push   $0xf0138d14
f01233c1:	68 6e 08 00 00       	push   $0x86e
f01233c6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01233cb:	e8 e0 cd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01233d0:	e8 3d 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01233d5:	89 c2                	mov    %eax,%edx
f01233d7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01233dd:	29 c2                	sub    %eax,%edx
f01233df:	89 d0                	mov    %edx,%eax
f01233e1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01233e6:	74 17                	je     f01233ff <test_kheap_phys_addr+0xbea>
f01233e8:	83 ec 04             	sub    $0x4,%esp
f01233eb:	68 84 94 13 f0       	push   $0xf0139484
f01233f0:	68 6f 08 00 00       	push   $0x86f
f01233f5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01233fa:	e8 b1 cd fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233ff:	e8 0e 92 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123404:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012340a:	e8 a9 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012340f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123415:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012341b:	83 ec 0c             	sub    $0xc,%esp
f012341e:	50                   	push   %eax
f012341f:	e8 89 47 fe ff       	call   f0107bad <kfree>
f0123424:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123427:	e8 8c 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012342c:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123432:	74 17                	je     f012344b <test_kheap_phys_addr+0xc36>
f0123434:	83 ec 04             	sub    $0x4,%esp
f0123437:	68 14 8d 13 f0       	push   $0xf0138d14
f012343c:	68 75 08 00 00       	push   $0x875
f0123441:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123446:	e8 65 cd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012344b:	e8 c2 91 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123450:	89 c2                	mov    %eax,%edx
f0123452:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123458:	29 c2                	sub    %eax,%edx
f012345a:	89 d0                	mov    %edx,%eax
f012345c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123461:	74 17                	je     f012347a <test_kheap_phys_addr+0xc65>
f0123463:	83 ec 04             	sub    $0x4,%esp
f0123466:	68 84 94 13 f0       	push   $0xf0139484
f012346b:	68 76 08 00 00       	push   $0x876
f0123470:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123475:	e8 36 cd fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012347a:	e8 93 91 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012347f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123485:	e8 2e 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012348a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123490:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123496:	83 ec 0c             	sub    $0xc,%esp
f0123499:	50                   	push   %eax
f012349a:	e8 0e 47 fe ff       	call   f0107bad <kfree>
f012349f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234a2:	e8 11 0e fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01234a7:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01234ad:	74 17                	je     f01234c6 <test_kheap_phys_addr+0xcb1>
f01234af:	83 ec 04             	sub    $0x4,%esp
f01234b2:	68 14 8d 13 f0       	push   $0xf0138d14
f01234b7:	68 7c 08 00 00       	push   $0x87c
f01234bc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01234c1:	e8 ea cc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01234c6:	e8 47 91 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01234cb:	89 c2                	mov    %eax,%edx
f01234cd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01234d3:	29 c2                	sub    %eax,%edx
f01234d5:	89 d0                	mov    %edx,%eax
f01234d7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01234dc:	74 17                	je     f01234f5 <test_kheap_phys_addr+0xce0>
f01234de:	83 ec 04             	sub    $0x4,%esp
f01234e1:	68 84 94 13 f0       	push   $0xf0139484
f01234e6:	68 7d 08 00 00       	push   $0x87d
f01234eb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01234f0:	e8 bb cc fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01234f5:	89 e0                	mov    %esp,%eax
f01234f7:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01234f9:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123500:	10 00 00 
f0123503:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123508:	0f b6 d0             	movzbl %al,%edx
f012350b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123511:	01 d0                	add    %edx,%eax
f0123513:	48                   	dec    %eax
f0123514:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012351a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123520:	ba 00 00 00 00       	mov    $0x0,%edx
f0123525:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012352b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123531:	29 d0                	sub    %edx,%eax
f0123533:	89 c1                	mov    %eax,%ecx
f0123535:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012353c:	10 00 00 
f012353f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123544:	0f b6 c0             	movzbl %al,%eax
f0123547:	c1 e0 04             	shl    $0x4,%eax
f012354a:	89 c2                	mov    %eax,%edx
f012354c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123552:	01 d0                	add    %edx,%eax
f0123554:	48                   	dec    %eax
f0123555:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012355b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123561:	ba 00 00 00 00       	mov    $0x0,%edx
f0123566:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012356c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123572:	29 d0                	sub    %edx,%eax
f0123574:	01 c8                	add    %ecx,%eax
f0123576:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012357b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123581:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123588:	10 00 00 
f012358b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123590:	0f b6 d0             	movzbl %al,%edx
f0123593:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123599:	01 d0                	add    %edx,%eax
f012359b:	48                   	dec    %eax
f012359c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01235a2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01235a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ad:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01235b3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01235b9:	29 d0                	sub    %edx,%eax
f01235bb:	89 c1                	mov    %eax,%ecx
f01235bd:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01235c4:	10 00 00 
f01235c7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01235cc:	0f b6 c0             	movzbl %al,%eax
f01235cf:	c1 e0 04             	shl    $0x4,%eax
f01235d2:	89 c2                	mov    %eax,%edx
f01235d4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01235da:	01 d0                	add    %edx,%eax
f01235dc:	48                   	dec    %eax
f01235dd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01235e3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01235e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ee:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01235f4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01235fa:	29 d0                	sub    %edx,%eax
f01235fc:	01 c8                	add    %ecx,%eax
f01235fe:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123603:	c1 e8 0c             	shr    $0xc,%eax
f0123606:	89 c2                	mov    %eax,%edx
f0123608:	4a                   	dec    %edx
f0123609:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f012360f:	c1 e0 02             	shl    $0x2,%eax
f0123612:	8d 50 03             	lea    0x3(%eax),%edx
f0123615:	b8 10 00 00 00       	mov    $0x10,%eax
f012361a:	48                   	dec    %eax
f012361b:	01 d0                	add    %edx,%eax
f012361d:	bf 10 00 00 00       	mov    $0x10,%edi
f0123622:	ba 00 00 00 00       	mov    $0x0,%edx
f0123627:	f7 f7                	div    %edi
f0123629:	6b c0 10             	imul   $0x10,%eax,%eax
f012362c:	29 c4                	sub    %eax,%esp
f012362e:	89 e0                	mov    %esp,%eax
f0123630:	83 c0 03             	add    $0x3,%eax
f0123633:	c1 e8 02             	shr    $0x2,%eax
f0123636:	c1 e0 02             	shl    $0x2,%eax
f0123639:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f012363f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123646:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f012364d:	eb 29                	jmp    f0123678 <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f012364f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123652:	8d 43 01             	lea    0x1(%ebx),%eax
f0123655:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123658:	83 ec 0c             	sub    $0xc,%esp
f012365b:	ff 75 d8             	pushl  -0x28(%ebp)
f012365e:	e8 7e 45 fe ff       	call   f0107be1 <kheap_physical_address>
f0123663:	83 c4 10             	add    $0x10,%esp
f0123666:	89 c2                	mov    %eax,%edx
f0123668:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012366e:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123671:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123678:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012367b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123681:	72 cc                	jb     f012364f <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123683:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123686:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f012368c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123693:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f012369a:	e9 ab 00 00 00       	jmp    f012374a <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012369f:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f01236a4:	83 ec 04             	sub    $0x4,%esp
f01236a7:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f01236ad:	52                   	push   %edx
f01236ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01236b1:	50                   	push   %eax
f01236b2:	e8 64 3a fe ff       	call   f010711b <get_page_table>
f01236b7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01236ba:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01236c0:	85 c0                	test   %eax,%eax
f01236c2:	75 17                	jne    f01236db <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01236c4:	83 ec 04             	sub    $0x4,%esp
f01236c7:	68 9c 96 13 f0       	push   $0xf013969c
f01236cc:	68 93 08 00 00       	push   $0x893
f01236d1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01236d6:	e8 d5 ca fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01236de:	c1 e8 0c             	shr    $0xc,%eax
f01236e1:	25 ff 03 00 00       	and    $0x3ff,%eax
f01236e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01236e9:	eb 4b                	jmp    f0123736 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01236eb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01236f1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01236f4:	c1 e2 02             	shl    $0x2,%edx
f01236f7:	01 d0                	add    %edx,%eax
f01236f9:	8b 00                	mov    (%eax),%eax
f01236fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123700:	89 c1                	mov    %eax,%ecx
f0123702:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123708:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012370b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012370e:	39 c1                	cmp    %eax,%ecx
f0123710:	74 17                	je     f0123729 <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123712:	83 ec 04             	sub    $0x4,%esp
f0123715:	68 f5 96 13 f0       	push   $0xf01396f5
f012371a:	68 9a 08 00 00       	push   $0x89a
f012371f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123724:	e8 87 ca fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123729:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123730:	ff 45 d4             	incl   -0x2c(%ebp)
f0123733:	ff 45 e4             	incl   -0x1c(%ebp)
f0123736:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123739:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f012373f:	7d 09                	jge    f012374a <test_kheap_phys_addr+0xf35>
f0123741:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123748:	7e a1                	jle    f01236eb <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012374a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012374d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123753:	0f 82 46 ff ff ff    	jb     f012369f <test_kheap_phys_addr+0xe8a>
f0123759:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f012375b:	83 ec 0c             	sub    $0xc,%esp
f012375e:	68 85 8e 13 f0       	push   $0xf0138e85
f0123763:	e8 c9 d6 fd ff       	call   f0100e31 <cprintf>
f0123768:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f012376b:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123772:	10 00 00 
f0123775:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012377a:	0f b6 d0             	movzbl %al,%edx
f012377d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123783:	01 d0                	add    %edx,%eax
f0123785:	48                   	dec    %eax
f0123786:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012378c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123792:	ba 00 00 00 00       	mov    $0x0,%edx
f0123797:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012379d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01237a3:	29 d0                	sub    %edx,%eax
f01237a5:	89 c1                	mov    %eax,%ecx
f01237a7:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01237ae:	10 00 00 
f01237b1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01237b6:	0f b6 c0             	movzbl %al,%eax
f01237b9:	c1 e0 04             	shl    $0x4,%eax
f01237bc:	89 c2                	mov    %eax,%edx
f01237be:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01237c4:	01 d0                	add    %edx,%eax
f01237c6:	48                   	dec    %eax
f01237c7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01237cd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01237d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01237d8:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01237de:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01237e4:	29 d0                	sub    %edx,%eax
f01237e6:	01 c8                	add    %ecx,%eax
f01237e8:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01237ed:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01237f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01237fa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123800:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123803:	eb 0a                	jmp    f012380f <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123805:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123808:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f012380f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123816:	76 ed                	jbe    f0123805 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123818:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012381b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123821:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123828:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012382e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123831:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123838:	e9 cc 00 00 00       	jmp    f0123909 <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f012383d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123840:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0123845:	83 ec 04             	sub    $0x4,%esp
f0123848:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f012384e:	51                   	push   %ecx
f012384f:	52                   	push   %edx
f0123850:	50                   	push   %eax
f0123851:	e8 c5 38 fe ff       	call   f010711b <get_page_table>
f0123856:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123859:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012385f:	85 c0                	test   %eax,%eax
f0123861:	75 17                	jne    f012387a <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123863:	83 ec 04             	sub    $0x4,%esp
f0123866:	68 9c 96 13 f0       	push   $0xf013969c
f012386b:	68 b6 08 00 00       	push   $0x8b6
f0123870:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123875:	e8 36 c9 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012387a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123881:	eb 67                	jmp    f01238ea <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123883:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123886:	c1 e0 0c             	shl    $0xc,%eax
f0123889:	89 c2                	mov    %eax,%edx
f012388b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123891:	01 d0                	add    %edx,%eax
f0123893:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123899:	83 ec 0c             	sub    $0xc,%esp
f012389c:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f01238a2:	e8 3a 43 fe ff       	call   f0107be1 <kheap_physical_address>
f01238a7:	83 c4 10             	add    $0x10,%esp
f01238aa:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01238b0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01238b6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01238b9:	c1 e2 02             	shl    $0x2,%edx
f01238bc:	01 d0                	add    %edx,%eax
f01238be:	8b 00                	mov    (%eax),%eax
f01238c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01238c5:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01238cb:	74 17                	je     f01238e4 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01238cd:	83 ec 04             	sub    $0x4,%esp
f01238d0:	68 f5 96 13 f0       	push   $0xf01396f5
f01238d5:	68 c0 08 00 00       	push   $0x8c0
f01238da:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01238df:	e8 cc c8 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01238e4:	ff 45 cc             	incl   -0x34(%ebp)
f01238e7:	ff 45 e4             	incl   -0x1c(%ebp)
f01238ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01238ed:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f01238f3:	7d 09                	jge    f01238fe <test_kheap_phys_addr+0x10e9>
f01238f5:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01238fc:	7e 85                	jle    f0123883 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01238fe:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123905:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123909:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012390d:	0f 88 2a ff ff ff    	js     f012383d <test_kheap_phys_addr+0x1028>
f0123913:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123917:	7f 0d                	jg     f0123926 <test_kheap_phys_addr+0x1111>
f0123919:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123920:	0f 86 17 ff ff ff    	jbe    f012383d <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123926:	83 ec 0c             	sub    $0xc,%esp
f0123929:	68 de 8e 13 f0       	push   $0xf0138ede
f012392e:	e8 fe d4 fd ff       	call   f0100e31 <cprintf>
f0123933:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123936:	83 ec 0c             	sub    $0xc,%esp
f0123939:	68 48 97 13 f0       	push   $0xf0139748
f012393e:	e8 ee d4 fd ff       	call   f0100e31 <cprintf>
f0123943:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123946:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012394b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012394e:	5b                   	pop    %ebx
f012394f:	5e                   	pop    %esi
f0123950:	5f                   	pop    %edi
f0123951:	5d                   	pop    %ebp
f0123952:	c3                   	ret    

f0123953 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123953:	55                   	push   %ebp
f0123954:	89 e5                	mov    %esp,%ebp
f0123956:	57                   	push   %edi
f0123957:	56                   	push   %esi
f0123958:	53                   	push   %ebx
f0123959:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f012395f:	89 e0                	mov    %esp,%eax
f0123961:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123963:	83 ec 0c             	sub    $0xc,%esp
f0123966:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012396b:	e8 c1 d4 fd ff       	call   f0100e31 <cprintf>
f0123970:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123973:	83 ec 0c             	sub    $0xc,%esp
f0123976:	68 6c 8c 13 f0       	push   $0xf0138c6c
f012397b:	e8 b1 d4 fd ff       	call   f0100e31 <cprintf>
f0123980:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123983:	83 ec 0c             	sub    $0xc,%esp
f0123986:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012398b:	e8 a1 d4 fd ff       	call   f0100e31 <cprintf>
f0123990:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123993:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123997:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012399b:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01239a1:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01239a7:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01239ae:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01239b5:	e8 58 8c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01239ba:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01239bd:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f01239c3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01239cd:	89 d7                	mov    %edx,%edi
f01239cf:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01239d1:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f01239d7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01239e1:	89 d7                	mov    %edx,%edi
f01239e3:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01239e5:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f01239eb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01239f5:	89 d7                	mov    %edx,%edi
f01239f7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01239f9:	e8 14 8c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01239fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a01:	e8 b2 08 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123a06:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123a09:	83 ec 0c             	sub    $0xc,%esp
f0123a0c:	68 00 fc 1f 00       	push   $0x1ffc00
f0123a11:	e8 7d 41 fe ff       	call   f0107b93 <kmalloc>
f0123a16:	83 c4 10             	add    $0x10,%esp
f0123a19:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a1f:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123a25:	89 c1                	mov    %eax,%ecx
f0123a27:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123a2e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123a33:	0f b6 d0             	movzbl %al,%edx
f0123a36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123a39:	01 d0                	add    %edx,%eax
f0123a3b:	48                   	dec    %eax
f0123a3c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123a3f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123a42:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a47:	f7 75 b4             	divl   -0x4c(%ebp)
f0123a4a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123a4d:	29 d0                	sub    %edx,%eax
f0123a4f:	89 c3                	mov    %eax,%ebx
f0123a51:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123a58:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123a5d:	0f b6 c0             	movzbl %al,%eax
f0123a60:	c1 e0 04             	shl    $0x4,%eax
f0123a63:	89 c2                	mov    %eax,%edx
f0123a65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123a68:	01 d0                	add    %edx,%eax
f0123a6a:	48                   	dec    %eax
f0123a6b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123a6e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123a71:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a76:	f7 75 ac             	divl   -0x54(%ebp)
f0123a79:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123a7c:	29 d0                	sub    %edx,%eax
f0123a7e:	01 d8                	add    %ebx,%eax
f0123a80:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123a85:	39 c1                	cmp    %eax,%ecx
f0123a87:	74 17                	je     f0123aa0 <test_kheap_virt_addr+0x14d>
f0123a89:	83 ec 04             	sub    $0x4,%esp
f0123a8c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123a91:	68 ed 08 00 00       	push   $0x8ed
f0123a96:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123a9b:	e8 10 c7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123aa0:	e8 13 08 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123aa5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123aa8:	74 17                	je     f0123ac1 <test_kheap_virt_addr+0x16e>
f0123aaa:	83 ec 04             	sub    $0x4,%esp
f0123aad:	68 14 8d 13 f0       	push   $0xf0138d14
f0123ab2:	68 ee 08 00 00       	push   $0x8ee
f0123ab7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123abc:	e8 ef c6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ac1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123ac4:	e8 49 8b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123ac9:	29 c3                	sub    %eax,%ebx
f0123acb:	89 d8                	mov    %ebx,%eax
f0123acd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123ad2:	74 17                	je     f0123aeb <test_kheap_virt_addr+0x198>
f0123ad4:	83 ec 04             	sub    $0x4,%esp
f0123ad7:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123adc:	68 ef 08 00 00       	push   $0x8ef
f0123ae1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123ae6:	e8 c5 c6 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123aeb:	e8 22 8b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123af0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123af3:	e8 c0 07 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123af8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123afb:	83 ec 0c             	sub    $0xc,%esp
f0123afe:	68 00 fc 1f 00       	push   $0x1ffc00
f0123b03:	e8 8b 40 fe ff       	call   f0107b93 <kmalloc>
f0123b08:	83 c4 10             	add    $0x10,%esp
f0123b0b:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b11:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123b17:	89 c1                	mov    %eax,%ecx
f0123b19:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123b20:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123b25:	0f b6 d0             	movzbl %al,%edx
f0123b28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123b2b:	01 d0                	add    %edx,%eax
f0123b2d:	48                   	dec    %eax
f0123b2e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123b31:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123b34:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b39:	f7 75 a4             	divl   -0x5c(%ebp)
f0123b3c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123b3f:	29 d0                	sub    %edx,%eax
f0123b41:	89 c3                	mov    %eax,%ebx
f0123b43:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123b4a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123b4f:	0f b6 c0             	movzbl %al,%eax
f0123b52:	c1 e0 04             	shl    $0x4,%eax
f0123b55:	89 c2                	mov    %eax,%edx
f0123b57:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123b5a:	01 d0                	add    %edx,%eax
f0123b5c:	48                   	dec    %eax
f0123b5d:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123b60:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123b63:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b68:	f7 75 9c             	divl   -0x64(%ebp)
f0123b6b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123b6e:	29 d0                	sub    %edx,%eax
f0123b70:	01 d8                	add    %ebx,%eax
f0123b72:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123b77:	39 c1                	cmp    %eax,%ecx
f0123b79:	74 17                	je     f0123b92 <test_kheap_virt_addr+0x23f>
f0123b7b:	83 ec 04             	sub    $0x4,%esp
f0123b7e:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123b83:	68 f5 08 00 00       	push   $0x8f5
f0123b88:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123b8d:	e8 1e c6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b92:	e8 21 07 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123b97:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123b9a:	74 17                	je     f0123bb3 <test_kheap_virt_addr+0x260>
f0123b9c:	83 ec 04             	sub    $0x4,%esp
f0123b9f:	68 14 8d 13 f0       	push   $0xf0138d14
f0123ba4:	68 f6 08 00 00       	push   $0x8f6
f0123ba9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123bae:	e8 fd c5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123bb3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123bb6:	e8 57 8a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123bbb:	29 c3                	sub    %eax,%ebx
f0123bbd:	89 d8                	mov    %ebx,%eax
f0123bbf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123bc4:	74 17                	je     f0123bdd <test_kheap_virt_addr+0x28a>
f0123bc6:	83 ec 04             	sub    $0x4,%esp
f0123bc9:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123bce:	68 f7 08 00 00       	push   $0x8f7
f0123bd3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123bd8:	e8 d3 c5 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123bdd:	e8 30 8a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123be2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123be5:	e8 ce 06 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123bea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123bed:	83 ec 0c             	sub    $0xc,%esp
f0123bf0:	68 00 08 00 00       	push   $0x800
f0123bf5:	e8 99 3f fe ff       	call   f0107b93 <kmalloc>
f0123bfa:	83 c4 10             	add    $0x10,%esp
f0123bfd:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123c03:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123c09:	89 c1                	mov    %eax,%ecx
f0123c0b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123c12:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123c17:	0f b6 d0             	movzbl %al,%edx
f0123c1a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123c1d:	01 d0                	add    %edx,%eax
f0123c1f:	48                   	dec    %eax
f0123c20:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123c23:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123c26:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c2b:	f7 75 94             	divl   -0x6c(%ebp)
f0123c2e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123c31:	29 d0                	sub    %edx,%eax
f0123c33:	89 c3                	mov    %eax,%ebx
f0123c35:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123c3c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123c41:	0f b6 c0             	movzbl %al,%eax
f0123c44:	c1 e0 04             	shl    $0x4,%eax
f0123c47:	89 c2                	mov    %eax,%edx
f0123c49:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123c4c:	01 d0                	add    %edx,%eax
f0123c4e:	48                   	dec    %eax
f0123c4f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0123c52:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123c55:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c5a:	f7 75 8c             	divl   -0x74(%ebp)
f0123c5d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123c60:	29 d0                	sub    %edx,%eax
f0123c62:	01 d8                	add    %ebx,%eax
f0123c64:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123c69:	39 c1                	cmp    %eax,%ecx
f0123c6b:	74 17                	je     f0123c84 <test_kheap_virt_addr+0x331>
f0123c6d:	83 ec 04             	sub    $0x4,%esp
f0123c70:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123c75:	68 fd 08 00 00       	push   $0x8fd
f0123c7a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123c7f:	e8 2c c5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c84:	e8 2f 06 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123c89:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123c8c:	74 17                	je     f0123ca5 <test_kheap_virt_addr+0x352>
f0123c8e:	83 ec 04             	sub    $0x4,%esp
f0123c91:	68 14 8d 13 f0       	push   $0xf0138d14
f0123c96:	68 fe 08 00 00       	push   $0x8fe
f0123c9b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123ca0:	e8 0b c5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ca5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123ca8:	e8 65 89 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123cad:	29 c3                	sub    %eax,%ebx
f0123caf:	89 d8                	mov    %ebx,%eax
f0123cb1:	83 f8 01             	cmp    $0x1,%eax
f0123cb4:	74 17                	je     f0123ccd <test_kheap_virt_addr+0x37a>
f0123cb6:	83 ec 04             	sub    $0x4,%esp
f0123cb9:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123cbe:	68 ff 08 00 00       	push   $0x8ff
f0123cc3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123cc8:	e8 e3 c4 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ccd:	e8 40 89 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123cd2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cd5:	e8 de 05 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123cda:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123cdd:	83 ec 0c             	sub    $0xc,%esp
f0123ce0:	68 00 08 00 00       	push   $0x800
f0123ce5:	e8 a9 3e fe ff       	call   f0107b93 <kmalloc>
f0123cea:	83 c4 10             	add    $0x10,%esp
f0123ced:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123cf3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0123cf9:	89 c1                	mov    %eax,%ecx
f0123cfb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0123d02:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123d07:	0f b6 d0             	movzbl %al,%edx
f0123d0a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123d0d:	01 d0                	add    %edx,%eax
f0123d0f:	48                   	dec    %eax
f0123d10:	89 45 80             	mov    %eax,-0x80(%ebp)
f0123d13:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123d16:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d1b:	f7 75 84             	divl   -0x7c(%ebp)
f0123d1e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123d21:	29 d0                	sub    %edx,%eax
f0123d23:	89 c3                	mov    %eax,%ebx
f0123d25:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0123d2c:	10 00 00 
f0123d2f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123d34:	0f b6 c0             	movzbl %al,%eax
f0123d37:	c1 e0 04             	shl    $0x4,%eax
f0123d3a:	89 c2                	mov    %eax,%edx
f0123d3c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123d42:	01 d0                	add    %edx,%eax
f0123d44:	48                   	dec    %eax
f0123d45:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0123d4b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d56:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0123d5c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123d62:	29 d0                	sub    %edx,%eax
f0123d64:	01 d8                	add    %ebx,%eax
f0123d66:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123d6b:	39 c1                	cmp    %eax,%ecx
f0123d6d:	74 17                	je     f0123d86 <test_kheap_virt_addr+0x433>
f0123d6f:	83 ec 04             	sub    $0x4,%esp
f0123d72:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123d77:	68 05 09 00 00       	push   $0x905
f0123d7c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123d81:	e8 2a c4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d86:	e8 2d 05 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123d8b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123d8e:	74 17                	je     f0123da7 <test_kheap_virt_addr+0x454>
f0123d90:	83 ec 04             	sub    $0x4,%esp
f0123d93:	68 14 8d 13 f0       	push   $0xf0138d14
f0123d98:	68 06 09 00 00       	push   $0x906
f0123d9d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123da2:	e8 09 c4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123da7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123daa:	e8 63 88 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123daf:	29 c3                	sub    %eax,%ebx
f0123db1:	89 d8                	mov    %ebx,%eax
f0123db3:	83 f8 01             	cmp    $0x1,%eax
f0123db6:	74 17                	je     f0123dcf <test_kheap_virt_addr+0x47c>
f0123db8:	83 ec 04             	sub    $0x4,%esp
f0123dbb:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123dc0:	68 07 09 00 00       	push   $0x907
f0123dc5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123dca:	e8 e1 c3 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123dcf:	e8 3e 88 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123dd4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123dd7:	e8 dc 04 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123ddc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123ddf:	83 ec 0c             	sub    $0xc,%esp
f0123de2:	68 00 1c 00 00       	push   $0x1c00
f0123de7:	e8 a7 3d fe ff       	call   f0107b93 <kmalloc>
f0123dec:	83 c4 10             	add    $0x10,%esp
f0123def:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123df5:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123dfb:	89 c1                	mov    %eax,%ecx
f0123dfd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0123e04:	10 00 00 
f0123e07:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123e0c:	0f b6 d0             	movzbl %al,%edx
f0123e0f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123e15:	01 d0                	add    %edx,%eax
f0123e17:	48                   	dec    %eax
f0123e18:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0123e1e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123e24:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e29:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0123e2f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123e35:	29 d0                	sub    %edx,%eax
f0123e37:	89 c3                	mov    %eax,%ebx
f0123e39:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0123e40:	10 00 00 
f0123e43:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123e48:	0f b6 c0             	movzbl %al,%eax
f0123e4b:	c1 e0 04             	shl    $0x4,%eax
f0123e4e:	89 c2                	mov    %eax,%edx
f0123e50:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123e56:	01 d0                	add    %edx,%eax
f0123e58:	48                   	dec    %eax
f0123e59:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0123e5f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123e65:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e6a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0123e70:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123e76:	29 d0                	sub    %edx,%eax
f0123e78:	01 d8                	add    %ebx,%eax
f0123e7a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123e7f:	39 c1                	cmp    %eax,%ecx
f0123e81:	74 17                	je     f0123e9a <test_kheap_virt_addr+0x547>
f0123e83:	83 ec 04             	sub    $0x4,%esp
f0123e86:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123e8b:	68 0d 09 00 00       	push   $0x90d
f0123e90:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123e95:	e8 16 c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e9a:	e8 19 04 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123e9f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123ea2:	74 17                	je     f0123ebb <test_kheap_virt_addr+0x568>
f0123ea4:	83 ec 04             	sub    $0x4,%esp
f0123ea7:	68 14 8d 13 f0       	push   $0xf0138d14
f0123eac:	68 0e 09 00 00       	push   $0x90e
f0123eb1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123eb6:	e8 f5 c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ebb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123ebe:	e8 4f 87 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123ec3:	29 c3                	sub    %eax,%ebx
f0123ec5:	89 d8                	mov    %ebx,%eax
f0123ec7:	83 f8 02             	cmp    $0x2,%eax
f0123eca:	74 17                	je     f0123ee3 <test_kheap_virt_addr+0x590>
f0123ecc:	83 ec 04             	sub    $0x4,%esp
f0123ecf:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123ed4:	68 0f 09 00 00       	push   $0x90f
f0123ed9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123ede:	e8 cd c2 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ee3:	e8 2a 87 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123ee8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123eeb:	e8 c8 03 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123ef0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123ef3:	83 ec 0c             	sub    $0xc,%esp
f0123ef6:	68 00 fc 2f 00       	push   $0x2ffc00
f0123efb:	e8 93 3c fe ff       	call   f0107b93 <kmalloc>
f0123f00:	83 c4 10             	add    $0x10,%esp
f0123f03:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f09:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123f0f:	89 c1                	mov    %eax,%ecx
f0123f11:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0123f18:	10 00 00 
f0123f1b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123f20:	0f b6 d0             	movzbl %al,%edx
f0123f23:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123f29:	01 d0                	add    %edx,%eax
f0123f2b:	48                   	dec    %eax
f0123f2c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0123f32:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f3d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0123f43:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123f49:	29 d0                	sub    %edx,%eax
f0123f4b:	89 c3                	mov    %eax,%ebx
f0123f4d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0123f54:	10 00 00 
f0123f57:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0123f5c:	0f b6 c0             	movzbl %al,%eax
f0123f5f:	c1 e0 04             	shl    $0x4,%eax
f0123f62:	89 c2                	mov    %eax,%edx
f0123f64:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123f6a:	01 d0                	add    %edx,%eax
f0123f6c:	48                   	dec    %eax
f0123f6d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0123f73:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123f79:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f7e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0123f84:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123f8a:	29 d0                	sub    %edx,%eax
f0123f8c:	01 d8                	add    %ebx,%eax
f0123f8e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123f93:	39 c1                	cmp    %eax,%ecx
f0123f95:	74 17                	je     f0123fae <test_kheap_virt_addr+0x65b>
f0123f97:	83 ec 04             	sub    $0x4,%esp
f0123f9a:	68 e0 8d 13 f0       	push   $0xf0138de0
f0123f9f:	68 15 09 00 00       	push   $0x915
f0123fa4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123fa9:	e8 02 c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fae:	e8 05 03 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0123fb3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123fb6:	74 17                	je     f0123fcf <test_kheap_virt_addr+0x67c>
f0123fb8:	83 ec 04             	sub    $0x4,%esp
f0123fbb:	68 14 8d 13 f0       	push   $0xf0138d14
f0123fc0:	68 16 09 00 00       	push   $0x916
f0123fc5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123fca:	e8 e1 c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123fcf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123fd2:	e8 3b 86 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123fd7:	29 c3                	sub    %eax,%ebx
f0123fd9:	89 d8                	mov    %ebx,%eax
f0123fdb:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123fe0:	74 17                	je     f0123ff9 <test_kheap_virt_addr+0x6a6>
f0123fe2:	83 ec 04             	sub    $0x4,%esp
f0123fe5:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0123fea:	68 17 09 00 00       	push   $0x917
f0123fef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0123ff4:	e8 b7 c1 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ff9:	e8 14 86 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0123ffe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124001:	e8 b2 02 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f0124006:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124009:	83 ec 0c             	sub    $0xc,%esp
f012400c:	68 00 fc 5f 00       	push   $0x5ffc00
f0124011:	e8 7d 3b fe ff       	call   f0107b93 <kmalloc>
f0124016:	83 c4 10             	add    $0x10,%esp
f0124019:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012401f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124025:	89 c1                	mov    %eax,%ecx
f0124027:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012402e:	10 00 00 
f0124031:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124036:	0f b6 d0             	movzbl %al,%edx
f0124039:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012403f:	01 d0                	add    %edx,%eax
f0124041:	48                   	dec    %eax
f0124042:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124048:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012404e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124053:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124059:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012405f:	29 d0                	sub    %edx,%eax
f0124061:	89 c3                	mov    %eax,%ebx
f0124063:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012406a:	10 00 00 
f012406d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124072:	0f b6 c0             	movzbl %al,%eax
f0124075:	c1 e0 04             	shl    $0x4,%eax
f0124078:	89 c2                	mov    %eax,%edx
f012407a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124080:	01 d0                	add    %edx,%eax
f0124082:	48                   	dec    %eax
f0124083:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124089:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012408f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124094:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012409a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01240a0:	29 d0                	sub    %edx,%eax
f01240a2:	01 d8                	add    %ebx,%eax
f01240a4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01240a9:	39 c1                	cmp    %eax,%ecx
f01240ab:	74 17                	je     f01240c4 <test_kheap_virt_addr+0x771>
f01240ad:	83 ec 04             	sub    $0x4,%esp
f01240b0:	68 e0 8d 13 f0       	push   $0xf0138de0
f01240b5:	68 1d 09 00 00       	push   $0x91d
f01240ba:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01240bf:	e8 ec c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240c4:	e8 ef 01 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01240c9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01240cc:	74 17                	je     f01240e5 <test_kheap_virt_addr+0x792>
f01240ce:	83 ec 04             	sub    $0x4,%esp
f01240d1:	68 14 8d 13 f0       	push   $0xf0138d14
f01240d6:	68 1e 09 00 00       	push   $0x91e
f01240db:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01240e0:	e8 cb c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01240e5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01240e8:	e8 25 85 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01240ed:	29 c3                	sub    %eax,%ebx
f01240ef:	89 d8                	mov    %ebx,%eax
f01240f1:	3d 00 06 00 00       	cmp    $0x600,%eax
f01240f6:	74 17                	je     f012410f <test_kheap_virt_addr+0x7bc>
f01240f8:	83 ec 04             	sub    $0x4,%esp
f01240fb:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124100:	68 1f 09 00 00       	push   $0x91f
f0124105:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012410a:	e8 a1 c0 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012410f:	e8 fe 84 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124114:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124117:	e8 9c 01 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f012411c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012411f:	83 ec 0c             	sub    $0xc,%esp
f0124122:	68 00 38 00 00       	push   $0x3800
f0124127:	e8 67 3a fe ff       	call   f0107b93 <kmalloc>
f012412c:	83 c4 10             	add    $0x10,%esp
f012412f:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124135:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012413b:	89 c1                	mov    %eax,%ecx
f012413d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124144:	10 00 00 
f0124147:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012414c:	0f b6 d0             	movzbl %al,%edx
f012414f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124155:	01 d0                	add    %edx,%eax
f0124157:	48                   	dec    %eax
f0124158:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012415e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124164:	ba 00 00 00 00       	mov    $0x0,%edx
f0124169:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012416f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124175:	29 d0                	sub    %edx,%eax
f0124177:	89 c3                	mov    %eax,%ebx
f0124179:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124180:	10 00 00 
f0124183:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124188:	0f b6 c0             	movzbl %al,%eax
f012418b:	c1 e0 04             	shl    $0x4,%eax
f012418e:	89 c2                	mov    %eax,%edx
f0124190:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124196:	01 d0                	add    %edx,%eax
f0124198:	48                   	dec    %eax
f0124199:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012419f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01241a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01241aa:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01241b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01241b6:	29 d0                	sub    %edx,%eax
f01241b8:	01 d8                	add    %ebx,%eax
f01241ba:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01241bf:	39 c1                	cmp    %eax,%ecx
f01241c1:	74 17                	je     f01241da <test_kheap_virt_addr+0x887>
f01241c3:	83 ec 04             	sub    $0x4,%esp
f01241c6:	68 e0 8d 13 f0       	push   $0xf0138de0
f01241cb:	68 25 09 00 00       	push   $0x925
f01241d0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01241d5:	e8 d6 bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241da:	e8 d9 00 fe ff       	call   f01042b8 <pf_calculate_free_frames>
f01241df:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01241e2:	74 17                	je     f01241fb <test_kheap_virt_addr+0x8a8>
f01241e4:	83 ec 04             	sub    $0x4,%esp
f01241e7:	68 14 8d 13 f0       	push   $0xf0138d14
f01241ec:	68 26 09 00 00       	push   $0x926
f01241f1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01241f6:	e8 b5 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241fb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01241fe:	e8 0f 84 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124203:	29 c3                	sub    %eax,%ebx
f0124205:	89 d8                	mov    %ebx,%eax
f0124207:	83 f8 04             	cmp    $0x4,%eax
f012420a:	74 17                	je     f0124223 <test_kheap_virt_addr+0x8d0>
f012420c:	83 ec 04             	sub    $0x4,%esp
f012420f:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124214:	68 27 09 00 00       	push   $0x927
f0124219:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012421e:	e8 8d bf fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124223:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012422a:	10 00 00 
f012422d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124232:	0f b6 d0             	movzbl %al,%edx
f0124235:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012423b:	01 d0                	add    %edx,%eax
f012423d:	48                   	dec    %eax
f012423e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124244:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012424a:	ba 00 00 00 00       	mov    $0x0,%edx
f012424f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124255:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012425b:	29 d0                	sub    %edx,%eax
f012425d:	89 c1                	mov    %eax,%ecx
f012425f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124266:	10 00 00 
f0124269:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012426e:	0f b6 c0             	movzbl %al,%eax
f0124271:	c1 e0 04             	shl    $0x4,%eax
f0124274:	89 c2                	mov    %eax,%edx
f0124276:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012427c:	01 d0                	add    %edx,%eax
f012427e:	48                   	dec    %eax
f012427f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124285:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012428b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124290:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124296:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012429c:	29 d0                	sub    %edx,%eax
f012429e:	01 c8                	add    %ecx,%eax
f01242a0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01242a5:	c1 e8 0c             	shr    $0xc,%eax
f01242a8:	89 c2                	mov    %eax,%edx
f01242aa:	4a                   	dec    %edx
f01242ab:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f01242b1:	c1 e0 02             	shl    $0x2,%eax
f01242b4:	8d 50 03             	lea    0x3(%eax),%edx
f01242b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01242bc:	48                   	dec    %eax
f01242bd:	01 d0                	add    %edx,%eax
f01242bf:	bf 10 00 00 00       	mov    $0x10,%edi
f01242c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c9:	f7 f7                	div    %edi
f01242cb:	6b c0 10             	imul   $0x10,%eax,%eax
f01242ce:	29 c4                	sub    %eax,%esp
f01242d0:	89 e0                	mov    %esp,%eax
f01242d2:	83 c0 03             	add    $0x3,%eax
f01242d5:	c1 e8 02             	shr    $0x2,%eax
f01242d8:	c1 e0 02             	shl    $0x2,%eax
f01242db:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01242e1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01242e8:	10 00 00 
f01242eb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01242f0:	0f b6 d0             	movzbl %al,%edx
f01242f3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01242f9:	01 d0                	add    %edx,%eax
f01242fb:	48                   	dec    %eax
f01242fc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124302:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124308:	ba 00 00 00 00       	mov    $0x0,%edx
f012430d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124313:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124319:	29 d0                	sub    %edx,%eax
f012431b:	89 c1                	mov    %eax,%ecx
f012431d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124324:	10 00 00 
f0124327:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012432c:	0f b6 c0             	movzbl %al,%eax
f012432f:	c1 e0 04             	shl    $0x4,%eax
f0124332:	89 c2                	mov    %eax,%edx
f0124334:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012433a:	01 d0                	add    %edx,%eax
f012433c:	48                   	dec    %eax
f012433d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124343:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124349:	ba 00 00 00 00       	mov    $0x0,%edx
f012434e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124354:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012435a:	29 d0                	sub    %edx,%eax
f012435c:	01 c8                	add    %ecx,%eax
f012435e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124363:	c1 e8 0c             	shr    $0xc,%eax
f0124366:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012436c:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124373:	10 00 00 
f0124376:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012437b:	0f b6 d0             	movzbl %al,%edx
f012437e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124384:	01 d0                	add    %edx,%eax
f0124386:	48                   	dec    %eax
f0124387:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012438d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124393:	ba 00 00 00 00       	mov    $0x0,%edx
f0124398:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012439e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01243a4:	29 d0                	sub    %edx,%eax
f01243a6:	89 c1                	mov    %eax,%ecx
f01243a8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01243af:	10 00 00 
f01243b2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01243b7:	0f b6 c0             	movzbl %al,%eax
f01243ba:	c1 e0 04             	shl    $0x4,%eax
f01243bd:	89 c2                	mov    %eax,%edx
f01243bf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01243c5:	01 d0                	add    %edx,%eax
f01243c7:	48                   	dec    %eax
f01243c8:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01243ce:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01243d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01243d9:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01243df:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01243e5:	29 d0                	sub    %edx,%eax
f01243e7:	01 c8                	add    %ecx,%eax
f01243e9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01243ee:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f01243f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01243fb:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124402:	e9 21 01 00 00       	jmp    f0124528 <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124407:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012440c:	83 ec 04             	sub    $0x4,%esp
f012440f:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124415:	52                   	push   %edx
f0124416:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124419:	50                   	push   %eax
f012441a:	e8 fc 2c fe ff       	call   f010711b <get_page_table>
f012441f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124422:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124428:	85 c0                	test   %eax,%eax
f012442a:	75 17                	jne    f0124443 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012442c:	83 ec 04             	sub    $0x4,%esp
f012442f:	68 9c 96 13 f0       	push   $0xf013969c
f0124434:	68 38 09 00 00       	push   $0x938
f0124439:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012443e:	e8 6d bd fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124443:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124446:	c1 e8 0c             	shr    $0xc,%eax
f0124449:	25 ff 03 00 00       	and    $0x3ff,%eax
f012444e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124451:	e9 ba 00 00 00       	jmp    f0124510 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124456:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012445c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012445f:	c1 e2 02             	shl    $0x2,%edx
f0124462:	01 d0                	add    %edx,%eax
f0124464:	8b 00                	mov    (%eax),%eax
f0124466:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012446b:	89 c1                	mov    %eax,%ecx
f012446d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124473:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124476:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124479:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012447f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124482:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124485:	83 ec 0c             	sub    $0xc,%esp
f0124488:	50                   	push   %eax
f0124489:	e8 39 37 fe ff       	call   f0107bc7 <kheap_virtual_address>
f012448e:	83 c4 10             	add    $0x10,%esp
f0124491:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124497:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012449d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01244a0:	74 61                	je     f0124503 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01244a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01244a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01244ab:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01244ae:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f01244b4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01244b7:	c1 e1 02             	shl    $0x2,%ecx
f01244ba:	01 ca                	add    %ecx,%edx
f01244bc:	8b 12                	mov    (%edx),%edx
f01244be:	89 d1                	mov    %edx,%ecx
f01244c0:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01244c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01244c9:	c1 e2 0c             	shl    $0xc,%edx
f01244cc:	89 d3                	mov    %edx,%ebx
f01244ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01244d1:	01 da                	add    %ebx,%edx
f01244d3:	83 ec 0c             	sub    $0xc,%esp
f01244d6:	50                   	push   %eax
f01244d7:	51                   	push   %ecx
f01244d8:	52                   	push   %edx
f01244d9:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f01244df:	68 90 97 13 f0       	push   $0xf0139790
f01244e4:	e8 48 c9 fd ff       	call   f0100e31 <cprintf>
f01244e9:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01244ec:	83 ec 04             	sub    $0x4,%esp
f01244ef:	68 d3 97 13 f0       	push   $0xf01397d3
f01244f4:	68 42 09 00 00       	push   $0x942
f01244f9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01244fe:	e8 ad bc fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124503:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012450a:	ff 45 dc             	incl   -0x24(%ebp)
f012450d:	ff 45 e0             	incl   -0x20(%ebp)
f0124510:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124513:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0124519:	7d 0d                	jge    f0124528 <test_kheap_virt_addr+0xbd5>
f012451b:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124522:	0f 8e 2e ff ff ff    	jle    f0124456 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124528:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012452b:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124531:	0f 82 d0 fe ff ff    	jb     f0124407 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124537:	83 ec 0c             	sub    $0xc,%esp
f012453a:	68 f0 97 13 f0       	push   $0xf01397f0
f012453f:	e8 ed c8 fd ff       	call   f0100e31 <cprintf>
f0124544:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124547:	e8 c6 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012454c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124552:	e8 61 fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124557:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012455d:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124563:	83 ec 0c             	sub    $0xc,%esp
f0124566:	50                   	push   %eax
f0124567:	e8 41 36 fe ff       	call   f0107bad <kfree>
f012456c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012456f:	e8 44 fd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124574:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012457a:	74 17                	je     f0124593 <test_kheap_virt_addr+0xc40>
f012457c:	83 ec 04             	sub    $0x4,%esp
f012457f:	68 14 8d 13 f0       	push   $0xf0138d14
f0124584:	68 50 09 00 00       	push   $0x950
f0124589:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012458e:	e8 1d bc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124593:	e8 7a 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124598:	89 c2                	mov    %eax,%edx
f012459a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01245a0:	29 c2                	sub    %eax,%edx
f01245a2:	89 d0                	mov    %edx,%eax
f01245a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01245a9:	74 17                	je     f01245c2 <test_kheap_virt_addr+0xc6f>
f01245ab:	83 ec 04             	sub    $0x4,%esp
f01245ae:	68 84 94 13 f0       	push   $0xf0139484
f01245b3:	68 51 09 00 00       	push   $0x951
f01245b8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01245bd:	e8 ee bb fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01245c2:	e8 4b 80 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01245c7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01245cd:	e8 e6 fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01245d2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01245d8:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01245de:	83 ec 0c             	sub    $0xc,%esp
f01245e1:	50                   	push   %eax
f01245e2:	e8 c6 35 fe ff       	call   f0107bad <kfree>
f01245e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01245ea:	e8 c9 fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01245ef:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01245f5:	74 17                	je     f012460e <test_kheap_virt_addr+0xcbb>
f01245f7:	83 ec 04             	sub    $0x4,%esp
f01245fa:	68 14 8d 13 f0       	push   $0xf0138d14
f01245ff:	68 57 09 00 00       	push   $0x957
f0124604:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124609:	e8 a2 bb fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012460e:	e8 ff 7f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124613:	89 c2                	mov    %eax,%edx
f0124615:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012461b:	29 c2                	sub    %eax,%edx
f012461d:	89 d0                	mov    %edx,%eax
f012461f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124624:	74 17                	je     f012463d <test_kheap_virt_addr+0xcea>
f0124626:	83 ec 04             	sub    $0x4,%esp
f0124629:	68 84 94 13 f0       	push   $0xf0139484
f012462e:	68 58 09 00 00       	push   $0x958
f0124633:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124638:	e8 73 bb fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012463d:	e8 d0 7f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124642:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124648:	e8 6b fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012464d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124653:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124659:	83 ec 0c             	sub    $0xc,%esp
f012465c:	50                   	push   %eax
f012465d:	e8 4b 35 fe ff       	call   f0107bad <kfree>
f0124662:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124665:	e8 4e fc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012466a:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124670:	74 17                	je     f0124689 <test_kheap_virt_addr+0xd36>
f0124672:	83 ec 04             	sub    $0x4,%esp
f0124675:	68 14 8d 13 f0       	push   $0xf0138d14
f012467a:	68 5e 09 00 00       	push   $0x95e
f012467f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124684:	e8 27 bb fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124689:	e8 84 7f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012468e:	89 c2                	mov    %eax,%edx
f0124690:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124696:	29 c2                	sub    %eax,%edx
f0124698:	89 d0                	mov    %edx,%eax
f012469a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012469f:	74 17                	je     f01246b8 <test_kheap_virt_addr+0xd65>
f01246a1:	83 ec 04             	sub    $0x4,%esp
f01246a4:	68 84 94 13 f0       	push   $0xf0139484
f01246a9:	68 5f 09 00 00       	push   $0x95f
f01246ae:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01246b3:	e8 f8 ba fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01246b8:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01246bf:	10 00 00 
f01246c2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01246c7:	0f b6 d0             	movzbl %al,%edx
f01246ca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01246d0:	01 d0                	add    %edx,%eax
f01246d2:	48                   	dec    %eax
f01246d3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01246d9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01246df:	ba 00 00 00 00       	mov    $0x0,%edx
f01246e4:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01246ea:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01246f0:	29 d0                	sub    %edx,%eax
f01246f2:	89 c1                	mov    %eax,%ecx
f01246f4:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01246fb:	10 00 00 
f01246fe:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124703:	0f b6 c0             	movzbl %al,%eax
f0124706:	c1 e0 04             	shl    $0x4,%eax
f0124709:	89 c2                	mov    %eax,%edx
f012470b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124711:	01 d0                	add    %edx,%eax
f0124713:	48                   	dec    %eax
f0124714:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012471a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124720:	ba 00 00 00 00       	mov    $0x0,%edx
f0124725:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012472b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124731:	29 d0                	sub    %edx,%eax
f0124733:	01 c8                	add    %ecx,%eax
f0124735:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012473a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124740:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124747:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012474e:	10 00 00 
f0124751:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124756:	0f b6 d0             	movzbl %al,%edx
f0124759:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012475f:	01 d0                	add    %edx,%eax
f0124761:	48                   	dec    %eax
f0124762:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124768:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012476e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124773:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124779:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012477f:	29 d0                	sub    %edx,%eax
f0124781:	89 c1                	mov    %eax,%ecx
f0124783:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012478a:	10 00 00 
f012478d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124792:	0f b6 c0             	movzbl %al,%eax
f0124795:	c1 e0 04             	shl    $0x4,%eax
f0124798:	89 c2                	mov    %eax,%edx
f012479a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01247a0:	01 d0                	add    %edx,%eax
f01247a2:	48                   	dec    %eax
f01247a3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01247a9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01247af:	ba 00 00 00 00       	mov    $0x0,%edx
f01247b4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01247ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01247c0:	29 d0                	sub    %edx,%eax
f01247c2:	01 c8                	add    %ecx,%eax
f01247c4:	05 00 40 00 00       	add    $0x4000,%eax
f01247c9:	c1 e8 0c             	shr    $0xc,%eax
f01247cc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01247d2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01247d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01247db:	eb 41                	jmp    f012481e <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01247dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247e3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01247e6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01247e9:	83 ec 0c             	sub    $0xc,%esp
f01247ec:	50                   	push   %eax
f01247ed:	e8 d5 33 fe ff       	call   f0107bc7 <kheap_virtual_address>
f01247f2:	83 c4 10             	add    $0x10,%esp
f01247f5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f01247fb:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124802:	74 17                	je     f012481b <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124804:	83 ec 04             	sub    $0x4,%esp
f0124807:	68 d3 97 13 f0       	push   $0xf01397d3
f012480c:	68 70 09 00 00       	push   $0x970
f0124811:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124816:	e8 95 b9 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012481b:	ff 45 d8             	incl   -0x28(%ebp)
f012481e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124824:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f012482a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012482d:	39 c2                	cmp    %eax,%edx
f012482f:	77 ac                	ja     f01247dd <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124831:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124837:	05 00 04 00 00       	add    $0x400,%eax
f012483c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012483f:	eb 4b                	jmp    f012488c <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124841:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124847:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012484a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012484d:	83 ec 0c             	sub    $0xc,%esp
f0124850:	50                   	push   %eax
f0124851:	e8 71 33 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124856:	83 c4 10             	add    $0x10,%esp
f0124859:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012485f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124862:	c1 e0 0c             	shl    $0xc,%eax
f0124865:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012486a:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124870:	74 17                	je     f0124889 <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124872:	83 ec 04             	sub    $0x4,%esp
f0124875:	68 d3 97 13 f0       	push   $0xf01397d3
f012487a:	68 7a 09 00 00       	push   $0x97a
f012487f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124884:	e8 27 b9 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124889:	ff 45 d8             	incl   -0x28(%ebp)
f012488c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124892:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124898:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012489b:	39 c2                	cmp    %eax,%edx
f012489d:	77 a2                	ja     f0124841 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012489f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01248a5:	05 04 07 00 00       	add    $0x704,%eax
f01248aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01248ad:	eb 41                	jmp    f01248f0 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01248af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01248b5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01248b8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01248bb:	83 ec 0c             	sub    $0xc,%esp
f01248be:	50                   	push   %eax
f01248bf:	e8 03 33 fe ff       	call   f0107bc7 <kheap_virtual_address>
f01248c4:	83 c4 10             	add    $0x10,%esp
f01248c7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f01248cd:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f01248d4:	74 17                	je     f01248ed <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f01248d6:	83 ec 04             	sub    $0x4,%esp
f01248d9:	68 d3 97 13 f0       	push   $0xf01397d3
f01248de:	68 83 09 00 00       	push   $0x983
f01248e3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01248e8:	e8 c3 b8 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01248ed:	ff 45 d8             	incl   -0x28(%ebp)
f01248f0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01248f6:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01248fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01248ff:	39 c2                	cmp    %eax,%edx
f0124901:	77 ac                	ja     f01248af <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124903:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124909:	05 04 0d 00 00       	add    $0xd04,%eax
f012490e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124911:	eb 4b                	jmp    f012495e <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124913:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124919:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012491c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012491f:	83 ec 0c             	sub    $0xc,%esp
f0124922:	50                   	push   %eax
f0124923:	e8 9f 32 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124928:	83 c4 10             	add    $0x10,%esp
f012492b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124931:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124934:	c1 e0 0c             	shl    $0xc,%eax
f0124937:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012493c:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124942:	74 17                	je     f012495b <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124944:	83 ec 04             	sub    $0x4,%esp
f0124947:	68 d3 97 13 f0       	push   $0xf01397d3
f012494c:	68 8c 09 00 00       	push   $0x98c
f0124951:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124956:	e8 55 b8 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012495b:	ff 45 d8             	incl   -0x28(%ebp)
f012495e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124964:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f012496a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012496d:	39 c2                	cmp    %eax,%edx
f012496f:	77 a2                	ja     f0124913 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124971:	83 ec 0c             	sub    $0xc,%esp
f0124974:	68 85 8e 13 f0       	push   $0xf0138e85
f0124979:	e8 b3 c4 fd ff       	call   f0100e31 <cprintf>
f012497e:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124981:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124988:	eb 54                	jmp    f01249de <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f012498a:	83 ec 0c             	sub    $0xc,%esp
f012498d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124990:	e8 32 32 fe ff       	call   f0107bc7 <kheap_virtual_address>
f0124995:	83 c4 10             	add    $0x10,%esp
f0124998:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f012499e:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f01249a5:	74 30                	je     f01249d7 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01249a7:	83 ec 04             	sub    $0x4,%esp
f01249aa:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01249b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01249b3:	68 21 98 13 f0       	push   $0xf0139821
f01249b8:	e8 74 c4 fd ff       	call   f0100e31 <cprintf>
f01249bd:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01249c0:	83 ec 04             	sub    $0x4,%esp
f01249c3:	68 d3 97 13 f0       	push   $0xf01397d3
f01249c8:	68 9c 09 00 00       	push   $0x99c
f01249cd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01249d2:	e8 d9 b7 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01249d7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01249de:	b8 2c e6 2d 00       	mov    $0x2de62c,%eax
f01249e3:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01249e6:	72 a2                	jb     f012498a <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01249e8:	83 ec 0c             	sub    $0xc,%esp
f01249eb:	68 de 8e 13 f0       	push   $0xf0138ede
f01249f0:	e8 3c c4 fd ff       	call   f0100e31 <cprintf>
f01249f5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01249f8:	83 ec 0c             	sub    $0xc,%esp
f01249fb:	68 40 98 13 f0       	push   $0xf0139840
f0124a00:	e8 2c c4 fd ff       	call   f0100e31 <cprintf>
f0124a05:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124a08:	b8 01 00 00 00       	mov    $0x1,%eax
f0124a0d:	89 f4                	mov    %esi,%esp

}
f0124a0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124a12:	5b                   	pop    %ebx
f0124a13:	5e                   	pop    %esi
f0124a14:	5f                   	pop    %edi
f0124a15:	5d                   	pop    %ebp
f0124a16:	c3                   	ret    

f0124a17 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124a17:	55                   	push   %ebp
f0124a18:	89 e5                	mov    %esp,%ebp
f0124a1a:	57                   	push   %edi
f0124a1b:	56                   	push   %esi
f0124a1c:	53                   	push   %ebx
f0124a1d:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124a23:	a0 1d cb 18 f0       	mov    0xf018cb1d,%al
f0124a28:	84 c0                	test   %al,%al
f0124a2a:	74 56                	je     f0124a82 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124a2c:	c6 05 1d cb 18 f0 00 	movb   $0x0,0xf018cb1d
		initFreeFrames = sys_calculate_free_frames() ;
f0124a33:	e8 da 7b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124a38:	a3 28 e6 2d f0       	mov    %eax,0xf02de628
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124a3d:	e8 76 f8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124a42:	a3 24 e6 2d f0       	mov    %eax,0xf02de624
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124a47:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124a4d:	bb 9d 99 13 f0       	mov    $0xf013999d,%ebx
f0124a52:	ba 11 00 00 00       	mov    $0x11,%edx
f0124a57:	89 c7                	mov    %eax,%edi
f0124a59:	89 de                	mov    %ebx,%esi
f0124a5b:	89 d1                	mov    %edx,%ecx
f0124a5d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124a5f:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124a65:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124a6a:	b0 00                	mov    $0x0,%al
f0124a6c:	89 d7                	mov    %edx,%edi
f0124a6e:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124a70:	83 ec 0c             	sub    $0xc,%esp
f0124a73:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124a79:	50                   	push   %eax
f0124a7a:	e8 44 d1 fd ff       	call   f0101bc3 <execute_command>
f0124a7f:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124a82:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124a89:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124a90:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f0124a95:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a98:	eb 2b                	jmp    f0124ac5 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124a9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a9d:	83 c0 5c             	add    $0x5c,%eax
f0124aa0:	83 ec 08             	sub    $0x8,%esp
f0124aa3:	68 87 98 13 f0       	push   $0xf0139887
f0124aa8:	50                   	push   %eax
f0124aa9:	e8 ec a0 00 00       	call   f012eb9a <strcmp>
f0124aae:	83 c4 10             	add    $0x10,%esp
f0124ab1:	85 c0                	test   %eax,%eax
f0124ab3:	75 08                	jne    f0124abd <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124ab5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ab8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124abb:	eb 2f                	jmp    f0124aec <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124abd:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0124ac2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124ac5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124ac9:	74 08                	je     f0124ad3 <test_three_creation_functions+0xbc>
f0124acb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ace:	8b 40 44             	mov    0x44(%eax),%eax
f0124ad1:	eb 05                	jmp    f0124ad8 <test_three_creation_functions+0xc1>
f0124ad3:	b8 00 00 00 00       	mov    $0x0,%eax
f0124ad8:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f0124add:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f0124ae2:	85 c0                	test   %eax,%eax
f0124ae4:	75 b4                	jne    f0124a9a <test_three_creation_functions+0x83>
f0124ae6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124aea:	75 ae                	jne    f0124a9a <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124aec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124aef:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124af5:	85 c0                	test   %eax,%eax
f0124af7:	74 17                	je     f0124b10 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124af9:	83 ec 04             	sub    $0x4,%esp
f0124afc:	68 90 98 13 f0       	push   $0xf0139890
f0124b01:	68 c6 09 00 00       	push   $0x9c6
f0124b06:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124b0b:	e8 a0 b6 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124b10:	83 ec 0c             	sub    $0xc,%esp
f0124b13:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124b16:	e8 6e 33 fe ff       	call   f0107e89 <env_page_ws_get_size>
f0124b1b:	83 c4 10             	add    $0x10,%esp
f0124b1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124b21:	e8 ec 7a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124b29:	e8 8a f7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124b2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b31:	a1 24 e6 2d f0       	mov    0xf02de624,%eax
f0124b36:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124b39:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124b3c:	74 17                	je     f0124b55 <test_three_creation_functions+0x13e>
f0124b3e:	83 ec 04             	sub    $0x4,%esp
f0124b41:	68 14 8d 13 f0       	push   $0xf0138d14
f0124b46:	68 cc 09 00 00       	push   $0x9cc
f0124b4b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124b50:	e8 5b b6 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b55:	a1 28 e6 2d f0       	mov    0xf02de628,%eax
f0124b5a:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124b5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124b60:	83 c2 15             	add    $0x15,%edx
f0124b63:	39 d0                	cmp    %edx,%eax
f0124b65:	74 17                	je     f0124b7e <test_three_creation_functions+0x167>
f0124b67:	83 ec 04             	sub    $0x4,%esp
f0124b6a:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124b6f:	68 ce 09 00 00       	push   $0x9ce
f0124b74:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124b79:	e8 32 b6 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124b7e:	83 ec 0c             	sub    $0xc,%esp
f0124b81:	68 00 10 00 00       	push   $0x1000
f0124b86:	e8 08 30 fe ff       	call   f0107b93 <kmalloc>
f0124b8b:	83 c4 10             	add    $0x10,%esp
f0124b8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124b91:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124b98:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124b9d:	0f b6 d0             	movzbl %al,%edx
f0124ba0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124ba3:	01 d0                	add    %edx,%eax
f0124ba5:	48                   	dec    %eax
f0124ba6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124ba9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bb1:	f7 75 cc             	divl   -0x34(%ebp)
f0124bb4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124bb7:	29 d0                	sub    %edx,%eax
f0124bb9:	89 c1                	mov    %eax,%ecx
f0124bbb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124bc2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124bc7:	0f b6 c0             	movzbl %al,%eax
f0124bca:	c1 e0 04             	shl    $0x4,%eax
f0124bcd:	89 c2                	mov    %eax,%edx
f0124bcf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124bd2:	01 d0                	add    %edx,%eax
f0124bd4:	48                   	dec    %eax
f0124bd5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124bd8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124bdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124be0:	f7 75 c4             	divl   -0x3c(%ebp)
f0124be3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124be6:	29 d0                	sub    %edx,%eax
f0124be8:	01 c8                	add    %ecx,%eax
f0124bea:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124bf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124bf3:	39 c2                	cmp    %eax,%edx
f0124bf5:	74 17                	je     f0124c0e <test_three_creation_functions+0x1f7>
f0124bf7:	83 ec 04             	sub    $0x4,%esp
f0124bfa:	68 e0 98 13 f0       	push   $0xf01398e0
f0124bff:	68 d2 09 00 00       	push   $0x9d2
f0124c04:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124c09:	e8 a2 b5 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124c0e:	83 ec 0c             	sub    $0xc,%esp
f0124c11:	68 50 99 13 f0       	push   $0xf0139950
f0124c16:	e8 16 c2 fd ff       	call   f0100e31 <cprintf>
f0124c1b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124c1e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124c23:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124c26:	5b                   	pop    %ebx
f0124c27:	5e                   	pop    %esi
f0124c28:	5f                   	pop    %edi
f0124c29:	5d                   	pop    %ebp
f0124c2a:	c3                   	ret    

f0124c2b <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124c2b:	55                   	push   %ebp
f0124c2c:	89 e5                	mov    %esp,%ebp
f0124c2e:	57                   	push   %edi
f0124c2f:	53                   	push   %ebx
f0124c30:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124c36:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124c3a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124c3e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124c44:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124c4a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124c51:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124c58:	e8 b5 79 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124c5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124c60:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0124c66:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c70:	89 d7                	mov    %edx,%edi
f0124c72:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124c74:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0124c7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c84:	89 d7                	mov    %edx,%edi
f0124c86:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124c88:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0124c8e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124c93:	b8 00 00 00 00       	mov    $0x0,%eax
f0124c98:	89 d7                	mov    %edx,%edi
f0124c9a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c9c:	e8 71 79 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124ca1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ca4:	e8 0f f6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124ca9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124cac:	83 ec 0c             	sub    $0xc,%esp
f0124caf:	68 00 fc 1f 00       	push   $0x1ffc00
f0124cb4:	e8 da 2e fe ff       	call   f0107b93 <kmalloc>
f0124cb9:	83 c4 10             	add    $0x10,%esp
f0124cbc:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124cc2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124cc8:	89 c1                	mov    %eax,%ecx
f0124cca:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0124cd1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124cd6:	0f b6 d0             	movzbl %al,%edx
f0124cd9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124cdc:	01 d0                	add    %edx,%eax
f0124cde:	48                   	dec    %eax
f0124cdf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0124ce2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cea:	f7 75 c8             	divl   -0x38(%ebp)
f0124ced:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124cf0:	29 d0                	sub    %edx,%eax
f0124cf2:	89 c3                	mov    %eax,%ebx
f0124cf4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0124cfb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124d00:	0f b6 c0             	movzbl %al,%eax
f0124d03:	c1 e0 04             	shl    $0x4,%eax
f0124d06:	89 c2                	mov    %eax,%edx
f0124d08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124d0b:	01 d0                	add    %edx,%eax
f0124d0d:	48                   	dec    %eax
f0124d0e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0124d11:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0124d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d19:	f7 75 c0             	divl   -0x40(%ebp)
f0124d1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0124d1f:	29 d0                	sub    %edx,%eax
f0124d21:	01 d8                	add    %ebx,%eax
f0124d23:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124d28:	39 c1                	cmp    %eax,%ecx
f0124d2a:	74 17                	je     f0124d43 <test_kfreeall+0x118>
f0124d2c:	83 ec 04             	sub    $0x4,%esp
f0124d2f:	68 e0 8d 13 f0       	push   $0xf0138de0
f0124d34:	68 f9 09 00 00       	push   $0x9f9
f0124d39:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124d3e:	e8 6d b4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d43:	e8 70 f5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124d48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124d4b:	74 17                	je     f0124d64 <test_kfreeall+0x139>
f0124d4d:	83 ec 04             	sub    $0x4,%esp
f0124d50:	68 14 8d 13 f0       	push   $0xf0138d14
f0124d55:	68 fa 09 00 00       	push   $0x9fa
f0124d5a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124d5f:	e8 4c b4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d64:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124d67:	e8 a6 78 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124d6c:	29 c3                	sub    %eax,%ebx
f0124d6e:	89 d8                	mov    %ebx,%eax
f0124d70:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124d75:	74 17                	je     f0124d8e <test_kfreeall+0x163>
f0124d77:	83 ec 04             	sub    $0x4,%esp
f0124d7a:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124d7f:	68 fb 09 00 00       	push   $0x9fb
f0124d84:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124d89:	e8 22 b4 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0124d8e:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0124d95:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124d98:	e8 75 78 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124d9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124da0:	e8 13 f5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124da5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124da8:	83 ec 0c             	sub    $0xc,%esp
f0124dab:	68 00 fc 1f 00       	push   $0x1ffc00
f0124db0:	e8 de 2d fe ff       	call   f0107b93 <kmalloc>
f0124db5:	83 c4 10             	add    $0x10,%esp
f0124db8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124dbe:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124dc4:	89 c1                	mov    %eax,%ecx
f0124dc6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0124dcd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124dd2:	0f b6 d0             	movzbl %al,%edx
f0124dd5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0124dd8:	01 d0                	add    %edx,%eax
f0124dda:	48                   	dec    %eax
f0124ddb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0124dde:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124de1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124de6:	f7 75 b8             	divl   -0x48(%ebp)
f0124de9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124dec:	29 d0                	sub    %edx,%eax
f0124dee:	89 c3                	mov    %eax,%ebx
f0124df0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0124df7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124dfc:	0f b6 c0             	movzbl %al,%eax
f0124dff:	c1 e0 04             	shl    $0x4,%eax
f0124e02:	89 c2                	mov    %eax,%edx
f0124e04:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124e07:	01 d0                	add    %edx,%eax
f0124e09:	48                   	dec    %eax
f0124e0a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0124e0d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e15:	f7 75 b0             	divl   -0x50(%ebp)
f0124e18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124e1b:	29 d0                	sub    %edx,%eax
f0124e1d:	01 d8                	add    %ebx,%eax
f0124e1f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124e24:	39 c1                	cmp    %eax,%ecx
f0124e26:	74 17                	je     f0124e3f <test_kfreeall+0x214>
f0124e28:	83 ec 04             	sub    $0x4,%esp
f0124e2b:	68 e0 8d 13 f0       	push   $0xf0138de0
f0124e30:	68 02 0a 00 00       	push   $0xa02
f0124e35:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124e3a:	e8 71 b3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e3f:	e8 74 f4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124e44:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124e47:	74 17                	je     f0124e60 <test_kfreeall+0x235>
f0124e49:	83 ec 04             	sub    $0x4,%esp
f0124e4c:	68 14 8d 13 f0       	push   $0xf0138d14
f0124e51:	68 03 0a 00 00       	push   $0xa03
f0124e56:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124e5b:	e8 50 b3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e60:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124e63:	e8 aa 77 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124e68:	29 c3                	sub    %eax,%ebx
f0124e6a:	89 d8                	mov    %ebx,%eax
f0124e6c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e71:	74 17                	je     f0124e8a <test_kfreeall+0x25f>
f0124e73:	83 ec 04             	sub    $0x4,%esp
f0124e76:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124e7b:	68 04 0a 00 00       	push   $0xa04
f0124e80:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124e85:	e8 26 b3 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0124e8a:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0124e91:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124e94:	e8 79 77 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124e99:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e9c:	e8 17 f4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124ea4:	83 ec 0c             	sub    $0xc,%esp
f0124ea7:	68 00 08 00 00       	push   $0x800
f0124eac:	e8 e2 2c fe ff       	call   f0107b93 <kmalloc>
f0124eb1:	83 c4 10             	add    $0x10,%esp
f0124eb4:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124eba:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124ec0:	89 c1                	mov    %eax,%ecx
f0124ec2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0124ec9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124ece:	0f b6 d0             	movzbl %al,%edx
f0124ed1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124ed4:	01 d0                	add    %edx,%eax
f0124ed6:	48                   	dec    %eax
f0124ed7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0124eda:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124edd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ee2:	f7 75 a8             	divl   -0x58(%ebp)
f0124ee5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124ee8:	29 d0                	sub    %edx,%eax
f0124eea:	89 c3                	mov    %eax,%ebx
f0124eec:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0124ef3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124ef8:	0f b6 c0             	movzbl %al,%eax
f0124efb:	c1 e0 04             	shl    $0x4,%eax
f0124efe:	89 c2                	mov    %eax,%edx
f0124f00:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124f03:	01 d0                	add    %edx,%eax
f0124f05:	48                   	dec    %eax
f0124f06:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124f09:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124f0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f11:	f7 75 a0             	divl   -0x60(%ebp)
f0124f14:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124f17:	29 d0                	sub    %edx,%eax
f0124f19:	01 d8                	add    %ebx,%eax
f0124f1b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124f20:	39 c1                	cmp    %eax,%ecx
f0124f22:	74 17                	je     f0124f3b <test_kfreeall+0x310>
f0124f24:	83 ec 04             	sub    $0x4,%esp
f0124f27:	68 e0 8d 13 f0       	push   $0xf0138de0
f0124f2c:	68 0b 0a 00 00       	push   $0xa0b
f0124f31:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124f36:	e8 75 b2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f3b:	e8 78 f3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124f40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124f43:	74 17                	je     f0124f5c <test_kfreeall+0x331>
f0124f45:	83 ec 04             	sub    $0x4,%esp
f0124f48:	68 14 8d 13 f0       	push   $0xf0138d14
f0124f4d:	68 0c 0a 00 00       	push   $0xa0c
f0124f52:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124f57:	e8 54 b2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124f5c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0124f5f:	e8 ae 76 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124f64:	29 c3                	sub    %eax,%ebx
f0124f66:	89 d8                	mov    %ebx,%eax
f0124f68:	83 f8 01             	cmp    $0x1,%eax
f0124f6b:	74 17                	je     f0124f84 <test_kfreeall+0x359>
f0124f6d:	83 ec 04             	sub    $0x4,%esp
f0124f70:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0124f75:	68 0d 0a 00 00       	push   $0xa0d
f0124f7a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0124f7f:	e8 2c b2 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0124f84:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0124f8b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0124f8e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124f94:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0124f97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0124f9e:	eb 0e                	jmp    f0124fae <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f0124fa0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0124fa3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124fa6:	01 d0                	add    %edx,%eax
f0124fa8:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0124fab:	ff 45 f4             	incl   -0xc(%ebp)
f0124fae:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124fb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0124fb7:	7f e7                	jg     f0124fa0 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124fb9:	e8 54 76 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0124fbe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fc1:	e8 f2 f2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0124fc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124fc9:	83 ec 0c             	sub    $0xc,%esp
f0124fcc:	68 00 08 00 00       	push   $0x800
f0124fd1:	e8 bd 2b fe ff       	call   f0107b93 <kmalloc>
f0124fd6:	83 c4 10             	add    $0x10,%esp
f0124fd9:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124fdf:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124fe5:	89 c1                	mov    %eax,%ecx
f0124fe7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124fee:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0124ff3:	0f b6 d0             	movzbl %al,%edx
f0124ff6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124ff9:	01 d0                	add    %edx,%eax
f0124ffb:	48                   	dec    %eax
f0124ffc:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124fff:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125002:	ba 00 00 00 00       	mov    $0x0,%edx
f0125007:	f7 75 94             	divl   -0x6c(%ebp)
f012500a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012500d:	29 d0                	sub    %edx,%eax
f012500f:	89 c3                	mov    %eax,%ebx
f0125011:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125018:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012501d:	0f b6 c0             	movzbl %al,%eax
f0125020:	c1 e0 04             	shl    $0x4,%eax
f0125023:	89 c2                	mov    %eax,%edx
f0125025:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125028:	01 d0                	add    %edx,%eax
f012502a:	48                   	dec    %eax
f012502b:	89 45 88             	mov    %eax,-0x78(%ebp)
f012502e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125031:	ba 00 00 00 00       	mov    $0x0,%edx
f0125036:	f7 75 8c             	divl   -0x74(%ebp)
f0125039:	8b 45 88             	mov    -0x78(%ebp),%eax
f012503c:	29 d0                	sub    %edx,%eax
f012503e:	01 d8                	add    %ebx,%eax
f0125040:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125045:	39 c1                	cmp    %eax,%ecx
f0125047:	74 17                	je     f0125060 <test_kfreeall+0x435>
f0125049:	83 ec 04             	sub    $0x4,%esp
f012504c:	68 e0 8d 13 f0       	push   $0xf0138de0
f0125051:	68 19 0a 00 00       	push   $0xa19
f0125056:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012505b:	e8 50 b1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125060:	e8 53 f2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125065:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125068:	74 17                	je     f0125081 <test_kfreeall+0x456>
f012506a:	83 ec 04             	sub    $0x4,%esp
f012506d:	68 14 8d 13 f0       	push   $0xf0138d14
f0125072:	68 1a 0a 00 00       	push   $0xa1a
f0125077:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012507c:	e8 2f b1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125081:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125084:	e8 89 75 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125089:	29 c3                	sub    %eax,%ebx
f012508b:	89 d8                	mov    %ebx,%eax
f012508d:	83 f8 01             	cmp    $0x1,%eax
f0125090:	74 17                	je     f01250a9 <test_kfreeall+0x47e>
f0125092:	83 ec 04             	sub    $0x4,%esp
f0125095:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012509a:	68 1b 0a 00 00       	push   $0xa1b
f012509f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01250a4:	e8 07 b1 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01250a9:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01250b0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01250b3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01250b9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01250bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01250c3:	eb 0e                	jmp    f01250d3 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f01250c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01250c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01250cb:	01 d0                	add    %edx,%eax
f01250cd:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01250d0:	ff 45 f4             	incl   -0xc(%ebp)
f01250d3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01250d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01250dc:	7f e7                	jg     f01250c5 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01250de:	e8 2f 75 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01250e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01250e6:	e8 cd f1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01250eb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01250ee:	83 ec 0c             	sub    $0xc,%esp
f01250f1:	68 00 1c 00 00       	push   $0x1c00
f01250f6:	e8 98 2a fe ff       	call   f0107b93 <kmalloc>
f01250fb:	83 c4 10             	add    $0x10,%esp
f01250fe:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125104:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012510a:	89 c1                	mov    %eax,%ecx
f012510c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125113:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125118:	0f b6 d0             	movzbl %al,%edx
f012511b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012511e:	01 d0                	add    %edx,%eax
f0125120:	48                   	dec    %eax
f0125121:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125124:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125127:	ba 00 00 00 00       	mov    $0x0,%edx
f012512c:	f7 75 84             	divl   -0x7c(%ebp)
f012512f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125132:	29 d0                	sub    %edx,%eax
f0125134:	89 c3                	mov    %eax,%ebx
f0125136:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012513d:	10 00 00 
f0125140:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125145:	0f b6 c0             	movzbl %al,%eax
f0125148:	c1 e0 04             	shl    $0x4,%eax
f012514b:	89 c2                	mov    %eax,%edx
f012514d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125153:	01 d0                	add    %edx,%eax
f0125155:	48                   	dec    %eax
f0125156:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012515c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125162:	ba 00 00 00 00       	mov    $0x0,%edx
f0125167:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012516d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125173:	29 d0                	sub    %edx,%eax
f0125175:	01 d8                	add    %ebx,%eax
f0125177:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012517c:	39 c1                	cmp    %eax,%ecx
f012517e:	74 17                	je     f0125197 <test_kfreeall+0x56c>
f0125180:	83 ec 04             	sub    $0x4,%esp
f0125183:	68 e0 8d 13 f0       	push   $0xf0138de0
f0125188:	68 27 0a 00 00       	push   $0xa27
f012518d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125192:	e8 19 b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125197:	e8 1c f1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012519c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012519f:	74 17                	je     f01251b8 <test_kfreeall+0x58d>
f01251a1:	83 ec 04             	sub    $0x4,%esp
f01251a4:	68 14 8d 13 f0       	push   $0xf0138d14
f01251a9:	68 28 0a 00 00       	push   $0xa28
f01251ae:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01251b3:	e8 f8 af fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01251b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01251bb:	e8 52 74 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01251c0:	29 c3                	sub    %eax,%ebx
f01251c2:	89 d8                	mov    %ebx,%eax
f01251c4:	83 f8 02             	cmp    $0x2,%eax
f01251c7:	74 17                	je     f01251e0 <test_kfreeall+0x5b5>
f01251c9:	83 ec 04             	sub    $0x4,%esp
f01251cc:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01251d1:	68 29 0a 00 00       	push   $0xa29
f01251d6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01251db:	e8 d0 af fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01251e0:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f01251e7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01251ea:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01251f0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01251f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01251fa:	eb 0e                	jmp    f012520a <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f01251fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01251ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125202:	01 d0                	add    %edx,%eax
f0125204:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125207:	ff 45 f4             	incl   -0xc(%ebp)
f012520a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125210:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125213:	7f e7                	jg     f01251fc <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125215:	e8 f8 73 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012521a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012521d:	e8 96 f0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125222:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125225:	83 ec 0c             	sub    $0xc,%esp
f0125228:	68 00 fc 2f 00       	push   $0x2ffc00
f012522d:	e8 61 29 fe ff       	call   f0107b93 <kmalloc>
f0125232:	83 c4 10             	add    $0x10,%esp
f0125235:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012523b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125241:	89 c1                	mov    %eax,%ecx
f0125243:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012524a:	10 00 00 
f012524d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125252:	0f b6 d0             	movzbl %al,%edx
f0125255:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012525b:	01 d0                	add    %edx,%eax
f012525d:	48                   	dec    %eax
f012525e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125264:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012526a:	ba 00 00 00 00       	mov    $0x0,%edx
f012526f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125275:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012527b:	29 d0                	sub    %edx,%eax
f012527d:	89 c3                	mov    %eax,%ebx
f012527f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125286:	10 00 00 
f0125289:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012528e:	0f b6 c0             	movzbl %al,%eax
f0125291:	c1 e0 04             	shl    $0x4,%eax
f0125294:	89 c2                	mov    %eax,%edx
f0125296:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012529c:	01 d0                	add    %edx,%eax
f012529e:	48                   	dec    %eax
f012529f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01252a5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01252ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01252b0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01252b6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01252bc:	29 d0                	sub    %edx,%eax
f01252be:	01 d8                	add    %ebx,%eax
f01252c0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01252c5:	39 c1                	cmp    %eax,%ecx
f01252c7:	74 17                	je     f01252e0 <test_kfreeall+0x6b5>
f01252c9:	83 ec 04             	sub    $0x4,%esp
f01252cc:	68 e0 8d 13 f0       	push   $0xf0138de0
f01252d1:	68 35 0a 00 00       	push   $0xa35
f01252d6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01252db:	e8 d0 ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01252e0:	e8 d3 ef fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01252e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01252e8:	74 17                	je     f0125301 <test_kfreeall+0x6d6>
f01252ea:	83 ec 04             	sub    $0x4,%esp
f01252ed:	68 14 8d 13 f0       	push   $0xf0138d14
f01252f2:	68 36 0a 00 00       	push   $0xa36
f01252f7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01252fc:	e8 af ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125301:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125304:	e8 09 73 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125309:	29 c3                	sub    %eax,%ebx
f012530b:	89 d8                	mov    %ebx,%eax
f012530d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125312:	74 17                	je     f012532b <test_kfreeall+0x700>
f0125314:	83 ec 04             	sub    $0x4,%esp
f0125317:	68 7c 8d 13 f0       	push   $0xf0138d7c
f012531c:	68 37 0a 00 00       	push   $0xa37
f0125321:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125326:	e8 85 ae fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012532b:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0125332:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125335:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012533b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012533e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125345:	eb 0e                	jmp    f0125355 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f0125347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012534a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012534d:	01 d0                	add    %edx,%eax
f012534f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125352:	ff 45 f4             	incl   -0xc(%ebp)
f0125355:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012535b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012535e:	7f e7                	jg     f0125347 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125360:	e8 ad 72 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125365:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125368:	e8 4b ef fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012536d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125370:	83 ec 0c             	sub    $0xc,%esp
f0125373:	68 00 fc 5f 00       	push   $0x5ffc00
f0125378:	e8 16 28 fe ff       	call   f0107b93 <kmalloc>
f012537d:	83 c4 10             	add    $0x10,%esp
f0125380:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125386:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012538c:	89 c1                	mov    %eax,%ecx
f012538e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125395:	10 00 00 
f0125398:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012539d:	0f b6 d0             	movzbl %al,%edx
f01253a0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01253a6:	01 d0                	add    %edx,%eax
f01253a8:	48                   	dec    %eax
f01253a9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01253af:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01253b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253ba:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01253c0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01253c6:	29 d0                	sub    %edx,%eax
f01253c8:	89 c3                	mov    %eax,%ebx
f01253ca:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01253d1:	10 00 00 
f01253d4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01253d9:	0f b6 c0             	movzbl %al,%eax
f01253dc:	c1 e0 04             	shl    $0x4,%eax
f01253df:	89 c2                	mov    %eax,%edx
f01253e1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01253e7:	01 d0                	add    %edx,%eax
f01253e9:	48                   	dec    %eax
f01253ea:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01253f0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01253f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01253fb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125401:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125407:	29 d0                	sub    %edx,%eax
f0125409:	01 d8                	add    %ebx,%eax
f012540b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125410:	39 c1                	cmp    %eax,%ecx
f0125412:	74 17                	je     f012542b <test_kfreeall+0x800>
f0125414:	83 ec 04             	sub    $0x4,%esp
f0125417:	68 e0 8d 13 f0       	push   $0xf0138de0
f012541c:	68 43 0a 00 00       	push   $0xa43
f0125421:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125426:	e8 85 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012542b:	e8 88 ee fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125430:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125433:	74 17                	je     f012544c <test_kfreeall+0x821>
f0125435:	83 ec 04             	sub    $0x4,%esp
f0125438:	68 14 8d 13 f0       	push   $0xf0138d14
f012543d:	68 44 0a 00 00       	push   $0xa44
f0125442:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125447:	e8 64 ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012544c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012544f:	e8 be 71 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125454:	29 c3                	sub    %eax,%ebx
f0125456:	89 d8                	mov    %ebx,%eax
f0125458:	3d 00 06 00 00       	cmp    $0x600,%eax
f012545d:	74 17                	je     f0125476 <test_kfreeall+0x84b>
f012545f:	83 ec 04             	sub    $0x4,%esp
f0125462:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125467:	68 45 0a 00 00       	push   $0xa45
f012546c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125471:	e8 3a ad fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125476:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f012547d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125480:	e8 8d 71 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125485:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125488:	e8 2b ee fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012548d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125490:	83 ec 0c             	sub    $0xc,%esp
f0125493:	68 00 38 00 00       	push   $0x3800
f0125498:	e8 f6 26 fe ff       	call   f0107b93 <kmalloc>
f012549d:	83 c4 10             	add    $0x10,%esp
f01254a0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254a6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01254ac:	89 c1                	mov    %eax,%ecx
f01254ae:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01254b5:	10 00 00 
f01254b8:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01254bd:	0f b6 d0             	movzbl %al,%edx
f01254c0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01254c6:	01 d0                	add    %edx,%eax
f01254c8:	48                   	dec    %eax
f01254c9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01254cf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01254d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01254da:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01254e0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01254e6:	29 d0                	sub    %edx,%eax
f01254e8:	89 c3                	mov    %eax,%ebx
f01254ea:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01254f1:	10 00 00 
f01254f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01254f9:	0f b6 c0             	movzbl %al,%eax
f01254fc:	c1 e0 04             	shl    $0x4,%eax
f01254ff:	89 c2                	mov    %eax,%edx
f0125501:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125507:	01 d0                	add    %edx,%eax
f0125509:	48                   	dec    %eax
f012550a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125510:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125516:	ba 00 00 00 00       	mov    $0x0,%edx
f012551b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125521:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125527:	29 d0                	sub    %edx,%eax
f0125529:	01 d8                	add    %ebx,%eax
f012552b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125530:	39 c1                	cmp    %eax,%ecx
f0125532:	74 17                	je     f012554b <test_kfreeall+0x920>
f0125534:	83 ec 04             	sub    $0x4,%esp
f0125537:	68 e0 8d 13 f0       	push   $0xf0138de0
f012553c:	68 4c 0a 00 00       	push   $0xa4c
f0125541:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125546:	e8 65 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012554b:	e8 68 ed fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125550:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125553:	74 17                	je     f012556c <test_kfreeall+0x941>
f0125555:	83 ec 04             	sub    $0x4,%esp
f0125558:	68 14 8d 13 f0       	push   $0xf0138d14
f012555d:	68 4d 0a 00 00       	push   $0xa4d
f0125562:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125567:	e8 44 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012556c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012556f:	e8 9e 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125574:	29 c3                	sub    %eax,%ebx
f0125576:	89 d8                	mov    %ebx,%eax
f0125578:	83 f8 04             	cmp    $0x4,%eax
f012557b:	74 17                	je     f0125594 <test_kfreeall+0x969>
f012557d:	83 ec 04             	sub    $0x4,%esp
f0125580:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125585:	68 4e 0a 00 00       	push   $0xa4e
f012558a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012558f:	e8 1c ac fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125594:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f012559b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012559e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01255a4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01255a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01255ae:	eb 0e                	jmp    f01255be <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f01255b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01255b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01255b6:	01 d0                	add    %edx,%eax
f01255b8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01255bb:	ff 45 f4             	incl   -0xc(%ebp)
f01255be:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01255c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01255c7:	7f e7                	jg     f01255b0 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01255c9:	e8 44 70 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01255ce:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01255d4:	e8 df ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01255d9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f01255df:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01255e5:	83 ec 0c             	sub    $0xc,%esp
f01255e8:	50                   	push   %eax
f01255e9:	e8 bf 25 fe ff       	call   f0107bad <kfree>
f01255ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255f1:	e8 c2 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01255f6:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01255fc:	74 17                	je     f0125615 <test_kfreeall+0x9ea>
f01255fe:	83 ec 04             	sub    $0x4,%esp
f0125601:	68 14 8d 13 f0       	push   $0xf0138d14
f0125606:	68 5d 0a 00 00       	push   $0xa5d
f012560b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125610:	e8 9b ab fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125615:	e8 f8 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012561a:	89 c2                	mov    %eax,%edx
f012561c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125622:	29 c2                	sub    %eax,%edx
f0125624:	89 d0                	mov    %edx,%eax
f0125626:	3d 00 02 00 00       	cmp    $0x200,%eax
f012562b:	74 17                	je     f0125644 <test_kfreeall+0xa19>
f012562d:	83 ec 04             	sub    $0x4,%esp
f0125630:	68 84 94 13 f0       	push   $0xf0139484
f0125635:	68 5e 0a 00 00       	push   $0xa5e
f012563a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012563f:	e8 6c ab fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125644:	e8 c9 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125649:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012564f:	e8 64 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125654:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012565a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125660:	83 ec 0c             	sub    $0xc,%esp
f0125663:	50                   	push   %eax
f0125664:	e8 44 25 fe ff       	call   f0107bad <kfree>
f0125669:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012566c:	e8 47 ec fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125671:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125677:	74 17                	je     f0125690 <test_kfreeall+0xa65>
f0125679:	83 ec 04             	sub    $0x4,%esp
f012567c:	68 14 8d 13 f0       	push   $0xf0138d14
f0125681:	68 64 0a 00 00       	push   $0xa64
f0125686:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012568b:	e8 20 ab fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125690:	e8 7d 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125695:	89 c2                	mov    %eax,%edx
f0125697:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012569d:	29 c2                	sub    %eax,%edx
f012569f:	89 d0                	mov    %edx,%eax
f01256a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01256a6:	74 17                	je     f01256bf <test_kfreeall+0xa94>
f01256a8:	83 ec 04             	sub    $0x4,%esp
f01256ab:	68 84 94 13 f0       	push   $0xf0139484
f01256b0:	68 65 0a 00 00       	push   $0xa65
f01256b5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01256ba:	e8 f1 aa fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01256bf:	e8 4e 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01256c4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256ca:	e8 e9 eb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01256cf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01256d5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01256db:	83 ec 0c             	sub    $0xc,%esp
f01256de:	50                   	push   %eax
f01256df:	e8 c9 24 fe ff       	call   f0107bad <kfree>
f01256e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256e7:	e8 cc eb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01256ec:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01256f2:	74 17                	je     f012570b <test_kfreeall+0xae0>
f01256f4:	83 ec 04             	sub    $0x4,%esp
f01256f7:	68 14 8d 13 f0       	push   $0xf0138d14
f01256fc:	68 6b 0a 00 00       	push   $0xa6b
f0125701:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125706:	e8 a5 aa fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012570b:	e8 02 6f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125710:	89 c2                	mov    %eax,%edx
f0125712:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125718:	29 c2                	sub    %eax,%edx
f012571a:	89 d0                	mov    %edx,%eax
f012571c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125721:	74 17                	je     f012573a <test_kfreeall+0xb0f>
f0125723:	83 ec 04             	sub    $0x4,%esp
f0125726:	68 84 94 13 f0       	push   $0xf0139484
f012572b:	68 6c 0a 00 00       	push   $0xa6c
f0125730:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125735:	e8 76 aa fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012573a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125740:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125743:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012574a:	eb 1e                	jmp    f012576a <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f012574c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125752:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125755:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125758:	01 c8                	add    %ecx,%eax
f012575a:	8a 00                	mov    (%eax),%al
f012575c:	0f be c0             	movsbl %al,%eax
f012575f:	01 d0                	add    %edx,%eax
f0125761:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125767:	ff 45 f4             	incl   -0xc(%ebp)
f012576a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125770:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125773:	7f d7                	jg     f012574c <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125775:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012577b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125781:	01 c0                	add    %eax,%eax
f0125783:	39 c2                	cmp    %eax,%edx
f0125785:	74 17                	je     f012579e <test_kfreeall+0xb73>
f0125787:	83 ec 04             	sub    $0x4,%esp
f012578a:	68 e0 94 13 f0       	push   $0xf01394e0
f012578f:	68 78 0a 00 00       	push   $0xa78
f0125794:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125799:	e8 12 aa fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012579e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01257a4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01257a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01257ae:	eb 1e                	jmp    f01257ce <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f01257b0:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01257b6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01257b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01257bc:	01 c8                	add    %ecx,%eax
f01257be:	8a 00                	mov    (%eax),%al
f01257c0:	0f be c0             	movsbl %al,%eax
f01257c3:	01 d0                	add    %edx,%eax
f01257c5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01257cb:	ff 45 f4             	incl   -0xc(%ebp)
f01257ce:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01257d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01257d7:	7f d7                	jg     f01257b0 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01257d9:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01257df:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01257e5:	89 c1                	mov    %eax,%ecx
f01257e7:	01 c9                	add    %ecx,%ecx
f01257e9:	01 c8                	add    %ecx,%eax
f01257eb:	39 c2                	cmp    %eax,%edx
f01257ed:	74 17                	je     f0125806 <test_kfreeall+0xbdb>
f01257ef:	83 ec 04             	sub    $0x4,%esp
f01257f2:	68 e0 94 13 f0       	push   $0xf01394e0
f01257f7:	68 80 0a 00 00       	push   $0xa80
f01257fc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125801:	e8 aa a9 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125806:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012580c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012580f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125816:	eb 1e                	jmp    f0125836 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125818:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f012581e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125821:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125824:	01 c8                	add    %ecx,%eax
f0125826:	8a 00                	mov    (%eax),%al
f0125828:	0f be c0             	movsbl %al,%eax
f012582b:	01 d0                	add    %edx,%eax
f012582d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125833:	ff 45 f4             	incl   -0xc(%ebp)
f0125836:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012583c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012583f:	7f d7                	jg     f0125818 <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125841:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125847:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f012584d:	c1 e2 02             	shl    $0x2,%edx
f0125850:	39 d0                	cmp    %edx,%eax
f0125852:	74 17                	je     f012586b <test_kfreeall+0xc40>
f0125854:	83 ec 04             	sub    $0x4,%esp
f0125857:	68 e0 94 13 f0       	push   $0xf01394e0
f012585c:	68 88 0a 00 00       	push   $0xa88
f0125861:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125866:	e8 45 a9 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012586b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125871:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012587b:	eb 1e                	jmp    f012589b <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f012587d:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125883:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125886:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125889:	01 c8                	add    %ecx,%eax
f012588b:	8a 00                	mov    (%eax),%al
f012588d:	0f be c0             	movsbl %al,%eax
f0125890:	01 d0                	add    %edx,%eax
f0125892:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125898:	ff 45 f4             	incl   -0xc(%ebp)
f012589b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01258a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01258a4:	7f d7                	jg     f012587d <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01258a6:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f01258ac:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f01258b2:	89 d0                	mov    %edx,%eax
f01258b4:	c1 e0 02             	shl    $0x2,%eax
f01258b7:	01 d0                	add    %edx,%eax
f01258b9:	39 c1                	cmp    %eax,%ecx
f01258bb:	74 17                	je     f01258d4 <test_kfreeall+0xca9>
f01258bd:	83 ec 04             	sub    $0x4,%esp
f01258c0:	68 e0 94 13 f0       	push   $0xf01394e0
f01258c5:	68 90 0a 00 00       	push   $0xa90
f01258ca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01258cf:	e8 dc a8 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01258d4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258da:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01258dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01258e4:	eb 1e                	jmp    f0125904 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f01258e6:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01258ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01258ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01258f2:	01 c8                	add    %ecx,%eax
f01258f4:	8a 00                	mov    (%eax),%al
f01258f6:	0f be c0             	movsbl %al,%eax
f01258f9:	01 d0                	add    %edx,%eax
f01258fb:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125901:	ff 45 f4             	incl   -0xc(%ebp)
f0125904:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012590a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012590d:	7f d7                	jg     f01258e6 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012590f:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125915:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f012591b:	89 d0                	mov    %edx,%eax
f012591d:	01 c0                	add    %eax,%eax
f012591f:	01 d0                	add    %edx,%eax
f0125921:	01 c0                	add    %eax,%eax
f0125923:	01 d0                	add    %edx,%eax
f0125925:	39 c1                	cmp    %eax,%ecx
f0125927:	74 17                	je     f0125940 <test_kfreeall+0xd15>
f0125929:	83 ec 04             	sub    $0x4,%esp
f012592c:	68 e0 94 13 f0       	push   $0xf01394e0
f0125931:	68 98 0a 00 00       	push   $0xa98
f0125936:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012593b:	e8 70 a8 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125940:	e8 cd 6c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125945:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125948:	e8 6b e9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012594d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125950:	83 ec 0c             	sub    $0xc,%esp
f0125953:	68 00 50 00 00       	push   $0x5000
f0125958:	e8 36 22 fe ff       	call   f0107b93 <kmalloc>
f012595d:	83 c4 10             	add    $0x10,%esp
f0125960:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125966:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012596c:	89 c1                	mov    %eax,%ecx
f012596e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125975:	10 00 00 
f0125978:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012597d:	0f b6 d0             	movzbl %al,%edx
f0125980:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125986:	01 d0                	add    %edx,%eax
f0125988:	48                   	dec    %eax
f0125989:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012598f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125995:	ba 00 00 00 00       	mov    $0x0,%edx
f012599a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01259a0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01259a6:	29 d0                	sub    %edx,%eax
f01259a8:	89 c3                	mov    %eax,%ebx
f01259aa:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01259b1:	10 00 00 
f01259b4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01259b9:	0f b6 c0             	movzbl %al,%eax
f01259bc:	c1 e0 04             	shl    $0x4,%eax
f01259bf:	89 c2                	mov    %eax,%edx
f01259c1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01259c7:	01 d0                	add    %edx,%eax
f01259c9:	48                   	dec    %eax
f01259ca:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01259d0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01259d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01259db:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01259e1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01259e7:	29 d0                	sub    %edx,%eax
f01259e9:	01 d8                	add    %ebx,%eax
f01259eb:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01259f0:	39 c1                	cmp    %eax,%ecx
f01259f2:	74 17                	je     f0125a0b <test_kfreeall+0xde0>
f01259f4:	83 ec 04             	sub    $0x4,%esp
f01259f7:	68 e0 8d 13 f0       	push   $0xf0138de0
f01259fc:	68 a1 0a 00 00       	push   $0xaa1
f0125a01:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125a06:	e8 a5 a7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a0b:	e8 a8 e8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125a10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125a13:	74 17                	je     f0125a2c <test_kfreeall+0xe01>
f0125a15:	83 ec 04             	sub    $0x4,%esp
f0125a18:	68 14 8d 13 f0       	push   $0xf0138d14
f0125a1d:	68 a2 0a 00 00       	push   $0xaa2
f0125a22:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125a27:	e8 84 a7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a2c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125a2f:	e8 de 6b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125a34:	29 c3                	sub    %eax,%ebx
f0125a36:	89 d8                	mov    %ebx,%eax
f0125a38:	83 f8 05             	cmp    $0x5,%eax
f0125a3b:	74 17                	je     f0125a54 <test_kfreeall+0xe29>
f0125a3d:	83 ec 04             	sub    $0x4,%esp
f0125a40:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125a45:	68 a3 0a 00 00       	push   $0xaa3
f0125a4a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125a4f:	e8 5c a7 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125a54:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125a5b:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125a5e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a64:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125a67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125a6e:	eb 0e                	jmp    f0125a7e <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125a70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125a73:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125a76:	01 d0                	add    %edx,%eax
f0125a78:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125a7b:	ff 45 f4             	incl   -0xc(%ebp)
f0125a7e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125a84:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125a87:	7f e7                	jg     f0125a70 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a89:	e8 84 6b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125a8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a91:	e8 22 e8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125a96:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125a99:	83 ec 0c             	sub    $0xc,%esp
f0125a9c:	68 00 00 10 00       	push   $0x100000
f0125aa1:	e8 ed 20 fe ff       	call   f0107b93 <kmalloc>
f0125aa6:	83 c4 10             	add    $0x10,%esp
f0125aa9:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125aaf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125ab5:	89 c1                	mov    %eax,%ecx
f0125ab7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125abe:	10 00 00 
f0125ac1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125ac6:	0f b6 d0             	movzbl %al,%edx
f0125ac9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125acf:	01 d0                	add    %edx,%eax
f0125ad1:	48                   	dec    %eax
f0125ad2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125ad8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125ade:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125ae9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125aef:	29 d0                	sub    %edx,%eax
f0125af1:	89 c3                	mov    %eax,%ebx
f0125af3:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125afa:	10 00 00 
f0125afd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125b02:	0f b6 c0             	movzbl %al,%eax
f0125b05:	c1 e0 04             	shl    $0x4,%eax
f0125b08:	89 c2                	mov    %eax,%edx
f0125b0a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125b10:	01 d0                	add    %edx,%eax
f0125b12:	48                   	dec    %eax
f0125b13:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125b19:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b24:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125b2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125b30:	29 d0                	sub    %edx,%eax
f0125b32:	01 d8                	add    %ebx,%eax
f0125b34:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125b39:	39 c1                	cmp    %eax,%ecx
f0125b3b:	74 17                	je     f0125b54 <test_kfreeall+0xf29>
f0125b3d:	83 ec 04             	sub    $0x4,%esp
f0125b40:	68 e0 8d 13 f0       	push   $0xf0138de0
f0125b45:	68 af 0a 00 00       	push   $0xaaf
f0125b4a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125b4f:	e8 5c a6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b54:	e8 5f e7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125b59:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125b5c:	74 17                	je     f0125b75 <test_kfreeall+0xf4a>
f0125b5e:	83 ec 04             	sub    $0x4,%esp
f0125b61:	68 14 8d 13 f0       	push   $0xf0138d14
f0125b66:	68 b0 0a 00 00       	push   $0xab0
f0125b6b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125b70:	e8 3b a6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b75:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125b78:	e8 95 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125b7d:	29 c3                	sub    %eax,%ebx
f0125b7f:	89 d8                	mov    %ebx,%eax
f0125b81:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125b86:	74 17                	je     f0125b9f <test_kfreeall+0xf74>
f0125b88:	83 ec 04             	sub    $0x4,%esp
f0125b8b:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125b90:	68 b1 0a 00 00       	push   $0xab1
f0125b95:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125b9a:	e8 11 a6 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125b9f:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125ba6:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125ba9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125baf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125bb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125bb9:	eb 0e                	jmp    f0125bc9 <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125bbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125bbe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125bc1:	01 d0                	add    %edx,%eax
f0125bc3:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125bc6:	ff 45 f4             	incl   -0xc(%ebp)
f0125bc9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125bcf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bd2:	7f e7                	jg     f0125bbb <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125bd4:	e8 39 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125bd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125bdc:	e8 d7 e6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125be1:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125be4:	e8 12 20 fe ff       	call   f0107bfb <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125be9:	e8 ca e6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125bee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125bf1:	74 17                	je     f0125c0a <test_kfreeall+0xfdf>
f0125bf3:	83 ec 04             	sub    $0x4,%esp
f0125bf6:	68 14 8d 13 f0       	push   $0xf0138d14
f0125bfb:	68 c1 0a 00 00       	push   $0xac1
f0125c00:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125c05:	e8 a6 a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c0a:	e8 03 6a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125c0f:	89 c2                	mov    %eax,%edx
f0125c11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125c14:	89 d1                	mov    %edx,%ecx
f0125c16:	29 c1                	sub    %eax,%ecx
f0125c18:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125c1f:	10 00 00 
f0125c22:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125c27:	0f b6 d0             	movzbl %al,%edx
f0125c2a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125c30:	01 d0                	add    %edx,%eax
f0125c32:	48                   	dec    %eax
f0125c33:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125c39:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125c3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c44:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125c4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125c50:	29 d0                	sub    %edx,%eax
f0125c52:	89 c3                	mov    %eax,%ebx
f0125c54:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125c5b:	10 00 00 
f0125c5e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0125c63:	0f b6 c0             	movzbl %al,%eax
f0125c66:	c1 e0 04             	shl    $0x4,%eax
f0125c69:	89 c2                	mov    %eax,%edx
f0125c6b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125c71:	01 d0                	add    %edx,%eax
f0125c73:	48                   	dec    %eax
f0125c74:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125c7a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125c80:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c85:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125c8b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125c91:	29 d0                	sub    %edx,%eax
f0125c93:	01 d8                	add    %ebx,%eax
f0125c95:	05 00 40 00 00       	add    $0x4000,%eax
f0125c9a:	c1 e8 0c             	shr    $0xc,%eax
f0125c9d:	05 0d 04 00 00       	add    $0x40d,%eax
f0125ca2:	39 c1                	cmp    %eax,%ecx
f0125ca4:	74 17                	je     f0125cbd <test_kfreeall+0x1092>
f0125ca6:	83 ec 04             	sub    $0x4,%esp
f0125ca9:	68 84 94 13 f0       	push   $0xf0139484
f0125cae:	68 c2 0a 00 00       	push   $0xac2
f0125cb3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125cb8:	e8 f3 a4 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0125cbd:	83 ec 0c             	sub    $0xc,%esp
f0125cc0:	6a 03                	push   $0x3
f0125cc2:	e8 e6 6d fe ff       	call   f010caad <sys_bypassPageFault>
f0125cc7:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0125cca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125cd1:	e9 82 00 00 00       	jmp    f0125d58 <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0125cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125cd9:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0125ce0:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0125ce3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ce6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0125ce9:	e8 ad 6d fe ff       	call   f010ca9b <sys_rcr2>
f0125cee:	89 c2                	mov    %eax,%edx
f0125cf0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125cf3:	39 c2                	cmp    %eax,%edx
f0125cf5:	74 17                	je     f0125d0e <test_kfreeall+0x10e3>
f0125cf7:	83 ec 04             	sub    $0x4,%esp
f0125cfa:	68 60 95 13 f0       	push   $0xf0139560
f0125cff:	68 d0 0a 00 00       	push   $0xad0
f0125d04:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125d09:	e8 a2 a4 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0125d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125d11:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0125d18:	89 c2                	mov    %eax,%edx
f0125d1a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d1d:	01 d0                	add    %edx,%eax
f0125d1f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0125d22:	e8 74 6d fe ff       	call   f010ca9b <sys_rcr2>
f0125d27:	89 c2                	mov    %eax,%edx
f0125d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0125d2c:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0125d33:	89 c1                	mov    %eax,%ecx
f0125d35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d38:	01 c8                	add    %ecx,%eax
f0125d3a:	39 c2                	cmp    %eax,%edx
f0125d3c:	74 17                	je     f0125d55 <test_kfreeall+0x112a>
f0125d3e:	83 ec 04             	sub    $0x4,%esp
f0125d41:	68 60 95 13 f0       	push   $0xf0139560
f0125d46:	68 d2 0a 00 00       	push   $0xad2
f0125d4b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125d50:	e8 5b a4 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0125d55:	ff 45 f4             	incl   -0xc(%ebp)
f0125d58:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0125d5c:	0f 8e 74 ff ff ff    	jle    f0125cd6 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0125d62:	83 ec 0c             	sub    $0xc,%esp
f0125d65:	6a 00                	push   $0x0
f0125d67:	e8 41 6d fe ff       	call   f010caad <sys_bypassPageFault>
f0125d6c:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d6f:	e8 9e 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125d74:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d77:	e8 3c e5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125d7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0125d7f:	83 ec 0c             	sub    $0xc,%esp
f0125d82:	68 00 00 40 00       	push   $0x400000
f0125d87:	e8 07 1e fe ff       	call   f0107b93 <kmalloc>
f0125d8c:	83 c4 10             	add    $0x10,%esp
f0125d8f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0125d95:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125d9b:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0125da0:	74 17                	je     f0125db9 <test_kfreeall+0x118e>
f0125da2:	83 ec 04             	sub    $0x4,%esp
f0125da5:	68 04 9a 13 f0       	push   $0xf0139a04
f0125daa:	68 de 0a 00 00       	push   $0xade
f0125daf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125db4:	e8 f7 a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125db9:	e8 fa e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125dbe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125dc1:	74 17                	je     f0125dda <test_kfreeall+0x11af>
f0125dc3:	83 ec 04             	sub    $0x4,%esp
f0125dc6:	68 14 8d 13 f0       	push   $0xf0138d14
f0125dcb:	68 df 0a 00 00       	push   $0xadf
f0125dd0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125dd5:	e8 d6 a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125dda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ddd:	e8 30 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125de2:	29 c3                	sub    %eax,%ebx
f0125de4:	89 d8                	mov    %ebx,%eax
f0125de6:	3d 00 04 00 00       	cmp    $0x400,%eax
f0125deb:	74 17                	je     f0125e04 <test_kfreeall+0x11d9>
f0125ded:	83 ec 04             	sub    $0x4,%esp
f0125df0:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125df5:	68 e0 0a 00 00       	push   $0xae0
f0125dfa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125dff:	e8 ac a3 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0125e04:	e8 09 68 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e0c:	e8 a7 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125e11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0125e14:	83 ec 0c             	sub    $0xc,%esp
f0125e17:	68 00 30 00 00       	push   $0x3000
f0125e1c:	e8 72 1d fe ff       	call   f0107b93 <kmalloc>
f0125e21:	83 c4 10             	add    $0x10,%esp
f0125e24:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0125e2a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125e30:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0125e35:	74 17                	je     f0125e4e <test_kfreeall+0x1223>
f0125e37:	83 ec 04             	sub    $0x4,%esp
f0125e3a:	68 04 9a 13 f0       	push   $0xf0139a04
f0125e3f:	68 e6 0a 00 00       	push   $0xae6
f0125e44:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125e49:	e8 62 a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e4e:	e8 65 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125e53:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e56:	74 17                	je     f0125e6f <test_kfreeall+0x1244>
f0125e58:	83 ec 04             	sub    $0x4,%esp
f0125e5b:	68 14 8d 13 f0       	push   $0xf0138d14
f0125e60:	68 e7 0a 00 00       	push   $0xae7
f0125e65:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125e6a:	e8 41 a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e6f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e72:	e8 9b 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e77:	29 c3                	sub    %eax,%ebx
f0125e79:	89 d8                	mov    %ebx,%eax
f0125e7b:	83 f8 03             	cmp    $0x3,%eax
f0125e7e:	74 17                	je     f0125e97 <test_kfreeall+0x126c>
f0125e80:	83 ec 04             	sub    $0x4,%esp
f0125e83:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0125e88:	68 e8 0a 00 00       	push   $0xae8
f0125e8d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125e92:	e8 19 a3 fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0125e97:	e8 76 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125e9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e9f:	e8 14 e4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125ea4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0125ea7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125ead:	83 ec 0c             	sub    $0xc,%esp
f0125eb0:	50                   	push   %eax
f0125eb1:	e8 f7 1c fe ff       	call   f0107bad <kfree>
f0125eb6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125eb9:	e8 fa e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125ebe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ec1:	74 17                	je     f0125eda <test_kfreeall+0x12af>
f0125ec3:	83 ec 04             	sub    $0x4,%esp
f0125ec6:	68 14 8d 13 f0       	push   $0xf0138d14
f0125ecb:	68 f2 0a 00 00       	push   $0xaf2
f0125ed0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125ed5:	e8 d6 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125eda:	e8 33 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125edf:	89 c2                	mov    %eax,%edx
f0125ee1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125ee4:	29 c2                	sub    %eax,%edx
f0125ee6:	89 d0                	mov    %edx,%eax
f0125ee8:	83 f8 03             	cmp    $0x3,%eax
f0125eeb:	74 17                	je     f0125f04 <test_kfreeall+0x12d9>
f0125eed:	83 ec 04             	sub    $0x4,%esp
f0125ef0:	68 ac 95 13 f0       	push   $0xf01395ac
f0125ef5:	68 f3 0a 00 00       	push   $0xaf3
f0125efa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125eff:	e8 ac a2 fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f04:	e8 09 67 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f0c:	e8 a7 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0125f14:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125f1a:	83 ec 0c             	sub    $0xc,%esp
f0125f1d:	50                   	push   %eax
f0125f1e:	e8 8a 1c fe ff       	call   f0107bad <kfree>
f0125f23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f26:	e8 8d e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f2b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f2e:	74 17                	je     f0125f47 <test_kfreeall+0x131c>
f0125f30:	83 ec 04             	sub    $0x4,%esp
f0125f33:	68 14 8d 13 f0       	push   $0xf0138d14
f0125f38:	68 fc 0a 00 00       	push   $0xafc
f0125f3d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125f42:	e8 69 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125f47:	e8 c6 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f4c:	89 c2                	mov    %eax,%edx
f0125f4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f51:	39 c2                	cmp    %eax,%edx
f0125f53:	74 17                	je     f0125f6c <test_kfreeall+0x1341>
f0125f55:	83 ec 04             	sub    $0x4,%esp
f0125f58:	68 ac 95 13 f0       	push   $0xf01395ac
f0125f5d:	68 fd 0a 00 00       	push   $0xafd
f0125f62:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125f67:	e8 44 a2 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f6c:	e8 a1 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125f71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f74:	e8 3f e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f79:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0125f7c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125f82:	83 ec 0c             	sub    $0xc,%esp
f0125f85:	50                   	push   %eax
f0125f86:	e8 22 1c fe ff       	call   f0107bad <kfree>
f0125f8b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f8e:	e8 25 e3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125f93:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f96:	74 17                	je     f0125faf <test_kfreeall+0x1384>
f0125f98:	83 ec 04             	sub    $0x4,%esp
f0125f9b:	68 14 8d 13 f0       	push   $0xf0138d14
f0125fa0:	68 03 0b 00 00       	push   $0xb03
f0125fa5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125faa:	e8 01 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0125faf:	e8 5e 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125fb4:	89 c2                	mov    %eax,%edx
f0125fb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125fb9:	39 c2                	cmp    %eax,%edx
f0125fbb:	74 17                	je     f0125fd4 <test_kfreeall+0x13a9>
f0125fbd:	83 ec 04             	sub    $0x4,%esp
f0125fc0:	68 ac 95 13 f0       	push   $0xf01395ac
f0125fc5:	68 04 0b 00 00       	push   $0xb04
f0125fca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0125fcf:	e8 dc a1 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125fd4:	e8 39 66 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0125fd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125fdc:	e8 d7 e2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125fe1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0125fe4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125fea:	83 ec 0c             	sub    $0xc,%esp
f0125fed:	50                   	push   %eax
f0125fee:	e8 ba 1b fe ff       	call   f0107bad <kfree>
f0125ff3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ff6:	e8 bd e2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0125ffb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ffe:	74 17                	je     f0126017 <test_kfreeall+0x13ec>
f0126000:	83 ec 04             	sub    $0x4,%esp
f0126003:	68 14 8d 13 f0       	push   $0xf0138d14
f0126008:	68 0a 0b 00 00       	push   $0xb0a
f012600d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126012:	e8 99 a1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126017:	e8 f6 65 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012601c:	89 c2                	mov    %eax,%edx
f012601e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126021:	39 c2                	cmp    %eax,%edx
f0126023:	74 17                	je     f012603c <test_kfreeall+0x1411>
f0126025:	83 ec 04             	sub    $0x4,%esp
f0126028:	68 ac 95 13 f0       	push   $0xf01395ac
f012602d:	68 0b 0b 00 00       	push   $0xb0b
f0126032:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126037:	e8 74 a1 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012603c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126043:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012604a:	eb 48                	jmp    f0126094 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012604c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012604f:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0126054:	83 ec 04             	sub    $0x4,%esp
f0126057:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f012605d:	51                   	push   %ecx
f012605e:	52                   	push   %edx
f012605f:	50                   	push   %eax
f0126060:	e8 b6 10 fe ff       	call   f010711b <get_page_table>
f0126065:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126068:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012606e:	85 c0                	test   %eax,%eax
f0126070:	75 17                	jne    f0126089 <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126072:	83 ec 04             	sub    $0x4,%esp
f0126075:	68 fc 95 13 f0       	push   $0xf01395fc
f012607a:	68 18 0b 00 00       	push   $0xb18
f012607f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126084:	e8 27 a1 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126089:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126090:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126094:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126098:	78 b2                	js     f012604c <test_kfreeall+0x1421>
f012609a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012609e:	7f 09                	jg     f01260a9 <test_kfreeall+0x147e>
f01260a0:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01260a7:	76 a3                	jbe    f012604c <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01260a9:	83 ec 0c             	sub    $0xc,%esp
f01260ac:	68 58 9a 13 f0       	push   $0xf0139a58
f01260b1:	e8 7b ad fd ff       	call   f0100e31 <cprintf>
f01260b6:	83 c4 10             	add    $0x10,%esp

	return 1;
f01260b9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01260be:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01260c1:	5b                   	pop    %ebx
f01260c2:	5f                   	pop    %edi
f01260c3:	5d                   	pop    %ebp
f01260c4:	c3                   	ret    

f01260c5 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01260c5:	55                   	push   %ebp
f01260c6:	89 e5                	mov    %esp,%ebp
f01260c8:	57                   	push   %edi
f01260c9:	53                   	push   %ebx
f01260ca:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f01260d0:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01260d4:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01260d8:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01260de:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01260e4:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01260eb:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01260f2:	e8 1b 65 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01260f7:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01260fa:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126100:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126105:	b8 00 00 00 00       	mov    $0x0,%eax
f012610a:	89 d7                	mov    %edx,%edi
f012610c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012610e:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126114:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126119:	b8 00 00 00 00       	mov    $0x0,%eax
f012611e:	89 d7                	mov    %edx,%edi
f0126120:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126122:	e8 eb 64 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126127:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012612a:	e8 89 e1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012612f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126132:	83 ec 0c             	sub    $0xc,%esp
f0126135:	68 00 fc 1f 00       	push   $0x1ffc00
f012613a:	e8 54 1a fe ff       	call   f0107b93 <kmalloc>
f012613f:	83 c4 10             	add    $0x10,%esp
f0126142:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126148:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012614e:	89 c1                	mov    %eax,%ecx
f0126150:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126157:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012615c:	0f b6 d0             	movzbl %al,%edx
f012615f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126162:	01 d0                	add    %edx,%eax
f0126164:	48                   	dec    %eax
f0126165:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126168:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012616b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126170:	f7 75 d4             	divl   -0x2c(%ebp)
f0126173:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126176:	29 d0                	sub    %edx,%eax
f0126178:	89 c3                	mov    %eax,%ebx
f012617a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126181:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126186:	0f b6 c0             	movzbl %al,%eax
f0126189:	c1 e0 04             	shl    $0x4,%eax
f012618c:	89 c2                	mov    %eax,%edx
f012618e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126191:	01 d0                	add    %edx,%eax
f0126193:	48                   	dec    %eax
f0126194:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126197:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012619a:	ba 00 00 00 00       	mov    $0x0,%edx
f012619f:	f7 75 cc             	divl   -0x34(%ebp)
f01261a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01261a5:	29 d0                	sub    %edx,%eax
f01261a7:	01 d8                	add    %ebx,%eax
f01261a9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01261ae:	39 c1                	cmp    %eax,%ecx
f01261b0:	74 17                	je     f01261c9 <test_kexpand+0x104>
f01261b2:	83 ec 04             	sub    $0x4,%esp
f01261b5:	68 e0 8d 13 f0       	push   $0xf0138de0
f01261ba:	68 43 0b 00 00       	push   $0xb43
f01261bf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01261c4:	e8 e7 9f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261c9:	e8 ea e0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01261ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01261d1:	74 17                	je     f01261ea <test_kexpand+0x125>
f01261d3:	83 ec 04             	sub    $0x4,%esp
f01261d6:	68 14 8d 13 f0       	push   $0xf0138d14
f01261db:	68 44 0b 00 00       	push   $0xb44
f01261e0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01261e5:	e8 c6 9f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01261ea:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01261ed:	e8 20 64 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01261f2:	29 c3                	sub    %eax,%ebx
f01261f4:	89 d8                	mov    %ebx,%eax
f01261f6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261fb:	74 17                	je     f0126214 <test_kexpand+0x14f>
f01261fd:	83 ec 04             	sub    $0x4,%esp
f0126200:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126205:	68 45 0b 00 00       	push   $0xb45
f012620a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012620f:	e8 9c 9f fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126214:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f012621b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012621e:	e8 ef 63 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126223:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126226:	e8 8d e0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012622b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012622e:	83 ec 0c             	sub    $0xc,%esp
f0126231:	68 00 fc 1f 00       	push   $0x1ffc00
f0126236:	e8 58 19 fe ff       	call   f0107b93 <kmalloc>
f012623b:	83 c4 10             	add    $0x10,%esp
f012623e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126244:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012624a:	89 c1                	mov    %eax,%ecx
f012624c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126253:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126258:	0f b6 d0             	movzbl %al,%edx
f012625b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012625e:	01 d0                	add    %edx,%eax
f0126260:	48                   	dec    %eax
f0126261:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126264:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126267:	ba 00 00 00 00       	mov    $0x0,%edx
f012626c:	f7 75 c4             	divl   -0x3c(%ebp)
f012626f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126272:	29 d0                	sub    %edx,%eax
f0126274:	89 c3                	mov    %eax,%ebx
f0126276:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012627d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126282:	0f b6 c0             	movzbl %al,%eax
f0126285:	c1 e0 04             	shl    $0x4,%eax
f0126288:	89 c2                	mov    %eax,%edx
f012628a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012628d:	01 d0                	add    %edx,%eax
f012628f:	48                   	dec    %eax
f0126290:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126293:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126296:	ba 00 00 00 00       	mov    $0x0,%edx
f012629b:	f7 75 bc             	divl   -0x44(%ebp)
f012629e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01262a1:	29 d0                	sub    %edx,%eax
f01262a3:	01 d8                	add    %ebx,%eax
f01262a5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01262aa:	39 c1                	cmp    %eax,%ecx
f01262ac:	74 17                	je     f01262c5 <test_kexpand+0x200>
f01262ae:	83 ec 04             	sub    $0x4,%esp
f01262b1:	68 e0 8d 13 f0       	push   $0xf0138de0
f01262b6:	68 4c 0b 00 00       	push   $0xb4c
f01262bb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01262c0:	e8 eb 9e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262c5:	e8 ee df fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01262ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01262cd:	74 17                	je     f01262e6 <test_kexpand+0x221>
f01262cf:	83 ec 04             	sub    $0x4,%esp
f01262d2:	68 14 8d 13 f0       	push   $0xf0138d14
f01262d7:	68 4d 0b 00 00       	push   $0xb4d
f01262dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01262e1:	e8 ca 9e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01262e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01262e9:	e8 24 63 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01262ee:	29 c3                	sub    %eax,%ebx
f01262f0:	89 d8                	mov    %ebx,%eax
f01262f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01262f7:	74 17                	je     f0126310 <test_kexpand+0x24b>
f01262f9:	83 ec 04             	sub    $0x4,%esp
f01262fc:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126301:	68 4e 0b 00 00       	push   $0xb4e
f0126306:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012630b:	e8 a0 9e fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126310:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126317:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012631a:	e8 f3 62 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012631f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126322:	e8 91 df fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126327:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012632a:	83 ec 0c             	sub    $0xc,%esp
f012632d:	68 00 08 00 00       	push   $0x800
f0126332:	e8 5c 18 fe ff       	call   f0107b93 <kmalloc>
f0126337:	83 c4 10             	add    $0x10,%esp
f012633a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126340:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126346:	89 c1                	mov    %eax,%ecx
f0126348:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012634f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126354:	0f b6 d0             	movzbl %al,%edx
f0126357:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012635a:	01 d0                	add    %edx,%eax
f012635c:	48                   	dec    %eax
f012635d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126360:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126363:	ba 00 00 00 00       	mov    $0x0,%edx
f0126368:	f7 75 b4             	divl   -0x4c(%ebp)
f012636b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012636e:	29 d0                	sub    %edx,%eax
f0126370:	89 c3                	mov    %eax,%ebx
f0126372:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126379:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012637e:	0f b6 c0             	movzbl %al,%eax
f0126381:	c1 e0 04             	shl    $0x4,%eax
f0126384:	89 c2                	mov    %eax,%edx
f0126386:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126389:	01 d0                	add    %edx,%eax
f012638b:	48                   	dec    %eax
f012638c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012638f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126392:	ba 00 00 00 00       	mov    $0x0,%edx
f0126397:	f7 75 ac             	divl   -0x54(%ebp)
f012639a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012639d:	29 d0                	sub    %edx,%eax
f012639f:	01 d8                	add    %ebx,%eax
f01263a1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01263a6:	39 c1                	cmp    %eax,%ecx
f01263a8:	74 17                	je     f01263c1 <test_kexpand+0x2fc>
f01263aa:	83 ec 04             	sub    $0x4,%esp
f01263ad:	68 e0 8d 13 f0       	push   $0xf0138de0
f01263b2:	68 55 0b 00 00       	push   $0xb55
f01263b7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01263bc:	e8 ef 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01263c1:	e8 f2 de fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01263c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01263c9:	74 17                	je     f01263e2 <test_kexpand+0x31d>
f01263cb:	83 ec 04             	sub    $0x4,%esp
f01263ce:	68 14 8d 13 f0       	push   $0xf0138d14
f01263d3:	68 56 0b 00 00       	push   $0xb56
f01263d8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01263dd:	e8 ce 9d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01263e2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01263e5:	e8 28 62 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01263ea:	29 c3                	sub    %eax,%ebx
f01263ec:	89 d8                	mov    %ebx,%eax
f01263ee:	83 f8 01             	cmp    $0x1,%eax
f01263f1:	74 17                	je     f012640a <test_kexpand+0x345>
f01263f3:	83 ec 04             	sub    $0x4,%esp
f01263f6:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01263fb:	68 57 0b 00 00       	push   $0xb57
f0126400:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126405:	e8 a6 9d fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012640a:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126411:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126414:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012641a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012641d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126424:	eb 0e                	jmp    f0126434 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126426:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126429:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012642c:	01 d0                	add    %edx,%eax
f012642e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126431:	ff 45 f4             	incl   -0xc(%ebp)
f0126434:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012643a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012643d:	7f e7                	jg     f0126426 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012643f:	e8 ce 61 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126444:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126447:	e8 6c de fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012644c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012644f:	83 ec 0c             	sub    $0xc,%esp
f0126452:	68 00 08 00 00       	push   $0x800
f0126457:	e8 37 17 fe ff       	call   f0107b93 <kmalloc>
f012645c:	83 c4 10             	add    $0x10,%esp
f012645f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126465:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012646b:	89 c1                	mov    %eax,%ecx
f012646d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126474:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126479:	0f b6 d0             	movzbl %al,%edx
f012647c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012647f:	01 d0                	add    %edx,%eax
f0126481:	48                   	dec    %eax
f0126482:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126485:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126488:	ba 00 00 00 00       	mov    $0x0,%edx
f012648d:	f7 75 a0             	divl   -0x60(%ebp)
f0126490:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126493:	29 d0                	sub    %edx,%eax
f0126495:	89 c3                	mov    %eax,%ebx
f0126497:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012649e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01264a3:	0f b6 c0             	movzbl %al,%eax
f01264a6:	c1 e0 04             	shl    $0x4,%eax
f01264a9:	89 c2                	mov    %eax,%edx
f01264ab:	8b 45 98             	mov    -0x68(%ebp),%eax
f01264ae:	01 d0                	add    %edx,%eax
f01264b0:	48                   	dec    %eax
f01264b1:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01264b4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01264b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01264bc:	f7 75 98             	divl   -0x68(%ebp)
f01264bf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01264c2:	29 d0                	sub    %edx,%eax
f01264c4:	01 d8                	add    %ebx,%eax
f01264c6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01264cb:	39 c1                	cmp    %eax,%ecx
f01264cd:	74 17                	je     f01264e6 <test_kexpand+0x421>
f01264cf:	83 ec 04             	sub    $0x4,%esp
f01264d2:	68 e0 8d 13 f0       	push   $0xf0138de0
f01264d7:	68 63 0b 00 00       	push   $0xb63
f01264dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01264e1:	e8 ca 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264e6:	e8 cd dd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01264eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01264ee:	74 17                	je     f0126507 <test_kexpand+0x442>
f01264f0:	83 ec 04             	sub    $0x4,%esp
f01264f3:	68 14 8d 13 f0       	push   $0xf0138d14
f01264f8:	68 64 0b 00 00       	push   $0xb64
f01264fd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126502:	e8 a9 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126507:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012650a:	e8 03 61 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012650f:	29 c3                	sub    %eax,%ebx
f0126511:	89 d8                	mov    %ebx,%eax
f0126513:	83 f8 01             	cmp    $0x1,%eax
f0126516:	74 17                	je     f012652f <test_kexpand+0x46a>
f0126518:	83 ec 04             	sub    $0x4,%esp
f012651b:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126520:	68 65 0b 00 00       	push   $0xb65
f0126525:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012652a:	e8 81 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012652f:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126536:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126539:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012653f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126542:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126549:	eb 0e                	jmp    f0126559 <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f012654b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012654e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126551:	01 d0                	add    %edx,%eax
f0126553:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126556:	ff 45 f4             	incl   -0xc(%ebp)
f0126559:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012655f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126562:	7f e7                	jg     f012654b <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126564:	e8 a9 60 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126569:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012656c:	e8 47 dd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126571:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126574:	83 ec 0c             	sub    $0xc,%esp
f0126577:	68 00 1c 00 00       	push   $0x1c00
f012657c:	e8 12 16 fe ff       	call   f0107b93 <kmalloc>
f0126581:	83 c4 10             	add    $0x10,%esp
f0126584:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012658a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126590:	89 c1                	mov    %eax,%ecx
f0126592:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126599:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012659e:	0f b6 d0             	movzbl %al,%edx
f01265a1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01265a4:	01 d0                	add    %edx,%eax
f01265a6:	48                   	dec    %eax
f01265a7:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01265aa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01265ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01265b2:	f7 75 90             	divl   -0x70(%ebp)
f01265b5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01265b8:	29 d0                	sub    %edx,%eax
f01265ba:	89 c3                	mov    %eax,%ebx
f01265bc:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01265c3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01265c8:	0f b6 c0             	movzbl %al,%eax
f01265cb:	c1 e0 04             	shl    $0x4,%eax
f01265ce:	89 c2                	mov    %eax,%edx
f01265d0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01265d3:	01 d0                	add    %edx,%eax
f01265d5:	48                   	dec    %eax
f01265d6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01265d9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01265dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01265e1:	f7 75 88             	divl   -0x78(%ebp)
f01265e4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01265e7:	29 d0                	sub    %edx,%eax
f01265e9:	01 d8                	add    %ebx,%eax
f01265eb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01265f0:	39 c1                	cmp    %eax,%ecx
f01265f2:	74 17                	je     f012660b <test_kexpand+0x546>
f01265f4:	83 ec 04             	sub    $0x4,%esp
f01265f7:	68 e0 8d 13 f0       	push   $0xf0138de0
f01265fc:	68 71 0b 00 00       	push   $0xb71
f0126601:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126606:	e8 a5 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012660b:	e8 a8 dc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126610:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126613:	74 17                	je     f012662c <test_kexpand+0x567>
f0126615:	83 ec 04             	sub    $0x4,%esp
f0126618:	68 14 8d 13 f0       	push   $0xf0138d14
f012661d:	68 72 0b 00 00       	push   $0xb72
f0126622:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126627:	e8 84 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012662c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012662f:	e8 de 5f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126634:	29 c3                	sub    %eax,%ebx
f0126636:	89 d8                	mov    %ebx,%eax
f0126638:	83 f8 02             	cmp    $0x2,%eax
f012663b:	74 17                	je     f0126654 <test_kexpand+0x58f>
f012663d:	83 ec 04             	sub    $0x4,%esp
f0126640:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126645:	68 73 0b 00 00       	push   $0xb73
f012664a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012664f:	e8 5c 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126654:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f012665b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012665e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126664:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126667:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012666e:	eb 0e                	jmp    f012667e <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126670:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126673:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126676:	01 d0                	add    %edx,%eax
f0126678:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012667b:	ff 45 f4             	incl   -0xc(%ebp)
f012667e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126684:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126687:	7f e7                	jg     f0126670 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126689:	e8 84 5f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012668e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126691:	e8 22 dc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126696:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126699:	83 ec 0c             	sub    $0xc,%esp
f012669c:	68 00 fc 2f 00       	push   $0x2ffc00
f01266a1:	e8 ed 14 fe ff       	call   f0107b93 <kmalloc>
f01266a6:	83 c4 10             	add    $0x10,%esp
f01266a9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266af:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01266b5:	89 c1                	mov    %eax,%ecx
f01266b7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01266be:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01266c3:	0f b6 d0             	movzbl %al,%edx
f01266c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01266c9:	01 d0                	add    %edx,%eax
f01266cb:	48                   	dec    %eax
f01266cc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01266d2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01266d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01266dd:	f7 75 80             	divl   -0x80(%ebp)
f01266e0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01266e6:	29 d0                	sub    %edx,%eax
f01266e8:	89 c3                	mov    %eax,%ebx
f01266ea:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01266f1:	10 00 00 
f01266f4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01266f9:	0f b6 c0             	movzbl %al,%eax
f01266fc:	c1 e0 04             	shl    $0x4,%eax
f01266ff:	89 c2                	mov    %eax,%edx
f0126701:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126707:	01 d0                	add    %edx,%eax
f0126709:	48                   	dec    %eax
f012670a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126710:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126716:	ba 00 00 00 00       	mov    $0x0,%edx
f012671b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126721:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126727:	29 d0                	sub    %edx,%eax
f0126729:	01 d8                	add    %ebx,%eax
f012672b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126730:	39 c1                	cmp    %eax,%ecx
f0126732:	74 17                	je     f012674b <test_kexpand+0x686>
f0126734:	83 ec 04             	sub    $0x4,%esp
f0126737:	68 e0 8d 13 f0       	push   $0xf0138de0
f012673c:	68 7f 0b 00 00       	push   $0xb7f
f0126741:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126746:	e8 65 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012674b:	e8 68 db fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126750:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126753:	74 17                	je     f012676c <test_kexpand+0x6a7>
f0126755:	83 ec 04             	sub    $0x4,%esp
f0126758:	68 14 8d 13 f0       	push   $0xf0138d14
f012675d:	68 80 0b 00 00       	push   $0xb80
f0126762:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126767:	e8 44 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012676c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012676f:	e8 9e 5e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126774:	29 c3                	sub    %eax,%ebx
f0126776:	89 d8                	mov    %ebx,%eax
f0126778:	3d 00 03 00 00       	cmp    $0x300,%eax
f012677d:	74 17                	je     f0126796 <test_kexpand+0x6d1>
f012677f:	83 ec 04             	sub    $0x4,%esp
f0126782:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126787:	68 81 0b 00 00       	push   $0xb81
f012678c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126791:	e8 1a 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126796:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f012679d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01267a0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01267a6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01267a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267b0:	eb 0e                	jmp    f01267c0 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f01267b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01267b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01267b8:	01 d0                	add    %edx,%eax
f01267ba:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01267bd:	ff 45 f4             	incl   -0xc(%ebp)
f01267c0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01267c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267c9:	7f e7                	jg     f01267b2 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01267cb:	e8 42 5e fe ff       	call   f010c612 <sys_calculate_free_frames>
f01267d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267d3:	e8 e0 da fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01267d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01267db:	83 ec 0c             	sub    $0xc,%esp
f01267de:	68 00 00 60 00       	push   $0x600000
f01267e3:	e8 ab 13 fe ff       	call   f0107b93 <kmalloc>
f01267e8:	83 c4 10             	add    $0x10,%esp
f01267eb:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267f1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01267f7:	89 c1                	mov    %eax,%ecx
f01267f9:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126800:	10 00 00 
f0126803:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126808:	0f b6 d0             	movzbl %al,%edx
f012680b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126811:	01 d0                	add    %edx,%eax
f0126813:	48                   	dec    %eax
f0126814:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012681a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126820:	ba 00 00 00 00       	mov    $0x0,%edx
f0126825:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012682b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126831:	29 d0                	sub    %edx,%eax
f0126833:	89 c3                	mov    %eax,%ebx
f0126835:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012683c:	10 00 00 
f012683f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126844:	0f b6 c0             	movzbl %al,%eax
f0126847:	c1 e0 04             	shl    $0x4,%eax
f012684a:	89 c2                	mov    %eax,%edx
f012684c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126852:	01 d0                	add    %edx,%eax
f0126854:	48                   	dec    %eax
f0126855:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012685b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126861:	ba 00 00 00 00       	mov    $0x0,%edx
f0126866:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012686c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126872:	29 d0                	sub    %edx,%eax
f0126874:	01 d8                	add    %ebx,%eax
f0126876:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012687b:	39 c1                	cmp    %eax,%ecx
f012687d:	74 17                	je     f0126896 <test_kexpand+0x7d1>
f012687f:	83 ec 04             	sub    $0x4,%esp
f0126882:	68 e0 8d 13 f0       	push   $0xf0138de0
f0126887:	68 8d 0b 00 00       	push   $0xb8d
f012688c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126891:	e8 1a 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126896:	e8 1d da fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012689b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012689e:	74 17                	je     f01268b7 <test_kexpand+0x7f2>
f01268a0:	83 ec 04             	sub    $0x4,%esp
f01268a3:	68 14 8d 13 f0       	push   $0xf0138d14
f01268a8:	68 8e 0b 00 00       	push   $0xb8e
f01268ad:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01268b2:	e8 f9 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268b7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01268ba:	e8 53 5d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01268bf:	29 c3                	sub    %eax,%ebx
f01268c1:	89 d8                	mov    %ebx,%eax
f01268c3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01268c8:	74 17                	je     f01268e1 <test_kexpand+0x81c>
f01268ca:	83 ec 04             	sub    $0x4,%esp
f01268cd:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01268d2:	68 8f 0b 00 00       	push   $0xb8f
f01268d7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01268dc:	e8 cf 98 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01268e1:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f01268e8:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01268eb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01268f1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01268f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268fe:	eb 1a                	jmp    f012691a <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126900:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126903:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012690a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126910:	01 c2                	add    %eax,%edx
f0126912:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126915:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126917:	ff 45 f4             	incl   -0xc(%ebp)
f012691a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126920:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126923:	7d db                	jge    f0126900 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126925:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f012692c:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f012692f:	e8 de 5c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126934:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126937:	e8 7c d9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012693c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f012693f:	83 ec 0c             	sub    $0xc,%esp
f0126942:	68 00 00 70 00       	push   $0x700000
f0126947:	e8 e3 12 fe ff       	call   f0107c2f <kexpand>
f012694c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012694f:	e8 64 d9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126954:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126957:	74 19                	je     f0126972 <test_kexpand+0x8ad>
f0126959:	68 94 9a 13 f0       	push   $0xf0139a94
f012695e:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0126963:	68 a0 0b 00 00       	push   $0xba0
f0126968:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012696d:	e8 3e 98 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126972:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126975:	e8 98 5c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012697a:	29 c3                	sub    %eax,%ebx
f012697c:	89 d8                	mov    %ebx,%eax
f012697e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126983:	74 19                	je     f012699e <test_kexpand+0x8d9>
f0126985:	68 dc 9a 13 f0       	push   $0xf0139adc
f012698a:	68 c5 9a 13 f0       	push   $0xf0139ac5
f012698f:	68 a1 0b 00 00       	push   $0xba1
f0126994:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126999:	e8 12 98 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012699e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01269a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01269a7:	eb 1a                	jmp    f01269c3 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f01269a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01269b3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01269b9:	01 c2                	add    %eax,%edx
f01269bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269be:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01269c0:	ff 45 f4             	incl   -0xc(%ebp)
f01269c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269c6:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01269cc:	7c db                	jl     f01269a9 <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01269ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269d5:	eb 37                	jmp    f0126a0e <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f01269d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01269e1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01269e7:	01 d0                	add    %edx,%eax
f01269e9:	8b 10                	mov    (%eax),%edx
f01269eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01269ee:	39 c2                	cmp    %eax,%edx
f01269f0:	74 19                	je     f0126a0b <test_kexpand+0x946>
f01269f2:	68 0c 9b 13 f0       	push   $0xf0139b0c
f01269f7:	68 c5 9a 13 f0       	push   $0xf0139ac5
f01269fc:	68 ad 0b 00 00       	push   $0xbad
f0126a01:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126a06:	e8 a5 97 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126a0b:	ff 45 f4             	incl   -0xc(%ebp)
f0126a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126a11:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126a17:	7c be                	jl     f01269d7 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126a19:	e8 f4 5b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126a1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a21:	e8 92 d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126a26:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126a29:	83 ec 0c             	sub    $0xc,%esp
f0126a2c:	68 00 00 a0 00       	push   $0xa00000
f0126a31:	e8 f9 11 fe ff       	call   f0107c2f <kexpand>
f0126a36:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126a39:	e8 7a d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126a3e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126a41:	74 19                	je     f0126a5c <test_kexpand+0x997>
f0126a43:	68 94 9a 13 f0       	push   $0xf0139a94
f0126a48:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0126a4d:	68 b8 0b 00 00       	push   $0xbb8
f0126a52:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126a57:	e8 54 97 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126a5c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126a5f:	e8 ae 5b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126a64:	29 c3                	sub    %eax,%ebx
f0126a66:	89 d8                	mov    %ebx,%eax
f0126a68:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126a6d:	74 19                	je     f0126a88 <test_kexpand+0x9c3>
f0126a6f:	68 18 9b 13 f0       	push   $0xf0139b18
f0126a74:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0126a79:	68 b9 0b 00 00       	push   $0xbb9
f0126a7e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126a83:	e8 28 97 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a88:	e8 85 5b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126a8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a90:	e8 23 d8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126a95:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126a98:	83 ec 0c             	sub    $0xc,%esp
f0126a9b:	68 00 00 40 00       	push   $0x400000
f0126aa0:	e8 ee 10 fe ff       	call   f0107b93 <kmalloc>
f0126aa5:	83 c4 10             	add    $0x10,%esp
f0126aa8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126aae:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126ab4:	89 c1                	mov    %eax,%ecx
f0126ab6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126abd:	10 00 00 
f0126ac0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126ac5:	0f b6 d0             	movzbl %al,%edx
f0126ac8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126ace:	01 d0                	add    %edx,%eax
f0126ad0:	48                   	dec    %eax
f0126ad1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126ad7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126add:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ae2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126ae8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126aee:	29 d0                	sub    %edx,%eax
f0126af0:	89 c3                	mov    %eax,%ebx
f0126af2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126af9:	10 00 00 
f0126afc:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126b01:	0f b6 c0             	movzbl %al,%eax
f0126b04:	c1 e0 04             	shl    $0x4,%eax
f0126b07:	89 c2                	mov    %eax,%edx
f0126b09:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126b0f:	01 d0                	add    %edx,%eax
f0126b11:	48                   	dec    %eax
f0126b12:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126b18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126b1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b23:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126b29:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126b2f:	29 d0                	sub    %edx,%eax
f0126b31:	01 d8                	add    %ebx,%eax
f0126b33:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126b38:	39 c1                	cmp    %eax,%ecx
f0126b3a:	74 17                	je     f0126b53 <test_kexpand+0xa8e>
f0126b3c:	83 ec 04             	sub    $0x4,%esp
f0126b3f:	68 48 9b 13 f0       	push   $0xf0139b48
f0126b44:	68 c4 0b 00 00       	push   $0xbc4
f0126b49:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126b4e:	e8 5d 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b53:	e8 60 d7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126b58:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126b5b:	74 17                	je     f0126b74 <test_kexpand+0xaaf>
f0126b5d:	83 ec 04             	sub    $0x4,%esp
f0126b60:	68 14 8d 13 f0       	push   $0xf0138d14
f0126b65:	68 c5 0b 00 00       	push   $0xbc5
f0126b6a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126b6f:	e8 3c 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b74:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126b77:	e8 96 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126b7c:	29 c3                	sub    %eax,%ebx
f0126b7e:	89 d8                	mov    %ebx,%eax
f0126b80:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126b85:	74 17                	je     f0126b9e <test_kexpand+0xad9>
f0126b87:	83 ec 04             	sub    $0x4,%esp
f0126b8a:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126b8f:	68 c6 0b 00 00       	push   $0xbc6
f0126b94:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126b99:	e8 12 96 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126b9e:	e8 6f 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126ba3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ba6:	e8 0d d7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126bab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126bae:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126bb4:	83 ec 0c             	sub    $0xc,%esp
f0126bb7:	50                   	push   %eax
f0126bb8:	e8 f0 0f fe ff       	call   f0107bad <kfree>
f0126bbd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126bc0:	e8 f3 d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126bc5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126bc8:	74 17                	je     f0126be1 <test_kexpand+0xb1c>
f0126bca:	83 ec 04             	sub    $0x4,%esp
f0126bcd:	68 14 8d 13 f0       	push   $0xf0138d14
f0126bd2:	68 cf 0b 00 00       	push   $0xbcf
f0126bd7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126bdc:	e8 cf 95 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126be1:	e8 2c 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126be6:	89 c2                	mov    %eax,%edx
f0126be8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126beb:	29 c2                	sub    %eax,%edx
f0126bed:	89 d0                	mov    %edx,%eax
f0126bef:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126bf4:	74 17                	je     f0126c0d <test_kexpand+0xb48>
f0126bf6:	83 ec 04             	sub    $0x4,%esp
f0126bf9:	68 ac 95 13 f0       	push   $0xf01395ac
f0126bfe:	68 d0 0b 00 00       	push   $0xbd0
f0126c03:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126c08:	e8 a3 95 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126c0d:	e8 00 5a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126c12:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c15:	e8 9e d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126c1a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126c1d:	83 ec 0c             	sub    $0xc,%esp
f0126c20:	68 00 50 40 00       	push   $0x405000
f0126c25:	e8 05 10 fe ff       	call   f0107c2f <kexpand>
f0126c2a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126c2d:	e8 86 d6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126c32:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c35:	74 19                	je     f0126c50 <test_kexpand+0xb8b>
f0126c37:	68 94 9a 13 f0       	push   $0xf0139a94
f0126c3c:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0126c41:	68 da 0b 00 00       	push   $0xbda
f0126c46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126c4b:	e8 60 95 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126c50:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c53:	e8 ba 59 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126c58:	29 c3                	sub    %eax,%ebx
f0126c5a:	89 d8                	mov    %ebx,%eax
f0126c5c:	83 f8 05             	cmp    $0x5,%eax
f0126c5f:	74 19                	je     f0126c7a <test_kexpand+0xbb5>
f0126c61:	68 70 9b 13 f0       	push   $0xf0139b70
f0126c66:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0126c6b:	68 db 0b 00 00       	push   $0xbdb
f0126c70:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126c75:	e8 36 95 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126c7a:	83 ec 0c             	sub    $0xc,%esp
f0126c7d:	68 58 9a 13 f0       	push   $0xf0139a58
f0126c82:	e8 aa a1 fd ff       	call   f0100e31 <cprintf>
f0126c87:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126c8a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126c8f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126c92:	5b                   	pop    %ebx
f0126c93:	5f                   	pop    %edi
f0126c94:	5d                   	pop    %ebp
f0126c95:	c3                   	ret    

f0126c96 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0126c96:	55                   	push   %ebp
f0126c97:	89 e5                	mov    %esp,%ebp
f0126c99:	57                   	push   %edi
f0126c9a:	53                   	push   %ebx
f0126c9b:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0126ca1:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126ca5:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126ca9:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126caf:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126cb5:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126cbc:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126cc3:	e8 4a 59 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126cc8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126ccb:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0126cd1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126cd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0126cdb:	89 d7                	mov    %edx,%edi
f0126cdd:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126cdf:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0126ce5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126cea:	b8 00 00 00 00       	mov    $0x0,%eax
f0126cef:	89 d7                	mov    %edx,%edi
f0126cf1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cf3:	e8 1a 59 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126cf8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126cfb:	e8 b8 d5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126d00:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126d03:	83 ec 0c             	sub    $0xc,%esp
f0126d06:	68 00 fc 1f 00       	push   $0x1ffc00
f0126d0b:	e8 83 0e fe ff       	call   f0107b93 <kmalloc>
f0126d10:	83 c4 10             	add    $0x10,%esp
f0126d13:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d19:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126d1f:	89 c1                	mov    %eax,%ecx
f0126d21:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126d28:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126d2d:	0f b6 d0             	movzbl %al,%edx
f0126d30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126d33:	01 d0                	add    %edx,%eax
f0126d35:	48                   	dec    %eax
f0126d36:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126d39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d41:	f7 75 d4             	divl   -0x2c(%ebp)
f0126d44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d47:	29 d0                	sub    %edx,%eax
f0126d49:	89 c3                	mov    %eax,%ebx
f0126d4b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126d52:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126d57:	0f b6 c0             	movzbl %al,%eax
f0126d5a:	c1 e0 04             	shl    $0x4,%eax
f0126d5d:	89 c2                	mov    %eax,%edx
f0126d5f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126d62:	01 d0                	add    %edx,%eax
f0126d64:	48                   	dec    %eax
f0126d65:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126d68:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d70:	f7 75 cc             	divl   -0x34(%ebp)
f0126d73:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d76:	29 d0                	sub    %edx,%eax
f0126d78:	01 d8                	add    %ebx,%eax
f0126d7a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126d7f:	39 c1                	cmp    %eax,%ecx
f0126d81:	74 17                	je     f0126d9a <test_kshrink+0x104>
f0126d83:	83 ec 04             	sub    $0x4,%esp
f0126d86:	68 e0 8d 13 f0       	push   $0xf0138de0
f0126d8b:	68 01 0c 00 00       	push   $0xc01
f0126d90:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126d95:	e8 16 94 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d9a:	e8 19 d5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126d9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126da2:	74 17                	je     f0126dbb <test_kshrink+0x125>
f0126da4:	83 ec 04             	sub    $0x4,%esp
f0126da7:	68 14 8d 13 f0       	push   $0xf0138d14
f0126dac:	68 02 0c 00 00       	push   $0xc02
f0126db1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126db6:	e8 f5 93 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126dbb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126dbe:	e8 4f 58 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126dc3:	29 c3                	sub    %eax,%ebx
f0126dc5:	89 d8                	mov    %ebx,%eax
f0126dc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126dcc:	74 17                	je     f0126de5 <test_kshrink+0x14f>
f0126dce:	83 ec 04             	sub    $0x4,%esp
f0126dd1:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126dd6:	68 03 0c 00 00       	push   $0xc03
f0126ddb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126de0:	e8 cb 93 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126de5:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f0126dec:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126def:	e8 1e 58 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126df4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126df7:	e8 bc d4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126dfc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126dff:	83 ec 0c             	sub    $0xc,%esp
f0126e02:	68 00 fc 1f 00       	push   $0x1ffc00
f0126e07:	e8 87 0d fe ff       	call   f0107b93 <kmalloc>
f0126e0c:	83 c4 10             	add    $0x10,%esp
f0126e0f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e15:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0126e1b:	89 c1                	mov    %eax,%ecx
f0126e1d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126e24:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126e29:	0f b6 d0             	movzbl %al,%edx
f0126e2c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126e2f:	01 d0                	add    %edx,%eax
f0126e31:	48                   	dec    %eax
f0126e32:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126e35:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126e38:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e3d:	f7 75 c4             	divl   -0x3c(%ebp)
f0126e40:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126e43:	29 d0                	sub    %edx,%eax
f0126e45:	89 c3                	mov    %eax,%ebx
f0126e47:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126e4e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126e53:	0f b6 c0             	movzbl %al,%eax
f0126e56:	c1 e0 04             	shl    $0x4,%eax
f0126e59:	89 c2                	mov    %eax,%edx
f0126e5b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e5e:	01 d0                	add    %edx,%eax
f0126e60:	48                   	dec    %eax
f0126e61:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126e64:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e67:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e6c:	f7 75 bc             	divl   -0x44(%ebp)
f0126e6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e72:	29 d0                	sub    %edx,%eax
f0126e74:	01 d8                	add    %ebx,%eax
f0126e76:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126e7b:	39 c1                	cmp    %eax,%ecx
f0126e7d:	74 17                	je     f0126e96 <test_kshrink+0x200>
f0126e7f:	83 ec 04             	sub    $0x4,%esp
f0126e82:	68 e0 8d 13 f0       	push   $0xf0138de0
f0126e87:	68 0a 0c 00 00       	push   $0xc0a
f0126e8c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126e91:	e8 1a 93 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e96:	e8 1d d4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126e9b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126e9e:	74 17                	je     f0126eb7 <test_kshrink+0x221>
f0126ea0:	83 ec 04             	sub    $0x4,%esp
f0126ea3:	68 14 8d 13 f0       	push   $0xf0138d14
f0126ea8:	68 0b 0c 00 00       	push   $0xc0b
f0126ead:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126eb2:	e8 f9 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126eb7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126eba:	e8 53 57 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126ebf:	29 c3                	sub    %eax,%ebx
f0126ec1:	89 d8                	mov    %ebx,%eax
f0126ec3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ec8:	74 17                	je     f0126ee1 <test_kshrink+0x24b>
f0126eca:	83 ec 04             	sub    $0x4,%esp
f0126ecd:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126ed2:	68 0c 0c 00 00       	push   $0xc0c
f0126ed7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126edc:	e8 cf 92 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126ee1:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f0126ee8:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126eeb:	e8 22 57 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126ef0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ef3:	e8 c0 d3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126ef8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126efb:	83 ec 0c             	sub    $0xc,%esp
f0126efe:	68 00 08 00 00       	push   $0x800
f0126f03:	e8 8b 0c fe ff       	call   f0107b93 <kmalloc>
f0126f08:	83 c4 10             	add    $0x10,%esp
f0126f0b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f11:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0126f17:	89 c1                	mov    %eax,%ecx
f0126f19:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126f20:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126f25:	0f b6 d0             	movzbl %al,%edx
f0126f28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126f2b:	01 d0                	add    %edx,%eax
f0126f2d:	48                   	dec    %eax
f0126f2e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126f31:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126f34:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f39:	f7 75 b4             	divl   -0x4c(%ebp)
f0126f3c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126f3f:	29 d0                	sub    %edx,%eax
f0126f41:	89 c3                	mov    %eax,%ebx
f0126f43:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126f4a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0126f4f:	0f b6 c0             	movzbl %al,%eax
f0126f52:	c1 e0 04             	shl    $0x4,%eax
f0126f55:	89 c2                	mov    %eax,%edx
f0126f57:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f5a:	01 d0                	add    %edx,%eax
f0126f5c:	48                   	dec    %eax
f0126f5d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126f60:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f68:	f7 75 ac             	divl   -0x54(%ebp)
f0126f6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f6e:	29 d0                	sub    %edx,%eax
f0126f70:	01 d8                	add    %ebx,%eax
f0126f72:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126f77:	39 c1                	cmp    %eax,%ecx
f0126f79:	74 17                	je     f0126f92 <test_kshrink+0x2fc>
f0126f7b:	83 ec 04             	sub    $0x4,%esp
f0126f7e:	68 e0 8d 13 f0       	push   $0xf0138de0
f0126f83:	68 13 0c 00 00       	push   $0xc13
f0126f88:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126f8d:	e8 1e 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f92:	e8 21 d3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0126f97:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f9a:	74 17                	je     f0126fb3 <test_kshrink+0x31d>
f0126f9c:	83 ec 04             	sub    $0x4,%esp
f0126f9f:	68 14 8d 13 f0       	push   $0xf0138d14
f0126fa4:	68 14 0c 00 00       	push   $0xc14
f0126fa9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126fae:	e8 fd 91 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fb3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126fb6:	e8 57 56 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0126fbb:	29 c3                	sub    %eax,%ebx
f0126fbd:	89 d8                	mov    %ebx,%eax
f0126fbf:	83 f8 01             	cmp    $0x1,%eax
f0126fc2:	74 17                	je     f0126fdb <test_kshrink+0x345>
f0126fc4:	83 ec 04             	sub    $0x4,%esp
f0126fc7:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0126fcc:	68 15 0c 00 00       	push   $0xc15
f0126fd1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0126fd6:	e8 d5 91 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126fdb:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0126fe2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126fe5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0126feb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126fee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ff5:	eb 0e                	jmp    f0127005 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0126ff7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ffa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ffd:	01 d0                	add    %edx,%eax
f0126fff:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127002:	ff 45 f4             	incl   -0xc(%ebp)
f0127005:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012700b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012700e:	7f e7                	jg     f0126ff7 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127010:	e8 fd 55 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127015:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127018:	e8 9b d2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012701d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127020:	83 ec 0c             	sub    $0xc,%esp
f0127023:	68 00 08 00 00       	push   $0x800
f0127028:	e8 66 0b fe ff       	call   f0107b93 <kmalloc>
f012702d:	83 c4 10             	add    $0x10,%esp
f0127030:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127036:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012703c:	89 c1                	mov    %eax,%ecx
f012703e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0127045:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012704a:	0f b6 d0             	movzbl %al,%edx
f012704d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127050:	01 d0                	add    %edx,%eax
f0127052:	48                   	dec    %eax
f0127053:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0127056:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127059:	ba 00 00 00 00       	mov    $0x0,%edx
f012705e:	f7 75 a0             	divl   -0x60(%ebp)
f0127061:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127064:	29 d0                	sub    %edx,%eax
f0127066:	89 c3                	mov    %eax,%ebx
f0127068:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012706f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127074:	0f b6 c0             	movzbl %al,%eax
f0127077:	c1 e0 04             	shl    $0x4,%eax
f012707a:	89 c2                	mov    %eax,%edx
f012707c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012707f:	01 d0                	add    %edx,%eax
f0127081:	48                   	dec    %eax
f0127082:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127085:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127088:	ba 00 00 00 00       	mov    $0x0,%edx
f012708d:	f7 75 98             	divl   -0x68(%ebp)
f0127090:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127093:	29 d0                	sub    %edx,%eax
f0127095:	01 d8                	add    %ebx,%eax
f0127097:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012709c:	39 c1                	cmp    %eax,%ecx
f012709e:	74 17                	je     f01270b7 <test_kshrink+0x421>
f01270a0:	83 ec 04             	sub    $0x4,%esp
f01270a3:	68 e0 8d 13 f0       	push   $0xf0138de0
f01270a8:	68 21 0c 00 00       	push   $0xc21
f01270ad:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01270b2:	e8 f9 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270b7:	e8 fc d1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01270bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01270bf:	74 17                	je     f01270d8 <test_kshrink+0x442>
f01270c1:	83 ec 04             	sub    $0x4,%esp
f01270c4:	68 14 8d 13 f0       	push   $0xf0138d14
f01270c9:	68 22 0c 00 00       	push   $0xc22
f01270ce:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01270d3:	e8 d8 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270d8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01270db:	e8 32 55 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01270e0:	29 c3                	sub    %eax,%ebx
f01270e2:	89 d8                	mov    %ebx,%eax
f01270e4:	83 f8 01             	cmp    $0x1,%eax
f01270e7:	74 17                	je     f0127100 <test_kshrink+0x46a>
f01270e9:	83 ec 04             	sub    $0x4,%esp
f01270ec:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01270f1:	68 23 0c 00 00       	push   $0xc23
f01270f6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01270fb:	e8 b0 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127100:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127107:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012710a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127110:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127113:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012711a:	eb 0e                	jmp    f012712a <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012711c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012711f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127122:	01 d0                	add    %edx,%eax
f0127124:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127127:	ff 45 f4             	incl   -0xc(%ebp)
f012712a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127130:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127133:	7f e7                	jg     f012711c <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127135:	e8 d8 54 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012713a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012713d:	e8 76 d1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127142:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127145:	83 ec 0c             	sub    $0xc,%esp
f0127148:	68 00 1c 00 00       	push   $0x1c00
f012714d:	e8 41 0a fe ff       	call   f0107b93 <kmalloc>
f0127152:	83 c4 10             	add    $0x10,%esp
f0127155:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012715b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127161:	89 c1                	mov    %eax,%ecx
f0127163:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012716a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012716f:	0f b6 d0             	movzbl %al,%edx
f0127172:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127175:	01 d0                	add    %edx,%eax
f0127177:	48                   	dec    %eax
f0127178:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012717b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012717e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127183:	f7 75 90             	divl   -0x70(%ebp)
f0127186:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127189:	29 d0                	sub    %edx,%eax
f012718b:	89 c3                	mov    %eax,%ebx
f012718d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127194:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127199:	0f b6 c0             	movzbl %al,%eax
f012719c:	c1 e0 04             	shl    $0x4,%eax
f012719f:	89 c2                	mov    %eax,%edx
f01271a1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01271a4:	01 d0                	add    %edx,%eax
f01271a6:	48                   	dec    %eax
f01271a7:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01271aa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01271ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01271b2:	f7 75 88             	divl   -0x78(%ebp)
f01271b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01271b8:	29 d0                	sub    %edx,%eax
f01271ba:	01 d8                	add    %ebx,%eax
f01271bc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01271c1:	39 c1                	cmp    %eax,%ecx
f01271c3:	74 17                	je     f01271dc <test_kshrink+0x546>
f01271c5:	83 ec 04             	sub    $0x4,%esp
f01271c8:	68 e0 8d 13 f0       	push   $0xf0138de0
f01271cd:	68 2f 0c 00 00       	push   $0xc2f
f01271d2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01271d7:	e8 d4 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271dc:	e8 d7 d0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01271e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271e4:	74 17                	je     f01271fd <test_kshrink+0x567>
f01271e6:	83 ec 04             	sub    $0x4,%esp
f01271e9:	68 14 8d 13 f0       	push   $0xf0138d14
f01271ee:	68 30 0c 00 00       	push   $0xc30
f01271f3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01271f8:	e8 b3 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271fd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127200:	e8 0d 54 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127205:	29 c3                	sub    %eax,%ebx
f0127207:	89 d8                	mov    %ebx,%eax
f0127209:	83 f8 02             	cmp    $0x2,%eax
f012720c:	74 17                	je     f0127225 <test_kshrink+0x58f>
f012720e:	83 ec 04             	sub    $0x4,%esp
f0127211:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127216:	68 31 0c 00 00       	push   $0xc31
f012721b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127220:	e8 8b 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127225:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f012722c:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012722f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127235:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012723f:	eb 0e                	jmp    f012724f <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f0127241:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127244:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127247:	01 d0                	add    %edx,%eax
f0127249:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012724c:	ff 45 f4             	incl   -0xc(%ebp)
f012724f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127255:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127258:	7f e7                	jg     f0127241 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012725a:	e8 b3 53 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012725f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127262:	e8 51 d0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127267:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012726a:	83 ec 0c             	sub    $0xc,%esp
f012726d:	68 00 fc 2f 00       	push   $0x2ffc00
f0127272:	e8 1c 09 fe ff       	call   f0107b93 <kmalloc>
f0127277:	83 c4 10             	add    $0x10,%esp
f012727a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127280:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127286:	89 c1                	mov    %eax,%ecx
f0127288:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012728f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127294:	0f b6 d0             	movzbl %al,%edx
f0127297:	8b 45 80             	mov    -0x80(%ebp),%eax
f012729a:	01 d0                	add    %edx,%eax
f012729c:	48                   	dec    %eax
f012729d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01272a3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01272a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ae:	f7 75 80             	divl   -0x80(%ebp)
f01272b1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01272b7:	29 d0                	sub    %edx,%eax
f01272b9:	89 c3                	mov    %eax,%ebx
f01272bb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01272c2:	10 00 00 
f01272c5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01272ca:	0f b6 c0             	movzbl %al,%eax
f01272cd:	c1 e0 04             	shl    $0x4,%eax
f01272d0:	89 c2                	mov    %eax,%edx
f01272d2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01272d8:	01 d0                	add    %edx,%eax
f01272da:	48                   	dec    %eax
f01272db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01272e1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01272e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ec:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01272f2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01272f8:	29 d0                	sub    %edx,%eax
f01272fa:	01 d8                	add    %ebx,%eax
f01272fc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127301:	39 c1                	cmp    %eax,%ecx
f0127303:	74 17                	je     f012731c <test_kshrink+0x686>
f0127305:	83 ec 04             	sub    $0x4,%esp
f0127308:	68 e0 8d 13 f0       	push   $0xf0138de0
f012730d:	68 3d 0c 00 00       	push   $0xc3d
f0127312:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127317:	e8 94 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012731c:	e8 97 cf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127321:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127324:	74 17                	je     f012733d <test_kshrink+0x6a7>
f0127326:	83 ec 04             	sub    $0x4,%esp
f0127329:	68 14 8d 13 f0       	push   $0xf0138d14
f012732e:	68 3e 0c 00 00       	push   $0xc3e
f0127333:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127338:	e8 73 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012733d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127340:	e8 cd 52 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127345:	29 c3                	sub    %eax,%ebx
f0127347:	89 d8                	mov    %ebx,%eax
f0127349:	3d 00 03 00 00       	cmp    $0x300,%eax
f012734e:	74 17                	je     f0127367 <test_kshrink+0x6d1>
f0127350:	83 ec 04             	sub    $0x4,%esp
f0127353:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127358:	68 3f 0c 00 00       	push   $0xc3f
f012735d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127362:	e8 49 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127367:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f012736e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127371:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127377:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012737a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127381:	eb 0e                	jmp    f0127391 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127383:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127386:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127389:	01 d0                	add    %edx,%eax
f012738b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012738e:	ff 45 f4             	incl   -0xc(%ebp)
f0127391:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0127397:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012739a:	7f e7                	jg     f0127383 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012739c:	e8 71 52 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01273a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273a4:	e8 0f cf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01273a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01273ac:	83 ec 0c             	sub    $0xc,%esp
f01273af:	68 00 00 60 00       	push   $0x600000
f01273b4:	e8 da 07 fe ff       	call   f0107b93 <kmalloc>
f01273b9:	83 c4 10             	add    $0x10,%esp
f01273bc:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273c2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01273c8:	89 c1                	mov    %eax,%ecx
f01273ca:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01273d1:	10 00 00 
f01273d4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01273d9:	0f b6 d0             	movzbl %al,%edx
f01273dc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01273e2:	01 d0                	add    %edx,%eax
f01273e4:	48                   	dec    %eax
f01273e5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01273eb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01273f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01273f6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01273fc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127402:	29 d0                	sub    %edx,%eax
f0127404:	89 c3                	mov    %eax,%ebx
f0127406:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012740d:	10 00 00 
f0127410:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127415:	0f b6 c0             	movzbl %al,%eax
f0127418:	c1 e0 04             	shl    $0x4,%eax
f012741b:	89 c2                	mov    %eax,%edx
f012741d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127423:	01 d0                	add    %edx,%eax
f0127425:	48                   	dec    %eax
f0127426:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012742c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127432:	ba 00 00 00 00       	mov    $0x0,%edx
f0127437:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012743d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127443:	29 d0                	sub    %edx,%eax
f0127445:	01 d8                	add    %ebx,%eax
f0127447:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012744c:	39 c1                	cmp    %eax,%ecx
f012744e:	74 17                	je     f0127467 <test_kshrink+0x7d1>
f0127450:	83 ec 04             	sub    $0x4,%esp
f0127453:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127458:	68 4b 0c 00 00       	push   $0xc4b
f012745d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127462:	e8 49 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127467:	e8 4c ce fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012746c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012746f:	74 17                	je     f0127488 <test_kshrink+0x7f2>
f0127471:	83 ec 04             	sub    $0x4,%esp
f0127474:	68 14 8d 13 f0       	push   $0xf0138d14
f0127479:	68 4c 0c 00 00       	push   $0xc4c
f012747e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127483:	e8 28 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127488:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012748b:	e8 82 51 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127490:	29 c3                	sub    %eax,%ebx
f0127492:	89 d8                	mov    %ebx,%eax
f0127494:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127499:	74 17                	je     f01274b2 <test_kshrink+0x81c>
f012749b:	83 ec 04             	sub    $0x4,%esp
f012749e:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01274a3:	68 4d 0c 00 00       	push   $0xc4d
f01274a8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01274ad:	e8 fe 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01274b2:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f01274b9:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01274bc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01274c2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01274c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01274cf:	eb 1a                	jmp    f01274eb <test_kshrink+0x855>
		{
			arr[i] = i ;
f01274d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01274d4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01274db:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01274e1:	01 c2                	add    %eax,%edx
f01274e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01274e6:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01274e8:	ff 45 f4             	incl   -0xc(%ebp)
f01274eb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01274f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274f4:	7d db                	jge    f01274d1 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01274f6:	e8 17 51 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01274fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274fe:	e8 b5 cd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127503:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127506:	83 ec 0c             	sub    $0xc,%esp
f0127509:	68 00 00 50 00       	push   $0x500000
f012750e:	e8 02 07 fe ff       	call   f0107c15 <kshrink>
f0127513:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127516:	e8 9d cd fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012751b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012751e:	74 19                	je     f0127539 <test_kshrink+0x8a3>
f0127520:	68 94 9a 13 f0       	push   $0xf0139a94
f0127525:	68 c5 9a 13 f0       	push   $0xf0139ac5
f012752a:	68 5d 0c 00 00       	push   $0xc5d
f012752f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127534:	e8 77 8c fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0127539:	e8 d4 50 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012753e:	89 c2                	mov    %eax,%edx
f0127540:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127543:	29 c2                	sub    %eax,%edx
f0127545:	89 d0                	mov    %edx,%eax
f0127547:	3d 00 01 00 00       	cmp    $0x100,%eax
f012754c:	74 19                	je     f0127567 <test_kshrink+0x8d1>
f012754e:	68 a0 9b 13 f0       	push   $0xf0139ba0
f0127553:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0127558:	68 5e 0c 00 00       	push   $0xc5e
f012755d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127562:	e8 49 8c fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127567:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f012756e:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127571:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127578:	eb 37                	jmp    f01275b1 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f012757a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012757d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127584:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012758a:	01 d0                	add    %edx,%eax
f012758c:	8b 10                	mov    (%eax),%edx
f012758e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127591:	39 c2                	cmp    %eax,%edx
f0127593:	74 19                	je     f01275ae <test_kshrink+0x918>
f0127595:	68 d0 9b 13 f0       	push   $0xf0139bd0
f012759a:	68 c5 9a 13 f0       	push   $0xf0139ac5
f012759f:	68 66 0c 00 00       	push   $0xc66
f01275a4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01275a9:	e8 02 8c fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01275ae:	ff 45 f4             	incl   -0xc(%ebp)
f01275b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01275b4:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01275ba:	7e be                	jle    f012757a <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01275bc:	83 ec 0c             	sub    $0xc,%esp
f01275bf:	6a 03                	push   $0x3
f01275c1:	e8 e7 54 fe ff       	call   f010caad <sys_bypassPageFault>
f01275c6:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01275c9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01275cf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f01275d2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275d5:	05 00 00 50 00       	add    $0x500000,%eax
f01275da:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01275dd:	e8 b9 54 fe ff       	call   f010ca9b <sys_rcr2>
f01275e2:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01275e5:	81 c2 00 00 50 00    	add    $0x500000,%edx
f01275eb:	39 d0                	cmp    %edx,%eax
f01275ed:	74 19                	je     f0127608 <test_kshrink+0x972>
f01275ef:	68 dc 9b 13 f0       	push   $0xf0139bdc
f01275f4:	68 c5 9a 13 f0       	push   $0xf0139ac5
f01275f9:	68 6f 0c 00 00       	push   $0xc6f
f01275fe:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127603:	e8 a8 8b fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0127608:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012760b:	05 00 10 50 00       	add    $0x501000,%eax
f0127610:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127613:	e8 83 54 fe ff       	call   f010ca9b <sys_rcr2>
f0127618:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f012761b:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0127621:	39 d0                	cmp    %edx,%eax
f0127623:	74 19                	je     f012763e <test_kshrink+0x9a8>
f0127625:	68 04 9c 13 f0       	push   $0xf0139c04
f012762a:	68 c5 9a 13 f0       	push   $0xf0139ac5
f012762f:	68 72 0c 00 00       	push   $0xc72
f0127634:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127639:	e8 72 8b fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f012763e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127641:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0127646:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0127649:	e8 4d 54 fe ff       	call   f010ca9b <sys_rcr2>
f012764e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127651:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0127657:	39 d0                	cmp    %edx,%eax
f0127659:	74 19                	je     f0127674 <test_kshrink+0x9de>
f012765b:	68 30 9c 13 f0       	push   $0xf0139c30
f0127660:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0127665:	68 75 0c 00 00       	push   $0xc75
f012766a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012766f:	e8 3c 8b fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127674:	83 ec 0c             	sub    $0xc,%esp
f0127677:	6a 00                	push   $0x0
f0127679:	e8 2f 54 fe ff       	call   f010caad <sys_bypassPageFault>
f012767e:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127681:	e8 8c 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127686:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127689:	e8 2a cc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012768e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127691:	83 ec 0c             	sub    $0xc,%esp
f0127694:	68 00 00 20 00       	push   $0x200000
f0127699:	e8 77 05 fe ff       	call   f0107c15 <kshrink>
f012769e:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01276a1:	e8 12 cc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01276a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276a9:	74 19                	je     f01276c4 <test_kshrink+0xa2e>
f01276ab:	68 94 9a 13 f0       	push   $0xf0139a94
f01276b0:	68 c5 9a 13 f0       	push   $0xf0139ac5
f01276b5:	68 82 0c 00 00       	push   $0xc82
f01276ba:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01276bf:	e8 ec 8a fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01276c4:	e8 49 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01276c9:	89 c2                	mov    %eax,%edx
f01276cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01276ce:	29 c2                	sub    %eax,%edx
f01276d0:	89 d0                	mov    %edx,%eax
f01276d2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01276d7:	74 19                	je     f01276f2 <test_kshrink+0xa5c>
f01276d9:	68 5c 9c 13 f0       	push   $0xf0139c5c
f01276de:	68 c5 9a 13 f0       	push   $0xf0139ac5
f01276e3:	68 83 0c 00 00       	push   $0xc83
f01276e8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01276ed:	e8 be 8a fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01276f2:	e8 1b 4f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01276f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276fa:	e8 b9 cb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01276ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127702:	83 ec 0c             	sub    $0xc,%esp
f0127705:	68 00 00 40 00       	push   $0x400000
f012770a:	e8 84 04 fe ff       	call   f0107b93 <kmalloc>
f012770f:	83 c4 10             	add    $0x10,%esp
f0127712:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127718:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012771f:	10 00 00 
f0127722:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127727:	0f b6 d0             	movzbl %al,%edx
f012772a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127730:	01 d0                	add    %edx,%eax
f0127732:	48                   	dec    %eax
f0127733:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127739:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012773f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127744:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012774a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127750:	29 d0                	sub    %edx,%eax
f0127752:	89 c1                	mov    %eax,%ecx
f0127754:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012775b:	10 00 00 
f012775e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127763:	0f b6 c0             	movzbl %al,%eax
f0127766:	c1 e0 04             	shl    $0x4,%eax
f0127769:	89 c2                	mov    %eax,%edx
f012776b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127771:	01 d0                	add    %edx,%eax
f0127773:	48                   	dec    %eax
f0127774:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012777a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127780:	ba 00 00 00 00       	mov    $0x0,%edx
f0127785:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012778b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127791:	29 d0                	sub    %edx,%eax
f0127793:	01 c8                	add    %ecx,%eax
f0127795:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f012779b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01277a1:	83 ec 04             	sub    $0x4,%esp
f01277a4:	52                   	push   %edx
f01277a5:	50                   	push   %eax
f01277a6:	68 8c 9c 13 f0       	push   $0xf0139c8c
f01277ab:	e8 81 96 fd ff       	call   f0100e31 <cprintf>
f01277b0:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f01277b3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01277b9:	89 c1                	mov    %eax,%ecx
f01277bb:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01277c2:	10 00 00 
f01277c5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01277ca:	0f b6 d0             	movzbl %al,%edx
f01277cd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01277d3:	01 d0                	add    %edx,%eax
f01277d5:	48                   	dec    %eax
f01277d6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01277dc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01277e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01277e7:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01277ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01277f3:	29 d0                	sub    %edx,%eax
f01277f5:	89 c3                	mov    %eax,%ebx
f01277f7:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01277fe:	10 00 00 
f0127801:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127806:	0f b6 c0             	movzbl %al,%eax
f0127809:	c1 e0 04             	shl    $0x4,%eax
f012780c:	89 c2                	mov    %eax,%edx
f012780e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127814:	01 d0                	add    %edx,%eax
f0127816:	48                   	dec    %eax
f0127817:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012781d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127823:	ba 00 00 00 00       	mov    $0x0,%edx
f0127828:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012782e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127834:	29 d0                	sub    %edx,%eax
f0127836:	01 d8                	add    %ebx,%eax
f0127838:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f012783d:	39 c1                	cmp    %eax,%ecx
f012783f:	74 17                	je     f0127858 <test_kshrink+0xbc2>
f0127841:	83 ec 04             	sub    $0x4,%esp
f0127844:	68 a8 9c 13 f0       	push   $0xf0139ca8
f0127849:	68 8e 0c 00 00       	push   $0xc8e
f012784e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127853:	e8 58 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127858:	e8 5b ca fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012785d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127860:	74 17                	je     f0127879 <test_kshrink+0xbe3>
f0127862:	83 ec 04             	sub    $0x4,%esp
f0127865:	68 14 8d 13 f0       	push   $0xf0138d14
f012786a:	68 8f 0c 00 00       	push   $0xc8f
f012786f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127874:	e8 37 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127879:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012787c:	e8 91 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127881:	29 c3                	sub    %eax,%ebx
f0127883:	89 d8                	mov    %ebx,%eax
f0127885:	3d 00 04 00 00       	cmp    $0x400,%eax
f012788a:	74 17                	je     f01278a3 <test_kshrink+0xc0d>
f012788c:	83 ec 04             	sub    $0x4,%esp
f012788f:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127894:	68 90 0c 00 00       	push   $0xc90
f0127899:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012789e:	e8 0d 89 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f01278a3:	e8 6a 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01278a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ab:	e8 08 ca fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01278b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01278b3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01278b9:	83 ec 0c             	sub    $0xc,%esp
f01278bc:	50                   	push   %eax
f01278bd:	e8 eb 02 fe ff       	call   f0107bad <kfree>
f01278c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278c5:	e8 ee c9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01278ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278cd:	74 17                	je     f01278e6 <test_kshrink+0xc50>
f01278cf:	83 ec 04             	sub    $0x4,%esp
f01278d2:	68 14 8d 13 f0       	push   $0xf0138d14
f01278d7:	68 9a 0c 00 00       	push   $0xc9a
f01278dc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01278e1:	e8 ca 88 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01278e6:	e8 27 4d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01278eb:	89 c2                	mov    %eax,%edx
f01278ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01278f0:	29 c2                	sub    %eax,%edx
f01278f2:	89 d0                	mov    %edx,%eax
f01278f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278f9:	74 17                	je     f0127912 <test_kshrink+0xc7c>
f01278fb:	83 ec 04             	sub    $0x4,%esp
f01278fe:	68 ac 95 13 f0       	push   $0xf01395ac
f0127903:	68 9b 0c 00 00       	push   $0xc9b
f0127908:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012790d:	e8 9e 88 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127912:	e8 fb 4c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127917:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012791a:	e8 99 c9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012791f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127922:	83 ec 0c             	sub    $0xc,%esp
f0127925:	68 00 b0 3f 00       	push   $0x3fb000
f012792a:	e8 e6 02 fe ff       	call   f0107c15 <kshrink>
f012792f:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127932:	e8 81 c9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127937:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012793a:	74 19                	je     f0127955 <test_kshrink+0xcbf>
f012793c:	68 94 9a 13 f0       	push   $0xf0139a94
f0127941:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0127946:	68 a5 0c 00 00       	push   $0xca5
f012794b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127950:	e8 5b 88 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127955:	e8 b8 4c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012795a:	89 c2                	mov    %eax,%edx
f012795c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012795f:	29 c2                	sub    %eax,%edx
f0127961:	89 d0                	mov    %edx,%eax
f0127963:	83 f8 05             	cmp    $0x5,%eax
f0127966:	74 19                	je     f0127981 <test_kshrink+0xceb>
f0127968:	68 fc 9c 13 f0       	push   $0xf0139cfc
f012796d:	68 c5 9a 13 f0       	push   $0xf0139ac5
f0127972:	68 a6 0c 00 00       	push   $0xca6
f0127977:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012797c:	e8 2f 88 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127981:	83 ec 0c             	sub    $0xc,%esp
f0127984:	68 58 9a 13 f0       	push   $0xf0139a58
f0127989:	e8 a3 94 fd ff       	call   f0100e31 <cprintf>
f012798e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127991:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127996:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127999:	5b                   	pop    %ebx
f012799a:	5f                   	pop    %edi
f012799b:	5d                   	pop    %ebp
f012799c:	c3                   	ret    

f012799d <test_kfreelast>:


int test_kfreelast()
{
f012799d:	55                   	push   %ebp
f012799e:	89 e5                	mov    %esp,%ebp
f01279a0:	57                   	push   %edi
f01279a1:	53                   	push   %ebx
f01279a2:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f01279a8:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f01279ac:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f01279b0:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f01279b6:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f01279bc:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01279c3:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01279ca:	e8 43 4c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01279cf:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01279d2:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f01279d8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01279dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01279e2:	89 d7                	mov    %edx,%edi
f01279e4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01279e6:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f01279ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f01279f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01279f6:	89 d7                	mov    %edx,%edi
f01279f8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01279fa:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127a00:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127a05:	b8 00 00 00 00       	mov    $0x0,%eax
f0127a0a:	89 d7                	mov    %edx,%edi
f0127a0c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a0e:	e8 ff 4b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127a13:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a16:	e8 9d c8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127a1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127a1e:	83 ec 0c             	sub    $0xc,%esp
f0127a21:	68 00 fc 1f 00       	push   $0x1ffc00
f0127a26:	e8 68 01 fe ff       	call   f0107b93 <kmalloc>
f0127a2b:	83 c4 10             	add    $0x10,%esp
f0127a2e:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a34:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127a3a:	89 c1                	mov    %eax,%ecx
f0127a3c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127a43:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127a48:	0f b6 d0             	movzbl %al,%edx
f0127a4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127a4e:	01 d0                	add    %edx,%eax
f0127a50:	48                   	dec    %eax
f0127a51:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127a54:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127a57:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a5c:	f7 75 cc             	divl   -0x34(%ebp)
f0127a5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127a62:	29 d0                	sub    %edx,%eax
f0127a64:	89 c3                	mov    %eax,%ebx
f0127a66:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127a6d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127a72:	0f b6 c0             	movzbl %al,%eax
f0127a75:	c1 e0 04             	shl    $0x4,%eax
f0127a78:	89 c2                	mov    %eax,%edx
f0127a7a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127a7d:	01 d0                	add    %edx,%eax
f0127a7f:	48                   	dec    %eax
f0127a80:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127a83:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a8b:	f7 75 c4             	divl   -0x3c(%ebp)
f0127a8e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127a91:	29 d0                	sub    %edx,%eax
f0127a93:	01 d8                	add    %ebx,%eax
f0127a95:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127a9a:	39 c1                	cmp    %eax,%ecx
f0127a9c:	74 17                	je     f0127ab5 <test_kfreelast+0x118>
f0127a9e:	83 ec 04             	sub    $0x4,%esp
f0127aa1:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127aa6:	68 ca 0c 00 00       	push   $0xcca
f0127aab:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127ab0:	e8 fb 86 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ab5:	e8 fe c7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127aba:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127abd:	74 17                	je     f0127ad6 <test_kfreelast+0x139>
f0127abf:	83 ec 04             	sub    $0x4,%esp
f0127ac2:	68 14 8d 13 f0       	push   $0xf0138d14
f0127ac7:	68 cb 0c 00 00       	push   $0xccb
f0127acc:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127ad1:	e8 da 86 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ad6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127ad9:	e8 34 4b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127ade:	29 c3                	sub    %eax,%ebx
f0127ae0:	89 d8                	mov    %ebx,%eax
f0127ae2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127ae7:	74 17                	je     f0127b00 <test_kfreelast+0x163>
f0127ae9:	83 ec 04             	sub    $0x4,%esp
f0127aec:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127af1:	68 cc 0c 00 00       	push   $0xccc
f0127af6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127afb:	e8 b0 86 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127b00:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127b07:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b0a:	e8 03 4b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127b0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b12:	e8 a1 c7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127b17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127b1a:	83 ec 0c             	sub    $0xc,%esp
f0127b1d:	68 00 fc 1f 00       	push   $0x1ffc00
f0127b22:	e8 6c 00 fe ff       	call   f0107b93 <kmalloc>
f0127b27:	83 c4 10             	add    $0x10,%esp
f0127b2a:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b30:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127b36:	89 c1                	mov    %eax,%ecx
f0127b38:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127b3f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127b44:	0f b6 d0             	movzbl %al,%edx
f0127b47:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127b4a:	01 d0                	add    %edx,%eax
f0127b4c:	48                   	dec    %eax
f0127b4d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b58:	f7 75 bc             	divl   -0x44(%ebp)
f0127b5b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127b5e:	29 d0                	sub    %edx,%eax
f0127b60:	89 c3                	mov    %eax,%ebx
f0127b62:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127b69:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127b6e:	0f b6 c0             	movzbl %al,%eax
f0127b71:	c1 e0 04             	shl    $0x4,%eax
f0127b74:	89 c2                	mov    %eax,%edx
f0127b76:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127b79:	01 d0                	add    %edx,%eax
f0127b7b:	48                   	dec    %eax
f0127b7c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127b7f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127b82:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b87:	f7 75 b4             	divl   -0x4c(%ebp)
f0127b8a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127b8d:	29 d0                	sub    %edx,%eax
f0127b8f:	01 d8                	add    %ebx,%eax
f0127b91:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127b96:	39 c1                	cmp    %eax,%ecx
f0127b98:	74 17                	je     f0127bb1 <test_kfreelast+0x214>
f0127b9a:	83 ec 04             	sub    $0x4,%esp
f0127b9d:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127ba2:	68 d3 0c 00 00       	push   $0xcd3
f0127ba7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127bac:	e8 ff 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bb1:	e8 02 c7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127bb6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127bb9:	74 17                	je     f0127bd2 <test_kfreelast+0x235>
f0127bbb:	83 ec 04             	sub    $0x4,%esp
f0127bbe:	68 14 8d 13 f0       	push   $0xf0138d14
f0127bc3:	68 d4 0c 00 00       	push   $0xcd4
f0127bc8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127bcd:	e8 de 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127bd2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127bd5:	e8 38 4a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127bda:	29 c3                	sub    %eax,%ebx
f0127bdc:	89 d8                	mov    %ebx,%eax
f0127bde:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127be3:	74 17                	je     f0127bfc <test_kfreelast+0x25f>
f0127be5:	83 ec 04             	sub    $0x4,%esp
f0127be8:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127bed:	68 d5 0c 00 00       	push   $0xcd5
f0127bf2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127bf7:	e8 b4 85 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127bfc:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127c03:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127c06:	e8 07 4a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127c0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c0e:	e8 a5 c6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127c13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127c16:	83 ec 0c             	sub    $0xc,%esp
f0127c19:	68 00 08 00 00       	push   $0x800
f0127c1e:	e8 70 ff fd ff       	call   f0107b93 <kmalloc>
f0127c23:	83 c4 10             	add    $0x10,%esp
f0127c26:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c2c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127c32:	89 c1                	mov    %eax,%ecx
f0127c34:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127c3b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127c40:	0f b6 d0             	movzbl %al,%edx
f0127c43:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127c46:	01 d0                	add    %edx,%eax
f0127c48:	48                   	dec    %eax
f0127c49:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127c4c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c54:	f7 75 ac             	divl   -0x54(%ebp)
f0127c57:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c5a:	29 d0                	sub    %edx,%eax
f0127c5c:	89 c3                	mov    %eax,%ebx
f0127c5e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127c65:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127c6a:	0f b6 c0             	movzbl %al,%eax
f0127c6d:	c1 e0 04             	shl    $0x4,%eax
f0127c70:	89 c2                	mov    %eax,%edx
f0127c72:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127c75:	01 d0                	add    %edx,%eax
f0127c77:	48                   	dec    %eax
f0127c78:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127c7b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c83:	f7 75 a4             	divl   -0x5c(%ebp)
f0127c86:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127c89:	29 d0                	sub    %edx,%eax
f0127c8b:	01 d8                	add    %ebx,%eax
f0127c8d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127c92:	39 c1                	cmp    %eax,%ecx
f0127c94:	74 17                	je     f0127cad <test_kfreelast+0x310>
f0127c96:	83 ec 04             	sub    $0x4,%esp
f0127c99:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127c9e:	68 dc 0c 00 00       	push   $0xcdc
f0127ca3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127ca8:	e8 03 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cad:	e8 06 c6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127cb2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127cb5:	74 17                	je     f0127cce <test_kfreelast+0x331>
f0127cb7:	83 ec 04             	sub    $0x4,%esp
f0127cba:	68 14 8d 13 f0       	push   $0xf0138d14
f0127cbf:	68 dd 0c 00 00       	push   $0xcdd
f0127cc4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127cc9:	e8 e2 84 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cce:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127cd1:	e8 3c 49 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127cd6:	29 c3                	sub    %eax,%ebx
f0127cd8:	89 d8                	mov    %ebx,%eax
f0127cda:	83 f8 01             	cmp    $0x1,%eax
f0127cdd:	74 17                	je     f0127cf6 <test_kfreelast+0x359>
f0127cdf:	83 ec 04             	sub    $0x4,%esp
f0127ce2:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127ce7:	68 de 0c 00 00       	push   $0xcde
f0127cec:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127cf1:	e8 ba 84 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127cf6:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0127cfd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127d00:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127d06:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127d09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d10:	eb 0e                	jmp    f0127d20 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0127d12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d15:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127d18:	01 d0                	add    %edx,%eax
f0127d1a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127d1d:	ff 45 f4             	incl   -0xc(%ebp)
f0127d20:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127d26:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d29:	7f e7                	jg     f0127d12 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d2b:	e8 e2 48 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127d30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d33:	e8 80 c5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127d38:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127d3b:	83 ec 0c             	sub    $0xc,%esp
f0127d3e:	68 00 08 00 00       	push   $0x800
f0127d43:	e8 4b fe fd ff       	call   f0107b93 <kmalloc>
f0127d48:	83 c4 10             	add    $0x10,%esp
f0127d4b:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d51:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127d57:	89 c1                	mov    %eax,%ecx
f0127d59:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127d60:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127d65:	0f b6 d0             	movzbl %al,%edx
f0127d68:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d6b:	01 d0                	add    %edx,%eax
f0127d6d:	48                   	dec    %eax
f0127d6e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127d71:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d74:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d79:	f7 75 98             	divl   -0x68(%ebp)
f0127d7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d7f:	29 d0                	sub    %edx,%eax
f0127d81:	89 c3                	mov    %eax,%ebx
f0127d83:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127d8a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127d8f:	0f b6 c0             	movzbl %al,%eax
f0127d92:	c1 e0 04             	shl    $0x4,%eax
f0127d95:	89 c2                	mov    %eax,%edx
f0127d97:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d9a:	01 d0                	add    %edx,%eax
f0127d9c:	48                   	dec    %eax
f0127d9d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127da0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127da8:	f7 75 90             	divl   -0x70(%ebp)
f0127dab:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127dae:	29 d0                	sub    %edx,%eax
f0127db0:	01 d8                	add    %ebx,%eax
f0127db2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127db7:	39 c1                	cmp    %eax,%ecx
f0127db9:	74 17                	je     f0127dd2 <test_kfreelast+0x435>
f0127dbb:	83 ec 04             	sub    $0x4,%esp
f0127dbe:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127dc3:	68 ea 0c 00 00       	push   $0xcea
f0127dc8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127dcd:	e8 de 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dd2:	e8 e1 c4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127dd7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127dda:	74 17                	je     f0127df3 <test_kfreelast+0x456>
f0127ddc:	83 ec 04             	sub    $0x4,%esp
f0127ddf:	68 14 8d 13 f0       	push   $0xf0138d14
f0127de4:	68 eb 0c 00 00       	push   $0xceb
f0127de9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127dee:	e8 bd 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127df3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127df6:	e8 17 48 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127dfb:	29 c3                	sub    %eax,%ebx
f0127dfd:	89 d8                	mov    %ebx,%eax
f0127dff:	83 f8 01             	cmp    $0x1,%eax
f0127e02:	74 17                	je     f0127e1b <test_kfreelast+0x47e>
f0127e04:	83 ec 04             	sub    $0x4,%esp
f0127e07:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127e0c:	68 ec 0c 00 00       	push   $0xcec
f0127e11:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127e16:	e8 95 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127e1b:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0127e22:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127e25:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127e2b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127e2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e35:	eb 0e                	jmp    f0127e45 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0127e37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e3a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127e3d:	01 d0                	add    %edx,%eax
f0127e3f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127e42:	ff 45 f4             	incl   -0xc(%ebp)
f0127e45:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0127e4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e4e:	7f e7                	jg     f0127e37 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e50:	e8 bd 47 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127e55:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e58:	e8 5b c4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127e5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127e60:	83 ec 0c             	sub    $0xc,%esp
f0127e63:	68 00 1c 00 00       	push   $0x1c00
f0127e68:	e8 26 fd fd ff       	call   f0107b93 <kmalloc>
f0127e6d:	83 c4 10             	add    $0x10,%esp
f0127e70:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e76:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127e7c:	89 c1                	mov    %eax,%ecx
f0127e7e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127e85:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127e8a:	0f b6 d0             	movzbl %al,%edx
f0127e8d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127e90:	01 d0                	add    %edx,%eax
f0127e92:	48                   	dec    %eax
f0127e93:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127e96:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e99:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e9e:	f7 75 88             	divl   -0x78(%ebp)
f0127ea1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127ea4:	29 d0                	sub    %edx,%eax
f0127ea6:	89 c3                	mov    %eax,%ebx
f0127ea8:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127eaf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127eb4:	0f b6 c0             	movzbl %al,%eax
f0127eb7:	c1 e0 04             	shl    $0x4,%eax
f0127eba:	89 c2                	mov    %eax,%edx
f0127ebc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ebf:	01 d0                	add    %edx,%eax
f0127ec1:	48                   	dec    %eax
f0127ec2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127ec8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ed3:	f7 75 80             	divl   -0x80(%ebp)
f0127ed6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127edc:	29 d0                	sub    %edx,%eax
f0127ede:	01 d8                	add    %ebx,%eax
f0127ee0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127ee5:	39 c1                	cmp    %eax,%ecx
f0127ee7:	74 17                	je     f0127f00 <test_kfreelast+0x563>
f0127ee9:	83 ec 04             	sub    $0x4,%esp
f0127eec:	68 e0 8d 13 f0       	push   $0xf0138de0
f0127ef1:	68 f8 0c 00 00       	push   $0xcf8
f0127ef6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127efb:	e8 b0 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f00:	e8 b3 c3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127f05:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127f08:	74 17                	je     f0127f21 <test_kfreelast+0x584>
f0127f0a:	83 ec 04             	sub    $0x4,%esp
f0127f0d:	68 14 8d 13 f0       	push   $0xf0138d14
f0127f12:	68 f9 0c 00 00       	push   $0xcf9
f0127f17:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127f1c:	e8 8f 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f21:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127f24:	e8 e9 46 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127f29:	29 c3                	sub    %eax,%ebx
f0127f2b:	89 d8                	mov    %ebx,%eax
f0127f2d:	83 f8 02             	cmp    $0x2,%eax
f0127f30:	74 17                	je     f0127f49 <test_kfreelast+0x5ac>
f0127f32:	83 ec 04             	sub    $0x4,%esp
f0127f35:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0127f3a:	68 fa 0c 00 00       	push   $0xcfa
f0127f3f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0127f44:	e8 67 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127f49:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f0127f50:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127f53:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127f59:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127f5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f63:	eb 0e                	jmp    f0127f73 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f0127f65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f68:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127f6b:	01 d0                	add    %edx,%eax
f0127f6d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127f70:	ff 45 f4             	incl   -0xc(%ebp)
f0127f73:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0127f79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f7c:	7f e7                	jg     f0127f65 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f7e:	e8 8f 46 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0127f83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f86:	e8 2d c3 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0127f8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127f8e:	83 ec 0c             	sub    $0xc,%esp
f0127f91:	68 00 fc 2f 00       	push   $0x2ffc00
f0127f96:	e8 f8 fb fd ff       	call   f0107b93 <kmalloc>
f0127f9b:	83 c4 10             	add    $0x10,%esp
f0127f9e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fa4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0127faa:	89 c1                	mov    %eax,%ecx
f0127fac:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127fb3:	10 00 00 
f0127fb6:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127fbb:	0f b6 d0             	movzbl %al,%edx
f0127fbe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127fc4:	01 d0                	add    %edx,%eax
f0127fc6:	48                   	dec    %eax
f0127fc7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127fcd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fd8:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127fde:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127fe4:	29 d0                	sub    %edx,%eax
f0127fe6:	89 c3                	mov    %eax,%ebx
f0127fe8:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127fef:	10 00 00 
f0127ff2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0127ff7:	0f b6 c0             	movzbl %al,%eax
f0127ffa:	c1 e0 04             	shl    $0x4,%eax
f0127ffd:	89 c2                	mov    %eax,%edx
f0127fff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128005:	01 d0                	add    %edx,%eax
f0128007:	48                   	dec    %eax
f0128008:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012800e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128014:	ba 00 00 00 00       	mov    $0x0,%edx
f0128019:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012801f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128025:	29 d0                	sub    %edx,%eax
f0128027:	01 d8                	add    %ebx,%eax
f0128029:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012802e:	39 c1                	cmp    %eax,%ecx
f0128030:	74 17                	je     f0128049 <test_kfreelast+0x6ac>
f0128032:	83 ec 04             	sub    $0x4,%esp
f0128035:	68 e0 8d 13 f0       	push   $0xf0138de0
f012803a:	68 06 0d 00 00       	push   $0xd06
f012803f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128044:	e8 67 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128049:	e8 6a c2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012804e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128051:	74 17                	je     f012806a <test_kfreelast+0x6cd>
f0128053:	83 ec 04             	sub    $0x4,%esp
f0128056:	68 14 8d 13 f0       	push   $0xf0138d14
f012805b:	68 07 0d 00 00       	push   $0xd07
f0128060:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128065:	e8 46 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012806a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012806d:	e8 a0 45 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128072:	29 c3                	sub    %eax,%ebx
f0128074:	89 d8                	mov    %ebx,%eax
f0128076:	3d 00 03 00 00       	cmp    $0x300,%eax
f012807b:	74 17                	je     f0128094 <test_kfreelast+0x6f7>
f012807d:	83 ec 04             	sub    $0x4,%esp
f0128080:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0128085:	68 08 0d 00 00       	push   $0xd08
f012808a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012808f:	e8 1c 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128094:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f012809b:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012809e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01280a4:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01280a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01280ae:	eb 0e                	jmp    f01280be <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f01280b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01280b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01280b6:	01 d0                	add    %edx,%eax
f01280b8:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01280bb:	ff 45 f4             	incl   -0xc(%ebp)
f01280be:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01280c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01280c7:	7f e7                	jg     f01280b0 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01280c9:	e8 44 45 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01280ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280d1:	e8 e2 c1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01280d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01280d9:	83 ec 0c             	sub    $0xc,%esp
f01280dc:	68 00 fc 5f 00       	push   $0x5ffc00
f01280e1:	e8 ad fa fd ff       	call   f0107b93 <kmalloc>
f01280e6:	83 c4 10             	add    $0x10,%esp
f01280e9:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280ef:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01280f5:	89 c1                	mov    %eax,%ecx
f01280f7:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01280fe:	10 00 00 
f0128101:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128106:	0f b6 d0             	movzbl %al,%edx
f0128109:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012810f:	01 d0                	add    %edx,%eax
f0128111:	48                   	dec    %eax
f0128112:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128118:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012811e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128123:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128129:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012812f:	29 d0                	sub    %edx,%eax
f0128131:	89 c3                	mov    %eax,%ebx
f0128133:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012813a:	10 00 00 
f012813d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128142:	0f b6 c0             	movzbl %al,%eax
f0128145:	c1 e0 04             	shl    $0x4,%eax
f0128148:	89 c2                	mov    %eax,%edx
f012814a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128150:	01 d0                	add    %edx,%eax
f0128152:	48                   	dec    %eax
f0128153:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128159:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012815f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128164:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012816a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128170:	29 d0                	sub    %edx,%eax
f0128172:	01 d8                	add    %ebx,%eax
f0128174:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128179:	39 c1                	cmp    %eax,%ecx
f012817b:	74 17                	je     f0128194 <test_kfreelast+0x7f7>
f012817d:	83 ec 04             	sub    $0x4,%esp
f0128180:	68 e0 8d 13 f0       	push   $0xf0138de0
f0128185:	68 14 0d 00 00       	push   $0xd14
f012818a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012818f:	e8 1c 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128194:	e8 1f c1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128199:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012819c:	74 17                	je     f01281b5 <test_kfreelast+0x818>
f012819e:	83 ec 04             	sub    $0x4,%esp
f01281a1:	68 14 8d 13 f0       	push   $0xf0138d14
f01281a6:	68 15 0d 00 00       	push   $0xd15
f01281ab:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01281b0:	e8 fb 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281b5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01281b8:	e8 55 44 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01281bd:	29 c3                	sub    %eax,%ebx
f01281bf:	89 d8                	mov    %ebx,%eax
f01281c1:	3d 00 06 00 00       	cmp    $0x600,%eax
f01281c6:	74 17                	je     f01281df <test_kfreelast+0x842>
f01281c8:	83 ec 04             	sub    $0x4,%esp
f01281cb:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01281d0:	68 16 0d 00 00       	push   $0xd16
f01281d5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01281da:	e8 d1 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01281df:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f01281e6:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01281e9:	e8 24 44 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01281ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281f1:	e8 c2 c0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01281f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01281f9:	83 ec 0c             	sub    $0xc,%esp
f01281fc:	68 00 38 00 00       	push   $0x3800
f0128201:	e8 8d f9 fd ff       	call   f0107b93 <kmalloc>
f0128206:	83 c4 10             	add    $0x10,%esp
f0128209:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012820f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128215:	89 c1                	mov    %eax,%ecx
f0128217:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012821e:	10 00 00 
f0128221:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128226:	0f b6 d0             	movzbl %al,%edx
f0128229:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012822f:	01 d0                	add    %edx,%eax
f0128231:	48                   	dec    %eax
f0128232:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128238:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012823e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128243:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128249:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012824f:	29 d0                	sub    %edx,%eax
f0128251:	89 c3                	mov    %eax,%ebx
f0128253:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012825a:	10 00 00 
f012825d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128262:	0f b6 c0             	movzbl %al,%eax
f0128265:	c1 e0 04             	shl    $0x4,%eax
f0128268:	89 c2                	mov    %eax,%edx
f012826a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128270:	01 d0                	add    %edx,%eax
f0128272:	48                   	dec    %eax
f0128273:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128279:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012827f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128284:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012828a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128290:	29 d0                	sub    %edx,%eax
f0128292:	01 d8                	add    %ebx,%eax
f0128294:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0128299:	39 c1                	cmp    %eax,%ecx
f012829b:	74 17                	je     f01282b4 <test_kfreelast+0x917>
f012829d:	83 ec 04             	sub    $0x4,%esp
f01282a0:	68 e0 8d 13 f0       	push   $0xf0138de0
f01282a5:	68 1d 0d 00 00       	push   $0xd1d
f01282aa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01282af:	e8 fc 7e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282b4:	e8 ff bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01282b9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01282bc:	74 17                	je     f01282d5 <test_kfreelast+0x938>
f01282be:	83 ec 04             	sub    $0x4,%esp
f01282c1:	68 14 8d 13 f0       	push   $0xf0138d14
f01282c6:	68 1e 0d 00 00       	push   $0xd1e
f01282cb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01282d0:	e8 db 7e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282d5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01282d8:	e8 35 43 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01282dd:	29 c3                	sub    %eax,%ebx
f01282df:	89 d8                	mov    %ebx,%eax
f01282e1:	83 f8 04             	cmp    $0x4,%eax
f01282e4:	74 17                	je     f01282fd <test_kfreelast+0x960>
f01282e6:	83 ec 04             	sub    $0x4,%esp
f01282e9:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01282ee:	68 1f 0d 00 00       	push   $0xd1f
f01282f3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01282f8:	e8 b3 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01282fd:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128304:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128307:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012830d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128317:	eb 0e                	jmp    f0128327 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f0128319:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012831c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012831f:	01 d0                	add    %edx,%eax
f0128321:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128324:	ff 45 f4             	incl   -0xc(%ebp)
f0128327:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012832d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128330:	7f e7                	jg     f0128319 <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0128332:	e8 db 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128337:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012833d:	e8 76 bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128342:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f0128348:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012834e:	83 ec 0c             	sub    $0xc,%esp
f0128351:	50                   	push   %eax
f0128352:	e8 56 f8 fd ff       	call   f0107bad <kfree>
f0128357:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012835a:	e8 59 bf fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012835f:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128365:	74 17                	je     f012837e <test_kfreelast+0x9e1>
f0128367:	83 ec 04             	sub    $0x4,%esp
f012836a:	68 14 8d 13 f0       	push   $0xf0138d14
f012836f:	68 2e 0d 00 00       	push   $0xd2e
f0128374:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128379:	e8 32 7e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012837e:	e8 8f 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128383:	89 c2                	mov    %eax,%edx
f0128385:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012838b:	29 c2                	sub    %eax,%edx
f012838d:	89 d0                	mov    %edx,%eax
f012838f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128394:	74 17                	je     f01283ad <test_kfreelast+0xa10>
f0128396:	83 ec 04             	sub    $0x4,%esp
f0128399:	68 84 94 13 f0       	push   $0xf0139484
f012839e:	68 2f 0d 00 00       	push   $0xd2f
f01283a3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01283a8:	e8 03 7e fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01283ad:	e8 60 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01283b2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283b8:	e8 fb be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01283bd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f01283c3:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01283c9:	83 ec 0c             	sub    $0xc,%esp
f01283cc:	50                   	push   %eax
f01283cd:	e8 db f7 fd ff       	call   f0107bad <kfree>
f01283d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283d5:	e8 de be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01283da:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01283e0:	74 17                	je     f01283f9 <test_kfreelast+0xa5c>
f01283e2:	83 ec 04             	sub    $0x4,%esp
f01283e5:	68 14 8d 13 f0       	push   $0xf0138d14
f01283ea:	68 35 0d 00 00       	push   $0xd35
f01283ef:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01283f4:	e8 b7 7d fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01283f9:	e8 14 42 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01283fe:	89 c2                	mov    %eax,%edx
f0128400:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128406:	29 c2                	sub    %eax,%edx
f0128408:	89 d0                	mov    %edx,%eax
f012840a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012840f:	74 17                	je     f0128428 <test_kfreelast+0xa8b>
f0128411:	83 ec 04             	sub    $0x4,%esp
f0128414:	68 84 94 13 f0       	push   $0xf0139484
f0128419:	68 36 0d 00 00       	push   $0xd36
f012841e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128423:	e8 88 7d fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128428:	e8 e5 41 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012842d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128433:	e8 80 be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128438:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f012843e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128444:	83 ec 0c             	sub    $0xc,%esp
f0128447:	50                   	push   %eax
f0128448:	e8 60 f7 fd ff       	call   f0107bad <kfree>
f012844d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128450:	e8 63 be fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128455:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f012845b:	74 17                	je     f0128474 <test_kfreelast+0xad7>
f012845d:	83 ec 04             	sub    $0x4,%esp
f0128460:	68 14 8d 13 f0       	push   $0xf0138d14
f0128465:	68 3c 0d 00 00       	push   $0xd3c
f012846a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012846f:	e8 3c 7d fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128474:	e8 99 41 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128479:	89 c2                	mov    %eax,%edx
f012847b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128481:	29 c2                	sub    %eax,%edx
f0128483:	89 d0                	mov    %edx,%eax
f0128485:	3d 00 06 00 00       	cmp    $0x600,%eax
f012848a:	74 17                	je     f01284a3 <test_kfreelast+0xb06>
f012848c:	83 ec 04             	sub    $0x4,%esp
f012848f:	68 84 94 13 f0       	push   $0xf0139484
f0128494:	68 3d 0d 00 00       	push   $0xd3d
f0128499:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012849e:	e8 0d 7d fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01284a3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01284a9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01284ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284b3:	eb 1e                	jmp    f01284d3 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f01284b5:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f01284bb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01284be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01284c1:	01 c8                	add    %ecx,%eax
f01284c3:	8a 00                	mov    (%eax),%al
f01284c5:	0f be c0             	movsbl %al,%eax
f01284c8:	01 d0                	add    %edx,%eax
f01284ca:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01284d0:	ff 45 f4             	incl   -0xc(%ebp)
f01284d3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01284d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284dc:	7f d7                	jg     f01284b5 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01284de:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f01284e4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01284ea:	01 c0                	add    %eax,%eax
f01284ec:	39 c2                	cmp    %eax,%edx
f01284ee:	74 17                	je     f0128507 <test_kfreelast+0xb6a>
f01284f0:	83 ec 04             	sub    $0x4,%esp
f01284f3:	68 e0 94 13 f0       	push   $0xf01394e0
f01284f8:	68 48 0d 00 00       	push   $0xd48
f01284fd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128502:	e8 a9 7c fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128507:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012850d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128510:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128517:	eb 1e                	jmp    f0128537 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f0128519:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f012851f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128522:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128525:	01 c8                	add    %ecx,%eax
f0128527:	8a 00                	mov    (%eax),%al
f0128529:	0f be c0             	movsbl %al,%eax
f012852c:	01 d0                	add    %edx,%eax
f012852e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128534:	ff 45 f4             	incl   -0xc(%ebp)
f0128537:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012853d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128540:	7f d7                	jg     f0128519 <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0128542:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128548:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012854e:	89 c1                	mov    %eax,%ecx
f0128550:	01 c9                	add    %ecx,%ecx
f0128552:	01 c8                	add    %ecx,%eax
f0128554:	39 c2                	cmp    %eax,%edx
f0128556:	74 17                	je     f012856f <test_kfreelast+0xbd2>
f0128558:	83 ec 04             	sub    $0x4,%esp
f012855b:	68 e0 94 13 f0       	push   $0xf01394e0
f0128560:	68 50 0d 00 00       	push   $0xd50
f0128565:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012856a:	e8 41 7c fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012856f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128575:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012857f:	eb 1e                	jmp    f012859f <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128581:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128587:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012858a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012858d:	01 c8                	add    %ecx,%eax
f012858f:	8a 00                	mov    (%eax),%al
f0128591:	0f be c0             	movsbl %al,%eax
f0128594:	01 d0                	add    %edx,%eax
f0128596:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012859c:	ff 45 f4             	incl   -0xc(%ebp)
f012859f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01285a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01285a8:	7f d7                	jg     f0128581 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01285aa:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01285b0:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01285b6:	c1 e2 02             	shl    $0x2,%edx
f01285b9:	39 d0                	cmp    %edx,%eax
f01285bb:	74 17                	je     f01285d4 <test_kfreelast+0xc37>
f01285bd:	83 ec 04             	sub    $0x4,%esp
f01285c0:	68 e0 94 13 f0       	push   $0xf01394e0
f01285c5:	68 58 0d 00 00       	push   $0xd58
f01285ca:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01285cf:	e8 dc 7b fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01285d4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01285da:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01285dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01285e4:	eb 1e                	jmp    f0128604 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f01285e6:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f01285ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01285ef:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01285f2:	01 c8                	add    %ecx,%eax
f01285f4:	8a 00                	mov    (%eax),%al
f01285f6:	0f be c0             	movsbl %al,%eax
f01285f9:	01 d0                	add    %edx,%eax
f01285fb:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128601:	ff 45 f4             	incl   -0xc(%ebp)
f0128604:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012860a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012860d:	7f d7                	jg     f01285e6 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012860f:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128615:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f012861b:	89 d0                	mov    %edx,%eax
f012861d:	c1 e0 02             	shl    $0x2,%eax
f0128620:	01 d0                	add    %edx,%eax
f0128622:	39 c1                	cmp    %eax,%ecx
f0128624:	74 17                	je     f012863d <test_kfreelast+0xca0>
f0128626:	83 ec 04             	sub    $0x4,%esp
f0128629:	68 e0 94 13 f0       	push   $0xf01394e0
f012862e:	68 60 0d 00 00       	push   $0xd60
f0128633:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128638:	e8 73 7b fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012863d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128643:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128646:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012864d:	eb 1e                	jmp    f012866d <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f012864f:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128655:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128658:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012865b:	01 c8                	add    %ecx,%eax
f012865d:	8a 00                	mov    (%eax),%al
f012865f:	0f be c0             	movsbl %al,%eax
f0128662:	01 d0                	add    %edx,%eax
f0128664:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012866a:	ff 45 f4             	incl   -0xc(%ebp)
f012866d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128673:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128676:	7f d7                	jg     f012864f <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0128678:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f012867e:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128684:	89 d0                	mov    %edx,%eax
f0128686:	01 c0                	add    %eax,%eax
f0128688:	01 d0                	add    %edx,%eax
f012868a:	01 c0                	add    %eax,%eax
f012868c:	01 d0                	add    %edx,%eax
f012868e:	39 c1                	cmp    %eax,%ecx
f0128690:	74 17                	je     f01286a9 <test_kfreelast+0xd0c>
f0128692:	83 ec 04             	sub    $0x4,%esp
f0128695:	68 e0 94 13 f0       	push   $0xf01394e0
f012869a:	68 68 0d 00 00       	push   $0xd68
f012869f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01286a4:	e8 07 7b fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01286a9:	e8 64 3f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01286ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286b1:	e8 02 bc fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01286b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01286b9:	83 ec 0c             	sub    $0xc,%esp
f01286bc:	68 00 50 00 00       	push   $0x5000
f01286c1:	e8 cd f4 fd ff       	call   f0107b93 <kmalloc>
f01286c6:	83 c4 10             	add    $0x10,%esp
f01286c9:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286cf:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01286d5:	89 c1                	mov    %eax,%ecx
f01286d7:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01286de:	10 00 00 
f01286e1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01286e6:	0f b6 d0             	movzbl %al,%edx
f01286e9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01286ef:	01 d0                	add    %edx,%eax
f01286f1:	48                   	dec    %eax
f01286f2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01286f8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01286fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128703:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128709:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012870f:	29 d0                	sub    %edx,%eax
f0128711:	89 c3                	mov    %eax,%ebx
f0128713:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012871a:	10 00 00 
f012871d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128722:	0f b6 c0             	movzbl %al,%eax
f0128725:	c1 e0 04             	shl    $0x4,%eax
f0128728:	89 c2                	mov    %eax,%edx
f012872a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128730:	01 d0                	add    %edx,%eax
f0128732:	48                   	dec    %eax
f0128733:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128739:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012873f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128744:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012874a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128750:	29 d0                	sub    %edx,%eax
f0128752:	01 d8                	add    %ebx,%eax
f0128754:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128759:	39 c1                	cmp    %eax,%ecx
f012875b:	74 17                	je     f0128774 <test_kfreelast+0xdd7>
f012875d:	83 ec 04             	sub    $0x4,%esp
f0128760:	68 e0 8d 13 f0       	push   $0xf0138de0
f0128765:	68 71 0d 00 00       	push   $0xd71
f012876a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012876f:	e8 3c 7a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128774:	e8 3f bb fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128779:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012877c:	74 17                	je     f0128795 <test_kfreelast+0xdf8>
f012877e:	83 ec 04             	sub    $0x4,%esp
f0128781:	68 14 8d 13 f0       	push   $0xf0138d14
f0128786:	68 72 0d 00 00       	push   $0xd72
f012878b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128790:	e8 1b 7a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128795:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128798:	e8 75 3e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012879d:	29 c3                	sub    %eax,%ebx
f012879f:	89 d8                	mov    %ebx,%eax
f01287a1:	83 f8 05             	cmp    $0x5,%eax
f01287a4:	74 17                	je     f01287bd <test_kfreelast+0xe20>
f01287a6:	83 ec 04             	sub    $0x4,%esp
f01287a9:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01287ae:	68 73 0d 00 00       	push   $0xd73
f01287b3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01287b8:	e8 f3 79 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01287bd:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f01287c4:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01287c7:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01287cd:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01287d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287d7:	eb 0e                	jmp    f01287e7 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f01287d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01287df:	01 d0                	add    %edx,%eax
f01287e1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01287e4:	ff 45 f4             	incl   -0xc(%ebp)
f01287e7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01287ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287f0:	7f e7                	jg     f01287d9 <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01287f2:	e8 1b 3e fe ff       	call   f010c612 <sys_calculate_free_frames>
f01287f7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287fa:	e8 b9 ba fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01287ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128802:	83 ec 0c             	sub    $0xc,%esp
f0128805:	68 00 00 10 00       	push   $0x100000
f012880a:	e8 84 f3 fd ff       	call   f0107b93 <kmalloc>
f012880f:	83 c4 10             	add    $0x10,%esp
f0128812:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128818:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012881e:	89 c1                	mov    %eax,%ecx
f0128820:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128827:	10 00 00 
f012882a:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012882f:	0f b6 d0             	movzbl %al,%edx
f0128832:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128838:	01 d0                	add    %edx,%eax
f012883a:	48                   	dec    %eax
f012883b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128841:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128847:	ba 00 00 00 00       	mov    $0x0,%edx
f012884c:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128852:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128858:	29 d0                	sub    %edx,%eax
f012885a:	89 c3                	mov    %eax,%ebx
f012885c:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128863:	10 00 00 
f0128866:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012886b:	0f b6 c0             	movzbl %al,%eax
f012886e:	c1 e0 04             	shl    $0x4,%eax
f0128871:	89 c2                	mov    %eax,%edx
f0128873:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128879:	01 d0                	add    %edx,%eax
f012887b:	48                   	dec    %eax
f012887c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128882:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128888:	ba 00 00 00 00       	mov    $0x0,%edx
f012888d:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128893:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128899:	29 d0                	sub    %edx,%eax
f012889b:	01 d8                	add    %ebx,%eax
f012889d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01288a2:	39 c1                	cmp    %eax,%ecx
f01288a4:	74 17                	je     f01288bd <test_kfreelast+0xf20>
f01288a6:	83 ec 04             	sub    $0x4,%esp
f01288a9:	68 e0 8d 13 f0       	push   $0xf0138de0
f01288ae:	68 7f 0d 00 00       	push   $0xd7f
f01288b3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01288b8:	e8 f3 78 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288bd:	e8 f6 b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01288c2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01288c5:	74 17                	je     f01288de <test_kfreelast+0xf41>
f01288c7:	83 ec 04             	sub    $0x4,%esp
f01288ca:	68 14 8d 13 f0       	push   $0xf0138d14
f01288cf:	68 80 0d 00 00       	push   $0xd80
f01288d4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01288d9:	e8 d2 78 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288de:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01288e1:	e8 2c 3d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01288e6:	29 c3                	sub    %eax,%ebx
f01288e8:	89 d8                	mov    %ebx,%eax
f01288ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f01288ef:	74 17                	je     f0128908 <test_kfreelast+0xf6b>
f01288f1:	83 ec 04             	sub    $0x4,%esp
f01288f4:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01288f9:	68 81 0d 00 00       	push   $0xd81
f01288fe:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128903:	e8 a8 78 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128908:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f012890f:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128912:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128918:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012891b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128922:	eb 0e                	jmp    f0128932 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128924:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128927:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012892a:	01 d0                	add    %edx,%eax
f012892c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012892f:	ff 45 f4             	incl   -0xc(%ebp)
f0128932:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128938:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012893b:	7f e7                	jg     f0128924 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012893d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128944:	e8 c9 3c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128949:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012894c:	e8 67 b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128951:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128954:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012895a:	83 ec 0c             	sub    $0xc,%esp
f012895d:	50                   	push   %eax
f012895e:	e8 4a f2 fd ff       	call   f0107bad <kfree>
f0128963:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128966:	e8 4d b9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012896b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012896e:	74 17                	je     f0128987 <test_kfreelast+0xfea>
f0128970:	83 ec 04             	sub    $0x4,%esp
f0128973:	68 14 8d 13 f0       	push   $0xf0138d14
f0128978:	68 91 0d 00 00       	push   $0xd91
f012897d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128982:	e8 29 78 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128987:	e8 86 3c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012898c:	89 c2                	mov    %eax,%edx
f012898e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128991:	29 c2                	sub    %eax,%edx
f0128993:	89 d0                	mov    %edx,%eax
f0128995:	3d 00 01 00 00       	cmp    $0x100,%eax
f012899a:	74 17                	je     f01289b3 <test_kfreelast+0x1016>
f012899c:	83 ec 04             	sub    $0x4,%esp
f012899f:	68 84 94 13 f0       	push   $0xf0139484
f01289a4:	68 92 0d 00 00       	push   $0xd92
f01289a9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f01289ae:	e8 fd 77 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f01289b3:	e8 5a 3c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01289b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289bb:	e8 f8 b8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01289c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f01289c3:	83 ec 0c             	sub    $0xc,%esp
f01289c6:	68 00 78 00 00       	push   $0x7800
f01289cb:	e8 c3 f1 fd ff       	call   f0107b93 <kmalloc>
f01289d0:	83 c4 10             	add    $0x10,%esp
f01289d3:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289d9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01289df:	89 c1                	mov    %eax,%ecx
f01289e1:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01289e8:	10 00 00 
f01289eb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01289f0:	0f b6 d0             	movzbl %al,%edx
f01289f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01289f9:	01 d0                	add    %edx,%eax
f01289fb:	48                   	dec    %eax
f01289fc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128a02:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a08:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a0d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128a13:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a19:	29 d0                	sub    %edx,%eax
f0128a1b:	89 c3                	mov    %eax,%ebx
f0128a1d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128a24:	10 00 00 
f0128a27:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128a2c:	0f b6 c0             	movzbl %al,%eax
f0128a2f:	c1 e0 04             	shl    $0x4,%eax
f0128a32:	89 c2                	mov    %eax,%edx
f0128a34:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128a3a:	01 d0                	add    %edx,%eax
f0128a3c:	48                   	dec    %eax
f0128a3d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128a43:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a49:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a4e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128a54:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a5a:	29 d0                	sub    %edx,%eax
f0128a5c:	01 d8                	add    %ebx,%eax
f0128a5e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128a63:	39 c1                	cmp    %eax,%ecx
f0128a65:	74 17                	je     f0128a7e <test_kfreelast+0x10e1>
f0128a67:	83 ec 04             	sub    $0x4,%esp
f0128a6a:	68 e0 8d 13 f0       	push   $0xf0138de0
f0128a6f:	68 9b 0d 00 00       	push   $0xd9b
f0128a74:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128a79:	e8 32 77 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a7e:	e8 35 b8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128a83:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a86:	74 17                	je     f0128a9f <test_kfreelast+0x1102>
f0128a88:	83 ec 04             	sub    $0x4,%esp
f0128a8b:	68 14 8d 13 f0       	push   $0xf0138d14
f0128a90:	68 9c 0d 00 00       	push   $0xd9c
f0128a95:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128a9a:	e8 11 77 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a9f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128aa2:	e8 6b 3b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128aa7:	29 c3                	sub    %eax,%ebx
f0128aa9:	89 d8                	mov    %ebx,%eax
f0128aab:	83 f8 08             	cmp    $0x8,%eax
f0128aae:	74 17                	je     f0128ac7 <test_kfreelast+0x112a>
f0128ab0:	83 ec 04             	sub    $0x4,%esp
f0128ab3:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0128ab8:	68 9d 0d 00 00       	push   $0xd9d
f0128abd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128ac2:	e8 e9 76 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128ac7:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128ace:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128ad1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128ad7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128ada:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ae1:	eb 0e                	jmp    f0128af1 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128ae3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ae6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128ae9:	01 d0                	add    %edx,%eax
f0128aeb:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128aee:	ff 45 f4             	incl   -0xc(%ebp)
f0128af1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128af7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128afa:	7f e7                	jg     f0128ae3 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128afc:	e8 11 3b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128b01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b04:	e8 af b7 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128b09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128b0c:	83 ec 0c             	sub    $0xc,%esp
f0128b0f:	68 00 00 10 00       	push   $0x100000
f0128b14:	e8 7a f0 fd ff       	call   f0107b93 <kmalloc>
f0128b19:	83 c4 10             	add    $0x10,%esp
f0128b1c:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b22:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128b28:	89 c1                	mov    %eax,%ecx
f0128b2a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128b31:	10 00 00 
f0128b34:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128b39:	0f b6 d0             	movzbl %al,%edx
f0128b3c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128b42:	01 d0                	add    %edx,%eax
f0128b44:	48                   	dec    %eax
f0128b45:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128b4b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128b51:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b56:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128b5c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128b62:	29 d0                	sub    %edx,%eax
f0128b64:	89 c3                	mov    %eax,%ebx
f0128b66:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128b6d:	10 00 00 
f0128b70:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128b75:	0f b6 c0             	movzbl %al,%eax
f0128b78:	c1 e0 04             	shl    $0x4,%eax
f0128b7b:	89 c2                	mov    %eax,%edx
f0128b7d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128b83:	01 d0                	add    %edx,%eax
f0128b85:	48                   	dec    %eax
f0128b86:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128b8c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128b92:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b97:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128b9d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ba3:	29 d0                	sub    %edx,%eax
f0128ba5:	01 d8                	add    %ebx,%eax
f0128ba7:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128bac:	39 c1                	cmp    %eax,%ecx
f0128bae:	74 17                	je     f0128bc7 <test_kfreelast+0x122a>
f0128bb0:	83 ec 04             	sub    $0x4,%esp
f0128bb3:	68 e0 8d 13 f0       	push   $0xf0138de0
f0128bb8:	68 a9 0d 00 00       	push   $0xda9
f0128bbd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128bc2:	e8 e9 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bc7:	e8 ec b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128bcc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128bcf:	74 17                	je     f0128be8 <test_kfreelast+0x124b>
f0128bd1:	83 ec 04             	sub    $0x4,%esp
f0128bd4:	68 14 8d 13 f0       	push   $0xf0138d14
f0128bd9:	68 aa 0d 00 00       	push   $0xdaa
f0128bde:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128be3:	e8 c8 75 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128be8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128beb:	e8 22 3a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128bf0:	29 c3                	sub    %eax,%ebx
f0128bf2:	89 d8                	mov    %ebx,%eax
f0128bf4:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128bf9:	74 17                	je     f0128c12 <test_kfreelast+0x1275>
f0128bfb:	83 ec 04             	sub    $0x4,%esp
f0128bfe:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0128c03:	68 ab 0d 00 00       	push   $0xdab
f0128c08:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0128c0d:	e8 9e 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128c12:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128c19:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128c1c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128c22:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128c25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c2c:	eb 0e                	jmp    f0128c3c <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128c2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c31:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c34:	01 d0                	add    %edx,%eax
f0128c36:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128c39:	ff 45 f4             	incl   -0xc(%ebp)
f0128c3c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128c42:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c45:	7f e7                	jg     f0128c2e <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128c47:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128c4b:	83 ec 08             	sub    $0x8,%esp
f0128c4e:	ff 75 f0             	pushl  -0x10(%ebp)
f0128c51:	68 2c 9d 13 f0       	push   $0xf0139d2c
f0128c56:	e8 d6 81 fd ff       	call   f0100e31 <cprintf>
f0128c5b:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0128c5e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c65:	e8 a8 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128c6a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c6d:	e8 46 b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128c72:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0128c75:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128c7b:	83 ec 0c             	sub    $0xc,%esp
f0128c7e:	50                   	push   %eax
f0128c7f:	e8 29 ef fd ff       	call   f0107bad <kfree>
f0128c84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128c87:	e8 2c b6 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128c8c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c8f:	74 1d                	je     f0128cae <test_kfreelast+0x1311>
f0128c91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128c95:	75 17                	jne    f0128cae <test_kfreelast+0x1311>
f0128c97:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128c9e:	83 ec 0c             	sub    $0xc,%esp
f0128ca1:	68 54 9d 13 f0       	push   $0xf0139d54
f0128ca6:	e8 86 81 fd ff       	call   f0100e31 <cprintf>
f0128cab:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128cae:	e8 5f 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128cb3:	89 c2                	mov    %eax,%edx
f0128cb5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128cb8:	29 c2                	sub    %eax,%edx
f0128cba:	89 d0                	mov    %edx,%eax
f0128cbc:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128cc1:	74 1d                	je     f0128ce0 <test_kfreelast+0x1343>
f0128cc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128cc7:	75 17                	jne    f0128ce0 <test_kfreelast+0x1343>
f0128cc9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128cd0:	83 ec 0c             	sub    $0xc,%esp
f0128cd3:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0128cd8:	e8 54 81 fd ff       	call   f0100e31 <cprintf>
f0128cdd:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128ce0:	e8 2d 39 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128ce5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ce8:	e8 cb b5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128ced:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0128cf0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128cf6:	83 ec 0c             	sub    $0xc,%esp
f0128cf9:	50                   	push   %eax
f0128cfa:	e8 ae ee fd ff       	call   f0107bad <kfree>
f0128cff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128d02:	e8 b1 b5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128d07:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128d0a:	74 1d                	je     f0128d29 <test_kfreelast+0x138c>
f0128d0c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128d10:	75 17                	jne    f0128d29 <test_kfreelast+0x138c>
f0128d12:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128d19:	83 ec 0c             	sub    $0xc,%esp
f0128d1c:	68 54 9d 13 f0       	push   $0xf0139d54
f0128d21:	e8 0b 81 fd ff       	call   f0100e31 <cprintf>
f0128d26:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0128d29:	e8 e4 38 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128d2e:	89 c2                	mov    %eax,%edx
f0128d30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128d33:	29 c2                	sub    %eax,%edx
f0128d35:	89 d0                	mov    %edx,%eax
f0128d37:	83 f8 08             	cmp    $0x8,%eax
f0128d3a:	74 1d                	je     f0128d59 <test_kfreelast+0x13bc>
f0128d3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128d40:	75 17                	jne    f0128d59 <test_kfreelast+0x13bc>
f0128d42:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128d49:	83 ec 0c             	sub    $0xc,%esp
f0128d4c:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0128d51:	e8 db 80 fd ff       	call   f0100e31 <cprintf>
f0128d56:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d59:	e8 b4 38 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128d5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d61:	e8 52 b5 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128d66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0128d69:	83 ec 0c             	sub    $0xc,%esp
f0128d6c:	68 00 28 00 00       	push   $0x2800
f0128d71:	e8 1d ee fd ff       	call   f0107b93 <kmalloc>
f0128d76:	83 c4 10             	add    $0x10,%esp
f0128d79:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0128d7f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128d85:	89 c1                	mov    %eax,%ecx
f0128d87:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128d8e:	10 00 00 
f0128d91:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128d96:	0f b6 d0             	movzbl %al,%edx
f0128d99:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128d9f:	01 d0                	add    %edx,%eax
f0128da1:	48                   	dec    %eax
f0128da2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128da8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0128db3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128db9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128dbf:	29 d0                	sub    %edx,%eax
f0128dc1:	89 c3                	mov    %eax,%ebx
f0128dc3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128dca:	10 00 00 
f0128dcd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0128dd2:	0f b6 c0             	movzbl %al,%eax
f0128dd5:	c1 e0 04             	shl    $0x4,%eax
f0128dd8:	89 c2                	mov    %eax,%edx
f0128dda:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128de0:	01 d0                	add    %edx,%eax
f0128de2:	48                   	dec    %eax
f0128de3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128de9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128def:	ba 00 00 00 00       	mov    $0x0,%edx
f0128df4:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128dfa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128e00:	29 d0                	sub    %edx,%eax
f0128e02:	01 d8                	add    %ebx,%eax
f0128e04:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128e09:	39 c1                	cmp    %eax,%ecx
f0128e0b:	74 1d                	je     f0128e2a <test_kfreelast+0x148d>
f0128e0d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128e11:	75 17                	jne    f0128e2a <test_kfreelast+0x148d>
f0128e13:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128e1a:	83 ec 0c             	sub    $0xc,%esp
f0128e1d:	68 f8 9d 13 f0       	push   $0xf0139df8
f0128e22:	e8 0a 80 fd ff       	call   f0100e31 <cprintf>
f0128e27:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0128e2a:	e8 89 b4 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128e2f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e32:	74 1d                	je     f0128e51 <test_kfreelast+0x14b4>
f0128e34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128e38:	75 17                	jne    f0128e51 <test_kfreelast+0x14b4>
f0128e3a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128e41:	83 ec 0c             	sub    $0xc,%esp
f0128e44:	68 54 9d 13 f0       	push   $0xf0139d54
f0128e49:	e8 e3 7f fd ff       	call   f0100e31 <cprintf>
f0128e4e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0128e51:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e54:	e8 b9 37 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128e59:	29 c3                	sub    %eax,%ebx
f0128e5b:	89 d8                	mov    %ebx,%eax
f0128e5d:	83 f8 03             	cmp    $0x3,%eax
f0128e60:	74 1d                	je     f0128e7f <test_kfreelast+0x14e2>
f0128e62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128e66:	75 17                	jne    f0128e7f <test_kfreelast+0x14e2>
f0128e68:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128e6f:	83 ec 0c             	sub    $0xc,%esp
f0128e72:	68 60 9e 13 f0       	push   $0xf0139e60
f0128e77:	e8 b5 7f fd ff       	call   f0100e31 <cprintf>
f0128e7c:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f0128e7f:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0128e86:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0128e89:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128e8f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0128e92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e99:	eb 0e                	jmp    f0128ea9 <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f0128e9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e9e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128ea1:	01 d0                	add    %edx,%eax
f0128ea3:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0128ea6:	ff 45 f4             	incl   -0xc(%ebp)
f0128ea9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128eaf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128eb2:	7f e7                	jg     f0128e9b <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0128eb4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128eb8:	75 17                	jne    f0128ed1 <test_kfreelast+0x1534>
f0128eba:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0128ebe:	83 ec 08             	sub    $0x8,%esp
f0128ec1:	ff 75 f0             	pushl  -0x10(%ebp)
f0128ec4:	68 2c 9d 13 f0       	push   $0xf0139d2c
f0128ec9:	e8 63 7f fd ff       	call   f0100e31 <cprintf>
f0128ece:	83 c4 10             	add    $0x10,%esp
f0128ed1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f0128ed8:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128ede:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0128ee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ee8:	eb 1e                	jmp    f0128f08 <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f0128eea:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0128ef0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128ef3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128ef6:	01 c8                	add    %ecx,%eax
f0128ef8:	8a 00                	mov    (%eax),%al
f0128efa:	0f be c0             	movsbl %al,%eax
f0128efd:	01 d0                	add    %edx,%eax
f0128eff:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0128f05:	ff 45 f4             	incl   -0xc(%ebp)
f0128f08:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128f0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f11:	7f d7                	jg     f0128eea <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0128f13:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f0128f19:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0128f1f:	89 d0                	mov    %edx,%eax
f0128f21:	01 c0                	add    %eax,%eax
f0128f23:	01 d0                	add    %edx,%eax
f0128f25:	c1 e0 02             	shl    $0x2,%eax
f0128f28:	39 c1                	cmp    %eax,%ecx
f0128f2a:	74 1d                	je     f0128f49 <test_kfreelast+0x15ac>
f0128f2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128f30:	75 17                	jne    f0128f49 <test_kfreelast+0x15ac>
f0128f32:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128f39:	83 ec 0c             	sub    $0xc,%esp
f0128f3c:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0128f41:	e8 eb 7e fd ff       	call   f0100e31 <cprintf>
f0128f46:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128f49:	83 ec 0c             	sub    $0xc,%esp
f0128f4c:	6a 03                	push   $0x3
f0128f4e:	e8 5a 3b fe ff       	call   f010caad <sys_bypassPageFault>
f0128f53:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0128f56:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128f5c:	05 00 30 00 00       	add    $0x3000,%eax
f0128f61:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0128f64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f6b:	eb 3c                	jmp    f0128fa9 <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f0128f6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128f70:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f73:	01 d0                	add    %edx,%eax
f0128f75:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0128f78:	e8 1e 3b fe ff       	call   f010ca9b <sys_rcr2>
f0128f7d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128f80:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0128f83:	01 ca                	add    %ecx,%edx
f0128f85:	39 d0                	cmp    %edx,%eax
f0128f87:	74 1d                	je     f0128fa6 <test_kfreelast+0x1609>
f0128f89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128f8d:	75 17                	jne    f0128fa6 <test_kfreelast+0x1609>
f0128f8f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0128f96:	83 ec 0c             	sub    $0xc,%esp
f0128f99:	68 d8 9e 13 f0       	push   $0xf0139ed8
f0128f9e:	e8 8e 7e fd ff       	call   f0100e31 <cprintf>
f0128fa3:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0128fa6:	ff 45 f4             	incl   -0xc(%ebp)
f0128fa9:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f0128fb0:	7e bb                	jle    f0128f6d <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128fb2:	83 ec 0c             	sub    $0xc,%esp
f0128fb5:	6a 00                	push   $0x0
f0128fb7:	e8 f1 3a fe ff       	call   f010caad <sys_bypassPageFault>
f0128fbc:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0128fbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128fc3:	75 17                	jne    f0128fdc <test_kfreelast+0x163f>
f0128fc5:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0128fc9:	83 ec 08             	sub    $0x8,%esp
f0128fcc:	ff 75 f0             	pushl  -0x10(%ebp)
f0128fcf:	68 2c 9d 13 f0       	push   $0xf0139d2c
f0128fd4:	e8 58 7e fd ff       	call   f0100e31 <cprintf>
f0128fd9:	83 c4 10             	add    $0x10,%esp
f0128fdc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0128fe3:	e8 2a 36 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0128fe8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128feb:	e8 c8 b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0128ff0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0128ff3:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128ff9:	83 ec 0c             	sub    $0xc,%esp
f0128ffc:	50                   	push   %eax
f0128ffd:	e8 ab eb fd ff       	call   f0107bad <kfree>
f0129002:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129005:	e8 ae b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012900a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012900d:	74 1d                	je     f012902c <test_kfreelast+0x168f>
f012900f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129013:	75 17                	jne    f012902c <test_kfreelast+0x168f>
f0129015:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012901c:	83 ec 0c             	sub    $0xc,%esp
f012901f:	68 54 9d 13 f0       	push   $0xf0139d54
f0129024:	e8 08 7e fd ff       	call   f0100e31 <cprintf>
f0129029:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012902c:	e8 e1 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129031:	89 c2                	mov    %eax,%edx
f0129033:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129036:	29 c2                	sub    %eax,%edx
f0129038:	89 d0                	mov    %edx,%eax
f012903a:	83 f8 03             	cmp    $0x3,%eax
f012903d:	74 1d                	je     f012905c <test_kfreelast+0x16bf>
f012903f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129043:	75 17                	jne    f012905c <test_kfreelast+0x16bf>
f0129045:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012904c:	83 ec 0c             	sub    $0xc,%esp
f012904f:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0129054:	e8 d8 7d fd ff       	call   f0100e31 <cprintf>
f0129059:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012905c:	e8 b1 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129061:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129064:	e8 4f b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129069:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012906c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129072:	83 ec 0c             	sub    $0xc,%esp
f0129075:	50                   	push   %eax
f0129076:	e8 32 eb fd ff       	call   f0107bad <kfree>
f012907b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012907e:	e8 35 b2 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129083:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129086:	74 1d                	je     f01290a5 <test_kfreelast+0x1708>
f0129088:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012908c:	75 17                	jne    f01290a5 <test_kfreelast+0x1708>
f012908e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129095:	83 ec 0c             	sub    $0xc,%esp
f0129098:	68 54 9d 13 f0       	push   $0xf0139d54
f012909d:	e8 8f 7d fd ff       	call   f0100e31 <cprintf>
f01290a2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01290a5:	e8 68 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01290aa:	89 c2                	mov    %eax,%edx
f01290ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01290af:	29 c2                	sub    %eax,%edx
f01290b1:	89 d0                	mov    %edx,%eax
f01290b3:	83 f8 04             	cmp    $0x4,%eax
f01290b6:	74 1d                	je     f01290d5 <test_kfreelast+0x1738>
f01290b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290bc:	75 17                	jne    f01290d5 <test_kfreelast+0x1738>
f01290be:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290c5:	83 ec 0c             	sub    $0xc,%esp
f01290c8:	68 c0 9d 13 f0       	push   $0xf0139dc0
f01290cd:	e8 5f 7d fd ff       	call   f0100e31 <cprintf>
f01290d2:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01290d5:	e8 38 35 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01290da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290dd:	e8 d6 b1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01290e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f01290e5:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01290eb:	83 ec 0c             	sub    $0xc,%esp
f01290ee:	50                   	push   %eax
f01290ef:	e8 b9 ea fd ff       	call   f0107bad <kfree>
f01290f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01290f7:	e8 bc b1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01290fc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01290ff:	74 1d                	je     f012911e <test_kfreelast+0x1781>
f0129101:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129105:	75 17                	jne    f012911e <test_kfreelast+0x1781>
f0129107:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012910e:	83 ec 0c             	sub    $0xc,%esp
f0129111:	68 54 9d 13 f0       	push   $0xf0139d54
f0129116:	e8 16 7d fd ff       	call   f0100e31 <cprintf>
f012911b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012911e:	e8 ef 34 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129123:	89 c2                	mov    %eax,%edx
f0129125:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129128:	29 c2                	sub    %eax,%edx
f012912a:	89 d0                	mov    %edx,%eax
f012912c:	83 f8 05             	cmp    $0x5,%eax
f012912f:	74 1d                	je     f012914e <test_kfreelast+0x17b1>
f0129131:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129135:	75 17                	jne    f012914e <test_kfreelast+0x17b1>
f0129137:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012913e:	83 ec 0c             	sub    $0xc,%esp
f0129141:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0129146:	e8 e6 7c fd ff       	call   f0100e31 <cprintf>
f012914b:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012914e:	e8 bf 34 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129153:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129156:	e8 5d b1 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012915b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012915e:	83 ec 0c             	sub    $0xc,%esp
f0129161:	68 00 c8 00 00       	push   $0xc800
f0129166:	e8 28 ea fd ff       	call   f0107b93 <kmalloc>
f012916b:	83 c4 10             	add    $0x10,%esp
f012916e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129174:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012917a:	89 c1                	mov    %eax,%ecx
f012917c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129183:	10 00 00 
f0129186:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012918b:	0f b6 d0             	movzbl %al,%edx
f012918e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129194:	01 d0                	add    %edx,%eax
f0129196:	48                   	dec    %eax
f0129197:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012919d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01291a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01291a8:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01291ae:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01291b4:	29 d0                	sub    %edx,%eax
f01291b6:	89 c3                	mov    %eax,%ebx
f01291b8:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01291bf:	10 00 00 
f01291c2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01291c7:	0f b6 c0             	movzbl %al,%eax
f01291ca:	c1 e0 04             	shl    $0x4,%eax
f01291cd:	89 c2                	mov    %eax,%edx
f01291cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01291d5:	01 d0                	add    %edx,%eax
f01291d7:	48                   	dec    %eax
f01291d8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01291de:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01291e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01291e9:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01291ef:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01291f5:	29 d0                	sub    %edx,%eax
f01291f7:	01 d8                	add    %ebx,%eax
f01291f9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01291fe:	39 c1                	cmp    %eax,%ecx
f0129200:	74 1d                	je     f012921f <test_kfreelast+0x1882>
f0129202:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129206:	75 17                	jne    f012921f <test_kfreelast+0x1882>
f0129208:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012920f:	83 ec 0c             	sub    $0xc,%esp
f0129212:	68 f8 9d 13 f0       	push   $0xf0139df8
f0129217:	e8 15 7c fd ff       	call   f0100e31 <cprintf>
f012921c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012921f:	e8 94 b0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129224:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129227:	74 1d                	je     f0129246 <test_kfreelast+0x18a9>
f0129229:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012922d:	75 17                	jne    f0129246 <test_kfreelast+0x18a9>
f012922f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129236:	83 ec 0c             	sub    $0xc,%esp
f0129239:	68 54 9d 13 f0       	push   $0xf0139d54
f012923e:	e8 ee 7b fd ff       	call   f0100e31 <cprintf>
f0129243:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129246:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129249:	e8 c4 33 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012924e:	29 c3                	sub    %eax,%ebx
f0129250:	89 d8                	mov    %ebx,%eax
f0129252:	83 f8 0d             	cmp    $0xd,%eax
f0129255:	74 1d                	je     f0129274 <test_kfreelast+0x18d7>
f0129257:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012925b:	75 17                	jne    f0129274 <test_kfreelast+0x18d7>
f012925d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129264:	83 ec 0c             	sub    $0xc,%esp
f0129267:	68 60 9e 13 f0       	push   $0xf0139e60
f012926c:	e8 c0 7b fd ff       	call   f0100e31 <cprintf>
f0129271:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129274:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f012927b:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012927e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129284:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0129287:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012928e:	eb 0e                	jmp    f012929e <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f0129290:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129293:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129296:	01 d0                	add    %edx,%eax
f0129298:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012929b:	ff 45 f4             	incl   -0xc(%ebp)
f012929e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01292a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01292a7:	7f e7                	jg     f0129290 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01292a9:	e8 64 33 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01292ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292b1:	e8 02 b0 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01292b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f01292b9:	83 ec 0c             	sub    $0xc,%esp
f01292bc:	68 00 fc 2f 00       	push   $0x2ffc00
f01292c1:	e8 cd e8 fd ff       	call   f0107b93 <kmalloc>
f01292c6:	83 c4 10             	add    $0x10,%esp
f01292c9:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01292cf:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01292d5:	89 c1                	mov    %eax,%ecx
f01292d7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01292de:	10 00 00 
f01292e1:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f01292e6:	0f b6 d0             	movzbl %al,%edx
f01292e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01292ef:	01 d0                	add    %edx,%eax
f01292f1:	48                   	dec    %eax
f01292f2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01292f8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01292fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0129303:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129309:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012930f:	29 d0                	sub    %edx,%eax
f0129311:	89 c3                	mov    %eax,%ebx
f0129313:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012931a:	10 00 00 
f012931d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129322:	0f b6 c0             	movzbl %al,%eax
f0129325:	c1 e0 04             	shl    $0x4,%eax
f0129328:	89 c2                	mov    %eax,%edx
f012932a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129330:	01 d0                	add    %edx,%eax
f0129332:	48                   	dec    %eax
f0129333:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129339:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012933f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129344:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012934a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129350:	29 d0                	sub    %edx,%eax
f0129352:	01 d8                	add    %ebx,%eax
f0129354:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f0129359:	39 c1                	cmp    %eax,%ecx
f012935b:	74 1d                	je     f012937a <test_kfreelast+0x19dd>
f012935d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129361:	75 17                	jne    f012937a <test_kfreelast+0x19dd>
f0129363:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012936a:	83 ec 0c             	sub    $0xc,%esp
f012936d:	68 f8 9d 13 f0       	push   $0xf0139df8
f0129372:	e8 ba 7a fd ff       	call   f0100e31 <cprintf>
f0129377:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012937a:	e8 39 af fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012937f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129382:	74 1d                	je     f01293a1 <test_kfreelast+0x1a04>
f0129384:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129388:	75 17                	jne    f01293a1 <test_kfreelast+0x1a04>
f012938a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129391:	83 ec 0c             	sub    $0xc,%esp
f0129394:	68 54 9d 13 f0       	push   $0xf0139d54
f0129399:	e8 93 7a fd ff       	call   f0100e31 <cprintf>
f012939e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01293a1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01293a4:	e8 69 32 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01293a9:	29 c3                	sub    %eax,%ebx
f01293ab:	89 d8                	mov    %ebx,%eax
f01293ad:	3d 00 03 00 00       	cmp    $0x300,%eax
f01293b2:	74 1d                	je     f01293d1 <test_kfreelast+0x1a34>
f01293b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293b8:	75 17                	jne    f01293d1 <test_kfreelast+0x1a34>
f01293ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293c1:	83 ec 0c             	sub    $0xc,%esp
f01293c4:	68 60 9e 13 f0       	push   $0xf0139e60
f01293c9:	e8 63 7a fd ff       	call   f0100e31 <cprintf>
f01293ce:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f01293d1:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f01293d8:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f01293db:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01293e1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f01293e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293eb:	eb 0e                	jmp    f01293fb <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f01293ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293f0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01293f3:	01 d0                	add    %edx,%eax
f01293f5:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01293f8:	ff 45 f4             	incl   -0xc(%ebp)
f01293fb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129401:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129404:	7f e7                	jg     f01293ed <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129406:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012940a:	75 17                	jne    f0129423 <test_kfreelast+0x1a86>
f012940c:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129410:	83 ec 08             	sub    $0x8,%esp
f0129413:	ff 75 f0             	pushl  -0x10(%ebp)
f0129416:	68 2c 9d 13 f0       	push   $0xf0139d2c
f012941b:	e8 11 7a fd ff       	call   f0100e31 <cprintf>
f0129420:	83 c4 10             	add    $0x10,%esp
f0129423:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012942a:	e8 e3 31 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012942f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129432:	e8 81 ae fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129437:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012943a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129440:	83 ec 0c             	sub    $0xc,%esp
f0129443:	50                   	push   %eax
f0129444:	e8 64 e7 fd ff       	call   f0107bad <kfree>
f0129449:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012944c:	e8 67 ae fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129451:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129454:	74 1d                	je     f0129473 <test_kfreelast+0x1ad6>
f0129456:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012945a:	75 17                	jne    f0129473 <test_kfreelast+0x1ad6>
f012945c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129463:	83 ec 0c             	sub    $0xc,%esp
f0129466:	68 54 9d 13 f0       	push   $0xf0139d54
f012946b:	e8 c1 79 fd ff       	call   f0100e31 <cprintf>
f0129470:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129473:	e8 9a 31 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129478:	89 c2                	mov    %eax,%edx
f012947a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012947d:	29 c2                	sub    %eax,%edx
f012947f:	89 d0                	mov    %edx,%eax
f0129481:	83 f8 0d             	cmp    $0xd,%eax
f0129484:	74 1d                	je     f01294a3 <test_kfreelast+0x1b06>
f0129486:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012948a:	75 17                	jne    f01294a3 <test_kfreelast+0x1b06>
f012948c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129493:	83 ec 0c             	sub    $0xc,%esp
f0129496:	68 c0 9d 13 f0       	push   $0xf0139dc0
f012949b:	e8 91 79 fd ff       	call   f0100e31 <cprintf>
f01294a0:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01294a3:	83 ec 0c             	sub    $0xc,%esp
f01294a6:	6a 03                	push   $0x3
f01294a8:	e8 00 36 fe ff       	call   f010caad <sys_bypassPageFault>
f01294ad:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f01294b0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01294b6:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f01294b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294c0:	eb 3c                	jmp    f01294fe <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f01294c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01294c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294c8:	01 d0                	add    %edx,%eax
f01294ca:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01294cd:	e8 c9 35 fe ff       	call   f010ca9b <sys_rcr2>
f01294d2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01294d5:	8b 55 9c             	mov    -0x64(%ebp),%edx
f01294d8:	01 ca                	add    %ecx,%edx
f01294da:	39 d0                	cmp    %edx,%eax
f01294dc:	74 1d                	je     f01294fb <test_kfreelast+0x1b5e>
f01294de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294e2:	75 17                	jne    f01294fb <test_kfreelast+0x1b5e>
f01294e4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294eb:	83 ec 0c             	sub    $0xc,%esp
f01294ee:	68 d8 9e 13 f0       	push   $0xf0139ed8
f01294f3:	e8 39 79 fd ff       	call   f0100e31 <cprintf>
f01294f8:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f01294fb:	ff 45 f4             	incl   -0xc(%ebp)
f01294fe:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129505:	7e bb                	jle    f01294c2 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129507:	83 ec 0c             	sub    $0xc,%esp
f012950a:	6a 00                	push   $0x0
f012950c:	e8 9c 35 fe ff       	call   f010caad <sys_bypassPageFault>
f0129511:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129514:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012951a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012951d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129524:	eb 1e                	jmp    f0129544 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129526:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f012952c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012952f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129532:	01 c8                	add    %ecx,%eax
f0129534:	8a 00                	mov    (%eax),%al
f0129536:	0f be c0             	movsbl %al,%eax
f0129539:	01 d0                	add    %edx,%eax
f012953b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129541:	ff 45 f4             	incl   -0xc(%ebp)
f0129544:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012954a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012954d:	7f d7                	jg     f0129526 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012954f:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129555:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f012955b:	89 d0                	mov    %edx,%eax
f012955d:	01 c0                	add    %eax,%eax
f012955f:	01 d0                	add    %edx,%eax
f0129561:	01 c0                	add    %eax,%eax
f0129563:	01 d0                	add    %edx,%eax
f0129565:	01 c0                	add    %eax,%eax
f0129567:	39 c1                	cmp    %eax,%ecx
f0129569:	74 1d                	je     f0129588 <test_kfreelast+0x1beb>
f012956b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012956f:	75 17                	jne    f0129588 <test_kfreelast+0x1beb>
f0129571:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129578:	83 ec 0c             	sub    $0xc,%esp
f012957b:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0129580:	e8 ac 78 fd ff       	call   f0100e31 <cprintf>
f0129585:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129588:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012958c:	75 17                	jne    f01295a5 <test_kfreelast+0x1c08>
f012958e:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129592:	83 ec 08             	sub    $0x8,%esp
f0129595:	ff 75 f0             	pushl  -0x10(%ebp)
f0129598:	68 2c 9d 13 f0       	push   $0xf0139d2c
f012959d:	e8 8f 78 fd ff       	call   f0100e31 <cprintf>
f01295a2:	83 c4 10             	add    $0x10,%esp
f01295a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01295ac:	e8 61 30 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01295b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295b4:	e8 ff ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01295b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f01295bc:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01295c2:	83 ec 0c             	sub    $0xc,%esp
f01295c5:	50                   	push   %eax
f01295c6:	e8 e2 e5 fd ff       	call   f0107bad <kfree>
f01295cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01295ce:	e8 e5 ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01295d3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295d6:	74 1d                	je     f01295f5 <test_kfreelast+0x1c58>
f01295d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295dc:	75 17                	jne    f01295f5 <test_kfreelast+0x1c58>
f01295de:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295e5:	83 ec 0c             	sub    $0xc,%esp
f01295e8:	68 54 9d 13 f0       	push   $0xf0139d54
f01295ed:	e8 3f 78 fd ff       	call   f0100e31 <cprintf>
f01295f2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01295f5:	e8 18 30 fe ff       	call   f010c612 <sys_calculate_free_frames>
f01295fa:	89 c2                	mov    %eax,%edx
f01295fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01295ff:	29 c2                	sub    %eax,%edx
f0129601:	89 d0                	mov    %edx,%eax
f0129603:	83 f8 02             	cmp    $0x2,%eax
f0129606:	74 1d                	je     f0129625 <test_kfreelast+0x1c88>
f0129608:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012960c:	75 17                	jne    f0129625 <test_kfreelast+0x1c88>
f012960e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129615:	83 ec 0c             	sub    $0xc,%esp
f0129618:	68 c0 9d 13 f0       	push   $0xf0139dc0
f012961d:	e8 0f 78 fd ff       	call   f0100e31 <cprintf>
f0129622:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129625:	e8 e8 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012962a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012962d:	e8 86 ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129632:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0129635:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012963b:	83 ec 0c             	sub    $0xc,%esp
f012963e:	50                   	push   %eax
f012963f:	e8 69 e5 fd ff       	call   f0107bad <kfree>
f0129644:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129647:	e8 6c ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012964c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012964f:	74 1d                	je     f012966e <test_kfreelast+0x1cd1>
f0129651:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129655:	75 17                	jne    f012966e <test_kfreelast+0x1cd1>
f0129657:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012965e:	83 ec 0c             	sub    $0xc,%esp
f0129661:	68 54 9d 13 f0       	push   $0xf0139d54
f0129666:	e8 c6 77 fd ff       	call   f0100e31 <cprintf>
f012966b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012966e:	e8 9f 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129673:	89 c2                	mov    %eax,%edx
f0129675:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129678:	29 c2                	sub    %eax,%edx
f012967a:	89 d0                	mov    %edx,%eax
f012967c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129681:	74 1d                	je     f01296a0 <test_kfreelast+0x1d03>
f0129683:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129687:	75 17                	jne    f01296a0 <test_kfreelast+0x1d03>
f0129689:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129690:	83 ec 0c             	sub    $0xc,%esp
f0129693:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0129698:	e8 94 77 fd ff       	call   f0100e31 <cprintf>
f012969d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01296a0:	e8 6d 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01296a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296a8:	e8 0b ac fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01296ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f01296b0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01296b6:	83 ec 0c             	sub    $0xc,%esp
f01296b9:	50                   	push   %eax
f01296ba:	e8 ee e4 fd ff       	call   f0107bad <kfree>
f01296bf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01296c2:	e8 f1 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01296c7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01296ca:	74 1d                	je     f01296e9 <test_kfreelast+0x1d4c>
f01296cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296d0:	75 17                	jne    f01296e9 <test_kfreelast+0x1d4c>
f01296d2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296d9:	83 ec 0c             	sub    $0xc,%esp
f01296dc:	68 54 9d 13 f0       	push   $0xf0139d54
f01296e1:	e8 4b 77 fd ff       	call   f0100e31 <cprintf>
f01296e6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01296e9:	e8 24 2f fe ff       	call   f010c612 <sys_calculate_free_frames>
f01296ee:	89 c2                	mov    %eax,%edx
f01296f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01296f3:	29 c2                	sub    %eax,%edx
f01296f5:	89 d0                	mov    %edx,%eax
f01296f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01296fc:	74 1d                	je     f012971b <test_kfreelast+0x1d7e>
f01296fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129702:	75 17                	jne    f012971b <test_kfreelast+0x1d7e>
f0129704:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012970b:	83 ec 0c             	sub    $0xc,%esp
f012970e:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0129713:	e8 19 77 fd ff       	call   f0100e31 <cprintf>
f0129718:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012971b:	e8 f2 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129720:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129723:	e8 90 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129728:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012972b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129731:	83 ec 0c             	sub    $0xc,%esp
f0129734:	50                   	push   %eax
f0129735:	e8 73 e4 fd ff       	call   f0107bad <kfree>
f012973a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012973d:	e8 76 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129742:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129745:	74 1d                	je     f0129764 <test_kfreelast+0x1dc7>
f0129747:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012974b:	75 17                	jne    f0129764 <test_kfreelast+0x1dc7>
f012974d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129754:	83 ec 0c             	sub    $0xc,%esp
f0129757:	68 54 9d 13 f0       	push   $0xf0139d54
f012975c:	e8 d0 76 fd ff       	call   f0100e31 <cprintf>
f0129761:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129764:	e8 a9 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129769:	89 c2                	mov    %eax,%edx
f012976b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012976e:	29 c2                	sub    %eax,%edx
f0129770:	89 d0                	mov    %edx,%eax
f0129772:	83 f8 01             	cmp    $0x1,%eax
f0129775:	74 1d                	je     f0129794 <test_kfreelast+0x1df7>
f0129777:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012977b:	75 17                	jne    f0129794 <test_kfreelast+0x1df7>
f012977d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129784:	83 ec 0c             	sub    $0xc,%esp
f0129787:	68 c0 9d 13 f0       	push   $0xf0139dc0
f012978c:	e8 a0 76 fd ff       	call   f0100e31 <cprintf>
f0129791:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129794:	e8 79 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129799:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012979c:	e8 17 ab fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01297a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f01297a4:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01297aa:	83 ec 0c             	sub    $0xc,%esp
f01297ad:	50                   	push   %eax
f01297ae:	e8 fa e3 fd ff       	call   f0107bad <kfree>
f01297b3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01297b6:	e8 fd aa fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01297bb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297be:	74 1d                	je     f01297dd <test_kfreelast+0x1e40>
f01297c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297c4:	75 17                	jne    f01297dd <test_kfreelast+0x1e40>
f01297c6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297cd:	83 ec 0c             	sub    $0xc,%esp
f01297d0:	68 54 9d 13 f0       	push   $0xf0139d54
f01297d5:	e8 57 76 fd ff       	call   f0100e31 <cprintf>
f01297da:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01297dd:	e8 30 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f01297e2:	89 c2                	mov    %eax,%edx
f01297e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01297e7:	29 c2                	sub    %eax,%edx
f01297e9:	89 d0                	mov    %edx,%eax
f01297eb:	83 f8 01             	cmp    $0x1,%eax
f01297ee:	74 1d                	je     f012980d <test_kfreelast+0x1e70>
f01297f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297f4:	75 17                	jne    f012980d <test_kfreelast+0x1e70>
f01297f6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297fd:	83 ec 0c             	sub    $0xc,%esp
f0129800:	68 c0 9d 13 f0       	push   $0xf0139dc0
f0129805:	e8 27 76 fd ff       	call   f0100e31 <cprintf>
f012980a:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012980d:	e8 00 2e fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129812:	89 c2                	mov    %eax,%edx
f0129814:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129817:	39 c2                	cmp    %eax,%edx
f0129819:	74 1d                	je     f0129838 <test_kfreelast+0x1e9b>
f012981b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012981f:	75 17                	jne    f0129838 <test_kfreelast+0x1e9b>
f0129821:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129828:	83 ec 0c             	sub    $0xc,%esp
f012982b:	68 20 9f 13 f0       	push   $0xf0139f20
f0129830:	e8 fc 75 fd ff       	call   f0100e31 <cprintf>
f0129835:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129838:	83 ec 0c             	sub    $0xc,%esp
f012983b:	6a 03                	push   $0x3
f012983d:	e8 6b 32 fe ff       	call   f010caad <sys_bypassPageFault>
f0129842:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129845:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012984c:	e9 8e 00 00 00       	jmp    f01298df <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129851:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129854:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f012985b:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f012985e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129861:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129864:	e8 32 32 fe ff       	call   f010ca9b <sys_rcr2>
f0129869:	89 c2                	mov    %eax,%edx
f012986b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012986e:	39 c2                	cmp    %eax,%edx
f0129870:	74 1d                	je     f012988f <test_kfreelast+0x1ef2>
f0129872:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129876:	75 17                	jne    f012988f <test_kfreelast+0x1ef2>
f0129878:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012987f:	83 ec 0c             	sub    $0xc,%esp
f0129882:	68 d8 9e 13 f0       	push   $0xf0139ed8
f0129887:	e8 a5 75 fd ff       	call   f0100e31 <cprintf>
f012988c:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012988f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129892:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129899:	89 c2                	mov    %eax,%edx
f012989b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012989e:	01 d0                	add    %edx,%eax
f01298a0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01298a3:	e8 f3 31 fe ff       	call   f010ca9b <sys_rcr2>
f01298a8:	89 c2                	mov    %eax,%edx
f01298aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01298ad:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f01298b4:	89 c1                	mov    %eax,%ecx
f01298b6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01298b9:	01 c8                	add    %ecx,%eax
f01298bb:	39 c2                	cmp    %eax,%edx
f01298bd:	74 1d                	je     f01298dc <test_kfreelast+0x1f3f>
f01298bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298c3:	75 17                	jne    f01298dc <test_kfreelast+0x1f3f>
f01298c5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01298cc:	83 ec 0c             	sub    $0xc,%esp
f01298cf:	68 d8 9e 13 f0       	push   $0xf0139ed8
f01298d4:	e8 58 75 fd ff       	call   f0100e31 <cprintf>
f01298d9:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f01298dc:	ff 45 f4             	incl   -0xc(%ebp)
f01298df:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f01298e3:	0f 8e 68 ff ff ff    	jle    f0129851 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01298e9:	83 ec 0c             	sub    $0xc,%esp
f01298ec:	6a 00                	push   $0x0
f01298ee:	e8 ba 31 fe ff       	call   f010caad <sys_bypassPageFault>
f01298f3:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01298f6:	e8 17 2d fe ff       	call   f010c612 <sys_calculate_free_frames>
f01298fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298fe:	e8 b5 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129903:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129906:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012990c:	83 ec 0c             	sub    $0xc,%esp
f012990f:	50                   	push   %eax
f0129910:	e8 98 e2 fd ff       	call   f0107bad <kfree>
f0129915:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129918:	e8 9b a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012991d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129920:	74 1d                	je     f012993f <test_kfreelast+0x1fa2>
f0129922:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129926:	75 17                	jne    f012993f <test_kfreelast+0x1fa2>
f0129928:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012992f:	83 ec 0c             	sub    $0xc,%esp
f0129932:	68 54 9d 13 f0       	push   $0xf0139d54
f0129937:	e8 f5 74 fd ff       	call   f0100e31 <cprintf>
f012993c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012993f:	e8 ce 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129944:	89 c2                	mov    %eax,%edx
f0129946:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129949:	39 c2                	cmp    %eax,%edx
f012994b:	74 1d                	je     f012996a <test_kfreelast+0x1fcd>
f012994d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129951:	75 17                	jne    f012996a <test_kfreelast+0x1fcd>
f0129953:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012995a:	83 ec 0c             	sub    $0xc,%esp
f012995d:	68 58 9f 13 f0       	push   $0xf0139f58
f0129962:	e8 ca 74 fd ff       	call   f0100e31 <cprintf>
f0129967:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012996a:	e8 a3 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012996f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129972:	e8 41 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129977:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012997a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129980:	83 ec 0c             	sub    $0xc,%esp
f0129983:	50                   	push   %eax
f0129984:	e8 24 e2 fd ff       	call   f0107bad <kfree>
f0129989:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012998c:	e8 27 a9 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129991:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129994:	74 1d                	je     f01299b3 <test_kfreelast+0x2016>
f0129996:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012999a:	75 17                	jne    f01299b3 <test_kfreelast+0x2016>
f012999c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299a3:	83 ec 0c             	sub    $0xc,%esp
f01299a6:	68 54 9d 13 f0       	push   $0xf0139d54
f01299ab:	e8 81 74 fd ff       	call   f0100e31 <cprintf>
f01299b0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f01299b3:	e8 5a 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01299b8:	89 c2                	mov    %eax,%edx
f01299ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299bd:	39 c2                	cmp    %eax,%edx
f01299bf:	74 1d                	je     f01299de <test_kfreelast+0x2041>
f01299c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299c5:	75 17                	jne    f01299de <test_kfreelast+0x2041>
f01299c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299ce:	83 ec 0c             	sub    $0xc,%esp
f01299d1:	68 58 9f 13 f0       	push   $0xf0139f58
f01299d6:	e8 56 74 fd ff       	call   f0100e31 <cprintf>
f01299db:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01299de:	e8 2f 2c fe ff       	call   f010c612 <sys_calculate_free_frames>
f01299e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299e6:	e8 cd a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f01299eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f01299ee:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01299f4:	83 ec 0c             	sub    $0xc,%esp
f01299f7:	50                   	push   %eax
f01299f8:	e8 b0 e1 fd ff       	call   f0107bad <kfree>
f01299fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a00:	e8 b3 a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129a05:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a08:	74 1d                	je     f0129a27 <test_kfreelast+0x208a>
f0129a0a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a0e:	75 17                	jne    f0129a27 <test_kfreelast+0x208a>
f0129a10:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a17:	83 ec 0c             	sub    $0xc,%esp
f0129a1a:	68 54 9d 13 f0       	push   $0xf0139d54
f0129a1f:	e8 0d 74 fd ff       	call   f0100e31 <cprintf>
f0129a24:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129a27:	e8 e6 2b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129a2c:	89 c2                	mov    %eax,%edx
f0129a2e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a31:	39 c2                	cmp    %eax,%edx
f0129a33:	74 1d                	je     f0129a52 <test_kfreelast+0x20b5>
f0129a35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a39:	75 17                	jne    f0129a52 <test_kfreelast+0x20b5>
f0129a3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a42:	83 ec 0c             	sub    $0xc,%esp
f0129a45:	68 58 9f 13 f0       	push   $0xf0139f58
f0129a4a:	e8 e2 73 fd ff       	call   f0100e31 <cprintf>
f0129a4f:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a52:	e8 bb 2b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129a57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a5a:	e8 59 a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129a5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129a62:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129a68:	83 ec 0c             	sub    $0xc,%esp
f0129a6b:	50                   	push   %eax
f0129a6c:	e8 3c e1 fd ff       	call   f0107bad <kfree>
f0129a71:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a74:	e8 3f a8 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f0129a79:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a7c:	74 1d                	je     f0129a9b <test_kfreelast+0x20fe>
f0129a7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a82:	75 17                	jne    f0129a9b <test_kfreelast+0x20fe>
f0129a84:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a8b:	83 ec 0c             	sub    $0xc,%esp
f0129a8e:	68 54 9d 13 f0       	push   $0xf0139d54
f0129a93:	e8 99 73 fd ff       	call   f0100e31 <cprintf>
f0129a98:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129a9b:	e8 72 2b fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129aa0:	89 c2                	mov    %eax,%edx
f0129aa2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129aa5:	39 c2                	cmp    %eax,%edx
f0129aa7:	74 1d                	je     f0129ac6 <test_kfreelast+0x2129>
f0129aa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129aad:	75 17                	jne    f0129ac6 <test_kfreelast+0x2129>
f0129aaf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ab6:	83 ec 0c             	sub    $0xc,%esp
f0129ab9:	68 58 9f 13 f0       	push   $0xf0139f58
f0129abe:	e8 6e 73 fd ff       	call   f0100e31 <cprintf>
f0129ac3:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129aca:	75 17                	jne    f0129ae3 <test_kfreelast+0x2146>
f0129acc:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129ad0:	83 ec 08             	sub    $0x8,%esp
f0129ad3:	ff 75 f0             	pushl  -0x10(%ebp)
f0129ad6:	68 2c 9d 13 f0       	push   $0xf0139d2c
f0129adb:	e8 51 73 fd ff       	call   f0100e31 <cprintf>
f0129ae0:	83 c4 10             	add    $0x10,%esp
f0129ae3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129aea:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129aef:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129af2:	5b                   	pop    %ebx
f0129af3:	5f                   	pop    %edi
f0129af4:	5d                   	pop    %ebp
f0129af5:	c3                   	ret    

f0129af6 <test_krealloc>:

int test_krealloc() {
f0129af6:	55                   	push   %ebp
f0129af7:	89 e5                	mov    %esp,%ebp
f0129af9:	57                   	push   %edi
f0129afa:	53                   	push   %ebx
f0129afb:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129b01:	83 ec 0c             	sub    $0xc,%esp
f0129b04:	68 3c 8c 13 f0       	push   $0xf0138c3c
f0129b09:	e8 23 73 fd ff       	call   f0100e31 <cprintf>
f0129b0e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129b11:	83 ec 0c             	sub    $0xc,%esp
f0129b14:	68 6c 8c 13 f0       	push   $0xf0138c6c
f0129b19:	e8 13 73 fd ff       	call   f0100e31 <cprintf>
f0129b1e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129b21:	83 ec 0c             	sub    $0xc,%esp
f0129b24:	68 3c 8c 13 f0       	push   $0xf0138c3c
f0129b29:	e8 03 73 fd ff       	call   f0100e31 <cprintf>
f0129b2e:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129b31:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129b35:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129b39:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129b3f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129b45:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129b4c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129b53:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129b59:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b63:	89 d7                	mov    %edx,%edi
f0129b65:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129b67:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129b6e:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129b74:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b79:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b7e:	89 d7                	mov    %edx,%edi
f0129b80:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129b82:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129b88:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b92:	89 d7                	mov    %edx,%edi
f0129b94:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129b96:	e8 77 2a fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129b9b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129b9e:	83 ec 08             	sub    $0x8,%esp
f0129ba1:	68 00 fc 0f 00       	push   $0xffc00
f0129ba6:	6a 00                	push   $0x0
f0129ba8:	e8 9c e0 fd ff       	call   f0107c49 <krealloc>
f0129bad:	83 c4 10             	add    $0x10,%esp
f0129bb0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129bb6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129bbc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129bc1:	77 17                	ja     f0129bda <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129bc3:	83 ec 04             	sub    $0x4,%esp
f0129bc6:	68 a0 9f 13 f0       	push   $0xf0139fa0
f0129bcb:	68 e2 0e 00 00       	push   $0xee2
f0129bd0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129bd5:	e8 d6 65 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129bda:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129be0:	89 c1                	mov    %eax,%ecx
f0129be2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129be9:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129bee:	0f b6 d0             	movzbl %al,%edx
f0129bf1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129bf4:	01 d0                	add    %edx,%eax
f0129bf6:	48                   	dec    %eax
f0129bf7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129bfa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129bfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c02:	f7 75 b4             	divl   -0x4c(%ebp)
f0129c05:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129c08:	29 d0                	sub    %edx,%eax
f0129c0a:	89 c3                	mov    %eax,%ebx
f0129c0c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129c13:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129c18:	0f b6 c0             	movzbl %al,%eax
f0129c1b:	c1 e0 04             	shl    $0x4,%eax
f0129c1e:	89 c2                	mov    %eax,%edx
f0129c20:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129c23:	01 d0                	add    %edx,%eax
f0129c25:	48                   	dec    %eax
f0129c26:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129c29:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c31:	f7 75 ac             	divl   -0x54(%ebp)
f0129c34:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129c37:	29 d0                	sub    %edx,%eax
f0129c39:	01 d8                	add    %ebx,%eax
f0129c3b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129c40:	39 c1                	cmp    %eax,%ecx
f0129c42:	74 17                	je     f0129c5b <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129c44:	83 ec 04             	sub    $0x4,%esp
f0129c47:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0129c4c:	68 e4 0e 00 00       	push   $0xee4
f0129c51:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129c56:	e8 55 65 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129c5b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129c5e:	e8 af 29 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129c63:	29 c3                	sub    %eax,%ebx
f0129c65:	89 d8                	mov    %ebx,%eax
f0129c67:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129c6c:	74 17                	je     f0129c85 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f0129c6e:	83 ec 04             	sub    $0x4,%esp
f0129c71:	68 0e a0 13 f0       	push   $0xf013a00e
f0129c76:	68 e7 0e 00 00       	push   $0xee7
f0129c7b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129c80:	e8 2b 65 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129c85:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f0129c8c:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129c8f:	e8 7e 29 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129c94:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f0129c97:	83 ec 08             	sub    $0x8,%esp
f0129c9a:	68 00 fc 0f 00       	push   $0xffc00
f0129c9f:	6a 00                	push   $0x0
f0129ca1:	e8 a3 df fd ff       	call   f0107c49 <krealloc>
f0129ca6:	83 c4 10             	add    $0x10,%esp
f0129ca9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f0129caf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129cb5:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f0129cba:	77 17                	ja     f0129cd3 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129cbc:	83 ec 04             	sub    $0x4,%esp
f0129cbf:	68 a0 9f 13 f0       	push   $0xf0139fa0
f0129cc4:	68 ef 0e 00 00       	push   $0xeef
f0129cc9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129cce:	e8 dd 64 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f0129cd3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129cd9:	89 c1                	mov    %eax,%ecx
f0129cdb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129ce2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129ce7:	0f b6 d0             	movzbl %al,%edx
f0129cea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129ced:	01 d0                	add    %edx,%eax
f0129cef:	48                   	dec    %eax
f0129cf0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129cf3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129cf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cfb:	f7 75 a4             	divl   -0x5c(%ebp)
f0129cfe:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129d01:	29 d0                	sub    %edx,%eax
f0129d03:	89 c3                	mov    %eax,%ebx
f0129d05:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129d0c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129d11:	0f b6 c0             	movzbl %al,%eax
f0129d14:	c1 e0 04             	shl    $0x4,%eax
f0129d17:	89 c2                	mov    %eax,%edx
f0129d19:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129d1c:	01 d0                	add    %edx,%eax
f0129d1e:	48                   	dec    %eax
f0129d1f:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129d22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129d25:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d2a:	f7 75 9c             	divl   -0x64(%ebp)
f0129d2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129d30:	29 d0                	sub    %edx,%eax
f0129d32:	01 d8                	add    %ebx,%eax
f0129d34:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0129d39:	39 c1                	cmp    %eax,%ecx
f0129d3b:	74 17                	je     f0129d54 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f0129d3d:	83 ec 04             	sub    $0x4,%esp
f0129d40:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0129d45:	68 f1 0e 00 00       	push   $0xef1
f0129d4a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129d4f:	e8 5c 64 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129d54:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129d57:	e8 b6 28 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129d5c:	29 c3                	sub    %eax,%ebx
f0129d5e:	89 d8                	mov    %ebx,%eax
f0129d60:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129d65:	74 17                	je     f0129d7e <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f0129d67:	83 ec 04             	sub    $0x4,%esp
f0129d6a:	68 0e a0 13 f0       	push   $0xf013a00e
f0129d6f:	68 f3 0e 00 00       	push   $0xef3
f0129d74:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129d79:	e8 32 64 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f0129d7e:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f0129d85:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129d88:	e8 85 28 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129d8d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f0129d90:	83 ec 08             	sub    $0x8,%esp
f0129d93:	68 00 fc 0f 00       	push   $0xffc00
f0129d98:	6a 00                	push   $0x0
f0129d9a:	e8 aa de fd ff       	call   f0107c49 <krealloc>
f0129d9f:	83 c4 10             	add    $0x10,%esp
f0129da2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f0129da8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129dae:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f0129db3:	77 17                	ja     f0129dcc <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129db5:	83 ec 04             	sub    $0x4,%esp
f0129db8:	68 a0 9f 13 f0       	push   $0xf0139fa0
f0129dbd:	68 fb 0e 00 00       	push   $0xefb
f0129dc2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129dc7:	e8 e4 63 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f0129dcc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129dd2:	89 c1                	mov    %eax,%ecx
f0129dd4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129ddb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129de0:	0f b6 d0             	movzbl %al,%edx
f0129de3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129de6:	01 d0                	add    %edx,%eax
f0129de8:	48                   	dec    %eax
f0129de9:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129dec:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129def:	ba 00 00 00 00       	mov    $0x0,%edx
f0129df4:	f7 75 94             	divl   -0x6c(%ebp)
f0129df7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129dfa:	29 d0                	sub    %edx,%eax
f0129dfc:	89 c3                	mov    %eax,%ebx
f0129dfe:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129e05:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129e0a:	0f b6 c0             	movzbl %al,%eax
f0129e0d:	c1 e0 04             	shl    $0x4,%eax
f0129e10:	89 c2                	mov    %eax,%edx
f0129e12:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129e15:	01 d0                	add    %edx,%eax
f0129e17:	48                   	dec    %eax
f0129e18:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129e1b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129e1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e23:	f7 75 8c             	divl   -0x74(%ebp)
f0129e26:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129e29:	29 d0                	sub    %edx,%eax
f0129e2b:	01 d8                	add    %ebx,%eax
f0129e2d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129e32:	39 c1                	cmp    %eax,%ecx
f0129e34:	74 17                	je     f0129e4d <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f0129e36:	83 ec 04             	sub    $0x4,%esp
f0129e39:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0129e3e:	68 fd 0e 00 00       	push   $0xefd
f0129e43:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129e48:	e8 63 63 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129e4d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129e50:	e8 bd 27 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129e55:	29 c3                	sub    %eax,%ebx
f0129e57:	89 d8                	mov    %ebx,%eax
f0129e59:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129e5e:	74 17                	je     f0129e77 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f0129e60:	83 ec 04             	sub    $0x4,%esp
f0129e63:	68 0e a0 13 f0       	push   $0xf013a00e
f0129e68:	68 ff 0e 00 00       	push   $0xeff
f0129e6d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129e72:	e8 39 63 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f0129e77:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f0129e7e:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129e81:	e8 8c 27 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129e86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f0129e89:	83 ec 08             	sub    $0x8,%esp
f0129e8c:	68 00 fc 0f 00       	push   $0xffc00
f0129e91:	6a 00                	push   $0x0
f0129e93:	e8 b1 dd fd ff       	call   f0107c49 <krealloc>
f0129e98:	83 c4 10             	add    $0x10,%esp
f0129e9b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f0129ea1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129ea7:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f0129eac:	77 17                	ja     f0129ec5 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129eae:	83 ec 04             	sub    $0x4,%esp
f0129eb1:	68 a0 9f 13 f0       	push   $0xf0139fa0
f0129eb6:	68 06 0f 00 00       	push   $0xf06
f0129ebb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129ec0:	e8 eb 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f0129ec5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129ecb:	89 c1                	mov    %eax,%ecx
f0129ecd:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0129ed4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129ed9:	0f b6 d0             	movzbl %al,%edx
f0129edc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129edf:	01 d0                	add    %edx,%eax
f0129ee1:	48                   	dec    %eax
f0129ee2:	89 45 80             	mov    %eax,-0x80(%ebp)
f0129ee5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129ee8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129eed:	f7 75 84             	divl   -0x7c(%ebp)
f0129ef0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129ef3:	29 d0                	sub    %edx,%eax
f0129ef5:	89 c3                	mov    %eax,%ebx
f0129ef7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0129efe:	10 00 00 
f0129f01:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129f06:	0f b6 c0             	movzbl %al,%eax
f0129f09:	c1 e0 04             	shl    $0x4,%eax
f0129f0c:	89 c2                	mov    %eax,%edx
f0129f0e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129f14:	01 d0                	add    %edx,%eax
f0129f16:	48                   	dec    %eax
f0129f17:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0129f1d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129f23:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f28:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0129f2e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129f34:	29 d0                	sub    %edx,%eax
f0129f36:	01 d8                	add    %ebx,%eax
f0129f38:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0129f3d:	39 c1                	cmp    %eax,%ecx
f0129f3f:	74 17                	je     f0129f58 <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f0129f41:	83 ec 04             	sub    $0x4,%esp
f0129f44:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0129f49:	68 08 0f 00 00       	push   $0xf08
f0129f4e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129f53:	e8 58 62 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129f58:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129f5b:	e8 b2 26 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129f60:	29 c3                	sub    %eax,%ebx
f0129f62:	89 d8                	mov    %ebx,%eax
f0129f64:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129f69:	74 17                	je     f0129f82 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f0129f6b:	83 ec 04             	sub    $0x4,%esp
f0129f6e:	68 0e a0 13 f0       	push   $0xf013a00e
f0129f73:	68 0a 0f 00 00       	push   $0xf0a
f0129f78:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129f7d:	e8 2e 62 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f0129f82:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f0129f89:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f0129f8c:	e8 81 26 fe ff       	call   f010c612 <sys_calculate_free_frames>
f0129f91:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f0129f94:	83 ec 08             	sub    $0x8,%esp
f0129f97:	68 00 fc 1f 00       	push   $0x1ffc00
f0129f9c:	6a 00                	push   $0x0
f0129f9e:	e8 a6 dc fd ff       	call   f0107c49 <krealloc>
f0129fa3:	83 c4 10             	add    $0x10,%esp
f0129fa6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f0129fac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129fb2:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f0129fb7:	77 17                	ja     f0129fd0 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129fb9:	83 ec 04             	sub    $0x4,%esp
f0129fbc:	68 a0 9f 13 f0       	push   $0xf0139fa0
f0129fc1:	68 11 0f 00 00       	push   $0xf11
f0129fc6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f0129fcb:	e8 e0 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f0129fd0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129fd6:	89 c1                	mov    %eax,%ecx
f0129fd8:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0129fdf:	10 00 00 
f0129fe2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f0129fe7:	0f b6 d0             	movzbl %al,%edx
f0129fea:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129ff0:	01 d0                	add    %edx,%eax
f0129ff2:	48                   	dec    %eax
f0129ff3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0129ff9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129fff:	ba 00 00 00 00       	mov    $0x0,%edx
f012a004:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a00a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a010:	29 d0                	sub    %edx,%eax
f012a012:	89 c3                	mov    %eax,%ebx
f012a014:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a01b:	10 00 00 
f012a01e:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a023:	0f b6 c0             	movzbl %al,%eax
f012a026:	c1 e0 04             	shl    $0x4,%eax
f012a029:	89 c2                	mov    %eax,%edx
f012a02b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a031:	01 d0                	add    %edx,%eax
f012a033:	48                   	dec    %eax
f012a034:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a03a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a040:	ba 00 00 00 00       	mov    $0x0,%edx
f012a045:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a04b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a051:	29 d0                	sub    %edx,%eax
f012a053:	01 d8                	add    %ebx,%eax
f012a055:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a05a:	39 c1                	cmp    %eax,%ecx
f012a05c:	74 17                	je     f012a075 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a05e:	83 ec 04             	sub    $0x4,%esp
f012a061:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012a066:	68 13 0f 00 00       	push   $0xf13
f012a06b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a070:	e8 3b 61 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a075:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a078:	e8 95 25 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a07d:	29 c3                	sub    %eax,%ebx
f012a07f:	89 d8                	mov    %ebx,%eax
f012a081:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a086:	74 17                	je     f012a09f <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a088:	83 ec 04             	sub    $0x4,%esp
f012a08b:	68 0e a0 13 f0       	push   $0xf013a00e
f012a090:	68 15 0f 00 00       	push   $0xf15
f012a095:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a09a:	e8 11 61 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a09f:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a0a6:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a0a9:	e8 64 25 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a0ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a0b1:	83 ec 08             	sub    $0x8,%esp
f012a0b4:	68 00 fc 1f 00       	push   $0x1ffc00
f012a0b9:	6a 00                	push   $0x0
f012a0bb:	e8 89 db fd ff       	call   f0107c49 <krealloc>
f012a0c0:	83 c4 10             	add    $0x10,%esp
f012a0c3:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a0c9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a0cf:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a0d4:	77 17                	ja     f012a0ed <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a0d6:	83 ec 04             	sub    $0x4,%esp
f012a0d9:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012a0de:	68 1c 0f 00 00       	push   $0xf1c
f012a0e3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a0e8:	e8 c3 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a0ed:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a0f3:	89 c1                	mov    %eax,%ecx
f012a0f5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a0fc:	10 00 00 
f012a0ff:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a104:	0f b6 d0             	movzbl %al,%edx
f012a107:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a10d:	01 d0                	add    %edx,%eax
f012a10f:	48                   	dec    %eax
f012a110:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a116:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a11c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a121:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a127:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a12d:	29 d0                	sub    %edx,%eax
f012a12f:	89 c3                	mov    %eax,%ebx
f012a131:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a138:	10 00 00 
f012a13b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a140:	0f b6 c0             	movzbl %al,%eax
f012a143:	c1 e0 04             	shl    $0x4,%eax
f012a146:	89 c2                	mov    %eax,%edx
f012a148:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a14e:	01 d0                	add    %edx,%eax
f012a150:	48                   	dec    %eax
f012a151:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a157:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a15d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a162:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a168:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a16e:	29 d0                	sub    %edx,%eax
f012a170:	01 d8                	add    %ebx,%eax
f012a172:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a177:	39 c1                	cmp    %eax,%ecx
f012a179:	74 17                	je     f012a192 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a17b:	83 ec 04             	sub    $0x4,%esp
f012a17e:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012a183:	68 1e 0f 00 00       	push   $0xf1e
f012a188:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a18d:	e8 1e 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a192:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a195:	e8 78 24 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a19a:	29 c3                	sub    %eax,%ebx
f012a19c:	89 d8                	mov    %ebx,%eax
f012a19e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a1a3:	74 17                	je     f012a1bc <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a1a5:	83 ec 04             	sub    $0x4,%esp
f012a1a8:	68 0e a0 13 f0       	push   $0xf013a00e
f012a1ad:	68 20 0f 00 00       	push   $0xf20
f012a1b2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a1b7:	e8 f4 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a1bc:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a1c3:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a1c6:	e8 47 24 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a1cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a1ce:	83 ec 08             	sub    $0x8,%esp
f012a1d1:	68 00 fc 2f 00       	push   $0x2ffc00
f012a1d6:	6a 00                	push   $0x0
f012a1d8:	e8 6c da fd ff       	call   f0107c49 <krealloc>
f012a1dd:	83 c4 10             	add    $0x10,%esp
f012a1e0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a1e6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a1ec:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a1f1:	77 17                	ja     f012a20a <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a1f3:	83 ec 04             	sub    $0x4,%esp
f012a1f6:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012a1fb:	68 27 0f 00 00       	push   $0xf27
f012a200:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a205:	e8 a6 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a20a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a210:	89 c1                	mov    %eax,%ecx
f012a212:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a219:	10 00 00 
f012a21c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a221:	0f b6 d0             	movzbl %al,%edx
f012a224:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a22a:	01 d0                	add    %edx,%eax
f012a22c:	48                   	dec    %eax
f012a22d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a233:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a239:	ba 00 00 00 00       	mov    $0x0,%edx
f012a23e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a244:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a24a:	29 d0                	sub    %edx,%eax
f012a24c:	89 c3                	mov    %eax,%ebx
f012a24e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a255:	10 00 00 
f012a258:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a25d:	0f b6 c0             	movzbl %al,%eax
f012a260:	c1 e0 04             	shl    $0x4,%eax
f012a263:	89 c2                	mov    %eax,%edx
f012a265:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a26b:	01 d0                	add    %edx,%eax
f012a26d:	48                   	dec    %eax
f012a26e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a274:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a27a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a27f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a285:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a28b:	29 d0                	sub    %edx,%eax
f012a28d:	01 d8                	add    %ebx,%eax
f012a28f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a294:	39 c1                	cmp    %eax,%ecx
f012a296:	74 17                	je     f012a2af <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a298:	83 ec 04             	sub    $0x4,%esp
f012a29b:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012a2a0:	68 29 0f 00 00       	push   $0xf29
f012a2a5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a2aa:	e8 01 5f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a2af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a2b2:	e8 5b 23 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a2b7:	29 c3                	sub    %eax,%ebx
f012a2b9:	89 d8                	mov    %ebx,%eax
f012a2bb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a2c0:	74 17                	je     f012a2d9 <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a2c2:	83 ec 04             	sub    $0x4,%esp
f012a2c5:	68 44 91 13 f0       	push   $0xf0139144
f012a2ca:	68 2b 0f 00 00       	push   $0xf2b
f012a2cf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a2d4:	e8 d7 5e fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a2d9:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a2e0:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a2e3:	e8 2a 23 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a2e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a2eb:	83 ec 08             	sub    $0x8,%esp
f012a2ee:	68 00 fc 2f 00       	push   $0x2ffc00
f012a2f3:	6a 00                	push   $0x0
f012a2f5:	e8 4f d9 fd ff       	call   f0107c49 <krealloc>
f012a2fa:	83 c4 10             	add    $0x10,%esp
f012a2fd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a303:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a309:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a30e:	77 17                	ja     f012a327 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a310:	83 ec 04             	sub    $0x4,%esp
f012a313:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012a318:	68 32 0f 00 00       	push   $0xf32
f012a31d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a322:	e8 89 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a327:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a32d:	89 c1                	mov    %eax,%ecx
f012a32f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a336:	10 00 00 
f012a339:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a33e:	0f b6 d0             	movzbl %al,%edx
f012a341:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a347:	01 d0                	add    %edx,%eax
f012a349:	48                   	dec    %eax
f012a34a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a350:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a356:	ba 00 00 00 00       	mov    $0x0,%edx
f012a35b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a361:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a367:	29 d0                	sub    %edx,%eax
f012a369:	89 c3                	mov    %eax,%ebx
f012a36b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a372:	10 00 00 
f012a375:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012a37a:	0f b6 c0             	movzbl %al,%eax
f012a37d:	c1 e0 04             	shl    $0x4,%eax
f012a380:	89 c2                	mov    %eax,%edx
f012a382:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a388:	01 d0                	add    %edx,%eax
f012a38a:	48                   	dec    %eax
f012a38b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a391:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a397:	ba 00 00 00 00       	mov    $0x0,%edx
f012a39c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a3a2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a3a8:	29 d0                	sub    %edx,%eax
f012a3aa:	01 d8                	add    %ebx,%eax
f012a3ac:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a3b1:	39 c1                	cmp    %eax,%ecx
f012a3b3:	74 17                	je     f012a3cc <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a3b5:	83 ec 04             	sub    $0x4,%esp
f012a3b8:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012a3bd:	68 34 0f 00 00       	push   $0xf34
f012a3c2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a3c7:	e8 e4 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a3cc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a3cf:	e8 3e 22 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a3d4:	29 c3                	sub    %eax,%ebx
f012a3d6:	89 d8                	mov    %ebx,%eax
f012a3d8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a3dd:	74 17                	je     f012a3f6 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a3df:	83 ec 04             	sub    $0x4,%esp
f012a3e2:	68 0e a0 13 f0       	push   $0xf013a00e
f012a3e7:	68 36 0f 00 00       	push   $0xf36
f012a3ec:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a3f1:	e8 ba 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a3f6:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a3fd:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a400:	e8 0d 22 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a405:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a408:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a40f:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a412:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a418:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a41e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a424:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a427:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a429:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a42f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a435:	01 c2                	add    %eax,%edx
f012a437:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a43a:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a43c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a442:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a448:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a44f:	eb 11                	jmp    f012a462 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a451:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a454:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a45a:	01 d0                	add    %edx,%eax
f012a45c:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a45f:	ff 45 f4             	incl   -0xc(%ebp)
f012a462:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a468:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a46b:	7d e4                	jge    f012a451 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a46d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a473:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a479:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a47f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a485:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a48b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a492:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a498:	01 d0                	add    %edx,%eax
f012a49a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a4a0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a4a6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a4ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a4b3:	eb 1b                	jmp    f012a4d0 <test_krealloc+0x9da>
			intArr[i] = 4;
f012a4b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a4b8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a4bf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a4c5:	01 d0                	add    %edx,%eax
f012a4c7:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a4cd:	ff 45 f0             	incl   -0x10(%ebp)
f012a4d0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a4d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a4d9:	7d da                	jge    f012a4b5 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a4db:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a4e1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a4e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a4ee:	eb 17                	jmp    f012a507 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a4f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a4f3:	01 c0                	add    %eax,%eax
f012a4f5:	89 c2                	mov    %eax,%edx
f012a4f7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a4fd:	01 d0                	add    %edx,%eax
f012a4ff:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a504:	ff 45 ec             	incl   -0x14(%ebp)
f012a507:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a50d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a510:	7d de                	jge    f012a4f0 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a512:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a518:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a51e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a524:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a529:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a52f:	01 c0                	add    %eax,%eax
f012a531:	89 c2                	mov    %eax,%edx
f012a533:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a539:	01 d0                	add    %edx,%eax
f012a53b:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a540:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a546:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a54c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a553:	eb 49                	jmp    f012a59e <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a555:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a558:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a55f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a565:	01 d0                	add    %edx,%eax
f012a567:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a56a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a56d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a574:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a57a:	01 d0                	add    %edx,%eax
f012a57c:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a582:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a585:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a58c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a592:	01 d0                	add    %edx,%eax
f012a594:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a59b:	ff 45 e8             	incl   -0x18(%ebp)
f012a59e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a5a4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a5a7:	7d ac                	jge    f012a555 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a5a9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a5af:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a5b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5bb:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a5be:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a5ca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5d0:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a5d7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a5dd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a5e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a5ea:	01 d0                	add    %edx,%eax
f012a5ec:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a5ef:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a5f5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a5fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a602:	01 d0                	add    %edx,%eax
f012a604:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a60a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a610:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a617:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a61d:	01 d0                	add    %edx,%eax
f012a61f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a626:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a62c:	8a 00                	mov    (%eax),%al
f012a62e:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a631:	75 17                	jne    f012a64a <test_krealloc+0xb54>
f012a633:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a639:	89 c2                	mov    %eax,%edx
f012a63b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a641:	01 d0                	add    %edx,%eax
f012a643:	8a 00                	mov    (%eax),%al
f012a645:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a648:	74 17                	je     f012a661 <test_krealloc+0xb6b>
			panic(
f012a64a:	83 ec 04             	sub    $0x4,%esp
f012a64d:	68 2c a0 13 f0       	push   $0xf013a02c
f012a652:	68 79 0f 00 00       	push   $0xf79
f012a657:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a65c:	e8 4f 5b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012a661:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a667:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012a66d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a673:	8a 00                	mov    (%eax),%al
f012a675:	3c 02                	cmp    $0x2,%al
f012a677:	75 16                	jne    f012a68f <test_krealloc+0xb99>
f012a679:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a67f:	89 c2                	mov    %eax,%edx
f012a681:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a687:	01 d0                	add    %edx,%eax
f012a689:	8a 00                	mov    (%eax),%al
f012a68b:	3c 02                	cmp    $0x2,%al
f012a68d:	74 20                	je     f012a6af <test_krealloc+0xbb9>
			panic(
f012a68f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a695:	8a 00                	mov    (%eax),%al
f012a697:	0f be c0             	movsbl %al,%eax
f012a69a:	50                   	push   %eax
f012a69b:	68 6c a0 13 f0       	push   $0xf013a06c
f012a6a0:	68 7f 0f 00 00       	push   $0xf7f
f012a6a5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a6aa:	e8 01 5b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012a6af:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a6b5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012a6bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a6c1:	8b 00                	mov    (%eax),%eax
f012a6c3:	83 f8 03             	cmp    $0x3,%eax
f012a6c6:	75 1c                	jne    f012a6e4 <test_krealloc+0xbee>
f012a6c8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a6ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a6d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a6db:	01 d0                	add    %edx,%eax
f012a6dd:	8b 00                	mov    (%eax),%eax
f012a6df:	83 f8 03             	cmp    $0x3,%eax
f012a6e2:	74 17                	je     f012a6fb <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012a6e4:	83 ec 04             	sub    $0x4,%esp
f012a6e7:	68 b8 a0 13 f0       	push   $0xf013a0b8
f012a6ec:	68 83 0f 00 00       	push   $0xf83
f012a6f1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a6f6:	e8 b5 5a fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012a6fb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a701:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012a707:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a70d:	8b 00                	mov    (%eax),%eax
f012a70f:	83 f8 04             	cmp    $0x4,%eax
f012a712:	75 1c                	jne    f012a730 <test_krealloc+0xc3a>
f012a714:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a71a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a721:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a727:	01 d0                	add    %edx,%eax
f012a729:	8b 00                	mov    (%eax),%eax
f012a72b:	83 f8 04             	cmp    $0x4,%eax
f012a72e:	74 17                	je     f012a747 <test_krealloc+0xc51>
			panic(
f012a730:	83 ec 04             	sub    $0x4,%esp
f012a733:	68 2c a0 13 f0       	push   $0xf013a02c
f012a738:	68 88 0f 00 00       	push   $0xf88
f012a73d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a742:	e8 69 5a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012a747:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a74d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012a753:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a759:	66 8b 00             	mov    (%eax),%ax
f012a75c:	66 83 f8 05          	cmp    $0x5,%ax
f012a760:	75 1b                	jne    f012a77d <test_krealloc+0xc87>
f012a762:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a768:	01 c0                	add    %eax,%eax
f012a76a:	89 c2                	mov    %eax,%edx
f012a76c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a772:	01 d0                	add    %edx,%eax
f012a774:	66 8b 00             	mov    (%eax),%ax
f012a777:	66 83 f8 05          	cmp    $0x5,%ax
f012a77b:	74 17                	je     f012a794 <test_krealloc+0xc9e>
			panic(
f012a77d:	83 ec 04             	sub    $0x4,%esp
f012a780:	68 2c a0 13 f0       	push   $0xf013a02c
f012a785:	68 8d 0f 00 00       	push   $0xf8d
f012a78a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a78f:	e8 1c 5a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012a794:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a79a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012a7a0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a7a6:	66 8b 00             	mov    (%eax),%ax
f012a7a9:	66 83 f8 06          	cmp    $0x6,%ax
f012a7ad:	75 1b                	jne    f012a7ca <test_krealloc+0xcd4>
f012a7af:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a7b5:	01 c0                	add    %eax,%eax
f012a7b7:	89 c2                	mov    %eax,%edx
f012a7b9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a7bf:	01 d0                	add    %edx,%eax
f012a7c1:	66 8b 00             	mov    (%eax),%ax
f012a7c4:	66 83 f8 06          	cmp    $0x6,%ax
f012a7c8:	74 17                	je     f012a7e1 <test_krealloc+0xceb>
			panic(
f012a7ca:	83 ec 04             	sub    $0x4,%esp
f012a7cd:	68 2c a0 13 f0       	push   $0xf013a02c
f012a7d2:	68 92 0f 00 00       	push   $0xf92
f012a7d7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a7dc:	e8 cf 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012a7e1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a7e7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012a7ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a7f3:	8a 00                	mov    (%eax),%al
f012a7f5:	3c 07                	cmp    $0x7,%al
f012a7f7:	75 1b                	jne    f012a814 <test_krealloc+0xd1e>
f012a7f9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a7ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a806:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a80c:	01 d0                	add    %edx,%eax
f012a80e:	8a 00                	mov    (%eax),%al
f012a810:	3c 07                	cmp    $0x7,%al
f012a812:	74 17                	je     f012a82b <test_krealloc+0xd35>
			panic(
f012a814:	83 ec 04             	sub    $0x4,%esp
f012a817:	68 2c a0 13 f0       	push   $0xf013a02c
f012a81c:	68 97 0f 00 00       	push   $0xf97
f012a821:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a826:	e8 85 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012a82b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a831:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a835:	66 83 f8 07          	cmp    $0x7,%ax
f012a839:	75 1f                	jne    f012a85a <test_krealloc+0xd64>
f012a83b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a841:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a848:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a84e:	01 d0                	add    %edx,%eax
f012a850:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a854:	66 83 f8 07          	cmp    $0x7,%ax
f012a858:	74 17                	je     f012a871 <test_krealloc+0xd7b>
			panic(
f012a85a:	83 ec 04             	sub    $0x4,%esp
f012a85d:	68 2c a0 13 f0       	push   $0xf013a02c
f012a862:	68 9a 0f 00 00       	push   $0xf9a
f012a867:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a86c:	e8 3f 59 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012a871:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a877:	8b 40 04             	mov    0x4(%eax),%eax
f012a87a:	83 f8 07             	cmp    $0x7,%eax
f012a87d:	75 1d                	jne    f012a89c <test_krealloc+0xda6>
f012a87f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a885:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a88c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a892:	01 d0                	add    %edx,%eax
f012a894:	8b 40 04             	mov    0x4(%eax),%eax
f012a897:	83 f8 07             	cmp    $0x7,%eax
f012a89a:	74 17                	je     f012a8b3 <test_krealloc+0xdbd>
			panic(
f012a89c:	83 ec 04             	sub    $0x4,%esp
f012a89f:	68 2c a0 13 f0       	push   $0xf013a02c
f012a8a4:	68 9d 0f 00 00       	push   $0xf9d
f012a8a9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a8ae:	e8 fd 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012a8b3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a8b9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012a8bf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8c5:	8a 00                	mov    (%eax),%al
f012a8c7:	3c 08                	cmp    $0x8,%al
f012a8c9:	75 1b                	jne    f012a8e6 <test_krealloc+0xdf0>
f012a8cb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a8d1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8de:	01 d0                	add    %edx,%eax
f012a8e0:	8a 00                	mov    (%eax),%al
f012a8e2:	3c 08                	cmp    $0x8,%al
f012a8e4:	74 17                	je     f012a8fd <test_krealloc+0xe07>
			panic(
f012a8e6:	83 ec 04             	sub    $0x4,%esp
f012a8e9:	68 2c a0 13 f0       	push   $0xf013a02c
f012a8ee:	68 a2 0f 00 00       	push   $0xfa2
f012a8f3:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a8f8:	e8 b3 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012a8fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a903:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a907:	66 83 f8 08          	cmp    $0x8,%ax
f012a90b:	75 1f                	jne    f012a92c <test_krealloc+0xe36>
f012a90d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a913:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a91a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a920:	01 d0                	add    %edx,%eax
f012a922:	66 8b 40 02          	mov    0x2(%eax),%ax
f012a926:	66 83 f8 08          	cmp    $0x8,%ax
f012a92a:	74 17                	je     f012a943 <test_krealloc+0xe4d>
			panic(
f012a92c:	83 ec 04             	sub    $0x4,%esp
f012a92f:	68 2c a0 13 f0       	push   $0xf013a02c
f012a934:	68 a5 0f 00 00       	push   $0xfa5
f012a939:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a93e:	e8 6d 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012a943:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a949:	8b 40 04             	mov    0x4(%eax),%eax
f012a94c:	83 f8 08             	cmp    $0x8,%eax
f012a94f:	75 1d                	jne    f012a96e <test_krealloc+0xe78>
f012a951:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a957:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a95e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a964:	01 d0                	add    %edx,%eax
f012a966:	8b 40 04             	mov    0x4(%eax),%eax
f012a969:	83 f8 08             	cmp    $0x8,%eax
f012a96c:	74 17                	je     f012a985 <test_krealloc+0xe8f>
			panic(
f012a96e:	83 ec 04             	sub    $0x4,%esp
f012a971:	68 2c a0 13 f0       	push   $0xf013a02c
f012a976:	68 a8 0f 00 00       	push   $0xfa8
f012a97b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a980:	e8 2b 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012a985:	e8 88 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a98a:	89 c2                	mov    %eax,%edx
f012a98c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a98f:	39 c2                	cmp    %eax,%edx
f012a991:	74 17                	je     f012a9aa <test_krealloc+0xeb4>
			panic(
f012a993:	83 ec 04             	sub    $0x4,%esp
f012a996:	68 ec a0 13 f0       	push   $0xf013a0ec
f012a99b:	68 ac 0f 00 00       	push   $0xfac
f012a9a0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012a9a5:	e8 06 58 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012a9aa:	83 ec 0c             	sub    $0xc,%esp
f012a9ad:	68 38 a1 13 f0       	push   $0xf013a138
f012a9b2:	e8 7a 64 fd ff       	call   f0100e31 <cprintf>
f012a9b7:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012a9ba:	e8 53 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012a9bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012a9c2:	e8 f1 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012a9c7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012a9cd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a9d3:	83 ec 08             	sub    $0x8,%esp
f012a9d6:	6a 00                	push   $0x0
f012a9d8:	50                   	push   %eax
f012a9d9:	e8 6b d2 fd ff       	call   f0107c49 <krealloc>
f012a9de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012a9e1:	e8 d2 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012a9e6:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012a9ec:	74 17                	je     f012aa05 <test_krealloc+0xf0f>
			panic(
f012a9ee:	83 ec 04             	sub    $0x4,%esp
f012a9f1:	68 5c a1 13 f0       	push   $0xf013a15c
f012a9f6:	68 b9 0f 00 00       	push   $0xfb9
f012a9fb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aa00:	e8 ab 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012aa05:	e8 08 1c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aa0a:	89 c2                	mov    %eax,%edx
f012aa0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aa0f:	29 c2                	sub    %eax,%edx
f012aa11:	89 d0                	mov    %edx,%eax
f012aa13:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa18:	74 17                	je     f012aa31 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012aa1a:	83 ec 04             	sub    $0x4,%esp
f012aa1d:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012aa22:	68 bb 0f 00 00       	push   $0xfbb
f012aa27:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aa2c:	e8 7f 57 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012aa31:	e8 dc 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aa36:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aa39:	e8 7a 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aa3e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012aa44:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012aa4a:	83 ec 08             	sub    $0x8,%esp
f012aa4d:	6a 00                	push   $0x0
f012aa4f:	50                   	push   %eax
f012aa50:	e8 f4 d1 fd ff       	call   f0107c49 <krealloc>
f012aa55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aa58:	e8 5b 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aa5d:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aa63:	74 17                	je     f012aa7c <test_krealloc+0xf86>
			panic(
f012aa65:	83 ec 04             	sub    $0x4,%esp
f012aa68:	68 5c a1 13 f0       	push   $0xf013a15c
f012aa6d:	68 c4 0f 00 00       	push   $0xfc4
f012aa72:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aa77:	e8 34 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012aa7c:	e8 91 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aa81:	89 c2                	mov    %eax,%edx
f012aa83:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aa86:	29 c2                	sub    %eax,%edx
f012aa88:	89 d0                	mov    %edx,%eax
f012aa8a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa8f:	74 17                	je     f012aaa8 <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012aa91:	83 ec 04             	sub    $0x4,%esp
f012aa94:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012aa99:	68 c6 0f 00 00       	push   $0xfc6
f012aa9e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aaa3:	e8 08 57 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012aaa8:	e8 65 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aaad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aab0:	e8 03 98 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aab5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012aabb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aac1:	83 ec 08             	sub    $0x8,%esp
f012aac4:	6a 00                	push   $0x0
f012aac6:	50                   	push   %eax
f012aac7:	e8 7d d1 fd ff       	call   f0107c49 <krealloc>
f012aacc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aacf:	e8 e4 97 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012aad4:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aada:	74 17                	je     f012aaf3 <test_krealloc+0xffd>
			panic(
f012aadc:	83 ec 04             	sub    $0x4,%esp
f012aadf:	68 14 8d 13 f0       	push   $0xf0138d14
f012aae4:	68 ce 0f 00 00       	push   $0xfce
f012aae9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aaee:	e8 bd 56 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012aaf3:	e8 1a 1b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aaf8:	89 c2                	mov    %eax,%edx
f012aafa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aafd:	29 c2                	sub    %eax,%edx
f012aaff:	89 d0                	mov    %edx,%eax
f012ab01:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ab06:	74 17                	je     f012ab1f <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ab08:	83 ec 04             	sub    $0x4,%esp
f012ab0b:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012ab10:	68 d0 0f 00 00       	push   $0xfd0
f012ab15:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ab1a:	e8 91 56 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ab1f:	e8 ee 1a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ab24:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ab27:	e8 8c 97 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012ab2c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ab32:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ab38:	83 ec 08             	sub    $0x8,%esp
f012ab3b:	6a 00                	push   $0x0
f012ab3d:	50                   	push   %eax
f012ab3e:	e8 06 d1 fd ff       	call   f0107c49 <krealloc>
f012ab43:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ab46:	e8 6d 97 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012ab4b:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ab51:	74 17                	je     f012ab6a <test_krealloc+0x1074>
			panic(
f012ab53:	83 ec 04             	sub    $0x4,%esp
f012ab56:	68 5c a1 13 f0       	push   $0xf013a15c
f012ab5b:	68 d8 0f 00 00       	push   $0xfd8
f012ab60:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ab65:	e8 46 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ab6a:	e8 a3 1a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ab6f:	89 c2                	mov    %eax,%edx
f012ab71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ab74:	29 c2                	sub    %eax,%edx
f012ab76:	89 d0                	mov    %edx,%eax
f012ab78:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ab7d:	74 17                	je     f012ab96 <test_krealloc+0x10a0>
			panic(
f012ab7f:	83 ec 04             	sub    $0x4,%esp
f012ab82:	68 04 a2 13 f0       	push   $0xf013a204
f012ab87:	68 db 0f 00 00       	push   $0xfdb
f012ab8c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ab91:	e8 1a 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ab96:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ab9d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012aba4:	eb 48                	jmp    f012abee <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012aba6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012aba9:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012abae:	83 ec 04             	sub    $0x4,%esp
f012abb1:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012abb7:	51                   	push   %ecx
f012abb8:	52                   	push   %edx
f012abb9:	50                   	push   %eax
f012abba:	e8 5c c5 fd ff       	call   f010711b <get_page_table>
f012abbf:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012abc2:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012abc8:	85 c0                	test   %eax,%eax
f012abca:	75 17                	jne    f012abe3 <test_krealloc+0x10ed>
					panic(
f012abcc:	83 ec 04             	sub    $0x4,%esp
f012abcf:	68 fc 95 13 f0       	push   $0xf01395fc
f012abd4:	68 e7 0f 00 00       	push   $0xfe7
f012abd9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012abde:	e8 cd 55 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012abe3:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012abea:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012abee:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012abf2:	78 b2                	js     f012aba6 <test_krealloc+0x10b0>
f012abf4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012abf8:	7f 09                	jg     f012ac03 <test_krealloc+0x110d>
f012abfa:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ac01:	76 a3                	jbe    f012aba6 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ac03:	83 ec 0c             	sub    $0xc,%esp
f012ac06:	68 43 a2 13 f0       	push   $0xf013a243
f012ac0b:	e8 21 62 fd ff       	call   f0100e31 <cprintf>
f012ac10:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ac13:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ac19:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ac1f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ac26:	eb 21                	jmp    f012ac49 <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012ac28:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ac2e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ac31:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ac37:	01 c8                	add    %ecx,%eax
f012ac39:	8a 00                	mov    (%eax),%al
f012ac3b:	0f be c0             	movsbl %al,%eax
f012ac3e:	01 d0                	add    %edx,%eax
f012ac40:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ac46:	ff 45 dc             	incl   -0x24(%ebp)
f012ac49:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ac4f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ac52:	7d d4                	jge    f012ac28 <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ac54:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ac5a:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012ac60:	42                   	inc    %edx
f012ac61:	01 d2                	add    %edx,%edx
f012ac63:	39 d0                	cmp    %edx,%eax
f012ac65:	74 17                	je     f012ac7e <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012ac67:	83 ec 04             	sub    $0x4,%esp
f012ac6a:	68 4c a2 13 f0       	push   $0xf013a24c
f012ac6f:	68 f9 0f 00 00       	push   $0xff9
f012ac74:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ac79:	e8 32 55 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ac7e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ac84:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ac8a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ac91:	eb 25                	jmp    f012acb8 <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012ac93:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ac99:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ac9c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012aca3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aca9:	01 c8                	add    %ecx,%eax
f012acab:	8b 00                	mov    (%eax),%eax
f012acad:	01 d0                	add    %edx,%eax
f012acaf:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012acb5:	ff 45 dc             	incl   -0x24(%ebp)
f012acb8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012acbe:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012acc1:	7d d0                	jge    f012ac93 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012acc3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012acc9:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012accf:	42                   	inc    %edx
f012acd0:	c1 e2 02             	shl    $0x2,%edx
f012acd3:	39 d0                	cmp    %edx,%eax
f012acd5:	74 17                	je     f012acee <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012acd7:	83 ec 04             	sub    $0x4,%esp
f012acda:	68 4c a2 13 f0       	push   $0xf013a24c
f012acdf:	68 03 10 00 00       	push   $0x1003
f012ace4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ace9:	e8 c2 54 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012acee:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012acf4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012acfa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ad01:	eb 24                	jmp    f012ad27 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012ad03:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012ad09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ad0c:	01 c0                	add    %eax,%eax
f012ad0e:	89 c1                	mov    %eax,%ecx
f012ad10:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ad16:	01 c8                	add    %ecx,%eax
f012ad18:	66 8b 00             	mov    (%eax),%ax
f012ad1b:	98                   	cwtl   
f012ad1c:	01 d0                	add    %edx,%eax
f012ad1e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ad24:	ff 45 dc             	incl   -0x24(%ebp)
f012ad27:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ad2d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ad30:	7d d1                	jge    f012ad03 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ad32:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012ad38:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ad3e:	8d 48 01             	lea    0x1(%eax),%ecx
f012ad41:	89 c8                	mov    %ecx,%eax
f012ad43:	c1 e0 02             	shl    $0x2,%eax
f012ad46:	01 c8                	add    %ecx,%eax
f012ad48:	39 c2                	cmp    %eax,%edx
f012ad4a:	74 17                	je     f012ad63 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ad4c:	83 ec 04             	sub    $0x4,%esp
f012ad4f:	68 4c a2 13 f0       	push   $0xf013a24c
f012ad54:	68 0d 10 00 00       	push   $0x100d
f012ad59:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ad5e:	e8 4d 54 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ad63:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ad69:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ad6f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ad76:	eb 70                	jmp    f012ade8 <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012ad78:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012ad7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ad81:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ad88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad8e:	01 c8                	add    %ecx,%eax
f012ad90:	8a 00                	mov    (%eax),%al
f012ad92:	0f be c0             	movsbl %al,%eax
f012ad95:	01 d0                	add    %edx,%eax
f012ad97:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012ad9d:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012ada3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ada6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012adad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012adb3:	01 c8                	add    %ecx,%eax
f012adb5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012adb9:	98                   	cwtl   
f012adba:	01 d0                	add    %edx,%eax
f012adbc:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012adc2:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012adc8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012adcb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012add2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012add8:	01 c8                	add    %ecx,%eax
f012adda:	8b 40 04             	mov    0x4(%eax),%eax
f012addd:	01 d0                	add    %edx,%eax
f012addf:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ade5:	ff 45 dc             	incl   -0x24(%ebp)
f012ade8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012adee:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012adf1:	7d 85                	jge    f012ad78 <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012adf3:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012adf9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012adff:	8d 50 01             	lea    0x1(%eax),%edx
f012ae02:	89 d0                	mov    %edx,%eax
f012ae04:	01 c0                	add    %eax,%eax
f012ae06:	01 d0                	add    %edx,%eax
f012ae08:	01 c0                	add    %eax,%eax
f012ae0a:	01 d0                	add    %edx,%eax
f012ae0c:	39 c1                	cmp    %eax,%ecx
f012ae0e:	75 3a                	jne    f012ae4a <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012ae10:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012ae16:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ae1c:	8d 50 01             	lea    0x1(%eax),%edx
f012ae1f:	89 d0                	mov    %edx,%eax
f012ae21:	01 c0                	add    %eax,%eax
f012ae23:	01 d0                	add    %edx,%eax
f012ae25:	01 c0                	add    %eax,%eax
f012ae27:	01 d0                	add    %edx,%eax
f012ae29:	39 c1                	cmp    %eax,%ecx
f012ae2b:	75 1d                	jne    f012ae4a <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ae2d:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012ae33:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ae39:	8d 50 01             	lea    0x1(%eax),%edx
f012ae3c:	89 d0                	mov    %edx,%eax
f012ae3e:	01 c0                	add    %eax,%eax
f012ae40:	01 d0                	add    %edx,%eax
f012ae42:	01 c0                	add    %eax,%eax
f012ae44:	01 d0                	add    %edx,%eax
f012ae46:	39 c1                	cmp    %eax,%ecx
f012ae48:	74 17                	je     f012ae61 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012ae4a:	83 ec 04             	sub    $0x4,%esp
f012ae4d:	68 4c a2 13 f0       	push   $0xf013a24c
f012ae52:	68 1b 10 00 00       	push   $0x101b
f012ae57:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ae5c:	e8 4f 53 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ae61:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012ae68:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ae6b:	e8 a2 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ae70:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ae73:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ae79:	83 ec 08             	sub    $0x8,%esp
f012ae7c:	68 00 3c 00 00       	push   $0x3c00
f012ae81:	50                   	push   %eax
f012ae82:	e8 c2 cd fd ff       	call   f0107c49 <krealloc>
f012ae87:	83 c4 10             	add    $0x10,%esp
f012ae8a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ae90:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ae96:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ae9b:	77 17                	ja     f012aeb4 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ae9d:	83 ec 04             	sub    $0x4,%esp
f012aea0:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012aea5:	68 27 10 00 00       	push   $0x1027
f012aeaa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aeaf:	e8 fc 52 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012aeb4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012aeba:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012aec0:	74 17                	je     f012aed9 <test_krealloc+0x13e3>
			panic(
f012aec2:	83 ec 04             	sub    $0x4,%esp
f012aec5:	68 84 a2 13 f0       	push   $0xf013a284
f012aeca:	68 2a 10 00 00       	push   $0x102a
f012aecf:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aed4:	e8 d7 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012aed9:	e8 34 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012aede:	89 c2                	mov    %eax,%edx
f012aee0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aee3:	39 c2                	cmp    %eax,%edx
f012aee5:	74 17                	je     f012aefe <test_krealloc+0x1408>
			panic(
f012aee7:	83 ec 04             	sub    $0x4,%esp
f012aeea:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012aeef:	68 2d 10 00 00       	push   $0x102d
f012aef4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012aef9:	e8 b2 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012aefe:	e8 0f 17 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012af03:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012af06:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012af0c:	83 ec 08             	sub    $0x8,%esp
f012af0f:	68 00 fc 0f 00       	push   $0xffc00
f012af14:	50                   	push   %eax
f012af15:	e8 2f cd fd ff       	call   f0107c49 <krealloc>
f012af1a:	83 c4 10             	add    $0x10,%esp
f012af1d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012af23:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012af29:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012af2e:	77 17                	ja     f012af47 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012af30:	83 ec 04             	sub    $0x4,%esp
f012af33:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012af38:	68 33 10 00 00       	push   $0x1033
f012af3d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012af42:	e8 69 52 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012af47:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012af4d:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012af53:	74 17                	je     f012af6c <test_krealloc+0x1476>
			panic(
f012af55:	83 ec 04             	sub    $0x4,%esp
f012af58:	68 84 a2 13 f0       	push   $0xf013a284
f012af5d:	68 36 10 00 00       	push   $0x1036
f012af62:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012af67:	e8 44 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012af6c:	e8 a1 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012af71:	89 c2                	mov    %eax,%edx
f012af73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af76:	39 c2                	cmp    %eax,%edx
f012af78:	74 17                	je     f012af91 <test_krealloc+0x149b>
			panic(
f012af7a:	83 ec 04             	sub    $0x4,%esp
f012af7d:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012af82:	68 39 10 00 00       	push   $0x1039
f012af87:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012af8c:	e8 1f 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012af91:	e8 7c 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012af96:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012af99:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af9f:	83 ec 08             	sub    $0x8,%esp
f012afa2:	68 00 fc 0f 00       	push   $0xffc00
f012afa7:	50                   	push   %eax
f012afa8:	e8 9c cc fd ff       	call   f0107c49 <krealloc>
f012afad:	83 c4 10             	add    $0x10,%esp
f012afb0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012afb6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012afbc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012afc1:	77 17                	ja     f012afda <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012afc3:	83 ec 04             	sub    $0x4,%esp
f012afc6:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012afcb:	68 3f 10 00 00       	push   $0x103f
f012afd0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012afd5:	e8 d6 51 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012afda:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012afe0:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012afe6:	74 17                	je     f012afff <test_krealloc+0x1509>
			panic(
f012afe8:	83 ec 04             	sub    $0x4,%esp
f012afeb:	68 84 a2 13 f0       	push   $0xf013a284
f012aff0:	68 42 10 00 00       	push   $0x1042
f012aff5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012affa:	e8 b1 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012afff:	e8 0e 16 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b004:	89 c2                	mov    %eax,%edx
f012b006:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b009:	39 c2                	cmp    %eax,%edx
f012b00b:	74 17                	je     f012b024 <test_krealloc+0x152e>
			panic(
f012b00d:	83 ec 04             	sub    $0x4,%esp
f012b010:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012b015:	68 45 10 00 00       	push   $0x1045
f012b01a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b01f:	e8 8c 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b024:	e8 e9 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b029:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b02c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b032:	83 ec 08             	sub    $0x8,%esp
f012b035:	68 00 fc 0f 00       	push   $0xffc00
f012b03a:	50                   	push   %eax
f012b03b:	e8 09 cc fd ff       	call   f0107c49 <krealloc>
f012b040:	83 c4 10             	add    $0x10,%esp
f012b043:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b049:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b04f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b054:	77 17                	ja     f012b06d <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b056:	83 ec 04             	sub    $0x4,%esp
f012b059:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b05e:	68 4d 10 00 00       	push   $0x104d
f012b063:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b068:	e8 43 51 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b06d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b073:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b079:	74 17                	je     f012b092 <test_krealloc+0x159c>
			panic(
f012b07b:	83 ec 04             	sub    $0x4,%esp
f012b07e:	68 34 a3 13 f0       	push   $0xf013a334
f012b083:	68 50 10 00 00       	push   $0x1050
f012b088:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b08d:	e8 1e 51 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b092:	e8 7b 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b097:	89 c2                	mov    %eax,%edx
f012b099:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b09c:	39 c2                	cmp    %eax,%edx
f012b09e:	74 17                	je     f012b0b7 <test_krealloc+0x15c1>
			panic(
f012b0a0:	83 ec 04             	sub    $0x4,%esp
f012b0a3:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012b0a8:	68 53 10 00 00       	push   $0x1053
f012b0ad:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b0b2:	e8 f9 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b0b7:	83 ec 0c             	sub    $0xc,%esp
f012b0ba:	68 13 95 13 f0       	push   $0xf0139513
f012b0bf:	e8 6d 5d fd ff       	call   f0100e31 <cprintf>
f012b0c4:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b0c7:	e8 46 15 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b0cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b0cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b0d5:	83 ec 08             	sub    $0x8,%esp
f012b0d8:	68 00 18 10 00       	push   $0x101800
f012b0dd:	50                   	push   %eax
f012b0de:	e8 66 cb fd ff       	call   f0107c49 <krealloc>
f012b0e3:	83 c4 10             	add    $0x10,%esp
f012b0e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b0e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b0ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b0f1:	77 17                	ja     f012b10a <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b0f3:	83 ec 04             	sub    $0x4,%esp
f012b0f6:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b0fb:	68 5c 10 00 00       	push   $0x105c
f012b100:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b105:	e8 a6 50 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b10a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b110:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b113:	74 17                	je     f012b12c <test_krealloc+0x1636>
			panic(
f012b115:	83 ec 04             	sub    $0x4,%esp
f012b118:	68 94 a3 13 f0       	push   $0xf013a394
f012b11d:	68 5f 10 00 00       	push   $0x105f
f012b122:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b127:	e8 84 50 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b12c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b12f:	e8 de 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b134:	29 c3                	sub    %eax,%ebx
f012b136:	89 d8                	mov    %ebx,%eax
f012b138:	83 f8 02             	cmp    $0x2,%eax
f012b13b:	74 17                	je     f012b154 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b13d:	83 ec 04             	sub    $0x4,%esp
f012b140:	68 10 a4 13 f0       	push   $0xf013a410
f012b145:	68 61 10 00 00       	push   $0x1061
f012b14a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b14f:	e8 5c 50 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b154:	e8 b9 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b159:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b15c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b162:	83 ec 08             	sub    $0x8,%esp
f012b165:	68 00 fc 3f 00       	push   $0x3ffc00
f012b16a:	50                   	push   %eax
f012b16b:	e8 d9 ca fd ff       	call   f0107c49 <krealloc>
f012b170:	83 c4 10             	add    $0x10,%esp
f012b173:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b176:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b179:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b17e:	77 17                	ja     f012b197 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b180:	83 ec 04             	sub    $0x4,%esp
f012b183:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b188:	68 67 10 00 00       	push   $0x1067
f012b18d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b192:	e8 19 50 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b197:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b19d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b1a0:	74 17                	je     f012b1b9 <test_krealloc+0x16c3>
			panic(
f012b1a2:	83 ec 04             	sub    $0x4,%esp
f012b1a5:	68 94 a3 13 f0       	push   $0xf013a394
f012b1aa:	68 6a 10 00 00       	push   $0x106a
f012b1af:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b1b4:	e8 f7 4f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b1b9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b1bc:	e8 51 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b1c1:	29 c3                	sub    %eax,%ebx
f012b1c3:	89 d8                	mov    %ebx,%eax
f012b1c5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b1ca:	74 17                	je     f012b1e3 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b1cc:	83 ec 04             	sub    $0x4,%esp
f012b1cf:	68 10 a4 13 f0       	push   $0xf013a410
f012b1d4:	68 6d 10 00 00       	push   $0x106d
f012b1d9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b1de:	e8 cd 4f fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b1e3:	83 ec 0c             	sub    $0xc,%esp
f012b1e6:	68 58 95 13 f0       	push   $0xf0139558
f012b1eb:	e8 41 5c fd ff       	call   f0100e31 <cprintf>
f012b1f0:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b1f3:	e8 1a 14 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b1f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b1fb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b201:	83 ec 08             	sub    $0x8,%esp
f012b204:	68 00 fc 9f 00       	push   $0x9ffc00
f012b209:	50                   	push   %eax
f012b20a:	e8 3a ca fd ff       	call   f0107c49 <krealloc>
f012b20f:	83 c4 10             	add    $0x10,%esp
f012b212:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b215:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b218:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b21d:	77 17                	ja     f012b236 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b21f:	83 ec 04             	sub    $0x4,%esp
f012b222:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b227:	68 78 10 00 00       	push   $0x1078
f012b22c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b231:	e8 7a 4f fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b236:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b23d:	10 00 00 
f012b240:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b245:	0f b6 d0             	movzbl %al,%edx
f012b248:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b24e:	01 d0                	add    %edx,%eax
f012b250:	48                   	dec    %eax
f012b251:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b257:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b25d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b262:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b268:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b26e:	29 d0                	sub    %edx,%eax
f012b270:	89 c1                	mov    %eax,%ecx
f012b272:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b279:	10 00 00 
f012b27c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b281:	0f b6 c0             	movzbl %al,%eax
f012b284:	c1 e0 04             	shl    $0x4,%eax
f012b287:	89 c2                	mov    %eax,%edx
f012b289:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b28f:	01 d0                	add    %edx,%eax
f012b291:	48                   	dec    %eax
f012b292:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b298:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b29e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2a3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b2a9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b2af:	29 d0                	sub    %edx,%eax
f012b2b1:	01 c8                	add    %ecx,%eax
f012b2b3:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b2b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b2bc:	39 c2                	cmp    %eax,%edx
f012b2be:	74 18                	je     f012b2d8 <test_krealloc+0x17e2>
			panic(
f012b2c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b2c3:	50                   	push   %eax
f012b2c4:	68 44 a4 13 f0       	push   $0xf013a444
f012b2c9:	68 7c 10 00 00       	push   $0x107c
f012b2ce:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b2d3:	e8 d8 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b2d8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b2de:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b2e1:	75 17                	jne    f012b2fa <test_krealloc+0x1804>
			panic(
f012b2e3:	83 ec 04             	sub    $0x4,%esp
f012b2e6:	68 88 a4 13 f0       	push   $0xf013a488
f012b2eb:	68 7f 10 00 00       	push   $0x107f
f012b2f0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b2f5:	e8 b6 4e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b2fa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b2fd:	e8 10 13 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b302:	29 c3                	sub    %eax,%ebx
f012b304:	89 d8                	mov    %ebx,%eax
f012b306:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b30b:	74 17                	je     f012b324 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b30d:	83 ec 04             	sub    $0x4,%esp
f012b310:	68 10 a4 13 f0       	push   $0xf013a410
f012b315:	68 82 10 00 00       	push   $0x1082
f012b31a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b31f:	e8 8c 4e fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b324:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b327:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b32d:	e8 e0 12 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b332:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b335:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b33b:	83 ec 08             	sub    $0x8,%esp
f012b33e:	68 00 fc 5f 00       	push   $0x5ffc00
f012b343:	50                   	push   %eax
f012b344:	e8 00 c9 fd ff       	call   f0107c49 <krealloc>
f012b349:	83 c4 10             	add    $0x10,%esp
f012b34c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b34f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b352:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b357:	77 17                	ja     f012b370 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b359:	83 ec 04             	sub    $0x4,%esp
f012b35c:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b361:	68 8b 10 00 00       	push   $0x108b
f012b366:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b36b:	e8 40 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b370:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b376:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b379:	74 17                	je     f012b392 <test_krealloc+0x189c>
			panic(
f012b37b:	83 ec 04             	sub    $0x4,%esp
f012b37e:	68 94 a3 13 f0       	push   $0xf013a394
f012b383:	68 8e 10 00 00       	push   $0x108e
f012b388:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b38d:	e8 1e 4e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b392:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b395:	e8 78 12 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b39a:	29 c3                	sub    %eax,%ebx
f012b39c:	89 d8                	mov    %ebx,%eax
f012b39e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b3a3:	74 17                	je     f012b3bc <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b3a5:	83 ec 04             	sub    $0x4,%esp
f012b3a8:	68 10 a4 13 f0       	push   $0xf013a410
f012b3ad:	68 91 10 00 00       	push   $0x1091
f012b3b2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b3b7:	e8 f4 4d fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b3bc:	e8 51 12 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b3c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b3c4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b3ca:	83 ec 08             	sub    $0x8,%esp
f012b3cd:	68 00 fc 3f 01       	push   $0x13ffc00
f012b3d2:	50                   	push   %eax
f012b3d3:	e8 71 c8 fd ff       	call   f0107c49 <krealloc>
f012b3d8:	83 c4 10             	add    $0x10,%esp
f012b3db:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b3de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b3e1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b3e6:	77 17                	ja     f012b3ff <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b3e8:	83 ec 04             	sub    $0x4,%esp
f012b3eb:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b3f0:	68 98 10 00 00       	push   $0x1098
f012b3f5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b3fa:	e8 b1 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b3ff:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b405:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b408:	75 17                	jne    f012b421 <test_krealloc+0x192b>
			panic(
f012b40a:	83 ec 04             	sub    $0x4,%esp
f012b40d:	68 88 a4 13 f0       	push   $0xf013a488
f012b412:	68 9b 10 00 00       	push   $0x109b
f012b417:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b41c:	e8 8f 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b421:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b428:	10 00 00 
f012b42b:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b430:	0f b6 d0             	movzbl %al,%edx
f012b433:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b439:	01 d0                	add    %edx,%eax
f012b43b:	48                   	dec    %eax
f012b43c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b442:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b448:	ba 00 00 00 00       	mov    $0x0,%edx
f012b44d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b453:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b459:	29 d0                	sub    %edx,%eax
f012b45b:	89 c1                	mov    %eax,%ecx
f012b45d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b464:	10 00 00 
f012b467:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b46c:	0f b6 c0             	movzbl %al,%eax
f012b46f:	c1 e0 04             	shl    $0x4,%eax
f012b472:	89 c2                	mov    %eax,%edx
f012b474:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b47a:	01 d0                	add    %edx,%eax
f012b47c:	48                   	dec    %eax
f012b47d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b483:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b489:	ba 00 00 00 00       	mov    $0x0,%edx
f012b48e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b494:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b49a:	29 d0                	sub    %edx,%eax
f012b49c:	01 c8                	add    %ecx,%eax
f012b49e:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b4a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b4a7:	39 c2                	cmp    %eax,%edx
f012b4a9:	74 17                	je     f012b4c2 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b4ab:	83 ec 04             	sub    $0x4,%esp
f012b4ae:	68 0c a5 13 f0       	push   $0xf013a50c
f012b4b3:	68 9d 10 00 00       	push   $0x109d
f012b4b8:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b4bd:	e8 ee 4c fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b4c2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b4c5:	e8 48 11 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b4ca:	29 c3                	sub    %eax,%ebx
f012b4cc:	89 d8                	mov    %ebx,%eax
f012b4ce:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b4d3:	74 17                	je     f012b4ec <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b4d5:	83 ec 04             	sub    $0x4,%esp
f012b4d8:	68 10 a4 13 f0       	push   $0xf013a410
f012b4dd:	68 a0 10 00 00       	push   $0x10a0
f012b4e2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b4e7:	e8 c4 4c fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b4ec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b4ef:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b4f5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4fb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b501:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b508:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b50b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b512:	eb 21                	jmp    f012b535 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b514:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b51a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b51d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b523:	01 c8                	add    %ecx,%eax
f012b525:	8a 00                	mov    (%eax),%al
f012b527:	0f be c0             	movsbl %al,%eax
f012b52a:	01 d0                	add    %edx,%eax
f012b52c:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b532:	ff 45 d8             	incl   -0x28(%ebp)
f012b535:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b53b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b53e:	7d d4                	jge    f012b514 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b540:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b546:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b54c:	42                   	inc    %edx
f012b54d:	01 d2                	add    %edx,%edx
f012b54f:	39 d0                	cmp    %edx,%eax
f012b551:	74 17                	je     f012b56a <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b553:	83 ec 04             	sub    $0x4,%esp
f012b556:	68 40 a5 13 f0       	push   $0xf013a540
f012b55b:	68 ae 10 00 00       	push   $0x10ae
f012b560:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b565:	e8 46 4c fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b56a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b570:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b576:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b57d:	00 00 00 
		sums[1] = 0;
f012b580:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b587:	00 00 00 
		sums[2] = 0;
f012b58a:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b591:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b594:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b59b:	eb 70                	jmp    f012b60d <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b59d:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b5a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b5a6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b5ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b5b3:	01 c8                	add    %ecx,%eax
f012b5b5:	8a 00                	mov    (%eax),%al
f012b5b7:	0f be c0             	movsbl %al,%eax
f012b5ba:	01 d0                	add    %edx,%eax
f012b5bc:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b5c2:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b5c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b5cb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b5d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b5d8:	01 c8                	add    %ecx,%eax
f012b5da:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b5de:	98                   	cwtl   
f012b5df:	01 d0                	add    %edx,%eax
f012b5e1:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b5e7:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b5ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b5f0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b5f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b5fd:	01 c8                	add    %ecx,%eax
f012b5ff:	8b 40 04             	mov    0x4(%eax),%eax
f012b602:	01 d0                	add    %edx,%eax
f012b604:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b60a:	ff 45 d8             	incl   -0x28(%ebp)
f012b60d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b613:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b616:	7d 85                	jge    f012b59d <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b618:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b61e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b624:	8d 50 01             	lea    0x1(%eax),%edx
f012b627:	89 d0                	mov    %edx,%eax
f012b629:	01 c0                	add    %eax,%eax
f012b62b:	01 d0                	add    %edx,%eax
f012b62d:	01 c0                	add    %eax,%eax
f012b62f:	01 d0                	add    %edx,%eax
f012b631:	39 c1                	cmp    %eax,%ecx
f012b633:	75 3a                	jne    f012b66f <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b635:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b63b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b641:	8d 50 01             	lea    0x1(%eax),%edx
f012b644:	89 d0                	mov    %edx,%eax
f012b646:	01 c0                	add    %eax,%eax
f012b648:	01 d0                	add    %edx,%eax
f012b64a:	01 c0                	add    %eax,%eax
f012b64c:	01 d0                	add    %edx,%eax
f012b64e:	39 c1                	cmp    %eax,%ecx
f012b650:	75 1d                	jne    f012b66f <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012b652:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012b658:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b65e:	8d 50 01             	lea    0x1(%eax),%edx
f012b661:	89 d0                	mov    %edx,%eax
f012b663:	01 c0                	add    %eax,%eax
f012b665:	01 d0                	add    %edx,%eax
f012b667:	01 c0                	add    %eax,%eax
f012b669:	01 d0                	add    %edx,%eax
f012b66b:	39 c1                	cmp    %eax,%ecx
f012b66d:	74 17                	je     f012b686 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012b66f:	83 ec 04             	sub    $0x4,%esp
f012b672:	68 40 a5 13 f0       	push   $0xf013a540
f012b677:	68 c0 10 00 00       	push   $0x10c0
f012b67c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b681:	e8 2a 4b fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b686:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b68c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012b692:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b699:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b69c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b6a3:	eb 24                	jmp    f012b6c9 <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012b6a5:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b6ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b6ae:	01 c0                	add    %eax,%eax
f012b6b0:	89 c1                	mov    %eax,%ecx
f012b6b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b6b8:	01 c8                	add    %ecx,%eax
f012b6ba:	66 8b 00             	mov    (%eax),%ax
f012b6bd:	98                   	cwtl   
f012b6be:	01 d0                	add    %edx,%eax
f012b6c0:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012b6c6:	ff 45 d8             	incl   -0x28(%ebp)
f012b6c9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b6cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b6d2:	7d d1                	jge    f012b6a5 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012b6d4:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b6da:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b6e0:	8d 48 01             	lea    0x1(%eax),%ecx
f012b6e3:	89 c8                	mov    %ecx,%eax
f012b6e5:	c1 e0 02             	shl    $0x2,%eax
f012b6e8:	01 c8                	add    %ecx,%eax
f012b6ea:	39 c2                	cmp    %eax,%edx
f012b6ec:	74 17                	je     f012b705 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012b6ee:	83 ec 04             	sub    $0x4,%esp
f012b6f1:	68 40 a5 13 f0       	push   $0xf013a540
f012b6f6:	68 ca 10 00 00       	push   $0x10ca
f012b6fb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b700:	e8 ab 4a fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012b705:	e8 08 0f fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b70a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b70d:	e8 a6 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b712:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012b718:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b71e:	83 ec 08             	sub    $0x8,%esp
f012b721:	6a 00                	push   $0x0
f012b723:	50                   	push   %eax
f012b724:	e8 20 c5 fd ff       	call   f0107c49 <krealloc>
f012b729:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b72c:	e8 87 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b731:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b737:	74 17                	je     f012b750 <test_krealloc+0x1c5a>
			panic(
f012b739:	83 ec 04             	sub    $0x4,%esp
f012b73c:	68 14 8d 13 f0       	push   $0xf0138d14
f012b741:	68 d2 10 00 00       	push   $0x10d2
f012b746:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b74b:	e8 60 4a fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012b750:	e8 bd 0e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b755:	89 c2                	mov    %eax,%edx
f012b757:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b75a:	29 c2                	sub    %eax,%edx
f012b75c:	89 d0                	mov    %edx,%eax
f012b75e:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012b763:	74 17                	je     f012b77c <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012b765:	83 ec 04             	sub    $0x4,%esp
f012b768:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012b76d:	68 d4 10 00 00       	push   $0x10d4
f012b772:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b777:	e8 34 4a fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012b77c:	e8 91 0e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b781:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b784:	e8 2f 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b789:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012b78f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b795:	83 ec 0c             	sub    $0xc,%esp
f012b798:	50                   	push   %eax
f012b799:	e8 0f c4 fd ff       	call   f0107bad <kfree>
f012b79e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b7a1:	e8 12 8b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012b7a6:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b7ac:	74 17                	je     f012b7c5 <test_krealloc+0x1ccf>
			panic(
f012b7ae:	83 ec 04             	sub    $0x4,%esp
f012b7b1:	68 14 8d 13 f0       	push   $0xf0138d14
f012b7b6:	68 dc 10 00 00       	push   $0x10dc
f012b7bb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b7c0:	e8 eb 49 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012b7c5:	e8 48 0e fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b7ca:	89 c2                	mov    %eax,%edx
f012b7cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b7cf:	29 c2                	sub    %eax,%edx
f012b7d1:	89 d0                	mov    %edx,%eax
f012b7d3:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012b7d8:	74 17                	je     f012b7f1 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012b7da:	83 ec 04             	sub    $0x4,%esp
f012b7dd:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012b7e2:	68 de 10 00 00       	push   $0x10de
f012b7e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b7ec:	e8 bf 49 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b7f1:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012b7f8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012b7ff:	eb 48                	jmp    f012b849 <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012b801:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012b804:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012b809:	83 ec 04             	sub    $0x4,%esp
f012b80c:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012b812:	51                   	push   %ecx
f012b813:	52                   	push   %edx
f012b814:	50                   	push   %eax
f012b815:	e8 01 b9 fd ff       	call   f010711b <get_page_table>
f012b81a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012b81d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012b823:	85 c0                	test   %eax,%eax
f012b825:	75 17                	jne    f012b83e <test_krealloc+0x1d48>
					panic(
f012b827:	83 ec 04             	sub    $0x4,%esp
f012b82a:	68 fc 95 13 f0       	push   $0xf01395fc
f012b82f:	68 eb 10 00 00       	push   $0x10eb
f012b834:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b839:	e8 72 49 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b83e:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012b845:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012b849:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012b84d:	78 b2                	js     f012b801 <test_krealloc+0x1d0b>
f012b84f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012b853:	7f 09                	jg     f012b85e <test_krealloc+0x1d68>
f012b855:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012b85c:	76 a3                	jbe    f012b801 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012b85e:	83 ec 0c             	sub    $0xc,%esp
f012b861:	68 de 8e 13 f0       	push   $0xf0138ede
f012b866:	e8 c6 55 fd ff       	call   f0100e31 <cprintf>
f012b86b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012b86e:	83 ec 0c             	sub    $0xc,%esp
f012b871:	68 6c a5 13 f0       	push   $0xf013a56c
f012b876:	e8 b6 55 fd ff       	call   f0100e31 <cprintf>
f012b87b:	83 c4 10             	add    $0x10,%esp
	return 0;
f012b87e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012b883:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b886:	5b                   	pop    %ebx
f012b887:	5f                   	pop    %edi
f012b888:	5d                   	pop    %ebp
f012b889:	c3                   	ret    

f012b88a <test_krealloc_BF>:


int test_krealloc_BF() {
f012b88a:	55                   	push   %ebp
f012b88b:	89 e5                	mov    %esp,%ebp
f012b88d:	57                   	push   %edi
f012b88e:	53                   	push   %ebx
f012b88f:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012b895:	83 ec 0c             	sub    $0xc,%esp
f012b898:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012b89d:	e8 8f 55 fd ff       	call   f0100e31 <cprintf>
f012b8a2:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b8a5:	83 ec 0c             	sub    $0xc,%esp
f012b8a8:	68 6c 8c 13 f0       	push   $0xf0138c6c
f012b8ad:	e8 7f 55 fd ff       	call   f0100e31 <cprintf>
f012b8b2:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b8b5:	83 ec 0c             	sub    $0xc,%esp
f012b8b8:	68 3c 8c 13 f0       	push   $0xf0138c3c
f012b8bd:	e8 6f 55 fd ff       	call   f0100e31 <cprintf>
f012b8c2:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b8c5:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b8c9:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b8cd:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b8d3:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b8d9:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b8e0:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b8e7:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012b8ed:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b8f2:	b8 00 00 00 00       	mov    $0x0,%eax
f012b8f7:	89 d7                	mov    %edx,%edi
f012b8f9:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b8fb:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b902:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012b908:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b90d:	b8 00 00 00 00       	mov    $0x0,%eax
f012b912:	89 d7                	mov    %edx,%edi
f012b914:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b916:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012b91c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b921:	b8 00 00 00 00       	mov    $0x0,%eax
f012b926:	89 d7                	mov    %edx,%edi
f012b928:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b92a:	e8 e3 0c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b92f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b932:	83 ec 08             	sub    $0x8,%esp
f012b935:	68 00 fc 0f 00       	push   $0xffc00
f012b93a:	6a 00                	push   $0x0
f012b93c:	e8 08 c3 fd ff       	call   f0107c49 <krealloc>
f012b941:	83 c4 10             	add    $0x10,%esp
f012b944:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b94a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b950:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b955:	77 17                	ja     f012b96e <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b957:	83 ec 04             	sub    $0x4,%esp
f012b95a:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012b95f:	68 1a 11 00 00       	push   $0x111a
f012b964:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b969:	e8 42 48 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b96e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b974:	89 c1                	mov    %eax,%ecx
f012b976:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b97d:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b982:	0f b6 d0             	movzbl %al,%edx
f012b985:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b988:	01 d0                	add    %edx,%eax
f012b98a:	48                   	dec    %eax
f012b98b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b98e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b991:	ba 00 00 00 00       	mov    $0x0,%edx
f012b996:	f7 75 b4             	divl   -0x4c(%ebp)
f012b999:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b99c:	29 d0                	sub    %edx,%eax
f012b99e:	89 c3                	mov    %eax,%ebx
f012b9a0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b9a7:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012b9ac:	0f b6 c0             	movzbl %al,%eax
f012b9af:	c1 e0 04             	shl    $0x4,%eax
f012b9b2:	89 c2                	mov    %eax,%edx
f012b9b4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b9b7:	01 d0                	add    %edx,%eax
f012b9b9:	48                   	dec    %eax
f012b9ba:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b9bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b9c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9c5:	f7 75 ac             	divl   -0x54(%ebp)
f012b9c8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b9cb:	29 d0                	sub    %edx,%eax
f012b9cd:	01 d8                	add    %ebx,%eax
f012b9cf:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b9d4:	39 c1                	cmp    %eax,%ecx
f012b9d6:	74 17                	je     f012b9ef <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012b9d8:	83 ec 04             	sub    $0x4,%esp
f012b9db:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012b9e0:	68 1c 11 00 00       	push   $0x111c
f012b9e5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012b9ea:	e8 c1 47 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b9ef:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b9f2:	e8 1b 0c fe ff       	call   f010c612 <sys_calculate_free_frames>
f012b9f7:	29 c3                	sub    %eax,%ebx
f012b9f9:	89 d8                	mov    %ebx,%eax
f012b9fb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ba00:	74 17                	je     f012ba19 <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012ba02:	83 ec 04             	sub    $0x4,%esp
f012ba05:	68 0e a0 13 f0       	push   $0xf013a00e
f012ba0a:	68 1f 11 00 00       	push   $0x111f
f012ba0f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ba14:	e8 97 47 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012ba19:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012ba20:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ba23:	e8 ea 0b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012ba28:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012ba2b:	83 ec 08             	sub    $0x8,%esp
f012ba2e:	68 00 fc 0f 00       	push   $0xffc00
f012ba33:	6a 00                	push   $0x0
f012ba35:	e8 0f c2 fd ff       	call   f0107c49 <krealloc>
f012ba3a:	83 c4 10             	add    $0x10,%esp
f012ba3d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012ba43:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ba49:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012ba4e:	77 17                	ja     f012ba67 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba50:	83 ec 04             	sub    $0x4,%esp
f012ba53:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012ba58:	68 27 11 00 00       	push   $0x1127
f012ba5d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ba62:	e8 49 47 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012ba67:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ba6d:	89 c1                	mov    %eax,%ecx
f012ba6f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012ba76:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012ba7b:	0f b6 d0             	movzbl %al,%edx
f012ba7e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012ba81:	01 d0                	add    %edx,%eax
f012ba83:	48                   	dec    %eax
f012ba84:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012ba87:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ba8a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba8f:	f7 75 a4             	divl   -0x5c(%ebp)
f012ba92:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ba95:	29 d0                	sub    %edx,%eax
f012ba97:	89 c3                	mov    %eax,%ebx
f012ba99:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012baa0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012baa5:	0f b6 c0             	movzbl %al,%eax
f012baa8:	c1 e0 04             	shl    $0x4,%eax
f012baab:	89 c2                	mov    %eax,%edx
f012baad:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012bab0:	01 d0                	add    %edx,%eax
f012bab2:	48                   	dec    %eax
f012bab3:	89 45 98             	mov    %eax,-0x68(%ebp)
f012bab6:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bab9:	ba 00 00 00 00       	mov    $0x0,%edx
f012babe:	f7 75 9c             	divl   -0x64(%ebp)
f012bac1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bac4:	29 d0                	sub    %edx,%eax
f012bac6:	01 d8                	add    %ebx,%eax
f012bac8:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012bacd:	39 c1                	cmp    %eax,%ecx
f012bacf:	74 17                	je     f012bae8 <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012bad1:	83 ec 04             	sub    $0x4,%esp
f012bad4:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012bad9:	68 29 11 00 00       	push   $0x1129
f012bade:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bae3:	e8 c8 46 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bae8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012baeb:	e8 22 0b fe ff       	call   f010c612 <sys_calculate_free_frames>
f012baf0:	29 c3                	sub    %eax,%ebx
f012baf2:	89 d8                	mov    %ebx,%eax
f012baf4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012baf9:	74 17                	je     f012bb12 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012bafb:	83 ec 04             	sub    $0x4,%esp
f012bafe:	68 0e a0 13 f0       	push   $0xf013a00e
f012bb03:	68 2b 11 00 00       	push   $0x112b
f012bb08:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bb0d:	e8 9e 46 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bb12:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012bb19:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bb1c:	e8 f1 0a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bb21:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bb24:	83 ec 08             	sub    $0x8,%esp
f012bb27:	68 00 fc 0f 00       	push   $0xffc00
f012bb2c:	6a 00                	push   $0x0
f012bb2e:	e8 16 c1 fd ff       	call   f0107c49 <krealloc>
f012bb33:	83 c4 10             	add    $0x10,%esp
f012bb36:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bb3c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bb42:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bb47:	77 17                	ja     f012bb60 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb49:	83 ec 04             	sub    $0x4,%esp
f012bb4c:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012bb51:	68 33 11 00 00       	push   $0x1133
f012bb56:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bb5b:	e8 50 46 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bb60:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bb66:	89 c1                	mov    %eax,%ecx
f012bb68:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bb6f:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bb74:	0f b6 d0             	movzbl %al,%edx
f012bb77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bb7a:	01 d0                	add    %edx,%eax
f012bb7c:	48                   	dec    %eax
f012bb7d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bb80:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bb83:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb88:	f7 75 94             	divl   -0x6c(%ebp)
f012bb8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bb8e:	29 d0                	sub    %edx,%eax
f012bb90:	89 c3                	mov    %eax,%ebx
f012bb92:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bb99:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bb9e:	0f b6 c0             	movzbl %al,%eax
f012bba1:	c1 e0 04             	shl    $0x4,%eax
f012bba4:	89 c2                	mov    %eax,%edx
f012bba6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bba9:	01 d0                	add    %edx,%eax
f012bbab:	48                   	dec    %eax
f012bbac:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bbaf:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bbb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbb7:	f7 75 8c             	divl   -0x74(%ebp)
f012bbba:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bbbd:	29 d0                	sub    %edx,%eax
f012bbbf:	01 d8                	add    %ebx,%eax
f012bbc1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bbc6:	39 c1                	cmp    %eax,%ecx
f012bbc8:	74 17                	je     f012bbe1 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012bbca:	83 ec 04             	sub    $0x4,%esp
f012bbcd:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012bbd2:	68 35 11 00 00       	push   $0x1135
f012bbd7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bbdc:	e8 cf 45 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bbe1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bbe4:	e8 29 0a fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bbe9:	29 c3                	sub    %eax,%ebx
f012bbeb:	89 d8                	mov    %ebx,%eax
f012bbed:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bbf2:	74 17                	je     f012bc0b <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bbf4:	83 ec 04             	sub    $0x4,%esp
f012bbf7:	68 0e a0 13 f0       	push   $0xf013a00e
f012bbfc:	68 37 11 00 00       	push   $0x1137
f012bc01:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bc06:	e8 a5 45 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bc0b:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bc12:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bc15:	e8 f8 09 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bc1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bc1d:	83 ec 08             	sub    $0x8,%esp
f012bc20:	68 00 fc 0f 00       	push   $0xffc00
f012bc25:	6a 00                	push   $0x0
f012bc27:	e8 1d c0 fd ff       	call   f0107c49 <krealloc>
f012bc2c:	83 c4 10             	add    $0x10,%esp
f012bc2f:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bc35:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bc3b:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bc40:	77 17                	ja     f012bc59 <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc42:	83 ec 04             	sub    $0x4,%esp
f012bc45:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012bc4a:	68 3e 11 00 00       	push   $0x113e
f012bc4f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bc54:	e8 57 45 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bc59:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bc5f:	89 c1                	mov    %eax,%ecx
f012bc61:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bc68:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bc6d:	0f b6 d0             	movzbl %al,%edx
f012bc70:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bc73:	01 d0                	add    %edx,%eax
f012bc75:	48                   	dec    %eax
f012bc76:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bc79:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bc7c:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc81:	f7 75 84             	divl   -0x7c(%ebp)
f012bc84:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bc87:	29 d0                	sub    %edx,%eax
f012bc89:	89 c3                	mov    %eax,%ebx
f012bc8b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bc92:	10 00 00 
f012bc95:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bc9a:	0f b6 c0             	movzbl %al,%eax
f012bc9d:	c1 e0 04             	shl    $0x4,%eax
f012bca0:	89 c2                	mov    %eax,%edx
f012bca2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bca8:	01 d0                	add    %edx,%eax
f012bcaa:	48                   	dec    %eax
f012bcab:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bcb1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bcb7:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcbc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bcc2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bcc8:	29 d0                	sub    %edx,%eax
f012bcca:	01 d8                	add    %ebx,%eax
f012bccc:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bcd1:	39 c1                	cmp    %eax,%ecx
f012bcd3:	74 17                	je     f012bcec <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012bcd5:	83 ec 04             	sub    $0x4,%esp
f012bcd8:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012bcdd:	68 40 11 00 00       	push   $0x1140
f012bce2:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bce7:	e8 c4 44 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bcec:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bcef:	e8 1e 09 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bcf4:	29 c3                	sub    %eax,%ebx
f012bcf6:	89 d8                	mov    %ebx,%eax
f012bcf8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bcfd:	74 17                	je     f012bd16 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012bcff:	83 ec 04             	sub    $0x4,%esp
f012bd02:	68 0e a0 13 f0       	push   $0xf013a00e
f012bd07:	68 42 11 00 00       	push   $0x1142
f012bd0c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bd11:	e8 9a 44 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bd16:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012bd1d:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bd20:	e8 ed 08 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bd25:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bd28:	83 ec 08             	sub    $0x8,%esp
f012bd2b:	68 00 fc 1f 00       	push   $0x1ffc00
f012bd30:	6a 00                	push   $0x0
f012bd32:	e8 12 bf fd ff       	call   f0107c49 <krealloc>
f012bd37:	83 c4 10             	add    $0x10,%esp
f012bd3a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bd40:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012bd46:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bd4b:	77 17                	ja     f012bd64 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd4d:	83 ec 04             	sub    $0x4,%esp
f012bd50:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012bd55:	68 49 11 00 00       	push   $0x1149
f012bd5a:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bd5f:	e8 4c 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bd64:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012bd6a:	89 c1                	mov    %eax,%ecx
f012bd6c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bd73:	10 00 00 
f012bd76:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bd7b:	0f b6 d0             	movzbl %al,%edx
f012bd7e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bd84:	01 d0                	add    %edx,%eax
f012bd86:	48                   	dec    %eax
f012bd87:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bd8d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bd93:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd98:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bd9e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bda4:	29 d0                	sub    %edx,%eax
f012bda6:	89 c3                	mov    %eax,%ebx
f012bda8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bdaf:	10 00 00 
f012bdb2:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bdb7:	0f b6 c0             	movzbl %al,%eax
f012bdba:	c1 e0 04             	shl    $0x4,%eax
f012bdbd:	89 c2                	mov    %eax,%edx
f012bdbf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bdc5:	01 d0                	add    %edx,%eax
f012bdc7:	48                   	dec    %eax
f012bdc8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bdce:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bdd4:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdd9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bddf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bde5:	29 d0                	sub    %edx,%eax
f012bde7:	01 d8                	add    %ebx,%eax
f012bde9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bdee:	39 c1                	cmp    %eax,%ecx
f012bdf0:	74 17                	je     f012be09 <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012bdf2:	83 ec 04             	sub    $0x4,%esp
f012bdf5:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012bdfa:	68 4b 11 00 00       	push   $0x114b
f012bdff:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012be04:	e8 a7 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012be09:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be0c:	e8 01 08 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012be11:	29 c3                	sub    %eax,%ebx
f012be13:	89 d8                	mov    %ebx,%eax
f012be15:	3d 00 02 00 00       	cmp    $0x200,%eax
f012be1a:	74 17                	je     f012be33 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012be1c:	83 ec 04             	sub    $0x4,%esp
f012be1f:	68 0e a0 13 f0       	push   $0xf013a00e
f012be24:	68 4d 11 00 00       	push   $0x114d
f012be29:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012be2e:	e8 7d 43 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012be33:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012be3a:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012be3d:	e8 d0 07 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012be42:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012be45:	83 ec 08             	sub    $0x8,%esp
f012be48:	68 00 fc 1f 00       	push   $0x1ffc00
f012be4d:	6a 00                	push   $0x0
f012be4f:	e8 f5 bd fd ff       	call   f0107c49 <krealloc>
f012be54:	83 c4 10             	add    $0x10,%esp
f012be57:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012be5d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012be63:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012be68:	77 17                	ja     f012be81 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be6a:	83 ec 04             	sub    $0x4,%esp
f012be6d:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012be72:	68 54 11 00 00       	push   $0x1154
f012be77:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012be7c:	e8 2f 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012be81:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012be87:	89 c1                	mov    %eax,%ecx
f012be89:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012be90:	10 00 00 
f012be93:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012be98:	0f b6 d0             	movzbl %al,%edx
f012be9b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012bea1:	01 d0                	add    %edx,%eax
f012bea3:	48                   	dec    %eax
f012bea4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012beaa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012beb0:	ba 00 00 00 00       	mov    $0x0,%edx
f012beb5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012bebb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bec1:	29 d0                	sub    %edx,%eax
f012bec3:	89 c3                	mov    %eax,%ebx
f012bec5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012becc:	10 00 00 
f012becf:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bed4:	0f b6 c0             	movzbl %al,%eax
f012bed7:	c1 e0 04             	shl    $0x4,%eax
f012beda:	89 c2                	mov    %eax,%edx
f012bedc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bee2:	01 d0                	add    %edx,%eax
f012bee4:	48                   	dec    %eax
f012bee5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012beeb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bef1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bef6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012befc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bf02:	29 d0                	sub    %edx,%eax
f012bf04:	01 d8                	add    %ebx,%eax
f012bf06:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bf0b:	39 c1                	cmp    %eax,%ecx
f012bf0d:	74 17                	je     f012bf26 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012bf0f:	83 ec 04             	sub    $0x4,%esp
f012bf12:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012bf17:	68 56 11 00 00       	push   $0x1156
f012bf1c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bf21:	e8 8a 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bf26:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf29:	e8 e4 06 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bf2e:	29 c3                	sub    %eax,%ebx
f012bf30:	89 d8                	mov    %ebx,%eax
f012bf32:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bf37:	74 17                	je     f012bf50 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012bf39:	83 ec 04             	sub    $0x4,%esp
f012bf3c:	68 0e a0 13 f0       	push   $0xf013a00e
f012bf41:	68 58 11 00 00       	push   $0x1158
f012bf46:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bf4b:	e8 60 42 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bf50:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012bf57:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf5a:	e8 b3 06 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012bf5f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bf62:	83 ec 08             	sub    $0x8,%esp
f012bf65:	68 00 fc 2f 00       	push   $0x2ffc00
f012bf6a:	6a 00                	push   $0x0
f012bf6c:	e8 d8 bc fd ff       	call   f0107c49 <krealloc>
f012bf71:	83 c4 10             	add    $0x10,%esp
f012bf74:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bf7a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012bf80:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bf85:	77 17                	ja     f012bf9e <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf87:	83 ec 04             	sub    $0x4,%esp
f012bf8a:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012bf8f:	68 5f 11 00 00       	push   $0x115f
f012bf94:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012bf99:	e8 12 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bf9e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012bfa4:	89 c1                	mov    %eax,%ecx
f012bfa6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bfad:	10 00 00 
f012bfb0:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bfb5:	0f b6 d0             	movzbl %al,%edx
f012bfb8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bfbe:	01 d0                	add    %edx,%eax
f012bfc0:	48                   	dec    %eax
f012bfc1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bfc7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bfcd:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfd2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bfd8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bfde:	29 d0                	sub    %edx,%eax
f012bfe0:	89 c3                	mov    %eax,%ebx
f012bfe2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bfe9:	10 00 00 
f012bfec:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012bff1:	0f b6 c0             	movzbl %al,%eax
f012bff4:	c1 e0 04             	shl    $0x4,%eax
f012bff7:	89 c2                	mov    %eax,%edx
f012bff9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bfff:	01 d0                	add    %edx,%eax
f012c001:	48                   	dec    %eax
f012c002:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c008:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c00e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c013:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c019:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c01f:	29 d0                	sub    %edx,%eax
f012c021:	01 d8                	add    %ebx,%eax
f012c023:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c028:	39 c1                	cmp    %eax,%ecx
f012c02a:	74 17                	je     f012c043 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c02c:	83 ec 04             	sub    $0x4,%esp
f012c02f:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012c034:	68 61 11 00 00       	push   $0x1161
f012c039:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c03e:	e8 6d 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c043:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c046:	e8 c7 05 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c04b:	29 c3                	sub    %eax,%ebx
f012c04d:	89 d8                	mov    %ebx,%eax
f012c04f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c054:	74 17                	je     f012c06d <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c056:	83 ec 04             	sub    $0x4,%esp
f012c059:	68 44 91 13 f0       	push   $0xf0139144
f012c05e:	68 63 11 00 00       	push   $0x1163
f012c063:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c068:	e8 43 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c06d:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c074:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c077:	e8 96 05 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c07c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c07f:	83 ec 08             	sub    $0x8,%esp
f012c082:	68 00 fc 2f 00       	push   $0x2ffc00
f012c087:	6a 00                	push   $0x0
f012c089:	e8 bb bb fd ff       	call   f0107c49 <krealloc>
f012c08e:	83 c4 10             	add    $0x10,%esp
f012c091:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c097:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c09d:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c0a2:	77 17                	ja     f012c0bb <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0a4:	83 ec 04             	sub    $0x4,%esp
f012c0a7:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012c0ac:	68 6a 11 00 00       	push   $0x116a
f012c0b1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c0b6:	e8 f5 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c0bb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c0c1:	89 c1                	mov    %eax,%ecx
f012c0c3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c0ca:	10 00 00 
f012c0cd:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012c0d2:	0f b6 d0             	movzbl %al,%edx
f012c0d5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c0db:	01 d0                	add    %edx,%eax
f012c0dd:	48                   	dec    %eax
f012c0de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c0e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c0f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c0fb:	29 d0                	sub    %edx,%eax
f012c0fd:	89 c3                	mov    %eax,%ebx
f012c0ff:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c106:	10 00 00 
f012c109:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012c10e:	0f b6 c0             	movzbl %al,%eax
f012c111:	c1 e0 04             	shl    $0x4,%eax
f012c114:	89 c2                	mov    %eax,%edx
f012c116:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c11c:	01 d0                	add    %edx,%eax
f012c11e:	48                   	dec    %eax
f012c11f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c125:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c12b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c130:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c136:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c13c:	29 d0                	sub    %edx,%eax
f012c13e:	01 d8                	add    %ebx,%eax
f012c140:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c145:	39 c1                	cmp    %eax,%ecx
f012c147:	74 17                	je     f012c160 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c149:	83 ec 04             	sub    $0x4,%esp
f012c14c:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012c151:	68 6c 11 00 00       	push   $0x116c
f012c156:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c15b:	e8 50 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c160:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c163:	e8 aa 04 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c168:	29 c3                	sub    %eax,%ebx
f012c16a:	89 d8                	mov    %ebx,%eax
f012c16c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c171:	74 17                	je     f012c18a <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c173:	83 ec 04             	sub    $0x4,%esp
f012c176:	68 0e a0 13 f0       	push   $0xf013a00e
f012c17b:	68 6e 11 00 00       	push   $0x116e
f012c180:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c185:	e8 26 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c18a:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c191:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c194:	e8 79 04 fe ff       	call   f010c612 <sys_calculate_free_frames>
f012c199:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c19c:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c1a3:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c1a6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c1ac:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c1b2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c1b8:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c1bb:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c1bd:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c1c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c1c9:	01 c2                	add    %eax,%edx
f012c1cb:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c1ce:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c1d0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c1d6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c1dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c1e3:	eb 11                	jmp    f012c1f6 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c1e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c1e8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c1ee:	01 d0                	add    %edx,%eax
f012c1f0:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c1f3:	ff 45 f4             	incl   -0xc(%ebp)
f012c1f6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c1fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c1ff:	7d e4                	jge    f012c1e5 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c201:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c207:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c20d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c213:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c219:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c21f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c226:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c22c:	01 d0                	add    %edx,%eax
f012c22e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c234:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c23a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c240:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c247:	eb 1b                	jmp    f012c264 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c249:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c24c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c253:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c259:	01 d0                	add    %edx,%eax
f012c25b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c261:	ff 45 f0             	incl   -0x10(%ebp)
f012c264:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c26a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c26d:	7d da                	jge    f012c249 <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c26f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c275:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c27b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c282:	eb 17                	jmp    f012c29b <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c284:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c287:	01 c0                	add    %eax,%eax
f012c289:	89 c2                	mov    %eax,%edx
f012c28b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c291:	01 d0                	add    %edx,%eax
f012c293:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c298:	ff 45 ec             	incl   -0x14(%ebp)
f012c29b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c2a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c2a4:	7d de                	jge    f012c284 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c2a6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c2ac:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c2b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c2b8:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c2bd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2c3:	01 c0                	add    %eax,%eax
f012c2c5:	89 c2                	mov    %eax,%edx
f012c2c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c2cd:	01 d0                	add    %edx,%eax
f012c2cf:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c2d4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c2da:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c2e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c2e7:	eb 49                	jmp    f012c332 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c2e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c2ec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c2f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c2f9:	01 d0                	add    %edx,%eax
f012c2fb:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c2fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c301:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c308:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c30e:	01 d0                	add    %edx,%eax
f012c310:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c316:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c319:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c320:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c326:	01 d0                	add    %edx,%eax
f012c328:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c32f:	ff 45 e8             	incl   -0x18(%ebp)
f012c332:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c338:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c33b:	7d ac                	jge    f012c2e9 <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c33d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c343:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c349:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c34f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c352:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c358:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c35e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c364:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c36b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c371:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c378:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c37e:	01 d0                	add    %edx,%eax
f012c380:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c383:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c389:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c390:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c396:	01 d0                	add    %edx,%eax
f012c398:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c39e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c3a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c3b1:	01 d0                	add    %edx,%eax
f012c3b3:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c3ba:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c3c0:	8a 00                	mov    (%eax),%al
f012c3c2:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c3c5:	75 17                	jne    f012c3de <test_krealloc_BF+0xb54>
f012c3c7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c3cd:	89 c2                	mov    %eax,%edx
f012c3cf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c3d5:	01 d0                	add    %edx,%eax
f012c3d7:	8a 00                	mov    (%eax),%al
f012c3d9:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c3dc:	74 17                	je     f012c3f5 <test_krealloc_BF+0xb6b>
			panic(
f012c3de:	83 ec 04             	sub    $0x4,%esp
f012c3e1:	68 2c a0 13 f0       	push   $0xf013a02c
f012c3e6:	68 b1 11 00 00       	push   $0x11b1
f012c3eb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c3f0:	e8 bb 3d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c3f5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c3fb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c401:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c407:	8a 00                	mov    (%eax),%al
f012c409:	3c 02                	cmp    $0x2,%al
f012c40b:	75 16                	jne    f012c423 <test_krealloc_BF+0xb99>
f012c40d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c413:	89 c2                	mov    %eax,%edx
f012c415:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c41b:	01 d0                	add    %edx,%eax
f012c41d:	8a 00                	mov    (%eax),%al
f012c41f:	3c 02                	cmp    $0x2,%al
f012c421:	74 20                	je     f012c443 <test_krealloc_BF+0xbb9>
			panic(
f012c423:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c429:	8a 00                	mov    (%eax),%al
f012c42b:	0f be c0             	movsbl %al,%eax
f012c42e:	50                   	push   %eax
f012c42f:	68 6c a0 13 f0       	push   $0xf013a06c
f012c434:	68 b7 11 00 00       	push   $0x11b7
f012c439:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c43e:	e8 6d 3d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c443:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c449:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c44f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c455:	8b 00                	mov    (%eax),%eax
f012c457:	83 f8 03             	cmp    $0x3,%eax
f012c45a:	75 1c                	jne    f012c478 <test_krealloc_BF+0xbee>
f012c45c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c462:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c469:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c46f:	01 d0                	add    %edx,%eax
f012c471:	8b 00                	mov    (%eax),%eax
f012c473:	83 f8 03             	cmp    $0x3,%eax
f012c476:	74 17                	je     f012c48f <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c478:	83 ec 04             	sub    $0x4,%esp
f012c47b:	68 b8 a0 13 f0       	push   $0xf013a0b8
f012c480:	68 bb 11 00 00       	push   $0x11bb
f012c485:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c48a:	e8 21 3d fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c48f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c495:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c49b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c4a1:	8b 00                	mov    (%eax),%eax
f012c4a3:	83 f8 04             	cmp    $0x4,%eax
f012c4a6:	75 1c                	jne    f012c4c4 <test_krealloc_BF+0xc3a>
f012c4a8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c4ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c4b5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c4bb:	01 d0                	add    %edx,%eax
f012c4bd:	8b 00                	mov    (%eax),%eax
f012c4bf:	83 f8 04             	cmp    $0x4,%eax
f012c4c2:	74 17                	je     f012c4db <test_krealloc_BF+0xc51>
			panic(
f012c4c4:	83 ec 04             	sub    $0x4,%esp
f012c4c7:	68 2c a0 13 f0       	push   $0xf013a02c
f012c4cc:	68 c0 11 00 00       	push   $0x11c0
f012c4d1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c4d6:	e8 d5 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c4db:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c4e1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c4e7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c4ed:	66 8b 00             	mov    (%eax),%ax
f012c4f0:	66 83 f8 05          	cmp    $0x5,%ax
f012c4f4:	75 1b                	jne    f012c511 <test_krealloc_BF+0xc87>
f012c4f6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4fc:	01 c0                	add    %eax,%eax
f012c4fe:	89 c2                	mov    %eax,%edx
f012c500:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c506:	01 d0                	add    %edx,%eax
f012c508:	66 8b 00             	mov    (%eax),%ax
f012c50b:	66 83 f8 05          	cmp    $0x5,%ax
f012c50f:	74 17                	je     f012c528 <test_krealloc_BF+0xc9e>
			panic(
f012c511:	83 ec 04             	sub    $0x4,%esp
f012c514:	68 2c a0 13 f0       	push   $0xf013a02c
f012c519:	68 c5 11 00 00       	push   $0x11c5
f012c51e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c523:	e8 88 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c528:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c52e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c534:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c53a:	66 8b 00             	mov    (%eax),%ax
f012c53d:	66 83 f8 06          	cmp    $0x6,%ax
f012c541:	75 1b                	jne    f012c55e <test_krealloc_BF+0xcd4>
f012c543:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c549:	01 c0                	add    %eax,%eax
f012c54b:	89 c2                	mov    %eax,%edx
f012c54d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c553:	01 d0                	add    %edx,%eax
f012c555:	66 8b 00             	mov    (%eax),%ax
f012c558:	66 83 f8 06          	cmp    $0x6,%ax
f012c55c:	74 17                	je     f012c575 <test_krealloc_BF+0xceb>
			panic(
f012c55e:	83 ec 04             	sub    $0x4,%esp
f012c561:	68 2c a0 13 f0       	push   $0xf013a02c
f012c566:	68 ca 11 00 00       	push   $0x11ca
f012c56b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c570:	e8 3b 3c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c575:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c57b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c581:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c587:	8a 00                	mov    (%eax),%al
f012c589:	3c 07                	cmp    $0x7,%al
f012c58b:	75 1b                	jne    f012c5a8 <test_krealloc_BF+0xd1e>
f012c58d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c593:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c59a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c5a0:	01 d0                	add    %edx,%eax
f012c5a2:	8a 00                	mov    (%eax),%al
f012c5a4:	3c 07                	cmp    $0x7,%al
f012c5a6:	74 17                	je     f012c5bf <test_krealloc_BF+0xd35>
			panic(
f012c5a8:	83 ec 04             	sub    $0x4,%esp
f012c5ab:	68 2c a0 13 f0       	push   $0xf013a02c
f012c5b0:	68 cf 11 00 00       	push   $0x11cf
f012c5b5:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c5ba:	e8 f1 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c5bf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c5c5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5c9:	66 83 f8 07          	cmp    $0x7,%ax
f012c5cd:	75 1f                	jne    f012c5ee <test_krealloc_BF+0xd64>
f012c5cf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c5d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c5dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c5e2:	01 d0                	add    %edx,%eax
f012c5e4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5e8:	66 83 f8 07          	cmp    $0x7,%ax
f012c5ec:	74 17                	je     f012c605 <test_krealloc_BF+0xd7b>
			panic(
f012c5ee:	83 ec 04             	sub    $0x4,%esp
f012c5f1:	68 2c a0 13 f0       	push   $0xf013a02c
f012c5f6:	68 d2 11 00 00       	push   $0x11d2
f012c5fb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c600:	e8 ab 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c605:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c60b:	8b 40 04             	mov    0x4(%eax),%eax
f012c60e:	83 f8 07             	cmp    $0x7,%eax
f012c611:	75 1d                	jne    f012c630 <test_krealloc_BF+0xda6>
f012c613:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c619:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c620:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c626:	01 d0                	add    %edx,%eax
f012c628:	8b 40 04             	mov    0x4(%eax),%eax
f012c62b:	83 f8 07             	cmp    $0x7,%eax
f012c62e:	74 17                	je     f012c647 <test_krealloc_BF+0xdbd>
			panic(
f012c630:	83 ec 04             	sub    $0x4,%esp
f012c633:	68 2c a0 13 f0       	push   $0xf013a02c
f012c638:	68 d5 11 00 00       	push   $0x11d5
f012c63d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c642:	e8 69 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c647:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c64d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c653:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c659:	8a 00                	mov    (%eax),%al
f012c65b:	3c 08                	cmp    $0x8,%al
f012c65d:	75 1b                	jne    f012c67a <test_krealloc_BF+0xdf0>
f012c65f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c665:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c66c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c672:	01 d0                	add    %edx,%eax
f012c674:	8a 00                	mov    (%eax),%al
f012c676:	3c 08                	cmp    $0x8,%al
f012c678:	74 17                	je     f012c691 <test_krealloc_BF+0xe07>
			panic(
f012c67a:	83 ec 04             	sub    $0x4,%esp
f012c67d:	68 2c a0 13 f0       	push   $0xf013a02c
f012c682:	68 da 11 00 00       	push   $0x11da
f012c687:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c68c:	e8 1f 3b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c691:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c697:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c69b:	66 83 f8 08          	cmp    $0x8,%ax
f012c69f:	75 1f                	jne    f012c6c0 <test_krealloc_BF+0xe36>
f012c6a1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6a7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6b4:	01 d0                	add    %edx,%eax
f012c6b6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6ba:	66 83 f8 08          	cmp    $0x8,%ax
f012c6be:	74 17                	je     f012c6d7 <test_krealloc_BF+0xe4d>
			panic(
f012c6c0:	83 ec 04             	sub    $0x4,%esp
f012c6c3:	68 2c a0 13 f0       	push   $0xf013a02c
f012c6c8:	68 dd 11 00 00       	push   $0x11dd
f012c6cd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c6d2:	e8 d9 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c6d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6dd:	8b 40 04             	mov    0x4(%eax),%eax
f012c6e0:	83 f8 08             	cmp    $0x8,%eax
f012c6e3:	75 1d                	jne    f012c702 <test_krealloc_BF+0xe78>
f012c6e5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6f8:	01 d0                	add    %edx,%eax
f012c6fa:	8b 40 04             	mov    0x4(%eax),%eax
f012c6fd:	83 f8 08             	cmp    $0x8,%eax
f012c700:	74 17                	je     f012c719 <test_krealloc_BF+0xe8f>
			panic(
f012c702:	83 ec 04             	sub    $0x4,%esp
f012c705:	68 2c a0 13 f0       	push   $0xf013a02c
f012c70a:	68 e0 11 00 00       	push   $0x11e0
f012c70f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c714:	e8 97 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c719:	e8 f4 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c71e:	89 c2                	mov    %eax,%edx
f012c720:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c723:	39 c2                	cmp    %eax,%edx
f012c725:	74 17                	je     f012c73e <test_krealloc_BF+0xeb4>
			panic(
f012c727:	83 ec 04             	sub    $0x4,%esp
f012c72a:	68 ec a0 13 f0       	push   $0xf013a0ec
f012c72f:	68 e4 11 00 00       	push   $0x11e4
f012c734:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c739:	e8 72 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c73e:	83 ec 0c             	sub    $0xc,%esp
f012c741:	68 38 a1 13 f0       	push   $0xf013a138
f012c746:	e8 e6 46 fd ff       	call   f0100e31 <cprintf>
f012c74b:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c74e:	e8 bf fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c753:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c756:	e8 5d 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c75b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c761:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c767:	83 ec 08             	sub    $0x8,%esp
f012c76a:	6a 00                	push   $0x0
f012c76c:	50                   	push   %eax
f012c76d:	e8 d7 b4 fd ff       	call   f0107c49 <krealloc>
f012c772:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c775:	e8 3e 7b fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c77a:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c780:	74 17                	je     f012c799 <test_krealloc_BF+0xf0f>
			panic(
f012c782:	83 ec 04             	sub    $0x4,%esp
f012c785:	68 5c a1 13 f0       	push   $0xf013a15c
f012c78a:	68 f1 11 00 00       	push   $0x11f1
f012c78f:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c794:	e8 17 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c799:	e8 74 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c79e:	89 c2                	mov    %eax,%edx
f012c7a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7a3:	29 c2                	sub    %eax,%edx
f012c7a5:	89 d0                	mov    %edx,%eax
f012c7a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7ac:	74 17                	je     f012c7c5 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012c7ae:	83 ec 04             	sub    $0x4,%esp
f012c7b1:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012c7b6:	68 f3 11 00 00       	push   $0x11f3
f012c7bb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c7c0:	e8 eb 39 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7c5:	e8 48 fe fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c7ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c7cd:	e8 e6 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c7d2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c7d8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c7de:	83 ec 08             	sub    $0x8,%esp
f012c7e1:	6a 00                	push   $0x0
f012c7e3:	50                   	push   %eax
f012c7e4:	e8 60 b4 fd ff       	call   f0107c49 <krealloc>
f012c7e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c7ec:	e8 c7 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c7f1:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c7f7:	74 17                	je     f012c810 <test_krealloc_BF+0xf86>
			panic(
f012c7f9:	83 ec 04             	sub    $0x4,%esp
f012c7fc:	68 5c a1 13 f0       	push   $0xf013a15c
f012c801:	68 fc 11 00 00       	push   $0x11fc
f012c806:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c80b:	e8 a0 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c810:	e8 fd fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c815:	89 c2                	mov    %eax,%edx
f012c817:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c81a:	29 c2                	sub    %eax,%edx
f012c81c:	89 d0                	mov    %edx,%eax
f012c81e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c823:	74 17                	je     f012c83c <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012c825:	83 ec 04             	sub    $0x4,%esp
f012c828:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012c82d:	68 fe 11 00 00       	push   $0x11fe
f012c832:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c837:	e8 74 39 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c83c:	e8 d1 fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c841:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c844:	e8 6f 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c849:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c84f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c855:	83 ec 08             	sub    $0x8,%esp
f012c858:	6a 00                	push   $0x0
f012c85a:	50                   	push   %eax
f012c85b:	e8 e9 b3 fd ff       	call   f0107c49 <krealloc>
f012c860:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c863:	e8 50 7a fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c868:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c86e:	74 17                	je     f012c887 <test_krealloc_BF+0xffd>
			panic(
f012c870:	83 ec 04             	sub    $0x4,%esp
f012c873:	68 14 8d 13 f0       	push   $0xf0138d14
f012c878:	68 06 12 00 00       	push   $0x1206
f012c87d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c882:	e8 29 39 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c887:	e8 86 fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c88c:	89 c2                	mov    %eax,%edx
f012c88e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c891:	29 c2                	sub    %eax,%edx
f012c893:	89 d0                	mov    %edx,%eax
f012c895:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c89a:	74 17                	je     f012c8b3 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012c89c:	83 ec 04             	sub    $0x4,%esp
f012c89f:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012c8a4:	68 08 12 00 00       	push   $0x1208
f012c8a9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c8ae:	e8 fd 38 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c8b3:	e8 5a fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c8b8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c8bb:	e8 f8 79 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c8c0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c8c6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c8cc:	83 ec 08             	sub    $0x8,%esp
f012c8cf:	6a 00                	push   $0x0
f012c8d1:	50                   	push   %eax
f012c8d2:	e8 72 b3 fd ff       	call   f0107c49 <krealloc>
f012c8d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c8da:	e8 d9 79 fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012c8df:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c8e5:	74 17                	je     f012c8fe <test_krealloc_BF+0x1074>
			panic(
f012c8e7:	83 ec 04             	sub    $0x4,%esp
f012c8ea:	68 5c a1 13 f0       	push   $0xf013a15c
f012c8ef:	68 10 12 00 00       	push   $0x1210
f012c8f4:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c8f9:	e8 b2 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c8fe:	e8 0f fd fd ff       	call   f010c612 <sys_calculate_free_frames>
f012c903:	89 c2                	mov    %eax,%edx
f012c905:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c908:	29 c2                	sub    %eax,%edx
f012c90a:	89 d0                	mov    %edx,%eax
f012c90c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c911:	74 17                	je     f012c92a <test_krealloc_BF+0x10a0>
			panic(
f012c913:	83 ec 04             	sub    $0x4,%esp
f012c916:	68 04 a2 13 f0       	push   $0xf013a204
f012c91b:	68 13 12 00 00       	push   $0x1213
f012c920:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c925:	e8 86 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c92a:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c931:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c938:	eb 48                	jmp    f012c982 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c93a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c93d:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012c942:	83 ec 04             	sub    $0x4,%esp
f012c945:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012c94b:	51                   	push   %ecx
f012c94c:	52                   	push   %edx
f012c94d:	50                   	push   %eax
f012c94e:	e8 c8 a7 fd ff       	call   f010711b <get_page_table>
f012c953:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c956:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012c95c:	85 c0                	test   %eax,%eax
f012c95e:	75 17                	jne    f012c977 <test_krealloc_BF+0x10ed>
					panic(
f012c960:	83 ec 04             	sub    $0x4,%esp
f012c963:	68 fc 95 13 f0       	push   $0xf01395fc
f012c968:	68 1f 12 00 00       	push   $0x121f
f012c96d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012c972:	e8 39 38 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c977:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c97e:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c982:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c986:	78 b2                	js     f012c93a <test_krealloc_BF+0x10b0>
f012c988:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c98c:	7f 09                	jg     f012c997 <test_krealloc_BF+0x110d>
f012c98e:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c995:	76 a3                	jbe    f012c93a <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c997:	83 ec 0c             	sub    $0xc,%esp
f012c99a:	68 43 a2 13 f0       	push   $0xf013a243
f012c99f:	e8 8d 44 fd ff       	call   f0100e31 <cprintf>
f012c9a4:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c9a7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c9ad:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9b3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c9ba:	eb 21                	jmp    f012c9dd <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012c9bc:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012c9c2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c9c5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c9cb:	01 c8                	add    %ecx,%eax
f012c9cd:	8a 00                	mov    (%eax),%al
f012c9cf:	0f be c0             	movsbl %al,%eax
f012c9d2:	01 d0                	add    %edx,%eax
f012c9d4:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9da:	ff 45 dc             	incl   -0x24(%ebp)
f012c9dd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c9e3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c9e6:	7d d4                	jge    f012c9bc <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c9e8:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012c9ee:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012c9f4:	42                   	inc    %edx
f012c9f5:	01 d2                	add    %edx,%edx
f012c9f7:	39 d0                	cmp    %edx,%eax
f012c9f9:	74 17                	je     f012ca12 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012c9fb:	83 ec 04             	sub    $0x4,%esp
f012c9fe:	68 4c a2 13 f0       	push   $0xf013a24c
f012ca03:	68 31 12 00 00       	push   $0x1231
f012ca08:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ca0d:	e8 9e 37 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ca12:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ca18:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca1e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca25:	eb 25                	jmp    f012ca4c <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012ca27:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ca2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ca30:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ca37:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ca3d:	01 c8                	add    %ecx,%eax
f012ca3f:	8b 00                	mov    (%eax),%eax
f012ca41:	01 d0                	add    %edx,%eax
f012ca43:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca49:	ff 45 dc             	incl   -0x24(%ebp)
f012ca4c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ca52:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca55:	7d d0                	jge    f012ca27 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ca57:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ca5d:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012ca63:	42                   	inc    %edx
f012ca64:	c1 e2 02             	shl    $0x2,%edx
f012ca67:	39 d0                	cmp    %edx,%eax
f012ca69:	74 17                	je     f012ca82 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012ca6b:	83 ec 04             	sub    $0x4,%esp
f012ca6e:	68 4c a2 13 f0       	push   $0xf013a24c
f012ca73:	68 3b 12 00 00       	push   $0x123b
f012ca78:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ca7d:	e8 2e 37 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ca82:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ca88:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ca8e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca95:	eb 24                	jmp    f012cabb <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012ca97:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ca9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012caa0:	01 c0                	add    %eax,%eax
f012caa2:	89 c1                	mov    %eax,%ecx
f012caa4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012caaa:	01 c8                	add    %ecx,%eax
f012caac:	66 8b 00             	mov    (%eax),%ax
f012caaf:	98                   	cwtl   
f012cab0:	01 d0                	add    %edx,%eax
f012cab2:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cab8:	ff 45 dc             	incl   -0x24(%ebp)
f012cabb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cac1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cac4:	7d d1                	jge    f012ca97 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012cac6:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012cacc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cad2:	8d 48 01             	lea    0x1(%eax),%ecx
f012cad5:	89 c8                	mov    %ecx,%eax
f012cad7:	c1 e0 02             	shl    $0x2,%eax
f012cada:	01 c8                	add    %ecx,%eax
f012cadc:	39 c2                	cmp    %eax,%edx
f012cade:	74 17                	je     f012caf7 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012cae0:	83 ec 04             	sub    $0x4,%esp
f012cae3:	68 4c a2 13 f0       	push   $0xf013a24c
f012cae8:	68 45 12 00 00       	push   $0x1245
f012caed:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012caf2:	e8 b9 36 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012caf7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cafd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb03:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cb0a:	eb 70                	jmp    f012cb7c <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012cb0c:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012cb12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb15:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb1c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb22:	01 c8                	add    %ecx,%eax
f012cb24:	8a 00                	mov    (%eax),%al
f012cb26:	0f be c0             	movsbl %al,%eax
f012cb29:	01 d0                	add    %edx,%eax
f012cb2b:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012cb31:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012cb37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb3a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb41:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb47:	01 c8                	add    %ecx,%eax
f012cb49:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb4d:	98                   	cwtl   
f012cb4e:	01 d0                	add    %edx,%eax
f012cb50:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012cb56:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cb5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb5f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb6c:	01 c8                	add    %ecx,%eax
f012cb6e:	8b 40 04             	mov    0x4(%eax),%eax
f012cb71:	01 d0                	add    %edx,%eax
f012cb73:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb79:	ff 45 dc             	incl   -0x24(%ebp)
f012cb7c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb82:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cb85:	7d 85                	jge    f012cb0c <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cb87:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012cb8d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb93:	8d 50 01             	lea    0x1(%eax),%edx
f012cb96:	89 d0                	mov    %edx,%eax
f012cb98:	01 c0                	add    %eax,%eax
f012cb9a:	01 d0                	add    %edx,%eax
f012cb9c:	01 c0                	add    %eax,%eax
f012cb9e:	01 d0                	add    %edx,%eax
f012cba0:	39 c1                	cmp    %eax,%ecx
f012cba2:	75 3a                	jne    f012cbde <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cba4:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cbaa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cbb0:	8d 50 01             	lea    0x1(%eax),%edx
f012cbb3:	89 d0                	mov    %edx,%eax
f012cbb5:	01 c0                	add    %eax,%eax
f012cbb7:	01 d0                	add    %edx,%eax
f012cbb9:	01 c0                	add    %eax,%eax
f012cbbb:	01 d0                	add    %edx,%eax
f012cbbd:	39 c1                	cmp    %eax,%ecx
f012cbbf:	75 1d                	jne    f012cbde <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cbc1:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cbc7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cbcd:	8d 50 01             	lea    0x1(%eax),%edx
f012cbd0:	89 d0                	mov    %edx,%eax
f012cbd2:	01 c0                	add    %eax,%eax
f012cbd4:	01 d0                	add    %edx,%eax
f012cbd6:	01 c0                	add    %eax,%eax
f012cbd8:	01 d0                	add    %edx,%eax
f012cbda:	39 c1                	cmp    %eax,%ecx
f012cbdc:	74 17                	je     f012cbf5 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cbde:	83 ec 04             	sub    $0x4,%esp
f012cbe1:	68 4c a2 13 f0       	push   $0xf013a24c
f012cbe6:	68 53 12 00 00       	push   $0x1253
f012cbeb:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cbf0:	e8 bb 35 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cbf5:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cbfc:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cbff:	e8 0e fa fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cc04:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cc07:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cc0d:	83 ec 08             	sub    $0x8,%esp
f012cc10:	68 00 3c 00 00       	push   $0x3c00
f012cc15:	50                   	push   %eax
f012cc16:	e8 2e b0 fd ff       	call   f0107c49 <krealloc>
f012cc1b:	83 c4 10             	add    $0x10,%esp
f012cc1e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc24:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cc2a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc2f:	77 17                	ja     f012cc48 <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc31:	83 ec 04             	sub    $0x4,%esp
f012cc34:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cc39:	68 5f 12 00 00       	push   $0x125f
f012cc3e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cc43:	e8 68 35 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cc48:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cc4e:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cc54:	74 17                	je     f012cc6d <test_krealloc_BF+0x13e3>
			panic(
f012cc56:	83 ec 04             	sub    $0x4,%esp
f012cc59:	68 84 a2 13 f0       	push   $0xf013a284
f012cc5e:	68 62 12 00 00       	push   $0x1262
f012cc63:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cc68:	e8 43 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cc6d:	e8 a0 f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cc72:	89 c2                	mov    %eax,%edx
f012cc74:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc77:	39 c2                	cmp    %eax,%edx
f012cc79:	74 17                	je     f012cc92 <test_krealloc_BF+0x1408>
			panic(
f012cc7b:	83 ec 04             	sub    $0x4,%esp
f012cc7e:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012cc83:	68 65 12 00 00       	push   $0x1265
f012cc88:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cc8d:	e8 1e 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cc92:	e8 7b f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cc97:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cc9a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cca0:	83 ec 08             	sub    $0x8,%esp
f012cca3:	68 00 fc 0f 00       	push   $0xffc00
f012cca8:	50                   	push   %eax
f012cca9:	e8 9b af fd ff       	call   f0107c49 <krealloc>
f012ccae:	83 c4 10             	add    $0x10,%esp
f012ccb1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ccb7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ccbd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ccc2:	77 17                	ja     f012ccdb <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ccc4:	83 ec 04             	sub    $0x4,%esp
f012ccc7:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cccc:	68 6b 12 00 00       	push   $0x126b
f012ccd1:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ccd6:	e8 d5 34 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012ccdb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cce1:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cce7:	74 17                	je     f012cd00 <test_krealloc_BF+0x1476>
			panic(
f012cce9:	83 ec 04             	sub    $0x4,%esp
f012ccec:	68 84 a2 13 f0       	push   $0xf013a284
f012ccf1:	68 6e 12 00 00       	push   $0x126e
f012ccf6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ccfb:	e8 b0 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd00:	e8 0d f9 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cd05:	89 c2                	mov    %eax,%edx
f012cd07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd0a:	39 c2                	cmp    %eax,%edx
f012cd0c:	74 17                	je     f012cd25 <test_krealloc_BF+0x149b>
			panic(
f012cd0e:	83 ec 04             	sub    $0x4,%esp
f012cd11:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012cd16:	68 71 12 00 00       	push   $0x1271
f012cd1b:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cd20:	e8 8b 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cd25:	e8 e8 f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cd2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cd2d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd33:	83 ec 08             	sub    $0x8,%esp
f012cd36:	68 00 fc 0f 00       	push   $0xffc00
f012cd3b:	50                   	push   %eax
f012cd3c:	e8 08 af fd ff       	call   f0107c49 <krealloc>
f012cd41:	83 c4 10             	add    $0x10,%esp
f012cd44:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cd50:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd55:	77 17                	ja     f012cd6e <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd57:	83 ec 04             	sub    $0x4,%esp
f012cd5a:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cd5f:	68 77 12 00 00       	push   $0x1277
f012cd64:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cd69:	e8 42 34 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cd6e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd74:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cd7a:	74 17                	je     f012cd93 <test_krealloc_BF+0x1509>
			panic(
f012cd7c:	83 ec 04             	sub    $0x4,%esp
f012cd7f:	68 84 a2 13 f0       	push   $0xf013a284
f012cd84:	68 7a 12 00 00       	push   $0x127a
f012cd89:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cd8e:	e8 1d 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd93:	e8 7a f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cd98:	89 c2                	mov    %eax,%edx
f012cd9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd9d:	39 c2                	cmp    %eax,%edx
f012cd9f:	74 17                	je     f012cdb8 <test_krealloc_BF+0x152e>
			panic(
f012cda1:	83 ec 04             	sub    $0x4,%esp
f012cda4:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012cda9:	68 7d 12 00 00       	push   $0x127d
f012cdae:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cdb3:	e8 f8 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cdb8:	e8 55 f8 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cdbd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cdc0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cdc6:	83 ec 08             	sub    $0x8,%esp
f012cdc9:	68 00 fc 0f 00       	push   $0xffc00
f012cdce:	50                   	push   %eax
f012cdcf:	e8 75 ae fd ff       	call   f0107c49 <krealloc>
f012cdd4:	83 c4 10             	add    $0x10,%esp
f012cdd7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cddd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cde3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cde8:	77 17                	ja     f012ce01 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cdea:	83 ec 04             	sub    $0x4,%esp
f012cded:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cdf2:	68 85 12 00 00       	push   $0x1285
f012cdf7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cdfc:	e8 af 33 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012ce01:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ce07:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012ce0d:	74 17                	je     f012ce26 <test_krealloc_BF+0x159c>
			panic(
f012ce0f:	83 ec 04             	sub    $0x4,%esp
f012ce12:	68 34 a3 13 f0       	push   $0xf013a334
f012ce17:	68 88 12 00 00       	push   $0x1288
f012ce1c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ce21:	e8 8a 33 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ce26:	e8 e7 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ce2b:	89 c2                	mov    %eax,%edx
f012ce2d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce30:	39 c2                	cmp    %eax,%edx
f012ce32:	74 17                	je     f012ce4b <test_krealloc_BF+0x15c1>
			panic(
f012ce34:	83 ec 04             	sub    $0x4,%esp
f012ce37:	68 f0 a2 13 f0       	push   $0xf013a2f0
f012ce3c:	68 8b 12 00 00       	push   $0x128b
f012ce41:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ce46:	e8 65 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ce4b:	83 ec 0c             	sub    $0xc,%esp
f012ce4e:	68 13 95 13 f0       	push   $0xf0139513
f012ce53:	e8 d9 3f fd ff       	call   f0100e31 <cprintf>
f012ce58:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ce5b:	e8 b2 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ce60:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012ce63:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ce69:	83 ec 08             	sub    $0x8,%esp
f012ce6c:	68 00 18 10 00       	push   $0x101800
f012ce71:	50                   	push   %eax
f012ce72:	e8 d2 ad fd ff       	call   f0107c49 <krealloc>
f012ce77:	83 c4 10             	add    $0x10,%esp
f012ce7a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce7d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce80:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce85:	77 17                	ja     f012ce9e <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce87:	83 ec 04             	sub    $0x4,%esp
f012ce8a:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012ce8f:	68 93 12 00 00       	push   $0x1293
f012ce94:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012ce99:	e8 12 33 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012ce9e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cea4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cea7:	74 17                	je     f012cec0 <test_krealloc_BF+0x1636>
			panic(
f012cea9:	83 ec 04             	sub    $0x4,%esp
f012ceac:	68 94 a3 13 f0       	push   $0xf013a394
f012ceb1:	68 96 12 00 00       	push   $0x1296
f012ceb6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cebb:	e8 f0 32 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012cec0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cec3:	e8 4a f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cec8:	29 c3                	sub    %eax,%ebx
f012ceca:	89 d8                	mov    %ebx,%eax
f012cecc:	83 f8 02             	cmp    $0x2,%eax
f012cecf:	74 17                	je     f012cee8 <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012ced1:	83 ec 04             	sub    $0x4,%esp
f012ced4:	68 10 a4 13 f0       	push   $0xf013a410
f012ced9:	68 98 12 00 00       	push   $0x1298
f012cede:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cee3:	e8 c8 32 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cee8:	e8 25 f7 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012ceed:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cef0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cef6:	83 ec 08             	sub    $0x8,%esp
f012cef9:	68 00 fc 3f 00       	push   $0x3ffc00
f012cefe:	50                   	push   %eax
f012ceff:	e8 45 ad fd ff       	call   f0107c49 <krealloc>
f012cf04:	83 c4 10             	add    $0x10,%esp
f012cf07:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf0d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf12:	77 17                	ja     f012cf2b <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf14:	83 ec 04             	sub    $0x4,%esp
f012cf17:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cf1c:	68 9e 12 00 00       	push   $0x129e
f012cf21:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cf26:	e8 85 32 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012cf2b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cf31:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf34:	74 17                	je     f012cf4d <test_krealloc_BF+0x16c3>
			panic(
f012cf36:	83 ec 04             	sub    $0x4,%esp
f012cf39:	68 94 a3 13 f0       	push   $0xf013a394
f012cf3e:	68 a1 12 00 00       	push   $0x12a1
f012cf43:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cf48:	e8 63 32 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cf4d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf50:	e8 bd f6 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cf55:	29 c3                	sub    %eax,%ebx
f012cf57:	89 d8                	mov    %ebx,%eax
f012cf59:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cf5e:	74 17                	je     f012cf77 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf60:	83 ec 04             	sub    $0x4,%esp
f012cf63:	68 10 a4 13 f0       	push   $0xf013a410
f012cf68:	68 a4 12 00 00       	push   $0x12a4
f012cf6d:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cf72:	e8 39 32 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012cf77:	83 ec 0c             	sub    $0xc,%esp
f012cf7a:	68 58 95 13 f0       	push   $0xf0139558
f012cf7f:	e8 ad 3e fd ff       	call   f0100e31 <cprintf>
f012cf84:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012cf87:	e8 86 f6 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012cf8c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012cf8f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cf95:	83 ec 08             	sub    $0x8,%esp
f012cf98:	68 00 fc 9f 00       	push   $0x9ffc00
f012cf9d:	50                   	push   %eax
f012cf9e:	e8 a6 ac fd ff       	call   f0107c49 <krealloc>
f012cfa3:	83 c4 10             	add    $0x10,%esp
f012cfa6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfa9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cfac:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfb1:	77 17                	ja     f012cfca <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfb3:	83 ec 04             	sub    $0x4,%esp
f012cfb6:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012cfbb:	68 af 12 00 00       	push   $0x12af
f012cfc0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012cfc5:	e8 e6 31 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012cfca:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cfd1:	10 00 00 
f012cfd4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012cfd9:	0f b6 d0             	movzbl %al,%edx
f012cfdc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012cfe2:	01 d0                	add    %edx,%eax
f012cfe4:	48                   	dec    %eax
f012cfe5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012cfeb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cff1:	ba 00 00 00 00       	mov    $0x0,%edx
f012cff6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012cffc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d002:	29 d0                	sub    %edx,%eax
f012d004:	89 c1                	mov    %eax,%ecx
f012d006:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d00d:	10 00 00 
f012d010:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d015:	0f b6 c0             	movzbl %al,%eax
f012d018:	c1 e0 04             	shl    $0x4,%eax
f012d01b:	89 c2                	mov    %eax,%edx
f012d01d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d023:	01 d0                	add    %edx,%eax
f012d025:	48                   	dec    %eax
f012d026:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d02c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d032:	ba 00 00 00 00       	mov    $0x0,%edx
f012d037:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d03d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d043:	29 d0                	sub    %edx,%eax
f012d045:	01 c8                	add    %ecx,%eax
f012d047:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d04d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d050:	39 c2                	cmp    %eax,%edx
f012d052:	74 18                	je     f012d06c <test_krealloc_BF+0x17e2>
			panic(
f012d054:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d057:	50                   	push   %eax
f012d058:	68 44 a4 13 f0       	push   $0xf013a444
f012d05d:	68 b3 12 00 00       	push   $0x12b3
f012d062:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d067:	e8 44 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d06c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d072:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d075:	75 17                	jne    f012d08e <test_krealloc_BF+0x1804>
			panic(
f012d077:	83 ec 04             	sub    $0x4,%esp
f012d07a:	68 88 a4 13 f0       	push   $0xf013a488
f012d07f:	68 b6 12 00 00       	push   $0x12b6
f012d084:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d089:	e8 22 31 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d08e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d091:	e8 7c f5 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d096:	29 c3                	sub    %eax,%ebx
f012d098:	89 d8                	mov    %ebx,%eax
f012d09a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d09f:	74 17                	je     f012d0b8 <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d0a1:	83 ec 04             	sub    $0x4,%esp
f012d0a4:	68 10 a4 13 f0       	push   $0xf013a410
f012d0a9:	68 b9 12 00 00       	push   $0x12b9
f012d0ae:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d0b3:	e8 f8 30 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d0b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0bb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d0c1:	e8 4c f5 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d0c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d0c9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d0cf:	83 ec 08             	sub    $0x8,%esp
f012d0d2:	68 00 fc 3f 00       	push   $0x3ffc00
f012d0d7:	50                   	push   %eax
f012d0d8:	e8 6c ab fd ff       	call   f0107c49 <krealloc>
f012d0dd:	83 c4 10             	add    $0x10,%esp
f012d0e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d0eb:	77 17                	ja     f012d104 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0ed:	83 ec 04             	sub    $0x4,%esp
f012d0f0:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012d0f5:	68 c2 12 00 00       	push   $0x12c2
f012d0fa:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d0ff:	e8 ac 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d104:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d10a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d10d:	75 17                	jne    f012d126 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d10f:	83 ec 04             	sub    $0x4,%esp
f012d112:	68 88 a4 13 f0       	push   $0xf013a488
f012d117:	68 c4 12 00 00       	push   $0x12c4
f012d11c:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d121:	e8 8a 30 fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d126:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d12d:	10 00 00 
f012d130:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d135:	0f b6 d0             	movzbl %al,%edx
f012d138:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d13e:	01 d0                	add    %edx,%eax
f012d140:	48                   	dec    %eax
f012d141:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d147:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d14d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d152:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d158:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d15e:	29 d0                	sub    %edx,%eax
f012d160:	89 c1                	mov    %eax,%ecx
f012d162:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d169:	10 00 00 
f012d16c:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d171:	0f b6 c0             	movzbl %al,%eax
f012d174:	c1 e0 04             	shl    $0x4,%eax
f012d177:	89 c2                	mov    %eax,%edx
f012d179:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d17f:	01 d0                	add    %edx,%eax
f012d181:	48                   	dec    %eax
f012d182:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d188:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d18e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d193:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d199:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d19f:	29 d0                	sub    %edx,%eax
f012d1a1:	01 c8                	add    %ecx,%eax
f012d1a3:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d1a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1ac:	39 c2                	cmp    %eax,%edx
f012d1ae:	74 17                	je     f012d1c7 <test_krealloc_BF+0x193d>
f012d1b0:	83 ec 04             	sub    $0x4,%esp
f012d1b3:	68 dc 9f 13 f0       	push   $0xf0139fdc
f012d1b8:	68 c5 12 00 00       	push   $0x12c5
f012d1bd:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d1c2:	e8 e9 2f fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d1c7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d1ca:	e8 43 f4 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d1cf:	29 c3                	sub    %eax,%ebx
f012d1d1:	89 d8                	mov    %ebx,%eax
f012d1d3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d1d8:	74 17                	je     f012d1f1 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d1da:	83 ec 04             	sub    $0x4,%esp
f012d1dd:	68 10 a4 13 f0       	push   $0xf013a410
f012d1e2:	68 c9 12 00 00       	push   $0x12c9
f012d1e7:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d1ec:	e8 bf 2f fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d1f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1f4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d1fa:	e8 13 f4 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d1ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d202:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d208:	83 ec 08             	sub    $0x8,%esp
f012d20b:	68 00 fc 3f 01       	push   $0x13ffc00
f012d210:	50                   	push   %eax
f012d211:	e8 33 aa fd ff       	call   f0107c49 <krealloc>
f012d216:	83 c4 10             	add    $0x10,%esp
f012d219:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d21c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d21f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d224:	77 17                	ja     f012d23d <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d226:	83 ec 04             	sub    $0x4,%esp
f012d229:	68 a0 9f 13 f0       	push   $0xf0139fa0
f012d22e:	68 cf 12 00 00       	push   $0x12cf
f012d233:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d238:	e8 73 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d23d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d243:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d246:	75 17                	jne    f012d25f <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d248:	83 ec 04             	sub    $0x4,%esp
f012d24b:	68 88 a4 13 f0       	push   $0xf013a488
f012d250:	68 d1 12 00 00       	push   $0x12d1
f012d255:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d25a:	e8 51 2f fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d25f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d266:	10 00 00 
f012d269:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d26e:	0f b6 d0             	movzbl %al,%edx
f012d271:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d277:	01 d0                	add    %edx,%eax
f012d279:	48                   	dec    %eax
f012d27a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d280:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d286:	ba 00 00 00 00       	mov    $0x0,%edx
f012d28b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d291:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d297:	29 d0                	sub    %edx,%eax
f012d299:	89 c1                	mov    %eax,%ecx
f012d29b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d2a2:	10 00 00 
f012d2a5:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012d2aa:	0f b6 c0             	movzbl %al,%eax
f012d2ad:	c1 e0 04             	shl    $0x4,%eax
f012d2b0:	89 c2                	mov    %eax,%edx
f012d2b2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d2b8:	01 d0                	add    %edx,%eax
f012d2ba:	48                   	dec    %eax
f012d2bb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d2c1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012d2cc:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d2d2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2d8:	29 d0                	sub    %edx,%eax
f012d2da:	01 c8                	add    %ecx,%eax
f012d2dc:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d2e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2e5:	39 c2                	cmp    %eax,%edx
f012d2e7:	74 17                	je     f012d300 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d2e9:	83 ec 04             	sub    $0x4,%esp
f012d2ec:	68 a8 a5 13 f0       	push   $0xf013a5a8
f012d2f1:	68 d3 12 00 00       	push   $0x12d3
f012d2f6:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d2fb:	e8 b0 2e fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d300:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d303:	e8 0a f3 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d308:	29 c3                	sub    %eax,%ebx
f012d30a:	89 d8                	mov    %ebx,%eax
f012d30c:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d311:	74 17                	je     f012d32a <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d313:	83 ec 04             	sub    $0x4,%esp
f012d316:	68 10 a4 13 f0       	push   $0xf013a410
f012d31b:	68 d6 12 00 00       	push   $0x12d6
f012d320:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d325:	e8 86 2e fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d32a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d32d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d333:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d339:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d33f:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d346:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d349:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d350:	eb 21                	jmp    f012d373 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d352:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d358:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d35b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d361:	01 c8                	add    %ecx,%eax
f012d363:	8a 00                	mov    (%eax),%al
f012d365:	0f be c0             	movsbl %al,%eax
f012d368:	01 d0                	add    %edx,%eax
f012d36a:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d370:	ff 45 d8             	incl   -0x28(%ebp)
f012d373:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d379:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d37c:	7d d4                	jge    f012d352 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d37e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d384:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d38a:	42                   	inc    %edx
f012d38b:	01 d2                	add    %edx,%edx
f012d38d:	39 d0                	cmp    %edx,%eax
f012d38f:	74 17                	je     f012d3a8 <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d391:	83 ec 04             	sub    $0x4,%esp
f012d394:	68 40 a5 13 f0       	push   $0xf013a540
f012d399:	68 e4 12 00 00       	push   $0x12e4
f012d39e:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d3a3:	e8 08 2e fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d3a8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d3ae:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d3b4:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d3bb:	00 00 00 
		sums[1] = 0;
f012d3be:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d3c5:	00 00 00 
		sums[2] = 0;
f012d3c8:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d3cf:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d3d2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d3d9:	eb 70                	jmp    f012d44b <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d3db:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d3e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3e4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d3f1:	01 c8                	add    %ecx,%eax
f012d3f3:	8a 00                	mov    (%eax),%al
f012d3f5:	0f be c0             	movsbl %al,%eax
f012d3f8:	01 d0                	add    %edx,%eax
f012d3fa:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d400:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d406:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d409:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d410:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d416:	01 c8                	add    %ecx,%eax
f012d418:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d41c:	98                   	cwtl   
f012d41d:	01 d0                	add    %edx,%eax
f012d41f:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d425:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d42b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d42e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d435:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d43b:	01 c8                	add    %ecx,%eax
f012d43d:	8b 40 04             	mov    0x4(%eax),%eax
f012d440:	01 d0                	add    %edx,%eax
f012d442:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d448:	ff 45 d8             	incl   -0x28(%ebp)
f012d44b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d451:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d454:	7d 85                	jge    f012d3db <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d456:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d45c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d462:	8d 50 01             	lea    0x1(%eax),%edx
f012d465:	89 d0                	mov    %edx,%eax
f012d467:	01 c0                	add    %eax,%eax
f012d469:	01 d0                	add    %edx,%eax
f012d46b:	01 c0                	add    %eax,%eax
f012d46d:	01 d0                	add    %edx,%eax
f012d46f:	39 c1                	cmp    %eax,%ecx
f012d471:	75 3a                	jne    f012d4ad <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d473:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d479:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d47f:	8d 50 01             	lea    0x1(%eax),%edx
f012d482:	89 d0                	mov    %edx,%eax
f012d484:	01 c0                	add    %eax,%eax
f012d486:	01 d0                	add    %edx,%eax
f012d488:	01 c0                	add    %eax,%eax
f012d48a:	01 d0                	add    %edx,%eax
f012d48c:	39 c1                	cmp    %eax,%ecx
f012d48e:	75 1d                	jne    f012d4ad <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d490:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d496:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d49c:	8d 50 01             	lea    0x1(%eax),%edx
f012d49f:	89 d0                	mov    %edx,%eax
f012d4a1:	01 c0                	add    %eax,%eax
f012d4a3:	01 d0                	add    %edx,%eax
f012d4a5:	01 c0                	add    %eax,%eax
f012d4a7:	01 d0                	add    %edx,%eax
f012d4a9:	39 c1                	cmp    %eax,%ecx
f012d4ab:	74 17                	je     f012d4c4 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d4ad:	83 ec 04             	sub    $0x4,%esp
f012d4b0:	68 40 a5 13 f0       	push   $0xf013a540
f012d4b5:	68 f6 12 00 00       	push   $0x12f6
f012d4ba:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d4bf:	e8 ec 2c fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d4c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d4ca:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d4d0:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d4d7:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4da:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d4e1:	eb 24                	jmp    f012d507 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d4e3:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d4e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d4ec:	01 c0                	add    %eax,%eax
f012d4ee:	89 c1                	mov    %eax,%ecx
f012d4f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d4f6:	01 c8                	add    %ecx,%eax
f012d4f8:	66 8b 00             	mov    (%eax),%ax
f012d4fb:	98                   	cwtl   
f012d4fc:	01 d0                	add    %edx,%eax
f012d4fe:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d504:	ff 45 d8             	incl   -0x28(%ebp)
f012d507:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d50d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d510:	7d d1                	jge    f012d4e3 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d512:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d518:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d51e:	8d 48 01             	lea    0x1(%eax),%ecx
f012d521:	89 c8                	mov    %ecx,%eax
f012d523:	c1 e0 02             	shl    $0x2,%eax
f012d526:	01 c8                	add    %ecx,%eax
f012d528:	39 c2                	cmp    %eax,%edx
f012d52a:	74 17                	je     f012d543 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d52c:	83 ec 04             	sub    $0x4,%esp
f012d52f:	68 40 a5 13 f0       	push   $0xf013a540
f012d534:	68 00 13 00 00       	push   $0x1300
f012d539:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d53e:	e8 6d 2c fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d543:	e8 ca f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d548:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d54b:	e8 68 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d550:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d556:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d55c:	83 ec 08             	sub    $0x8,%esp
f012d55f:	6a 00                	push   $0x0
f012d561:	50                   	push   %eax
f012d562:	e8 e2 a6 fd ff       	call   f0107c49 <krealloc>
f012d567:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d56a:	e8 49 6d fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d56f:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d575:	74 17                	je     f012d58e <test_krealloc_BF+0x1d04>
			panic(
f012d577:	83 ec 04             	sub    $0x4,%esp
f012d57a:	68 14 8d 13 f0       	push   $0xf0138d14
f012d57f:	68 08 13 00 00       	push   $0x1308
f012d584:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d589:	e8 22 2c fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d58e:	e8 7f f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d593:	89 c2                	mov    %eax,%edx
f012d595:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d598:	29 c2                	sub    %eax,%edx
f012d59a:	89 d0                	mov    %edx,%eax
f012d59c:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d5a1:	74 17                	je     f012d5ba <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d5a3:	83 ec 04             	sub    $0x4,%esp
f012d5a6:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012d5ab:	68 0a 13 00 00       	push   $0x130a
f012d5b0:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d5b5:	e8 f6 2b fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d5ba:	e8 53 f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d5bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5c2:	e8 f1 6c fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d5c7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d5cd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d5d3:	83 ec 0c             	sub    $0xc,%esp
f012d5d6:	50                   	push   %eax
f012d5d7:	e8 d1 a5 fd ff       	call   f0107bad <kfree>
f012d5dc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5df:	e8 d4 6c fd ff       	call   f01042b8 <pf_calculate_free_frames>
f012d5e4:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d5ea:	74 17                	je     f012d603 <test_krealloc_BF+0x1d79>
			panic(
f012d5ec:	83 ec 04             	sub    $0x4,%esp
f012d5ef:	68 14 8d 13 f0       	push   $0xf0138d14
f012d5f4:	68 12 13 00 00       	push   $0x1312
f012d5f9:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d5fe:	e8 ad 2b fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d603:	e8 0a f0 fd ff       	call   f010c612 <sys_calculate_free_frames>
f012d608:	89 c2                	mov    %eax,%edx
f012d60a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d60d:	29 c2                	sub    %eax,%edx
f012d60f:	89 d0                	mov    %edx,%eax
f012d611:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d616:	74 17                	je     f012d62f <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d618:	83 ec 04             	sub    $0x4,%esp
f012d61b:	68 d0 a1 13 f0       	push   $0xf013a1d0
f012d620:	68 14 13 00 00       	push   $0x1314
f012d625:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d62a:	e8 81 2b fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d62f:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d636:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d63d:	eb 48                	jmp    f012d687 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d63f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d642:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012d647:	83 ec 04             	sub    $0x4,%esp
f012d64a:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d650:	51                   	push   %ecx
f012d651:	52                   	push   %edx
f012d652:	50                   	push   %eax
f012d653:	e8 c3 9a fd ff       	call   f010711b <get_page_table>
f012d658:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d65b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012d661:	85 c0                	test   %eax,%eax
f012d663:	75 17                	jne    f012d67c <test_krealloc_BF+0x1df2>
					panic(
f012d665:	83 ec 04             	sub    $0x4,%esp
f012d668:	68 fc 95 13 f0       	push   $0xf01395fc
f012d66d:	68 21 13 00 00       	push   $0x1321
f012d672:	68 fa 8c 13 f0       	push   $0xf0138cfa
f012d677:	e8 34 2b fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d67c:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d683:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d687:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d68b:	78 b2                	js     f012d63f <test_krealloc_BF+0x1db5>
f012d68d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d691:	7f 09                	jg     f012d69c <test_krealloc_BF+0x1e12>
f012d693:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d69a:	76 a3                	jbe    f012d63f <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d69c:	83 ec 0c             	sub    $0xc,%esp
f012d69f:	68 de 8e 13 f0       	push   $0xf0138ede
f012d6a4:	e8 88 37 fd ff       	call   f0100e31 <cprintf>
f012d6a9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012d6ac:	83 ec 0c             	sub    $0xc,%esp
f012d6af:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012d6b4:	e8 78 37 fd ff       	call   f0100e31 <cprintf>
f012d6b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d6bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d6c1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d6c4:	5b                   	pop    %ebx
f012d6c5:	5f                   	pop    %edi
f012d6c6:	5d                   	pop    %ebp
f012d6c7:	c3                   	ret    

f012d6c8 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012d6c8:	55                   	push   %ebp
f012d6c9:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012d6cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d6d0:	5d                   	pop    %ebp
f012d6d1:	c3                   	ret    

f012d6d2 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012d6d2:	55                   	push   %ebp
f012d6d3:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012d6d5:	c7 05 14 3b 25 f0 00 	movl   $0x0,0xf0253b14
f012d6dc:	00 00 00 
}
f012d6df:	90                   	nop
f012d6e0:	5d                   	pop    %ebp
f012d6e1:	c3                   	ret    

f012d6e2 <inctst>:
void inctst()
{
f012d6e2:	55                   	push   %ebp
f012d6e3:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012d6e5:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d6ea:	40                   	inc    %eax
f012d6eb:	a3 14 3b 25 f0       	mov    %eax,0xf0253b14
}
f012d6f0:	90                   	nop
f012d6f1:	5d                   	pop    %ebp
f012d6f2:	c3                   	ret    

f012d6f3 <gettst>:
uint32 gettst()
{
f012d6f3:	55                   	push   %ebp
f012d6f4:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012d6f6:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
}
f012d6fb:	5d                   	pop    %ebp
f012d6fc:	c3                   	ret    

f012d6fd <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012d6fd:	55                   	push   %ebp
f012d6fe:	89 e5                	mov    %esp,%ebp
f012d700:	83 ec 28             	sub    $0x28,%esp
f012d703:	8b 45 14             	mov    0x14(%ebp),%eax
f012d706:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012d709:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012d710:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012d714:	83 f8 65             	cmp    $0x65,%eax
f012d717:	74 5d                	je     f012d776 <tst+0x79>
f012d719:	83 f8 65             	cmp    $0x65,%eax
f012d71c:	7f 0a                	jg     f012d728 <tst+0x2b>
f012d71e:	83 f8 62             	cmp    $0x62,%eax
f012d721:	74 73                	je     f012d796 <tst+0x99>
f012d723:	e9 91 00 00 00       	jmp    f012d7b9 <tst+0xbc>
f012d728:	83 f8 67             	cmp    $0x67,%eax
f012d72b:	74 29                	je     f012d756 <tst+0x59>
f012d72d:	83 f8 6c             	cmp    $0x6c,%eax
f012d730:	0f 85 83 00 00 00    	jne    f012d7b9 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012d736:	8b 45 08             	mov    0x8(%ebp),%eax
f012d739:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d73c:	73 09                	jae    f012d747 <tst+0x4a>
			chk = 1;
f012d73e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d745:	eb 68                	jmp    f012d7af <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012d747:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d74b:	74 62                	je     f012d7af <tst+0xb2>
			chk = 1;
f012d74d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d754:	eb 59                	jmp    f012d7af <tst+0xb2>
	case 'g':
		if (n > v1)
f012d756:	8b 45 08             	mov    0x8(%ebp),%eax
f012d759:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d75c:	76 09                	jbe    f012d767 <tst+0x6a>
			chk = 1;
f012d75e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d765:	eb 4b                	jmp    f012d7b2 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012d767:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d76b:	74 45                	je     f012d7b2 <tst+0xb5>
			chk = 1;
f012d76d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d774:	eb 3c                	jmp    f012d7b2 <tst+0xb5>
	case 'e':
		if (n == v1)
f012d776:	8b 45 08             	mov    0x8(%ebp),%eax
f012d779:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d77c:	75 09                	jne    f012d787 <tst+0x8a>
			chk = 1;
f012d77e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012d785:	eb 2e                	jmp    f012d7b5 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012d787:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012d78b:	74 28                	je     f012d7b5 <tst+0xb8>
			chk = 1;
f012d78d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d794:	eb 1f                	jmp    f012d7b5 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012d796:	8b 45 08             	mov    0x8(%ebp),%eax
f012d799:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012d79c:	72 1a                	jb     f012d7b8 <tst+0xbb>
f012d79e:	8b 45 08             	mov    0x8(%ebp),%eax
f012d7a1:	3b 45 10             	cmp    0x10(%ebp),%eax
f012d7a4:	77 12                	ja     f012d7b8 <tst+0xbb>
			chk = 1;
f012d7a6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012d7ad:	eb 09                	jmp    f012d7b8 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d7af:	90                   	nop
f012d7b0:	eb 07                	jmp    f012d7b9 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d7b2:	90                   	nop
f012d7b3:	eb 04                	jmp    f012d7b9 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012d7b5:	90                   	nop
f012d7b6:	eb 01                	jmp    f012d7b9 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012d7b8:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012d7b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012d7bd:	75 14                	jne    f012d7d3 <tst+0xd6>
f012d7bf:	83 ec 04             	sub    $0x4,%esp
f012d7c2:	68 20 a6 13 f0       	push   $0xf013a620
f012d7c7:	6a 3c                	push   $0x3c
f012d7c9:	68 33 a6 13 f0       	push   $0xf013a633
f012d7ce:	e8 dd 29 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012d7d3:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d7d8:	40                   	inc    %eax
f012d7d9:	a3 14 3b 25 f0       	mov    %eax,0xf0253b14
	return;
f012d7de:	90                   	nop
}
f012d7df:	c9                   	leave  
f012d7e0:	c3                   	ret    

f012d7e1 <chktst>:

void chktst(uint32 n)
{
f012d7e1:	55                   	push   %ebp
f012d7e2:	89 e5                	mov    %esp,%ebp
f012d7e4:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012d7e7:	a1 14 3b 25 f0       	mov    0xf0253b14,%eax
f012d7ec:	3b 45 08             	cmp    0x8(%ebp),%eax
f012d7ef:	75 12                	jne    f012d803 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012d7f1:	83 ec 0c             	sub    $0xc,%esp
f012d7f4:	68 4c a6 13 f0       	push   $0xf013a64c
f012d7f9:	e8 33 36 fd ff       	call   f0100e31 <cprintf>
f012d7fe:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012d801:	eb 14                	jmp    f012d817 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012d803:	83 ec 04             	sub    $0x4,%esp
f012d806:	68 78 a6 13 f0       	push   $0xf013a678
f012d80b:	6a 46                	push   $0x46
f012d80d:	68 33 a6 13 f0       	push   $0xf013a633
f012d812:	e8 99 29 fd ff       	call   f01001b0 <_panic>
}
f012d817:	c9                   	leave  
f012d818:	c3                   	ret    

f012d819 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012d819:	55                   	push   %ebp
f012d81a:	89 e5                	mov    %esp,%ebp
f012d81c:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012d81f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d823:	77 07                	ja     f012d82c <nearest_pow2_ceil+0x13>
f012d825:	b8 01 00 00 00       	mov    $0x1,%eax
f012d82a:	eb 20                	jmp    f012d84c <nearest_pow2_ceil+0x33>
    int power = 2;
f012d82c:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012d833:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012d836:	eb 08                	jmp    f012d840 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012d838:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012d83b:	01 c0                	add    %eax,%eax
f012d83d:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012d840:	d1 6d 08             	shrl   0x8(%ebp)
f012d843:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012d847:	75 ef                	jne    f012d838 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012d849:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012d84c:	c9                   	leave  
f012d84d:	c3                   	ret    

f012d84e <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012d84e:	55                   	push   %ebp
f012d84f:	89 e5                	mov    %esp,%ebp
f012d851:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012d854:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d858:	77 07                	ja     f012d861 <log2_ceil+0x13>
f012d85a:	b8 01 00 00 00       	mov    $0x1,%eax
f012d85f:	eb 1b                	jmp    f012d87c <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012d861:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012d868:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012d86b:	eb 03                	jmp    f012d870 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012d86d:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012d870:	d1 6d 08             	shrl   0x8(%ebp)
f012d873:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012d877:	75 f4                	jne    f012d86d <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012d879:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012d87c:	c9                   	leave  
f012d87d:	c3                   	ret    

f012d87e <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012d87e:	55                   	push   %ebp
f012d87f:	89 e5                	mov    %esp,%ebp
f012d881:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012d884:	8b 45 08             	mov    0x8(%ebp),%eax
f012d887:	8b 00                	mov    (%eax),%eax
f012d889:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012d88c:	8b 45 08             	mov    0x8(%ebp),%eax
f012d88f:	8b 00                	mov    (%eax),%eax
f012d891:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012d894:	eb 52                	jmp    f012d8e8 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012d896:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d899:	8b 00                	mov    (%eax),%eax
f012d89b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012d89e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d8a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d8a4:	75 12                	jne    f012d8b8 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012d8a6:	83 ec 0c             	sub    $0xc,%esp
f012d8a9:	68 94 a6 13 f0       	push   $0xf013a694
f012d8ae:	e8 7e 35 fd ff       	call   f0100e31 <cprintf>
f012d8b3:	83 c4 10             	add    $0x10,%esp
			break;
f012d8b6:	eb 3f                	jmp    f012d8f7 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012d8b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012d8bc:	74 38                	je     f012d8f6 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012d8be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d8c1:	8b 00                	mov    (%eax),%eax
f012d8c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012d8c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d8c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d8cc:	75 12                	jne    f012d8e0 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012d8ce:	83 ec 0c             	sub    $0xc,%esp
f012d8d1:	68 b0 a6 13 f0       	push   $0xf013a6b0
f012d8d6:	e8 56 35 fd ff       	call   f0100e31 <cprintf>
f012d8db:	83 c4 10             	add    $0x10,%esp
			break;
f012d8de:	eb 17                	jmp    f012d8f7 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012d8e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012d8e3:	8b 00                	mov    (%eax),%eax
f012d8e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012d8e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012d8ec:	74 09                	je     f012d8f7 <detect_loop_in_FrameInfo_list+0x79>
f012d8ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012d8f2:	75 a2                	jne    f012d896 <detect_loop_in_FrameInfo_list+0x18>
f012d8f4:	eb 01                	jmp    f012d8f7 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012d8f6:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012d8f7:	83 ec 0c             	sub    $0xc,%esp
f012d8fa:	68 c7 a6 13 f0       	push   $0xf013a6c7
f012d8ff:	e8 2d 35 fd ff       	call   f0100e31 <cprintf>
f012d904:	83 c4 10             	add    $0x10,%esp
}
f012d907:	90                   	nop
f012d908:	c9                   	leave  
f012d909:	c3                   	ret    

f012d90a <scarce_memory>:

void scarce_memory()
{
f012d90a:	55                   	push   %ebp
f012d90b:	89 e5                	mov    %esp,%ebp
f012d90d:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012d910:	a1 80 9a 2b f0       	mov    0xf02b9a80,%eax
f012d915:	ba 64 00 00 00       	mov    $0x64,%edx
f012d91a:	29 c2                	sub    %eax,%edx
f012d91c:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012d921:	0f af c2             	imul   %edx,%eax
f012d924:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012d929:	f7 e2                	mul    %edx
f012d92b:	89 d0                	mov    %edx,%eax
f012d92d:	c1 e8 05             	shr    $0x5,%eax
f012d930:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012d933:	a1 80 9a 2b f0       	mov    0xf02b9a80,%eax
f012d938:	ba 64 00 00 00       	mov    $0x64,%edx
f012d93d:	29 c2                	sub    %eax,%edx
f012d93f:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012d944:	89 d1                	mov    %edx,%ecx
f012d946:	0f af c8             	imul   %eax,%ecx
f012d949:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012d94e:	f7 e1                	mul    %ecx
f012d950:	c1 ea 05             	shr    $0x5,%edx
f012d953:	89 d0                	mov    %edx,%eax
f012d955:	c1 e0 02             	shl    $0x2,%eax
f012d958:	01 d0                	add    %edx,%eax
f012d95a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d961:	01 d0                	add    %edx,%eax
f012d963:	c1 e0 02             	shl    $0x2,%eax
f012d966:	29 c1                	sub    %eax,%ecx
f012d968:	89 ca                	mov    %ecx,%edx
f012d96a:	85 d2                	test   %edx,%edx
f012d96c:	74 03                	je     f012d971 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012d96e:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012d971:	8b 15 90 be 2b f0    	mov    0xf02bbe90,%edx
f012d977:	a1 a4 be 2b f0       	mov    0xf02bbea4,%eax
f012d97c:	29 c2                	sub    %eax,%edx
f012d97e:	89 d0                	mov    %edx,%eax
f012d980:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012d983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012d986:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012d989:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012d98c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012d993:	eb 12                	jmp    f012d9a7 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012d995:	83 ec 0c             	sub    $0xc,%esp
f012d998:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012d99b:	50                   	push   %eax
f012d99c:	e8 b8 95 fd ff       	call   f0106f59 <allocate_frame>
f012d9a1:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012d9a4:	ff 45 f0             	incl   -0x10(%ebp)
f012d9a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d9aa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d9ad:	76 e6                	jbe    f012d995 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012d9af:	90                   	nop
f012d9b0:	c9                   	leave  
f012d9b1:	c3                   	ret    

f012d9b2 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012d9b2:	55                   	push   %ebp
f012d9b3:	89 e5                	mov    %esp,%ebp
f012d9b5:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012d9b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012d9bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012d9c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012d9cd:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012d9d1:	0f 85 d3 01 00 00    	jne    f012dbaa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012d9d7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d9de:	e9 e1 00 00 00       	jmp    f012dac4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012d9e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012d9ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d9ed:	c1 e0 04             	shl    $0x4,%eax
f012d9f0:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012d9f5:	8b 00                	mov    (%eax),%eax
f012d9f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012d9fa:	e9 82 00 00 00       	jmp    f012da81 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012d9ff:	83 ec 0c             	sub    $0xc,%esp
f012da02:	ff 75 e4             	pushl  -0x1c(%ebp)
f012da05:	e8 7f a4 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012da0a:	83 c4 10             	add    $0x10,%esp
f012da0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012da10:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012da15:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012da1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012da1e:	0f af c2             	imul   %edx,%eax
f012da21:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012da26:	f7 e2                	mul    %edx
f012da28:	89 d0                	mov    %edx,%eax
f012da2a:	c1 e8 05             	shr    $0x5,%eax
f012da2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012da30:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012da35:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012da3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012da3e:	89 d1                	mov    %edx,%ecx
f012da40:	0f af c8             	imul   %eax,%ecx
f012da43:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012da48:	f7 e1                	mul    %ecx
f012da4a:	c1 ea 05             	shr    $0x5,%edx
f012da4d:	89 d0                	mov    %edx,%eax
f012da4f:	c1 e0 02             	shl    $0x2,%eax
f012da52:	01 d0                	add    %edx,%eax
f012da54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012da5b:	01 d0                	add    %edx,%eax
f012da5d:	c1 e0 02             	shl    $0x2,%eax
f012da60:	29 c1                	sub    %eax,%ecx
f012da62:	89 ca                	mov    %ecx,%edx
f012da64:	85 d2                	test   %edx,%edx
f012da66:	74 03                	je     f012da6b <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012da68:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012da6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012da6e:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012da71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012da74:	c1 e0 04             	shl    $0x4,%eax
f012da77:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f012da7c:	8b 00                	mov    (%eax),%eax
f012da7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012da81:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012da85:	74 08                	je     f012da8f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012da87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012da8a:	8b 40 44             	mov    0x44(%eax),%eax
f012da8d:	eb 05                	jmp    f012da94 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012da8f:	b8 00 00 00 00       	mov    $0x0,%eax
f012da94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012da97:	c1 e2 04             	shl    $0x4,%edx
f012da9a:	81 c2 28 3b 25 f0    	add    $0xf0253b28,%edx
f012daa0:	89 02                	mov    %eax,(%edx)
f012daa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012daa5:	c1 e0 04             	shl    $0x4,%eax
f012daa8:	05 28 3b 25 f0       	add    $0xf0253b28,%eax
f012daad:	8b 00                	mov    (%eax),%eax
f012daaf:	85 c0                	test   %eax,%eax
f012dab1:	0f 85 48 ff ff ff    	jne    f012d9ff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012dab7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dabb:	0f 85 3e ff ff ff    	jne    f012d9ff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dac1:	ff 45 e8             	incl   -0x18(%ebp)
f012dac4:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012dac9:	0f b6 c0             	movzbl %al,%eax
f012dacc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dacf:	0f 8f 0e ff ff ff    	jg     f012d9e3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012dad5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012dadc:	a1 84 9a 2b f0       	mov    0xf02b9a84,%eax
f012dae1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012dae4:	eb 19                	jmp    f012daff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012dae6:	83 ec 0c             	sub    $0xc,%esp
f012dae9:	ff 75 dc             	pushl  -0x24(%ebp)
f012daec:	e8 98 a3 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012daf1:	83 c4 10             	add    $0x10,%esp
f012daf4:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012daf7:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f012dafc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012daff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012db03:	74 08                	je     f012db0d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012db05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012db08:	8b 40 44             	mov    0x44(%eax),%eax
f012db0b:	eb 05                	jmp    f012db12 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012db0d:	b8 00 00 00 00       	mov    $0x0,%eax
f012db12:	a3 8c 9a 2b f0       	mov    %eax,0xf02b9a8c
f012db17:	a1 8c 9a 2b f0       	mov    0xf02b9a8c,%eax
f012db1c:	85 c0                	test   %eax,%eax
f012db1e:	75 c6                	jne    f012dae6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012db20:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012db24:	75 c0                	jne    f012dae6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012db26:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db2b:	85 c0                	test   %eax,%eax
f012db2d:	0f 84 ec 00 00 00    	je     f012dc1f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012db33:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db38:	83 ec 0c             	sub    $0xc,%esp
f012db3b:	50                   	push   %eax
f012db3c:	e8 48 a3 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012db41:	83 c4 10             	add    $0x10,%esp
f012db44:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012db47:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db4c:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db52:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012db55:	0f af c2             	imul   %edx,%eax
f012db58:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012db5d:	f7 e2                	mul    %edx
f012db5f:	89 d0                	mov    %edx,%eax
f012db61:	c1 e8 05             	shr    $0x5,%eax
f012db64:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012db67:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012db6c:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012db72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012db75:	89 d1                	mov    %edx,%ecx
f012db77:	0f af c8             	imul   %eax,%ecx
f012db7a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012db7f:	f7 e1                	mul    %ecx
f012db81:	c1 ea 05             	shr    $0x5,%edx
f012db84:	89 d0                	mov    %edx,%eax
f012db86:	c1 e0 02             	shl    $0x2,%eax
f012db89:	01 d0                	add    %edx,%eax
f012db8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012db92:	01 d0                	add    %edx,%eax
f012db94:	c1 e0 02             	shl    $0x2,%eax
f012db97:	29 c1                	sub    %eax,%ecx
f012db99:	89 ca                	mov    %ecx,%edx
f012db9b:	85 d2                	test   %edx,%edx
f012db9d:	74 03                	je     f012dba2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012db9f:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012dba2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012dba8:	eb 75                	jmp    f012dc1f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012dbaa:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dbaf:	83 ec 0c             	sub    $0xc,%esp
f012dbb2:	50                   	push   %eax
f012dbb3:	e8 d1 a2 fd ff       	call   f0107e89 <env_page_ws_get_size>
f012dbb8:	83 c4 10             	add    $0x10,%esp
f012dbbb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dbbe:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dbc3:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dbc9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012dbcc:	0f af c2             	imul   %edx,%eax
f012dbcf:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dbd4:	f7 e2                	mul    %edx
f012dbd6:	89 d0                	mov    %edx,%eax
f012dbd8:	c1 e8 05             	shr    $0x5,%eax
f012dbdb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dbde:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dbe3:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dbe9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012dbec:	89 d1                	mov    %edx,%ecx
f012dbee:	0f af c8             	imul   %eax,%ecx
f012dbf1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dbf6:	f7 e1                	mul    %ecx
f012dbf8:	c1 ea 05             	shr    $0x5,%edx
f012dbfb:	89 d0                	mov    %edx,%eax
f012dbfd:	c1 e0 02             	shl    $0x2,%eax
f012dc00:	01 d0                	add    %edx,%eax
f012dc02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc09:	01 d0                	add    %edx,%eax
f012dc0b:	c1 e0 02             	shl    $0x2,%eax
f012dc0e:	29 c1                	sub    %eax,%ecx
f012dc10:	89 ca                	mov    %ecx,%edx
f012dc12:	85 d2                	test   %edx,%edx
f012dc14:	74 03                	je     f012dc19 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012dc16:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012dc19:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012dc1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012dc1f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012dc22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc25:	01 c2                	add    %eax,%edx
f012dc27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc2a:	01 d0                	add    %edx,%eax
}
f012dc2c:	c9                   	leave  
f012dc2d:	c3                   	ret    

f012dc2e <schenv>:


void schenv()
{
f012dc2e:	55                   	push   %ebp
f012dc2f:	89 e5                	mov    %esp,%ebp
f012dc31:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012dc34:	c6 05 1c bf 2b f0 00 	movb   $0x0,0xf02bbf1c
	__ne = NULL;
f012dc3b:	c7 05 b4 be 2b f0 00 	movl   $0x0,0xf02bbeb4
f012dc42:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dc45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dc4c:	eb 3a                	jmp    f012dc88 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012dc4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc51:	c1 e0 04             	shl    $0x4,%eax
f012dc54:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012dc59:	83 ec 0c             	sub    $0xc,%esp
f012dc5c:	50                   	push   %eax
f012dc5d:	e8 7f 6d fd ff       	call   f01049e1 <queue_size>
f012dc62:	83 c4 10             	add    $0x10,%esp
f012dc65:	85 c0                	test   %eax,%eax
f012dc67:	74 1c                	je     f012dc85 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012dc69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc6c:	c1 e0 04             	shl    $0x4,%eax
f012dc6f:	05 24 3b 25 f0       	add    $0xf0253b24,%eax
f012dc74:	8b 00                	mov    (%eax),%eax
f012dc76:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
			__nl = i;
f012dc7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc7e:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
			break;
f012dc83:	eb 10                	jmp    f012dc95 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dc85:	ff 45 f4             	incl   -0xc(%ebp)
f012dc88:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012dc8d:	0f b6 c0             	movzbl %al,%eax
f012dc90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc93:	7f b9                	jg     f012dc4e <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012dc95:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dc9a:	85 c0                	test   %eax,%eax
f012dc9c:	0f 84 86 00 00 00    	je     f012dd28 <schenv+0xfa>
	{
		if (__ne != NULL)
f012dca2:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012dca7:	85 c0                	test   %eax,%eax
f012dca9:	74 4b                	je     f012dcf6 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012dcab:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dcb0:	0f b6 c0             	movzbl %al,%eax
f012dcb3:	8d 50 01             	lea    0x1(%eax),%edx
f012dcb6:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012dcbb:	0f b6 c0             	movzbl %al,%eax
f012dcbe:	39 c2                	cmp    %eax,%edx
f012dcc0:	7d 66                	jge    f012dd28 <schenv+0xfa>
			{
				__ne = curenv;
f012dcc2:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dcc7:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012dccc:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dcd1:	0f b6 c0             	movzbl %al,%eax
f012dcd4:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012dcda:	0f b6 d2             	movzbl %dl,%edx
f012dcdd:	4a                   	dec    %edx
f012dcde:	39 d0                	cmp    %edx,%eax
f012dce0:	7d 08                	jge    f012dcea <schenv+0xbc>
f012dce2:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dce7:	40                   	inc    %eax
f012dce8:	eb 05                	jmp    f012dcef <schenv+0xc1>
f012dcea:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dcef:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012dcf4:	eb 32                	jmp    f012dd28 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012dcf6:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dcfb:	a3 b4 be 2b f0       	mov    %eax,0xf02bbeb4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012dd00:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dd05:	0f b6 c0             	movzbl %al,%eax
f012dd08:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012dd0e:	0f b6 d2             	movzbl %dl,%edx
f012dd11:	4a                   	dec    %edx
f012dd12:	39 d0                	cmp    %edx,%eax
f012dd14:	7d 08                	jge    f012dd1e <schenv+0xf0>
f012dd16:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dd1b:	40                   	inc    %eax
f012dd1c:	eb 05                	jmp    f012dd23 <schenv+0xf5>
f012dd1e:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012dd23:	a2 1c bf 2b f0       	mov    %al,0xf02bbf1c
		}
	}
}
f012dd28:	90                   	nop
f012dd29:	c9                   	leave  
f012dd2a:	c3                   	ret    

f012dd2b <chksch>:

void chksch(uint8 onoff)
{
f012dd2b:	55                   	push   %ebp
f012dd2c:	89 e5                	mov    %esp,%ebp
f012dd2e:	83 ec 04             	sub    $0x4,%esp
f012dd31:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd34:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012dd37:	c7 05 18 bf 2b f0 00 	movl   $0x0,0xf02bbf18
f012dd3e:	00 00 00 
	__ne = NULL;
f012dd41:	c7 05 b4 be 2b f0 00 	movl   $0x0,0xf02bbeb4
f012dd48:	00 00 00 
	__pl = 0 ;
f012dd4b:	c6 05 18 3b 25 f0 00 	movb   $0x0,0xf0253b18
	__nl = 0 ;
f012dd52:	c6 05 1c bf 2b f0 00 	movb   $0x0,0xf02bbf1c
	__chkstatus = onoff;
f012dd59:	8a 45 fc             	mov    -0x4(%ebp),%al
f012dd5c:	a2 b0 be 2b f0       	mov    %al,0xf02bbeb0
}
f012dd61:	90                   	nop
f012dd62:	c9                   	leave  
f012dd63:	c3                   	ret    

f012dd64 <chk1>:
void chk1()
{
f012dd64:	55                   	push   %ebp
f012dd65:	89 e5                	mov    %esp,%ebp
f012dd67:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012dd6a:	a0 b0 be 2b f0       	mov    0xf02bbeb0,%al
f012dd6f:	84 c0                	test   %al,%al
f012dd71:	74 2b                	je     f012dd9e <chk1+0x3a>
		return ;
	__pe = curenv;
f012dd73:	a1 34 32 25 f0       	mov    0xf0253234,%eax
f012dd78:	a3 18 bf 2b f0       	mov    %eax,0xf02bbf18
	__pl = __nl ;
f012dd7d:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012dd82:	a2 18 3b 25 f0       	mov    %al,0xf0253b18
	if (__pe == NULL)
f012dd87:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012dd8c:	85 c0                	test   %eax,%eax
f012dd8e:	75 07                	jne    f012dd97 <chk1+0x33>
	{
		__pl = 0;
f012dd90:	c6 05 18 3b 25 f0 00 	movb   $0x0,0xf0253b18
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012dd97:	e8 92 fe ff ff       	call   f012dc2e <schenv>
f012dd9c:	eb 01                	jmp    f012dd9f <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012dd9e:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012dd9f:	c9                   	leave  
f012dda0:	c3                   	ret    

f012dda1 <chk2>:
void chk2(struct Env* __se)
{
f012dda1:	55                   	push   %ebp
f012dda2:	89 e5                	mov    %esp,%ebp
f012dda4:	53                   	push   %ebx
f012dda5:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012dda8:	a0 b0 be 2b f0       	mov    0xf02bbeb0,%al
f012ddad:	84 c0                	test   %al,%al
f012ddaf:	0f 84 35 02 00 00    	je     f012dfea <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012ddb5:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012ddba:	39 45 08             	cmp    %eax,0x8(%ebp)
f012ddbd:	74 19                	je     f012ddd8 <chk2+0x37>
f012ddbf:	68 e1 a6 13 f0       	push   $0xf013a6e1
f012ddc4:	68 ee a6 13 f0       	push   $0xf013a6ee
f012ddc9:	68 f8 00 00 00       	push   $0xf8
f012ddce:	68 33 a6 13 f0       	push   $0xf013a633
f012ddd3:	e8 8e 24 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012ddd8:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012dddd:	85 c0                	test   %eax,%eax
f012dddf:	0f 84 1b 01 00 00    	je     f012df00 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012dde5:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012ddea:	0f b6 c0             	movzbl %al,%eax
f012dded:	8a 80 a8 be 2b f0    	mov    -0xfd44158(%eax),%al
f012ddf3:	0f b6 d8             	movzbl %al,%ebx
f012ddf6:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012ddfb:	99                   	cltd   
f012ddfc:	f7 fb                	idiv   %ebx
f012ddfe:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012de04:	a0 1c bf 2b f0       	mov    0xf02bbf1c,%al
f012de09:	0f b6 c0             	movzbl %al,%eax
f012de0c:	8a 80 a8 be 2b f0    	mov    -0xfd44158(%eax),%al
f012de12:	0f b6 d8             	movzbl %al,%ebx
f012de15:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012de1a:	99                   	cltd   
f012de1b:	f7 fb                	idiv   %ebx
f012de1d:	89 c3                	mov    %eax,%ebx
f012de1f:	89 c8                	mov    %ecx,%eax
f012de21:	99                   	cltd   
f012de22:	f7 fb                	idiv   %ebx
f012de24:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012de28:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012de2c:	83 e0 01             	and    $0x1,%eax
f012de2f:	66 85 c0             	test   %ax,%ax
f012de32:	74 07                	je     f012de3b <chk2+0x9a>
f012de34:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012de38:	40                   	inc    %eax
f012de39:	eb 04                	jmp    f012de3f <chk2+0x9e>
f012de3b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012de3f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012de43:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012de47:	89 d0                	mov    %edx,%eax
f012de49:	c1 e0 02             	shl    $0x2,%eax
f012de4c:	01 d0                	add    %edx,%eax
f012de4e:	01 c0                	add    %eax,%eax
f012de50:	01 d0                	add    %edx,%eax
f012de52:	c1 e0 02             	shl    $0x2,%eax
f012de55:	01 d0                	add    %edx,%eax
f012de57:	01 c0                	add    %eax,%eax
f012de59:	89 c1                	mov    %eax,%ecx
f012de5b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012de60:	f7 e9                	imul   %ecx
f012de62:	c1 fa 05             	sar    $0x5,%edx
f012de65:	89 c8                	mov    %ecx,%eax
f012de67:	c1 f8 1f             	sar    $0x1f,%eax
f012de6a:	29 c2                	sub    %eax,%edx
f012de6c:	89 d0                	mov    %edx,%eax
f012de6e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012de72:	e8 70 6a fd ff       	call   f01048e7 <kclock_read_cnt0>
f012de77:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012de7b:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012de7f:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012de83:	76 0a                	jbe    f012de8f <chk2+0xee>
f012de85:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012de89:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012de8d:	76 19                	jbe    f012dea8 <chk2+0x107>
f012de8f:	68 04 a7 13 f0       	push   $0xf013a704
f012de94:	68 ee a6 13 f0       	push   $0xf013a6ee
f012de99:	68 02 01 00 00       	push   $0x102
f012de9e:	68 33 a6 13 f0       	push   $0xf013a633
f012dea3:	e8 be 23 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012dea8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012deaf:	eb 42                	jmp    f012def3 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012deb1:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012deb6:	8b 40 4c             	mov    0x4c(%eax),%eax
f012deb9:	89 c2                	mov    %eax,%edx
f012debb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012debe:	c1 e0 04             	shl    $0x4,%eax
f012dec1:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012dec6:	83 ec 08             	sub    $0x8,%esp
f012dec9:	52                   	push   %edx
f012deca:	50                   	push   %eax
f012decb:	e8 2b 6d fd ff       	call   f0104bfb <find_env_in_queue>
f012ded0:	83 c4 10             	add    $0x10,%esp
f012ded3:	85 c0                	test   %eax,%eax
f012ded5:	74 19                	je     f012def0 <chk2+0x14f>
f012ded7:	68 28 a7 13 f0       	push   $0xf013a728
f012dedc:	68 ee a6 13 f0       	push   $0xf013a6ee
f012dee1:	68 06 01 00 00       	push   $0x106
f012dee6:	68 33 a6 13 f0       	push   $0xf013a633
f012deeb:	e8 76 23 fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012def0:	ff 45 f4             	incl   -0xc(%ebp)
f012def3:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012def8:	0f b6 c0             	movzbl %al,%eax
f012defb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012defe:	7f b1                	jg     f012deb1 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012df00:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012df05:	85 c0                	test   %eax,%eax
f012df07:	0f 84 de 00 00 00    	je     f012dfeb <chk2+0x24a>
f012df0d:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f012df13:	a1 b4 be 2b f0       	mov    0xf02bbeb4,%eax
f012df18:	39 c2                	cmp    %eax,%edx
f012df1a:	0f 84 cb 00 00 00    	je     f012dfeb <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012df20:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012df25:	0f b6 c0             	movzbl %al,%eax
f012df28:	8a 15 f4 be 2b f0    	mov    0xf02bbef4,%dl
f012df2e:	0f b6 d2             	movzbl %dl,%edx
f012df31:	4a                   	dec    %edx
f012df32:	39 d0                	cmp    %edx,%eax
f012df34:	74 08                	je     f012df3e <chk2+0x19d>
f012df36:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012df3b:	40                   	inc    %eax
f012df3c:	eb 05                	jmp    f012df43 <chk2+0x1a2>
f012df3e:	a0 18 3b 25 f0       	mov    0xf0253b18,%al
f012df43:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012df46:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012df4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f012df4e:	89 c2                	mov    %eax,%edx
f012df50:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012df54:	c1 e0 04             	shl    $0x4,%eax
f012df57:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012df5c:	83 ec 08             	sub    $0x8,%esp
f012df5f:	52                   	push   %edx
f012df60:	50                   	push   %eax
f012df61:	e8 95 6c fd ff       	call   f0104bfb <find_env_in_queue>
f012df66:	83 c4 10             	add    $0x10,%esp
f012df69:	85 c0                	test   %eax,%eax
f012df6b:	75 19                	jne    f012df86 <chk2+0x1e5>
f012df6d:	68 68 a7 13 f0       	push   $0xf013a768
f012df72:	68 ee a6 13 f0       	push   $0xf013a6ee
f012df77:	68 0c 01 00 00       	push   $0x10c
f012df7c:	68 33 a6 13 f0       	push   $0xf013a633
f012df81:	e8 e0 22 fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012df86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012df8d:	eb 4c                	jmp    f012dfdb <chk2+0x23a>
		{
			if (i == __tl) continue;
f012df8f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012df93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012df96:	74 3f                	je     f012dfd7 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012df98:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f012df9d:	8b 40 4c             	mov    0x4c(%eax),%eax
f012dfa0:	89 c2                	mov    %eax,%edx
f012dfa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dfa5:	c1 e0 04             	shl    $0x4,%eax
f012dfa8:	05 20 3b 25 f0       	add    $0xf0253b20,%eax
f012dfad:	83 ec 08             	sub    $0x8,%esp
f012dfb0:	52                   	push   %edx
f012dfb1:	50                   	push   %eax
f012dfb2:	e8 44 6c fd ff       	call   f0104bfb <find_env_in_queue>
f012dfb7:	83 c4 10             	add    $0x10,%esp
f012dfba:	85 c0                	test   %eax,%eax
f012dfbc:	74 1a                	je     f012dfd8 <chk2+0x237>
f012dfbe:	68 ac a7 13 f0       	push   $0xf013a7ac
f012dfc3:	68 ee a6 13 f0       	push   $0xf013a6ee
f012dfc8:	68 10 01 00 00       	push   $0x110
f012dfcd:	68 33 a6 13 f0       	push   $0xf013a633
f012dfd2:	e8 8f 22 fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012dfd7:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012dfd8:	ff 45 f0             	incl   -0x10(%ebp)
f012dfdb:	a0 f4 be 2b f0       	mov    0xf02bbef4,%al
f012dfe0:	0f b6 c0             	movzbl %al,%eax
f012dfe3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012dfe6:	7f a7                	jg     f012df8f <chk2+0x1ee>
f012dfe8:	eb 01                	jmp    f012dfeb <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012dfea:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012dfeb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012dfee:	c9                   	leave  
f012dfef:	c3                   	ret    

f012dff0 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012dff0:	55                   	push   %ebp
f012dff1:	89 e5                	mov    %esp,%ebp
f012dff3:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012dff6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dffd:	eb 40                	jmp    f012e03f <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012dfff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e002:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e008:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e00d:	83 ec 08             	sub    $0x8,%esp
f012e010:	52                   	push   %edx
f012e011:	50                   	push   %eax
f012e012:	e8 92 01 00 00       	call   f012e1a9 <check_va2pa>
f012e017:	83 c4 10             	add    $0x10,%esp
f012e01a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e01d:	74 19                	je     f012e038 <check_boot_pgdir+0x48>
f012e01f:	68 ec a7 13 f0       	push   $0xf013a7ec
f012e024:	68 ee a6 13 f0       	push   $0xf013a6ee
f012e029:	68 37 01 00 00       	push   $0x137
f012e02e:	68 33 a6 13 f0       	push   $0xf013a633
f012e033:	e8 78 21 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e038:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e03f:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e046:	75 b7                	jne    f012dfff <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e048:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e04f:	eb 74                	jmp    f012e0c5 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e054:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e05a:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e05f:	83 ec 08             	sub    $0x8,%esp
f012e062:	52                   	push   %edx
f012e063:	50                   	push   %eax
f012e064:	e8 40 01 00 00       	call   f012e1a9 <check_va2pa>
f012e069:	83 c4 10             	add    $0x10,%esp
f012e06c:	c7 45 f0 00 40 18 f0 	movl   $0xf0184000,-0x10(%ebp)
f012e073:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e07a:	77 17                	ja     f012e093 <check_boot_pgdir+0xa3>
f012e07c:	ff 75 f0             	pushl  -0x10(%ebp)
f012e07f:	68 24 a8 13 f0       	push   $0xf013a824
f012e084:	68 3c 01 00 00       	push   $0x13c
f012e089:	68 33 a6 13 f0       	push   $0xf013a633
f012e08e:	e8 1d 21 fd ff       	call   f01001b0 <_panic>
f012e093:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e096:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e09c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e09f:	01 ca                	add    %ecx,%edx
f012e0a1:	39 d0                	cmp    %edx,%eax
f012e0a3:	74 19                	je     f012e0be <check_boot_pgdir+0xce>
f012e0a5:	68 58 a8 13 f0       	push   $0xf013a858
f012e0aa:	68 ee a6 13 f0       	push   $0xf013a6ee
f012e0af:	68 3c 01 00 00       	push   $0x13c
f012e0b4:	68 33 a6 13 f0       	push   $0xf013a633
f012e0b9:	e8 f2 20 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e0be:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e0c5:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e0cc:	76 83                	jbe    f012e051 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e0ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e0d5:	e9 af 00 00 00       	jmp    f012e189 <check_boot_pgdir+0x199>
		switch (i) {
f012e0da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e0dd:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e0e2:	74 11                	je     f012e0f5 <check_boot_pgdir+0x105>
f012e0e4:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e0e9:	72 36                	jb     f012e121 <check_boot_pgdir+0x131>
f012e0eb:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e0f0:	83 f8 02             	cmp    $0x2,%eax
f012e0f3:	77 2c                	ja     f012e121 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e0f5:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e0fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e0fd:	c1 e2 02             	shl    $0x2,%edx
f012e100:	01 d0                	add    %edx,%eax
f012e102:	8b 00                	mov    (%eax),%eax
f012e104:	85 c0                	test   %eax,%eax
f012e106:	75 7a                	jne    f012e182 <check_boot_pgdir+0x192>
f012e108:	68 da a8 13 f0       	push   $0xf013a8da
f012e10d:	68 ee a6 13 f0       	push   $0xf013a6ee
f012e112:	68 47 01 00 00       	push   $0x147
f012e117:	68 33 a6 13 f0       	push   $0xf013a633
f012e11c:	e8 8f 20 fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e121:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e128:	76 2c                	jbe    f012e156 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e12a:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e12f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e132:	c1 e2 02             	shl    $0x2,%edx
f012e135:	01 d0                	add    %edx,%eax
f012e137:	8b 00                	mov    (%eax),%eax
f012e139:	85 c0                	test   %eax,%eax
f012e13b:	75 48                	jne    f012e185 <check_boot_pgdir+0x195>
f012e13d:	68 da a8 13 f0       	push   $0xf013a8da
f012e142:	68 ee a6 13 f0       	push   $0xf013a6ee
f012e147:	68 4b 01 00 00       	push   $0x14b
f012e14c:	68 33 a6 13 f0       	push   $0xf013a633
f012e151:	e8 5a 20 fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e156:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f012e15b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e15e:	c1 e2 02             	shl    $0x2,%edx
f012e161:	01 d0                	add    %edx,%eax
f012e163:	8b 00                	mov    (%eax),%eax
f012e165:	85 c0                	test   %eax,%eax
f012e167:	74 1c                	je     f012e185 <check_boot_pgdir+0x195>
f012e169:	68 f0 a8 13 f0       	push   $0xf013a8f0
f012e16e:	68 ee a6 13 f0       	push   $0xf013a6ee
f012e173:	68 4d 01 00 00       	push   $0x14d
f012e178:	68 33 a6 13 f0       	push   $0xf013a633
f012e17d:	e8 2e 20 fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e182:	90                   	nop
f012e183:	eb 01                	jmp    f012e186 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e185:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e186:	ff 45 f4             	incl   -0xc(%ebp)
f012e189:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e190:	0f 86 44 ff ff ff    	jbe    f012e0da <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e196:	83 ec 0c             	sub    $0xc,%esp
f012e199:	68 0c a9 13 f0       	push   $0xf013a90c
f012e19e:	e8 8e 2c fd ff       	call   f0100e31 <cprintf>
f012e1a3:	83 c4 10             	add    $0x10,%esp
}
f012e1a6:	90                   	nop
f012e1a7:	c9                   	leave  
f012e1a8:	c3                   	ret    

f012e1a9 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e1a9:	55                   	push   %ebp
f012e1aa:	89 e5                	mov    %esp,%ebp
f012e1ac:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e1af:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e1b2:	c1 e8 16             	shr    $0x16,%eax
f012e1b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e1bc:	8b 45 08             	mov    0x8(%ebp),%eax
f012e1bf:	01 d0                	add    %edx,%eax
f012e1c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e1c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1c7:	8b 00                	mov    (%eax),%eax
f012e1c9:	83 e0 01             	and    $0x1,%eax
f012e1cc:	85 c0                	test   %eax,%eax
f012e1ce:	75 0a                	jne    f012e1da <check_va2pa+0x31>
		return ~0;
f012e1d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e1d5:	e9 87 00 00 00       	jmp    f012e261 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e1da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1dd:	8b 00                	mov    (%eax),%eax
f012e1df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e1e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e1e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e1ea:	c1 e8 0c             	shr    $0xc,%eax
f012e1ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e1f0:	a1 90 be 2b f0       	mov    0xf02bbe90,%eax
f012e1f5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e1f8:	72 17                	jb     f012e211 <check_va2pa+0x68>
f012e1fa:	ff 75 f0             	pushl  -0x10(%ebp)
f012e1fd:	68 2c a9 13 f0       	push   $0xf013a92c
f012e202:	68 63 01 00 00       	push   $0x163
f012e207:	68 33 a6 13 f0       	push   $0xf013a633
f012e20c:	e8 9f 1f fd ff       	call   f01001b0 <_panic>
f012e211:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e214:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e219:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e21c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e21f:	c1 e8 0c             	shr    $0xc,%eax
f012e222:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e227:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e22e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e231:	01 d0                	add    %edx,%eax
f012e233:	8b 00                	mov    (%eax),%eax
f012e235:	83 e0 01             	and    $0x1,%eax
f012e238:	85 c0                	test   %eax,%eax
f012e23a:	75 07                	jne    f012e243 <check_va2pa+0x9a>
		return ~0;
f012e23c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e241:	eb 1e                	jmp    f012e261 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e243:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e246:	c1 e8 0c             	shr    $0xc,%eax
f012e249:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e24e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e258:	01 d0                	add    %edx,%eax
f012e25a:	8b 00                	mov    (%eax),%eax
f012e25c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e261:	c9                   	leave  
f012e262:	c3                   	ret    

f012e263 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e263:	55                   	push   %ebp
f012e264:	89 e5                	mov    %esp,%ebp
f012e266:	53                   	push   %ebx
f012e267:	83 ec 14             	sub    $0x14,%esp
f012e26a:	8b 45 10             	mov    0x10(%ebp),%eax
f012e26d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e270:	8b 45 14             	mov    0x14(%ebp),%eax
f012e273:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e276:	8b 45 18             	mov    0x18(%ebp),%eax
f012e279:	ba 00 00 00 00       	mov    $0x0,%edx
f012e27e:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e281:	77 55                	ja     f012e2d8 <printnum+0x75>
f012e283:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e286:	72 05                	jb     f012e28d <printnum+0x2a>
f012e288:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e28b:	77 4b                	ja     f012e2d8 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e28d:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e290:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e293:	8b 45 18             	mov    0x18(%ebp),%eax
f012e296:	ba 00 00 00 00       	mov    $0x0,%edx
f012e29b:	52                   	push   %edx
f012e29c:	50                   	push   %eax
f012e29d:	ff 75 f4             	pushl  -0xc(%ebp)
f012e2a0:	ff 75 f0             	pushl  -0x10(%ebp)
f012e2a3:	e8 e4 13 00 00       	call   f012f68c <__udivdi3>
f012e2a8:	83 c4 10             	add    $0x10,%esp
f012e2ab:	83 ec 04             	sub    $0x4,%esp
f012e2ae:	ff 75 20             	pushl  0x20(%ebp)
f012e2b1:	53                   	push   %ebx
f012e2b2:	ff 75 18             	pushl  0x18(%ebp)
f012e2b5:	52                   	push   %edx
f012e2b6:	50                   	push   %eax
f012e2b7:	ff 75 0c             	pushl  0xc(%ebp)
f012e2ba:	ff 75 08             	pushl  0x8(%ebp)
f012e2bd:	e8 a1 ff ff ff       	call   f012e263 <printnum>
f012e2c2:	83 c4 20             	add    $0x20,%esp
f012e2c5:	eb 1a                	jmp    f012e2e1 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e2c7:	83 ec 08             	sub    $0x8,%esp
f012e2ca:	ff 75 0c             	pushl  0xc(%ebp)
f012e2cd:	ff 75 20             	pushl  0x20(%ebp)
f012e2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2d3:	ff d0                	call   *%eax
f012e2d5:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e2d8:	ff 4d 1c             	decl   0x1c(%ebp)
f012e2db:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e2df:	7f e6                	jg     f012e2c7 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e2e1:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e2e4:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e2e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e2ef:	53                   	push   %ebx
f012e2f0:	51                   	push   %ecx
f012e2f1:	52                   	push   %edx
f012e2f2:	50                   	push   %eax
f012e2f3:	e8 a4 14 00 00       	call   f012f79c <__umoddi3>
f012e2f8:	83 c4 10             	add    $0x10,%esp
f012e2fb:	05 74 ab 13 f0       	add    $0xf013ab74,%eax
f012e300:	8a 00                	mov    (%eax),%al
f012e302:	0f be c0             	movsbl %al,%eax
f012e305:	83 ec 08             	sub    $0x8,%esp
f012e308:	ff 75 0c             	pushl  0xc(%ebp)
f012e30b:	50                   	push   %eax
f012e30c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e30f:	ff d0                	call   *%eax
f012e311:	83 c4 10             	add    $0x10,%esp
}
f012e314:	90                   	nop
f012e315:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e318:	c9                   	leave  
f012e319:	c3                   	ret    

f012e31a <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e31a:	55                   	push   %ebp
f012e31b:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e31d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e321:	7e 1c                	jle    f012e33f <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e323:	8b 45 08             	mov    0x8(%ebp),%eax
f012e326:	8b 00                	mov    (%eax),%eax
f012e328:	8d 50 08             	lea    0x8(%eax),%edx
f012e32b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e32e:	89 10                	mov    %edx,(%eax)
f012e330:	8b 45 08             	mov    0x8(%ebp),%eax
f012e333:	8b 00                	mov    (%eax),%eax
f012e335:	83 e8 08             	sub    $0x8,%eax
f012e338:	8b 50 04             	mov    0x4(%eax),%edx
f012e33b:	8b 00                	mov    (%eax),%eax
f012e33d:	eb 40                	jmp    f012e37f <getuint+0x65>
	else if (lflag)
f012e33f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e343:	74 1e                	je     f012e363 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e345:	8b 45 08             	mov    0x8(%ebp),%eax
f012e348:	8b 00                	mov    (%eax),%eax
f012e34a:	8d 50 04             	lea    0x4(%eax),%edx
f012e34d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e350:	89 10                	mov    %edx,(%eax)
f012e352:	8b 45 08             	mov    0x8(%ebp),%eax
f012e355:	8b 00                	mov    (%eax),%eax
f012e357:	83 e8 04             	sub    $0x4,%eax
f012e35a:	8b 00                	mov    (%eax),%eax
f012e35c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e361:	eb 1c                	jmp    f012e37f <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e363:	8b 45 08             	mov    0x8(%ebp),%eax
f012e366:	8b 00                	mov    (%eax),%eax
f012e368:	8d 50 04             	lea    0x4(%eax),%edx
f012e36b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e36e:	89 10                	mov    %edx,(%eax)
f012e370:	8b 45 08             	mov    0x8(%ebp),%eax
f012e373:	8b 00                	mov    (%eax),%eax
f012e375:	83 e8 04             	sub    $0x4,%eax
f012e378:	8b 00                	mov    (%eax),%eax
f012e37a:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e37f:	5d                   	pop    %ebp
f012e380:	c3                   	ret    

f012e381 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e381:	55                   	push   %ebp
f012e382:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e384:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e388:	7e 1c                	jle    f012e3a6 <getint+0x25>
		return va_arg(*ap, long long);
f012e38a:	8b 45 08             	mov    0x8(%ebp),%eax
f012e38d:	8b 00                	mov    (%eax),%eax
f012e38f:	8d 50 08             	lea    0x8(%eax),%edx
f012e392:	8b 45 08             	mov    0x8(%ebp),%eax
f012e395:	89 10                	mov    %edx,(%eax)
f012e397:	8b 45 08             	mov    0x8(%ebp),%eax
f012e39a:	8b 00                	mov    (%eax),%eax
f012e39c:	83 e8 08             	sub    $0x8,%eax
f012e39f:	8b 50 04             	mov    0x4(%eax),%edx
f012e3a2:	8b 00                	mov    (%eax),%eax
f012e3a4:	eb 38                	jmp    f012e3de <getint+0x5d>
	else if (lflag)
f012e3a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e3aa:	74 1a                	je     f012e3c6 <getint+0x45>
		return va_arg(*ap, long);
f012e3ac:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3af:	8b 00                	mov    (%eax),%eax
f012e3b1:	8d 50 04             	lea    0x4(%eax),%edx
f012e3b4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3b7:	89 10                	mov    %edx,(%eax)
f012e3b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3bc:	8b 00                	mov    (%eax),%eax
f012e3be:	83 e8 04             	sub    $0x4,%eax
f012e3c1:	8b 00                	mov    (%eax),%eax
f012e3c3:	99                   	cltd   
f012e3c4:	eb 18                	jmp    f012e3de <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e3c6:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3c9:	8b 00                	mov    (%eax),%eax
f012e3cb:	8d 50 04             	lea    0x4(%eax),%edx
f012e3ce:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3d1:	89 10                	mov    %edx,(%eax)
f012e3d3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3d6:	8b 00                	mov    (%eax),%eax
f012e3d8:	83 e8 04             	sub    $0x4,%eax
f012e3db:	8b 00                	mov    (%eax),%eax
f012e3dd:	99                   	cltd   
}
f012e3de:	5d                   	pop    %ebp
f012e3df:	c3                   	ret    

f012e3e0 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e3e0:	55                   	push   %ebp
f012e3e1:	89 e5                	mov    %esp,%ebp
f012e3e3:	56                   	push   %esi
f012e3e4:	53                   	push   %ebx
f012e3e5:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e3e8:	eb 17                	jmp    f012e401 <vprintfmt+0x21>
			if (ch == '\0')
f012e3ea:	85 db                	test   %ebx,%ebx
f012e3ec:	0f 84 af 03 00 00    	je     f012e7a1 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e3f2:	83 ec 08             	sub    $0x8,%esp
f012e3f5:	ff 75 0c             	pushl  0xc(%ebp)
f012e3f8:	53                   	push   %ebx
f012e3f9:	8b 45 08             	mov    0x8(%ebp),%eax
f012e3fc:	ff d0                	call   *%eax
f012e3fe:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e401:	8b 45 10             	mov    0x10(%ebp),%eax
f012e404:	8d 50 01             	lea    0x1(%eax),%edx
f012e407:	89 55 10             	mov    %edx,0x10(%ebp)
f012e40a:	8a 00                	mov    (%eax),%al
f012e40c:	0f b6 d8             	movzbl %al,%ebx
f012e40f:	83 fb 25             	cmp    $0x25,%ebx
f012e412:	75 d6                	jne    f012e3ea <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e414:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e418:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e41f:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e426:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e42d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e434:	8b 45 10             	mov    0x10(%ebp),%eax
f012e437:	8d 50 01             	lea    0x1(%eax),%edx
f012e43a:	89 55 10             	mov    %edx,0x10(%ebp)
f012e43d:	8a 00                	mov    (%eax),%al
f012e43f:	0f b6 d8             	movzbl %al,%ebx
f012e442:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e445:	83 f8 55             	cmp    $0x55,%eax
f012e448:	0f 87 2b 03 00 00    	ja     f012e779 <vprintfmt+0x399>
f012e44e:	8b 04 85 98 ab 13 f0 	mov    -0xfec5468(,%eax,4),%eax
f012e455:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e457:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e45b:	eb d7                	jmp    f012e434 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e45d:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e461:	eb d1                	jmp    f012e434 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e463:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e46a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e46d:	89 d0                	mov    %edx,%eax
f012e46f:	c1 e0 02             	shl    $0x2,%eax
f012e472:	01 d0                	add    %edx,%eax
f012e474:	01 c0                	add    %eax,%eax
f012e476:	01 d8                	add    %ebx,%eax
f012e478:	83 e8 30             	sub    $0x30,%eax
f012e47b:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e47e:	8b 45 10             	mov    0x10(%ebp),%eax
f012e481:	8a 00                	mov    (%eax),%al
f012e483:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e486:	83 fb 2f             	cmp    $0x2f,%ebx
f012e489:	7e 3e                	jle    f012e4c9 <vprintfmt+0xe9>
f012e48b:	83 fb 39             	cmp    $0x39,%ebx
f012e48e:	7f 39                	jg     f012e4c9 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e490:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e493:	eb d5                	jmp    f012e46a <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e495:	8b 45 14             	mov    0x14(%ebp),%eax
f012e498:	83 c0 04             	add    $0x4,%eax
f012e49b:	89 45 14             	mov    %eax,0x14(%ebp)
f012e49e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4a1:	83 e8 04             	sub    $0x4,%eax
f012e4a4:	8b 00                	mov    (%eax),%eax
f012e4a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e4a9:	eb 1f                	jmp    f012e4ca <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e4ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e4af:	79 83                	jns    f012e434 <vprintfmt+0x54>
				width = 0;
f012e4b1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e4b8:	e9 77 ff ff ff       	jmp    f012e434 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e4bd:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e4c4:	e9 6b ff ff ff       	jmp    f012e434 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e4c9:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e4ca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e4ce:	0f 89 60 ff ff ff    	jns    f012e434 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e4d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e4d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e4da:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e4e1:	e9 4e ff ff ff       	jmp    f012e434 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e4e6:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e4e9:	e9 46 ff ff ff       	jmp    f012e434 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e4ee:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4f1:	83 c0 04             	add    $0x4,%eax
f012e4f4:	89 45 14             	mov    %eax,0x14(%ebp)
f012e4f7:	8b 45 14             	mov    0x14(%ebp),%eax
f012e4fa:	83 e8 04             	sub    $0x4,%eax
f012e4fd:	8b 00                	mov    (%eax),%eax
f012e4ff:	83 ec 08             	sub    $0x8,%esp
f012e502:	ff 75 0c             	pushl  0xc(%ebp)
f012e505:	50                   	push   %eax
f012e506:	8b 45 08             	mov    0x8(%ebp),%eax
f012e509:	ff d0                	call   *%eax
f012e50b:	83 c4 10             	add    $0x10,%esp
			break;
f012e50e:	e9 89 02 00 00       	jmp    f012e79c <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e513:	8b 45 14             	mov    0x14(%ebp),%eax
f012e516:	83 c0 04             	add    $0x4,%eax
f012e519:	89 45 14             	mov    %eax,0x14(%ebp)
f012e51c:	8b 45 14             	mov    0x14(%ebp),%eax
f012e51f:	83 e8 04             	sub    $0x4,%eax
f012e522:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e524:	85 db                	test   %ebx,%ebx
f012e526:	79 02                	jns    f012e52a <vprintfmt+0x14a>
				err = -err;
f012e528:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e52a:	83 fb 64             	cmp    $0x64,%ebx
f012e52d:	7f 0b                	jg     f012e53a <vprintfmt+0x15a>
f012e52f:	8b 34 9d e0 a9 13 f0 	mov    -0xfec5620(,%ebx,4),%esi
f012e536:	85 f6                	test   %esi,%esi
f012e538:	75 19                	jne    f012e553 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e53a:	53                   	push   %ebx
f012e53b:	68 85 ab 13 f0       	push   $0xf013ab85
f012e540:	ff 75 0c             	pushl  0xc(%ebp)
f012e543:	ff 75 08             	pushl  0x8(%ebp)
f012e546:	e8 5e 02 00 00       	call   f012e7a9 <printfmt>
f012e54b:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e54e:	e9 49 02 00 00       	jmp    f012e79c <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e553:	56                   	push   %esi
f012e554:	68 8e ab 13 f0       	push   $0xf013ab8e
f012e559:	ff 75 0c             	pushl  0xc(%ebp)
f012e55c:	ff 75 08             	pushl  0x8(%ebp)
f012e55f:	e8 45 02 00 00       	call   f012e7a9 <printfmt>
f012e564:	83 c4 10             	add    $0x10,%esp
			break;
f012e567:	e9 30 02 00 00       	jmp    f012e79c <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e56c:	8b 45 14             	mov    0x14(%ebp),%eax
f012e56f:	83 c0 04             	add    $0x4,%eax
f012e572:	89 45 14             	mov    %eax,0x14(%ebp)
f012e575:	8b 45 14             	mov    0x14(%ebp),%eax
f012e578:	83 e8 04             	sub    $0x4,%eax
f012e57b:	8b 30                	mov    (%eax),%esi
f012e57d:	85 f6                	test   %esi,%esi
f012e57f:	75 05                	jne    f012e586 <vprintfmt+0x1a6>
				p = "(null)";
f012e581:	be 91 ab 13 f0       	mov    $0xf013ab91,%esi
			if (width > 0 && padc != '-')
f012e586:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e58a:	7e 6d                	jle    f012e5f9 <vprintfmt+0x219>
f012e58c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e590:	74 67                	je     f012e5f9 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e592:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e595:	83 ec 08             	sub    $0x8,%esp
f012e598:	50                   	push   %eax
f012e599:	56                   	push   %esi
f012e59a:	e8 12 05 00 00       	call   f012eab1 <strnlen>
f012e59f:	83 c4 10             	add    $0x10,%esp
f012e5a2:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e5a5:	eb 16                	jmp    f012e5bd <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e5a7:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e5ab:	83 ec 08             	sub    $0x8,%esp
f012e5ae:	ff 75 0c             	pushl  0xc(%ebp)
f012e5b1:	50                   	push   %eax
f012e5b2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5b5:	ff d0                	call   *%eax
f012e5b7:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e5ba:	ff 4d e4             	decl   -0x1c(%ebp)
f012e5bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e5c1:	7f e4                	jg     f012e5a7 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e5c3:	eb 34                	jmp    f012e5f9 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e5c5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e5c9:	74 1c                	je     f012e5e7 <vprintfmt+0x207>
f012e5cb:	83 fb 1f             	cmp    $0x1f,%ebx
f012e5ce:	7e 05                	jle    f012e5d5 <vprintfmt+0x1f5>
f012e5d0:	83 fb 7e             	cmp    $0x7e,%ebx
f012e5d3:	7e 12                	jle    f012e5e7 <vprintfmt+0x207>
					putch('?', putdat);
f012e5d5:	83 ec 08             	sub    $0x8,%esp
f012e5d8:	ff 75 0c             	pushl  0xc(%ebp)
f012e5db:	6a 3f                	push   $0x3f
f012e5dd:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5e0:	ff d0                	call   *%eax
f012e5e2:	83 c4 10             	add    $0x10,%esp
f012e5e5:	eb 0f                	jmp    f012e5f6 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e5e7:	83 ec 08             	sub    $0x8,%esp
f012e5ea:	ff 75 0c             	pushl  0xc(%ebp)
f012e5ed:	53                   	push   %ebx
f012e5ee:	8b 45 08             	mov    0x8(%ebp),%eax
f012e5f1:	ff d0                	call   *%eax
f012e5f3:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e5f6:	ff 4d e4             	decl   -0x1c(%ebp)
f012e5f9:	89 f0                	mov    %esi,%eax
f012e5fb:	8d 70 01             	lea    0x1(%eax),%esi
f012e5fe:	8a 00                	mov    (%eax),%al
f012e600:	0f be d8             	movsbl %al,%ebx
f012e603:	85 db                	test   %ebx,%ebx
f012e605:	74 24                	je     f012e62b <vprintfmt+0x24b>
f012e607:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e60b:	78 b8                	js     f012e5c5 <vprintfmt+0x1e5>
f012e60d:	ff 4d e0             	decl   -0x20(%ebp)
f012e610:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e614:	79 af                	jns    f012e5c5 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e616:	eb 13                	jmp    f012e62b <vprintfmt+0x24b>
				putch(' ', putdat);
f012e618:	83 ec 08             	sub    $0x8,%esp
f012e61b:	ff 75 0c             	pushl  0xc(%ebp)
f012e61e:	6a 20                	push   $0x20
f012e620:	8b 45 08             	mov    0x8(%ebp),%eax
f012e623:	ff d0                	call   *%eax
f012e625:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e628:	ff 4d e4             	decl   -0x1c(%ebp)
f012e62b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e62f:	7f e7                	jg     f012e618 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e631:	e9 66 01 00 00       	jmp    f012e79c <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e636:	83 ec 08             	sub    $0x8,%esp
f012e639:	ff 75 e8             	pushl  -0x18(%ebp)
f012e63c:	8d 45 14             	lea    0x14(%ebp),%eax
f012e63f:	50                   	push   %eax
f012e640:	e8 3c fd ff ff       	call   f012e381 <getint>
f012e645:	83 c4 10             	add    $0x10,%esp
f012e648:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e64b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e64e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e654:	85 d2                	test   %edx,%edx
f012e656:	79 23                	jns    f012e67b <vprintfmt+0x29b>
				putch('-', putdat);
f012e658:	83 ec 08             	sub    $0x8,%esp
f012e65b:	ff 75 0c             	pushl  0xc(%ebp)
f012e65e:	6a 2d                	push   $0x2d
f012e660:	8b 45 08             	mov    0x8(%ebp),%eax
f012e663:	ff d0                	call   *%eax
f012e665:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012e668:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e66b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e66e:	f7 d8                	neg    %eax
f012e670:	83 d2 00             	adc    $0x0,%edx
f012e673:	f7 da                	neg    %edx
f012e675:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e678:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012e67b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e682:	e9 bc 00 00 00       	jmp    f012e743 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012e687:	83 ec 08             	sub    $0x8,%esp
f012e68a:	ff 75 e8             	pushl  -0x18(%ebp)
f012e68d:	8d 45 14             	lea    0x14(%ebp),%eax
f012e690:	50                   	push   %eax
f012e691:	e8 84 fc ff ff       	call   f012e31a <getuint>
f012e696:	83 c4 10             	add    $0x10,%esp
f012e699:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e69c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012e69f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012e6a6:	e9 98 00 00 00       	jmp    f012e743 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012e6ab:	83 ec 08             	sub    $0x8,%esp
f012e6ae:	ff 75 0c             	pushl  0xc(%ebp)
f012e6b1:	6a 58                	push   $0x58
f012e6b3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6b6:	ff d0                	call   *%eax
f012e6b8:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e6bb:	83 ec 08             	sub    $0x8,%esp
f012e6be:	ff 75 0c             	pushl  0xc(%ebp)
f012e6c1:	6a 58                	push   $0x58
f012e6c3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6c6:	ff d0                	call   *%eax
f012e6c8:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012e6cb:	83 ec 08             	sub    $0x8,%esp
f012e6ce:	ff 75 0c             	pushl  0xc(%ebp)
f012e6d1:	6a 58                	push   $0x58
f012e6d3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d6:	ff d0                	call   *%eax
f012e6d8:	83 c4 10             	add    $0x10,%esp
			break;
f012e6db:	e9 bc 00 00 00       	jmp    f012e79c <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012e6e0:	83 ec 08             	sub    $0x8,%esp
f012e6e3:	ff 75 0c             	pushl  0xc(%ebp)
f012e6e6:	6a 30                	push   $0x30
f012e6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6eb:	ff d0                	call   *%eax
f012e6ed:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012e6f0:	83 ec 08             	sub    $0x8,%esp
f012e6f3:	ff 75 0c             	pushl  0xc(%ebp)
f012e6f6:	6a 78                	push   $0x78
f012e6f8:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6fb:	ff d0                	call   *%eax
f012e6fd:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012e700:	8b 45 14             	mov    0x14(%ebp),%eax
f012e703:	83 c0 04             	add    $0x4,%eax
f012e706:	89 45 14             	mov    %eax,0x14(%ebp)
f012e709:	8b 45 14             	mov    0x14(%ebp),%eax
f012e70c:	83 e8 04             	sub    $0x4,%eax
f012e70f:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012e711:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012e71b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012e722:	eb 1f                	jmp    f012e743 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012e724:	83 ec 08             	sub    $0x8,%esp
f012e727:	ff 75 e8             	pushl  -0x18(%ebp)
f012e72a:	8d 45 14             	lea    0x14(%ebp),%eax
f012e72d:	50                   	push   %eax
f012e72e:	e8 e7 fb ff ff       	call   f012e31a <getuint>
f012e733:	83 c4 10             	add    $0x10,%esp
f012e736:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e739:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012e73c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012e743:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012e747:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e74a:	83 ec 04             	sub    $0x4,%esp
f012e74d:	52                   	push   %edx
f012e74e:	ff 75 e4             	pushl  -0x1c(%ebp)
f012e751:	50                   	push   %eax
f012e752:	ff 75 f4             	pushl  -0xc(%ebp)
f012e755:	ff 75 f0             	pushl  -0x10(%ebp)
f012e758:	ff 75 0c             	pushl  0xc(%ebp)
f012e75b:	ff 75 08             	pushl  0x8(%ebp)
f012e75e:	e8 00 fb ff ff       	call   f012e263 <printnum>
f012e763:	83 c4 20             	add    $0x20,%esp
			break;
f012e766:	eb 34                	jmp    f012e79c <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012e768:	83 ec 08             	sub    $0x8,%esp
f012e76b:	ff 75 0c             	pushl  0xc(%ebp)
f012e76e:	53                   	push   %ebx
f012e76f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e772:	ff d0                	call   *%eax
f012e774:	83 c4 10             	add    $0x10,%esp
			break;
f012e777:	eb 23                	jmp    f012e79c <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012e779:	83 ec 08             	sub    $0x8,%esp
f012e77c:	ff 75 0c             	pushl  0xc(%ebp)
f012e77f:	6a 25                	push   $0x25
f012e781:	8b 45 08             	mov    0x8(%ebp),%eax
f012e784:	ff d0                	call   *%eax
f012e786:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012e789:	ff 4d 10             	decl   0x10(%ebp)
f012e78c:	eb 03                	jmp    f012e791 <vprintfmt+0x3b1>
f012e78e:	ff 4d 10             	decl   0x10(%ebp)
f012e791:	8b 45 10             	mov    0x10(%ebp),%eax
f012e794:	48                   	dec    %eax
f012e795:	8a 00                	mov    (%eax),%al
f012e797:	3c 25                	cmp    $0x25,%al
f012e799:	75 f3                	jne    f012e78e <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012e79b:	90                   	nop
		}
	}
f012e79c:	e9 47 fc ff ff       	jmp    f012e3e8 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012e7a1:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012e7a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e7a5:	5b                   	pop    %ebx
f012e7a6:	5e                   	pop    %esi
f012e7a7:	5d                   	pop    %ebp
f012e7a8:	c3                   	ret    

f012e7a9 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012e7a9:	55                   	push   %ebp
f012e7aa:	89 e5                	mov    %esp,%ebp
f012e7ac:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012e7af:	8d 45 10             	lea    0x10(%ebp),%eax
f012e7b2:	83 c0 04             	add    $0x4,%eax
f012e7b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012e7b8:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7bb:	ff 75 f4             	pushl  -0xc(%ebp)
f012e7be:	50                   	push   %eax
f012e7bf:	ff 75 0c             	pushl  0xc(%ebp)
f012e7c2:	ff 75 08             	pushl  0x8(%ebp)
f012e7c5:	e8 16 fc ff ff       	call   f012e3e0 <vprintfmt>
f012e7ca:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012e7cd:	90                   	nop
f012e7ce:	c9                   	leave  
f012e7cf:	c3                   	ret    

f012e7d0 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012e7d0:	55                   	push   %ebp
f012e7d1:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012e7d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7d6:	8b 40 08             	mov    0x8(%eax),%eax
f012e7d9:	8d 50 01             	lea    0x1(%eax),%edx
f012e7dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7df:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012e7e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7e5:	8b 10                	mov    (%eax),%edx
f012e7e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7ea:	8b 40 04             	mov    0x4(%eax),%eax
f012e7ed:	39 c2                	cmp    %eax,%edx
f012e7ef:	73 12                	jae    f012e803 <sprintputch+0x33>
		*b->buf++ = ch;
f012e7f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7f4:	8b 00                	mov    (%eax),%eax
f012e7f6:	8d 48 01             	lea    0x1(%eax),%ecx
f012e7f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f012e7fc:	89 0a                	mov    %ecx,(%edx)
f012e7fe:	8b 55 08             	mov    0x8(%ebp),%edx
f012e801:	88 10                	mov    %dl,(%eax)
}
f012e803:	90                   	nop
f012e804:	5d                   	pop    %ebp
f012e805:	c3                   	ret    

f012e806 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012e806:	55                   	push   %ebp
f012e807:	89 e5                	mov    %esp,%ebp
f012e809:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012e80c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e80f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e812:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e815:	8d 50 ff             	lea    -0x1(%eax),%edx
f012e818:	8b 45 08             	mov    0x8(%ebp),%eax
f012e81b:	01 d0                	add    %edx,%eax
f012e81d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e820:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012e827:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e82b:	74 06                	je     f012e833 <vsnprintf+0x2d>
f012e82d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e831:	7f 07                	jg     f012e83a <vsnprintf+0x34>
		return -E_INVAL;
f012e833:	b8 03 00 00 00       	mov    $0x3,%eax
f012e838:	eb 20                	jmp    f012e85a <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012e83a:	ff 75 14             	pushl  0x14(%ebp)
f012e83d:	ff 75 10             	pushl  0x10(%ebp)
f012e840:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012e843:	50                   	push   %eax
f012e844:	68 d0 e7 12 f0       	push   $0xf012e7d0
f012e849:	e8 92 fb ff ff       	call   f012e3e0 <vprintfmt>
f012e84e:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012e851:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e854:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012e857:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012e85a:	c9                   	leave  
f012e85b:	c3                   	ret    

f012e85c <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012e85c:	55                   	push   %ebp
f012e85d:	89 e5                	mov    %esp,%ebp
f012e85f:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012e862:	8d 45 10             	lea    0x10(%ebp),%eax
f012e865:	83 c0 04             	add    $0x4,%eax
f012e868:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012e86b:	8b 45 10             	mov    0x10(%ebp),%eax
f012e86e:	ff 75 f4             	pushl  -0xc(%ebp)
f012e871:	50                   	push   %eax
f012e872:	ff 75 0c             	pushl  0xc(%ebp)
f012e875:	ff 75 08             	pushl  0x8(%ebp)
f012e878:	e8 89 ff ff ff       	call   f012e806 <vsnprintf>
f012e87d:	83 c4 10             	add    $0x10,%esp
f012e880:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012e883:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012e886:	c9                   	leave  
f012e887:	c3                   	ret    

f012e888 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012e888:	55                   	push   %ebp
f012e889:	89 e5                	mov    %esp,%ebp
f012e88b:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012e88e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e892:	74 13                	je     f012e8a7 <readline+0x1f>
		cprintf("%s", prompt);
f012e894:	83 ec 08             	sub    $0x8,%esp
f012e897:	ff 75 08             	pushl  0x8(%ebp)
f012e89a:	68 f0 ac 13 f0       	push   $0xf013acf0
f012e89f:	e8 8d 25 fd ff       	call   f0100e31 <cprintf>
f012e8a4:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012e8a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012e8ae:	83 ec 0c             	sub    $0xc,%esp
f012e8b1:	6a 00                	push   $0x0
f012e8b3:	e8 22 25 fd ff       	call   f0100dda <iscons>
f012e8b8:	83 c4 10             	add    $0x10,%esp
f012e8bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012e8be:	e8 fe 24 fd ff       	call   f0100dc1 <getchar>
f012e8c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012e8c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012e8ca:	79 22                	jns    f012e8ee <readline+0x66>
			if (c != -E_EOF)
f012e8cc:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012e8d0:	0f 84 ad 00 00 00    	je     f012e983 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012e8d6:	83 ec 08             	sub    $0x8,%esp
f012e8d9:	ff 75 ec             	pushl  -0x14(%ebp)
f012e8dc:	68 f3 ac 13 f0       	push   $0xf013acf3
f012e8e1:	e8 4b 25 fd ff       	call   f0100e31 <cprintf>
f012e8e6:	83 c4 10             	add    $0x10,%esp
			return;
f012e8e9:	e9 95 00 00 00       	jmp    f012e983 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012e8ee:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012e8f2:	7e 34                	jle    f012e928 <readline+0xa0>
f012e8f4:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012e8fb:	7f 2b                	jg     f012e928 <readline+0xa0>
			if (echoing)
f012e8fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e901:	74 0e                	je     f012e911 <readline+0x89>
				cputchar(c);
f012e903:	83 ec 0c             	sub    $0xc,%esp
f012e906:	ff 75 ec             	pushl  -0x14(%ebp)
f012e909:	e8 9c 24 fd ff       	call   f0100daa <cputchar>
f012e90e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012e911:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e914:	8d 50 01             	lea    0x1(%eax),%edx
f012e917:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012e91a:	89 c2                	mov    %eax,%edx
f012e91c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e91f:	01 d0                	add    %edx,%eax
f012e921:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e924:	88 10                	mov    %dl,(%eax)
f012e926:	eb 56                	jmp    f012e97e <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012e928:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012e92c:	75 1f                	jne    f012e94d <readline+0xc5>
f012e92e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012e932:	7e 19                	jle    f012e94d <readline+0xc5>
			if (echoing)
f012e934:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e938:	74 0e                	je     f012e948 <readline+0xc0>
				cputchar(c);
f012e93a:	83 ec 0c             	sub    $0xc,%esp
f012e93d:	ff 75 ec             	pushl  -0x14(%ebp)
f012e940:	e8 65 24 fd ff       	call   f0100daa <cputchar>
f012e945:	83 c4 10             	add    $0x10,%esp

			i--;
f012e948:	ff 4d f4             	decl   -0xc(%ebp)
f012e94b:	eb 31                	jmp    f012e97e <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012e94d:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012e951:	74 0a                	je     f012e95d <readline+0xd5>
f012e953:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012e957:	0f 85 61 ff ff ff    	jne    f012e8be <readline+0x36>
			if (echoing)
f012e95d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e961:	74 0e                	je     f012e971 <readline+0xe9>
				cputchar(c);
f012e963:	83 ec 0c             	sub    $0xc,%esp
f012e966:	ff 75 ec             	pushl  -0x14(%ebp)
f012e969:	e8 3c 24 fd ff       	call   f0100daa <cputchar>
f012e96e:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012e971:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e974:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e977:	01 d0                	add    %edx,%eax
f012e979:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012e97c:	eb 06                	jmp    f012e984 <readline+0xfc>
		}
	}
f012e97e:	e9 3b ff ff ff       	jmp    f012e8be <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012e983:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012e984:	c9                   	leave  
f012e985:	c3                   	ret    

f012e986 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012e986:	55                   	push   %ebp
f012e987:	89 e5                	mov    %esp,%ebp
f012e989:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012e98c:	e8 05 de fd ff       	call   f010c796 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012e991:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e995:	74 13                	je     f012e9aa <atomic_readline+0x24>
		cprintf("%s", prompt);
f012e997:	83 ec 08             	sub    $0x8,%esp
f012e99a:	ff 75 08             	pushl  0x8(%ebp)
f012e99d:	68 f0 ac 13 f0       	push   $0xf013acf0
f012e9a2:	e8 8a 24 fd ff       	call   f0100e31 <cprintf>
f012e9a7:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012e9aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012e9b1:	83 ec 0c             	sub    $0xc,%esp
f012e9b4:	6a 00                	push   $0x0
f012e9b6:	e8 1f 24 fd ff       	call   f0100dda <iscons>
f012e9bb:	83 c4 10             	add    $0x10,%esp
f012e9be:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012e9c1:	e8 fb 23 fd ff       	call   f0100dc1 <getchar>
f012e9c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012e9c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012e9cd:	79 23                	jns    f012e9f2 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012e9cf:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012e9d3:	74 13                	je     f012e9e8 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012e9d5:	83 ec 08             	sub    $0x8,%esp
f012e9d8:	ff 75 ec             	pushl  -0x14(%ebp)
f012e9db:	68 f3 ac 13 f0       	push   $0xf013acf3
f012e9e0:	e8 4c 24 fd ff       	call   f0100e31 <cprintf>
f012e9e5:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012e9e8:	e8 c3 dd fd ff       	call   f010c7b0 <sys_enable_interrupt>
			return;
f012e9ed:	e9 9a 00 00 00       	jmp    f012ea8c <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012e9f2:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012e9f6:	7e 34                	jle    f012ea2c <atomic_readline+0xa6>
f012e9f8:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012e9ff:	7f 2b                	jg     f012ea2c <atomic_readline+0xa6>
			if (echoing)
f012ea01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ea05:	74 0e                	je     f012ea15 <atomic_readline+0x8f>
				cputchar(c);
f012ea07:	83 ec 0c             	sub    $0xc,%esp
f012ea0a:	ff 75 ec             	pushl  -0x14(%ebp)
f012ea0d:	e8 98 23 fd ff       	call   f0100daa <cputchar>
f012ea12:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ea15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ea18:	8d 50 01             	lea    0x1(%eax),%edx
f012ea1b:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ea1e:	89 c2                	mov    %eax,%edx
f012ea20:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ea23:	01 d0                	add    %edx,%eax
f012ea25:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ea28:	88 10                	mov    %dl,(%eax)
f012ea2a:	eb 5b                	jmp    f012ea87 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012ea2c:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ea30:	75 1f                	jne    f012ea51 <atomic_readline+0xcb>
f012ea32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ea36:	7e 19                	jle    f012ea51 <atomic_readline+0xcb>
			if (echoing)
f012ea38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ea3c:	74 0e                	je     f012ea4c <atomic_readline+0xc6>
				cputchar(c);
f012ea3e:	83 ec 0c             	sub    $0xc,%esp
f012ea41:	ff 75 ec             	pushl  -0x14(%ebp)
f012ea44:	e8 61 23 fd ff       	call   f0100daa <cputchar>
f012ea49:	83 c4 10             	add    $0x10,%esp
			i--;
f012ea4c:	ff 4d f4             	decl   -0xc(%ebp)
f012ea4f:	eb 36                	jmp    f012ea87 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012ea51:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ea55:	74 0a                	je     f012ea61 <atomic_readline+0xdb>
f012ea57:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ea5b:	0f 85 60 ff ff ff    	jne    f012e9c1 <atomic_readline+0x3b>
			if (echoing)
f012ea61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ea65:	74 0e                	je     f012ea75 <atomic_readline+0xef>
				cputchar(c);
f012ea67:	83 ec 0c             	sub    $0xc,%esp
f012ea6a:	ff 75 ec             	pushl  -0x14(%ebp)
f012ea6d:	e8 38 23 fd ff       	call   f0100daa <cputchar>
f012ea72:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012ea75:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea78:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ea7b:	01 d0                	add    %edx,%eax
f012ea7d:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012ea80:	e8 2b dd fd ff       	call   f010c7b0 <sys_enable_interrupt>
			return;
f012ea85:	eb 05                	jmp    f012ea8c <atomic_readline+0x106>
		}
	}
f012ea87:	e9 35 ff ff ff       	jmp    f012e9c1 <atomic_readline+0x3b>
}
f012ea8c:	c9                   	leave  
f012ea8d:	c3                   	ret    

f012ea8e <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012ea8e:	55                   	push   %ebp
f012ea8f:	89 e5                	mov    %esp,%ebp
f012ea91:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012ea94:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ea9b:	eb 06                	jmp    f012eaa3 <strlen+0x15>
		n++;
f012ea9d:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012eaa0:	ff 45 08             	incl   0x8(%ebp)
f012eaa3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaa6:	8a 00                	mov    (%eax),%al
f012eaa8:	84 c0                	test   %al,%al
f012eaaa:	75 f1                	jne    f012ea9d <strlen+0xf>
		n++;
	return n;
f012eaac:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012eaaf:	c9                   	leave  
f012eab0:	c3                   	ret    

f012eab1 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012eab1:	55                   	push   %ebp
f012eab2:	89 e5                	mov    %esp,%ebp
f012eab4:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012eab7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012eabe:	eb 09                	jmp    f012eac9 <strnlen+0x18>
		n++;
f012eac0:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012eac3:	ff 45 08             	incl   0x8(%ebp)
f012eac6:	ff 4d 0c             	decl   0xc(%ebp)
f012eac9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012eacd:	74 09                	je     f012ead8 <strnlen+0x27>
f012eacf:	8b 45 08             	mov    0x8(%ebp),%eax
f012ead2:	8a 00                	mov    (%eax),%al
f012ead4:	84 c0                	test   %al,%al
f012ead6:	75 e8                	jne    f012eac0 <strnlen+0xf>
		n++;
	return n;
f012ead8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012eadb:	c9                   	leave  
f012eadc:	c3                   	ret    

f012eadd <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012eadd:	55                   	push   %ebp
f012eade:	89 e5                	mov    %esp,%ebp
f012eae0:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012eae3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eae6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012eae9:	90                   	nop
f012eaea:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaed:	8d 50 01             	lea    0x1(%eax),%edx
f012eaf0:	89 55 08             	mov    %edx,0x8(%ebp)
f012eaf3:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eaf6:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eaf9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eafc:	8a 12                	mov    (%edx),%dl
f012eafe:	88 10                	mov    %dl,(%eax)
f012eb00:	8a 00                	mov    (%eax),%al
f012eb02:	84 c0                	test   %al,%al
f012eb04:	75 e4                	jne    f012eaea <strcpy+0xd>
		/* do nothing */;
	return ret;
f012eb06:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012eb09:	c9                   	leave  
f012eb0a:	c3                   	ret    

f012eb0b <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012eb0b:	55                   	push   %ebp
f012eb0c:	89 e5                	mov    %esp,%ebp
f012eb0e:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012eb11:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb14:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012eb17:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012eb1e:	eb 1f                	jmp    f012eb3f <strncpy+0x34>
		*dst++ = *src;
f012eb20:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb23:	8d 50 01             	lea    0x1(%eax),%edx
f012eb26:	89 55 08             	mov    %edx,0x8(%ebp)
f012eb29:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb2c:	8a 12                	mov    (%edx),%dl
f012eb2e:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012eb30:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb33:	8a 00                	mov    (%eax),%al
f012eb35:	84 c0                	test   %al,%al
f012eb37:	74 03                	je     f012eb3c <strncpy+0x31>
			src++;
f012eb39:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012eb3c:	ff 45 fc             	incl   -0x4(%ebp)
f012eb3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eb42:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eb45:	72 d9                	jb     f012eb20 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012eb47:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eb4a:	c9                   	leave  
f012eb4b:	c3                   	ret    

f012eb4c <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012eb4c:	55                   	push   %ebp
f012eb4d:	89 e5                	mov    %esp,%ebp
f012eb4f:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012eb52:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb55:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012eb58:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eb5c:	74 30                	je     f012eb8e <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012eb5e:	eb 16                	jmp    f012eb76 <strlcpy+0x2a>
			*dst++ = *src++;
f012eb60:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb63:	8d 50 01             	lea    0x1(%eax),%edx
f012eb66:	89 55 08             	mov    %edx,0x8(%ebp)
f012eb69:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb6c:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eb6f:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eb72:	8a 12                	mov    (%edx),%dl
f012eb74:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012eb76:	ff 4d 10             	decl   0x10(%ebp)
f012eb79:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eb7d:	74 09                	je     f012eb88 <strlcpy+0x3c>
f012eb7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb82:	8a 00                	mov    (%eax),%al
f012eb84:	84 c0                	test   %al,%al
f012eb86:	75 d8                	jne    f012eb60 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012eb88:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb8b:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012eb8e:	8b 55 08             	mov    0x8(%ebp),%edx
f012eb91:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eb94:	29 c2                	sub    %eax,%edx
f012eb96:	89 d0                	mov    %edx,%eax
}
f012eb98:	c9                   	leave  
f012eb99:	c3                   	ret    

f012eb9a <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012eb9a:	55                   	push   %ebp
f012eb9b:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012eb9d:	eb 06                	jmp    f012eba5 <strcmp+0xb>
		p++, q++;
f012eb9f:	ff 45 08             	incl   0x8(%ebp)
f012eba2:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012eba5:	8b 45 08             	mov    0x8(%ebp),%eax
f012eba8:	8a 00                	mov    (%eax),%al
f012ebaa:	84 c0                	test   %al,%al
f012ebac:	74 0e                	je     f012ebbc <strcmp+0x22>
f012ebae:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebb1:	8a 10                	mov    (%eax),%dl
f012ebb3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebb6:	8a 00                	mov    (%eax),%al
f012ebb8:	38 c2                	cmp    %al,%dl
f012ebba:	74 e3                	je     f012eb9f <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012ebbc:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebbf:	8a 00                	mov    (%eax),%al
f012ebc1:	0f b6 d0             	movzbl %al,%edx
f012ebc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebc7:	8a 00                	mov    (%eax),%al
f012ebc9:	0f b6 c0             	movzbl %al,%eax
f012ebcc:	29 c2                	sub    %eax,%edx
f012ebce:	89 d0                	mov    %edx,%eax
}
f012ebd0:	5d                   	pop    %ebp
f012ebd1:	c3                   	ret    

f012ebd2 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012ebd2:	55                   	push   %ebp
f012ebd3:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012ebd5:	eb 09                	jmp    f012ebe0 <strncmp+0xe>
		n--, p++, q++;
f012ebd7:	ff 4d 10             	decl   0x10(%ebp)
f012ebda:	ff 45 08             	incl   0x8(%ebp)
f012ebdd:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012ebe0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ebe4:	74 17                	je     f012ebfd <strncmp+0x2b>
f012ebe6:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebe9:	8a 00                	mov    (%eax),%al
f012ebeb:	84 c0                	test   %al,%al
f012ebed:	74 0e                	je     f012ebfd <strncmp+0x2b>
f012ebef:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebf2:	8a 10                	mov    (%eax),%dl
f012ebf4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebf7:	8a 00                	mov    (%eax),%al
f012ebf9:	38 c2                	cmp    %al,%dl
f012ebfb:	74 da                	je     f012ebd7 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012ebfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ec01:	75 07                	jne    f012ec0a <strncmp+0x38>
		return 0;
f012ec03:	b8 00 00 00 00       	mov    $0x0,%eax
f012ec08:	eb 14                	jmp    f012ec1e <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012ec0a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec0d:	8a 00                	mov    (%eax),%al
f012ec0f:	0f b6 d0             	movzbl %al,%edx
f012ec12:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec15:	8a 00                	mov    (%eax),%al
f012ec17:	0f b6 c0             	movzbl %al,%eax
f012ec1a:	29 c2                	sub    %eax,%edx
f012ec1c:	89 d0                	mov    %edx,%eax
}
f012ec1e:	5d                   	pop    %ebp
f012ec1f:	c3                   	ret    

f012ec20 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012ec20:	55                   	push   %ebp
f012ec21:	89 e5                	mov    %esp,%ebp
f012ec23:	83 ec 04             	sub    $0x4,%esp
f012ec26:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec29:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ec2c:	eb 12                	jmp    f012ec40 <strchr+0x20>
		if (*s == c)
f012ec2e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec31:	8a 00                	mov    (%eax),%al
f012ec33:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ec36:	75 05                	jne    f012ec3d <strchr+0x1d>
			return (char *) s;
f012ec38:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec3b:	eb 11                	jmp    f012ec4e <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012ec3d:	ff 45 08             	incl   0x8(%ebp)
f012ec40:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec43:	8a 00                	mov    (%eax),%al
f012ec45:	84 c0                	test   %al,%al
f012ec47:	75 e5                	jne    f012ec2e <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012ec49:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ec4e:	c9                   	leave  
f012ec4f:	c3                   	ret    

f012ec50 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012ec50:	55                   	push   %ebp
f012ec51:	89 e5                	mov    %esp,%ebp
f012ec53:	83 ec 04             	sub    $0x4,%esp
f012ec56:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec59:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012ec5c:	eb 0d                	jmp    f012ec6b <strfind+0x1b>
		if (*s == c)
f012ec5e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec61:	8a 00                	mov    (%eax),%al
f012ec63:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012ec66:	74 0e                	je     f012ec76 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012ec68:	ff 45 08             	incl   0x8(%ebp)
f012ec6b:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec6e:	8a 00                	mov    (%eax),%al
f012ec70:	84 c0                	test   %al,%al
f012ec72:	75 ea                	jne    f012ec5e <strfind+0xe>
f012ec74:	eb 01                	jmp    f012ec77 <strfind+0x27>
		if (*s == c)
			break;
f012ec76:	90                   	nop
	return (char *) s;
f012ec77:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ec7a:	c9                   	leave  
f012ec7b:	c3                   	ret    

f012ec7c <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012ec7c:	55                   	push   %ebp
f012ec7d:	89 e5                	mov    %esp,%ebp
f012ec7f:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012ec82:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec85:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012ec88:	8b 45 10             	mov    0x10(%ebp),%eax
f012ec8b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012ec8e:	eb 0e                	jmp    f012ec9e <memset+0x22>
		*p++ = c;
f012ec90:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ec93:	8d 50 01             	lea    0x1(%eax),%edx
f012ec96:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012ec99:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ec9c:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012ec9e:	ff 4d f8             	decl   -0x8(%ebp)
f012eca1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012eca5:	79 e9                	jns    f012ec90 <memset+0x14>
		*p++ = c;

	return v;
f012eca7:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ecaa:	c9                   	leave  
f012ecab:	c3                   	ret    

f012ecac <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012ecac:	55                   	push   %ebp
f012ecad:	89 e5                	mov    %esp,%ebp
f012ecaf:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012ecb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ecb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012ecb8:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecbb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012ecbe:	eb 16                	jmp    f012ecd6 <memcpy+0x2a>
		*d++ = *s++;
f012ecc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ecc3:	8d 50 01             	lea    0x1(%eax),%edx
f012ecc6:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ecc9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012eccc:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eccf:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012ecd2:	8a 12                	mov    (%edx),%dl
f012ecd4:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012ecd6:	8b 45 10             	mov    0x10(%ebp),%eax
f012ecd9:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ecdc:	89 55 10             	mov    %edx,0x10(%ebp)
f012ecdf:	85 c0                	test   %eax,%eax
f012ece1:	75 dd                	jne    f012ecc0 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012ece3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ece6:	c9                   	leave  
f012ece7:	c3                   	ret    

f012ece8 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012ece8:	55                   	push   %ebp
f012ece9:	89 e5                	mov    %esp,%ebp
f012eceb:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012ecee:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ecf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012ecf4:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecf7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012ecfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ecfd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012ed00:	73 50                	jae    f012ed52 <memmove+0x6a>
f012ed02:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012ed05:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed08:	01 d0                	add    %edx,%eax
f012ed0a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012ed0d:	76 43                	jbe    f012ed52 <memmove+0x6a>
		s += n;
f012ed0f:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed12:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012ed15:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed18:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012ed1b:	eb 10                	jmp    f012ed2d <memmove+0x45>
			*--d = *--s;
f012ed1d:	ff 4d f8             	decl   -0x8(%ebp)
f012ed20:	ff 4d fc             	decl   -0x4(%ebp)
f012ed23:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ed26:	8a 10                	mov    (%eax),%dl
f012ed28:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed2b:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012ed2d:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed30:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ed33:	89 55 10             	mov    %edx,0x10(%ebp)
f012ed36:	85 c0                	test   %eax,%eax
f012ed38:	75 e3                	jne    f012ed1d <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012ed3a:	eb 23                	jmp    f012ed5f <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012ed3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed3f:	8d 50 01             	lea    0x1(%eax),%edx
f012ed42:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ed45:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012ed48:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ed4b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012ed4e:	8a 12                	mov    (%edx),%dl
f012ed50:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012ed52:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed55:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ed58:	89 55 10             	mov    %edx,0x10(%ebp)
f012ed5b:	85 c0                	test   %eax,%eax
f012ed5d:	75 dd                	jne    f012ed3c <memmove+0x54>
			*d++ = *s++;

	return dst;
f012ed5f:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012ed62:	c9                   	leave  
f012ed63:	c3                   	ret    

f012ed64 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012ed64:	55                   	push   %ebp
f012ed65:	89 e5                	mov    %esp,%ebp
f012ed67:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012ed6a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012ed70:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed73:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012ed76:	eb 2a                	jmp    f012eda2 <memcmp+0x3e>
		if (*s1 != *s2)
f012ed78:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ed7b:	8a 10                	mov    (%eax),%dl
f012ed7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed80:	8a 00                	mov    (%eax),%al
f012ed82:	38 c2                	cmp    %al,%dl
f012ed84:	74 16                	je     f012ed9c <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012ed86:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ed89:	8a 00                	mov    (%eax),%al
f012ed8b:	0f b6 d0             	movzbl %al,%edx
f012ed8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ed91:	8a 00                	mov    (%eax),%al
f012ed93:	0f b6 c0             	movzbl %al,%eax
f012ed96:	29 c2                	sub    %eax,%edx
f012ed98:	89 d0                	mov    %edx,%eax
f012ed9a:	eb 18                	jmp    f012edb4 <memcmp+0x50>
		s1++, s2++;
f012ed9c:	ff 45 fc             	incl   -0x4(%ebp)
f012ed9f:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012eda2:	8b 45 10             	mov    0x10(%ebp),%eax
f012eda5:	8d 50 ff             	lea    -0x1(%eax),%edx
f012eda8:	89 55 10             	mov    %edx,0x10(%ebp)
f012edab:	85 c0                	test   %eax,%eax
f012edad:	75 c9                	jne    f012ed78 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012edaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012edb4:	c9                   	leave  
f012edb5:	c3                   	ret    

f012edb6 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012edb6:	55                   	push   %ebp
f012edb7:	89 e5                	mov    %esp,%ebp
f012edb9:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012edbc:	8b 55 08             	mov    0x8(%ebp),%edx
f012edbf:	8b 45 10             	mov    0x10(%ebp),%eax
f012edc2:	01 d0                	add    %edx,%eax
f012edc4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012edc7:	eb 15                	jmp    f012edde <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012edc9:	8b 45 08             	mov    0x8(%ebp),%eax
f012edcc:	8a 00                	mov    (%eax),%al
f012edce:	0f b6 d0             	movzbl %al,%edx
f012edd1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012edd4:	0f b6 c0             	movzbl %al,%eax
f012edd7:	39 c2                	cmp    %eax,%edx
f012edd9:	74 0d                	je     f012ede8 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012eddb:	ff 45 08             	incl   0x8(%ebp)
f012edde:	8b 45 08             	mov    0x8(%ebp),%eax
f012ede1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012ede4:	72 e3                	jb     f012edc9 <memfind+0x13>
f012ede6:	eb 01                	jmp    f012ede9 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012ede8:	90                   	nop
	return (void *) s;
f012ede9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012edec:	c9                   	leave  
f012eded:	c3                   	ret    

f012edee <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012edee:	55                   	push   %ebp
f012edef:	89 e5                	mov    %esp,%ebp
f012edf1:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012edf4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012edfb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012ee02:	eb 03                	jmp    f012ee07 <strtol+0x19>
		s++;
f012ee04:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012ee07:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee0a:	8a 00                	mov    (%eax),%al
f012ee0c:	3c 20                	cmp    $0x20,%al
f012ee0e:	74 f4                	je     f012ee04 <strtol+0x16>
f012ee10:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee13:	8a 00                	mov    (%eax),%al
f012ee15:	3c 09                	cmp    $0x9,%al
f012ee17:	74 eb                	je     f012ee04 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012ee19:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee1c:	8a 00                	mov    (%eax),%al
f012ee1e:	3c 2b                	cmp    $0x2b,%al
f012ee20:	75 05                	jne    f012ee27 <strtol+0x39>
		s++;
f012ee22:	ff 45 08             	incl   0x8(%ebp)
f012ee25:	eb 13                	jmp    f012ee3a <strtol+0x4c>
	else if (*s == '-')
f012ee27:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee2a:	8a 00                	mov    (%eax),%al
f012ee2c:	3c 2d                	cmp    $0x2d,%al
f012ee2e:	75 0a                	jne    f012ee3a <strtol+0x4c>
		s++, neg = 1;
f012ee30:	ff 45 08             	incl   0x8(%ebp)
f012ee33:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012ee3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee3e:	74 06                	je     f012ee46 <strtol+0x58>
f012ee40:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012ee44:	75 20                	jne    f012ee66 <strtol+0x78>
f012ee46:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee49:	8a 00                	mov    (%eax),%al
f012ee4b:	3c 30                	cmp    $0x30,%al
f012ee4d:	75 17                	jne    f012ee66 <strtol+0x78>
f012ee4f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee52:	40                   	inc    %eax
f012ee53:	8a 00                	mov    (%eax),%al
f012ee55:	3c 78                	cmp    $0x78,%al
f012ee57:	75 0d                	jne    f012ee66 <strtol+0x78>
		s += 2, base = 16;
f012ee59:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012ee5d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012ee64:	eb 28                	jmp    f012ee8e <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012ee66:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee6a:	75 15                	jne    f012ee81 <strtol+0x93>
f012ee6c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee6f:	8a 00                	mov    (%eax),%al
f012ee71:	3c 30                	cmp    $0x30,%al
f012ee73:	75 0c                	jne    f012ee81 <strtol+0x93>
		s++, base = 8;
f012ee75:	ff 45 08             	incl   0x8(%ebp)
f012ee78:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012ee7f:	eb 0d                	jmp    f012ee8e <strtol+0xa0>
	else if (base == 0)
f012ee81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ee85:	75 07                	jne    f012ee8e <strtol+0xa0>
		base = 10;
f012ee87:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012ee8e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee91:	8a 00                	mov    (%eax),%al
f012ee93:	3c 2f                	cmp    $0x2f,%al
f012ee95:	7e 19                	jle    f012eeb0 <strtol+0xc2>
f012ee97:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee9a:	8a 00                	mov    (%eax),%al
f012ee9c:	3c 39                	cmp    $0x39,%al
f012ee9e:	7f 10                	jg     f012eeb0 <strtol+0xc2>
			dig = *s - '0';
f012eea0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eea3:	8a 00                	mov    (%eax),%al
f012eea5:	0f be c0             	movsbl %al,%eax
f012eea8:	83 e8 30             	sub    $0x30,%eax
f012eeab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012eeae:	eb 42                	jmp    f012eef2 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012eeb0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eeb3:	8a 00                	mov    (%eax),%al
f012eeb5:	3c 60                	cmp    $0x60,%al
f012eeb7:	7e 19                	jle    f012eed2 <strtol+0xe4>
f012eeb9:	8b 45 08             	mov    0x8(%ebp),%eax
f012eebc:	8a 00                	mov    (%eax),%al
f012eebe:	3c 7a                	cmp    $0x7a,%al
f012eec0:	7f 10                	jg     f012eed2 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012eec2:	8b 45 08             	mov    0x8(%ebp),%eax
f012eec5:	8a 00                	mov    (%eax),%al
f012eec7:	0f be c0             	movsbl %al,%eax
f012eeca:	83 e8 57             	sub    $0x57,%eax
f012eecd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012eed0:	eb 20                	jmp    f012eef2 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012eed2:	8b 45 08             	mov    0x8(%ebp),%eax
f012eed5:	8a 00                	mov    (%eax),%al
f012eed7:	3c 40                	cmp    $0x40,%al
f012eed9:	7e 39                	jle    f012ef14 <strtol+0x126>
f012eedb:	8b 45 08             	mov    0x8(%ebp),%eax
f012eede:	8a 00                	mov    (%eax),%al
f012eee0:	3c 5a                	cmp    $0x5a,%al
f012eee2:	7f 30                	jg     f012ef14 <strtol+0x126>
			dig = *s - 'A' + 10;
f012eee4:	8b 45 08             	mov    0x8(%ebp),%eax
f012eee7:	8a 00                	mov    (%eax),%al
f012eee9:	0f be c0             	movsbl %al,%eax
f012eeec:	83 e8 37             	sub    $0x37,%eax
f012eeef:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012eef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eef5:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eef8:	7d 19                	jge    f012ef13 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012eefa:	ff 45 08             	incl   0x8(%ebp)
f012eefd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ef00:	0f af 45 10          	imul   0x10(%ebp),%eax
f012ef04:	89 c2                	mov    %eax,%edx
f012ef06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ef09:	01 d0                	add    %edx,%eax
f012ef0b:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012ef0e:	e9 7b ff ff ff       	jmp    f012ee8e <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012ef13:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012ef14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ef18:	74 08                	je     f012ef22 <strtol+0x134>
		*endptr = (char *) s;
f012ef1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef1d:	8b 55 08             	mov    0x8(%ebp),%edx
f012ef20:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012ef22:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012ef26:	74 07                	je     f012ef2f <strtol+0x141>
f012ef28:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ef2b:	f7 d8                	neg    %eax
f012ef2d:	eb 03                	jmp    f012ef32 <strtol+0x144>
f012ef2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012ef32:	c9                   	leave  
f012ef33:	c3                   	ret    

f012ef34 <ltostr>:

void
ltostr(long value, char *str)
{
f012ef34:	55                   	push   %ebp
f012ef35:	89 e5                	mov    %esp,%ebp
f012ef37:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012ef3a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012ef41:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012ef48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ef4c:	79 13                	jns    f012ef61 <ltostr+0x2d>
	{
		neg = 1;
f012ef4e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012ef55:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef58:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012ef5b:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012ef5e:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012ef61:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef64:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012ef69:	99                   	cltd   
f012ef6a:	f7 f9                	idiv   %ecx
f012ef6c:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012ef6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ef72:	8d 50 01             	lea    0x1(%eax),%edx
f012ef75:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012ef78:	89 c2                	mov    %eax,%edx
f012ef7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef7d:	01 d0                	add    %edx,%eax
f012ef7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ef82:	83 c2 30             	add    $0x30,%edx
f012ef85:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012ef87:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012ef8a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012ef8f:	f7 e9                	imul   %ecx
f012ef91:	c1 fa 02             	sar    $0x2,%edx
f012ef94:	89 c8                	mov    %ecx,%eax
f012ef96:	c1 f8 1f             	sar    $0x1f,%eax
f012ef99:	29 c2                	sub    %eax,%edx
f012ef9b:	89 d0                	mov    %edx,%eax
f012ef9d:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012efa0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012efa3:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012efa8:	f7 e9                	imul   %ecx
f012efaa:	c1 fa 02             	sar    $0x2,%edx
f012efad:	89 c8                	mov    %ecx,%eax
f012efaf:	c1 f8 1f             	sar    $0x1f,%eax
f012efb2:	29 c2                	sub    %eax,%edx
f012efb4:	89 d0                	mov    %edx,%eax
f012efb6:	c1 e0 02             	shl    $0x2,%eax
f012efb9:	01 d0                	add    %edx,%eax
f012efbb:	01 c0                	add    %eax,%eax
f012efbd:	29 c1                	sub    %eax,%ecx
f012efbf:	89 ca                	mov    %ecx,%edx
f012efc1:	85 d2                	test   %edx,%edx
f012efc3:	75 9c                	jne    f012ef61 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012efc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012efcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012efcf:	48                   	dec    %eax
f012efd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012efd3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012efd7:	74 3d                	je     f012f016 <ltostr+0xe2>
		start = 1 ;
f012efd9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012efe0:	eb 34                	jmp    f012f016 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012efe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efe5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efe8:	01 d0                	add    %edx,%eax
f012efea:	8a 00                	mov    (%eax),%al
f012efec:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012efef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eff2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eff5:	01 c2                	add    %eax,%edx
f012eff7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012effa:	8b 45 0c             	mov    0xc(%ebp),%eax
f012effd:	01 c8                	add    %ecx,%eax
f012efff:	8a 00                	mov    (%eax),%al
f012f001:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f003:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f006:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f009:	01 c2                	add    %eax,%edx
f012f00b:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f00e:	88 02                	mov    %al,(%edx)
		start++ ;
f012f010:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f013:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f016:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f019:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f01c:	7c c4                	jl     f012efe2 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f01e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f021:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f024:	01 d0                	add    %edx,%eax
f012f026:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f029:	90                   	nop
f012f02a:	c9                   	leave  
f012f02b:	c3                   	ret    

f012f02c <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f02c:	55                   	push   %ebp
f012f02d:	89 e5                	mov    %esp,%ebp
f012f02f:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f032:	ff 75 08             	pushl  0x8(%ebp)
f012f035:	e8 54 fa ff ff       	call   f012ea8e <strlen>
f012f03a:	83 c4 04             	add    $0x4,%esp
f012f03d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f040:	ff 75 0c             	pushl  0xc(%ebp)
f012f043:	e8 46 fa ff ff       	call   f012ea8e <strlen>
f012f048:	83 c4 04             	add    $0x4,%esp
f012f04b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f04e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f055:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f05c:	eb 17                	jmp    f012f075 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f05e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f061:	8b 45 10             	mov    0x10(%ebp),%eax
f012f064:	01 c2                	add    %eax,%edx
f012f066:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f069:	8b 45 08             	mov    0x8(%ebp),%eax
f012f06c:	01 c8                	add    %ecx,%eax
f012f06e:	8a 00                	mov    (%eax),%al
f012f070:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f072:	ff 45 fc             	incl   -0x4(%ebp)
f012f075:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f078:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f07b:	7c e1                	jl     f012f05e <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f07d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f084:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f08b:	eb 1f                	jmp    f012f0ac <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f08d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f090:	8d 50 01             	lea    0x1(%eax),%edx
f012f093:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f096:	89 c2                	mov    %eax,%edx
f012f098:	8b 45 10             	mov    0x10(%ebp),%eax
f012f09b:	01 c2                	add    %eax,%edx
f012f09d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f0a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0a3:	01 c8                	add    %ecx,%eax
f012f0a5:	8a 00                	mov    (%eax),%al
f012f0a7:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f0a9:	ff 45 f8             	incl   -0x8(%ebp)
f012f0ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0af:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f0b2:	7c d9                	jl     f012f08d <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f0b4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f0b7:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0ba:	01 d0                	add    %edx,%eax
f012f0bc:	c6 00 00             	movb   $0x0,(%eax)
}
f012f0bf:	90                   	nop
f012f0c0:	c9                   	leave  
f012f0c1:	c3                   	ret    

f012f0c2 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f0c2:	55                   	push   %ebp
f012f0c3:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f0c5:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0c8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f0ce:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0d1:	8b 00                	mov    (%eax),%eax
f012f0d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f0da:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0dd:	01 d0                	add    %edx,%eax
f012f0df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f0e5:	eb 0c                	jmp    f012f0f3 <strsplit+0x31>
			*string++ = 0;
f012f0e7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0ea:	8d 50 01             	lea    0x1(%eax),%edx
f012f0ed:	89 55 08             	mov    %edx,0x8(%ebp)
f012f0f0:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0f6:	8a 00                	mov    (%eax),%al
f012f0f8:	84 c0                	test   %al,%al
f012f0fa:	74 18                	je     f012f114 <strsplit+0x52>
f012f0fc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0ff:	8a 00                	mov    (%eax),%al
f012f101:	0f be c0             	movsbl %al,%eax
f012f104:	50                   	push   %eax
f012f105:	ff 75 0c             	pushl  0xc(%ebp)
f012f108:	e8 13 fb ff ff       	call   f012ec20 <strchr>
f012f10d:	83 c4 08             	add    $0x8,%esp
f012f110:	85 c0                	test   %eax,%eax
f012f112:	75 d3                	jne    f012f0e7 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f114:	8b 45 08             	mov    0x8(%ebp),%eax
f012f117:	8a 00                	mov    (%eax),%al
f012f119:	84 c0                	test   %al,%al
f012f11b:	74 5a                	je     f012f177 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f11d:	8b 45 14             	mov    0x14(%ebp),%eax
f012f120:	8b 00                	mov    (%eax),%eax
f012f122:	83 f8 0f             	cmp    $0xf,%eax
f012f125:	75 07                	jne    f012f12e <strsplit+0x6c>
		{
			return 0;
f012f127:	b8 00 00 00 00       	mov    $0x0,%eax
f012f12c:	eb 66                	jmp    f012f194 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f12e:	8b 45 14             	mov    0x14(%ebp),%eax
f012f131:	8b 00                	mov    (%eax),%eax
f012f133:	8d 48 01             	lea    0x1(%eax),%ecx
f012f136:	8b 55 14             	mov    0x14(%ebp),%edx
f012f139:	89 0a                	mov    %ecx,(%edx)
f012f13b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f142:	8b 45 10             	mov    0x10(%ebp),%eax
f012f145:	01 c2                	add    %eax,%edx
f012f147:	8b 45 08             	mov    0x8(%ebp),%eax
f012f14a:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f14c:	eb 03                	jmp    f012f151 <strsplit+0x8f>
			string++;
f012f14e:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f151:	8b 45 08             	mov    0x8(%ebp),%eax
f012f154:	8a 00                	mov    (%eax),%al
f012f156:	84 c0                	test   %al,%al
f012f158:	74 8b                	je     f012f0e5 <strsplit+0x23>
f012f15a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f15d:	8a 00                	mov    (%eax),%al
f012f15f:	0f be c0             	movsbl %al,%eax
f012f162:	50                   	push   %eax
f012f163:	ff 75 0c             	pushl  0xc(%ebp)
f012f166:	e8 b5 fa ff ff       	call   f012ec20 <strchr>
f012f16b:	83 c4 08             	add    $0x8,%esp
f012f16e:	85 c0                	test   %eax,%eax
f012f170:	74 dc                	je     f012f14e <strsplit+0x8c>
			string++;
	}
f012f172:	e9 6e ff ff ff       	jmp    f012f0e5 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f177:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f178:	8b 45 14             	mov    0x14(%ebp),%eax
f012f17b:	8b 00                	mov    (%eax),%eax
f012f17d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f184:	8b 45 10             	mov    0x10(%ebp),%eax
f012f187:	01 d0                	add    %edx,%eax
f012f189:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f18f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f194:	c9                   	leave  
f012f195:	c3                   	ret    

f012f196 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f196:	55                   	push   %ebp
f012f197:	89 e5                	mov    %esp,%ebp
f012f199:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	panic("process_command is not implemented yet");
f012f19c:	83 ec 04             	sub    $0x4,%esp
f012f19f:	68 04 ad 13 f0       	push   $0xf013ad04
f012f1a4:	68 3e 01 00 00       	push   $0x13e
f012f1a9:	68 2b ad 13 f0       	push   $0xf013ad2b
f012f1ae:	e8 fd 0f fd ff       	call   f01001b0 <_panic>

f012f1b3 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f1b3:	55                   	push   %ebp
f012f1b4:	89 e5                	mov    %esp,%ebp
f012f1b6:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f1b9:	90                   	nop
f012f1ba:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f1c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f1c4:	89 c2                	mov    %eax,%edx
f012f1c6:	ec                   	in     (%dx),%al
f012f1c7:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f1ca:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f1cd:	0f b6 c0             	movzbl %al,%eax
f012f1d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f1d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1d6:	25 c0 00 00 00       	and    $0xc0,%eax
f012f1db:	83 f8 40             	cmp    $0x40,%eax
f012f1de:	75 da                	jne    f012f1ba <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f1e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f1e4:	74 11                	je     f012f1f7 <ide_wait_ready+0x44>
f012f1e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1e9:	83 e0 21             	and    $0x21,%eax
f012f1ec:	85 c0                	test   %eax,%eax
f012f1ee:	74 07                	je     f012f1f7 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f1f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f1f5:	eb 05                	jmp    f012f1fc <ide_wait_ready+0x49>
	}
	return 0;
f012f1f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f1fc:	c9                   	leave  
f012f1fd:	c3                   	ret    

f012f1fe <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f1fe:	55                   	push   %ebp
f012f1ff:	89 e5                	mov    %esp,%ebp
f012f201:	57                   	push   %edi
f012f202:	53                   	push   %ebx
f012f203:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f206:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f20d:	76 16                	jbe    f012f225 <ide_read+0x27>
f012f20f:	68 38 ad 13 f0       	push   $0xf013ad38
f012f214:	68 45 ad 13 f0       	push   $0xf013ad45
f012f219:	6a 25                	push   $0x25
f012f21b:	68 5a ad 13 f0       	push   $0xf013ad5a
f012f220:	e8 8b 0f fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f225:	83 ec 0c             	sub    $0xc,%esp
f012f228:	6a 00                	push   $0x0
f012f22a:	e8 84 ff ff ff       	call   f012f1b3 <ide_wait_ready>
f012f22f:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f232:	8b 45 10             	mov    0x10(%ebp),%eax
f012f235:	0f b6 c0             	movzbl %al,%eax
f012f238:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f23f:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f242:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f245:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f248:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f249:	8b 45 08             	mov    0x8(%ebp),%eax
f012f24c:	0f b6 c0             	movzbl %al,%eax
f012f24f:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f256:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f259:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f25c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f25f:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f260:	8b 45 08             	mov    0x8(%ebp),%eax
f012f263:	c1 e8 08             	shr    $0x8,%eax
f012f266:	0f b6 c0             	movzbl %al,%eax
f012f269:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f270:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f273:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f276:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f279:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f27a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f27d:	c1 e8 10             	shr    $0x10,%eax
f012f280:	0f b6 c0             	movzbl %al,%eax
f012f283:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f28a:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f28d:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f290:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f293:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f294:	a1 ec 3a 25 f0       	mov    0xf0253aec,%eax
f012f299:	83 e0 01             	and    $0x1,%eax
f012f29c:	c1 e0 04             	shl    $0x4,%eax
f012f29f:	88 c2                	mov    %al,%dl
f012f2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f2a4:	c1 e8 18             	shr    $0x18,%eax
f012f2a7:	83 e0 0f             	and    $0xf,%eax
f012f2aa:	09 d0                	or     %edx,%eax
f012f2ac:	83 c8 e0             	or     $0xffffffe0,%eax
f012f2af:	0f b6 c0             	movzbl %al,%eax
f012f2b2:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f2b9:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f2bc:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f2bf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f2c2:	ee                   	out    %al,(%dx)
f012f2c3:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f2ca:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f2ce:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f2d1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f2d4:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f2d5:	eb 55                	jmp    f012f32c <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f2d7:	83 ec 0c             	sub    $0xc,%esp
f012f2da:	6a 01                	push   $0x1
f012f2dc:	e8 d2 fe ff ff       	call   f012f1b3 <ide_wait_ready>
f012f2e1:	83 c4 10             	add    $0x10,%esp
f012f2e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f2e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f2eb:	79 05                	jns    f012f2f2 <ide_read+0xf4>
			return r;
f012f2ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f2f0:	eb 45                	jmp    f012f337 <ide_read+0x139>
f012f2f2:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f2f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f2ff:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f306:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f309:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f30c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f30f:	89 cb                	mov    %ecx,%ebx
f012f311:	89 df                	mov    %ebx,%edi
f012f313:	89 c1                	mov    %eax,%ecx
f012f315:	fc                   	cld    
f012f316:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f318:	89 c8                	mov    %ecx,%eax
f012f31a:	89 fb                	mov    %edi,%ebx
f012f31c:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f31f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f322:	ff 4d 10             	decl   0x10(%ebp)
f012f325:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f32c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f330:	75 a5                	jne    f012f2d7 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f332:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f337:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f33a:	5b                   	pop    %ebx
f012f33b:	5f                   	pop    %edi
f012f33c:	5d                   	pop    %ebp
f012f33d:	c3                   	ret    

f012f33e <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f33e:	55                   	push   %ebp
f012f33f:	89 e5                	mov    %esp,%ebp
f012f341:	56                   	push   %esi
f012f342:	53                   	push   %ebx
f012f343:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f346:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f34d:	76 16                	jbe    f012f365 <ide_write+0x27>
f012f34f:	68 38 ad 13 f0       	push   $0xf013ad38
f012f354:	68 45 ad 13 f0       	push   $0xf013ad45
f012f359:	6a 3f                	push   $0x3f
f012f35b:	68 5a ad 13 f0       	push   $0xf013ad5a
f012f360:	e8 4b 0e fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f365:	83 ec 0c             	sub    $0xc,%esp
f012f368:	6a 00                	push   $0x0
f012f36a:	e8 44 fe ff ff       	call   f012f1b3 <ide_wait_ready>
f012f36f:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f372:	8b 45 10             	mov    0x10(%ebp),%eax
f012f375:	0f b6 c0             	movzbl %al,%eax
f012f378:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f37f:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f382:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f385:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f388:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f389:	8b 45 08             	mov    0x8(%ebp),%eax
f012f38c:	0f b6 c0             	movzbl %al,%eax
f012f38f:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f396:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f399:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f39c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f39f:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3a3:	c1 e8 08             	shr    $0x8,%eax
f012f3a6:	0f b6 c0             	movzbl %al,%eax
f012f3a9:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f3b0:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f3b3:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f3b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f3b9:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f3ba:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3bd:	c1 e8 10             	shr    $0x10,%eax
f012f3c0:	0f b6 c0             	movzbl %al,%eax
f012f3c3:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f3ca:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f3cd:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f3d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f3d3:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f3d4:	a1 ec 3a 25 f0       	mov    0xf0253aec,%eax
f012f3d9:	83 e0 01             	and    $0x1,%eax
f012f3dc:	c1 e0 04             	shl    $0x4,%eax
f012f3df:	88 c2                	mov    %al,%dl
f012f3e1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3e4:	c1 e8 18             	shr    $0x18,%eax
f012f3e7:	83 e0 0f             	and    $0xf,%eax
f012f3ea:	09 d0                	or     %edx,%eax
f012f3ec:	83 c8 e0             	or     $0xffffffe0,%eax
f012f3ef:	0f b6 c0             	movzbl %al,%eax
f012f3f2:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f3f9:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f3fc:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f3ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f402:	ee                   	out    %al,(%dx)
f012f403:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f40a:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f40e:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f411:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f414:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f415:	eb 55                	jmp    f012f46c <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f417:	83 ec 0c             	sub    $0xc,%esp
f012f41a:	6a 01                	push   $0x1
f012f41c:	e8 92 fd ff ff       	call   f012f1b3 <ide_wait_ready>
f012f421:	83 c4 10             	add    $0x10,%esp
f012f424:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f427:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f42b:	79 05                	jns    f012f432 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f42d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f430:	eb 45                	jmp    f012f477 <ide_write+0x139>
f012f432:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f439:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f43c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f43f:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f446:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f449:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f44c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f44f:	89 cb                	mov    %ecx,%ebx
f012f451:	89 de                	mov    %ebx,%esi
f012f453:	89 c1                	mov    %eax,%ecx
f012f455:	fc                   	cld    
f012f456:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f458:	89 c8                	mov    %ecx,%eax
f012f45a:	89 f3                	mov    %esi,%ebx
f012f45c:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f45f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f462:	ff 4d 10             	decl   0x10(%ebp)
f012f465:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f46c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f470:	75 a5                	jne    f012f417 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f472:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f477:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f47a:	5b                   	pop    %ebx
f012f47b:	5e                   	pop    %esi
f012f47c:	5d                   	pop    %ebp
f012f47d:	c3                   	ret    

f012f47e <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f012f47e:	55                   	push   %ebp
f012f47f:	89 e5                	mov    %esp,%ebp
f012f481:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f484:	8b 45 08             	mov    0x8(%ebp),%eax
f012f487:	83 e8 10             	sub    $0x10,%eax
f012f48a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f012f48d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f490:	8b 00                	mov    (%eax),%eax
}
f012f492:	c9                   	leave  
f012f493:	c3                   	ret    

f012f494 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f012f494:	55                   	push   %ebp
f012f495:	89 e5                	mov    %esp,%ebp
f012f497:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f49a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f49d:	83 e8 10             	sub    $0x10,%eax
f012f4a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f012f4a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f4a6:	8a 40 04             	mov    0x4(%eax),%al
}
f012f4a9:	c9                   	leave  
f012f4aa:	c3                   	ret    

f012f4ab <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012f4ab:	55                   	push   %ebp
f012f4ac:	89 e5                	mov    %esp,%ebp
f012f4ae:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f4b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012f4b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f4bb:	83 f8 02             	cmp    $0x2,%eax
f012f4be:	74 2b                	je     f012f4eb <alloc_block+0x40>
f012f4c0:	83 f8 02             	cmp    $0x2,%eax
f012f4c3:	7f 07                	jg     f012f4cc <alloc_block+0x21>
f012f4c5:	83 f8 01             	cmp    $0x1,%eax
f012f4c8:	74 0e                	je     f012f4d8 <alloc_block+0x2d>
f012f4ca:	eb 58                	jmp    f012f524 <alloc_block+0x79>
f012f4cc:	83 f8 03             	cmp    $0x3,%eax
f012f4cf:	74 2d                	je     f012f4fe <alloc_block+0x53>
f012f4d1:	83 f8 04             	cmp    $0x4,%eax
f012f4d4:	74 3b                	je     f012f511 <alloc_block+0x66>
f012f4d6:	eb 4c                	jmp    f012f524 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012f4d8:	83 ec 0c             	sub    $0xc,%esp
f012f4db:	ff 75 08             	pushl  0x8(%ebp)
f012f4de:	e8 04 01 00 00       	call   f012f5e7 <alloc_block_FF>
f012f4e3:	83 c4 10             	add    $0x10,%esp
f012f4e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f4e9:	eb 4a                	jmp    f012f535 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f4eb:	83 ec 0c             	sub    $0xc,%esp
f012f4ee:	ff 75 08             	pushl  0x8(%ebp)
f012f4f1:	e8 3f 01 00 00       	call   f012f635 <alloc_block_NF>
f012f4f6:	83 c4 10             	add    $0x10,%esp
f012f4f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f4fc:	eb 37                	jmp    f012f535 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f4fe:	83 ec 0c             	sub    $0xc,%esp
f012f501:	ff 75 08             	pushl  0x8(%ebp)
f012f504:	e8 f8 00 00 00       	call   f012f601 <alloc_block_BF>
f012f509:	83 c4 10             	add    $0x10,%esp
f012f50c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f50f:	eb 24                	jmp    f012f535 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f511:	83 ec 0c             	sub    $0xc,%esp
f012f514:	ff 75 08             	pushl  0x8(%ebp)
f012f517:	e8 ff 00 00 00       	call   f012f61b <alloc_block_WF>
f012f51c:	83 c4 10             	add    $0x10,%esp
f012f51f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f522:	eb 11                	jmp    f012f535 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f524:	83 ec 0c             	sub    $0xc,%esp
f012f527:	68 68 ad 13 f0       	push   $0xf013ad68
f012f52c:	e8 00 19 fd ff       	call   f0100e31 <cprintf>
f012f531:	83 c4 10             	add    $0x10,%esp
		break;
f012f534:	90                   	nop
	}
	return va;
f012f535:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f538:	c9                   	leave  
f012f539:	c3                   	ret    

f012f53a <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012f53a:	55                   	push   %ebp
f012f53b:	89 e5                	mov    %esp,%ebp
f012f53d:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f540:	83 ec 0c             	sub    $0xc,%esp
f012f543:	68 88 ad 13 f0       	push   $0xf013ad88
f012f548:	e8 e4 18 fd ff       	call   f0100e31 <cprintf>
f012f54d:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f012f550:	83 ec 0c             	sub    $0xc,%esp
f012f553:	68 b3 ad 13 f0       	push   $0xf013adb3
f012f558:	e8 d4 18 fd ff       	call   f0100e31 <cprintf>
f012f55d:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f560:	8b 45 08             	mov    0x8(%ebp),%eax
f012f563:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f566:	eb 26                	jmp    f012f58e <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012f568:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f56b:	8a 40 04             	mov    0x4(%eax),%al
f012f56e:	0f b6 d0             	movzbl %al,%edx
f012f571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f574:	8b 00                	mov    (%eax),%eax
f012f576:	83 ec 04             	sub    $0x4,%esp
f012f579:	52                   	push   %edx
f012f57a:	50                   	push   %eax
f012f57b:	68 cb ad 13 f0       	push   $0xf013adcb
f012f580:	e8 ac 18 fd ff       	call   f0100e31 <cprintf>
f012f585:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f588:	8b 45 10             	mov    0x10(%ebp),%eax
f012f58b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f58e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f592:	74 08                	je     f012f59c <print_blocks_list+0x62>
f012f594:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f597:	8b 40 08             	mov    0x8(%eax),%eax
f012f59a:	eb 05                	jmp    f012f5a1 <print_blocks_list+0x67>
f012f59c:	b8 00 00 00 00       	mov    $0x0,%eax
f012f5a1:	89 45 10             	mov    %eax,0x10(%ebp)
f012f5a4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f5a7:	85 c0                	test   %eax,%eax
f012f5a9:	75 bd                	jne    f012f568 <print_blocks_list+0x2e>
f012f5ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f5af:	75 b7                	jne    f012f568 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f012f5b1:	83 ec 0c             	sub    $0xc,%esp
f012f5b4:	68 88 ad 13 f0       	push   $0xf013ad88
f012f5b9:	e8 73 18 fd ff       	call   f0100e31 <cprintf>
f012f5be:	83 c4 10             	add    $0x10,%esp

}
f012f5c1:	90                   	nop
f012f5c2:	c9                   	leave  
f012f5c3:	c3                   	ret    

f012f5c4 <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f012f5c4:	55                   	push   %ebp
f012f5c5:	89 e5                	mov    %esp,%ebp
f012f5c7:	83 ec 08             	sub    $0x8,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f5ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f5ce:	74 14                	je     f012f5e4 <initialize_dynamic_allocator+0x20>
		return ;
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	panic("initialize_dynamic_allocator is not implemented yet");
f012f5d0:	83 ec 04             	sub    $0x4,%esp
f012f5d3:	68 e4 ad 13 f0       	push   $0xf013ade4
f012f5d8:	6a 62                	push   $0x62
f012f5da:	68 18 ae 13 f0       	push   $0xf013ae18
f012f5df:	e8 cc 0b fd ff       	call   f01001b0 <_panic>
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return ;
f012f5e4:	90                   	nop
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	panic("initialize_dynamic_allocator is not implemented yet");
}
f012f5e5:	c9                   	leave  
f012f5e6:	c3                   	ret    

f012f5e7 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012f5e7:	55                   	push   %ebp
f012f5e8:	89 e5                	mov    %esp,%ebp
f012f5ea:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	panic("alloc_block_FF is not implemented yet");
f012f5ed:	83 ec 04             	sub    $0x4,%esp
f012f5f0:	68 30 ae 13 f0       	push   $0xf013ae30
f012f5f5:	6a 6b                	push   $0x6b
f012f5f7:	68 18 ae 13 f0       	push   $0xf013ae18
f012f5fc:	e8 af 0b fd ff       	call   f01001b0 <_panic>

f012f601 <alloc_block_BF>:
}
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f012f601:	55                   	push   %ebp
f012f602:	89 e5                	mov    %esp,%ebp
f012f604:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	panic("alloc_block_BF is not implemented yet");
f012f607:	83 ec 04             	sub    $0x4,%esp
f012f60a:	68 58 ae 13 f0       	push   $0xf013ae58
f012f60f:	6a 74                	push   $0x74
f012f611:	68 18 ae 13 f0       	push   $0xf013ae18
f012f616:	e8 95 0b fd ff       	call   f01001b0 <_panic>

f012f61b <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f012f61b:	55                   	push   %ebp
f012f61c:	89 e5                	mov    %esp,%ebp
f012f61e:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012f621:	83 ec 04             	sub    $0x4,%esp
f012f624:	68 80 ae 13 f0       	push   $0xf013ae80
f012f629:	6a 7d                	push   $0x7d
f012f62b:	68 18 ae 13 f0       	push   $0xf013ae18
f012f630:	e8 7b 0b fd ff       	call   f01001b0 <_panic>

f012f635 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f012f635:	55                   	push   %ebp
f012f636:	89 e5                	mov    %esp,%ebp
f012f638:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012f63b:	83 ec 04             	sub    $0x4,%esp
f012f63e:	68 a8 ae 13 f0       	push   $0xf013aea8
f012f643:	68 86 00 00 00       	push   $0x86
f012f648:	68 18 ae 13 f0       	push   $0xf013ae18
f012f64d:	e8 5e 0b fd ff       	call   f01001b0 <_panic>

f012f652 <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012f652:	55                   	push   %ebp
f012f653:	89 e5                	mov    %esp,%ebp
f012f655:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	panic("free_block is not implemented yet");
f012f658:	83 ec 04             	sub    $0x4,%esp
f012f65b:	68 d0 ae 13 f0       	push   $0xf013aed0
f012f660:	68 90 00 00 00       	push   $0x90
f012f665:	68 18 ae 13 f0       	push   $0xf013ae18
f012f66a:	e8 41 0b fd ff       	call   f01001b0 <_panic>

f012f66f <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012f66f:	55                   	push   %ebp
f012f670:	89 e5                	mov    %esp,%ebp
f012f672:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	panic("realloc_block_FF is not implemented yet");
f012f675:	83 ec 04             	sub    $0x4,%esp
f012f678:	68 f4 ae 13 f0       	push   $0xf013aef4
f012f67d:	68 99 00 00 00       	push   $0x99
f012f682:	68 18 ae 13 f0       	push   $0xf013ae18
f012f687:	e8 24 0b fd ff       	call   f01001b0 <_panic>

f012f68c <__udivdi3>:
f012f68c:	55                   	push   %ebp
f012f68d:	57                   	push   %edi
f012f68e:	56                   	push   %esi
f012f68f:	53                   	push   %ebx
f012f690:	83 ec 1c             	sub    $0x1c,%esp
f012f693:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012f697:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012f69b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012f69f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012f6a3:	89 ca                	mov    %ecx,%edx
f012f6a5:	89 f8                	mov    %edi,%eax
f012f6a7:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012f6ab:	85 f6                	test   %esi,%esi
f012f6ad:	75 2d                	jne    f012f6dc <__udivdi3+0x50>
f012f6af:	39 cf                	cmp    %ecx,%edi
f012f6b1:	77 65                	ja     f012f718 <__udivdi3+0x8c>
f012f6b3:	89 fd                	mov    %edi,%ebp
f012f6b5:	85 ff                	test   %edi,%edi
f012f6b7:	75 0b                	jne    f012f6c4 <__udivdi3+0x38>
f012f6b9:	b8 01 00 00 00       	mov    $0x1,%eax
f012f6be:	31 d2                	xor    %edx,%edx
f012f6c0:	f7 f7                	div    %edi
f012f6c2:	89 c5                	mov    %eax,%ebp
f012f6c4:	31 d2                	xor    %edx,%edx
f012f6c6:	89 c8                	mov    %ecx,%eax
f012f6c8:	f7 f5                	div    %ebp
f012f6ca:	89 c1                	mov    %eax,%ecx
f012f6cc:	89 d8                	mov    %ebx,%eax
f012f6ce:	f7 f5                	div    %ebp
f012f6d0:	89 cf                	mov    %ecx,%edi
f012f6d2:	89 fa                	mov    %edi,%edx
f012f6d4:	83 c4 1c             	add    $0x1c,%esp
f012f6d7:	5b                   	pop    %ebx
f012f6d8:	5e                   	pop    %esi
f012f6d9:	5f                   	pop    %edi
f012f6da:	5d                   	pop    %ebp
f012f6db:	c3                   	ret    
f012f6dc:	39 ce                	cmp    %ecx,%esi
f012f6de:	77 28                	ja     f012f708 <__udivdi3+0x7c>
f012f6e0:	0f bd fe             	bsr    %esi,%edi
f012f6e3:	83 f7 1f             	xor    $0x1f,%edi
f012f6e6:	75 40                	jne    f012f728 <__udivdi3+0x9c>
f012f6e8:	39 ce                	cmp    %ecx,%esi
f012f6ea:	72 0a                	jb     f012f6f6 <__udivdi3+0x6a>
f012f6ec:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012f6f0:	0f 87 9e 00 00 00    	ja     f012f794 <__udivdi3+0x108>
f012f6f6:	b8 01 00 00 00       	mov    $0x1,%eax
f012f6fb:	89 fa                	mov    %edi,%edx
f012f6fd:	83 c4 1c             	add    $0x1c,%esp
f012f700:	5b                   	pop    %ebx
f012f701:	5e                   	pop    %esi
f012f702:	5f                   	pop    %edi
f012f703:	5d                   	pop    %ebp
f012f704:	c3                   	ret    
f012f705:	8d 76 00             	lea    0x0(%esi),%esi
f012f708:	31 ff                	xor    %edi,%edi
f012f70a:	31 c0                	xor    %eax,%eax
f012f70c:	89 fa                	mov    %edi,%edx
f012f70e:	83 c4 1c             	add    $0x1c,%esp
f012f711:	5b                   	pop    %ebx
f012f712:	5e                   	pop    %esi
f012f713:	5f                   	pop    %edi
f012f714:	5d                   	pop    %ebp
f012f715:	c3                   	ret    
f012f716:	66 90                	xchg   %ax,%ax
f012f718:	89 d8                	mov    %ebx,%eax
f012f71a:	f7 f7                	div    %edi
f012f71c:	31 ff                	xor    %edi,%edi
f012f71e:	89 fa                	mov    %edi,%edx
f012f720:	83 c4 1c             	add    $0x1c,%esp
f012f723:	5b                   	pop    %ebx
f012f724:	5e                   	pop    %esi
f012f725:	5f                   	pop    %edi
f012f726:	5d                   	pop    %ebp
f012f727:	c3                   	ret    
f012f728:	bd 20 00 00 00       	mov    $0x20,%ebp
f012f72d:	89 eb                	mov    %ebp,%ebx
f012f72f:	29 fb                	sub    %edi,%ebx
f012f731:	89 f9                	mov    %edi,%ecx
f012f733:	d3 e6                	shl    %cl,%esi
f012f735:	89 c5                	mov    %eax,%ebp
f012f737:	88 d9                	mov    %bl,%cl
f012f739:	d3 ed                	shr    %cl,%ebp
f012f73b:	89 e9                	mov    %ebp,%ecx
f012f73d:	09 f1                	or     %esi,%ecx
f012f73f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012f743:	89 f9                	mov    %edi,%ecx
f012f745:	d3 e0                	shl    %cl,%eax
f012f747:	89 c5                	mov    %eax,%ebp
f012f749:	89 d6                	mov    %edx,%esi
f012f74b:	88 d9                	mov    %bl,%cl
f012f74d:	d3 ee                	shr    %cl,%esi
f012f74f:	89 f9                	mov    %edi,%ecx
f012f751:	d3 e2                	shl    %cl,%edx
f012f753:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f757:	88 d9                	mov    %bl,%cl
f012f759:	d3 e8                	shr    %cl,%eax
f012f75b:	09 c2                	or     %eax,%edx
f012f75d:	89 d0                	mov    %edx,%eax
f012f75f:	89 f2                	mov    %esi,%edx
f012f761:	f7 74 24 0c          	divl   0xc(%esp)
f012f765:	89 d6                	mov    %edx,%esi
f012f767:	89 c3                	mov    %eax,%ebx
f012f769:	f7 e5                	mul    %ebp
f012f76b:	39 d6                	cmp    %edx,%esi
f012f76d:	72 19                	jb     f012f788 <__udivdi3+0xfc>
f012f76f:	74 0b                	je     f012f77c <__udivdi3+0xf0>
f012f771:	89 d8                	mov    %ebx,%eax
f012f773:	31 ff                	xor    %edi,%edi
f012f775:	e9 58 ff ff ff       	jmp    f012f6d2 <__udivdi3+0x46>
f012f77a:	66 90                	xchg   %ax,%ax
f012f77c:	8b 54 24 08          	mov    0x8(%esp),%edx
f012f780:	89 f9                	mov    %edi,%ecx
f012f782:	d3 e2                	shl    %cl,%edx
f012f784:	39 c2                	cmp    %eax,%edx
f012f786:	73 e9                	jae    f012f771 <__udivdi3+0xe5>
f012f788:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012f78b:	31 ff                	xor    %edi,%edi
f012f78d:	e9 40 ff ff ff       	jmp    f012f6d2 <__udivdi3+0x46>
f012f792:	66 90                	xchg   %ax,%ax
f012f794:	31 c0                	xor    %eax,%eax
f012f796:	e9 37 ff ff ff       	jmp    f012f6d2 <__udivdi3+0x46>
f012f79b:	90                   	nop

f012f79c <__umoddi3>:
f012f79c:	55                   	push   %ebp
f012f79d:	57                   	push   %edi
f012f79e:	56                   	push   %esi
f012f79f:	53                   	push   %ebx
f012f7a0:	83 ec 1c             	sub    $0x1c,%esp
f012f7a3:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012f7a7:	8b 74 24 34          	mov    0x34(%esp),%esi
f012f7ab:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012f7af:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012f7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012f7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012f7bb:	89 f3                	mov    %esi,%ebx
f012f7bd:	89 fa                	mov    %edi,%edx
f012f7bf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012f7c3:	89 34 24             	mov    %esi,(%esp)
f012f7c6:	85 c0                	test   %eax,%eax
f012f7c8:	75 1a                	jne    f012f7e4 <__umoddi3+0x48>
f012f7ca:	39 f7                	cmp    %esi,%edi
f012f7cc:	0f 86 a2 00 00 00    	jbe    f012f874 <__umoddi3+0xd8>
f012f7d2:	89 c8                	mov    %ecx,%eax
f012f7d4:	89 f2                	mov    %esi,%edx
f012f7d6:	f7 f7                	div    %edi
f012f7d8:	89 d0                	mov    %edx,%eax
f012f7da:	31 d2                	xor    %edx,%edx
f012f7dc:	83 c4 1c             	add    $0x1c,%esp
f012f7df:	5b                   	pop    %ebx
f012f7e0:	5e                   	pop    %esi
f012f7e1:	5f                   	pop    %edi
f012f7e2:	5d                   	pop    %ebp
f012f7e3:	c3                   	ret    
f012f7e4:	39 f0                	cmp    %esi,%eax
f012f7e6:	0f 87 ac 00 00 00    	ja     f012f898 <__umoddi3+0xfc>
f012f7ec:	0f bd e8             	bsr    %eax,%ebp
f012f7ef:	83 f5 1f             	xor    $0x1f,%ebp
f012f7f2:	0f 84 ac 00 00 00    	je     f012f8a4 <__umoddi3+0x108>
f012f7f8:	bf 20 00 00 00       	mov    $0x20,%edi
f012f7fd:	29 ef                	sub    %ebp,%edi
f012f7ff:	89 fe                	mov    %edi,%esi
f012f801:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012f805:	89 e9                	mov    %ebp,%ecx
f012f807:	d3 e0                	shl    %cl,%eax
f012f809:	89 d7                	mov    %edx,%edi
f012f80b:	89 f1                	mov    %esi,%ecx
f012f80d:	d3 ef                	shr    %cl,%edi
f012f80f:	09 c7                	or     %eax,%edi
f012f811:	89 e9                	mov    %ebp,%ecx
f012f813:	d3 e2                	shl    %cl,%edx
f012f815:	89 14 24             	mov    %edx,(%esp)
f012f818:	89 d8                	mov    %ebx,%eax
f012f81a:	d3 e0                	shl    %cl,%eax
f012f81c:	89 c2                	mov    %eax,%edx
f012f81e:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f822:	d3 e0                	shl    %cl,%eax
f012f824:	89 44 24 04          	mov    %eax,0x4(%esp)
f012f828:	8b 44 24 08          	mov    0x8(%esp),%eax
f012f82c:	89 f1                	mov    %esi,%ecx
f012f82e:	d3 e8                	shr    %cl,%eax
f012f830:	09 d0                	or     %edx,%eax
f012f832:	d3 eb                	shr    %cl,%ebx
f012f834:	89 da                	mov    %ebx,%edx
f012f836:	f7 f7                	div    %edi
f012f838:	89 d3                	mov    %edx,%ebx
f012f83a:	f7 24 24             	mull   (%esp)
f012f83d:	89 c6                	mov    %eax,%esi
f012f83f:	89 d1                	mov    %edx,%ecx
f012f841:	39 d3                	cmp    %edx,%ebx
f012f843:	0f 82 87 00 00 00    	jb     f012f8d0 <__umoddi3+0x134>
f012f849:	0f 84 91 00 00 00    	je     f012f8e0 <__umoddi3+0x144>
f012f84f:	8b 54 24 04          	mov    0x4(%esp),%edx
f012f853:	29 f2                	sub    %esi,%edx
f012f855:	19 cb                	sbb    %ecx,%ebx
f012f857:	89 d8                	mov    %ebx,%eax
f012f859:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012f85d:	d3 e0                	shl    %cl,%eax
f012f85f:	89 e9                	mov    %ebp,%ecx
f012f861:	d3 ea                	shr    %cl,%edx
f012f863:	09 d0                	or     %edx,%eax
f012f865:	89 e9                	mov    %ebp,%ecx
f012f867:	d3 eb                	shr    %cl,%ebx
f012f869:	89 da                	mov    %ebx,%edx
f012f86b:	83 c4 1c             	add    $0x1c,%esp
f012f86e:	5b                   	pop    %ebx
f012f86f:	5e                   	pop    %esi
f012f870:	5f                   	pop    %edi
f012f871:	5d                   	pop    %ebp
f012f872:	c3                   	ret    
f012f873:	90                   	nop
f012f874:	89 fd                	mov    %edi,%ebp
f012f876:	85 ff                	test   %edi,%edi
f012f878:	75 0b                	jne    f012f885 <__umoddi3+0xe9>
f012f87a:	b8 01 00 00 00       	mov    $0x1,%eax
f012f87f:	31 d2                	xor    %edx,%edx
f012f881:	f7 f7                	div    %edi
f012f883:	89 c5                	mov    %eax,%ebp
f012f885:	89 f0                	mov    %esi,%eax
f012f887:	31 d2                	xor    %edx,%edx
f012f889:	f7 f5                	div    %ebp
f012f88b:	89 c8                	mov    %ecx,%eax
f012f88d:	f7 f5                	div    %ebp
f012f88f:	89 d0                	mov    %edx,%eax
f012f891:	e9 44 ff ff ff       	jmp    f012f7da <__umoddi3+0x3e>
f012f896:	66 90                	xchg   %ax,%ax
f012f898:	89 c8                	mov    %ecx,%eax
f012f89a:	89 f2                	mov    %esi,%edx
f012f89c:	83 c4 1c             	add    $0x1c,%esp
f012f89f:	5b                   	pop    %ebx
f012f8a0:	5e                   	pop    %esi
f012f8a1:	5f                   	pop    %edi
f012f8a2:	5d                   	pop    %ebp
f012f8a3:	c3                   	ret    
f012f8a4:	3b 04 24             	cmp    (%esp),%eax
f012f8a7:	72 06                	jb     f012f8af <__umoddi3+0x113>
f012f8a9:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012f8ad:	77 0f                	ja     f012f8be <__umoddi3+0x122>
f012f8af:	89 f2                	mov    %esi,%edx
f012f8b1:	29 f9                	sub    %edi,%ecx
f012f8b3:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012f8b7:	89 14 24             	mov    %edx,(%esp)
f012f8ba:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012f8be:	8b 44 24 04          	mov    0x4(%esp),%eax
f012f8c2:	8b 14 24             	mov    (%esp),%edx
f012f8c5:	83 c4 1c             	add    $0x1c,%esp
f012f8c8:	5b                   	pop    %ebx
f012f8c9:	5e                   	pop    %esi
f012f8ca:	5f                   	pop    %edi
f012f8cb:	5d                   	pop    %ebp
f012f8cc:	c3                   	ret    
f012f8cd:	8d 76 00             	lea    0x0(%esi),%esi
f012f8d0:	2b 04 24             	sub    (%esp),%eax
f012f8d3:	19 fa                	sbb    %edi,%edx
f012f8d5:	89 d1                	mov    %edx,%ecx
f012f8d7:	89 c6                	mov    %eax,%esi
f012f8d9:	e9 71 ff ff ff       	jmp    f012f84f <__umoddi3+0xb3>
f012f8de:	66 90                	xchg   %ax,%ax
f012f8e0:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012f8e4:	72 ea                	jb     f012f8d0 <__umoddi3+0x134>
f012f8e6:	89 d9                	mov    %ebx,%ecx
f012f8e8:	e9 62 ff ff ff       	jmp    f012f84f <__umoddi3+0xb3>
